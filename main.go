//GAE_APP_DOM_ID#www.ulapph.com
//LAST_UPGRADE#02/06/2022 01:32:00 AM PST
//TOTAL_LINES#90731
//DO NOT REMOVE ABOVE LINE///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
// ULAPPH CLOUD DESKTOP SYSTEM
// ULAPPH Cloud Desktop is an opensource web-based desktop written in Golang and other opensource libraries
// COPYRIGHT (c) 2014-2017 Edwin D. Vinas, Ulapph Cloud Desktop System
// COPYRIGHT (c) 2017-2019 Edwin D. Vinas, ULAPPH Cloud Desktop, Opensource Version
// COPYRIGHT (c) 2020-2022 Edwin D. Vinas, ULAPPH Cloud Desktop, Opensource Version, Go 1.13, Containerized
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0001
//REV DATE: 	        2014-Sep-02
//REV DESC:		Created initial system for Cloud Desktop System
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0002
//REV DATE: 	2014-Oct-08
//REV DESC:		Started public domain www.ulapph.com at GoDaddy.com
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0003
//REV DATE: 	2014-Nov-16
//REV DESC:		Added advertisements functionality using rules and timeslots
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0004
//REV DATE: 	2014-Nov-24
//REV DESC:		Added memcache logic and admin tools
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0005
//REV DATE: 	2014-Dec-14
//REV DESC:		Added people directory and profile
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0006
//REV DATE: 	2014-Dec-30
//REV DESC:		Added information database
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0007
//REV DATE: 	2015-Jan-05
//REV DESC:		Added golang slides as default content presentation
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0008
//REV DATE: 	2015-Mar-20
//REV DESC:		Added golang articles as default content presentation
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0009
//REV DATE: 	2015-May-23
//REV DESC:		Added channel capability
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0010
//REV DATE: 	2015-May-30
//REV DESC:		Code major clean-up for production release
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0011
//REV DATE: 	2015-Jun-02
//REV DESC:		Optimizations due to always $5 quotas
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0012
//REV DATE: 	2015-Jun-03
//REV DESC:		Added ULAPPH notifications of events
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0012
//REV DATE: 	2015-Jun-03
//REV DESC:		Discovered that datastore entries are being scanned by appengine; deleted and returned but focus on business-neutrality
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0013
//REV DATE: 	2015-Jul-12
//REV DESC:		Fixed access logging
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0014
//REV DATE: 	2015-Oct-03
//REV DESC:		Added chat messaging
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0015
//REV DATE: 	2015-Oct-05
//REV DESC:		Added custom configurations via ULAPPH Cloud Desktop manager tool.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0016
//REV DATE: 	2015-Oct-12
//REV DESC:		Added Music Player and Video Player.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0017
//REV DATE: 	2015-Oct-25
//REV DESC:		Added Javascript Window Manager (JSWM)
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0018
//REV DATE: 	2015-Dec-02
//REV DESC:		Integrated Paypal Buy Now buttons
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0019
//REV DATE: 	2016-Mar-31
//REV DESC:		Integrated TinyMCE
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0020
//REV DATE: 	2016-Apr-10
//REV DESC:		Integrated Access Logging on content-level
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0021
//REV DATE: 	2016-Apr-11
//REV DESC:		Integrated Daily Reports
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0022
//REV DATE: 	2016-Aug-09
//REV DESC:		Integrated Themes for Desktop and Slides
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0023
//REV DATE: 	2016-Aug-22
//REV DESC:		Added uninstall feature
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0024
//REV DATE: 	2016-Sep-06
//REV DESC:		Released ULAPPH Cloud Desktop V1
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0025
//REV DATE: 	2016-Sep-26
//REV DESC:		Added mobile web interface.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0026
//REV DATE: 	2016-Oct-25
//REV DESC:		Added re-captcha support.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0027
//REV DATE: 	2016-Nov-04
//REV DESC:		Got 79$ Custom Search bill; disabling search cse is added and limited search results.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0028
//REV DATE: 	2016-Dec-05
//REV DESC:		Added support for Swagger API & IOT
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0029
//REV DATE: 	2016-Dec-29
//REV DESC:		Added todos manager
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0030
//REV DATE: 	2017-Jan-01
//REV DESC:		Migrated channel api to firebase
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0031
//REV DATE: 	2017-Jan-02
//REV DESC:		Scrapped firebase and used basic http channel.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0032
//REV DATE: 	2017-Jan-08
//REV DESC:		Returned firebase for channel messaging.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0033
//REV DATE: 	2017-Mar-04
//REV DESC:		Integrated different public drives
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0034
//REV DATE: 	2017-Mar-12
//REV DESC:		Add Appengine Admin API
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0035
//REV DATE: 	2017-Mar-23
//REV DESC:		Disabling features that increase billing costs
//              Also started to use golang channels
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0036
//REV DATE: 	2017-Apr-04
//REV DESC:		Incorporated bleve search
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0037
//REV DATE: 	2017-May-10
//REV DESC:		Ability to setup custom website pages and incorporated sprig functions
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0038
//REV DATE: 	2017-May-31
//REV DESC:		Added descendant_tree for family tree
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0039
//REV DATE: 	2017-June-28
//REV DESC:		Made ULAPPH Cloud Desktop a free cloud desktop for all users!
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0040
//REV DATE: 	2017-July-07
//REV DESC:		Added commento as comments tool
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0041
//REV DATE: 	2017-July-08
//REV DESC:		Added feature to manually add commento on media files
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0042
//REV DATE: 	2017-July-08
//REV DESC:		Added feature to manage recent discussions
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0043
//REV DATE: 	2017-July-11
//REV DESC:		Fix issue on not spitting error when executing templates
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0044
//REV DATE: 	2017-July-12
//REV DESC:		Integrate auto installer
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0045
//REV DATE: 	2017-July-13
//REV DESC:		Automated load and sync of sticky notes
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0046
//REV DATE: 	2017-July-13
//REV DESC:		Revive topics by simply automating search to Google search
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0047
//REV DATE: 	2017-Aug-05
//REV DESC:		Generate sillyname project ID
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0048
//REV DATE: 	2017-Aug-27
//REV DESC:		Added anchor action in slides and articles
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0049
//REV DATE: 	2017-Sep-07
//REV DESC:		Fixed quiz issue on commento.js
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0050
//REV DATE: 	2017-Oct-07
//REV DESC:		Opensourced ULAPPH Cloud Desktop under Big A.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0051
//REV DATE: 	2017-Oct-15
//REV DESC:		Incorporated automated project creation and installation in appengine.
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0052
//REV DATE: 	2017-Nov-18
//REV DESC:		Added .open keyword in slides
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0053
//REV DATE: 	2017-Nov-20
//REV DESC:		Added more request details
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0054
//REV DATE: 		2018-Jan-07
//REV DESC:		Updated user_agent based from https://github.com/mssola/user_agent
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0055
//REV DATE: 		2018-Feb-22
//REV DESC:	 	Added Otto as Javascript interpreter	
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0056
//REV DATE: 		2018-Mar-04
//REV DESC:	 	Added Angular UI Tree explorer
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0057
//REV DATE: 		2018-Mar-24
//REV DESC:	 	Added cascade or tile UWM option; added def wallpaper per desktop
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0058
//REV DATE: 		2018-Mar-25
//REV DESC:	  	Added office365 API support	
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0059
//REV DATE: 		2018-Mar-25
//REV DESC:	  	Added office365 planner extract 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0060
//REV DATE: 		2018-Apr-16
//REV DESC:	  	Added d3.js support; modified RAWTEXT function to getNode 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0061
//REV DATE: 		2018-May-13
//REV DESC:	  	Export quiz or comments to excel 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0062
//REV DATE: 		2018-May-28
//REV DESC:	  	Integrate dialogflow for ULAPPH Bot
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0063
//REV DATE: 		2018-June-12
//REV DESC:	  	Search results issue; add cron to re-index missing items 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0064
//REV DATE: 		2018-June-24
//REV DESC:	  	Integrated TurnJS
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0065
//REV DATE: 		2018-July-8
//REV DESC:	  	Integrated built-in NLP logic 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0066
//REV DATE: 		2018-July-15
//REV DESC:	  	Added bot settings per uwm 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0067
//REV DATE: 		2018-July-21
//REV DESC:	  	Added desktop category/group 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0068
//REV DATE: 		2018-July-21
//REV DESC:	  	Added GoJS Org Chart 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0069
//REV DATE: 		2018-July-29
//REV DESC:	  	Added education modules 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0070
//REV DATE: 		2018-Aug-26
//REV DESC:	  	Added timelineJS generator 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0071
//REV DATE: 		2018-Oct-17
//REV DESC:	  	Image comparison logic for cctv
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0072
//REV DATE: 		2018-Nov-05
//REV DESC:	  	Upgrade photo gallery with camera capture & refined search features
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0073
//REV DATE: 		2018-Nov-25
//REV DESC:	  	Update remote control & desktop stats
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0074
//REV DATE: 		2018-Dec-09
//REV DESC:	  	Update cctv real-time captures 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0075
//REV DATE: 		2019-Jan-05
//REV DESC:	  	Update NLP using Prose 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0076
//REV DATE: 		2019-Feb-27
//REV DESC:	  	Integrated AutoML 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0077
//REV DATE: 		2019-Mar-03
//REV DESC:	  	Realtime tracker 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0078
//REV DATE: 		2019-Mar-09
//REV DESC:	  	NewsAPI integration 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0079
//REV DATE: 		2019-Aug-11
//REV DESC:	  	U00193 - Enable/disable slides/articles using DISABLED flag 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0080
//REV DATE: 		2019-Aug-17
//REV DESC:	  	Dynamic favicon icons 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0081
//REV DATE: 		2019-Aug-19
//REV DESC:	  	Added dialogflow NLP service for getting intents 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0082
//REV DATE: 		2019-Sep-18
//REV DESC:	  	Save broadcast locations in blobstore 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0083
//REV DATE: 		2019-Sep-22
//REV DESC:	  	Add trending and whats new in json format 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0084
//REV DATE: 		2019-Sep-23
//REV DESC:	  	Add workforce details 
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0085
//REV DATE: 		2019-Sep-26
//REV DESC:	  	Facebook integration  
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0086
//REV DATE: 	2020-Jan-07
//REV DESC:	  	Upgrade to latest AppEngine Go 1.12 Runtime  
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0087
//REV DATE: 	2020-Jan-08
//REV DESC:	  	Integrated IAP authentication  
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0088
//REV DATE: 	2020-Jan-09
//REV DESC:	  	Integrated Cloud Tasks  
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0089
//REV DATE: 	2020-Jan-18
//REV DESC:	  	Shifted from Appengine to Cloud Run
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0090
//REV DATE: 	2020-Jan-20
//REV DESC:	  	Integrated speech recognition
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0091
//REV DATE: 	2020-Jan-22
//REV DESC:	  	Integrated IBM Watson
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0092
//REV DATE: 	2020-Jan-22
//REV DESC:	  	Integrated OpenWeathermap API
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0093
//REV DATE: 	2020-Jan-25
//REV DESC:	  	Integrated Youtube Downloader
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0094
//REV DATE: 	2020-Feb-03
//REV DESC:	  	Integrated code minifier
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0095
//REV DATE: 	2020-Feb-14
//REV DESC:	  	Added non-cloud/local support
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0096
//REV DATE: 	2020-Feb-21
//REV DESC:	  	Added Redis labs support
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0097
//REV DATE: 	2020-Feb-29
//REV DESC:	  	Added for SSL in local server (https://gist.github.com/denji/12b3a568f092ab951456)
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0098
//REV DATE: 	2020-Mar-01
//REV DESC:	  	Incorporated SeaweedFS storage support
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0099
//REV DATE: 	2020-Mar-01
//REV DESC:	  	Incorporated NSQ Messaging
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0100
//REV DATE: 	2020-Apr-25
//REV DESC:	  	Integrated orchestrator for chatbots
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0102
//REV DATE: 	2020-Aug-23
//REV DESC:	  	Read categories from templates
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0103
//REV DATE: 	2021-Feb-27
//REV DESC:	  	Read categories from templates
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0104
//REV DATE: 	2021-March-21
//REV DESC:	  	Added gorilla websockets
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0105
//REV DATE: 	2021-March-22
//REV DESC:	  	Added local cron
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0106
//REV DATE: 	2021-April-01
//REV DESC:	  	Save URLs from slides/articles to TDSICONS
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0107
//REV DATE: 	2021-April-05
//REV DESC:	  	Incorporate Angular File Explorer
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0108
//REV DATE: 	2021-April-12
//REV DESC:	  	Incorporate regular crons in URL fetcher
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0109
//REV DATE: 	2021-April-15
//REV DESC:	  	Incorporate quotations via cron
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0110
//REV DATE: 	2021-April-26
//REV DESC:	  	Incorporate ibm watson discovery
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0111
//REV DATE: 	2021-May-2
//REV DESC:	  	Removed Google Youtube API due to compile error
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0112
//REV DATE: 	2021-Aug-3
//REV DESC:	  	Added Godaddy sub domains - search, webtop, bot
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0113
//REV DATE: 	2021-Dec-25
//REV DESC:	  	Added custom search configuration
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0114
//REV DATE: 	2022-Jan-15
//REV DESC:	  	Released new version "Barbecue"
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0115
//REV DATE: 	2022-Feb-05
//REV DESC:	  	Added shopping cart
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0116
//REV DATE: 	2022-Feb-12
//REV DESC:	  	Added /fs path for serving static pages using slides & articles
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0117
//REV DATE: 	2022-Jun-02
//REV DESC:	  	Added Gorilla mux router to support /u/{id} path
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0118
//REV DATE: 	2022-Jul-05
//REV DESC:	  	Added Android support via Termux (see ULAPPH-Android-Desktop)
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
//REV ID: 		D0119
//REV DATE: 	2022-Aug-07
//REV DESC:	  	Added Speech to Text support
//REV AUTH:		Edwin D. Vinas
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------------------------------
//List of firebase channels
//list-channels
//
//	[ok] /ulapph-firebase/<SYS_SERVER_NAME>/channel/<user-assigned-channel-string>
//		- client listens to this topic (tok.value)
//	[ok] /ulapph-firebase/<SYS_SERVER_NAME>/things/<user-assigned-channel-string> 	
//		- sends IOT data to topic	
//	[tf] /ulapph-firebase/zzz-shared/chat-worldwide/<SYS_CHAT_WORLD_ROOM_ID> 		
//		- send all chats to worldwide
//		- delete channel every eod
//	[tf] /ulapph-firebase/zzz-shared/chat-country-<ID>/<SYS_CHAT_COUNTRY_ROOM_ID> 	
//		- send all chats to country ID
//		- delete channel every eod
//	[ok] /ulapph-firebase/<SYS_SERVER_NAME>/chat-public/<SYS_CHAT_PUB_ROOM_ID> 		
//		- send all chats to this site only
//		- delete channel every eod
//	[ok] /ulapph-firebase/<SYS_SERVER_NAME>/chat-private/<generated roomID> 		
//		- send all chats to this private room ID
//---------------------------------------------------------------------------------------------
package main
import (
	//web
	"net"
	"html/template"
	"net/http"
	"path"
	"path/filepath"
	"encoding/base64"
	"encoding/json"
	"net/url"
	//formatting
	"math/rand"
	"regexp"
	"unicode"
	"unicode/utf8"
	"time"
	"bytes"
	"fmt"
	"strings"
	"strconv"
	//io processing
	"bufio"
	"io/ioutil"
	"io"
	//error processing
	"log"
	//"runtime/debug"
	"errors"
    "cloud.google.com/go/datastore"
    mailjet "github.com/mailjet/mailjet-apiv3-go"
	"google.golang.org/appengine/search"
    "google.golang.org/appengine/runtime"
    //D0086
    "cloud.google.com/go/storage"
	//third party APIs
	"github.com/edwindvinas/user_agent"
	"github.com/edwindvinas/go-humanize"
	"github.com/edwindvinas/html"
	//"google.golang.org/api/googleapi/transport"
	//D0065
	//"flag"
	//"google.golang.org/api/youtube/v3"
	"golang.org/x/net/context"
	//encryption
	"crypto/aes"
	"crypto/tls"
	"crypto/cipher"
	crand "crypto/rand"
	"mime/multipart"
	"github.com/edwindvinas/html2text"
	"github.com/edwindvinas/percent"
	//D0028
	//things api
	"github.com/edwindvinas/jsonq"
	"sort"
	//firebase
	"github.com/edwindvinas/firego.v1"
	"golang.org/x/oauth2/google"
	"crypto/rsa"
    "github.com/edwindvinas/jwt-go"
    //goquery
    "github.com/edwindvinas/goquery"
	"github.com/edwindvinas/sentences.v1/english"
	//D0033
	"golang.org/x/oauth2"
	"github.com/google/go-github/github"
	//bleve
	//D0036
	"github.com/edwindvinas/bleve"
	//D0037
	"github.com/edwindvinas/sprig"
	//D0039
	"encoding/binary"
	//D0044
	"os"
	//D0047
	"github.com/edwindvinas/sillyname-go"
	//D0055
	"github.com/edwindvinas/otto"
	//D0059
	"github.com/edwindvinas/xlsx"
	"reflect"
	//D0065
	//"github.com/edwindvinas/nlp"
	//"github.com/edwindvinas/goml/text"
	//D0071
	"github.com/edwindvinas/perceptive"
	"image"
	//D0075
	//"github.com/edwindvinas/prose.v2"
	//"github.com/edwindvinas/closestmatch"
    "github.com/edwindvinas/xurls"
    //D0087
    "cloud.google.com/go/compute/metadata"
    //D0086
    //"github.com/satori/go.uuid"
    "github.com/edwindvinas/go.uuid"
	//"github.com/patrickmn/go-cache"
    "github.com/edwindvinas/go-cache"
	//D0088
    cloudtasks "cloud.google.com/go/cloudtasks/apiv2"
    taskspb "google.golang.org/genproto/googleapis/cloud/tasks/v2"
    //D0089
    //D0091
	//"github.com/IBM/go-sdk-core/core"
    "github.com/edwindvinas/go-sdk-core/core"
	"github.com/edwindvinas/go-sdk/assistantv2"
    //D0092
    "github.com/edwindvinas/openweathermap"
    //D0093
    //"github.com/rylio/ytdl"
	"github.com/edwindvinas/ytdl"
    "google.golang.org/api/iterator"
    //D0094
    "github.com/tdewolff/minify/v2"
	"github.com/tdewolff/minify/v2/css"
	mhtml "github.com/tdewolff/minify/v2/html"
	"github.com/tdewolff/minify/v2/js"
	mjson "github.com/tdewolff/minify/v2/json"
	"github.com/tdewolff/minify/v2/svg"
	"github.com/tdewolff/minify/v2/xml"
	//D0095
    "github.com/boltdb/bolt"
    //D0096
    //"github.com/go-redis/redis/v7"
	"github.com/edwindvinas/redis/v7"
	//D0099
	//"github.com/nsqio/go-nsq"
	//D0104
	"github.com/gorilla/websocket"
	//D0105
	//"github.com/robfig/cron"
	"github.com/edwindvinas/cron"
	//D0116
	//"gopkg.in/yaml.v2"
	"github.com/edwindvinas/yaml"
	//D0117
	"github.com/gorilla/mux"
	//D0119
	speech "cloud.google.com/go/speech/apiv1"
	speechpb "google.golang.org/genproto/googleapis/cloud/speech/v1"
)
//D0117
//init function for gorilla router
func init() {
    r := mux.NewRouter()
    //D0117
    r.HandleFunc("/", root)
    r.HandleFunc("/u/{id:[0-9]+}", handleFuncUser)
    // The path "/" matches everything not matched by some other path.
    http.Handle("/", r)
}
//main function
func main() {
	//D0095
	if SYS_APPENGINE_STANDARD == false {
		fs := http.FileServer(http.Dir("static"))
		http.Handle("/static/", http.StripPrefix("/static/", fs))
	}
	//D0118
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
		fs := http.FileServer(http.Dir(SYS_STATIC_FOLDER_PATH))
		http.Handle("/android/", http.StripPrefix("/android/", fs))
	}
    //http.HandleFunc("/", root)
    //D0115
	http.HandleFunc("/products", handleFuncProducts)
	http.HandleFunc("/cart", handleFuncCart)
	http.HandleFunc("/process", handleFuncProcess)
        
    http.HandleFunc("/go", ulapphGo)
    //D0116
    http.HandleFunc("/goserve", ulapphGoServe)
    http.HandleFunc("/bible", ulapphBible)
    http.HandleFunc("/todos", ulapphTodos)
    http.HandleFunc("/gps", ulapphGPS)
    http.HandleFunc("/stream", ulapphStream)
    http.HandleFunc("/captcha", ulapphCaptcha)
    http.HandleFunc("/otto", ulapphOtto)
    http.HandleFunc("/uloc", ulapphLocal)
    http.HandleFunc("/tree", ulapphTree)
    http.HandleFunc("/store", ulapphStore)
    http.HandleFunc("/chat", ulapphChat)
    http.HandleFunc("/editor", editor)
    http.HandleFunc("/rag", ranAdsGen)
    http.HandleFunc("/rcg", ranConGen)
    http.HandleFunc("/cache", ulapphCache)
    http.HandleFunc("/search", ulapphSearch)
    http.HandleFunc("/directory", ulapphDirectory)
    http.HandleFunc("/wall", ulapphWall)
    http.HandleFunc("/guestbook", guestbook)
    http.HandleFunc("/social", social)
    //D0040
    http.HandleFunc("/comments", ulapphComments)
    http.HandleFunc("/share", share)
    http.HandleFunc("/gsearch", API_gsearch)
    //http.HandleFunc("/utube", API_utube)
    http.HandleFunc("/people", people)
    http.HandleFunc("/infodb", infodb)
    http.HandleFunc("/website", contentsAll)
    http.HandleFunc("/tools", ulapphTools)
    http.HandleFunc("/commands", ulapphCommands)
    http.HandleFunc("/people-edit", peopleEdit)
    http.HandleFunc("/contact-us", contactUs)
    http.HandleFunc("/registration", registration)
    http.HandleFunc("/orgchart", orgchart)
    http.HandleFunc("/advertisement", advertisement)
    http.HandleFunc("/create-channel", createChannel)
    http.HandleFunc("/message-channel", channelMessageHandler)
    http.HandleFunc("/logout", logout)
    http.HandleFunc("/login", login)
    http.HandleFunc("/sysmsg", sysmsg)
    http.HandleFunc("/admin-setup", adminSetup)
    http.HandleFunc("/admin-icons", adminIcons)
    http.HandleFunc("/admin-ads", adminAds)
    http.HandleFunc("/admin-slides", adminSlides)
    http.HandleFunc("/admin-articles", adminArticles)
    http.HandleFunc("/click-url/", handleClickUrl)
    //blobstore-icons
    http.HandleFunc("/serve/", handleServe)
    http.HandleFunc("/upload", handleUpload)
    //blobstore-people
    http.HandleFunc("/serve-people/", handleServePeople)
    http.HandleFunc("/upload-people", handleUploadPeople)
    //blobstore-ads
    http.HandleFunc("/serve-ads/", handleServeAds)
    http.HandleFunc("/upload-ads", handleUploadAds)
    http.HandleFunc("/click-ads/", handleClickAds)
    //golang slides & articles
    http.HandleFunc("/slides", slides)
    http.HandleFunc("/articles", articles)
    http.HandleFunc("/presenter", presenter)
    http.HandleFunc("/upload-slides", handleUploadSlides)
    http.HandleFunc("/serve-slides/", handleServeSlides)
    http.HandleFunc("/upload-articles", handleUploadArticles)
    http.HandleFunc("/serve-articles/", handleServeArticles)
    http.HandleFunc("/compile", serveCompile)
    Register("link", parseLink)
    Register("code", parseCode)
    Register("play", parseCode)
    Register("html", parseHTML)
    Register("image", parseImage)
    Register("caption", parseCaption)
    Register("iframe", parseIframe)
    Register("checkbox", parseCheckbox)
    Register("radio", parseRadio)
    Register("input", parseInput)
    Register("submit", parseSubmit)
    Register("blockquote", parseBlockquote)
    //D0048
    Register("anchor", parseAnchor)
    //D0052
    Register("open", parseOpen)
    //media
    http.HandleFunc("/media", media)
    http.HandleFunc("/upload-media", handleUploadMedia)
    http.HandleFunc("/serve-media/", handleServeMedia)
    //D0028
    //things
    http.HandleFunc("/things", ulapphThings)
    //notifications
    http.HandleFunc("/notifications", ulapphNotifs)
    //D0062
    //dialog flow ml
    //http.HandleFunc("/bot", ulapphBot)
    //D0065
    //built-in NLP logic
    //http.HandleFunc("/nlp", ulapphNlp)
    //D0091
    //ai orchestrators
    http.HandleFunc("/orch", orchestrator)
	//D0119
	//speech to text api
	http.HandleFunc("/stt", ulapphSpeechToText)
    //jswm
    http.HandleFunc("/uwm", uwm)
    http.HandleFunc("/desktop0", desktop0)
    http.HandleFunc("/desktop", desktop)
    //settings
    http.HandleFunc("/settings", settings)
    http.HandleFunc("/settings-display-screen", settingsDisplayScreen)
    //cron jobs
    http.HandleFunc("/ulapph-router", ulapphRouter)
    //oauth2 handlers
    http.HandleFunc("/oauth2/google/callback", handlerOauth2GoogleCallback)
    http.HandleFunc("/oauth2/github/callback", handlerOauth2GithubCallback)
    //D0044
    http.HandleFunc("/oauth2/admin/callback", handlerGaeAdminCallback)
    //D0058
    //http.HandleFunc("/oauth2/microsoft/call", handlerOauth2MicrosoftCall)
	//D0104
	http.HandleFunc("/ws", serveWs)
	
    http.HandleFunc("/oauth2/microsoft/callback", handlerOauth2MicrosoftCallback)
    //D0065
    //nl = nlp.New()
    /*err := nl.RegisterModel(ulapphBotNlpRes{}, ulapphBotNlp, nlp.WithTimeFormat("2006"))
    if err != nil {
        panic(err)
    }
    err = nl.Learn() // you must call Learn after all models are registered and before calling P
    if err != nil {
        panic(err)
    }*/
    if SYS_MEM_CACHE_ENABLE == true {
        //define gocache
        gocache = cache.New(5*time.Minute, 10*time.Minute)
		//flush cache
		//log.Printf("Flushed cache.")
		gocache.Flush()
        //define bolt if local
        if SYS_APPENGINE_STANDARD == false {
            // Open the my.db data file in your current directory.
            // It will be created if it doesn't exist.
            db, dberr = bolt.Open("my.db", 0600, nil)
            if dberr != nil {
                log.Fatal(dberr)
            }
            defer db.Close()
        }
    }
    //define redis labs
    if SYS_REDISLABS_CACHE_ENABLE == true {
        redisclient = redis.NewClient(&redis.Options{
            Addr:     SYS_REDIS_LABS_ADDRESS,
            //Password: os.Getenv("REDIS_PASS"),
            Password: SYS_REDIS_LABS_PASSWORD,
            DB:       0,
        })
        pong, err := redisclient.Ping().Result()
        if err != nil {
			ulapphDebug2("info", fmt.Sprintf("REDIS PING -> %v", pong))
        } else {
			ulapphDebug2("info", fmt.Sprintf("REDIS PING ERROR: %v", err))
        }
    }
    //listen server
    port := os.Getenv("PORT")
	if port == "" {
		//port = "8080"
		port = fmt.Sprintf("%v", HTTP_DEFAULT_PORT)
		//log.Printf("Defaulting to port %s", port)
	}

	if SYS_STATELESS_SERVER == true && SYS_FORCE_LISTEN_HTTPS == true {
		//D0097
		//run http
		go func() {
			//log.Printf("Listening on port %s", port)
			//log.Printf("Open your browser at http://localhost:%s", port)
			if err := http.ListenAndServe(":"+port, nil); err != nil {
				log.Fatalf("ERROR: %v", err)
			}
		}()
		//run https
		//log.Printf("Listening on port %v", HTTPS_DEFAULT_PORT)
		//log.Printf("Open your browser at https://localhost:%v", HTTPS_DEFAULT_PORT)
		err := http.ListenAndServeTLS(":"+HTTPS_DEFAULT_PORT, "server.crt", "server.key", nil)
		if err != nil {
			log.Fatal("ListenAndServe: ", err)
		}
	} else {
		//log.Printf("Listening on port %s", port)
		//log.Printf("Open your browser at http://localhost:%s", port)
		if err := http.ListenAndServe(":"+port, nil); err != nil {
			log.Fatalf("ERROR: %v", err)
		}
	}
	//Run crons
	//D0105
	if SYS_RUNTIME_PLATFORM == "local" {
		//cronJob := cron.New()
		if SYS_EARTHQUAKE_MON == true {
			cronJob.AddFunc("30 * * * * *", func() {
				fmt.Println("CRON: Every 30 minutes...") 
				//TASK_MEMCACHER_URLFETCH_philvolcs_EQ
				//ulapph-router?RTR_FUNC=CACHE_URL_FETCH_01
				URL := fmt.Sprintf("ulapph-router?RTR_FUNC=CACHE_URL_FETCH_01")
				req, err := http.NewRequest("GET", URL, nil)
				req.Header.Set("Content-Type", "text/html")
				//client := urlfetch.Client(c)
				client := &http.Client{}
				_, err = client.Do(req)
				if err != nil {
					panic(err)
				}
			})
		}
		//cronJob.AddFunc("0 30 * * * *", func() { fmt.Println("Every hour on the half hour") })
		//cronJob.AddFunc("@hourly",      func() { fmt.Println("Every hour") })
		//cronJob.AddFunc("@every 1h30m", func() { fmt.Println("Every hour thirty") })
		cronJob.Start()
	}

}
//contants configs
const (
	///////////////////////////////////////////////////////////////
	// BUILD PARAMETERS
	///////////////////////////////////////////////////////////////
    UCD_BUILD_STR = `BUILD_2020-10-31-21-38-34`
    ///////////////////////////////////////////////////////////////
	// ON SITE TOTAL DOWN, REDIRECT TO A DEFAULT PAGE/DOC
	// !!!CONFIG-STARTS-HERE!!!
    ///////////////////////////////////////////////////////////////
	//Indicate target runtime platform
    SYS_RUNTIME_PLATFORM = ``
	//Enable/disable logs debugging
    SYS_DEBUGGER_MODE = false
	//Force SSL listen
    SYS_FORCE_LISTEN_HTTPS = true
	//Default secure port
    HTTPS_DEFAULT_PORT = `443`
    HTTP_DEFAULT_PORT = `8080`
    //For appengine standard install only
    //If this is true, STATELESS should be false
    SYS_APPENGINE_STANDARD = true
    //Stateless - no access to cloud storage
    SYS_STATELESS_SERVER = false
	//Deployed as container
    SYS_CONTAINER_ENV = false
	//Use fixed ip if stateless
    SYS_FIXED_IP_ADDRESS = `ulapph.com`
	//If no registration needed; allUsers allowed
    SYS_NOREG_FIXED_USER = ``
	//Enabled/disabled login screen (stateless)
    SYS_LOGIN_SCREEN_ENABLED = false
	//D0102
    SYS_DESKTOP_CATEGORY_TEMPLATE = true
	//Fix admin/pass for stateless
    ADMIN_ACCOUNT = ``
    ADMIN_PASSWORD = ``
	//Use fix token if stateless
    SYS_FIXED_TOKEN = ``
	//Enable/disable boltdb
    SYS_BOLT_ENABLED = false
	//D0098
	//Enable/disable SeaweedFS storage
    SYS_SWFS_ENABLED = true
	//URL of SeaweedFS Server
    SYS_SWFS_URL_FID = `http://localhost:9333/dir/assign`
	//URL of Tiedot Server
    SYS_TIEDOT_DB_URL = `http://localhost:6060`
	//D0099
	//NSQ Realtime Messaging (for local)
	//D0118
    	SYS_STATIC_FOLDER_PATH = ``
	//Path for Android termux indexed music, videos and pics
    	SYS_STATIC_FOLDER_PATH_INDEX = ``
    SYS_NSQ_MESSAGING = false
    SYS_NSQ_HOST_PORT = `http://127.0.0.1:4151`
    SYS_NSQ_CCTV_TOPIC = `local_cctv_topic`
	//Youtube channel showing how to use the current version
    SYS_TUTORIALS_CHANNEL = `https://goo.gl/UnWu5I`
	//uninstaller admin key
    SYS_UNINSTALL_KEY = ``
	//default issue page
    SYS_DOWN_ENABLE = false
	//change url to https
    SYS_CHG_HTTPS = true
	//enable https
    SYS_HTTPS = true
	//default start menu
    SYS_DEFAULT_MENU_GIT = `https://raw.githubusercontent.com/edwindvinas/ULAPPH-Cloud-Desktop/master/ULAPPH%20Cloud%20Desktop%20System%20Start%20Menu`
    DEFAULT_DOWN_URL = `/static/img/overquota.png`
	//overquota additional info message
    ADDTL_QUOTA_ERR_MSG = ``
    ///////////////////////////////////////////////////////////////
	// CUSTOM PARAMETERS (MAIN)
	///////////////////////////////////////////////////////////////
	//cloud name
	CLOUD_NAME = "ULAPPH"
	COMPANY_ID = "BSIDEV"
	//server nick name
    SYS_SERVER_NAME = `ulapph-demo`
    //D0089
    //set default sites server
    SYS_SEARCH_SERVER = ``
    APP_DESC = `ULAPPH Demo`
    SITE_SLOGAN = ``
	//referral id
    //SYS_REFERRAL_ID = ``
	//app buttons
    APP_LEFT_BUTTON = `Slides`
    APP_RIGHT_BUTTON = `Articles`
    APP_TOP_BUTTON = `Help`
    APP_BOTTOM_BUTTON = `About`
    APP_PLAY_BUTTON = `Index`
	//current version
	SYS_VERSION = 1
	// admin/programmer/superuser email (only this user can access admin-setup)
    ADMMAIL = ``
	// system email log
    SYSMAIL = ``
	// advertisements email log
    ADSMAIL = ``
	// reports email log
    REPMAIL = ``
	// customer feedback email
    FDBKMAIL = ``
	// premium/super user flag to disable/enable certain features
    SYS_SUPER_USER = true
	//domain referer match
	domRefMatchG   = "http://www.ulapph.com/"
	domRefMatchS   = "https://www.ulapph.com/"
	domRefMatchLO   = "http://www.ulapph.com/"
	googleRefMatchG   = ".google.com/"
    googleRefMatchS   = ".google.com/"
	//D0080
    DEFAULT_FAVICON = `/static/img/favicon.ico`
	//playground enabled
    PlayEnabled = true
    //D0088
    SYS_QUEUE_LOC = `us-central1`
    SYS_QUEUE_NAME = `ulapph`
    //Needs to create queue manually: gcloud tasks queues create ulapph-queue
	//SYS_COMMON_CHAT_KB = "https://ulapph-sites.appspot.com/media?FUNC_CODE=GET_MEDIA_NC&MEDIA_ID=71&SID=TDSMEDIA-71"
    //D0089
    SYS_COMMON_CHAT_KB = "https://raw.githubusercontent.com/edwindvinas/ULAPPH-Cloud-Desktop/master/BOT/Ulapph-Bot-KB.json"
	//Crowdsourced - Common Chatbot Knowledge Base
    SYS_COMMON_CHAT_KB_CS = "TDSMEDIA-75"
    ///////////////////////////////////////////////////////////////
	// CUSTOM PARAMETERS (FLAGS)
	// Change them via Ulapph Cloud Desktop Manager VBA tool
	///////////////////////////////////////////////////////////////
	//enable/diable expanded UWM on login
    SYS_UWM_EXPANDED = true
	//bypass access to contentsAll by key
    SYS_BYPASS_PRIV_KEY = ``
	//enable/disable search engine
    SYS_SEARCHABLE = true
	//extended search flag
    SYS_EXT_SEARCHABLE = true
	//D0027
	//enable custom search(warning high bill)
    SYS_CSE_ENABLED = false
	//allow search engines before this timeslot
    SYS_SEARCH_BEF_TIME = `05:00:00`
	//enable/disable site private
    SYS_SITE_PRIVATE = true
	//enable display of default slide or article as homepage
    SYS_DISP_HOMEPAGE_CFG = true
	//enable custom home theme
    SYS_CUSTOM_HOME_THEME = false
	//enable/disable slide/article templates
    SYS_ENABLE_TEMPLATES = true
	//enable/disable manual registration of users
    SYS_REGISTRATION_MANUAL = true
	// enable/disable auto-registration
	// set to false if you want to approve all new users
    SYS_AUTO_REG_ENABLE = false
	//slide color
    SYS_SLIDE_COLOR = ``
	//slide gradient from
    SYS_SLIDE_FROM = ``
	//slide gradient from
    SYS_SLIDE_TO = ``
	// enable/disable switching from slide to article for mobile devices
    SYS_CHK_AUTO_SL2ART = true
	//enable/disable display of 1,2,3 slides/article ads
    SYS_DISP_ADS_CONTENT = false
	//advertisement server
    SYS_DISP_ADS_HOST = ``
	//chat redirect server
    SYS_CHAT_REDIR = ``
	//chat help text
    SYS_CHAT_HELP = `https://goo.gl/vX4wdC`
	//default url for chat support
    SYS_GUEST_CHAT_URL = `https://goo.gl/lBasrn`
	//enable/disable display of alertify contents/ads at the right
    SYS_DISP_ADS_RIGHT = false
	//enable/disable social sites (contentsAll)
    //SYS_DISP_SOCIALS = false
	//max allowed comments
    SYS_MAX_SOC_COMMENTS = 100
	//re-captcha key
    SYS_RECAPTCHA_KEY = `-iSTRCM`
	//re-captcha secret
    SYS_RECAPTCHA_SECRET = ``
	//enable/disable search form (contentsAll)
    SYS_DISP_SEARCH = false
	//enable/disable motd (all)
    SYS_DISP_MOTD = true
	//enable/disable bible on guest/main desktops
    //SYS_DISP_BELIEF = true
	//link to bible or belief
    SYS_DISP_URL_BELIEF = `/bible?BIB_FUNC=biblegateway`
	//enable/disable stream on guest/main desktops
    //SYS_DISP_STREAM = true
	// enable/disable ads view/click emailer
    SYS_LOG_ADS_VIEW_MAIL = true
	// enable/disable ads/views db logger
    SYS_LOG_ADS_VIEWS = false
	//enable/disable display author of content
    SYS_DISP_AUTHOR = true
	//enable/disable about page
    SYS_DISP_ABOUT = true
	//enable/disable logo
    SYS_DISP_LOGO = `/static/img/banaosystems-login256.png`
	// enable/disable action - want to own private ulapph
    SYS_ACTION_WANT_OWN = false
	// enable/disable system messages log
    SYS_MSG_ENABLE = false
	// enable/disable admin channels messaging
    SYS_MSG_CHRT_ENABLE = true
	// enable/disable admin channels messaging (email only)
    //SYS_MSG_CHRT2_ENABLE = false
    // enable/disable regular polling for new messages
    SYS_CHECK_GBM = false
    // enable/disable regular alarm checks
    SYS_CHECK_SYS1 = false
	//enable realtime alertify notifications
    SYS_REALTIME_NOTIFS = true
	// enable disable logging of user access/activities
    SYS_LOG_ACTIVITY = false
	//enable/disable notifications to all users via channels
    SYS_MSG_CHRT_NOTIFY_ENABLE = true
	//enable/disable chat messages
    //SYS_MSG_CHRT_CHAT_ENABLE = true
	// enable/disable invite emails
    SYS_INV_ENABLE = true
	// enable/disable inquiry emails
    SYS_INQ_ENABLE = true
	// enable/disable feedback emails
    SYS_FBK_ENABLE = true
	// enable/disable presenter emails
    SYS_PRE_ENABLE = true
	// enable/disable generic emails
    SYS_GEN_MAIL_ENABLE = true
	// enable/disable reports emails
    SYS_SEND_REPORTS_ENABLE = false
	// enable/disable sharing emails
    SYS_SHR_MAIL_ENABLE = false
    //mailjet api
    SYS_MAILJET_API_KEY = ``
    SYS_MAILJET_API_SECRET = ``
	// enable/disable email stats report
    //SYS_SEND_RPT_1_ENABLE = false
	// enable/disable app caching
    SYS_APP_CACHE_ENABLE = false
	// enable/disable mem caching
    SYS_MEM_CACHE_ENABLE = true
    //D0096
    //enable/disable file GCS cache
    SYS_FILE_CACHE_ENABLE = false
    //D0096
    //enable/disable redis labs cache
    SYS_REDISLABS_CACHE_ENABLE = false
    SYS_REDIS_LABS_ADDRESS = ``
    SYS_REDIS_LABS_PASSWORD = ``
	// enable/disable check referrer
    SYS_CHECK_REFERER = true
	// enable/disable country checker (only allow PH)
    SYS_CHECK_COUNTRY = false
	// enable/disable checking if ok to run cron jobs
    SYS_CHECK_OK_TO_TUN = true
	//enable/disable earthquake monitoring
    SYS_EARTHQUAKE_MON = false
	//if earthquake mon enabled, enable/disable send to Admin
    SYS_EQ_MON_MSG = true
	//enable/disable guest login
    SYS_GUEST_LOGIN = true
	//enable/disable guest uwm
    SYS_GUEST_UWM = true
	//enable/disable sync notes to gmail
    SYS_SYNC_NOTE_MAIL = true
	//slides content
    SOCIAL_FB_COMMENT_ON = `N`
    PAGE_ACCESS_DISP_ON = `N`
    LAST_PAGE_DISP_ON = `N`
	//allow auto open slides
    SYS_OPEN_AUTO = `Y`
	//contentsall display headers
    SYS_CONTENTS_HDR_ON = `N`
	//enable ajax loader
    SYS_AJAX_LOAD_ON = `N`
	//trim content titles
	//SYS_CON_TRIM_TITLE = 25
	//firebase channels
    SYS_CHAT_PUB_ROOM_ID = ``
    SYS_CHAT_WORLD_ROOM_ID = ``
    SYS_CHAT_COUNTRY_ROOM_ID = ``
	//set uwm colors random
    SYS_UWM_RAN_COLORS = false
	//enable cctv stream on load
    SYS_CCTV_STREAM_ON = false
	//animated toolbar icons
	//SYS_TOOLBAR_ICONS_ANIM = ``
	//enable/disable local note after media upload
	//Remote Control Host List
    ///////////////////////////////////////////////////////////////
	// CUSTOM PARAMETERS (DEFAULTS)
	///////////////////////////////////////////////////////////////
	//max desktop categories
	MAX_CAT_NUM = 100000
	MAX_NUM_RECS_CURSOR_TDSADVL = 10000
	MAX_NUM_RECS_CURSOR_DISPLAY = 10000
	DEFAULT_PRESENTER_SECS = 8
	DEFAULT_INFODB_SECS = 8
    DEFAULT_NEWS_DOC_ID = 17
    DEFAULT_NEWS_ARCHIVE_DOC_ID = 18
	//content tiles (for both slide and article)
    DEFAULT_NUM_TILES_TOP = 50
	//trending & new limit
	DEFAULT_NUM_TREN_NEW = 10
	//default slide template
	//SL_TMP = ""
	//put ads every x slides
    ADS_EVERY_X_SLIDES = 3
	//fix this! some getAds2 calls have no retrieval yet
	xCountry = ""
	//expiration of memcached items w/ ads (secs)
    MC_ADS_EXPIRES_30_MIN = 1800
	MC_ADS_EXPIRES_1_DAY = 86400 //1440min * 60 secs
    MC_PEOPLE_EXPIRES_10_MIN = 600
	MC_PEOPLE_EXPIRES_2_MIN = 120
    TOT_ONLINE_EXPIRES_MIN = 1800
    GEN_CONTENT_EXPIRES = 3600
	GEN_CONTENT_EXPIRES2 = 7200 //2hour
	GEN_CONTENT_EXPIRES3 = 10800 //3hour
	GEN_CONTENT_EXPIRES4 = 13400 //4hour
	//for new users, load desktop0 default icons
    DEFAULT_DESKTOP_ICONS = `desktop0,619,625,746,748,742,440,862,615,566,567,682,567,667,583,621`
    //max dock icons
    MAX_DOCK_ICONS = 11
	//refresh desktop sticky ads/window
    DEFAULT_REFRESH_ADS_BOX = 300
	//cache special delimiter
	CACHE_STORE_DELIM = ",*,*,*"
	//max drag and drop uploader forms
    MAX_DRAG_DROP_FILES = 15
	//channels
    CHAN_HOURS_EXPR = 6
	//chat room expires
    CHAT_ROOM_HOURS_EXPR = 6
	//TDSUSERS login expiration
    LOGIN_HOURS_EXPR = 6
	//def ringtone
    DEFAULT_RING_TONE = `/static/audio/pop.wav`
    DEFAULT_CHAT_TONE = `/static/audio/pop.wav`
    DEFAULT_SLIDE_TONE = `/static/audio/page-flip-15.wav`
	//set SOUND slides on/off
    SLIDE_SOUND_SET = `ON`
	//enable/disable custom wallpapers by non-admins
    SYS_WALLP_ADMIN_ONLY = false
	//force wallpaper image
    FIXED_WALLPAPER_IMG = ``
	//Use only system wallpaper
    SYS_DEFAULT_WALLPAPER = false
    SYS_DEFAULT_WALLPAPER_IMAGE="/static/img/18CPU.jpg"
	//when no wallpaper was set, use default list (indicate list and total)
	WALLPAPERS_LIST_DEF_LST = ""
	WALLPAPERS_LIST_DEF_TOT = "20"
	//Tiles Banners
    LATEST_ARTICLES_SLIDES_BG = `/static/img/background19.png`
    PINNED_ARTICLES_SLIDES_BG = `/static/img/background12.jpg`
    TOP_ARTICLES_SLIDES_BG = `/static/img/background10.jpg`
	//End of slides/aeticles about us info
    INFO_ABOUT_US = ``
	//max url fetch lines per user
    MAX_URL_FETCH_LINES = 1000
	//Mime types list
    //MIME_TYPES_LIST_URL = "https://golang.org/misc/nacl/testdata/mime.types?m=text"
	//Pin Key
    PIN_KEY = `PK343AM`
	//Encryption key
    ENCRYPTION_KEY = ``
	//D0028
	//extended search gen key
    EXT_SEARCH_GEN_KEY = ``
	//Things API key
    THINGS_API_KEY = ``
	//Commands API key
    CMD_API_KEY = ``
	//Generic API Key
    CMD_GEN_KEY = ``
	//D0078
	//News API key
    NEWSAPI_API_KEY = ``
	//News API Default Country
    NEWSAPI_DEF_COUNTRY = `PH`
    SYS_SHOW_NEWS_EVERY_X_MINS = 10
    SYS_FETCH_NEWS_EVERY_X_MINS = 20
    //On UWM load, enable newsapi
    SYS_NEWSAPI_ENABLE_UWMLOAD = `false`
	//On UWM load, enable speech recognition
	SYS_SPEECH_RECOGNITION_ON = false
    //D0091
    //Watson Assistant API Key
    IBM_WATSON_ASS_API_KEY = ``
    IBM_WATSON_ASS_DEF_WK_ID = ``
    //D0092
    //OpenWeathermap API key
    OWM_API_KEY = ``
	//paypal	
    PAYPAL_PREMIUM_COST = ``
    PAYPAL_CURRENCY = ``
    PAYPAL_MERCHANT_ID = ``
	//general autocomplete
    GITURL_AUTOCOMP_LIST = ``
    GITURL_PUSH_LEFT = ``
    GITURL_PUSH_RIGHT = ``
    GITURL_PUSH_TOP = ``
    GITURL_PUSH_BOTTOM = ``
    //apps provider
    GITURL_PROVIDER_MSFT = ``
    GITURL_PROVIDER_DB = ``
    GITURL_PROVIDER_GOGL = ``
    //show all providers
    SYS_ALL_PROVIDERS = true
    //show ai intents
    SYS_AI_INTENTS = true
	//D0104
	//Gorilla websockets
	// Time allowed to write a message to the peer.
	//writeWait = 10 * time.Second
	writeWait = 5 * time.Second
	// Time allowed to read the next pong message from the peer.
	//pongWait = 60 * time.Second
	pongWait = 30 * time.Second
	// Send pings to peer with this period. Must be less than pongWait.
	pingPeriod = (pongWait * 9) / 10
	// Maximum message size allowed from peer.
	maxMessageSize = 512
	// Poll file for changes with this period.
	//filePeriod = 10 * time.Second
	filePeriod = 5 * time.Second
	//-----
	//D0104
	cctvTempFile = `../../cctv_image.dat`
	///////////////////////////////////////////////////////////////
	// SMS GATEWAY
	///////////////////////////////////////////////////////////////
    SEMAPHORE_API_KEY = ``
    SMS_CONTACT_NBR = ``
    SEMAPHORE_SENDER_NAME = ``
	///////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////
	// SOCIAL SITES
	///////////////////////////////////////////////////////////////
    SOCIAL_LINK_PLUS = ``
    SOCIAL_LINK_YOUTUBE = ``
    SOCIAL_LINK_FB = ``
    SOCIAL_LINK_LINKEDIN = ``
    SOCIAL_LINK_TWITTER = ``
	//ADD THIS PUB ID
    SYS_ADD_THIS_PUB_ID = ``
    //D0085
    FACEBOOK_VERIFY_TOKEN = ``
    FACEBOOK_ACCESS_TOKEN = ``
	////////////////////////////////////////////////////////////////
	// GOOGLE ADSENSE & OTHER ADS
	////////////////////////////////////////////////////////////////
    GA_AD_SERVE = false
    GA_AD_CODE_RESP = ``
    GA_AD_CODE_FTR = ``
    GA_AD_CODE_TBR = ``
    GA_AD_CODE_SDW = ``
	///////////////////////////////////////////////////////////////
	// API KEYS
	///////////////////////////////////////////////////////////////
	//Youtube Dev Key
    YOUTUBE_DEVELOPER_KEY = ``
	//Google Plus
	apiKey = ""
	plusResMax = 20
	//URL Shortener Key
    SYS_ENABLE_URL_SHORTENER = false
    apiKeyUs = ``
	//Enable firebase
    FL_FIREBASE_ENABLE = false
	//Firebase Real-time DB
    FIREBASE_URL = ``
	//Firebase server json
    FIREBASE_SERVER_JSON = ``
	//Google calendar API
	GOOGLE_CALENDAR_CRED_JSON = ``
	//D0081
	//Dialogflow Service Account
        DIALOGFLOW_SERVER_JSON = ``
	//D0076
	//AutoML service account json
    AUTOML_SERVER_JSON = ``
	//AutoML prediction
        AUTOML_PREDICT_URL = ``
	//D0033
	//MyDrives
	//Google Drive
    GOOGLE_OAUTH2_CLIENTID = ``
    GOOGLE_OAUTH2_SECRET = ``
    GOOGLE_OAUTH2_AUTH = ``
    GOOGLE_OAUTH2_TOKEN = ``
    GOOGLE_OAUTH2_STATE = ``
	//GAE Admin API
    ADMIN_OAUTH2_CLIENTID = ``
    ADMIN_OAUTH2_SECRET = ``
	//Github
	//GITHUB_USER_NAME = ``
    GITHUB_CLIENT_ID = ``
    GITHUB_CLIENT_SECRET = ``
    GITHUB_OAUTH2_STATE = ``
    GITHUB_AUTH_URL = ``
    GITHUB_TOKEN_URL = ``
	//Microsoft
    MICROSOFT_USER_NAME = ``
    MICROSOFT_CLIENT_ID = ``
    MICROSOFT_CLIENT_SECRET = ``
    MICROSOFT_OAUTH2_STATE = ``
    MICROSOFT_OAUTH2_SCOPE = ``
    MICROSOFT_AUTH_URL = ``
    MICROSOFT_TOKEN_URL = ``

    ///////////////////////////////////////////////////////////////
	// CUSTOM PARAMETERS (TABLES)
	///////////////////////////////////////////////////////////////
	//TDSCNFG max saved toolbars
    maxTDSCNFGSaveTB = 50
	//max Bubbles that appears in carousel
    maxBubblesOnline = 30
    ///////////////////////////////////////////////////////////////
	// CUSTOM SPREADSHEETS
	///////////////////////////////////////////////////////////////
	//shared spreadsheets displayed as slides
	stocksKey = "0AkwTO3Mvx0QldDZuMnBxazUwcWdDU2M4WWZJZVh3UUE"
	quotesKey = "1E-Td1hLlyvkleJpziJsaLYQzWkkVhSVLAsWrzhlNN7Q"
		quoteSlidesURL = "/infodb?DB_FUNC=ULAPPH-QUOTATIONS&SID=UlapphQuotations"
	bibleKey = "0AkwTO3Mvx0QldFpad3BSbDFiVWhrZnZZcVRTSW8zTlE"
		bibleSlidesURL = "/infodb?DB_FUNC=ULAPPH-BIBLE&SID=UlapphBibleVerses"
	jokeKey = "1dRJZpCjK7aTfU6o1J3ytROM0L7X0Sf9fiwzItD4mXTk"
		jokeSlidesURL = "/infodb?DB_FUNC=ULAPPH-JOKES&SID=UlapphJokes"
	savingKey = "0AkwTO3Mvx0QldGN1NzRENXdSdzRJT21vT0NpR1VzZnc"
		savingSlidesURL = "/infodb?DB_FUNC=ULAPPH-SAVING&SID=UlapphSaving"
	blogKey = "0AkwTO3Mvx0QldGs0MWtVVUhwQmhmMnhLRDlNU0MycHc"
		blogSlidesURL = "/infodb?DB_FUNC=ULAPPH-BLOG&SID=UlapphBlog"
	healthKey = "0AkwTO3Mvx0QldFJkaGxoVnVISTdSaURnNklnaTF1R3c"
		healthSlidesURL = "/infodb?DB_FUNC=ULAPPH-HEALTH&SID=UlapphHealth"
	fitnessKey = "0AkwTO3Mvx0QldGNxd1VxOW9UeWtrZ2lJNVlKSHI2TlE"
		fitnessSlidesURL = "/infodb?DB_FUNC=ULAPPH-FITNESS&SID=UlapphFitness"	
	interviewKey = "0AkwTO3Mvx0QldEw5M1dxalI0M2hieHl0LTJMN25kcHc"
		interviewSlidesURL = "/infodb?DB_FUNC=ULAPPH-INTERVIEW&SID=UlapphInterview"		
	businessKey = "0AkwTO3Mvx0QldHBYYnlNUExFNGxHMWFPMVRlUTBxN2c"
		businessSlidesURL = "/infodb?DB_FUNC=ULAPPH-BUSINESS&SID=UlapphBusiness"
	lifeKey = "0AkwTO3Mvx0QldFR0TTJZaEpOekJXVFQ3OE1MRlBhNFE"
		lifeSlidesURL = "/infodb?DB_FUNC=ULAPPH-LIFE&SID=UlapphLife"
	ttopicsKey = "0AkwTO3Mvx0QldFNqcTVYQ09jVlExS19TUVZmWjFTemc"
		ttopicsSlidesURL= "/infodb?DB_FUNC=ULAPPH-TABLE-TOPICS&SID=UlapphTableTopic"
	///////////////////////////////////////////////////////////
	// MOTD SAVED MEDIA TEXT FILES
	///////////////////////////////////////////////////////////
    MOTD_1_mediaID = 688
    MOTD_1_name = `Quotations`
    MOTD_2_mediaID = 689
    MOTD_2_name = `Bible`
    MOTD_3_mediaID = 690
    MOTD_3_name = `Jokes`
    MOTD_4_mediaID = 691
    MOTD_4_name = `Saving`
    MOTD_5_mediaID = 692
    MOTD_5_name = `Blogging`
    MOTD_6_mediaID = 693
    MOTD_6_name = `Fitness & Health`
    MOTD_7_mediaID = 694
    MOTD_7_name = `Programming`
    MOTD_8_mediaID = 695
    MOTD_8_name = `Interview`
    MOTD_9_mediaID = 696
    MOTD_9_name = `Business`
    MOTD_10_mediaID = 697
    MOTD_10_name = `Life`
    MOTD_11_mediaID = 698
    MOTD_11_name = `TableTopics`
	//people
    MOTD_12_mediaID = 702
    MOTD_12_name = `People`
	//inventions
    MOTD_13_mediaID = 701
    MOTD_13_name = `Invention`
	//timeline & history
    MOTD_14_mediaID = 703
    MOTD_14_name = `Timeline`
	//general knowledge
    MOTD_15_mediaID = 700
    MOTD_15_name = `GeneralInfo`
	//culture
    MOTD_16_mediaID = 699
    MOTD_16_name = `Culture`
	///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// !!!CONFIG-ENDS-HERE!!!
///////////////////////////////////////////////////////////////		
)
//D0116
var MEM_CUSTOM_HOMEPAGE_THEME = ""
var ulapphWebYaml = new(ulapphWeb)
var sysCacheStr = map[string]string{
"SYSTEM_HOMEPAGE_SETTINGS":"",
}
//D0105
var cronJob = cron.New()
//D0096
//redis labs
var redisclient *redis.Client
//D0095
//blotdb
var db *bolt.DB
var dberr error
//memory cache
var gocache *cache.Cache
//Other variables
var FL_SHOW_CMTS = true
var FL_SHOW_AUTH = true
var FL_SHOW_ABOUT = true
var FL_SHOW_SOCIAL = true
//D0085
//var developMessegeCounter = 0
//firebase
var (
	SERVICE_ACCOUNT_EMAIL                 = ""
	PRIVATE_KEY          *rsa.PrivateKey = nil
)

var upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,

}
//D0115
//Data struct for Product table
type Product struct {
	Code string `json:"code"`
	Name string `json:"name"`
	Price float64 `json:"price"`
}

//Data struct for Cart table
type Cart struct {
	Owner string `json:"owner"`
	Code string `json:"code"`
	Name string `json:"name"`
	Price float64 `json:"price"`
	Items int64 `json:"items"`
	Status bool `json:"status"`
}

//Data struct for Total Amount and Overall Items
type CartProc struct {
	Total float64 `json:"total"`
	Rules map[string]string  `json:"rules"`
	Current []Cart `json:"current"`
}
//Data struct for Showing Rules
type CartRules struct {
	Type string `json:"type"`
	Code string  `json:"code"`
	Value string `json:"value"`
}
//D0115
//Rules for BuyThreePayTwoOnly
//If you buy 3 items, you pay only two items
//In reality this could come from a database or external config which can be updated anytime
var Rule_BuyThreePayTwoOnly = map[string]bool{"ult_small":true,
}

//Rules for BulkDiscountMoreThanThree
//The price will drop to $$ each for the first month, if the customer buys more than x items.
//In reality this could come from a database or external config which can be updated anytime
var Rule_BulkDiscountMoreThanThree = map[string]float64{"ult_large":39.90,
}

//Rules for BundleFreeForEveryItemBought
//We will bundle in a free item X free-of-charge with every Y sold
//In reality this could come from a database or external config which can be updated anytime
var Rule_BundleFreeForEveryItemBought = map[string]string{"ult_medium":"1gb",
}

//Rules for PromoCodeDiscount
//Adding the promo code X will apply a $$ discount across the board.
//In reality this could come from a database or external config which can be updated anytime
var Rule_PromoCodeDiscount = map[string]float64{"I<3AMAYSIM":10,
}
//D0015-end
//D0116-start
type ulapphWeb struct {
	Domain       string `yaml:"domain"`
	Site       string `yaml:"site"`
	Developer       string `yaml:"developer"`
	ContentsDir		string `yaml:"contentsDir"`
	TemplatesDir		string `yaml:"templatesDir"`
	Pages []PageObject `yaml:"pages"`
}

type PageObject struct {
	Page struct {
		ID string   `yaml:"id"`
		File string   `yaml:"file"`
		Type string   `yaml:"type"`
		Template string   `yaml:"template"`
		Description string   `yaml:"desc"`
		Access string   `yaml:"access"`
	} `yaml:"page"`
}
//D0116-end

//D0107
//Angular File Manager
type AfmResponseData struct {
	Result []AfmItem `json:"result"`
	Success bool `json:"success"`
	ErrorMessage string `json:"errorMsg"`
	Error string `json:"error"`
}
type AfmItem struct {
	Name string `json:"name"`
	Type string `json:"type"`
	Size int `json:"size"`
	Date string `json:"date"`
	Rights string `json:"rights"`
}
type AfmPostData struct {
	Action string `json:"action"`
	Path string `json:"path"`
}
//D0087
// app holds the Cloud IAP certificates and audience field for this app, which
// are needed to verify authentication headers set by Cloud IAP.
type app struct {
	certs map[string]string
	aud   string
}
//D0098
type SeaweedFid struct {
	Count int `json:"count"`
	Fid string `json:"fid"`
	Url string `json:"url"`
	PublicUrl string `json:"publicUrl"`
}
//D0098
type SeaweedStore struct {
	Name string `json:"name"`
	Size int `json:"size"`
	Etag string `json:"eTag"`
}
//D0070
type Timelinejs struct {
	Title TimelineTitle `json:"title"`
	AllEvents []TimelineEvent `json:"events"`
}
//D0070
type TimelineEvent struct {
	StartDate TimelineStartDate `json:"start_date"`
	EndDate TimelineEndDate `json:"end_date"`
	Media TimelineEventMedia `json:"media"`
	Text TimelineText `json:"text"`
}
//D0070
type TimelineStartDate struct {
	Year string `json:"year"`
	Month string `json:"month"`
	Day string `json:"day"`
	Hour string `json:"hour"`
	Minute string `json:"minute"`
	Second string `json:"second"`
}
//D0070
type TimelineEndDate struct {
	Year string `json:"year"`
	Month string `json:"month"`
	Day string `json:"day"`
	Hour string `json:"hour"`
	Minute string `json:"minute"`
	Second string `json:"second"`
}
//D0070
type TimelineEventMedia struct {
	Caption string `json:"caption"`
	Credit string `json:"credit"`
	Link string `json:"link"`
	URL string `json:"url"`
}
//D0070
type TimelineMedia struct {
	Caption string `json:"caption"`
	Credit string `json:"credit"`
	Link string `json:"link"`
	URL string `json:"url"`
}
//D0070
type TimelineText struct {
	Headline string `json:"headline"`
	Text string `json:"text"`
}
//D0070
type TimelineTitle struct {
	Media TimelineMedia  `json:"media"`
	Text TimelineText  `json:"text"`
}
//D0059
//extract planner
//config options
var (
	iTasks string
	iConfig string
)

//Configuration configs struct
type Configuration struct {
	TeamID		string    `json:"teamId"`
	TeamName	string    `json:"teamName"`
	PlanID		string    `json:"planId"`
	PlanName	string    `json:"planName"`
	Buckets	    []Buckets `json:"buckets"`
	Members	    []Members `json:"members"`
	Labels	    []Labels `json:"labels"`
}

//Members
type Members struct {
	MemberID	string	  `json:"memberId"`
	MemberName	string	  `json:"memberName"`
}

//Buckets
type Buckets struct {
	BucketID	string	  `json:"bucketId"`
	BucketName	string	  `json:"bucketName"`
}

//Buckets
type Labels struct {
	CatID	string	  `json:"category"`
	CatName	string	  `json:"categoryName"`
}

//Planner tasks struct
type Planner struct {
	Ocontext  		string    `json:"@odata.context"`
	OCount    		int    	  `json:"@odata.count"`
	OLink     		string    `json:"@odata.nextLink"`
	Tasks    		[]Task	  `json:"value"`
}

type Task struct {
	Oetag  			string    `json:"@odata.etag"`
	CreatedBy    	User	  `json:"createdBy"`
	PlanID    		string	  `json:"planId"`
	BucketID    	string	  `json:"bucketId"`
	Title    		string	  `json:"title"`
	OrderHint    		string	  `json:"orderHint"`
	AssigneePriority    string	  `json:"assigneePriority"`
	PercentComplete    	int	  `json:"percentComplete"`
	StartDateTime    	time.Time	  `json:"startDateTime"`
	CreatedDateTime    	time.Time	  `json:"createdDateTime"`
	DueDateTime    		time.Time	  `json:"dueDateTime"`
	HasDescription    	bool	  `json:"hasDescription"`
	PreviewType    		string	  `json:"previewType"`
	CompletedDateTime   time.Time	  `json:"completedDateTime"`
	CompletedBy    		CompletedBy	  `json:"completedBy"`
	ReferenceCount    	int	  `json:"referenceCount"`
	ChecklistItemCount    		int	  `json:"checklistItemCount"`
	ActiveChecklistItemCount    int	  `json:"activeChecklistItemCount"`
	AppliedCategories		map[string]interface{}	  `json:"appliedCategories"`
	Assignments    				map[string]interface{}	  `json:"assignments"`
	ConversationThreadId    	string	  `json:"conversationThreadId"`
	ID    						string	  `json:"id"`
}

type PUser struct {
	DisplayName    	string	  `json:"displayName"`
	ID    			string	  `json:"id"`
}

type Assignments struct {
	Items []Assignment
	
}

type Assignment struct {
	ODataType 			string `json:"@odata.type"`
	User 				User   `json:"assignedBy"`
	AssignedDateTime 	string `json:"assignedDateTime"`
	OrderHint 			string `json:"orderHint"`
}

type CompletedBy struct {
	User User `json:"user"`
}
//D0059-end

//D0062
type DFResponse struct {
  FulfillmentText string `json:"fulfillmentText"`
}
//scraper data
type Scraper struct {
	Title 		string `json:"title"`
	URL 		string `json:"url"`
	Image 		string `json:"image"`
	Text 		string `json:"text"`
}

//bleve
type Bleve struct {
	Name string
	Text string
}
//firebase user
type User struct {
	Email    string `json:"-"`
	Password string `json:"-"`
}
//search stats
type Search struct {
	Mode string
	Start    string
	End string
	Results int
	Sites int
	Elapsed float64
}
//token for channl logic
type Token struct {
	User    string `json:"-"`
	Token string `json:"-"`
}
//GPS Tracker
type datapoint struct {
	Lat float64 `json:"latitude"`
	Lon float64 `json:"longitude"`
	Time string `json:"time"`
}
//captcha
// Struct for parsing json in google's response
type googleResponse struct {
	Success    bool
	ErrorCodes []string `json:"error-codes"`
}
// url to post submitted re-captcha response to
var postURL = "https://www.google.com/recaptcha/api/siteverify"
//thing generic
type thingPayload struct {
	Data string `json:"data"`
}
//D0104
//Gorilla websocket payload
type socketPayload struct {
	Category string `json:"category"`
	URL string `json:"url"`
}
//echarts
type MyBoxItem struct {
	Value int `json:"value"`
	Name string `json:"name"`
}
type MyBox struct {
	Element string
	Name string
	Items []MyBoxItem
}
//D0033
type GithubToken struct {
	AccessToken string `json:"access_token"`
	Scope string `json:"scope"`
	TokenType string `json:"token_type"`
}
//D0058
type MicrosoftToken struct {
	AccessToken string `json:"access_token"`
	Scope string `json:"scope"`
	TokenType string `json:"token_type"`
}
//D0033
type GoogleToken struct {
	AccessToken string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresIn int `json:"expires_in"`
	TokenType string `json:"token_type"`
}
//D0033
type DriveFiles struct {
	Files []DriveFile `json:"files"`
}
//D0033
type DriveFile struct {
	IconLink string `json:"iconLink"`
	Name string `json:"name"`
	WebViewLink string `json:"webViewLink"`
}
//D0033
type Desktops struct {
	IconLink string `json:"iconLink"`
	ID string `json:"id"`
	Name string `json:"name"`
	TSource string `json:"tSource"`
	IsShared string `json:"isShared"`
	DLink string `json:"dLink"`
	DSLink string `json:"dsLink"`
	ULink string `json:"uLink"`
	USLink string `json:"usLink"`
	TLink string `json:"tLink"`
	RLink string `json:"rLink"`
	SLink string `json:"sLink"`
	//D0066
	BLink string `json:"bLink"`
	CLink string `json:"cLink"`
	//D0067
	DGrp string `json:"cGrp"`
	//D0073
	SQLink string `json:"sqLink"`
	AQLink string `json:"aqLink"`
	MQLink string `json:"mqLink"`
}

//icons
type Icons struct {
	IconLink string `json:"iconLink"`
	ID string `json:"id"`
	Name string `json:"name"`
	IName string `json:"iName"`
	ILogo string `json:"iLogo"`
	IURL string `json:"iUrl"`
}
//D0050
type NotesAll struct {
	AllNotes []Notes `json:"notes"`
}
//D0050
type Notes struct {
	ID int `json:"id"`
	Desktop string `json:"desktop"`
	Note string `json:"note"`
	Timestamp int `json:"timestamp"`
	Left string `json:"left"`
	Top string `json:"top"`
	Zindex int `json:"zindex"`
}
//D0033
type GithubRepos struct {
	Icon string `json:"icon"`
	Name string `json:"name"`
	FullName string `json:"full_name"`
	Description string `json:"description"`
	Watchers int `json:"watchers_count"`
	Stars int `json:"stargazers_count"`
	Forks int `json:"forks_count"`
	Issues int `json:"open_issues_count"`
	Language string `json:"language"`
	Size string `json:"size"`
	HtmlUrl string `json:"html_url"`
}
//D0033
type GithubTrees struct {
	Branch	string	`json:"branch,omitempty"`
	Repo	string	`json:"repo,omitempty"`
	Icon	string	`json:"icon,omitempty"`
    Path	string	`json:"path,omitempty"`
    SHA		string  `json:"sha,omitempty"`
	SHA2		string  `json:"sha2,omitempty"`
    Mode    string  `json:"mode,omitempty"`
	Size 	string 	`json:"size"`
}
//D0050
type UlapphDesktops struct {
	PK	int	`json:"pk"`
	Lat	float64	`json:"lat"`
	Lon	float64	`json:"lon"`
	Title	string	`json:"title"`
	Status		int  `json:"status"`
	Altitude		int  `json:"altitude"`
	Placement    string  `json:"placement"`
	Brand	string	`json:"brand"`
	Model	string	`json:"model"`
	AntennaModel	string	`json:"antenna_model"`
	Username	string	`json:"username"`
	Picture	string	`json:"picture"`
}
//D0042
type Discussions struct {
	IMAGE string
	TITLE string
	//CATEGORY string
	//AUTHOR template.html
	USERS template.HTML
	ACTIVITY string
	DT_UPDATE string
	COMMENTS int
	URL_DIS string
	URL_CON string
	FL_SHARED string
	DOC_STAT string
}
//D0042 - index of latest comments
type TDSCOMIDX struct {
	IID string
	SID string
	DT_FIRST string
	DT_UPDATE string
	USERS []string
	NUM_COMMENTS int
	TAGS []string
}
//D0040			
type TDSCOMMENT struct {
	CID int
	SID string
	URL string
	NAME string
	UID string
	COMMENT string
	//D0061
	SVAL string
	DEPTH int
	TIMESTAMP time.Time
	//D0042
	//DT_UPDATE string
	LATLON string
	PARENT int
}
//D0040
type Comment struct {
	ID        int       `json:"id"`
	URL       string    `json:"url"`
	Comment   string    `json:"comment"`
	Name      string    `json:"name"`
	UID      string    `json:"uid"`
	Profile      string    `json:"profile"`
	Country      string    `json:"country"`
	Timestamp time.Time `json:"timestamp"`
	Latlon      string    `json:"latlon"`
	Parent    int       `json:"parent"`
}
//D0040
type resultContainer struct {
	Status   int       `json:"-"`
	Success  bool      `json:"success"`
	Message  string    `json:"message"`
	Comments []Comment `json:"comments,omitempty"`
}
//D0065
//nlp templates
/*var ulapphBotNlp = []string{
	"{FuncType} the {ContentType} num {DocID}", //view slide 21; can also be article, media
	"{FuncType} the {ContentType} num {DocID}", //update slide 21
	"{FuncType} internal {SearchKey}", //search i, search e (internal & external search)
	"{FuncType} external {SearchKey}",
	"{FuncType} the {ContentType}", //open webapp
	"{FuncType} in {ContentType}", //recent in media
}*/
//D0065
/*type ulapphBotNlpRes struct {
	FuncType string `json:"funcType"`
	ContentType string `json:"contentType"`
	DocID       int `json:"docID"`
	SearchKey string `json:"searchKey"`
}*/
//D0065
// NL is a Natural Language Processor
/*type NL struct {
	models []*model
	naive  *text.NaiveBayes
	// Output contains the training output for the
	// NaiveBayes algorithm
	Output *bytes.Buffer
}*/
/*type model struct {
	tpy          reflect.Type
	fields       []field
	expected     [][]item
	samples      [][]byte
	timeFormat   string
	timeLocation *time.Location
}*/

/*type item struct {
	limit bool
	value []byte
	field field
}*/

/*type field struct {
	index int
	name  string
	kind  interface{}
}*/
//var nl = nlp.New() 

//D0075
/*type ProseDataNLP struct {
    Text   string
    Help   string
    Answer string
    IsRegexp string
    IsAnsOtto string
}*/
//D0075
/*type OttoDataNLP struct {
	Input string `json:"input"`
}*/

//D0075
type OttoAwareness struct {
	//D0085
    OttoJS string `json:"ottoJs"`
    OttoChannel string `json:"ottoChannel"`
	OttoReceiver string `json:"ottoReceiver"`
	OttoBotName string `json:"ottoBotName"`
	OttoUserStatus string `json:"ottoUserStatus"`
	OttoUserName string `json:"ottoUserName"`
	OttoUserEmail string `json:"ottoUserEmail"`
	OttoUserNick string `json:"ottoUserNick"`
	OttoUserGender string `json:"ottoUserGender"`
	OttoUserAge string `json:"ottoUserAge"`
	OttoUserCountry string `json:"ottoUserCountry"`
	OttoUserCity string `json:"ottoUserCity"`
	OttoUserDeviceType string `json:"ottoUserDeviceType"`
	OttoLocalTimestamp string `json:"ottoLocalTimestamp"`
	//D0084
	OttoUserDeviceId string `json:"ottoUserDeviceId"`
	OttoUserContext string `json:"ottoUserContext"`
	//dummy fields
	OttoFillerStr1 string `json:"ottoFillerStr1"`
	OttoFillerStr2 string `json:"ottoFillerStr2"`
	OttoFillerStr3 string `json:"ottoFillerStr3"`
	OttoFillerStr4 string `json:"ottoFillerStr4"`
    OttoFillerStr5 string `json:"ottoFillerStr5"`
    OttoFillerStr6 string `json:"ottoFillerStr6"`
    OttoFillerStr7 string `json:"ottoFillerStr7"`
    OttoFillerStr8 string `json:"ottoFillerStr8"`
    OttoFillerStr9 string `json:"ottoFillerStr9"`
    OttoFillerStr10 string `json:"ottoFillerStr10"`
    //counters
    OttoCounter1 string `json:"ottoCounter1"`
    OttoCounter2 string `json:"ottoCounter2"`
    OttoCounter3 string `json:"ottoCounter3"`
    //flags
    OttoFlag1 string `json:"ottoFlag1"`
    OttoFlag2 string `json:"ottoFlag2"`
    OttoFlag3 string `json:"ottoFlag3"`
}
//Watson orch response to user
//Voices: https://codepen.io/matt-west/pen/wGzuJ
type OrchResp struct {
    OrchData    string `json:"data,omitempty"`
    OrchWA      string `json:"wid,omitempty"`
    OrchLoc     string `json:"otto,omitempty"`
	OrchVoice     string `json:"voice,omitempty"`
	OrchIcon     string `json:"icon,omitempty"`
}
//D0103
//Dialogflow
type DialogflowResponse struct {
	FulfillmentMessages []message `json:"fulfillmentMessages"`
}
type message struct {
	Text textdf `json:"text"`
}
type textdf struct {
	Text []string `json:"text"`
}
//D0103
//Google Assistant
// ResponsePayload struct
type ResponsePayload struct {
	Google ResponseGoogle `json:"google"`
}

// ResponseGoogle struct
type ResponseGoogle struct {
	ExpectUserResponse bool                  `json:"expectUserResponse"`
	RichResponse       RichResponse          `json:"richResponse"`
	SystemIntent       *ResponseSystemIntent `json:"systemIntent,omitempty"`
}

// RichResponse struct
type RichResponse struct {
	Items []Item `json:"items"`
}

// Item struct
type Item struct {
	SimpleResponse SimpleResponse `json:"simpleResponse"`
}

// SimpleResponse struct
type SimpleResponse struct {
	TextToSpeech string `json:"textToSpeech"`
}
// ResponseSystemIntent struct
type ResponseSystemIntent struct {
	Intent string                   `json:"intent"`
	Data   ResponseSystemIntentData `json:"data"`
}

// ResponseSystemIntentData struct
type ResponseSystemIntentData struct {
	Type        string   `json:"@type"`
	OptContext  string   `json:"optContext"`
	Permissions []string `json:"permissions"`
}
//D0076
//AutoML payload
type AutoMLPayload struct {
	Payload AmlPayload `json:"payload"`
}

type AmlPayload struct {
	Image AmlImage `json:"image"`
}

type AmlImage struct {
	ImageBytes []byte `json:"imageBytes"`
}
//D0077
//Realtime Location Tracker
type RealtimeLocation struct {
	Geometry LocGeometry `json:"geometry"`
	Type string `json:"type"`
	Properties string `json:"properties"`
}
type LocGeometry struct {
	Type string `json:"type"`
	Coordinates []string `json:"coordinates"`
}
//D0077
type GotoMyUlapphs  struct {
	Url string `json:"url"`
	Picture string `json:"picture"`
	UserID string `json:"userid"`
	Privacy string `json:"privacy"`
}
//D0078
type NewsApiSources  struct {
	Status string `json:"status"`
	Sources []NewsSources `json:"sources"`
}
type NewsSources  struct {
	ID string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	Country string `json:"country"`
}
//D0069
//education modules
type SchoolRecord struct {
	Students []StudentRecord `json:"students"`
}
//D0069
//education modules
type StudentRecord struct {
	Student string `json:"student"`
	School string `json:"school"`
	OverallGrade string `json:"overallGrade"`
	Levels []LevelsData `json:"levels"`
}

//D0069
type LevelsData struct {
	Level string `json:"level"`
	Status string `json:"status"`
	LevelGrade string `json:"levelGrade"`
	EnrollDate string `json:"enrollDate"`
	CompletionDate string `json:"compDate"`
	SyllabusURL string `json:"syllabus"`
	ExamURL string `json:"exam"`
}
//D0069
type MasterSyllabus struct {
	Level string `json:"level"`
	Title string `json:"title"`
	Description string `json:"description"`
	LessonURL string `json:"lessonURL"`
	ExamURL string `json:"examURL"`
}
//D0081
/*type DialogflowInput struct {
	QueryInput struct {Text struct {
						Text string `json:"text"`
						Language string `json:"languageCode"`
					    } `json:"text"`
			  }`json:"queryInput"`
}*/
//D0083
//ulapph trending, whats new struct
type UlapphSources struct {
	Source string `json:"source"`
	Author string `json:"author"`
	Title string `json:"title"`
	Description string `json:"description"`
	URL string `json:"url"`
	Image string `json:"urlToImage"`
	PublishedAt string `json:"publishedAt"`
	Content string `json:"content"`
}

//D0085
type FbMessengerInput struct {
	Entry []struct {
		Time      uint64 `json:"time,omitempty"`
		Messaging []FbMessengerMessaging `json:"messaging"`
	}
}
//D0085
type FbMessengerMessaging struct {
	Sender FbMessengerMsgSender `json:"sender,omitempty"`
	Recipient FbMessengerMsgRecipient `json:"recipient,omitempty"`
	Timestamp uint64 `json:"timestamp,omitempty"`
	Message FbMessengerMsgMessage `json:"message,omitempty"`
}
type FbMessengerMsgSender struct {
	Id string `json:"id"`
}
type FbMessengerMsgRecipient struct {
	Id string `json:"id"`
}
type FbMessengerMsgMessage struct {
	Mid  string `json:"mid,omitempty"`
	Seq  uint64 `json:"seq,omitempty"`
	Text string `json:"text"`
}
//D0085
type FbMessengerMessagingImage struct {
	Sender FbMessengerMsgSender `json:"sender,omitempty"`
	Recipient FbMessengerMsgRecipient `json:"recipient,omitempty"`
	Timestamp uint64 `json:"timestamp,omitempty"`
	Message FbMessengerMsgMessageImage `json:"message,omitempty"`
}
type FbMessengerMsgMessageImage struct {
	Attachment FbMessengerMsgAttachment `json:"attachment,omitempty"`
}
type FbMessengerMsgAttachment struct {
	Type string `json:"type,omitempty"`
	Payload FbMessengerMsgPayload `json:"payload,omitempty"`
}
type FbMessengerMsgPayload struct {
	URL string `json:"url,omitempty"`
	IsReusable bool `json:"is_reusable,omitempty"`
}
///////////////////////////////////////////////////////////////	
///////////////////////////////////////////////////////////////
// RANDOMIZERS
///////////////////////////////////////////////////////////////
//random password gen
var letters = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
//random presenter uid
var lettersNumbers = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890")
//random map number
var mapNumbers = []rune("1234567890")
///////////////////////////////////////////////////////////////
// ACCOUNTS & QUOTAS
///////////////////////////////////////////////////////////////
//D0071
var FL_CHECK_SAM_QUOTA = false

//List of Accounts and Quotas
//Free Account
    var freeAccess = map[string]int{"QUOTA_SLIDES":5,"QUOTA_ARTICLES":5,"QUOTA_MEDIA":50,"QUOTA_MSG_IN":100,"QUOTA_MSG_OUT":100,}
//Bronze
    var bronzeAccess = map[string]int{"QUOTA_SLIDES":50,"QUOTA_ARTICLES":50,"QUOTA_MEDIA":500,"QUOTA_MSG_IN":500,"QUOTA_MSG_OUT":500,}
//Silver
    var silverAccess = map[string]int{"QUOTA_SLIDES":500,"QUOTA_ARTICLES":500,"QUOTA_MEDIA":1000,"QUOTA_MSG_IN":1000,"QUOTA_MSG_OUT":1000,}
//Gold
//D0071
//var goldAccess = map[string]int{"QUOTA_SLIDES":5000,"QUOTA_ARTICLES":5000,"QUOTA_MEDIA":10000,"QUOTA_MSG_IN":10000,"QUOTA_MSG_OUT":10000,}
    var goldAccess = map[string]int{"QUOTA_SLIDES":5000,"QUOTA_ARTICLES":5000,"QUOTA_MEDIA":10000,"QUOTA_MSG_IN":10000,"QUOTA_MSG_OUT":10000,}
///////////////////////////////////////////////////////////////
// BROWSERS
///////////////////////////////////////////////////////////////
//List of valid desktop displays
var isDesktop = map[string]bool{"Windows.Chrome":true,
"Windows.Opera":true,
"Windows.Firefox":true,
"Windows.Microsoft Edge":true,
"Windows.Safari":true,
"Ubuntu.Chrome":true,
"Ubuntu.Opera":true,
"Ubuntu.Firefox":true,
"Ubuntu.Safari":true,								
"Macintosh.Chrome":true,
"Macintosh.Opera":true,
"Macintosh.Firefox":true,
"Macintosh.Safari":true,
"FreeBSD.Chrome":true,
"FreeBSD.Opera":true,
"FreeBSD.Firefox":true,
"FreeBSD.Safari":true,
"X11.Chrome":true,
"X11.Opera":true,
"X11.Firefox":true,
"X11.Safari":true,
".WinHTTP":true,
}
//List of valid slidable displays
// define hash map with key and value pairs
var isSlidable = map[string]bool{"Windows.Chrome":true,
"Windows.Opera":true,
"Windows.Firefox":true,
"Windows.Internet Explorer":true,
"Windows.Microsoft Edge":true,								
"Windows.Safari":true,
"Ubuntu.Chrome":true,
"Ubuntu.Opera":true,
"Ubuntu.Firefox":true,		
"Macintosh.Chrome":true,
"Macintosh.Opera":true,
"Macintosh.Firefox":true,
"Macintosh.Safari":true,
"X11.Chrome":true,
"X11.Opera":true,
"X11.Firefox":true,
"X11.Safari":true,
"FreeBSD.Chrome":true,
"FreeBSD.Opera":true,
"FreeBSD.Firefox":true,
"FreeBSD.Safari":true,
"Linux.Chrome":false,
"Linux.Opera":false,
"Linux.Firefox":false,
"Linux.Safari":false,
"Linux.Android":false,
"Tablet.Chrome":false,
"Tablet.Opera":false,
"Tablet.Firefox":false,
"Tablet.Safari":false,
"iPhone.Chrome":false,
"iPhone.Opera":false,
"iPhone.Firefox":false,
"iPhone.Safari":false,
}
//List of valid browsers supporting Notes local
var isNotesCapable = map[string]bool{"Chrome":true,
"Safari":true,
"Firefox":false,
"Opera":true,								
}
//List of valid browsers supporting Reader editor
var isAceReaderCapable = map[string]bool{"Chrome":true,
"Safari":false,
"Firefox":false,
"Opera":true,								
}
//List of blocked ip addresses (robots)
var ipNotOk = map[string]bool{"66.249":false, //google
"66.102":false,	//google
"144.76.39.34": true,
"81.4.93.190": true,
"104.236.126.53": true,		
"163.172.66.117": false, //france
"195.48.43.238": true, //currency
}
//List of desktop colors
var uwmColors = map[string]string{"Red Theme                  ":"ff8a80,e57373,b71c1c",
"Pink Theme                 ":"FF4081,E91E63,AD1457",
"Purple Theme               ":"E040FB,BA68C8,9C27B0",
"Deep Purple Theme          ":"7C4DFF,673AB7,311B92",
"Indigo Theme               ":"536DFE,5C6BC0,1A237E",
"Blue Theme                 ":"448AFF,1976D2,0D47A1",
"Light Blue Theme           ":"40C4FF,0277BD,0D47A1",
"Cyan Theme                 ":"18FFFF,26C6DA,0097A7",
"Teal Theme                 ":"1DE9B6,4DB6AC,00796B",
"Green Theme                ":"00E676,4CAF50,1B5E20",
"Light Green Theme          ":"76FF03,8BC34A,558B2F",
"Lime Theme                 ":"C6FF00,CDDC39,827717",
"Yellow Theme               ":"FFFF00,FFEB3B,FBC02D",
"Amber Theme                ":"FFD740,FFC107,FF8F00",
"Orange Theme               ":"FFAB40,FB8C00,E65100",
"Deep Orange Theme          ":"FF6E40,FF5722,D84315",
"Brown Theme                ":"A1887F,5D4037,3E2723",
"Grey Theme                 ":"E0E0E0,757575,212121",
"Blue Grey Theme            ":"B0BEC5,607D8B,263238",
"Clouds Theme               ":"ecf0f1,bdc3c7,7f8c8d",
"Pink,Magenta,Crimson Theme ":"f472d0,d80073,a20025",
"Light Salmon Theme         ":"FFA07A,FA8072,CD5C5C",
"Khaki Theme                ":"F0E68C,BDB76B,B8860B",
"Foreign Crimson Theme      ":"C91F37,9D2933,C3272B",
"Red Orange Theme           ":"DC3023,CF000F,8F1D21",
"Brewed Mustard Theme       ":"E68364,D24D57,9D2933",
"Chestnut Rose Theme        ":"D24D57,CF3A24,CF000F",
"Cherry Blossom Theme       ":"FCC9B9,F47983,C93756",
"Peach Theme                ":"F47983,C93756,F62459",
"Wisteria Theme             ":"9B59B6,763568,5B3256",
"Light Wisteria Theme       ":"BE90D4,875F9A,5B3256",
"Dodger Blue Theme          ":"19B5FE,22A7F0,4B77BE",
"Jordy Blue Theme           ":"89C4F4,22A7F0,044F67",
"Sprout Yellow Theme        ":"7A942E,8DB255,5B8930",
"Turquoise Theme            ":"36D7B7,03A678,006442",
"Gamboge Theme              ":"FFB61E,F9690E,CA6924",
"Lightning Yellow Theme     ":"F5AB35,FFA400,D9B611",
"Cream Can Theme            ":"F5D76E,F3C13A,E08A1E",
"Pumice Theme               ":"D2D7D3,ABB7B7,757D75",
"GBR Theme                  ":"00B16A,1E8BC3,F64747",
"YGB Theme                  ":"F4D03F,00B16A,363644",
"RGB Theme                  ":"F64747,00B16A,1E8BC3",
"White & Black Theme        ":"FFFFFF,616161,000000",
"Yellow Orange Theme        ":"FFFF00,FFAB00,FF8F00",
"Red & Black Theme          ":"FF3B30,DBDDDE,4A4A4A",
"Orange & Black Theme       ":"FF9500,DBDDDE,4A4A4A",
"Neon Green Theme           ":"6EF70C,57C409,44910C",
"Neon Jiang Theme           ":"F0915C,C46B39,983E0B",
"Neon Lemon Theme           ":"F2F822,C7CC19,8B8E0C",
"Neon Gold Theme            ":"FFDD00,DBBF05,9D8A06",
}
//List of ad effects
var adsEffs = []string{"flash",			
"pulse",			
"rubberBand",		
"shake",			
"swing",			
"tada",			
"wobble",			
"jello",			
"bounceIn",		
"bounceInDown",	
"bounceInLeft",	
"bounceInRight",	
"bounceInUp",		
"bounceOut",		
"bounceOutDown",	
"bounceOutLeft",	
"bounceOutRight",	
"bounceOutUp",		
"fadeIn",			
"fadeInDown",		
"fadeInDownBig",	
"fadeInLeft",		
"fadeInLeftBig",	
"fadeInRight",		
"fadeInRightBig",	
"fadeInUp",		
"fadeInUpBig",		
"fadeOut",			
"fadeOutDown",		
"fadeOutDownBig",	
"fadeOutLeft",		
"fadeOutLeftBig",	
"fadeOutRight",	
"fadeOutRightBig",	
"fadeOutUp",		
"fadeOutUpBig",	
"flip",			
"flipInX",			
"flipInY",			
"flipOutX",		
"flipOutY",		
"lightSpeedIn",	
"lightSpeedOut",	
"rotateIn",		
"rotateInDownLeft",
"rotateInDownRight",
"rotateInUpLeft",
"rotateInUpRight",	
"rotateOut",		
"rotateOutDownLeft",
"rotateOutDownRight",
"rotateOutUpLeft",	
"rotateOutUpRight",
"slideInUp",		
"slideInDown",		
"slideInLeft",		
"slideInRight",	
"slideOutUp",		
"slideOutDown",	
"slideOutLeft",	
"slideOutRight",	
"zoomIn",			
"zoomInDown",		
"zoomInLeft",		
"zoomInRight",		
"zoomInUp",		
"zoomOut",			
"zoomOutDown",		
"zoomOutLeft",		
"zoomOutRight",	
"zoomOutUp",		
"hinge",			
"rollIn",			
"rollOut"}			
///////////////////////////////////////////////////////////////
// EXCEPTIONS, COUNTRY RESTRICTIONS
///////////////////////////////////////////////////////////////
//List of undeletable accounts - these can't be maintained in web admin-setup
    var isExceptionAccount = map[string]bool{"ulapph@gmail.com":true,}
//List of allowed search engines (note enable SYS_SEARCHABLE flag as well)
    var isSearchEngineAllowed = map[string]bool{"US.?.?":false,"CN.?.?":false,"RU.?.?":false,"UA.?.?":false,"MX.?.?":false,"TM.?.?":false,}
//List of allowed countries
    var isCountryAllowed = map[string]bool{"PH":true,"US":true,"GB":true,"UK":true,"SG":true,"BR":true,"AU":true,}
//List of disallowed countries
    var isCountryNotAllowed = map[string]bool{"RU":false,"CN":false,"UA":false}
//D0092
//D0078
//List of watson workspaces
    var xAssistantWorkspace = map[string]string{"00 - Intent Router":"a615a919-fc57-4f2c-b86c-b38a32f2e683","10 - GoogleCloudPlatformAssistant":"efe4e13b-cb4f-4b61-83f5-fa48b2177dac","20 - TechnologyArchitect":"044425a6-8511-49dd-b322-cc79e853ea69","30 - EnterpriseArchitect":"519561b6-e640-4f92-bd3c-7754656ae34c","99 - General":"833de42d-7dae-4c96-a501-96bc83d8051b",}
//List of watson avatars
    var xAssistantAvatar = map[string]string{"00 - Intent Router":"/static/img/robot.png","10 - GoogleCloudPlatformAssistant":"/static/img/bots/google-cloud-platform.png","20 - TechnologyArchitect":"/static/img/bots/technology-architect.png","30 - EnterpriseArchitect":"/static/img/bots/enterprise-architect.png","99 - General":"/static/img/bots/general-assistant.png",}
//List of desktop wallpapers
//    var uwmWallpapers = map[string]string{"NASA.gif ":"/static/img/wallpapers/NASA.gif","atoms.gif ":"/static/img/wallpapers/atoms.gif","bedroom.gif ":"/static/img/wallpapers/bedroom.gif","car.gif ":"/static/img/wallpapers/car.gif","earth.gif ":"/static/img/wallpapers/earth.gif","japanese.gif ":"/static/img/wallpapers/japanese.gif","nasainvestig.gif ":"/static/img/wallpapers/nasainvestig.gif","particles.gif ":"/static/img/wallpapers/particles.gif","ship.gif ":"/static/img/wallpapers/ship.gif","starwars.gif ":"/static/img/wallpapers/starwars.gif","universe.gif ":"/static/img/wallpapers/universe.gif", "waterfall.gif ":"/static/img/wallpapers/waterfall.gif", "wp3284841.gif ":"/static/img/wallpapers/wp3284841.gif", "beach.gif ":"/static/img/wallpapers/beach.gif", "blue-matrix.gif ":"/static/img/wallpapers/blue-matrix.gif", "chemistry.gif ":"/static/img/wallpapers/chemistry.gif", "falls.gif ":"/static/img/wallpapers/falls.gif", "golden-ratio.gif ":"/static/img/wallpapers/golden-ratio.gif",      "moon.gif ":"/static/img/wallpapers/moon.gif","neighborhood.gif ":"/static/img/wallpapers/neighborhood.gif","sea.gif ":"/static/img/wallpapers/sea.gif","shooting.gif ":"/static/img/wallpapers/shooting.gif","stripes.gif ":"/static/img/wallpapers/stripes.gif","volcano.gif ":"/static/img/wallpapers/volcano.gif","water.gif ":"/static/img/wallpapers/water.gif","2020-14.gif":"/static/img/wallpapers/2020-14.gif","2020-e20db478fb244afc9d97da6c39d289b6_zpsmjpzcvmx.gif":"/static/img/wallpapers/2020-e20db478fb244afc9d97da6c39d289b6_zpsmjpzcvmx.gif","20-20s7zJkR.gif":"/static/img/wallpapers/20-20s7zJkR.gif", "2020-1550851811_preview_Hacks 2.gif":"/static/img/wallpapers/2020-1550851811_preview_Hacks 2.gif", "2020-feature.gif":"/static/img/wallpapers/2020-feature.gif","2020-stsci-h-v1953a-f-1148x952-thumb.gif":"/static/img/wallpapers/2020-stsci-h-v1953a-f-1148x952-thumb.gif", "2020-candle-gif-1.gif":"/static/img/wallpapers/2020-candle-gif-1.gif","2020-img_1506_20191217164651.gif":"/static/img/wallpapers/2020-img_1506_20191217164651.gif","202-19b10b6c-f170-445e-b831-c07b8671e234.gif":"/static/img/wallpapers/202-19b10b6c-f170-445e-b831-c07b8671e234.gif","2020-d68e04cff42667f86d0dc43bcfb05cc6.gif":"/static/img/wallpapers/2020-d68e04cff42667f86d0dc43bcfb05cc6.gif","2020-o89059.gif":"/static/img/wallpapers/2020-o89059.gif","202-Animated-GIF-Find-and-Share-on-GIPHY.gif":"/static/img/wallpapers/202-Animated-GIF-Find-and-Share-on-GIPHY.gif","2121-29165acbd12fabfd3a49a2bf3bb57046.gif":"/static/img/wallpapers//static/img/wallpapers/2121-29165acbd12fabfd3a49a2bf3bb57046.gif","2121-6f9ade_c33b33f942d0401b8b62c2be846a13cf_mv2.gif":"/static/img/wallpapers/2121-6f9ade_c33b33f942d0401b8b62c2be846a13cf_mv2.gif","2121-8umC8xO.gif":"/static/img/wallpapers/2121-8umC8xO.gif","2121-apple.gif":"/static/img/wallpapers/2121-apple.gif","2121-b198238daf5c338efe7ed929f9a78f81.gif":"/static/img/wallpapers/2121-b198238daf5c338efe7ed929f9a78f81.gif","2121-bogdan-mb0sco-school-class-class-animated.gif":"/static/img/wallpapers/2121-bogdan-mb0sco-school-class-class-animated.gif","2121-bubble-clipart-animation-452639-8444446.gif":"/static/img/wallpapers/2121-bubble-clipart-animation-452639-8444446.gif","2121-burn_map-16.gif":"/static/img/wallpapers/2121-burn_map-16.gif","2121-class.gif":"/static/img/wallpapers/2121-class.gif","2121-coverimageanim.gif":"/static/img/wallpapers/2121-coverimageanim.gif","2121-FluxTubeAnim.gif":"/static/img/wallpapers/2121-FluxTubeAnim.gif","2121-House-with-a-movable-volume-min.gif":"/static/img/wallpapers/2121-House-with-a-movable-volume-min.gif","2121-image001.0.gif":"/static/img/wallpapers/2121-image001.0.gif","2121-Nutty+Squirrel-gelato1.gif":"/static/img/wallpapers/2121-Nutty+Squirrel-gelato1.gif","2121-Sound-of-Data-Rotterdam-Erasmusbrug.gif":"/static/img/wallpapers/2121-Sound-of-Data-Rotterdam-Erasmusbrug.gif","2121-U2-4K-Scenario.gif":"/static/img/wallpapers/2121-U2-4K-Scenario.gif","2121-Watch_one_of_the_worlds-c79b1fdbd55dddd1e254d25550b5e5ff.gif":"/static/img/wallpapers/2121-Watch_one_of_the_worlds-c79b1fdbd55dddd1e254d25550b5e5ff.gif","2121-wto9BL.gif":"/static/img/wallpapers/2121-wto9BL.gif","2121-ZCe954.gif":"/static/img/wallpapers/2121-ZCe954.gif","2222-20f8eb85e86b370933d5e5180d632a74.gif":"/static/img/wallpapers/2222-20f8eb85e86b370933d5e5180d632a74.gif","2222-4fb3-963a-96a6ea4ae7e3.gif":"/static/img/wallpapers/2222-4fb3-963a-96a6ea4ae7e3.gif","2222-BAM.0.0.gif":"/static/img/wallpapers/2222-BAM.0.0.gif","2222-ird0MR.jpg":"/static/img/wallpapers/2222-ird0MR.jpg","2222-mars_moon_gif_for_karl.gif":"/static/img/wallpapers/2222-mars_moon_gif_for_karl.gif","2222-Peter-Lowenstein-Two-Swallows-Circling-Setting-Sun-Mutare_1508144578.gif":"/static/img/wallpapers/2222-Peter-Lowenstein-Two-Swallows-Circling-Setting-Sun-Mutare_1508144578.gif","2222-sdo_flare_close-up_short.2019-09-19_15_26_27.2019-09-19_15_30_55.gif":"/static/img/wallpapers/2222-sdo_flare_close-up_short.2019-09-19_15_26_27.2019-09-19_15_30_55.gif","2222-vladimir-taucci-mars-1.gif":"/static/img/wallpapers/2222-vladimir-taucci-mars-1.gif",}
//D0117
//List of Udirects /u/{id}
var uDirects = map[string]string{}
//D0078
//List of countries
var xCountry2LatLon = map[string]string{
"AD":"42.546245,1.601554",
"AE":"23.424076,53.847818",
"AF":"33.93911,67.709953",
"AG":"17.060816,-61.796428",
"AI":"18.220554,-63.068615",
"AL":"41.153332,20.168331",
"AM":"40.069099,45.038189",
"AN":"12.226079,-69.060087",
"AO":"-11.202692,17.873887",
"AQ":"-75.250973,-0.071389",
"AR":"-38.416097,-63.616672",
"AS":"-14.270972,-170.132217",
"AT":"47.516231,14.550072",
"AU":"-25.274398,133.775136",
"AW":"12.52111,-69.968338",
"AZ":"40.143105,47.576927",
"BA":"43.915886,17.679076",
"BB":"13.193887,-59.543198",
"BD":"23.684994,90.356331",
"BE":"50.503887,4.469936",
"BF":"12.238333,-1.561593",
"BG":"42.733883,25.48583",
"BH":"25.930414,50.637772",
"BI":"-3.373056,29.918886",
"BJ":"9.30769,2.315834",
"BM":"32.321384,-64.75737",
"BN":"4.535277,114.727669",
"BO":"-16.290154,-63.588653",
"BR":"-14.235004,-51.92528",
"BS":"25.03428,-77.39628",
"BT":"27.514162,90.433601",
"BV":"-54.423199,3.413194",
"BW":"-22.328474,24.684866",
"BY":"53.709807,27.953389",
"BZ":"17.189877,-88.49765",
"CA":"56.130366,-106.346771",
"CC":"-12.164165,96.870956",
"CD":"-4.038333,21.758664",
"CF":"6.611111,20.939444",
"CG":"-0.228021,15.827659",
"CH":"46.818188,8.227512",
"CI":"7.539989,-5.54708",
"CK":"-21.236736,-159.777671",
"CL":"-35.675147,-71.542969",
"CM":"7.369722,12.354722",
"CN":"35.86166,104.195397",
"CO":"4.570868,-74.297333",
"CR":"9.748917,-83.753428",
"CU":"21.521757,-77.781167",
"CV":"16.002082,-24.013197",
"CX":"-10.447525,105.690449",
"CY":"35.126413,33.429859",
"CZ":"49.817492,15.472962",
"DE":"51.165691,10.451526",
"DJ":"11.825138,42.590275",
"DK":"56.26392,9.501785",
"DM":"15.414999,-61.370976",
"DO":"18.735693,-70.162651",
"DZ":"28.033886,1.659626",
"EC":"-1.831239,-78.183406",
"EE":"58.595272,25.013607",
"EG":"26.820553,30.802498",
"EH":"24.215527,-12.885834",
"ER":"15.179384,39.782334",
"ES":"40.463667,-3.74922",
"ET":"9.145,40.489673",
"FI":"61.92411,25.748151",
"FJ":"-16.578193,179.414413",
"FK":"-51.796253,-59.523613",
"FM":"7.425554,150.550812",
"FO":"61.892635,-6.911806",
"FR":"46.227638,2.213749",
"GA":"-0.803689,11.609444",
"GB":"55.378051,-3.435973",
"GD":"12.262776,-61.604171",
"GE":"42.315407,43.356892",
"GF":"3.933889,-53.125782",
"GG":"49.465691,-2.585278",
"GH":"7.946527,-1.023194",
"GI":"36.137741,-5.345374",
"GL":"71.706936,-42.604303",
"GM":"13.443182,-15.310139",
"GN":"9.945587,-9.696645",
"GP":"16.995971,-62.067641",
"GQ":"1.650801,10.267895",
"GR":"39.074208,21.824312",
"GS":"-54.429579,-36.587909",
"GT":"15.783471,-90.230759",
"GU":"13.444304,144.793731",
"GW":"11.803749,-15.180413",
"GY":"4.860416,-58.93018",
"GZ":"31.354676,34.308825",
"HK":"22.396428,114.109497",
"HM":"-53.08181,73.504158",
"HN":"15.199999,-86.241905",
"HR":"45.1,15.2",
"HT":"18.971187,-72.285215",
"HU":"47.162494,19.503304",
"ID":"-0.789275,113.921327",
"IE":"53.41291,-8.24389",
"IL":"31.046051,34.851612",
"IM":"54.236107,-4.548056",
"IN":"20.593684,78.96288",
"IO":"-6.343194,71.876519",
"IQ":"33.223191,43.679291",
"IR":"32.427908,53.688046",
"IS":"64.963051,-19.020835",
"IT":"41.87194,12.56738",
"JE":"49.214439,-2.13125",
"JM":"18.109581,-77.297508",
"JO":"30.585164,36.238414",
"JP":"36.204824,138.252924",
"KE":"-0.023559,37.906193",
"KG":"41.20438,74.766098",
"KH":"12.565679,104.990963",
"KI":"-3.370417,-168.734039",
"KM":"-11.875001,43.872219",
"KN":"17.357822,-62.782998",
"KP":"40.339852,127.510093",
"KR":"35.907757,127.766922",
"KW":"29.31166,47.481766",
"KY":"19.513469,-80.566956",
"KZ":"48.019573,66.923684",
"LA":"19.85627,102.495496",
"LB":"33.854721,35.862285",
"LC":"13.909444,-60.978893",
"LI":"47.166,9.555373",
"LK":"7.873054,80.771797",
"LR":"6.428055,-9.429499",
"LS":"-29.609988,28.233608",
"LT":"55.169438,23.881275",
"LU":"49.815273,6.129583",
"LV":"56.879635,24.603189",
"LY":"26.3351,17.228331",
"MA":"31.791702,-7.09262",
"MC":"43.750298,7.412841",
"MD":"47.411631,28.369885",
"ME":"42.708678,19.37439",
"MG":"-18.766947,46.869107",
"MH":"7.131474,171.184478",
"MK":"41.608635,21.745275",
"ML":"17.570692,-3.996166",
"MM":"21.913965,95.956223",
"MN":"46.862496,103.846656",
"MO":"22.198745,113.543873",
"MP":"17.33083,145.38469",
"MQ":"14.641528,-61.024174",
"MR":"21.00789,-10.940835",
"MS":"16.742498,-62.187366",
"MT":"35.937496,14.375416",
"MU":"-20.348404,57.552152",
"MV":"3.202778,73.22068",
"MW":"-13.254308,34.301525",
"MX":"23.634501,-102.552784",
"MY":"4.210484,101.975766",
"MZ":"-18.665695,35.529562",
"NA":"-22.95764,18.49041",
"NC":"-20.904305,165.618042",
"NE":"17.607789,8.081666",
"NF":"-29.040835,167.954712",
"NG":"9.081999,8.675277",
"NI":"12.865416,-85.207229",
"NL":"52.132633,5.291266",
"NO":"60.472024,8.468946",
"NP":"28.394857,84.124008",
"NR":"-0.522778,166.931503",
"NU":"-19.054445,-169.867233",
"NZ":"-40.900557,174.885971",
"OM":"21.512583,55.923255",
"PA":"8.537981,-80.782127",
"PE":"-9.189967,-75.015152",
"PF":"-17.679742,-149.406843",
"PG":"-6.314993,143.95555",
"PH":"12.879721,121.774017",
"PK":"30.375321,69.345116",
"PL":"51.919438,19.145136",
"PM":"46.941936,-56.27111",
"PN":"-24.703615,-127.439308",
"PR":"18.220833,-66.590149",
"PS":"31.952162,35.233154",
"PT":"39.399872,-8.224454",
"PW":"7.51498,134.58252",
"PY":"-23.442503,-58.443832",
"QA":"25.354826,51.183884",
"RE":"-21.115141,55.536384",
"RO":"45.943161,24.96676",
"RS":"44.016521,21.005859",
"RU":"61.52401,105.318756",
"RW":"-1.940278,29.873888",
"SA":"23.885942,45.079162",
"SB":"-9.64571,160.156194",
"SC":"-4.679574,55.491977",
"SD":"12.862807,30.217636",
"SE":"60.128161,18.643501",
"SG":"1.352083,103.819836",
"SH":"-24.143474,-10.030696",
"SI":"46.151241,14.995463",
"SJ":"77.553604,23.670272",
"SK":"48.669026,19.699024",
"SL":"8.460555,-11.779889",
"SM":"43.94236,12.457777",
"SN":"14.497401,-14.452362",
"SO":"5.152149,46.199616",
"SR":"3.919305,-56.027783",
"ST":"0.18636,6.613081",
"SV":"13.794185,-88.89653",
"SY":"34.802075,38.996815",
"SZ":"-26.522503,31.465866",
"TC":"21.694025,-71.797928",
"TD":"15.454166,18.732207",
"TF":"-49.280366,69.348557",
"TG":"8.619543,0.824782",
"TH":"15.870032,100.992541",
"TJ":"38.861034,71.276093",
"TK":"-8.967363,-171.855881",
"TL":"-8.874217,125.727539",
"TM":"38.969719,59.556278",
"TN":"33.886917,9.537499",
"TO":"-21.178986,-175.198242",
"TR":"38.963745,35.243322",
"TT":"10.691803,-61.222503",
"TV":"-7.109535,177.64933",
"TW":"23.69781,120.960515",
"TZ":"-6.369028,34.888822",
"UA":"48.379433,31.16558",
"UG":"1.373333,32.290275",
"US":"37.09024,-95.712891",
"UY":"-32.522779,-55.765835",
"UZ":"41.377491,64.585262",
"VA":"41.902916,12.453389",
"VC":"12.984305,-61.287228",
"VE":"6.42375,-66.58973",
"VG":"18.420695,-64.639968",
"VI":"18.335765,-64.896335",
"VN":"14.058324,108.277199",
"VU":"-15.376706,166.959158",
"WF":"-13.768752,-177.156097",
"WS":"-13.759029,-172.104629",
"XK":"42.602636,20.902977",
"YE":"15.552727,48.516388",
"YT":"-12.8275,45.166244",
"ZA":"-30.559482,22.937506",
"ZM":"-13.133897,27.849332",
"ZW":"-19.015438,29.154857",
}
//D0078
//List of countries
var xCountry2Name = map[string]string{
"AF":"Afghanistan",
"AX":"Aland Islands",
"AL":"Albania",
"DZ":"Algeria",
"AS":"American Samoa",
"AD":"Andorra",
"AO":"Angola",
"AI":"Anguilla",
"AQ":"Antarctica",
"AG":"Antigua & Barbuda",
"AR":"Argentina",
"AM":"Armenia",
"AW":"Aruba",
"AU":"Australia",
"AT":"Austria",
"AZ":"Azerbaijan",
"BS":"Bahamas, The",
"BH":"Bahrain",
"BD":"Bangladesh",
"BB":"Barbados",
"BY":"Belarus",
"BE":"Belgium",
"BZ":"Belize",
"BJ":"Benin",
"BM":"Bermuda",
"BT":"Bhutan",
"BO":"Bolivia",
"BQ":"Bonaire, St.Eustat, Saba",
"BA":"Bosnia and Herzegovina",
"BW":"Botswana",
"BV":"Bouvet Island",
"BR":"Brazil",
"IO":"British Indian Ocean T.",
"VG":"British Virgin Islands",
"BN":"Brunei Darussalam",
"BG":"Bulgaria",
"BF":"Burkina Faso",
"BI":"Burundi",
"CV":"Cabo Verde",
"KH":"Cambodia",
"CM":"Cameroon",
"CA":"Canada",
"KY":"Cayman Islands",
"CF":"Central African Republic",
"TD":"Chad",
"CL":"Chile",
"CN":"China",
"CX":"Christmas Island",
"CC":"Cocos (Keeling) Islands",
"CO":"Colombia",
"KM":"Comoros",
"CG":"Congo",
"CD":"Congo, Dem. Rep. of the",
"CK":"Cook Islands",
"CR":"Costa Rica",
"HR":"Croatia",
"CU":"Cuba",
"CW":"Curaçao",
"CY":"Cyprus",
"CZ":"Czech Republic",
"DK":"Denmark",
"DJ":"Djibouti",
"DM":"Dominica",
"DO":"Dominican Republic",
"TP":"East Timor (Timor-Leste)",
"EC":"Ecuador",
"EG":"Egypt",
"SV":"El Salvador",
"GQ":"Equatorial Guinea",
"ER":"Eritrea",
"EE":"Estonia",
"ET":"Ethiopia",
"EU":"European Union",
"FK":"Falkland Is. (Malvinas)",
"FO":"Faroe Islands",
"FJ":"Fiji",
"FI":"Finland",
"FR":"France",
"GF":"French Guiana",
"PF":"French Polynesia",
"TF":"French Southern Terr.",
"GA":"Gabon",
"GM":"Gambia, the",
"GE":"Georgia",
"DE":"Germany",
"GH":"Ghana",
"GI":"Gibraltar",
"GR":"Greece",
"GL":"Greenland",
"GD":"Grenada",
"GP":"Guadeloupe",
"GU":"Guam",
"GT":"Guatemala",
"GG":"Guernsey and Alderney",
"GN":"Guinea",
"GW":"Guinea-Bissau",
"GY":"Guyana",
"HT":"Haiti",
"HM":"Heard & McDonald Is.",
"VA":"Holy See (Vatican)",
"HN":"Honduras",
"HK":"Hong Kong, (China)",
"HU":"Hungary",
"IS":"Iceland",
"IN":"India",
"ID":"Indonesia",
"IR":"Iran, Islamic Republic of",
"IQ":"Iraq",
"IE":"Ireland",
"IL":"Israel",
"IT":"Italy",
"CI":"Ivory Coast (Cote d'Ivoire)",
"JM":"Jamaica",
"JP":"Japan",
"JE":"Jersey",
"JO":"Jordan",
"KZ":"Kazakhstan",
"KE":"Kenya",
"KI":"Kiribati",
"KP":"Korea Dem. People's Rep.",
"KR":"Korea, (South) Republic of",
"KV":"Kosovo",
"KW":"Kuwait",
"KG":"Kyrgyzstan",
"LA":"Lao People's Dem. Rep.",
"LV":"Latvia",
"LB":"Lebanon",
"LS":"Lesotho",
"LR":"Liberia",
"LY":"Libyan Arab Jamahiriya",
"LI":"Liechtenstein",
"LT":"Lithuania",
"LU":"Luxembourg",
"MO":"Macao, (China)",
"MK":"Macedonia, TFYR",
"MG":"Madagascar",
"MW":"Malawi",
"MY":"Malaysia",
"MV":"Maldives",
"ML":"Mali",
"MT":"Malta",
"IM":"Man, Isle of",
"MH":"Marshall Islands",
"MQ":"Martinique (FR)",
"MR":"Mauritania",
"MU":"Mauritius",
"YT":"Mayotte (FR)",
"MX":"Mexico",
"FM":"Micronesia, Fed. States of",
"MD":"Moldova, Republic of",
"MC":"Monaco",
"MN":"Mongolia",
"CS":"Montenegro",
"MS":"Montserrat",
"MA":"Morocco",
"MZ":"Mozambique",
"MM":"Myanmar (ex-Burma)",
"NA":"Namibia",
"NR":"Nauru",
"NP":"Nepal",
"NL":"Netherlands",
"AN":"Netherlands Antilles",
"NC":"New Caledonia",
"NZ":"New Zealand",
"NI":"Nicaragua",
"NE":"Niger",
"NG":"Nigeria",
"NU":"Niue",
"NF":"Norfolk Island",
"MP":"Northern Mariana Islands",
"NO":"Norway",
"OM":"Oman",
"PK":"Pakistan",
"PW":"Palau",
"PS":"Palestinian Territory",
"PA":"Panama",
"PG":"Papua New Guinea",
"PY":"Paraguay",
"PE":"Peru",
"PH":"Philippines",
"PN":"Pitcairn Island",
"PL":"Poland",
"PT":"Portugal",
"PR":"Puerto Rico",
"QA":"Qatar",
"RE":"Reunion (FR)",
"RO":"Romania",
"RU":"Russia (Russian Fed.)",
"RW":"Rwanda",
"EH":"Sahara, Western",
"BL":"Saint Barthelemy (FR)",
"SH":"Saint Helena (UK)",
"KN":"Saint Kitts and Nevis",
"LC":"Saint Lucia",
"MF":"Saint Martin (FR)",
"PM":"S Pierre & Miquelon(FR)",
"VC":"S Vincent & Grenadines",
"WS":"Samoa",
"SM":"San Marino",
"ST":"Sao Tome and Principe",
"SA":"Saudi Arabia",
"SN":"Senegal",
"RS":"Serbia",
"SC":"Seychelles",
"SL":"Sierra Leone",
"SG":"Singapore",
"SK":"Slovakia",
"SI":"Slovenia",
"SB":"Solomon Islands",
"SO":"Somalia",
"ZA":"South Africa",
"GS":"S.George & S.Sandwich",
"SS":"South Sudan",
"ES":"Spain",
"LK":"Sri Lanka (ex-Ceilan)",
"SD":"Sudan",
"SR":"Suriname",
"SJ":"Svalbard & Jan Mayen Is.",
"SZ":"Swaziland",
"SE":"Sweden",
"CH":"Switzerland",
"SY":"Syrian Arab Republic",
"TW":"Taiwan",
"TJ":"Tajikistan",
"TZ":"Tanzania, United Rep. of",
"TH":"Thailand",
"TG":"Togo",
"TK":"Tokelau",
"TO":"Tonga",
"TT":"Trinidad & Tobago",
"TN":"Tunisia",
"TR":"Turkey",
"TM":"Turkmenistan",
"TC":"Turks and Caicos Is.",
"TV":"Tuvalu",
"UG":"Uganda",
"UA":"Ukraine",
"AE":"United Arab Emirates",
"UK":"United Kingdom",
"US":"United States",
"UM":"US Minor Outlying Isl.",
"UY":"Uruguay",
"UZ":"Uzbekistan",
"VU":"Vanuatu",
"VE":"Venezuela",
"VN":"Vietnam",
"VI":"Virgin Islands, U.S.",
"WF":"Wallis and Futuna",
"YE":"Yemen",
"ZM":"Zambia",
"ZW":"Zimbabwe",	
}
//List of countries with news
var xNewsCountry2Name = map[string]string{
"AU":"Australia",
"CA":"Canada",
"PH":"Philippines",
"SG":"Singapore",
"UK":"United Kingdom",
"US":"United States",
}
///////////////////////////////////////////////////////////////
// RANDOM BIBLE
///////////////////////////////////////////////////////////////
var xBibleTot = 64
//List of Google Trends ID
var xBibleAll = map[string]int{"Gen":50,
"Exod":40,
"Lev":27,
"Num":36,
"Deut":34,
"Josh":24,
"Judg":21,
"Ruth":4,
"1Sam":31,
"2Sam":24,
"1Kgs":22,
"2Kgs":25,
"1Chr":29,
"2Chr":36,
"Ezra":10,
"Neh":13,
"Esth":10,
"Job":42,
"Ps":150,
"Prov":31,
"Eccl":12,
"Song":8,
"Isa":66,
"Jer":52,
"Lam":5,
"Ezek":48,
"Dan":12,
"Hos":14,
"Joel":3,
"Amos":9,
"Obad":1,
"Jonah":4,
"Mic":7,
"Nah":3,
"Hab":3,
"Zeph":3,
"Hag":2,
"Zech":14,
"Mal":4,
"Matt":28,
"Mark":16,
"Luke":24,
"John":21,
"Acts":28,
"Rom":16,
"1Cor":16,
"2Cor":13,
"Gal":6,
"Eph":6,
"Phil":4,
"Col":4,
"1Thess":5,
"2Thess":3,
"1Tim":6,
"2Tim":4,
"Titus":3,
"Phlm":1,
"Heb":13,
"Jas":5,
"1Pet":5,
"2Pet":3,
"1John":5,
"2John":1,
"3John":1,
"Jude":1,
"Rev":22,
}
//D0029
//todos
type Todo struct {
	Id   int64  `json:"id" datastore:"-"`
	//Owner string `json:"owner" datastore:"-"`
	Text string `json:"text" datastore:",noindex"`
	Done bool   `json:"done"`
	Created time.Time `json:"created"`
}
///////////////////////////////////////////////////////////////
// SLIDES AND ARTICLES TEMPLATES
///////////////////////////////////////////////////////////////
//golang slides
// define templates that can be executed with data inputs to substitute the fields
var (
	presentTemplates = map[string]*template.Template{
		".select-ulapph": parsePresentTemplate("select-ulapph-server.txt"),
		".social-sharing": parsePresentTemplate("social-sharing.txt"),
		".3d-message": parsePresentTemplate("display-3d-message.txt"),
		".article": parsePresentTemplate("article-template-editable.txt"),
		".article-offline": parsePresentTemplate("article-template-offline.txt"),
		".slide":   parsePresentTemplate("slides-template.txt"),
		".slide-offline":   parsePresentTemplate("slides-template-offline.txt"),
		".slide-people":   parsePresentTemplate("slides-template-people.txt"),
		".slide-quote":   parsePresentTemplate("slides-template-quote.txt"),
		".slide-stock":   parsePresentTemplate("slides-template-quote.txt"),
		".slide-default":   parsePresentTemplate("slides-template-quote.txt"),
		".style-css": parsePresentTemplate("style-css-template.txt"),
		".style-css2": parsePresentTemplate("style-css-template2.txt"),
		".jswm-style-css": parsePresentTemplate("jswm-style-template.txt"),
		".overquota": parsePresentTemplate("error-over-quota-template.txt"),
		".letterpress": parsePresentTemplate("text-effects-letterpress.txt"),
		".3d": parsePresentTemplate("text-effects-3d.txt"),
		".trent": parsePresentTemplate("text-effects-trent.txt"),
		".world": parsePresentTemplate("text-effects-world.txt"),
		".boardgame": parsePresentTemplate("text-effects-boardgame.txt"),
		".boardgame2": parsePresentTemplate("text-effects-boardgame2.txt"),
		".boardgame3": parsePresentTemplate("text-effects-boardgame3.txt"),
		".boardgame4": parsePresentTemplate("text-effects-boardgame4.txt"),
		".boardgame5": parsePresentTemplate("text-effects-boardgame5.txt"),
		".boardgame6": parsePresentTemplate("text-effects-boardgame6.txt"),
		".gloss": parsePresentTemplate("text-effects-gloss.txt"),
		".stitched": parsePresentTemplate("text-effects-stitched.txt"),
		".cuopon": parsePresentTemplate("text-effects-cuopon.txt"),
		".drawn": parsePresentTemplate("text-effects-drawn.txt"),
		".codepen1": parsePresentTemplate("text-effects-codepen1.txt"),
		".codepen2": parsePresentTemplate("text-effects-codepen2.txt"),
		".codepen3": parsePresentTemplate("text-effects-codepen3.txt"),
		".codepen4": parsePresentTemplate("text-effects-codepen4.txt"),
		".slashed": parsePresentTemplate("text-effects-slashed.txt"),
		".floor": parsePresentTemplate("text-effects-floor.txt"),
		".starwars": parsePresentTemplate("text-effects-starwars.txt"),
		".pub-uwm": parsePresentTemplate("guest-uwm-template-1.txt"),
		".able-player": parsePresentTemplate("able-player-css.txt"),
		".colors-scheme": parsePresentTemplate("colors-template.txt"),
		".able-playlist": parsePresentTemplate("able-playlist-css.txt"),	
		".countdown": parsePresentTemplate("countdown-html.txt"),
		".buttonlink": parsePresentTemplate("button-link.txt"),
		".analog-clock": parsePresentTemplate("svg-analog-clock.txt"),
		".chat-style": parsePresentTemplate("chat-style-template.txt"),
		".timezone": parsePresentTemplate("world-timezone.txt"),
		".ptree": parsePresentTemplate("syntree.txt"),
		".webrtcRec": parsePresentTemplate("webrtc-recorder.txt"),	
		".webrtcBrodAV": parsePresentTemplate("webrtc-broadcaster.txt"),
		".webrtcBrodA": parsePresentTemplate("webrtc-audio.txt"),
		".webrtcGif": parsePresentTemplate("webrtc-gif.txt"),
		".adduwm": parsePresentTemplate("adduwm-template.txt"),
		".install": parsePresentTemplate("installer-template.txt"),
		".famtree": parsePresentTemplate("famtree-template.txt"),		
		".mermaid": parsePresentTemplate("mermaid-template.txt"),	
        ".html5-term": parsePresentTemplate("html5term-template.txt"),
        ".cctv-stream": parsePresentTemplate("photo-swipe.html"),
		".cctv-stream-local": parsePresentTemplate("photo-swipe-local.html"),
		//".slides-local": parsePresentTemplate("slides-local.html"),		
		".speedtest": parsePresentTemplate("speedtest-template.txt"),
		".htmlHeaderBodyToken": parsePresentTemplate("htmlHeaderBodyToken.txt"),
		".ui-tree": parsePresentTemplate("angular-ui-tree.txt"),
		".turnjs": parsePresentTemplate2("turnjs-template.html"),
		//D0068
		".orgchart": parsePresentTemplate2("gojs-orgchart.html"),
		//D0070
		".timelinejs-gen": parsePresentTemplate2("timelinejs-generator.html"),
		".timelinejs-rep": parsePresentTemplate2("timelinejs-report.html"),
		".photo-gallery": parsePresentTemplate2("photo-gallery.html"),
		//D0099
		".timelinejs-cctv": parsePresentTemplate2("timelinejs-generator-cctv.html"),
		".timelinejs-slides": parsePresentTemplate2("timelinejs-generator-slides.html"),
		".timelinejs-articles": parsePresentTemplate2("timelinejs-generator-articles.html"),
		".timelinejs-media": parsePresentTemplate2("timelinejs-generator-media.html"),
		//D0077
		".goto-ulapph": parsePresentTemplate2("goto-select-myulapph.html"),
		".tracker-select": parsePresentTemplate2("tracker-select-user.html"),
		//D0078
		".news-sources": parsePresentTemplate2("newsapi-sources.html"),
		".chat-logs": parsePresentTemplate2("chat-bubble-logs.txt"),
		//D0098
		".login-local": parsePresentTemplate2("ulapph-local-login.html"),
		".ace-local": parsePresentTemplate2("ace-local.html"),
		//D0107
		".angular-file-manager": parsePresentTemplate2(".angular-file-manager.html"),
	}
	contactEmail      = "ulapph@gmail.com"
	gitHubCredentials = ""
)
var funcs = template.FuncMap{
        "elem": renderElem,
		"style": Style,
}
// golang
///////////////////////////////////////////////////////////////
// DATA STRUCTS
///////////////////////////////////////////////////////////////
//Temp Struct (for passing variables)
// define a universal struct to be used anywhere in the code for passing variables
type TEMPSTRUCT struct {
	NUM_FILLER1 int
    STR_FILLER1 string
	STR_FILLER2 string
	STR_FILLER3 string
	STR_FILLER4 string
	HTM_FILLER1 template.HTML
	BOOL_FILLER1 bool
}
//Temp Struct ADS (for passing variables)
// define a universal struct to be used anywhere in the code for passing variables
type TEMPSTRUCT2 struct {
	NUM_FILLER1 int
	NUM_FILLER2 int
	NUM_FILLER3 int
	NUM_FILLER4 int
	NUM_FILLER5 int
	NUM_FILLER6 int
	NUM_FILLER7 int
	NUM_FILLER8 int
	NUM_FILLER9 int
	NUM_FILLER10 int
	NUM_FILLER11 int
	NUM_FILLER12 int
	NUM_FILLER13 int
	NUM_FILLER14 int
	NUM_FILLER15 int	
	STR_FILLER1 string
	STR_FILLER2 string
	STR_FILLER3 string
	STR_FILLER4 string
	STR_FILLER5 string
	STR_FILLER6 string
	STR_FILLER7 string
	STR_FILLER8 string
	STR_FILLER9 string
	STR_FILLER10 string
	STR_FILLER11 string
	STR_FILLER12 string
	STR_FILLER13 string
	STR_FILLER14 string
    STR_FILLER15 string
    STR_FILLER16 string
    STR_FILLER17 string
	STR_FILLER18 string
	STR_FILLER19 string
	STR_FILLER20 string
	BOOL_FILLER1 bool
    BOOL_FILLER2 bool
    BOOL_FILLER3 bool
    BOOL_FILLER4 bool
	BOOL_FILLER5 bool
    BOOL_FILLER6 bool
	BOOL_FILLER7 bool
	BOOL_FILLER8 bool
	HTM_FILLER1 template.HTML
	HTM_FILLER2 template.HTML	
	HTM_FILLER3 template.HTML
	HTM_FILLER4 template.HTML
	HTM_FILLER5 template.HTML
}
//Temp Struct ADS (for passing variables)
type TEMPSTRUCT3 struct {	
	STR_FILLER1 string
	STR_FILLER2 string
	STR_FILLER3 string
	STR_FILLER4 string
	STR_FILLER5 string
	STR_FILLER6 string
	STR_FILLER7 string
	STR_FILLER8 string
	STR_FILLER9 string
	STR_FILLER10 string
	STR_FILLER11 string
	STR_FILLER12 string
	STR_FILLER13 string
	STR_FILLER14 string
	STR_FILLER15 string
	STR_FILLER16 string
	STR_FILLER17 string
	STR_FILLER18 string
	STR_FILLER19 string
	STR_FILLER20 string
	STR_FILLER21 string
	STR_FILLER22 string
	STR_FILLER23 string
	STR_FILLER24 string
}
//TDSLOGS datastore
type TDSLOGS struct {
	ACCESS_LOG_DATE string
	ACCESS_LOG_SEQ int
    ACCESS_LOG_TEXT []byte
    ACCESS_MAP_TEXT []byte
	ACCESS_LOG_CTR int
}

//TDSCATS datastore
type TDSCATS struct {
	CAT_NUM int
	CAT_NAME string
	CAT_DESC string
	CAT_SHARED string
	CAT_PASS string
	//D0067
	CAT_GRP string
}
//Channel datastore
type Channelstore struct {
    TokenID  string
    ChanID string
	IsDesktop bool
	Passcode string
	DateCreated string
	RecType string
}
//Firebase event
type ChanMessage struct {
	User string `json:"user"`
	Message string `json:"message"`
}
//Channel return token/passcode
type TestObject struct {
	Token 		string `json:"Token"`
	Passcode    string `json:"Passcode"`
}
//Minify object response
type MinifyObject struct {
    Data 		string `json:"Data"`
    OldSize     int `json:"OldSize"`
    NewSize     int `json:"NewSize"`
    Time        time.Duration `json:"Time"`
}
//System Status
// define a struct which can contain json data
type SystemStatus struct {
	CPU string `json:"CPU,omitempty"`
	RAM string `json:"RAM,omitempty"`
	TASKQUEUE string `json:"TASKQUEUE,omitempty"`
	TASKQUEUE1M string `json:"TASKQUEUE1M,omitempty"`
	CACHEHITS string `json:"CACHEHITS,omitempty"`
	CACHEMISS string `json:"CACHEMISS,omitempty"`
	CACHEITEMS string `json:"CACHEITEMS,omitempty"`
	CACHEBYTES string `json:"CACHEBYTES,omitempty"`
	COUNTER string `json:"COUNTER,omitempty"`
	ACCESS_HITS string `json:"ACCESS_HITS,omitempty"`
	ERROR_HITS string `json:"ERROR_HITS,omitempty"`
	LAST_MEDIA string `json:"LAST_MEDIA,omitempty"`
	LAST_SLIDE string `json:"LAST_SLIDE,omitempty"`
	LAST_ARTICLE string `json:"LAST_ARTICLE,omitempty"`
	TIME string `json:"TIME,omitempty"`	
	MOST_POPULAR_1 string `json:"MOST_POPULAR_1,omitempty"`	
	MOST_POPULAR_2 string `json:"MOST_POPULAR_2,omitempty"`	
	MOST_POPULAR_3 string `json:"MOST_POPULAR_3,omitempty"`	
	MOST_OS_1 	 string `json:"MOST_OS_1,omitempty"`	 	
	MOST_OS_2 	 string `json:"MOST_OS_2,omitempty"`	
	MOST_OS_3 	 string `json:"MOST_OS_3,omitempty"`	 	
	MOST_BROWSER_1 string `json:"MOST_BROWSER_1,omitempty"`	
	MOST_BROWSER_2 string `json:"MOST_BROWSER_2,omitempty"`	
	MOST_BROWSER_3 string `json:"MOST_BROWSER_3,omitempty"`			
}
//Chatroom datastore
type TDSCHAT struct {
	OWNER string
    ROOM_ID string
	START_TSTMP string
	USER string
}
//Guestbook datastore
type Greeting struct {
	MsgID string
	//MsgType string
    Author  string
    Content string
    Date    time.Time
	Flow string
	OwnerPic string
	SenderPic string
	Status string
	OutTo string
}
//Social datastore
type Social struct {
	MsgID string
	SID string
	RecTyp string
    Author  string
    Content string
    Date    time.Time
	NumLikes int
	NumDislikes int
	NumComments int
	LikedBy string
	DislikedBy string
	CommentsBy string
}
// geolocation
type GeoResponse struct {
    Country string
    Region string
    City string
    CityLatLong string
}
//rules datastore
type TDSRULES struct {
	SYS_VER int
	RULE_NUM int
	DISP_TYP string	
	DEST_URL string
	TRIG_ID string	
	ADS_ID string	
	CAP_LIMIT_DAILY int	
	DESKTOP_ACCESSED string	
	URL_ACESSED string	
	URL_REFERER string	
	ACCESS_TIME string	
	COUNTRY string	
	REGION string	
	CITY string	
	IP_ADDRESS string	
	IS_BOT string
	IS_MOBILE string	
	OS_NAME	string
	PLATFORM string	
	BROWSER_NAME string	
	BROWSER_VERSION string
	UID string
}
//D0084
//users datastore
type TDSUSERS struct {
	SYS_VER int `json:"sysVer"`
	USER string `json:"user"`
	COMPANY_ID string `json:"comanyID"`
	CLOUD_NAME string `json:"cloudName"`
	GROUP_ID string `json:"groupID"`
	LOGGED_IN int `json:"loggedIn"`
	LAST_LOGIN string `json:"lastLogin"`
	LAST_ACTIVE string `json:"lastActive"`
	ACTIVE_DTLS string `json:"activeDetails"`
	USER_ACC_OPT string `json:"userAccOpt"`
	FL_QUOTA string `json:"flQuota"`
	FL_BILLED string `json:"flBilled"`
	FL_WORK string `json:"flWork"`
	FL_WF_ID string `json:"flWfId"`
	USER_ACC_TYP string `json:"userAccTyp"`
}

//stats datastore
type TDSSTATS struct {
	SYS_VER int	
	STAT_NAME string	
	DATA_TYPE string	
	VAL_NUM int
	VAL_TXT string
}
//ads datastore
type TDSADS struct {
	SYS_VER	int	
	ADS_ID	int
	ADS_STATUS	int	
	ADS_PUB_ID	string	
	ADS_TYP	string
	UPLOAD_BY string
	UPLOAD_DATE string
	CATEGORY	string	
	ADS_SIZE	string	
	ADS_VIEW	int	
	ADS_CLICK	int	
	ADS_VAL_START	int	
	ADS_VAL_END	int	
	ADS_TITLE string
	ADS_IMG	string
	ADS_URL	string
	BLOB_KEY string
}
//adts datastore
type TDSADTS struct {
	SYS_VER	int	
	ADS_TIME_SLOT string	
	ADS_TIME_SLOT2 string	
	ADS_RAND_0 string
	ADS_RAND_1 string
	ADS_RAND_2 string	
	ADS_RAND_3 string	
	ADS_RAND_4 string	
	ADS_RAND_5 string
	ADS_RAND_6 string
	ADS_RAND_7 string
	ADS_RAND_8 string	
	ADS_RAND_9 string	
	CATEGORY string
}
//ads view/click datastore
type TDSADVL struct {
	SYS_VER	int	
	ADS_ID	int
	ADS_EVENT string	
	EVENT_TSTMP int
	DESKTOP	string
	COUNTRY	string
	REGION string	
	CITY string	
	UID_ENCRYPTED string 	
	RULE_NUM int
	PLATFORM string
	BROWSER string
	URL_PATH string
	URL_DATA string	
	IP_ADDRESS string
}
//config datastore
type TDSCNFG struct {
	SYS_VER int	
	USER string	
	CFG_ID string	
	DAT_TYP string	
	NUM_VAL	int
	TXT_VAL string
	CFG_DESC string
}
//icons datastore
type TDSICONS struct {
	SYS_VER int	
	ICON_ID int	
	URL_ID int	
	URL_ADD	string
	ICON_NAME string	
	IMG_SRC string
	DESKTOP string
	BLOB_KEY string
}
//urlc datastore
type TDSURLC struct {
	SYS_VER int	
	CACHE_KEY string	
	ICON_ID int	
	URL_ADD	string
	TOT_CKS	int
	URL_TYP	string
	DISP_TYP string	
	DESKTOP string
	LAST_CLICK string
	REC_TYPE string
	UID string
}
//prof datastore
type TDSPROF struct {
	SYS_VER int
	UID	string
	PICTURE	string
	BIRTH_DAY string
	ELEM_SCHOOL	string
	HIGH_SCHOOL	string
	COLLEGE	string
	POST_GRAD	string
	PROFESSION	string
	COMPANY	string
	CONTACT_NUM	string
	SOCIAL_1 string
	SOCIAL_2 string
	SOCIAL_3	string
	COUNTRY	string
	REGION	string
	CITY	string
	MUNICIPALITY string
	BARANGAY	string
	SUBDIVISION	string
	REG_VOTER	string
	ID_NUMBER	string
	I_HAVE_TEXT	string
	I_NEED_TEXT	string
	BADGE	string
	CRED_PTS	int
	POS_VOTES	int
	NEG_VOTES	int
	LIFE_RATING	int
	FILLER_1	string
	FILLER_2	string
	FILLER_3 string
	RINGTONE string
}
//slide datastore
type TDSSLIDE struct {
	FL_COUNTRY_SPECIFIC string
	SYS_VER int
	DOC_ID	int
	DOC_STAT string
	TITLE string
	DESC string
	AUTHOR string
	YEAR string
	CATEGORY string
	TAGS string
	FL_SHARED string
	SHARED_TO string
	BLOB_URL string
	//DT_UPLOAD string
	DT_UPLOAD int 
	NUM_LIKES int
	NUM_COMMENTS int
	LIKED_BY string
	COMMENTS_BY string
	NUM_VIEWS int64
	MUSIC_ID int
	GET_NEXT string
}
//article datastore
type TDSARTL struct {
	FL_COUNTRY_SPECIFIC string
	SYS_VER int	
	DOC_ID	int
	DOC_STAT string	
	TITLE string	
	DESC string	
	AUTHOR string	
	YEAR string	
	CATEGORY string	
	TAGS string	
	FL_SHARED string
	SHARED_TO string
	BLOB_URL string	
	//DT_UPLOAD string	
	DT_UPLOAD int	
	NUM_LIKES int	
	NUM_COMMENTS int	
	LIKED_BY string	
	COMMENTS_BY string
	MUSIC_ID int
	NUM_VIEWS int64
}
 
//media datastore
type TDSMEDIA struct {
	SYS_VER int	
	MEDIA_ID int	
	DOC_ID int	
	DATA_TYPE	string
	PROP string	
	TITLE string
	DESC string
	AUTHOR string	
	YEAR string	
	CATEGORY string	
	DOC_STAT string
	FL_SHARED string
	SHARED_TO string
	IMG_URL	string
	BLOB_KEY string	
	//DT_UPLOAD string
	DT_UPLOAD int 
	NUM_LIKES int	
	NUM_COMMENTS int	
	LIKED_BY string	
	COMMENTS_BY string
	NUM_VIEWS int
	MIME_TYPE string
}

//tiedot media
//type tiedotMedia struct {
//	Data []TIEDOT_MEDIA
//}
type TIEDOT_MEDIA struct {
	Doc struct { 
		DATA TDSMEDIA
	}
}
//tiedot slide
//type tiedotSlide struct {
//	Data []TIEDOT_SLIDE
//}
type TIEDOT_SLIDE struct {
	Doc struct { 
		DATA TDSSLIDE
	}
}
//tiedot article
//type tiedotArticle struct {
//	Data []TIEDOT_ARTICLE
//}
type TIEDOT_ARTICLE struct {
	Doc struct { 
		DATA TDSARTL
	}
}
 
//D0028
//things datastore
type TDSTHINGS struct {
	REC_ID string
	THING_NAME string
	PAYLOAD string
	DOC_STAT string
	FL_SHARED string
	TIMESTAMP string
}
 
//search Icons Index (TDSICONS)
type IDX_TDSICONS struct {
    DOC_KEY string
	SEARCH_TYPE	 string
	SOURCE_TYPE string	
	SOURCE_TBL string	
	DESKTOP	 string
	FL_SHARED string
	DOC_STAT string
	DOC_SCOPE_OVERALL string
	DOC_SCOPE_COUNTRY string
	DOC_SCOPE_REGION string
	DOC_SCOPE_CITY string
	DOC_SCOPE_BARANGAY string
	DOC_TITLE string	
	DOC_DESC string
	DOC_AUTHOR string
	DOC_CONTENT_TEXT string
	DOC_CONTENT_HTML search.HTML	
	DOC_CONTENT_ATOM search.Atom	
	CONTENT_URL	string
	IMG_URL	string
	DATE_ADDED	string
	DATE_UPDATED string
}  
//search Slides Index (TDSSLIDE)
type IDX_TDSSLIDE struct {
    DOC_KEY string
	SEARCH_TYPE	 string
	SOURCE_TYPE string	
	SOURCE_TBL string	
	DESKTOP	 string
	FL_SHARED string
	DOC_STAT string
	DOC_SCOPE_OVERALL string
	DOC_SCOPE_COUNTRY string
	DOC_SCOPE_REGION string
	DOC_SCOPE_CITY string
	DOC_SCOPE_BARANGAY string
	DOC_TITLE string	
	DOC_DESC string
	DOC_AUTHOR string
	DOC_CONTENT_TEXT string
	DOC_CONTENT_HTML search.HTML	
	DOC_CONTENT_ATOM search.Atom
	DOC_NUM_LIKES float64	
	DOC_NUM_COMMENTS float64	
	DOC_NUM_VIEWS float64
	CONTENT_URL	string
	IMG_URL	string
	DATE_ADDED	string
	DATE_UPDATED string
}
  
//search Articles Index (TDSARTL)
type IDX_TDSARTL struct {
    DOC_KEY string
	SEARCH_TYPE	 string
	SOURCE_TYPE string	
	SOURCE_TBL string	
	DESKTOP	 string
	FL_SHARED string
	DOC_STAT string
	DOC_SCOPE_OVERALL string
	DOC_SCOPE_COUNTRY string
	DOC_SCOPE_REGION string
	DOC_SCOPE_CITY string
	DOC_SCOPE_BARANGAY string
	DOC_TITLE string	
	DOC_DESC string
	DOC_AUTHOR string
	DOC_CONTENT_TEXT string
	DOC_CONTENT_HTML search.HTML	
	DOC_CONTENT_ATOM search.Atom
	DOC_NUM_LIKES float64	
	DOC_NUM_COMMENTS float64	
	DOC_NUM_VIEWS float64	
	CONTENT_URL	string
	IMG_URL	string
	DATE_ADDED	string
	DATE_UPDATED string
}
  
//search Profiles Index (TDSPROF)
type IDX_TDSPROF struct {
    DOC_KEY string
	SEARCH_TYPE	 string
	SOURCE_TYPE string	
	SOURCE_TBL string	
	DESKTOP	 string
	FL_SHARED string
	DOC_STAT string
	DOC_SCOPE_OVERALL string
	DOC_SCOPE_COUNTRY string
	DOC_SCOPE_REGION string
	DOC_SCOPE_CITY string
	DOC_SCOPE_BARANGAY string
	DOC_TITLE string	
	DOC_DESC string
	DOC_AUTHOR string
	DOC_CONTENT_TEXT string
	DOC_CONTENT_HTML search.HTML	
	DOC_CONTENT_ATOM search.Atom	
	CONTENT_URL	string
	IMG_URL	string
	DATE_ADDED	string
	DATE_UPDATED string
}
  
//search For Sale Index
type IDX_FORSALE struct {
    DOC_KEY string
	SEARCH_TYPE	 string
	SOURCE_TYPE string	
	SOURCE_TBL string	
	DESKTOP	 string
	FL_SHARED string
	DOC_STAT string
	DOC_SCOPE_OVERALL string
	DOC_SCOPE_COUNTRY string
	DOC_SCOPE_REGION string
	DOC_SCOPE_CITY string
	DOC_SCOPE_BARANGAY string
	DOC_TITLE string	
	DOC_DESC string
	DOC_AUTHOR string
	DOC_CONTENT_TEXT string
	DOC_CONTENT_HTML search.HTML	
	DOC_CONTENT_ATOM search.Atom	
	CONTENT_URL	string
	IMG_URL	string
	DATE_ADDED	string
	DATE_UPDATED string
}
  
//search Want To Buy Index
type IDX_WTBUY struct {
    DOC_KEY string
	SEARCH_TYPE	 string
	SOURCE_TYPE string	
	SOURCE_TBL string	
	DESKTOP	 string
	FL_SHARED string
	DOC_STAT string
	DOC_SCOPE_OVERALL string
	DOC_SCOPE_COUNTRY string
	DOC_SCOPE_REGION string
	DOC_SCOPE_CITY string
	DOC_SCOPE_BARANGAY string
	DOC_TITLE string	
	DOC_DESC string
	DOC_AUTHOR string
	DOC_CONTENT_TEXT string
	DOC_CONTENT_HTML search.HTML	
	DOC_CONTENT_ATOM search.Atom	
	CONTENT_URL	string
	IMG_URL	string
	DATE_ADDED	string
	DATE_UPDATED string
}
  
//search Media Gallery Index (TDSMEDIA)
type IDX_TDSMEDIA struct {
    DOC_KEY string
	SEARCH_TYPE	 string
	SOURCE_TYPE string	
	SOURCE_TBL string	
	DESKTOP	 string
	FL_SHARED string
	DOC_STAT string
	DOC_SCOPE_OVERALL string
	DOC_SCOPE_COUNTRY string
	DOC_SCOPE_REGION string
	DOC_SCOPE_CITY string
	DOC_SCOPE_BARANGAY string
	DOC_TITLE string	
	DOC_DESC string
	DOC_AUTHOR string
	DOC_CONTENT_TEXT string
	DOC_CONTENT_HTML search.HTML	
	DOC_CONTENT_ATOM search.Atom	
	DOC_NUM_LIKES float64	
	DOC_NUM_COMMENTS float64	
	DOC_NUM_VIEWS float64
	CONTENT_URL	string
	IMG_URL	string
	DATE_ADDED	string
	DATE_UPDATED string
}
///////////////////////////////////////////////////////////////
// DELAY FUNCTIONS
///////////////////////////////////////////////////////////////
//Sends email
func laterQueueCloudTask(c context.Context, url string, data map[string]string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterQueueStatsRecent")
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
//Updates recent stats    
func laterQueueStatsRecent(c context.Context, url string, data map[string]string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterQueueStatsRecent")
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
//D0085
// call ulapph routing bot 
func laterRoutingBot(c context.Context, sender, recipient, botUrl string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterRoutingBot")
    url := "/ulapph-router?RTR_FUNC=queue-routing-bot"
    data := map[string]string{"SENDER":sender,"RECIPIENT":recipient,"URL": botUrl}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
//D0084
// send live agents available 
func laterSendLiveAgents(c context.Context, cType, user, recipient, intent, deviceID string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterSendLiveAgents")
    url := "/ulapph-router?RTR_FUNC=queue-send-live-agents"
    data := map[string]string{"ch":cType,"user": user, "recipient":recipient, "intent": intent, "did": deviceID}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
 
//D0082
// save maps locations
func laterSaveLocations(c context.Context, mapData string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterSaveLocations")
    url := "/ulapph-router?RTR_FUNC=queue-save-locations"
    data := map[string]string{"MDATA": mapData}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - Embed image
func laterAddToDefaultSid(c context.Context, ATS_FUNC, UID, SID, TYP, SRC, TITLE string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterAddToDefaultSid")
    url := "/ulapph-router?RTR_FUNC=queue-add-to-default-sid"
    data := map[string]string{"ATS_FUNC": ATS_FUNC, "UID": UID, "SID": SID, "TYP": TYP, "SRC": SRC, "TITLE": TITLE}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - Ratings
func laterQueueRatings(c context.Context, RTG_FUNC, UID, uid string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterQueueRatings")
    url := "/ulapph-router?RTR_FUNC=queue-ratings"
    data := map[string]string{"RTG_FUNC": RTG_FUNC, "UID": UID, "FROM": uid}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return

}
// Exec later - Broadcast Location
func laterQueueBroadcastLoc(c context.Context, RTG_FUNC, latlon, uid, profile string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterQueueRatings")
	URL := fmt.Sprintf("/social?SO_FUNC=proc-broadcast-location&custom=%v&uid=%v&xhost=%v&xpic=%v", latlon, uid, domRefMatchS, profile)
    data := map[string]string{}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(URL, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
//D0106
// Exec later - Add Icons to DB
func laterAddIconsToDB(w http.ResponseWriter, r *http.Request, uid, blobkey string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterAddIconsToDB")
	//log.Printf("uid: %v", uid)
	//log.Printf("blobkey: %v", blobkey)
	//D0106
	myLinks := getBlobTextGetLinks(w,r,blobkey)
	//log.Printf("myLinks: %s\n", myLinks)
	for _, p := range myLinks{
		if p.Title == "" {
			url, _ := url.Parse(p.URL)
			scheme := url.Scheme + "://"
			p.Title = strings.Replace(url.String(), scheme, "", 1)
		}
		URL := fmt.Sprintf("%vtools?FUNC=WIDGET&t=ADDICON&uwm=%v&url=%v&title=%v&apiKey=%v", getSchemeUrl(w,r), "desktop0", url.QueryEscape(p.URL), p.Title, CMD_API_KEY)
		//log.Printf("URL: %s\n", URL)
		req, err := http.NewRequest("GET", URL, nil)
		req.Header.Set("Content-Length", "1")
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Accept", "application/json")
		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			panic(err)
		}
		_, _ = ioutil.ReadAll(resp.Body)
		//bodyBytes, _ := ioutil.ReadAll(resp.Body)
		//log.Printf("bodyBytes: %s\n", string(bodyBytes))
	}
}
// Exec later - urlfetcherlus Queries
func laterUrlFetchInd(c context.Context, RTR_FUNC string, UID, FREQ string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterUrlFetchInd")
    url := "/ulapph-router?RTR_FUNC=URL_FETCH_NOTIFS_IND"
    data := map[string]string{"RTR_FUNC": RTR_FUNC, "UID": UID, "FREQ": FREQ}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
 
// Exec later - Notify GB message
func laterNotifyGB(c context.Context, RTG_FUNC string, UID string, MESSAGE string, uid string) {
	//log.Printf("queueNotifyGB()")
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterNotifyGB")
    url := "/ulapph-router?RTR_FUNC=queue-notify-gb"
    data := map[string]string{"RTG_FUNC": RTG_FUNC, "UID": UID, "MESSAGE": MESSAGE, "FROM": uid}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
 
// Exec later - Notify channel messages
func laterNotifyCH(c context.Context, MESSAGE, SID string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
	if SYS_LOG_ACTIVITY == true {
		currenttime := time.Now().Local()
		TSTMP := currenttime.Format("2006-01-02 15:04:05 +0800")
        //log.Printf("laterNotifyCH")
        url := "/ulapph-router?RTR_FUNC=queue-notify-ch"
        data := map[string]string{"MESSAGE": MESSAGE, "TSTMP": TSTMP, "SID": SID}
        message, err := json.Marshal(data)
        if err != nil {
            panic (err)
        }
        //log.Printf("Call createHTTPTask()")
        _, err = createHTTPTask(url, message)
        if err != nil {
            log.Fatalf("ERROR: createHTTPTask: %v", err)
        }
        //log.Printf("Created Task: %s\n", task.GetName())
        //return
	}
}
// Exec later - Settings all icons need to be cached
func laterSettingsIcons(c context.Context, TEMP string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
	//log.Printf("laterSettingsIcons")
	url := "/ulapph-router?RTR_FUNC=TASK_MEMCACHER_ALL_ICONS"
	data := map[string]string{"TEMP": TEMP}
	message, err := json.Marshal(data)
	if err != nil {
		panic (err)
	}
	//log.Printf("Call createHTTPTask()")
	_, err = createHTTPTask(url, message)
	if err != nil {
		log.Fatalf("ERROR: createHTTPTask: %v", err)
	}
	//log.Printf("Created Task: %s\n", task.GetName())
	//return
}
// Exec later - Send message to channel
func laterSendSMS(c context.Context, TO, MSG string) {
	URL := fmt.Sprintf("http://beta.semaphore.co/api/v4/messages?apikey=%v&number=%v&message=%v&sendername=%v", SEMAPHORE_API_KEY, TO, url.QueryEscape(MSG), SEMAPHORE_SENDER_NAME)
	req, err := http.NewRequest("POST", URL, nil)
    //client := urlfetch.Client(c)
    client := &http.Client{}
	_, err = client.Do(req)
	if err != nil {
		panic(err)
	}
}
// Exec later - Run APIs
func laterRunAPIs(c context.Context, UID string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterRunAPIs")
    url := "/ulapph-router?RTR_FUNC=API_GOOGLE_PLUS_IND"
    data := map[string]string{"UID": UID}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - Run Specific Topics
func laterRunStream(c context.Context, UID, UWM string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterRunStream")
    url := "/ulapph-router?RTR_FUNC=RUN_TOPIC_STREAM"
    data := map[string]string{"UID": UID, "UWM": UWM}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - run url fetch only
func laterUrlFetch(c context.Context, URL string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterUrlFetch")
    url := "/ulapph-router?RTR_FUNC=URL_FETCH_LINK"
    data := map[string]string{"URL": URL}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - Notify Social message
func laterNotifySocial(c context.Context, UID string, SID string, SOC_FUNC string, CommentsBy string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterNotifySocial")
    url := "/ulapph-router?RTR_FUNC=queue-social"
    data := map[string]string{"UID": UID, "SID": SID, "SOC_FUNC": SOC_FUNC, "COMMENTS_BY": CommentsBy, "MODE": "", "FL_INC_LIKES": "", "FL_INC_DISLIKES": "",}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - Increment NUM_LIKES
func laterIncNumLikesSocial(c context.Context, UID string, SID string, SOC_FUNC, MODE string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterIncNumLikesSocial")
    url := "/ulapph-router?RTR_FUNC=queue-social"
    data := map[string]string{"UID": UID, "SID": SID, "SOC_FUNC": SOC_FUNC, "MODE": MODE, "COMMENTS_BY": "", "FL_INC_LIKES": "", "FL_INC_DISLIKES": "",}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - Increment NUM_COMMENTS (NUM_DISLIKES)
func laterIncNumDislikesSocial(c context.Context, UID string, SID string, SOC_FUNC string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterIncNumDislikesSocial")
    url := "/ulapph-router?RTR_FUNC=queue-social"
    data := map[string]string{"UID": UID, "SID": SID, "SOC_FUNC": SOC_FUNC, "MODE": "", "COMMENTS_BY": "", "FL_INC_LIKES": "", "FL_INC_DISLIKES": "",}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - Increment NUM_VIEWS
func laterIncNumViewsSocial(c context.Context, UID string, SID string, SOC_FUNC string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterIncNumViewsSocial")
    url := "/ulapph-router?RTR_FUNC=queue-social"
    data := map[string]string{"UID": UID, "SID": SID, "SOC_FUNC": SOC_FUNC, "MODE": "", "COMMENTS_BY": "", "FL_INC_LIKES": "", "FL_INC_DISLIKES": "",}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - increment log in.
func laterQueueStatsIncLoggedIn(c context.Context, USER_EMAIL_ID string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterQueueStatsIncLoggedIn")
    url := "/ulapph-router?RTR_FUNC=queue-stats-inc-logged-in"
    data := map[string]string{"uid": USER_EMAIL_ID}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    return
}
// Exec later - user is active/online.
func laterQueueStatsUserActive(c context.Context, USER_EMAIL_ID string, PLATFORM string, BROWSER string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterQueueStatsUserActive")
    url := "/ulapph-router?RTR_FUNC=queue-stats-user-active"
    data := map[string]string{"uid": USER_EMAIL_ID, "uaPlatform": PLATFORM, "nameb": BROWSER}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - broadcast user presence
func laterBroadcastUserPresence(c context.Context, USER_EMAIL_ID string, PLATFORM string, BROWSER, HOST, PIC_URL, GEOSTR, CONTENT, ip string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterBroadcastUserPresence")
    url := "/ulapph-router?RTR_FUNC=queue-broadcast-presence"
    data := map[string]string{"uid": USER_EMAIL_ID, "uaPlatform": PLATFORM, "nameb": BROWSER, "host": HOST, "pic": PIC_URL, "geo": GEOSTR, "cont": CONTENT, "ip": ip}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - broadcast admin message for all sites
func laterBroadcastMessageAll(c context.Context, MSG, USER_EMAIL_ID, PLATFORM, BROWSER, HOST, PIC_URL, GEOSTR, ip string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterBroadcastMessageAll")
    url := "/ulapph-router?RTR_FUNC=proc-broadcast-message"
    data := map[string]string{"msg": MSG, "uid": USER_EMAIL_ID, "uaPlatform": PLATFORM, "nameb": BROWSER, "host": HOST, "pic": PIC_URL, "geo": GEOSTR, "ip": ip}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - broadcast user presence back to all servers
func laterBroadcastPresenceAll(c context.Context, uid, os, browser, host, pic, geo, cont, ip string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterBroadcastPresenceAll")
    url := "/ulapph-router?RTR_FUNC=queue-broadcast-presence-all"
    data := map[string]string{"uid": uid, "os": os, "browser": browser, "host": host, "pic": pic, "geo": geo, "cont": cont, "ip": ip}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - broadcast worldwide contents
func laterBroadcastContentsAll(c context.Context, encMsg string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterBroadcastContentsAll")
    url := "/ulapph-router?RTR_FUNC=queue-broadcast-contents-all"
    data := map[string]string{"encMsg": encMsg}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - broadcast user message back to all servers
func laterBroadcastMessageSites(c context.Context, msg, uid, os, browser, host, pic, geo, ip string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterBroadcastMessageSites")
    url := "/ulapph-router?RTR_FUNC=queue-broadcast-message-all"
    data := map[string]string{"msg": msg, "uid": uid, "os": os, "browser": browser, "host": host, "pic": pic, "geo": geo, "ip": ip}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - increment counter
func laterQueueCounterIncrement(c context.Context, cname string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterQueueCounterIncrement")
    url := "/ulapph-router?RTR_FUNC=queue-counter-increment"
    data := map[string]string{"name": cname}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - cache desktop icons
func laterQueueAdsLogViews(c context.Context, adsID, uid, DESKTOP, ruleNumStr, xCountry, xRegion, xCity, uaPlatform, nameb, uReferer, ipAdd string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
	//D0116
	if SYS_LOG_ACTIVITY == false {
		return
	}
    //log.Printf("laterQueueAdsLogViews")
    url := "/ulapph-router?RTR_FUNC=queue-ads-log-views"
    data := map[string]string{"ADS_ID": adsID, "uid": uid, "desktop": DESKTOP, "RULE_NUM_STR": ruleNumStr, "country": xCountry, "region": xRegion, "city": xCity, "uaPlatform": uaPlatform, "nameb": nameb, "uReferer": uReferer, "ipAdd": ipAdd}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
// Exec later - insert unknown new rule record
func laterQueueInsertUnknownRule(c context.Context, dispTyp, xCountry, xRegion, xCity, ipAddress, isBot, isMobile, osName, platform, bName, bVersion, uid string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    url := "/ulapph-router?RTR_FUNC=queue-insert-unknown-rule"
    data := map[string]string{
                            "DISP_TYP": dispTyp,
                            "COUNTRY": xCountry,
                            "REGION": xRegion,
                            "CITY": xCity,
                            "IP_ADDRESS": ipAddress,
                            "IS_BOT": isBot,
                            "IS_MOBILE": isMobile,
                            "OS_NAME": osName,
                            "PLATFORM": platform,
                            "BROWSER_NAME": bName,
                            "BROWSER_VERSION": bVersion,
                            "UID": uid,}

    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
	_, err = createHTTPTask(url, message)
	if err != nil {
		log.Fatalf("ERROR: createHTTPTask: %v", err)
	}

    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
//D0074
// Exec later - update cctv list
//var laterUpdateCctvList = delay.Func("laterUpdateCctvList", func(c context.Context, uid, desktop string) {
func laterUpdateCctvList(c context.Context, uid, desktop string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterUpdateCctvList")
    url := "/ulapph-router?RTR_FUNC=queue-update-cctv-list"
    data := map[string]string{
                            "uid": uid,
                            "desktop": desktop,
                        }
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
}
//D0076
//laterAutoML(c, "CCTV", "cctvKitchenPersonDetected", SRC)
// Exec later - delect person from cctv via automl 
func laterAutoML(c context.Context, FUNC, LABEL, UID, TITLE, STRUWM, IMG string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //log.Printf("laterAutoML")
    url := "/ulapph-router?RTR_FUNC=queue-automl-proc"
    data := map[string]string{"FUNC": FUNC, "UID": UID, "IMG": IMG, "LABEL": LABEL, "TITLE": TITLE, "STRUWM": STRUWM}
    message, err := json.Marshal(data)
    if err != nil {
        panic (err)
    }
    //log.Printf("Call createHTTPTask()")
    _, err = createHTTPTask(url, message)
    if err != nil {
        log.Fatalf("ERROR: createHTTPTask: %v", err)
    }
    //log.Printf("Created Task: %s\n", task.GetName())
    //return
}
//D0095
//D0086
//func createClientDS(w http.ResponseWriter, r *http.Request) *datastore.Client {
func createClientDS() *datastore.Client {
	if SYS_STATELESS_SERVER == true {
		return nil
	}
    ctx := context.Background()
    client, err := datastore.NewClient(ctx, SYS_SERVER_NAME)
    if err != nil {
		//log.Printf("Could not create datastore client: %v", err)
		return nil
    }
    return client
}
//D0087
// newApp creates a new app, returning an error if either the Cloud IAP
// certificates or the app's audience field cannot be obtained.
func newApp(w http.ResponseWriter, r *http.Request) (*app, error) {
	certs, err := certificates(w,r)
	if err != nil {
		return nil, err
	}

	aud, err := audience()
	if err != nil {
		return nil, err
	}

	a := &app{
		certs: certs,
		aud:   aud,
	}
	return a, nil
}
//main entry to clouddesktop
//when the https://your-project.appspot.com/ url is accessed, this function is called		
func root(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    ulapphDebug(w,r, "info", fmt.Sprintf("root() %v", ""))
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	//u := user.Current(c)
    h := r.Header
	// call functions in Golang
	checkHTTPS2(w,r)
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	if SYS_DOWN_ENABLE == true {
		//http.Redirect(w, r, DEFAULT_DOWN_URL, http.StatusFound)
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	query := r.FormValue("q")
	i := strings.Index(query, "token-qr@@@")
	if i != -1 {
		SPL := strings.Split(query, "@@@")
		redURL := fmt.Sprintf("https://www.ulapph.com/?q=token-qr&user=%v&tok=%v&isDesktop=%v&targetURL=%v", SPL[1], SPL[2], SPL[3], SPL[4])
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	i = strings.Index(query, "login@888@")
	if i != -1 {
		query = strings.Replace(query, "@888@", "&", -1)
		redURL := fmt.Sprintf("https://www.ulapph.com/?q=%v", query)
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	uReferer := r.Referer()
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	uaPlatform := ua.OS()
	nameb, _ := ua.Browser()
	// call common functions
	viaStr := getAccessString(w,r,"")
	viaStrB := getAccessString(w,r,"C")
	switch query {
		case "":
			ulapphDebug(w,r, "info", fmt.Sprintf("case \"\": %v", ""))
			// get built-in App Engine fields injected in all request headers
			xCountry := h.Get("X-AppEngine-Country")
			xRegion  := h.Get("X-AppEngine-Region")
			xCity    := h.Get("X-AppEngine-City")
			// get the user sessions
			_, uid := checkSession(w,r)
			if uid == "" {
				uid = "guest"
			}
			// execute a function later
			time.AfterFunc(5*time.Second, func() {
                laterQueueAdsLogViews(c, "0", uid, "www", "0", xCountry, xRegion, xCity, uaPlatform, nameb, uReferer, getIpAdd(w,r))
            })
            if nameb != "Internet Explorer" {
			//WHEN BROWSER IS NOT INTERNET EXPLORER
				//check if user is logged in and a valid ulapph user so we can skip the public page
				if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
				//WHEN USER IS LOGGED IN
					//uid = uid
                    _, uid = checkSession(w,r)
					//get user privilege
					// call a function with input fields and output fields
					FUNC_CODE := "GET_GRP_ID"
					FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
					if FL_VALID_USER == true {
						if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" {
							//notify all users of this event via channels
							msgDtl3 := fmt.Sprintf("UID:%v has returned to ULAPPH https://www.ulapph.com %v", uid, viaStr)
							data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msgDtl3)
							ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")	
							ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
							sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid, "https://www.ulapph.com",""),"")
							checkHomepageSettings(w,r,uid,"")
							updateUserActiveData(w, r, c, uid, "homepage")
							return
						}
					} else {
					//if not yet valid user
						//notify all users of this event via channels
						msg := ""
						msgDtl3 := ""
						if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
							msg := getGeoString(w,r)
							msgDtl3 = fmt.Sprintf("UID:%v has visited ULAPPH https://www.ulapph.com %v", msg, viaStr)
							msgDtl3b := fmt.Sprintf("UID:%v has visited ULAPPH https://www.ulapph.com %v", msg, viaStrB)
							data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH-VISITOR", msgDtl3b)
							ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
							ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
							updateUserActiveData(w, r, c, "", "homepage")
						}else{
							msg = uid
							msgDtl3 = fmt.Sprintf("UID:%v has visited ULAPPH https://www.ulapph.com %v", msg, viaStr)
							msgDtl3b := fmt.Sprintf("UID:%v has visited ULAPPH https://www.ulapph.com %v", msg, viaStrB)
							data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH-VISITOR", msgDtl3b)
							ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
							ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
							updateUserActiveData(w, r, c, uid, "homepage")
						}
						sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,msg, "https://www.ulapph.com",""),"")
						checkHomepageSettings(w,r,uid,"")
						return
					}
				} else {
				//WHEN USER IS NOT LOGGED IN
					//notify all users of this event via channels
					msg := getGeoString(w,r)
					msgDtl3 := fmt.Sprintf("UID:%v has visited ULAPPH https://www.ulapph.com %v", msg, viaStr)
					msgDtl3b := fmt.Sprintf("UID:%v has visited ULAPPH https://www.ulapph.com %v", msg, viaStrB)
					data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH-VISITOR", msgDtl3b)
					ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")	
					ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,msg, "https://www.ulapph.com",""),"")
					checkHomepageSettings(w,r,uid,"")
					updateUserActiveData(w, r, c, "", "homepage")
					return
				}
			} else {
			//WHEN BROWSER IS INTERNET EXPLORER								
				//notify all users of this event via channels
				msg := getGeoString(w,r)
				msgDtl3 := fmt.Sprintf("UID:%v has visited ULAPPH https://www.ulapph.com/?q=home %v", msg, viaStr)
				msgDtl3b := fmt.Sprintf("UID:%v has visited ULAPPH https://www.ulapph.com/?q=home %v", msg, viaStrB)
				data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH-VISITOR", msgDtl3b)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")	
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,msg, "https://www.ulapph.com/?q=home",""),"")
				checkHomepageSettings(w,r,uid,"")
				updateUserActiveData(w, r, c, "", "homepage")
				return
			}
		//if show home gallery
		case "gallery":
			showHomeGallery(w,r)
			return
		case "qu":
			_, uid := checkSession(w,r)
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			currDesktop := "desktop0"
			//get user privilege
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			if FL_VALID_USER == true {
				if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" && currDesktop == "desktop0" {
					// execute an in-line html template with basic field population
					if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
					  panic(err)
					}
					//blobstore - upload custom icons
					//------------------------------
					csn2 := getUpUrlString(w,r,"/upload")
					uploadURL := csn2
					err := quickUploadTemplate.Execute(w, uploadURL)
					if err != nil {
							////log.Panicf("%v", err)
					}
					getCategories(w,r,uid)
					err = quickUploadTemplate2.Execute(w, currDesktop)
					if err != nil {
							////log.Panicf("%v", err)
					}
					//blobstore end
					if err := htmlFooterModal.Execute(w, ""); err != nil {
					  panic(err)
					}
 
				
				}
				
			}
			return
			
		case "qi":
			
			_, uid := checkSession(w,r)	
			// validate access of user
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
		
			currDesktop := "desktop0"
			
			//get user privilege
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			
			if FL_VALID_USER == true {
			
				if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" && currDesktop == "desktop0" {
					
					if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
					  panic(err)
					}
					csn2 := getUpUrlString(w,r,"/upload-media")
					uploadURL2 := csn2
					err := rootTemplateMediaA.Execute(w, uploadURL2)
					if err != nil {
							////log.Panicf("%v", err)
					}
					getCategories(w,r,uid)
					err = rootTemplateMediaA2.Execute(w, currDesktop)
					if err != nil {
							////log.Panicf("%v", err)
					}
				}
				
			}
			return
			
		case "qt":
			
			_, uid := checkSession(w,r)
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}

			currDesktop := "desktop0"
			
			//get user privilege
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			
			if FL_VALID_USER == true {
			
				if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" && currDesktop == "desktop0" {
					
					if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
					  panic(err)
					}
					csn2 := getUpUrlString(w,r,"/upload-media")
					uploadURL3 := csn2
					err := rootTemplateMediaB.Execute(w, uploadURL3)
					if err != nil {
							////log.Panicf("%v", err)
					}
					getCategories(w,r,uid)
					err = rootTemplateMediaB2.Execute(w, currDesktop)
					if err != nil {
							////log.Panicf("%v", err)
					}
				}
				
			}
			return
			
		case "qm":
			
			_, uid := checkSession(w,r)
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
		
			currDesktop := "desktop0"
			
			//get user privilege
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			
			if FL_VALID_USER == true {
			
				if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" && currDesktop == "desktop0" {
					
					if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
					  panic(err)
					}
					csn2 := getUpUrlString(w,r,"/upload-media")
					uploadURL3 := csn2
					err := rootTemplateMediaM.Execute(w, uploadURL3)
					if err != nil {
							////log.Panicf("%v", err)
					}
					getCategories(w,r,uid)
					err = rootTemplateMediaM2.Execute(w, currDesktop)
					if err != nil {
							////log.Panicf("%v", err)
					}
				}
				
			}
			return
			
		case "qv":
			
			_, uid := checkSession(w,r)
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
		
			currDesktop := "desktop0"
			
			//get user privilege
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			
			if FL_VALID_USER == true {
			
				if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" && currDesktop == "desktop0" {
					
					if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
					  panic(err)
					}	
					csn2 := getUpUrlString(w,r,"/upload-media")
					uploadURL3 := csn2
					err := rootTemplateMediaV.Execute(w, uploadURL3)
					if err != nil {
							////log.Panicf("%v", err)
					}
					getCategories(w,r,uid)
					err = rootTemplateMediaV2.Execute(w, currDesktop)
					if err != nil {
							////log.Panicf("%v", err)
					}
				}
				
			}
			return
			
		case "token-qr":
 
			_, uid := checkSession(w,r)
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			
			auser := ""
			if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
				promptLogin(w,r,uid,"")
			} else {
				//auser = uid
				// execute an external template and populate from multiple fields of a data struct
				auser = uid
				uid := r.FormValue("user")
				token := r.FormValue("tok")
				isDesktop := r.FormValue("isDesktop")
				targetURL := r.FormValue("targetURL")
				TITLE := r.FormValue("TITLE")
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: uid,
					STR_FILLER2: token,
					//STR_FILLER3: "Authentication in progress...",
					STR_FILLER3: "ULAPPH QR Login",
					STR_FILLER4: auser,
					STR_FILLER5: isDesktop,
					STR_FILLER6: "STEP2",
					STR_FILLER7: targetURL,
					STR_FILLER8: "",
					STR_FILLER9: TITLE,
					STR_FILLER10: getStartColor(w,r),	
					STR_FILLER11: getInActiveColor(w,r),	
					STR_FILLER12: getActiveColor(w,r),						
				}
				renderStaticWithTEMPSTRUCT2(w,r,&TEMPDATA,".htmlHeaderBodyToken")
				if err := outputFooterTemplateToken.Execute(w, "test"); err != nil {
					panic(err)
				}
			}
			return
		
		case "home2":
		
			uid := r.FormValue("user")
			ChanID := r.FormValue("chan")
			ChanIDorig := ChanID
			tok := r.FormValue("tok")
			targetURL := r.FormValue("targetURL")
			mode := r.FormValue("mode")
			SID := r.FormValue("SID")
			TITLE := r.FormValue("TITLE")
		
			//fmt.Fprintf(w, "uid: %v ChanID: %v tok: %v", uid, ChanID, tok)
			FL_CHAN_EXIST := false
 
			ChanID = uid
			if ChanID != "" && tok != "" {
			
              // get a specific record from NoSQL database
              //D0086
              datastoreClient := createClientDS()
              var e Channelstore
			  //if err := datastoreClient.Get(c, getKeyChannel(c,ChanID), &e); err != nil {
              //log.Printf("datastoreClient.Get()  [4795]")
              if err := datastoreClient.Get(c, getKeyChannel(c,ChanID), &e); err != nil {
				  //fmt.Fprintf(w, "FL_CHAN_EXIST = false")
				  FL_CHAN_EXIST = false
			  } else {
				if tok == e.TokenID {
					//fmt.Fprintf(w, "FL_CHAN_EXIST = true")
					FL_CHAN_EXIST = true
				}
			  }
			
			
			  if FL_CHAN_EXIST == false || tok != e.TokenID{
					msgDtl := fmt.Sprintf("<font color=red>[U00158] ERROR: Authentication error. Token ID (%v) or channel (%v) does not exist.</font>", tok, ChanID)
					fmt.Fprintf(w, "%v", msgDtl)
					return
			  }
			}
 
			
			if FL_CHAN_EXIST == false {
				msgDtl := fmt.Sprintf("<font color=red>[U00153] ERROR: Authentication error. Token ID (%v) or channel (%v) does not exist.</font>", tok, ChanID)
				fmt.Fprintf(w, "%v", msgDtl)
				return
			} else {
				if SYS_GUEST_UWM == true {
					webtop(w,r,uid,ChanIDorig,tok,targetURL, mode,SID,TITLE)	
				} else {
					msgDtl := fmt.Sprintf("<font color=red>[U00200] ERROR: Sorry, guest login not allowed in this server.</font>")
					fmt.Fprintf(w, "%v", msgDtl)
					return					
				}
				
			}
			return
 
		//?q=collections&SID=TDSMEDIA-2353
		case "ushare":
			//check access rights
			SID := r.FormValue("SID")
			SPL := strings.Split(SID,"-")
			TARGET := ""
			DOC_ID := ""
			if len(SPL[0]) > 1 {
				TARGET = SPL[0]
				DOC_ID = SPL[1]
			}
			MEDIA_ID := str2int(DOC_ID)
			if TARGET != "TDSMEDIA" || MEDIA_ID <= 0 {
				fmt.Fprintf(w, "ERROR: Invalid Ushare SID: %v", SID)
				return
			}
			_, _, TITLE, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, DESC, SHARED_TO := getTDSMEDIABlobKey(w, r, MEDIA_ID)
			msg := ""
			msgDtl3 := ""
			
			_, uid := checkSession(w,r)
			
			if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
				msg := getGeoString(w,r)
				msgDtl3 = fmt.Sprintf("UID:%v has accessed USHARE (<a href=\"/?q=ushare&SID=TDSMEDIA-%v\">%v - %v</a>) %v!", msg, MEDIA_ID, TITLE, DESC, getAccessString(w,r,""))
 
			}else{
				msg = uid
				msgDtl3 = fmt.Sprintf("UID:%v has accessed SHARE (<a href=\"/?q=ushare&SID=TDSMEDIA-%v\">%v - %v</a>) %v!", msg, MEDIA_ID, TITLE, DESC, getAccessString(w,r,""))
			}
			if msgDtl3 != "" {
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/ushare",""),"")
			}
			
			FL_PROC_OK := false
			
			// use Golang switch
			switch {
				case AUTHOR == uid:
					//continue
					FL_PROC_OK = true
					
				case DOC_STAT == "Premium" && uid != AUTHOR:
					sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=TDSMEDIA-%v", MEDIA_ID)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case (FL_SHARED == "N" || DOC_STAT == "Personal") && SHARED_TO == "":
					isOk := checkPersonalAuthor(w,r,AUTHOR,SID,MEDIA_ID)
					if isOk == true {
						FL_PROC_OK = true
					}
				
				case DOC_STAT == "Personal" && SHARED_TO != "":
					isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, SID, MEDIA_ID)
					if isAllowed == true {
						FL_PROC_OK = true
					}
				case DOC_STAT == "ULAPPH Only":
					FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
					if FL_PROC_OK == false {
						return
					}
				case DOC_STAT == "Worldwide":
					//continue
					FL_PROC_OK = true
					
			}
			
			if FL_PROC_OK == false {
				return
			}
			
			if SYS_GUEST_LOGIN == true {
				isDesktopClient := "N"
				FL_DESKTOP := checkDesktop(w,r)
				if FL_DESKTOP == true {
					isDesktopClient = "Y"
				}
				// use Golang channel
				tokChan := make(chan Token)
				tokChanDone := make(chan bool)
				go createTokenChan(w,r,tokChan,tokChanDone,"","")
				tok := <-tokChan
				<-tokChanDone
				uid := tok.User
				token := tok.Token
				
				updateUserActiveData(w, r, c, uid, "ushare")
										
				TARGET_URL := r.FormValue("TARGET_URL")
				targetURL := ""
				
				if TARGET_URL == "" {
					targetURL = "/?q=home2"
				} else {
 
					i := strings.Index(TARGET_URL, "@888@")
					if i != -1 {
						targetURL = strings.Replace(TARGET_URL, "@888@", "&", -1)
					} else {
						targetURL = TARGET_URL
					}
				}
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: uid,
					STR_FILLER2: token,
					STR_FILLER3: "ULAPPH Cloud Desktop",
					STR_FILLER4: "",
					STR_FILLER5: isDesktopClient,
					STR_FILLER6: "guest1",
					STR_FILLER7: targetURL,
					STR_FILLER8: SID,
					STR_FILLER9: TITLE,	
					STR_FILLER10: getStartColor(w,r),	
					STR_FILLER11: getInActiveColor(w,r),	
					STR_FILLER12: getActiveColor(w,r),	
				}
				renderStaticWithTEMPSTRUCT2(w,r,&TEMPDATA,".htmlHeaderBodyToken")
				
				h := r.Header
				country := h.Get("X-AppEngine-Country")
				COUNTRY_PIC := fmt.Sprintf("%v/static/img/flags/%s.gif", getSchemeUrl(w,r), country)
				fmt.Fprintf(w, "<img src=\"%v\">", COUNTRY_PIC)
				if err := outputFooterTemplateToken.Execute(w, "test"); err != nil {
					panic(err)
				}
				return
			} else {
				msgDtl := "[U00176] ERROR: Visitor or Guest access is disabled in this site."
				msgTyp := "error"
				msgURL := "/"
				action := fmt.Sprintf("Sorry for this inconvenience! Please contact the administrator if you have other issues.")
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
 
		case "login":
		
			if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
			
			LFUNC := r.FormValue("LFUNC")
			TARGET_URL := r.FormValue("TARGET_URL")
			
			//edv 29/09/2015
			if TARGET_URL == "" {
				uReferer := strings.Replace(r.URL.String(), "&", "@888@", -1)
				TARGET_URL = uReferer
			}
			
			switch LFUNC {
 
				case "ULAPPH":
					if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
						FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER","/?q=login&LFUNC=ULAPPH")
						if FL_PROC_OK == false {return}
					}
					//parse host list
					cKey := fmt.Sprintf("HOST_LIST")
					HOST_LIST := ""
                    var buf1 bytes.Buffer
                    HOST_LIST = getStrMemcacheValueByKey(w,r,cKey)
					if HOST_LIST == "" {
						IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
						if IS_SEARCH_SERVER == "N" {
							_, HOST_LIST = fetchHostList(w,r)
						} else {
							_, HOST_LIST = getHostList(w,r)
						}
						buf1.WriteString(HOST_LIST)
					} else {
                        buf1.WriteString(HOST_LIST)
                    }
					// read or scan a stream of bytes
					var pl []*TEMPSTRUCT2
					scanner := bufio.NewScanner(bytes.NewReader(buf1.Bytes()))
					for scanner.Scan() {
						if scanner.Text() != "" {
							thisStr := fmt.Sprintf("%v", scanner.Text())
							if string(thisStr[0]) != "#" {
								p := new(TEMPSTRUCT2)
								SPL := strings.Split(scanner.Text(), "|")
								if len(SPL) >= 2 {
									tURL := SPL[0]
									tags := SPL[1]
									p.STR_FILLER1 = strings.TrimSpace(tURL)
									SPT := strings.Split(tags, ",")
									p.STR_FILLER2 = strings.ToUpper(SPT[0])
									p.STR_FILLER3 = strings.TrimSpace(tags)
									p.STR_FILLER4 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-logo", tURL))
									pl = append(pl, p)
								}
							}
						}
					}
 
					t := presentTemplates[path.Ext(".select-ulapph")]
					if t == nil {
						panic(t)
					}
 
					t.Execute(w, &pl)
					return
				
				case "GOOGLE":
 
 
				   if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
						uid := ""
						promptLogin(w,r,uid,"GOOGLE")
						return
					} else {
						FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",TARGET_URL)
						if FL_PROC_OK == false {return}
						http.Redirect(w, r, TARGET_URL, http.StatusFound)
						return
					}
					
				case "token":
					isDesktopClient := "N"
					FL_DESKTOP := checkDesktop(w,r)
					if FL_DESKTOP == true {
						isDesktopClient = "Y"
					}
					//uid, token := createToken(w,r,"","")
					tokChan := make(chan Token)
					tokChanDone := make(chan bool)
					go createTokenChan(w,r,tokChan,tokChanDone,"","")
					tok := <-tokChan
					<-tokChanDone
					uid := tok.User
					token := tok.Token
					
					TARGET_URL := r.FormValue("TARGET_URL")
					TITLE := r.FormValue("TITLE")
					//fmt.Fprintf(w, "TARGET_URL: %v<br>", TARGET_URL)
					targetURL := ""
					
					if TARGET_URL == "" {
						targetURL = "/?q=home2"
					} else {
 
						i := strings.Index(TARGET_URL, "@888@")
						if i != -1 {
							targetURL = strings.Replace(TARGET_URL, "@888@", "&", -1)
						} else {
							targetURL = TARGET_URL
						}
						//fmt.Fprintf(w, "TARGET_URL: %v<br>", targetURL)
					}
					TEMPDATA := TEMPSTRUCT2{
						STR_FILLER1: uid,
						STR_FILLER2: token,
						STR_FILLER3: "ULAPPH QR Login",
						STR_FILLER4: "",
						STR_FILLER5: isDesktopClient,
						STR_FILLER6: "STEP1",
						STR_FILLER7: targetURL,
						STR_FILLER8: "",
						STR_FILLER9: TITLE,	
						STR_FILLER10: getStartColor(w,r),	
						STR_FILLER11: getInActiveColor(w,r),	
						STR_FILLER12: getActiveColor(w,r),	
					}
					renderStaticWithTEMPSTRUCT2(w,r,&TEMPDATA,".htmlHeaderBodyToken")
					
					qrUrl := fmt.Sprintf("https://www.ulapph.com/?q=token-qr@@@%v@@@%v@@@%v@@@%v", uid, token, isDesktopClient, targetURL)
					apiLink := fmt.Sprintf("https://chart.googleapis.com/chart?cht=qr&chs=340x340&chl=%v&choe=UTF-8", qrUrl)
					
					thisFrame := fmt.Sprintf("<iframe src='%v' frameborder=0 scrolling=false allowtransparency=true width=350px height=350px align=center></iframe>", apiLink)
					fmt.Fprintf(w, "%v", thisFrame)
					
					if err := outputFooterTemplateToken.Execute(w, "test"); err != nil {
						panic(err)
					}
					return
				
				case "guest":
					//SID := r.FormValue("SID")
 
					CC_KEY := r.FormValue("cc_key")
					TITLE := r.FormValue("TITLE")
					if CC_KEY != SYS_RECAPTCHA_KEY && isLoggedIn(w,r) != true {
						redURL := fmt.Sprintf("/captcha?CC_FUNC=DISP3")
						http.Redirect(w, r, redURL, http.StatusFound)
						return			
					}
 
					if SYS_GUEST_LOGIN == true {
						isDesktopClient := "N"
						FL_DESKTOP := checkDesktop(w,r)
						if FL_DESKTOP == true {
							isDesktopClient = "Y"
						}
						//uid, token := createToken(w,r,"","")
						tokChan := make(chan Token)
						tokChanDone := make(chan bool)
						go createTokenChan(w,r,tokChan,tokChanDone,"","")
						tok := <-tokChan
						<-tokChanDone
						uid := tok.User
						token := tok.Token
						//fmt.Fprintf(w, "uid: %v<br>", uid)
						//fmt.Fprintf(w, "token: %v<br>", token)
						
						updateUserActiveData(w, r, c, uid, "guest-token")
												
						TARGET_URL := r.FormValue("TARGET_URL")
						//fmt.Fprintf(w, "TARGET_URL: %v<br>", TARGET_URL)
						targetURL := ""
						
						if TARGET_URL == "" {
							targetURL = "/?q=home2"
						} else {
 
							i := strings.Index(TARGET_URL, "@888@")
							if i != -1 {
								targetURL = strings.Replace(TARGET_URL, "@888@", "&", -1)
							} else {
								targetURL = TARGET_URL
							}
							//fmt.Fprintf(w, "TARGET_URL: %v<br>", targetURL)
						}
						TEMPDATA := TEMPSTRUCT2{
							STR_FILLER1: uid,
							STR_FILLER2: token,
							//STR_FILLER3: "ULAPPH Guest Login",
							STR_FILLER3: "ULAPPH Cloud Desktop",
							STR_FILLER4: "",
							STR_FILLER5: isDesktopClient,
							STR_FILLER6: "guest1",
							STR_FILLER7: targetURL,
							STR_FILLER8: "",
							STR_FILLER9: TITLE,
							STR_FILLER10: getStartColor(w,r),	
							STR_FILLER11: getInActiveColor(w,r),	
							STR_FILLER12: getActiveColor(w,r),	
						}
						//if err := htmlHeaderBodyToken.Execute(w, &TEMPDATA); err != nil {
						// panic(err)
						//}
						renderStaticWithTEMPSTRUCT2(w,r,&TEMPDATA,".htmlHeaderBodyToken")
						
						h := r.Header
						country := h.Get("X-AppEngine-Country")
						COUNTRY_PIC := fmt.Sprintf("%v/static/img/flags/%s.gif", getSchemeUrl(w,r), country)
						fmt.Fprintf(w, "<img src=\"%v\">", COUNTRY_PIC)
						if err := outputFooterTemplateToken.Execute(w, "test"); err != nil {
							panic(err)
						}
						return
					} else {
						// call a common function to display system errors and messages
						msgDtl := "[U00176] ERROR: Visitor or Guest access is disabled in this site."
						msgTyp := "error"
						msgURL := "/"
						action := fmt.Sprintf("Sorry for this inconvenience! Please contact the administrator if you have other issues.")
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
					
				default:
					//fmt.Fprintf(w, "Invalid login function!")
					redURL := fmt.Sprintf("/?q=home")
					http.Redirect(w, r, redURL, http.StatusFound)
					return
			}
			
        case "home":
            //log.Printf("home")
			var buffer4 bytes.Buffer
 
            _, uid := checkSession(w,r)
            //log.Printf("uid: %v", uid)
            FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
            //log.Printf("FL_PROC_OK: %v", FL_PROC_OK)
			if FL_PROC_OK == false {return}
			
			deskName := "root"		
			
			// extract path and referrer from the request
			uPath := r.URL.String()
			uReferer := r.Referer()
 
			xCountry := h.Get("X-AppEngine-Country")
			xRegion  := h.Get("X-AppEngine-Region")
			xCity    := h.Get("X-AppEngine-City")
			ipAdd := getIpAdd(w,r)
		
			// get the browser user agent from the request
			uag := r.UserAgent()
			ua := user_agent.New(uag)
			uaMobile := ua.Mobile()
			uaPlatform := ua.Platform()
			nameb, versionb := ua.Browser()
			uaOS := ua.OS()
 
			FUNC_CODE := "VALUSER"
            FL_VALID_USER, _, _ , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
            //log.Printf("FL_VALID_USER: %v", FL_VALID_USER)
			if FL_VALID_USER == true {
 
				//Call rules processing
				uaBot := fmt.Sprintf("%t", ua.Bot())
				uaMobile := fmt.Sprintf("%t", uaMobile)
				//uaOS := ua.OS()
				
				// create a json string data using buffer
				buffer4.WriteString(fmt.Sprintf("{"))
				buffer4.WriteString(fmt.Sprintf("\"SYS_VER\": \"1\","))
				buffer4.WriteString(fmt.Sprintf("\"RULE_NUM\": \"0\","))
				buffer4.WriteString(fmt.Sprintf("\"DISP_TYP\": \"\","))	
				buffer4.WriteString(fmt.Sprintf("\"DEST_URL\": \"\","))
				buffer4.WriteString(fmt.Sprintf("\"TRIG_ID\":	\"\","))
				buffer4.WriteString(fmt.Sprintf("\"ADS_ID\": \"\","))
				buffer4.WriteString(fmt.Sprintf("\"CAP_LIMIT_DAILY\": \"100\","))	
				buffer4.WriteString(fmt.Sprintf("\"DESKTOP_ACCESSED\": \"%s\",",deskName))
				buffer4.WriteString(fmt.Sprintf("\"URL_ACESSED\": \"%s\",", uPath))	
				buffer4.WriteString(fmt.Sprintf("\"URL_REFERER\": \"%s\",", uReferer))
				buffer4.WriteString(fmt.Sprintf("\"ACCESS_TIME\": \"\","))	
				buffer4.WriteString(fmt.Sprintf("\"COUNTRY\": \"%s\",", xCountry))	
				buffer4.WriteString(fmt.Sprintf("\"REGION\": \"%s\",", xRegion))
				buffer4.WriteString(fmt.Sprintf("\"CITY\": \"%s\",", xCity))	
				buffer4.WriteString(fmt.Sprintf("\"IP_ADDRESS\": \"%s\",", ipAdd))	
				buffer4.WriteString(fmt.Sprintf("\"IS_BOT\": \"%s\",", uaBot))
				buffer4.WriteString(fmt.Sprintf("\"IS_MOBILE\": \"%s\",", uaMobile))
				buffer4.WriteString(fmt.Sprintf("\"OS_NAME\": \"%s\",", uaOS))
				buffer4.WriteString(fmt.Sprintf("\"PLATFORM\": \"%s\",", uaPlatform))	
				buffer4.WriteString(fmt.Sprintf("\"BROWSER_NAME\": \"%s\",", nameb))
				buffer4.WriteString(fmt.Sprintf("\"BROWSER_VERSION\": \"%s\",", versionb))
				buffer4.WriteString(fmt.Sprintf("\"UID\": \"%s\"", uid))
				buffer4.WriteString(fmt.Sprintf("}"))
				// use rules processing in a web application
				FL_FOUND_RULE, FL_MATCH_ALL_EXC_IP_ADD, _, _, dispType, _, _, _ := rulesProcessor(w, r, buffer4.String())
                //log.Printf("FL_FOUND_RULE: %v", FL_FOUND_RULE)
                //log.Printf("FL_MATCH_ALL_EXC_IP_ADD: %v", FL_MATCH_ALL_EXC_IP_ADD)
                //log.Printf("dispType: %v", dispType)
				if (FL_FOUND_RULE == true) {
 
					if FL_MATCH_ALL_EXC_IP_ADD == true {
					    //insert new rule (to update timestamp and ipadd)
					    //laterQueueInsertUnknownRule(c, dispType, xCountry, xRegion, xCity, ipAdd, uaBot, uaMobile, uaOS, uaPlatform, nameb, versionb, uid)	
                        time.AfterFunc(5*time.Second, func() { 
                            laterQueueInsertUnknownRule(c, dispType, xCountry, xRegion, xCity, ipAdd, uaBot, uaMobile, uaOS, uaPlatform, nameb, versionb, uid) 
                        })
                    }
						
				} else {
                    //insert new rule
					//laterQueueInsertUnknownRule(c, dispType, xCountry, xRegion, xCity, ipAdd, uaBot, uaMobile, uaOS, uaPlatform, nameb, versionb, uid)
                    time.AfterFunc(5*time.Second, func() { 
                            laterQueueInsertUnknownRule(c, dispType, xCountry, xRegion, xCity, ipAdd, uaBot, uaMobile, uaOS, uaPlatform, nameb, versionb, uid) 
                        })
                    linkedUrl := "/uwm?FL_VALID_USER=true&FL_FOUND_RULE=true"
					rLoad := fmt.Sprintf("60;%v", linkedUrl)
					if err := htmlWidgetBrowserLoading.Execute(w, rLoad); err != nil {
					  panic(err)
					}
					if err := htmlWidgetBrowserLoading2.Execute(w, ""); err != nil {
					  panic(err)
					}
					return
 
				}
				ulapphDebug(w,r, "info", fmt.Sprintf("dispType: %v", dispType))
				switch {
					case dispType == "BLOCKED":
						msgDtl := "[U00002] ERROR: Access has been blocked. Please contact administrator."
						msgTyp := "error"
						msgURL := "/"
						action := fmt.Sprintf("Sorry for this inconvenience! Please contact the administrator if you want to unblock your account. <a href=\"%v\">Click here</a> to go to ULAPPH public homepage.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
						
					case dispType == "UWM":
						uwm(w,r)	
						return
						
					case dispType == "MOBILE":
						redURL := fmt.Sprintf("/uwm")
						http.Redirect(w, r, redURL, http.StatusFound)
						return
						
					default:
						uwm(w,r)	
						return						
 					
			   }
 
			} else {
			
					//invalid user; ask to register
					promptRegister(w,r,uid,xCountry,"","https://lh3.googleusercontent.com/W2q6sVO6ADtrwfPYuJVBeT5Vi2G0Z9-V9cV6qm_H-9sSsZ7eii17f2akVHIsTuiWbNxX_EwXmb7OKonHWUI1RBh5R4DujN6Z","")
			}
			
		}
}
// delay in seconds
// execute a delay in x seconds
func delaySecond(n time.Duration) {
	 time.Sleep(n * time.Second)
	 return
}

//get channel key given the channel ID
//used by Firebase channel
func getKeyChannel(c context.Context, ChanID string) *datastore.Key {
  ////fmt.Fprintf(w, "DEBUG1>>> .<br>")
  //D0086
  return datastore.NameKey("channel", ChanID, nil)
}
 
//gets the echarts statistics
func getHomeStatsNums(w http.ResponseWriter, r *http.Request, uid, TARGET, NAME, div string) (m MyBox) {		
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSSTATS").Filter("VAL_TXT = ", TARGET)
	//log.Panicf("[S0001]")
    recCount,_ := datastoreClient.Count(c,q)
    stats := make([]TDSSTATS, 0, recCount)
    //log.Printf("datastoreClient.Get()  [5356]")
    if _, err := datastoreClient.GetAll(c, q, &stats); err != nil {
		checkError(w,r,"",err,"CHK_OQ")
		return
	  }
	
	m.Element = div
	m.Name = NAME
	for _, p := range stats{
		var g MyBoxItem
		g.Value = p.VAL_NUM
		str := strings.Replace(p.STAT_NAME, TARGET, "", -1)
		g.Name = str
		m.Items = append(m.Items, g)
	}
	
	//cache
	cKey := fmt.Sprintf("ECHART:%v-%v-%v", TARGET, NAME, div)
	//data := fmt.Sprintf("%v", m)
	data,_ := json.Marshal(m)
	putBytesToMemcacheWithExp(w,r,cKey,data,3600)	
	
	return m
}
 
//gets the most recent, os, browser stats
func getHomeStats(w http.ResponseWriter, r *http.Request) (OnlineUsers int,
		MOST_RECENT_1,
		MOST_RECENT_2,
		MOST_RECENT_3,
		MOST_ACTIVE_1,
		MOST_ACTIVE_2,
		MOST_ACTIVE_3,
		MOST_POPULAR_1,
		MOST_POPULAR_2,
		MOST_POPULAR_3, 		
		MOST_OS_1,
		MOST_OS_2,
		MOST_OS_3,
		MOST_BROWSER_1,
		MOST_BROWSER_2,
		MOST_BROWSER_3 string) {
	//c := appengine.NewContext(r)
	
	//get homeProcessor cached items
	TASK_MEMCACHER_homeProcessor_CACHE := ""
	TASK_MEMCACHER_homeProcessor_CACHE = getStrMemcacheValueByKey(w,r,"TASK_MEMCACHER_homeProcessor")
 
	//homProcessor memcache
	SPL := strings.Split(TASK_MEMCACHER_homeProcessor_CACHE,",")
		
	if TASK_MEMCACHER_homeProcessor_CACHE != "" {
		//mkey := "TOT_ONLINE"
		OnlineUsers = str2int(SPL[0])
 
		//mkey = "MOST_RECENT_1"
		MOST_RECENT_1 = SPL[1]
 
		//mkey = "MOST_RECENT_2"
		MOST_RECENT_2 = SPL[2]	
 
		//key = "MOST_RECENT_3"
		MOST_RECENT_3 = SPL[3]	
 
		//mkey = "MOST_ACTIVE_1"
		MOST_ACTIVE_1 = SPL[4]
		
		//mkey = "MOST_ACTIVE_2"
		MOST_ACTIVE_2 = SPL[5]
		
		//mkey = "MOST_ACTIVE_3"
		MOST_ACTIVE_3 = SPL[6]
 
		//mkey = "MOST_POPULAR_1"
		MOST_POPULAR_1 = SPL[7]	
 
		//mkey = "MOST_POPULAR_2"
		MOST_POPULAR_2 = SPL[8]
 
		//mkey = "MOST_POPULAR_3"
		MOST_POPULAR_3 = SPL[9]
		
		MOST_OS_1 = SPL[10]
 
		MOST_OS_2 = SPL[11]
 
		MOST_OS_3 = SPL[12]
		
		MOST_BROWSER_1 = SPL[13]
 
		MOST_BROWSER_2 = SPL[14]
 
		MOST_BROWSER_3 = SPL[15]
 
	}
 
	if OnlineUsers <= 0 && MOST_RECENT_1 == "" && MOST_RECENT_2 == "" && MOST_RECENT_3 == "" && MOST_ACTIVE_1 == "" && MOST_ACTIVE_2 == "" && MOST_ACTIVE_3 == "" && MOST_POPULAR_1 == "" && MOST_POPULAR_2 == "" && MOST_POPULAR_3 == "" {
		OnlineUsers,
		MOST_RECENT_1,
		MOST_RECENT_2,
		MOST_RECENT_3,
		MOST_ACTIVE_1,
		MOST_ACTIVE_2,
		MOST_ACTIVE_3,
		MOST_POPULAR_1,
		MOST_POPULAR_2,
		MOST_POPULAR_3, 		
		MOST_OS_1,
		MOST_OS_2,
		MOST_OS_3,
		MOST_BROWSER_1,
		MOST_BROWSER_2,
		MOST_BROWSER_3 = homeProcessor(w, r)
		//buffer.WriteString(fmt.Sprintf("SERVED UNCACHED DATA\n"))	
	
	} else {
		//buffer.WriteString(fmt.Sprintf("SERVED CACHED DATA :-)\n"))
	}
	
	return 	OnlineUsers,
	MOST_RECENT_1,
	MOST_RECENT_2,
	MOST_RECENT_3,
	MOST_ACTIVE_1,
	MOST_ACTIVE_2,
	MOST_ACTIVE_3,
	MOST_POPULAR_1,
	MOST_POPULAR_2,
	MOST_POPULAR_3,
	MOST_OS_1,
	MOST_OS_2,
	MOST_OS_3,
	MOST_BROWSER_1,
	MOST_BROWSER_2,
	MOST_BROWSER_3
}
			
//create channel
// create a channel
func createChannel(w http.ResponseWriter, r *http.Request) {
	_, uid := checkSession(w,r)
	isDesktopClient := false
	FL_DESKTOP := checkDesktop(w,r)
	if FL_DESKTOP == true {
		isDesktopClient = true
	}
	if SYS_STATELESS_SERVER == true {	
		ChanID := fmt.Sprintf("%v", r.FormValue("UID"))
		tok := newChannelPut(w,r,ChanID,uid,isDesktopClient,"")
		data,_ := json.Marshal(tok)
		w.Write(data)
		return		
	}
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	
	func_code := r.FormValue("func_code")
	if func_code != "NEW_INSTALL" {
		checkReferrer(w,r)
	}
 
  ChanID := fmt.Sprintf("%v", r.FormValue("user"))
 
  if r.Header.Get("X-Goog-Authenticated-User-Email") == "" && uid == "" {
	uid = randSeq(6)
  }
 
  if ChanID == "" {
	ChanID = uid
  }
 
  var e Channelstore
  FL_CHAN_EXIST := true
  tok := ""
  //D0086
  datastoreClient := createClientDS()
  //log.Printf("datastoreClient.Get()  [5539]")
  if err := datastoreClient.Get(c, getKeyChannel(c,ChanID), &e); err != nil {
		FL_CHAN_EXIST = false
  } else {
		timeFormat := "20060102150405"
		then, err := time.Parse(timeFormat, e.DateCreated)
		if err != nil {
			 panic(err)
			//return
		}
		duration := time.Since(then)
		if duration.Hours() > CHAN_HOURS_EXPR {
			IS_ACTIVE := getActiveStatus(w,r,e.ChanID)
			if IS_ACTIVE == "N" {
				//delete old channel here
				FL_CHAN_EXIST = false
				datastoreClient.Delete(c, getKeyChannel(c,e.ChanID))
			}
		}
  }
 
  if FL_CHAN_EXIST == false {
		
		tokNew := newChannelPut(w,r,ChanID,uid,isDesktopClient,"")
		tok = tokNew
	} else {
		tok = e.TokenID
	}
 
	data,_ := json.Marshal(tok)
	w.Write(data)
	return
}
func getToken(w http.ResponseWriter, r *http.Request) {
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {
		w.WriteHeader(200)
		w.Write([]byte("InvalidUser-TokenNotAvailable"))
		return
	}
	_, token := createToken(w,r,"","")
	TEMPDATA := TEMPSTRUCT{
		STR_FILLER1: token,
		STR_FILLER2: SYS_SERVER_NAME,
		STR_FILLER3: getSitesServerName(w,r),
	}
	data, err := json.Marshal(TEMPDATA)
	if err != nil {
		fmt.Println(err)
	}
	w.WriteHeader(200)
	w.Write(data)
	return
}	
//create token
// create a token
func createToken(w http.ResponseWriter, r *http.Request, ChanID, recType string) (uid string, token string){
	if SYS_STATELESS_SERVER == true {
		token = SYS_FIXED_TOKEN
		return uid, token
	}
	isDesktopClient := false
	FL_DESKTOP := checkDesktop(w,r)
	if FL_DESKTOP == true {
		isDesktopClient = true
	}
 
  //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
  //u := user.Current(c)
  if r.Header.Get("X-Goog-Authenticated-User-Email") != "" && ChanID == "" {
	//ChanID = uid
	if recType != "cron" {
		_, uid := checkSession(w,r)
		ChanID = uid		
	}
  }
  //if uid == "" {
  if r.Header.Get("X-Goog-Authenticated-User-Email") == "" && ChanID == "" {
	if recType != "cron" {
		ipAdd := getIpAdd(w,r)
		geoStr := getGeoString(w,r)
		if geoStr == "" {
			uid = fmt.Sprintf("guest-%v@%v", randSeq(6), ipAdd)
		} else {
			uid = fmt.Sprintf("guest-%v@%v", geoStr, ipAdd)
		}
		ChanID = uid
	}
  }
  //use existing channel id
  if uid == "" {
  	 uid = ChanID
  }
  var e Channelstore
  FL_CHAN_EXIST := true
  tok := ""
  //D0086
  datastoreClient := createClientDS()
  //log.Printf("datastoreClient.Get()  [5619]")
  if err := datastoreClient.Get(c, getKeyChannel(c,ChanID), &e); err != nil {
	  FL_CHAN_EXIST = false
  } else {
	if e.DateCreated == "" {
		//if no date found
		e.DateCreated = "20150101000000"
	}
  	timeFormat := "20060102150405"
	then, err := time.Parse(timeFormat, e.DateCreated)
	if err != nil {
		 panic(err)
		//return
	}
	duration := time.Since(then)
	if duration.Hours() > CHAN_HOURS_EXPR {
		IS_ACTIVE := getActiveStatus(w,r,e.ChanID)
		if IS_ACTIVE == "N" {
			//delete old channel here
			FL_CHAN_EXIST = false
			datastoreClient.Delete(c, getKeyChannel(c,e.ChanID))
		}
	}
  }
  if FL_CHAN_EXIST == false {
		tokNew := newChannelPut(w,r,ChanID,uid,isDesktopClient,recType)
		tok = tokNew
  } else {
		tok = e.TokenID
  }
  return uid, tok
}
 
//create token (channel logic)
// create a token with channel method
func createTokenChan(w http.ResponseWriter, r *http.Request, thisChan chan Token, chanDone chan bool, ChanID, recType string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
	isDesktopClient := false
	FL_DESKTOP := checkDesktop(w,r)
	if FL_DESKTOP == true {
		isDesktopClient = true
	}
  uid := ""
  tok := ""
  //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
  //u := user.Current(c)
  if r.Header.Get("X-Goog-Authenticated-User-Email") != "" && ChanID == "" {
	//ChanID = uid
	_, uid := checkSession(w,r)
	ChanID = uid
  }
  //if uid == "" {
  if r.Header.Get("X-Goog-Authenticated-User-Email") == "" && ChanID == "" {
	ipAdd := getIpAdd(w,r)
	geoStr := getGeoString(w,r)
	if geoStr == "" {
		uid = fmt.Sprintf("guest-%v@%v", randSeq(6), ipAdd)
	} else {
		uid = fmt.Sprintf("guest-%v@%v", geoStr, ipAdd)
	}
	ChanID = uid
	
  }
  //use existing channel id
  if uid == "" {
  	 uid = ChanID
  }
  var e Channelstore
  FL_CHAN_EXIST := true
  //D0086
  datastoreClient := createClientDS()
  //log.Printf("datastoreClient.Get()  [5694]")
  if err := datastoreClient.Get(c, getKeyChannel(c,ChanID), &e); err != nil {
	  FL_CHAN_EXIST = false
  } else {
	if e.DateCreated == "" {
		//if no date found
		e.DateCreated = "20150101000000"
	}
  	timeFormat := "20060102150405"
	then, err := time.Parse(timeFormat, e.DateCreated)
	if err != nil {
		 panic(err)
		//return
	}
	duration := time.Since(then)
	if duration.Hours() > CHAN_HOURS_EXPR {
		IS_ACTIVE := getActiveStatus(w,r,e.ChanID)
		if IS_ACTIVE == "N" {
			//delete old channel here
			FL_CHAN_EXIST = false
			datastoreClient.Delete(c, getKeyChannel(c,e.ChanID))
		}
	}
  }
  if FL_CHAN_EXIST == false {
 
		tokNew := newChannelPut(w,r,ChanID,uid,isDesktopClient,recType)
		tok = tokNew
  } else {
		tok = e.TokenID
  }
  //return uid, tok
  t := Token{
	  User: uid,
	  Token: tok,
  }
  thisChan <- t
  chanDone <- true
}
 
//saves new channel id for the user
// save a channel for the user
func newChannelPut(w http.ResponseWriter, r *http.Request, ChanID string, uid string, isDesktopClient bool, recType string) (tokNew string) {
	//c := appengine.NewContext(r)
	if SYS_STATELESS_SERVER == true {
		return randSeq2(64)
	}
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	if ChanID != "" {
 
	  tokNew = randSeq2(64)
		
		t := time.Now().Local()
		DateCreated := fmt.Sprintf(t.Format("20060102150405"))
		g := Channelstore{
				TokenID: tokNew,
				ChanID: ChanID,
				IsDesktop: isDesktopClient,
				Passcode: "",
				DateCreated: DateCreated,
				RecType: recType,
		}
        //D0086
        datastoreClient := createClientDS()
		_, err := datastoreClient.Put(c, getKeyChannel(c,ChanID), &g)
		//log.Printf("[S0002] datastoreClient.Put()")
		if err != nil {
				 panic(err)
				//return
		}
		
		//update cache
		// incert a record in memcache as string
		cKey := fmt.Sprintf("CHANNEL_CACHE_%v", uid)
		ChanCacheData := fmt.Sprintf("%v,%v,%v", ChanID, isDesktopClient, tokNew)
		putStrToMemcacheWithoutExp(w,r,cKey,ChanCacheData)
		
		//clear USERS LIST
		USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
		USERS_ONLINE_TOT := "USERS_ONLINE_LIST_TOT"
		putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
		putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_TOT,"")
		//return tokNew
		
	} else {
	
		msgDtl := fmt.Sprintf("[U00173] ERROR: Channel processing error.")
		msgTyp := "error"
		msgURL := "/chat"
		action := fmt.Sprintf("Not sure what has happened! <a href=\"/\">Click here</a> to go to homepage.")
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)	
		return
	}
	
	return tokNew
}
 
//check if user is personal author of SID
func checkPersonalAuthor(w http.ResponseWriter, r *http.Request, AUTHOR, SID string, MEDIA_ID int) (isOk bool) {
	//c := appengine.NewContext(r)
	
	uReferer := r.Referer()
	
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
	if FL_PROC_OK == false {return}
	
	if uid != AUTHOR {
		
		//updateUserActiveData(w, r, c, uid, "Error: access of personal content: "+SID)
		
		msgDtl := fmt.Sprintf("[U00177] ERROR: This document (%s) is accessible only by the author (%v).", SID, AUTHOR)
		//sendEvent(w,r, FDBKMAIL, msgDtl)
		msgTyp := "error"
		msgURL := fmt.Sprintf("/infodb?DB_FUNC=MEDIA&CATEGORY=")
		action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other media.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
	return true
}
 
//caches article details
// cache a single database record using memcache		
func TDSARTL_Cacher(w http.ResponseWriter, r *http.Request, uid string,DOC_ID int, blobkey, DOC_STAT, FL_SHARED, UID, FL_COUNTRY_SPECIFIC, TITLE, TAGS, SHARED_TO string, MUSIC_ID int) {
	//c := appengine.NewContext(r)
	cKey := fmt.Sprintf("TDSARTL_DOCID_CACHE_%v", DOC_ID)
	TDSARTL_ARRAY := fmt.Sprintf("%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%d", blobkey,
																	CACHE_STORE_DELIM,
																DOC_STAT,
																	CACHE_STORE_DELIM,
																FL_SHARED,
																	CACHE_STORE_DELIM,
																UID,
																	CACHE_STORE_DELIM,
																FL_COUNTRY_SPECIFIC,
																	CACHE_STORE_DELIM,
																TITLE,
																	CACHE_STORE_DELIM,
																TAGS,
																	CACHE_STORE_DELIM,
																SHARED_TO,
																	CACHE_STORE_DELIM,
																MUSIC_ID)
																
	putStrToMemcacheWithoutExp(w,r,cKey,TDSARTL_ARRAY)
}
 
func TDSSLIDE_Cacher(w http.ResponseWriter, r *http.Request, uid string, DOC_ID int, blobkey, DOC_STAT, FL_SHARED, UID, FL_COUNTRY_SPECIFIC, TITLE, TAGS, SHARED_TO string, MUSIC_ID int, GET_NEXT string) {
	cKey := fmt.Sprintf("TDSSLIDE_DOCID_CACHE_%v", DOC_ID)
	TDSSLIDE_ARRAY := fmt.Sprintf("%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v", blobkey,
																	CACHE_STORE_DELIM,
																DOC_STAT,
																	CACHE_STORE_DELIM,
																FL_SHARED,
																	CACHE_STORE_DELIM,
																UID,
																	CACHE_STORE_DELIM,
																FL_COUNTRY_SPECIFIC,
																	CACHE_STORE_DELIM,
																TITLE,
																	CACHE_STORE_DELIM,
																TAGS,
																	CACHE_STORE_DELIM,
																SHARED_TO,
																	CACHE_STORE_DELIM,
																MUSIC_ID,
																    CACHE_STORE_DELIM,
																GET_NEXT)
																
	putStrToMemcacheWithoutExp(w,r,cKey,TDSSLIDE_ARRAY)					
}
 
//analyze eror to check over quota
func checkError(w http.ResponseWriter, r *http.Request, uid string, ERR_DATA error, EH_FUNC string) {
    //c := appengine.NewContext(r)
	//log.Printf("Called checkError()")
	switch EH_FUNC {
        case "CHK_OQ":
			ERR_STR := fmt.Sprintf("%v", ERR_DATA)
			i := strings.Index(ERR_STR, "Over quota:")
			if i != -1 {
                //log.Printf("Overquota status")
				cKey := "IS_OVER_QUOTA"
				putStrToMemcacheWithExp(w,r,cKey,"Y",GEN_CONTENT_EXPIRES2)
				//clear users online cache to stop chan notifs
				USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
				putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
			} else {
                //log.Printf("Panic status")
				panic(ERR_DATA)
			}
	}
}
//sample use
//stripchars("She was a soul stripper. She took my heart!","aei")
// strip given chars from a string
func stripchars(str, chr string) string {
    return strings.Map(func(r rune) rune {
        if strings.IndexRune(chr, r) < 0 {
            return r
        }
        return -1
    }, str)
}
//send data to channel
func channelMessageHandler(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	CHAN_FUNC := r.FormValue("CHAN_FUNC")
	UID := fmt.Sprintf("%v",r.FormValue("UID"))
	_, uid := checkSession(w,r)
	if UID == "" {
		UID = uid
	}
	switch CHAN_FUNC {
		case "testChannel":
			tokChan := make(chan Token)
			tokChanDone := make(chan bool)
			go createTokenChan(w,r,tokChan,tokChanDone,UID,"")
			tok := <-tokChan
			<-tokChanDone
			token := tok.Token
			w.Write([]byte(token))
			return
		case "sendChannel":
			  MSG := r.FormValue("message")
			  sendChannelMessage(w,r,UID,MSG)
			  return
		case "openLink":
			  MSG := r.FormValue("message")
			  sendChannelMessage(w,r,UID,MSG)
			  temp := strings.Split(MSG,"@888@")
			  if len(temp) > 0 {
				targetURL := strings.Replace(temp[3], "@888@", "&", -1)
				k, _ := url.Parse(targetURL)
				m, _ := url.Parse(getSchemeUrl(w,r))
				
				ctrURL := ""
				if k.Host != m.Host {
					url, _ := url.Parse(targetURL)
					ctrURL = fmt.Sprintf("%v://%v/presenter?MODE=CONTROL@888@PRESENTER_SESSION_KEY=%v", url.Scheme, k.Host, "dummy")
				} else {
					ctrURL = fmt.Sprintf("/presenter?MODE=CONTROL@888@PRESENTER_SESSION_KEY=%v", "dummy")
				}
				http.Redirect(w, r, ctrURL, http.StatusFound)
				return
			  }
			  return
		case "remSwitch":
			  TS := r.FormValue("SITE")
			  MSG := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK@888@%v/tools?FUNC=WIDGET&t=RemoteControl@888@%v@888@%v", TS, UID,0)
			  sendChannelMessage(w,r,UID,MSG)
			  dummyCmd(w,r,uid)
              return
        
        case "ulapphsyscmd":
              //log.Printf("ULAPPH-SYS-UPD")
			  MSG := r.FormValue("message")
              sendChannelMessage(w,r,uid,MSG)
              w.WriteHeader(200)
              w.Write([]byte("ok"))
			  //dummyCmd(w,r,uid)
			  return
		case "moveSlides":
			  count := r.FormValue("count")
			  count2 := str2int(count)
			  MSG := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@swipeup")
			  for i := 1; i < count2; i++ {
				sendChannelMessage(w,r,UID,MSG)
				delaySecond(5)
			  }
			  return
		case "authPasscode":
			TID := r.FormValue("TID")
			UID := r.FormValue("UID")
			CID := r.FormValue("CID")	
			TUL := r.FormValue("target-url")		
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: UID,
				STR_FILLER2: TID,
				STR_FILLER3: CID,
				STR_FILLER4: TUL,
			}
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := rootTemplateQRTokenAccess.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return
		case "authPasscode2":
			TID := r.FormValue("TID")
			UID := r.FormValue("UID")
			CID := r.FormValue("CID")
			TUL := r.FormValue("target-url")
						
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: UID,
				STR_FILLER2: TID,
				STR_FILLER3: CID,
				STR_FILLER4: TUL,
			}
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := rootTemplateGuestTokenAccess.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return	
		case "authPasscodeVal":
			CID := r.FormValue("CID")
			TID := r.FormValue("TID")
			UID := r.FormValue("UID")
			PCD := r.FormValue("passcode")	
			TUL := r.FormValue("target-url")
			targetURL := strings.Replace(TUL, "@888@", "&", -1)	
			targetURL2 := fmt.Sprintf("%v&user=%v&chan=%v&tok=%v", targetURL, UID, CID, TID)
              var g Channelstore
              //log.Printf("datastoreClient.Get()  [6026]")
			  if err := datastoreClient.Get(c, getKeyChannel(c,UID), &g); err != nil {
				msgDtl := fmt.Sprintf("[U00159] ERROR: Authentication failed. User does not exist.")
				fmt.Fprintf(w, "%v", msgDtl)
				return
			  }
			  if g.ChanID == UID && g.TokenID == TID && g.Passcode == PCD {
				http.Redirect(w, r, targetURL2, http.StatusFound)
				return
			  } else {
				msgDtl := fmt.Sprintf("[U00160] ERROR: Authentication failed due to either wrong Email or Passcode.")
				fmt.Fprintf(w, "%v", msgDtl)
				return			
			  }
		case "authPasscodeVal2":
			CID := r.FormValue("CID")
			TID := r.FormValue("TID")
			UID := r.FormValue("UID")
			PCD := r.FormValue("passcode")
			SID := r.FormValue("SID")
			TITLE := r.FormValue("TITLE")			
			targetURL2 := fmt.Sprintf("/?q=home2&mode=guest&user=%v&chan=%v&tok=%v&SID=%v&TITLE=%v", UID, CID, TID, SID,TITLE)
              var g Channelstore
              //log.Printf("datastoreClient.Get()  [6049]")
			  if err := datastoreClient.Get(c, getKeyChannel(c,UID), &g); err != nil {
				msgDtl := fmt.Sprintf("[U00159] ERROR: Authentication failed. User does not exist.")
				fmt.Fprintf(w, "%v", msgDtl)
				return
			  }
			  if g.ChanID == UID && g.TokenID == TID && g.Passcode == PCD {
				http.Redirect(w, r, targetURL2, http.StatusFound)
				return
			  } else {
				msgDtl := fmt.Sprintf("[U00160] ERROR: Authentication failed due to either wrong Email or Passcode.")
				fmt.Fprintf(w, "%v", msgDtl)
				return			
			  }
		case "updateChannel":
			TID := r.FormValue("TID")
			UID := r.FormValue("UID")
			tok := ""
			passCode := ""
			if UID != "" {
				isDesktop := r.FormValue("isDesktop")
				isDesktopClient := false
				if isDesktop == "Y" {
					isDesktopClient = true
				}
				passCode = randSeq2(8)
				g := Channelstore{
						TokenID: TID,
						ChanID: UID,
						IsDesktop: isDesktopClient,
						Passcode: passCode,
                }
                _, err := datastoreClient.Put(c, getKeyChannel(c,UID), &g)
                //log.Printf("datastoreClient.Put()  [6082]")
				if err != nil {
						panic(err)
				}
				tok = TID
			} else {
				tok = TID
			}
			testObject := new(TestObject)
			testObject.Token = tok
			testObject.Passcode    = passCode
			data, err := json.Marshal(testObject)
			if err != nil {
				fmt.Println(err)
			}
		  w.Write(data)
		  return
		case "updateChannel2":
			TID := r.FormValue("TID")
			UID := r.FormValue("UID")
			tok := ""
			passCode := ""
			if UID != "" {
				isDesktop := r.FormValue("isDesktop")
				isDesktopClient := false
				if isDesktop == "Y" {
					isDesktopClient = true
				}
				passCode = randSeq2(8)
				t := time.Now().Local()
				dtCreated := fmt.Sprintf(t.Format("20060102150405"))
				g := Channelstore{
						TokenID: TID,
						ChanID: UID,
						DateCreated: dtCreated,
						IsDesktop: isDesktopClient,
						Passcode: passCode,
                }
                _, err := datastoreClient.Put(c, getKeyChannel(c,UID), &g)
                //log.Printf("datastoreClient.Put()  [6121]")
				if err != nil {
						panic(err)
				}
				tok = TID
			} else {
				tok = TID
			}
			testObject := new(TestObject)
			testObject.Token = tok
			testObject.Passcode    = passCode
			data, err := json.Marshal(testObject)
			if err != nil {
				fmt.Println(err)
			}
		  w.Write(data)
		  return
		case "deleteChannel":
			CID := r.FormValue("CID")
			dmsg := fmt.Sprintf("DELETED:%v",CID)
			sendChannelMessage(w,r,CID,dmsg)
			if CID != "" {
				datastoreClient.Delete(c, getKeyChannel(c,CID))
			}
			fmt.Fprintf(w, "SESSION DELETED.<br>")
			return
		default:
			return
	}
}
 
func sendChannelMessage(w http.ResponseWriter, r *http.Request, recID string, msg string) {
	//c := appengine.NewContext(r)
	//log.Printf("sendChannelMessag")
	ulapphDebug(w,r, "info", fmt.Sprintf("sendChannelMessage() %v", ""))
	if recID == "" || msg == "" {
		return
	}
	var g ChanMessage
	g = ChanMessage{
		User: recID,
		Message: msg,
	}
	data,_ := json.Marshal(g)
	topic := ""
	switch {
	//D0077
	case recID == "cctv":
		IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
		if IS_SEARCH_SERVER == "Y" {
			SEARCH_SERVER = domRefMatchS
		}
		SSH := strings.Split(SEARCH_SERVER, ".")
		if len(SSH) > 0 {
			SSI := strings.Split(SSH[0], "//")
			if len(SSI) > 0 {
				SSS := SSI[1]
				topic = fmt.Sprintf("%v/%v/%v", SSS, SYS_SERVER_NAME, "cctv")
			}
		}
	case recID == "public":
		IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
		if IS_SEARCH_SERVER == "Y" {
			SEARCH_SERVER = domRefMatchS
		}
		SSH := strings.Split(SEARCH_SERVER, ".")
		if len(SSH) > 0 {
			SSI := strings.Split(SSH[0], "//")
			if len(SSI) > 0 {
				SSS := SSI[1]
				topic = fmt.Sprintf("%v/%v/%v", SSS, "channel-public", "notifications")
			}
		}
	case strings.Index(recID, "cron|") != -1:
		SPL := strings.Split(recID, "|")
		_, token := createToken(w,r,SPL[1],"cron")
		topic = fmt.Sprintf("%v/%v/%v", SYS_SERVER_NAME, "channel", token)
	case recID == "cctv-stream":
		topic = fmt.Sprintf("%v/%v/%v", SYS_SERVER_NAME, "channel", SYS_FIXED_TOKEN)
	default:
		_, token := createToken(w,r,recID,"")
		topic = fmt.Sprintf("%v/%v/%v", SYS_SERVER_NAME, "channel", token)
	}
	//log.Printf("topic: %v", topic)
	//log.Printf("data: %v", data)
	sendChannelFirebase(w,r,topic,data)
}
 
func sendChatPublic(w http.ResponseWriter, r *http.Request, mode, pubRoomID string, msg string) {
	if mode == "" {
		mode = "public"
	}
	if pubRoomID == "" {
		pubRoomID = SYS_CHAT_PUB_ROOM_ID
	}
	var g ChanMessage
	g = ChanMessage{
		User: fmt.Sprintf("chat-%v", mode),
		Message: msg,
	}
	//data,_ := json.MarshalIndent(g, "", "  ")
	data,_ := json.Marshal(g)
	
	//each user has token or channel id
	//_, token := createToken(w,r,recID,"")
	topic := ""
	switch mode {
		case "worldwide":
			topic = fmt.Sprintf("zzz-shared/chat-%v/%v", mode, pubRoomID)
		case "country":
			topic = fmt.Sprintf("zzz-shared/chat-%v/%v", mode, pubRoomID)
		default:
			topic = fmt.Sprintf("%v/chat-%v/%v", SYS_SERVER_NAME, mode, pubRoomID)
	}
	
	//sendChannelFirebase(w,r,"chat-public",SYS_CHAT_PUB_ROOM_ID,
	sendChannelFirebase(w,r,topic,data)
}
 
func sendChatPrivate(w http.ResponseWriter, r *http.Request, roomID string, msg string) {
	//send firebase
	//TOPIC: /ulapph-firebase/<SYS_SERVER_NAME>/chat-private/<generated roomID>
	//msg = base64.URLEncoding.EncodeToString([]byte(msg))
	var g ChanMessage
	g = ChanMessage{
		User: "chat-private",
		Message: msg,
	}
	//data,_ := json.MarshalIndent(g, "", "  ")
	data,_ := json.Marshal(g)
	
	//each user has token or channel id
	//_, token := createToken(w,r,recID,"")
	topic := fmt.Sprintf("%v/%v/%v", SYS_SERVER_NAME, "chat-private", roomID)
	sendChannelFirebase(w,r,topic,data)
}
 
func sendChannelFirebase(w http.ResponseWriter, r *http.Request, topic string, payload []byte) {
	//log.Printf("sendChannelFirebase()")
	if SYS_RUNTIME_PLATFORM == "local" {
		return
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("sendChannelFirebase() %v", ""))
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	//log.Printf("sendChannelFirebase")
	if topic == "" || payload == nil {
		return
	}
	//set firebase api
	rdr := strings.NewReader(FIREBASE_SERVER_JSON)
	FIREBASE_KEY_JSON, err := ioutil.ReadAll(rdr)
	if err != nil {
		log.Panicf("[ioutil.ReadAll] ERROR: %v", err)
		return
	}
	//ctx := newappengine.NewContext(r)
	conf, err := google.JWTConfigFromJSON(FIREBASE_KEY_JSON, "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/firebase.database")
	if err != nil {
		log.Panicf("[google.JWTConfigFromJSON] ERROR: %v", err)
		return
	}
	//client := conf.Client(oauth2.NoContext)
	//client := conf.Client(ctx)
    client := conf.Client(c)
    fb := firego.New(FIREBASE_URL , client)
	_, err = fb.Child(topic).Push(string(payload))
	if err != nil {
		//log.Printf("[fb.ChildPush] ERROR: %v", err)
		return
	}
	if err = fb.Remove(); err != nil {
	    //log.Fatalf("ERROR: %v", err)
		//log.Printf("[fb.Remove] ERROR: %v", err)
		return
	}
	return
}
 
//send message to channel
//when there are new GB messages
func sendMessage(w http.ResponseWriter, r *http.Request, UID string, MSG_FUNC string, CUST_MSG string, FROM, mapURL, SID string) {
	//c := appengine.NewContext(r)
	//u := user.Current(c)
	//D0116
	if SYS_REALTIME_NOTIFS == false {
		return
	}
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()	
	if r.Header.Get("X-Goog-Authenticated-User-Email") != ""  {
		if userPrivacy(w,r) == "INCOGNITO" {
			//dont log
			return
		}
	}
	
	//for public also
	switch MSG_FUNC {
 
        case "CH_MSG_NOTIFY_EVENTS":
			i := strings.Index(CUST_MSG, "Stackdriver_terminus_bot")
			if i <= 0 && CUST_MSG != "" {
				CUST_MSG = fmt.Sprintf("%v MAP: %v", CUST_MSG, mapURL)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyCH(c, CUST_MSG, SID)
                })
                //channel.Send(c,ChanID,CUST_MSG)
				return
			}
			return
	}
	//get channel cache
	cKey := fmt.Sprintf("CHANNEL_CACHE_%v", UID)
	ChanCacheData := ""
	ChanID := ""
	isDesktopClient := false
	//tok := ""
	message := ""
	//ChanCacheData := fmt.Sprintf("%v,%v,%v", ChanID, isDesktopClient, tok)
	ChanCacheData = getStrMemcacheValueByKey(w,r,cKey)
	
	if ChanCacheData != "" {
		SPL := strings.Split(ChanCacheData,",")
		ChanID = SPL[0]
		if SPL[1] == "true" {
			isDesktopClient = true
		} else {
			isDesktopClient = false
		}
		//tok = SPL[2]
	} else {
		
      var g Channelstore
      //D0086
      datastoreClient := createClientDS()
      //log.Printf("datastoreClient.Get()  [6350]")
	  if err := datastoreClient.Get(c, getKeyChannel(c,UID), &g); err != nil {
		  g.ChanID = randSeq(6)
		  g.IsDesktop = true
	  }
	  ChanID = g.ChanID
	  isDesktopClient = g.IsDesktop
	
	}
	var buffer3 bytes.Buffer
	
	switch MSG_FUNC {
				
		case "CH_MSG_LOGOUT":
			sendChannelMessage(w,r,ChanID,"LOGOUT.")
 
			
		case "CH_MSG_NOTIFY":
 
			geoTags := ""
			if FROM != "" {
				PROFILE_PIC_URL := getProfilePic(w, r, FROM)
				COUNTRY_PIC_URL := getCountryPic(w, r, FROM)
				geoTags = fmt.Sprintf("<img src=\"%v\" width=60 height=60></img><img src=\"%v\" width=48 height=30>", PROFILE_PIC_URL, COUNTRY_PIC_URL)
			}
			cKey := fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", UID)
			redURL := fmt.Sprintf("/guestbook?UID=%s", UID)
            GUESTBOOK_NUM_MSG := getStrMemcacheValueByKey(w,r,cKey)
				thisGBNum := str2int(GUESTBOOK_NUM_MSG)
				if thisGBNum > 0 {
					if isDesktopClient == true {
						buffer3.WriteString(fmt.Sprintf("<a href=\"%s\" target=\"guestbookmsg\"><img src=\"/static/img/newmessage.gif\" width=80 height=40></img><span class=\"blink_me\">%v<font color=white size=14>(%d)</font></a></span>", redURL, geoTags, thisGBNum))	
					} else {
						buffer3.WriteString(fmt.Sprintf("<a href=\"%s\" target=\"guestbookmsg\"><img src=\"/static/img/newmessage.gif\" width=80 height=40></img>%v<script type=\"text/javascript\">var supportsVibrate = \"vibrate\" in navigator;navigator.vibrate('[1000, 500, 1000, 500, 5000]');</script>", redURL, geoTags))
					}
				} else {
					buffer3.WriteString(fmt.Sprintf("%v", CUST_MSG))
				}
				
			message = buffer3.String()
			i := strings.Index(ChanID, "@")
			if i != -1 {
				//when CH_MSG_NOTIFY
				sendChannelMessage(w,r,ChanID,message)
 
			}
			return
		
	}
	//}
}
 
func registration(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	oauth := r.FormValue("oprov")
    //u := user.Current(c)
	uid := ""
	email := ""
	avatar := ""
	
	switch {
		case oauth == "":
			if r.Header.Get("X-Goog-Authenticated-User-Email") == "" && oauth == "" {
				promptLogin(w,r,uid,"")
				//uid = uid
				_, uid = checkSession(w,r)
			} else {
				uid = r.FormValue("ouid")
				email = uid
				avatar = "/static/img/no-profile.png"
			}	
		case oauth != "":
 
			uid = r.FormValue("ouid")
			email = r.FormValue("oemail")
			avatar = r.FormValue("oavatar")
	}
	
	regType := r.FormValue("regType")
	country := r.FormValue("country")
	registerEmailChecked := r.FormValue("registerEmail")
	
	if strings.TrimSpace(uid) == "" {
		redURL := "/login"
		http.Redirect(w, r, redURL, http.StatusFound)
		return		
	}
	
	updateUserActiveData(w, r, c, uid, "/registration")
 
	r.ParseForm()
	
	//check user
	FUNC_CODE := "VALUSER"
	FL_VALID_USER, _, _ , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	
	if FL_VALID_USER == false {
 
		if registerEmailChecked == "on" {
		
			switch regType {
			
			case "one-click":
 
				//insert into TDSUSERS
				//---------------
						
					tstmp := time.Now().Local()
					
					p := TDSUSERS{
						SYS_VER: 1,	
						USER: uid,	
						COMPANY_ID: COMPANY_ID,	
						CLOUD_NAME: CLOUD_NAME,	
						GROUP_ID: "GRP_USER", 	
						LOGGED_IN: 1,	
						LAST_LOGIN: fmt.Sprintf(tstmp.Format("20060102150405")),
						LAST_ACTIVE: fmt.Sprintf(tstmp.Format("20060102150405")),
						ACTIVE_DTLS: "",
						USER_ACC_OPT: "",	
						FL_QUOTA: "Y",	
						FL_BILLED: "N",	
						FL_WORK: "N",	
						FL_WF_ID: "0",
						USER_ACC_TYP: "Free",
					}
					
					if SYS_AUTO_REG_ENABLE == true {
						p.USER_ACC_OPT = "Normal"
					} else {
						p.USER_ACC_OPT = "Pending"
					}
					
					thisKey := fmt.Sprintf("%s", uid)
                    key := datastore.NameKey("TDSUSERS", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [6492]")
					//log.Panicf("[S0005]")
					if err != nil {
						 panic(err)
						//return
					}
 
					UID := uid
					REGION := ""
					CITY := ""
					MUNICIPALITY := ""
					BARANGAY := ""
					SUBDIVISION := ""
					BIRTH_DAY := ""
					ELEM_SCHOOL := ""
					HIGH_SCHOOL := ""
					COLLEGE := ""
					POST_GRAD := ""
					PROFESSION := ""
					COMPANY := ""
					CONTACT_NUM := ""
					//SOCIAL_1 := ""
					//SOCIAL_2 := ""
					SOCIAL_3 := ""
					REG_VOTER := ""
					ID_NUMBER := ""
					I_HAVE_TEXT := ""
					I_NEED_TEXT := ""
					BADGE	:= ""
 
					FILLER_1 := ""
					FILLER_2 := ""	
					FILLER_3 := ""
					RINGTONE := ""
						
					f := TDSPROF {
						SYS_VER: 1,	
						UID: UID,
						PICTURE: avatar,
						BIRTH_DAY: BIRTH_DAY,	
						ELEM_SCHOOL: ELEM_SCHOOL,
						HIGH_SCHOOL: HIGH_SCHOOL,
						COLLEGE: COLLEGE,
						POST_GRAD: POST_GRAD,
						PROFESSION: PROFESSION,
						COMPANY: COMPANY,
						CONTACT_NUM: CONTACT_NUM,
						//SOCIAL_1: SOCIAL_1,	
						//SOCIAL_2: SOCIAL_2,	
						SOCIAL_1: uid,	
						SOCIAL_2: email,	
						SOCIAL_3: SOCIAL_3,
						COUNTRY: country,
						REGION: REGION,
						CITY: CITY,
						MUNICIPALITY: MUNICIPALITY,	
						BARANGAY: BARANGAY,
						SUBDIVISION: SUBDIVISION,
						REG_VOTER: REG_VOTER,
						ID_NUMBER: ID_NUMBER,
						I_HAVE_TEXT: I_HAVE_TEXT,
						I_NEED_TEXT: I_NEED_TEXT,
						BADGE: BADGE,
						CRED_PTS: 20 ,
						POS_VOTES: 0,
						NEG_VOTES: 0,
						LIFE_RATING: 100,
						FILLER_1: FILLER_1,
						FILLER_2: FILLER_2,
						FILLER_3: FILLER_3,
						RINGTONE: RINGTONE,
					}
 
					dsKey := fmt.Sprintf("%s", UID)
					key2 := datastore.NameKey("TDSPROF", dsKey, nil)
					if _, err := datastoreClient.Put(c, key2, &f); err != nil {
						 panic(err)
						//return
                    }
                    //log.Printf("datastoreClient.Put()  [6571]")
					//log.Panicf("[S0006]")
				
				//insert intial desktop0_css config records
				//-------------------
					q := datastore.NewQuery("TDSCNFG").Filter("CFG_ID= ", "desktop0_css").Limit(1)
					//log.Panicf("[S0007]")
                    config := make([]TDSCNFG, 0, 1)
                    //log.Printf("datastoreClient.Get()  [6579]")
					if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
						 panic(err)
						//return
					}
					
					for _, p := range config{
					
						p.USER = uid
						p.TXT_VAL = "/static/css/style.css"
						
						thisKey := fmt.Sprintf("%s-desktop0_css", uid)
						//fmt.Fprintf(w, "DEBUG3>>> .<br>")
						key := datastore.NameKey("TDSCNFG", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [6594]")
						//log.Panicf("[S0008]")
						if err != nil {
							 panic(err)
							//return
						}
						break
					}
 
				//insert intial desktop0_icons config records
				//----------------------
					q = datastore.NewQuery("TDSCNFG").Filter("CFG_ID= ", "desktop0_icons").Limit(1)
					//log.Panicf("[S0009]")
                    config = make([]TDSCNFG, 0, 1)
                    //log.Printf("datastoreClient.Get()  [6608]")
					if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
						 panic(err)
						//return
					}
					
					for _, p := range config{
					
						p.USER = uid
						p.TXT_VAL = DEFAULT_DESKTOP_ICONS
						p.NUM_VAL = 0
						p.CFG_DESC = "Please edit this description"
						thisKey := fmt.Sprintf("%s-desktop0_icons", uid)
						//fmt.Fprintf(w, "DEBUG4>>> .<br>")
						key := datastore.NameKey("TDSCNFG", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [6624]")
						//log.Panicf("[S0010]")
						if err != nil {
							 panic(err)
							//return
						}
						break
					}
					
				putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE","")
				
				putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE-TILES","")
				
				putStrToMemcacheWithoutExp(w,r,"LAST_LOGIN_TIMESTAMP","")
				
				//update TDSSTATS
				//log task to update MOST_RECENT* stats
                time.AfterFunc(5*time.Second, func() {
                    laterQueueStatsRecent(c, "/ulapph-router?RTR_FUNC=queue-stats-update-most-recent", map[string]string{"uid": uid})
                })
					
				if SYS_AUTO_REG_ENABLE == true {
					//send message to admin
					geoStr := getGeoString(w,r)
                    contentMsg := fmt.Sprintf("[ULAPPH] Registered new user. USER: %v >>> %v from %v", uid, getSchemeUrl(w,r), geoStr)
                    time.AfterFunc(5*time.Second, func() {
                        laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, contentMsg, uid)
                    })
					//notify all users of this event via channels
					msgDtl3 := fmt.Sprintf("UID:%v has registered as new ULAPPH user from %v %v", uid, geoStr, getAccessString(w,r,""))
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/registration",""),"")
					
					data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "NEW-USER", msgDtl3)
					ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
					
					//send email to admin
					MESSAGE := msgDtl3
					subject := contentMsg
                    time.AfterFunc(5*time.Second, func() {
                        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
                    })
					
				} else {
					//send message to admin
					approverLink := fmt.Sprintf("https://www.ulapph.com/admin-setup?ADMIN_FUNC=TDSUSERS-APPROVE&USER=%v", uid)
                    contentMsg := fmt.Sprintf("[ULAPPH] Registered new user pending approval by admin. USER: %v >>> APPROVER LINK: %v", uid, approverLink)
                    time.AfterFunc(5*time.Second, func() {
                        laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, contentMsg, uid)
                    })
					//notify all users of this event via channels
					
					msgDtl3 := fmt.Sprintf("UID:%v has registered as new ULAPPH user pending approval by admin %v", uid, getAccessString(w,r,""))
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/registration",""),"")
					
					data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "NEW-USER", msgDtl3)
					ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
 
					//send email to admin
					MESSAGE := msgDtl3
					subject := contentMsg
                    time.AfterFunc(5*time.Second, func() {
                        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
                    })
					
				}
				
				//if SYS_AUTO_REG_ENABLE == true {
				//send welcome message to user
				contentMsg := fmt.Sprintf("[ULAPPH] Hi %v! Welcome to %v! This is a sample ULAPPH message. You can send/receive messages via messaging feature.", uid, getSchemeUrl(w,r))
                //laterNotifyGB(c, "autoNotifyPeopleGB", uid, contentMsg, ADMMAIL)
                time.AfterFunc(5*time.Second, func() {	
                    laterNotifyGB(c, "autoNotifyPeopleGB", email, contentMsg, ADMMAIL)
                })
				//channel.Send(c,uid,contentMsg)
				//sendEvent(w,r, uid, contentMsg)
				//when new user
				//sendChannelMessage(w,r,uid, contentMsg)
				
				//send email to user
				if SYS_AUTO_REG_ENABLE == false {
					MESSAGE := fmt.Sprintf("[ULAPPH] Hi %v! Welcome to %v! Your registration is pending approval by the admin.", uid, getSchemeUrl(w,r))
					subject := "Registration pending approval"
                    time.AfterFunc(5*time.Second, func() {
                        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": email, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
                    })
				} else {
					//send email to user
					MESSAGE := fmt.Sprintf("[ULAPPH] Hi %v! Welcome to %v! Your registration has been approved by default. Kindly see Youtube channel https://www.youtube.com/channel/UCfmBlIM8pbOs3Vaq1lTZ22Q for tutorials on how to use ULAPPH Cloud Desktop.", uid, getSchemeUrl(w,r))
					subject := "[ULAPPH] Welcome to ULAPPH Cloud Desktop!"
                    time.AfterFunc(5*time.Second, func() {
                        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": email, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
                    })
				}
						
				//set memflag for new user
				IS_NEW_USER_MEM_FLAG := fmt.Sprintf("IS_NEW_USER_MEM_FLAG_%s", uid)
				putStrToMemcacheWithoutExp(w,r,IS_NEW_USER_MEM_FLAG,"Y")
				redURL := "/?q=home"
				http.Redirect(w, r, redURL, http.StatusFound)
				return
				
			default:
				msgDtl := fmt.Sprintf("[U00003] ERROR: Invalid registration process!")
				msgTyp := "error"
				msgURL := "/registration"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to registration page.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
		
			}
		} else {
			http.Redirect(w, r, "/?q=home", http.StatusFound)	
			//http.Redirect(w, r, "/login", http.StatusFound)
			return
			
		}
	} else {
		msgDtl := fmt.Sprintf("[U00005] ERROR: user (%s) is already a registered ULAPPH user!", uid)
		msgTyp := "warning"
		msgURL := "/?q=home&ERROR=existinguser"
		action := fmt.Sprintf("Not sure how this happened! <a href=\"%v\">Click here</a> to go to ULAPPH Carousel homepage.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)	
		return
	}
}
func sysmsg(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	msgType := r.FormValue("msgTyp")
	SID := r.FormValue("SID")
	message := r.FormValue("message")
	action := r.FormValue("action")
	msgURL := r.FormValue("msgURL")
	switch {
		case action == "U00000":
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := sysmsgErrorTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
			fmt.Fprintf(w, "<div class=\"info\"><a href=\"/?q=home\">Click here</a> to login or register to %v.</div>", getSchemeUrl(w,r))
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return
			//promptLogin(w,r,uid,"GOOGLE")
 
		case action == "U00091":
 
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := sysmsgErrorTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
			//fmt.Fprintf(w, "<div class=\"info\"><a href=\"/?q=home\">Click here</a> to login or register to %v.</div>", getSchemeUrl(w,r))
			
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return
			//promptLogin(w,r,uid,"GOOGLE")
			
		case action == "U00151" || action == "U00149":
			//log.Panicf("[S0011]")
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := sysmsgErrorTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
			fmt.Fprintf(w, "<div class=\"success2\">")
			fmt.Fprintf(w, "<form action=\"/social\" method=\"GET\">")
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"SO_FUNC\" value=\"CHK_SHR\"/>")
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"URL\" value=\"%v\"/>", msgURL)
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"SID\" value=\"%v\"/>", SID)
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"auth\" value=\"p\"/>")
			fmt.Fprintf(w, "	If you have a passcode, please enter here: <input type=\"text\" name=\"passcode\" maxlength=\"300\" placeholder=\"Enter Passcode\" />")
			fmt.Fprintf(w, "	<input type=\"submit\" name=\"submit\" value=\"Access\"/>")
			fmt.Fprintf(w, "</form>")
			fmt.Fprintf(w, "</div>")
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return

		case action == "U00189":
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := sysmsgErrorTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
			TARGET_UWM := r.FormValue("u")
			user := r.FormValue("uid")
			fmt.Fprintf(w, "<div class=\"success2\">")
			fmt.Fprintf(w, "<form action=\"/uwm\" method=\"GET\">")
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"u\" value=\"%v\"/>", TARGET_UWM)
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"uid\" value=\"%v\"/>", user)
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"auth\" value=\"p\"/>")
			fmt.Fprintf(w, "	If you have a passcode, please enter here: <input type=\"text\" name=\"passcode\" maxlength=\"300\" placeholder=\"Enter Passcode\" />")
			fmt.Fprintf(w, "	<input type=\"submit\" name=\"submit\" value=\"Access\"/>")
			fmt.Fprintf(w, "</form>")
			fmt.Fprintf(w, "</div>")
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return
			
		case action == "U00098":
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := sysmsgErrorTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return		
			
	}
 
	_, uid := checkSession(w,r)
 
	
	switch msgType {
		case "info":
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := sysmsgInfoTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
 
		case "success":
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := sysmsgSuccessTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
		
		case "warning":
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := sysmsgWarningTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
 
		case "error":
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			} 		
			if err := sysmsgWarningTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
		case "off-line":
			rLoad := "60;url=/"
			if err := htmlHeaderModalRefresh.Execute(w, rLoad); err != nil {
			  panic(err)
			} 		
			if err := sysmsgOfflineTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
 
		case "reload60":
			linkedUrl := "/uwm"
			rLoad := fmt.Sprintf("60;%v?msgType=reload60", linkedUrl)
			if err := htmlHeaderModalRefresh.Execute(w, rLoad); err != nil {
			  panic(err)
			}
			if err := sysmsgReloadTemplate.Execute(w, message); err != nil {
			  panic(err)
			}
		
		case "reload10-UR":
			rLoad := "10;url=/?q=home&msgType=reload10-UR"
			if err := htmlHeaderModalRefresh.Execute(w, rLoad); err != nil {
			 panic(err)
			}
			if err := sysmsgReloadTemplate.Execute(w, message); err != nil {
			 panic(err)
			}
			
 
		case "reload20":
			rLoad := "20;url=/?q=home&msgType=reload20"
			if err := htmlHeaderModalRefresh.Execute(w, rLoad); err != nil {
			  panic(err)
			}
			if err := sysmsgReloadTemplate.Execute(w, message); err != nil {
			  panic(err)
			}   			
			
	}
	
	actionMsg := ""
	switch action {
		case "U99999":
			actionMsg := fmt.Sprintf("Contact the administrator if you need to have access from this country.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)
		case "U88888":
			actionMsg := fmt.Sprintf("Contact the administrator if you need to have this IP unblocked.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)	
		case "U00103":
			msgURL := fmt.Sprintf("/people-edit?EditPeopleFunc=EditPeople&UID=%v", uid)
			actionMsg = fmt.Sprintf("Good job for uploading your new profile picture! <a href=\"%v\">Click here</a> to go to your People profile.", msgURL)
			fmt.Fprintf(w, "<div class=\"info\">%v</div>", actionMsg)
		case "U00101":
			actionMsg = fmt.Sprintf("You may <a href=\"/?q=qu\">upload a new icon</a>.")
			fmt.Fprintf(w, "<div class=\"info\">%v</div>", actionMsg)	
		case "U00056", "U00065", "U00113", "U00117", "U00120", "U00121", "U00162":
		//CLOSE WINDOW/TAB
			actionMsg = fmt.Sprintf("You may now close this window or tab.")
			fmt.Fprintf(w, "<div class=\"info\">%v</div>", actionMsg)
		case "U00001":
		//RELOAD60 WAITING
			actionMsg = fmt.Sprintf("Your patience is greatly appreciated. Usually after a couple of seconds, you may go to <a href=\"/uwm\">ULAPPH Window Manager</a> without waiting for the reload.")
			fmt.Fprintf(w, "<div class=\"info\">%v</div>", actionMsg)
		case "U00098":
		//DIRECT URL ACCESS ERROR
			//msgURL := "/?q=home"
			actionMsg := fmt.Sprintf("Really sorry for this issue! Please refrain from directly accessing URLs in the browser address bar.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)
		case "U00048", "U00042", "U00145", "U00089", "U00091":
		//GO TO ULAPPH HOME (/?q=home)
			actionMsg := fmt.Sprintf("<a href=\"/website?q=home\">Click here</a> to go to ULAPPH Home. Or <a href=\"/logout\">click here</a> to Logout.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)	
		case "U00114", "U00115", "U00116":
			actionMsg := fmt.Sprintf("<a href=\"/contact-us#services\">Click here</a> to contact us.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)	
			
		case "U00124", "U00146", "U00147", "U00148", "U00188":
			actionMsg := fmt.Sprintf("<a href=\"/contact-us#feedback\">Click here</a> to contact the administrator.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)
		case "U00151", "U00149":
			//log.Panicf("[S0012]")
			fmt.Fprintf(w, "<div class=\"success2\">")
			fmt.Fprintf(w, "<form action=\"/social\" method=\"GET\">")
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"SO_FUNC\" value=\"CHK_SHR\"/>")
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"URL\" value=\"%v\"/>", msgURL)
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"SID\" value=\"%v\"/>", SID)
			fmt.Fprintf(w, "	<input type=\"hidden\" name=\"auth\" value=\"p\"/>")
			fmt.Fprintf(w, "	If you have a passcode, please enter here: <input type=\"text\" name=\"passcode\" maxlength=\"300\" placeholder=\"Enter Passcode\" />")
			fmt.Fprintf(w, "	<input type=\"submit\" name=\"submit\" value=\"Access\"/>")
			fmt.Fprintf(w, "</form>")
			fmt.Fprintf(w, "</div>")
		case "U00118", "U00119", "U00154":
			actionMsg := fmt.Sprintf("Contact the person to login to ULAPPH and make sure CHANNEL is CONNECTED.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)	
		case "U00125", "U00126", "U00127", "U00128", "U00129", "U00130", "U00131", "U00132", "U00133", "U00134", "U00135", "U00136", "U00137", "U00138", "U00139", "U00140", "U00141", "U00142", "U00143", "U00144":
			actionMsg := fmt.Sprintf("<a href=\"/admin-ads\">Click here</a> to check if the advertisement has been applied properly.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)
		case "U00157":
			//newconfigtemplate
			actionMsg := fmt.Sprintf("<a href=\"https://goo.gl/kJMajz\" target=install>View the ULAPPH Cloud Desktop Help Guides</a> in order to setup this cloud website.")
			fmt.Fprintf(w, "<div class=\"error\">%v</div>", actionMsg)
		
	
	}
	fmt.Fprintf(w, "<div class=\"validation\">Contact Administrator: <b>%v</b></div>", ADMMAIL)
	fmt.Fprintf(w, "<div class=\"validation\">Site: <b>%v</b></div>", domRefMatchS)
	//fmt.Fprintf(w, "<div class=\"validation\">Social Media: ")
	fmt.Fprintf(w, "</div>")
	
	if err := htmlFooterModal.Execute(w, ""); err != nil {
	  panic(err)
	}
	return
}
//D0068 
//Added GoJS Org chart
func orgchart(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	t := presentTemplates[path.Ext(".orgchart")]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT)
	data := struct {
		*TEMPSTRUCT
		Template    *template.Template
	}{
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00202] Template error: %v", err))
		msgTyp := "error"
		action := "U00202"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}

}

func advertisement(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	//var buffer3 bytes.Buffer
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //D0086
    datastoreClient := createClientDS()
	//prevent access from other than ulapph pages
	checkReferrer(w,r)
 
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	
	AD_FUNC := r.FormValue("AD_FUNC")
	
	switch AD_FUNC {
	
	case "":
		inquireEmail := r.FormValue("inquireEmail")
		contactNum := r.FormValue("contactNum")
		desktop := r.FormValue("desktop")
		message := r.FormValue("message")
		
		if inquireEmail != "" || contactNum != "" {
			
			backURL := fmt.Sprintf("/%s#page", desktop)
			if desktop == "root" {
				backURL = "/"
			}
 
			r.ParseForm()
            time.AfterFunc(5*time.Second, func() {
                laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-advertise-send-email", map[string]string{"uid": uid, "desktop": desktop, "inquireEmail": inquireEmail, "contactNum": contactNum, "message": message})
            })
			//SENDINVITE(c, desktop, uid, inviteEmail)
            msgDtl2 := fmt.Sprintf("[U00007] Email inquiry has been sent by a possible advertiser (%v). Please check recipient email (%v).", uid, ADSMAIL)
            time.AfterFunc(5*time.Second, func() {
                laterNotifyGB(c, "autoNotifyPeopleGB", ADSMAIL, msgDtl2, uid)
            })
			//sendEvent(w,r, ADSMAIL, msgDtl2)
			//when advertisement inquiry
			//sendChannelMessage(w,r,ADSMAIL, msgDtl2)
			
			msgDtl := "[U00007] SUCCESS: Email inquiry has been sent to ULAPPH! We'll get back to you soon."
			msgTyp := "success"
			msgURL := backURL
			action := fmt.Sprintf("We're happy to process your inquiry soon! You may now close this tab.")
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return			
	   } else {
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			fmt.Fprintf(w, "<a class=\"button-cta pure-button\" href=\"/advertisement#advertise\" target=\"ads\">Advertise with Us!</a>")
			if err := advertiseWithUsTemplate.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := htmlFooterModalClick.Execute(w, ""); err != nil {
			  panic(err)
			}
	   }
	case "GETIMG":
	
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
			
			if GROUP_ID != "GRP_ADMIN" {
				msgDtl := "[U00124] ERROR: Operation not allowed for your account type."
				msgTyp := "error"
				msgURL := "/?q=home&ERROR=AdminOnly"
				action := "U00124"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		
		}
	
		LIST := r.FormValue("LIST")
		//get images of each ad
 
		var buffer3 bytes.Buffer
		
		indAds := strings.Split(LIST,",")
		for i := 0; i < len(indAds); i++ {
			thisAdNum := str2int(indAds[i])
			if thisAdNum > 0 {
				ADS_ID_CACHE_KEY := fmt.Sprintf("ADS_ID_CACHE_%v", thisAdNum)
				ADS_ID_CACHE := ""
				ADS_ID_CACHE = getStrMemcacheValueByKey(w,r,ADS_ID_CACHE_KEY)
				
				if ADS_ID_CACHE == "" {
					dsKey := fmt.Sprintf("%s.%d", CLOUD_NAME, thisAdNum)
					key := datastore.NameKey("TDSADS", dsKey, nil)
					q := datastore.NewQuery("TDSADS").Filter("__key__ =", key)
					//log.Panicf("[S0013]")
					//q := datastore.NewQuery("TDSADS").Filter("ADS_ID =", thisAdNum).Limit(1)
                    ads := make([]TDSADS, 0, 1)
                    //log.Printf("datastoreClient.Get()  [7138]")
					if _, err := datastoreClient.GetAll(c,q, &ads); err != nil {
						 panic(err)
						//return
					}
					for _, p := range ads{
						buffer3.WriteString(fmt.Sprintf("<image src=\"%v\" width=150 height=150>", p.ADS_IMG))
					}
				} else {
					SPL := strings.Split(ADS_ID_CACHE,",")
					cADS_IMG := SPL[2]	
					//cADS_URL := SPL[8]
					buffer3.WriteString(fmt.Sprintf("<image src=\"%v\" width=150 height=150>", cADS_IMG))
				}
			}
		}
		writeHTMLHeader(w, 200)
		w.Write([]byte(buffer3.String()))
		return
		
	case "GETIMG2":
	
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
			
			if GROUP_ID != "GRP_ADMIN" {
				msgDtl := "[U00124] ERROR: Operation not allowed for your account type."
				msgTyp := "error"
				msgURL := "/?q=home&ERROR=adminOnly"
				//action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
				action := "U00124"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		
		}
	
		LIST := r.FormValue("LIST")
		//get images of each ad
 
		var buffer3 bytes.Buffer
		
		indAds := strings.Split(LIST,",")
		for i := 0; i < len(indAds); i++ {
			thisAdNum := str2int(indAds[i])
			if thisAdNum > 0 {
				ADS_ID_CACHE := ""
				ADS_ID_CACHE_KEY := fmt.Sprintf("ADS_ID_CACHE_%v", thisAdNum)
				ADS_ID_CACHE = getStrMemcacheValueByKey(w,r,ADS_ID_CACHE_KEY)
				if ADS_ID_CACHE == "" {
					dsKey := fmt.Sprintf("%s.%d", CLOUD_NAME, thisAdNum)
					key := datastore.NameKey("TDSADS", dsKey, nil)
					q := datastore.NewQuery("TDSADS").Filter("__key__ =", key)
					//log.Panicf("[S0014]")
					//q := datastore.NewQuery("TDSADS").Filter("ADS_ID =", thisAdNum).Limit(1)
                    ads := make([]TDSADS, 0, 1)
                    //log.Printf("datastoreClient.Get()  [7198]")
					if _, err := datastoreClient.GetAll(c,q, &ads); err != nil {
						 panic(err)
						//return
					}
					for _, p := range ads{
						buffer3.WriteString(fmt.Sprintf("<image src=\"%v\" width=40 height=40>", p.ADS_IMG))
					}
				} else {
					SPL := strings.Split(ADS_ID_CACHE,",")
					cADS_IMG := SPL[2]	
					//cADS_URL := SPL[8]
					buffer3.WriteString(fmt.Sprintf("<image src=\"%v\" width=40 height=40>", cADS_IMG))
				}
 
			}
		}
		writeHTMLHeader(w, 200)
		w.Write([]byte(buffer3.String()))
		return
	}
}
 
 
func contactUs(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	//var buffer3 bytes.Buffer
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	
	//prevent access from other than ulapph pages
	checkReferrer(w,r)
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	
	messageTyp := r.FormValue("message-type")
	inquireEmail := r.FormValue("inquireEmail")
	feedbackMsg := r.FormValue("message")
	contactNum := r.FormValue("contactNum")
	desktop := r.FormValue("desktop")
	
	if desktop == "" {
		desktop = "root"
	}
	
	switch {
	
		case messageTyp == "feedback" || messageTyp == "fb-cancel" || messageTyp == "fb-success":
	
			if inquireEmail != "" && feedbackMsg != ""  {
						
				//backURL := fmt.Sprintf("/%s#page", desktop)
				backURL := ""
				if desktop == "root" || desktop == "/" {
					backURL = "/"
				} else {
					backURL = desktop
				}
				//fmt.Fprintf(w, "backURL %v<br>", backURL)
				
				r.ParseForm()
				
				//log task to send email invites
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-contact-us-send-feedback", map[string]string{"fbType": messageTyp, "uid": uid, "desktop": desktop, "inquireEmail": inquireEmail, "contactNum": contactNum, "message": feedbackMsg})
                })
				
				msgDtl := "[U00008] SUCCESS: Email feedback has been sent to ULAPPH! We'll get back to you soon."
				msgTyp := "success"
				msgURL := backURL
				action := "Really appreciate your feedback! You may now close this tab."
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
			}
 
		case messageTyp == "services":
	
			if inquireEmail != "" && feedbackMsg != ""  {
						
				//backURL := fmt.Sprintf("/%s#page", desktop)
				backURL := ""
				if desktop == "root" || desktop == "/" {
					backURL = "/"
				} else {
					backURL = desktop
				}
				//fmt.Fprintf(w, "backURL %v<br>", backURL)
				
				r.ParseForm()
				
				//log task to send email invites
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-contact-us-send-feedback", map[string]string{"fbType": messageTyp, "uid": uid, "desktop": desktop, "inquireEmail": inquireEmail, "contactNum": contactNum, "message": feedbackMsg})
                })
				
				msgDtl := "[U00009] SUCCESS: Email inquiry has been sent to ULAPPH! We'll get back to you soon."
				msgTyp := "success"
				msgURL := backURL
				action := fmt.Sprintf("We're looking forward to attend to your inquiry! You may now close this tab.")
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
			}
		default:
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			fmt.Fprintf(w, "<a class=\"button-cta pure-button\" href=\"/contact-us#feedback\" target=\"contact\">Send Us Feedback!</a>")
			if err := contactUsTemplate.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := contactUsTemplateServices.Execute(w, ""); err != nil {
			  panic(err)
			}  			
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
   }
}
func login(w http.ResponseWriter, r *http.Request) {
	//D0098
	if SYS_STATELESS_SERVER == true {
		UID := r.FormValue("UID")
		PWD := r.FormValue("PWD")
		if UID == ADMIN_ACCOUNT && PWD == ADMIN_PASSWORD {
			//save session
			cKey := fmt.Sprintf("ACTIVE_SESSION_STATELESS_%v", UID)
			putStrToMemcacheWithoutExp(w,r,cKey,"Y")
			w.WriteHeader(200)
			w.Write([]byte("ok"))
			return
		} else {
			w.WriteHeader(200)
			w.Write([]byte("error"))
			return
		}
	}
	//c := appengine.NewContext(r)
	//u := user.Current(c)
    if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//when /login
	//updateUserActiveData(w, r, c, "", "/login")
	f := r.FormValue("f")
	if f == "presence" && r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		if err := htmlHeaderModalRefreshNoHome.Execute(w, ""); err != nil {
		 panic(err)
		}
		uid := r.Header.Get("X-Goog-Authenticated-User-Email")
		//if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
			displayMOTD(w,r,uid,"")
		//}
		//if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
			displayBasicCharts(w,r,uid,false)
			displayCurrAccLog(w,r)
		//}
		if err := htmlFooterModal.Execute(w, ""); err != nil {
		  panic(err)
		}
		return
	}
	lref := r.FormValue("continue")
	//check if logged in already
	if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		if lref != "" {
			//create token
			_, token := createToken(w,r,r.Header.Get("X-Goog-Authenticated-User-Email"),"PC")
			//firebase
			jwtChan := make(chan string)
			jwtChanDone := make(chan bool)
			go procAuthFirebase(w,r,jwtChan,jwtChanDone,r.Header.Get("X-Goog-Authenticated-User-Email"),token)
			jwToken := <-jwtChan
			<-jwtChanDone
			//append username & loc
			locStr := getGeoString(w,r)
			i := strings.Index(lref, "?")
			if i == -1 {
				lref = fmt.Sprintf("%v?UID=%v&g=%v&tok=%v", lref, r.Header.Get("X-Goog-Authenticated-User-Email"), locStr, jwToken)
			} else {
				lref = fmt.Sprintf("%v&UID=%v&g=%v&tok=%v", lref, r.Header.Get("X-Goog-Authenticated-User-Email"), locStr, jwToken)
			}
			http.Redirect(w, r, lref, http.StatusFound)
			return
		} else {
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", r.Header.Get("X-Goog-Authenticated-User-Email"), FUNC_CODE)
			if FL_VALID_USER == true {
				http.Redirect(w, r, "/?q=login&LFUNC=ULAPPH", http.StatusFound)
				return
			} else {
				h := r.Header
				xCountry := h.Get("X-AppEngine-Country")
				promptRegister(w,r,r.Header.Get("X-Goog-Authenticated-User-Email"),xCountry,"","https://lh3.googleusercontent.com/W2q6sVO6ADtrwfPYuJVBeT5Vi2G0Z9-V9cV6qm_H-9sSsZ7eii17f2akVHIsTuiWbNxX_EwXmb7OKonHWUI1RBh5R4DujN6Z","")
				return
			}

		}
	}
	//loginGoogle(w,r,r.URL.String())
	return
}
func displayBasicCharts(w http.ResponseWriter, r *http.Request, uid string, isWidget bool) {
//func displayBasicCharts(w io.Writer, r *http.Request, isWidget bool) {
	if isWidget == true {
		if err := htmlHeaderModalRefreshNoHome.Execute(w, 3600); err != nil {
		 panic(err)
		}
	}
	target := fmt.Sprintf("OVERALL_HITS_IND_%v", SYS_SERVER_NAME)
	data := getBytMemcacheValueByKey(w,r,target)
	divs := ""
	if data != nil {				
		divs = "<div id=\"chart0\" style=\"width: 800px;height:500px;\"></div><div id=\"chart1\" style=\"width: 800px;height:500px;\"></div><div id=\"chart2\" style=\"width: 800px;height:500px;\"></div><div id=\"chart3\" style=\"width: 800px;height:500px;\"></div><div id=\"chart4\" style=\"width: 800px;height:500px;\"></div><div id=\"chart5\" style=\"width: 800px;height:500px;\"></div>"
	} else {
		divs = "<div id=\"chart0\" style=\"width: 800px;height:500px;\"></div><div id=\"chart1\" style=\"width: 800px;height:500px;\"></div><div id=\"chart2\" style=\"width: 800px;height:500px;\"></div><div id=\"chart3\" style=\"width: 800px;height:500px;\"></div><div id=\"chart4\" style=\"width: 800px;height:500px;\"></div>"
	}
	
	fmt.Fprintf(w, "%v", divs)		
 
	displayEcharts(w,r,uid, "STATS.COUNTRY", "Countries", "chart0")
	displayEcharts(w,r,uid, "STATS.OS", "Operating Systems", "chart1")
	displayEcharts(w,r,uid, "STATS.BROWSER", "Browsers", "chart2")
	displayEcharts(w,r,uid, "STATS.DESKTOP", "Desktops", "chart3")
	displayEcharts(w,r,uid, "STATS.CONTENT", "Contents", "chart4")
	if data != nil {
		displayEchartsBar(w,r, uid, target, SYS_SERVER_NAME, "chart5")
	}
	
	if isWidget == true {
		if err := htmlFooterModal.Execute(w, ""); err != nil {
		  panic(err)
		}
	}
}
 
func displayOauthIcons(w http.ResponseWriter, r *http.Request, TARGET_URL, lref string) {
	
	switch {
		
		case SYS_SITE_PRIVATE == true && SYS_REGISTRATION_MANUAL == true:
			fmt.Fprintf(w, "<div class=\"info2\">ULAPPH Cloud Desktop [<a href=\"/login\">%v</a>]<br>Description: %v</i><br>Version: %v<br>URL: %v<br>Access: Site is private & only admin can add new users.<br>Contact: %v</div>", SYS_SERVER_NAME, INFO_ABOUT_US, UCD_BUILD_STR, getSchemeUrl(w,r), FDBKMAIL)
		case SYS_SITE_PRIVATE == false && SYS_REGISTRATION_MANUAL == true:
			fmt.Fprintf(w, "<div class=\"info2\">ULAPPH Cloud Desktop [<a href=\"/login\">%v</a>]<br>Description: %v<br>Version: %v<br>URL: %v<br>Access: Site is public but only admin can add new users.<br>Contact: %v</div>", SYS_SERVER_NAME, INFO_ABOUT_US, UCD_BUILD_STR, getSchemeUrl(w,r), FDBKMAIL)
		case SYS_SITE_PRIVATE == false && SYS_REGISTRATION_MANUAL == false && SYS_AUTO_REG_ENABLE == false:
			fmt.Fprintf(w, "<div class=\"info2\">ULAPPH Cloud Desktop [<a href=\"/login\">%v</a>]<br>Description: %v<br>Version: %v<br>URL: %v<br>Access: Site is public and users can <a href=\"/?q=login&LFUNC=GOOGLE\">register</a> pending admin approval.<br>Contact: %v</div>", SYS_SERVER_NAME, INFO_ABOUT_US, UCD_BUILD_STR, getSchemeUrl(w,r), FDBKMAIL)	
		case SYS_SITE_PRIVATE == false && SYS_REGISTRATION_MANUAL == false && SYS_AUTO_REG_ENABLE == true:
			fmt.Fprintf(w, "<div class=\"info2\">ULAPPH Cloud Desktop [<a href=\"/login\">%v</a>]<br>Description: %v<br>Version: %v<br>URL: %v<br>Access: Site is public and users can <a href=\"/?q=login&LFUNC=GOOGLE\">register</a> immediately.<br>Contact: %v</div>", SYS_SERVER_NAME, INFO_ABOUT_US, UCD_BUILD_STR, getSchemeUrl(w,r), FDBKMAIL)
		default:
			fmt.Fprintf(w, "<div class=\"info2\">ULAPPH Cloud Desktop [<a href=\"/login\">%v</a>]<br>Description: %v<br>Version: %v<br>URL: %v<br>Contact: %v</div>", SYS_SERVER_NAME, INFO_ABOUT_US, UCD_BUILD_STR, getSchemeUrl(w,r), FDBKMAIL)
		
	}
 
	fmt.Fprintf(w, "<div class=\"success2\">")
	fmt.Fprintf(w, "<a href=\"/?q=login&LFUNC=GOOGLE&TARGET_URL=%v\" class=\"button button-3d button-royal\" title=\"User Google username/password. For registered users only.\">Login using Google Account</a>", TARGET_URL)
	if SYS_REGISTRATION_MANUAL == true {
		fmt.Fprintf(w, "<a href=\"http://opo.ulapph.com/?q=login&LFUNC=GOOGLE\" class=\"button button-3d button-caution\" title=\"Register for free at Opo demo server\">Sign-up</a>")		
	} else {
		fmt.Fprintf(w, "<a href=\"/?q=login&LFUNC=GOOGLE\" class=\"button button-3d button-caution\" title=\"Register for free in this server\">Sign-up</a>")			
	}
	if SYS_GUEST_LOGIN == true {
		fmt.Fprintf(w, "<a href=\"/?q=login&LFUNC=guest&TARGET_URL=%v\" class=\"button button-3d button-caution\" title=\"Access cloud desktop as guest or visitor. You don't need to register.\">Login as Guest</a>", TARGET_URL)
	}
 
	fmt.Fprintf(w, "</div>")
	fmt.Fprintf(w, "<div class=\"warning2\">")
	fmt.Fprintf(w, "<a href=\"/website?q=home\" title=\"View the website for this ULAPPH Cloud Desktop.\"><img src=\"/static/img/www.png\" height=40 width=40></a>")
	//fmt.Fprintf(w, "<a href=\"/tools?FUNC=WIDGET&t=MiniBrowserGet\" title=\"Search your desktop and just go there now.\"><img src=\"/static/img/goto2.png\" height=40 width=40></a>")
	fmt.Fprintf(w, "<a href=\"/directory?DIR_FUNC=sites\" title=\"Explore list of public/private ULAPPH Cloud Desktops.\"><img src=\"/static/img/directory.png\" height=40 width=40></a>")
	fmt.Fprintf(w, "<a href=\"/directory?DIR_FUNC=people\" title=\"Explore list of users of ULAPPH Cloud Desktops.\"><img src=\"/static/img/ulapph-icons-people-icon.png\" height=40 width=40></a>")
	fmt.Fprintf(w, "<a href=\"/directory?DIR_FUNC=sessions\" title=\"Who are online now?\"><img src=\"/static/img/online-icon.png\" height=40 width=40></a>")
	fmt.Fprintf(w, "<a href=\"/search\" title=\"Search on one site or all public/private ULAPPH Cloud Desktops.\"><img src=\"/static/img/search-icons.png\" height=40 width=40></a>")		
	fmt.Fprintf(w, "<a href=\"/social?SO_FUNC=show-trending\" title=\"View all trending contents from public/private ULAPPH Cloud Desktops.\"><img src=\"/static/img/trending.png\" height=40 width=40></a>")
	fmt.Fprintf(w, "<a href=\"/social?SO_FUNC=show-whats-new\" title=\"View all new contents from public/private ULAPPH Cloud Desktops.\"><img src=\"/static/img/whatsnew.png\" height=40 width=40></a>")
	fmt.Fprintf(w, "<a href=\"%v\" title=\"Chat with our customer service.\"><img src=\"/static/img/chat.png\" height=40 width=40></a>", SYS_GUEST_CHAT_URL)
	
	fmt.Fprintf(w, "<a href=\"https://github.com/edwindvinas/ULAPPH-Cloud-Desktop\" title=\"View ULAPPH Cloud Desktop documentations.\"><img src=\"/static/img/help.png\" height=40 width=40></a>")
	fmt.Fprintf(w, "</div>")
	
	return
}
//D0117
//Allow /u/{id} to point to specific ULAPPH URLs
func handleFuncUser(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	log.Printf("handleFuncUser()")
	vars := mux.Vars(r)

	thisUserID := vars["id"]
	//fmt.Fprintf(w, "thisUserID: %v", thisUserID)

	if uDirects[thisUserID] != "" {
		redURL := fmt.Sprintf(uDirects[thisUserID])
		http.Redirect(w, r, redURL, http.StatusFound)
		return	
	} else {
		fmt.Fprintf(w, "ID does not exist!")
	}
	return
}
//D0116
//Executes content as template
func ulapphGoServe(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	log.Printf("ulapphGoServe()")
	id := r.FormValue("id")
	ulapphDebug(w,r, "info", fmt.Sprintf("id: %v", id))

    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	//var buffer3 bytes.Buffer
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	
	//prevent access from other than ulapph pages
	checkReferrer(w,r)
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}

	yamlRaw := []byte("")
	if ulapphWebYaml.Domain == "" {
		YAML_FILE_PATH := "./goserve/ulapphWeb.yaml"
		ulapphDebug(w,r, "info", fmt.Sprintf("Opening YAML_FILE_PATH: %v", YAML_FILE_PATH))
	    file, err := os.Open(YAML_FILE_PATH)
	    if err != nil {
	        log.Fatal(err)
	    }
	    defer file.Close()
	    yamlRaw, err = ioutil.ReadAll(file)
	    if err != nil {
	        log.Fatal(err)
	    }
	}

	//var yamlParsed ulapphWeb

	err := yaml.Unmarshal(yamlRaw, &ulapphWebYaml)
	if err != nil {
		log.Fatalf("cannot unmarshal data: %v", err)
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("ulapphWebYaml: %v", ulapphWebYaml))
	ulapphDebug(w,r, "info", fmt.Sprintf("ulapphWebYaml.Domain: %#v", ulapphWebYaml.Domain))
	ulapphDebug(w,r, "info", fmt.Sprintf("ulapphWebYaml.Pages: %#v", ulapphWebYaml.Pages))
	ulapphDebug(w,r, "info", fmt.Sprintf("ulapphWebYaml.ContentsDir: %#v", ulapphWebYaml.ContentsDir))
	//ulapphDebug(w,r, "info", fmt.Sprintf("ulapphWebYaml.Pages[1]: %#v", ulapphWebYaml.Pages[1]))

	FL_FOUND_PAGE := false
	CONTENT_TYPE := ""
	CONTENT_FILE_PATH := ""
	CONTENT_TEMPLATE_FILE_PATH := ""
	for key, val := range ulapphWebYaml.Pages {
		ulapphDebug(w,r, "info", fmt.Sprintf("KEY: %v", key))
		ulapphDebug(w,r, "info", fmt.Sprintf("VAL: %v", val))
		ulapphDebug(w,r, "info", fmt.Sprintf("ID: %v", val.Page.ID))
		if val.Page.ID == id {
			FL_FOUND_PAGE = true
			CONTENT_TYPE = val.Page.Type
			//if type not supplied, derive from filename
			if CONTENT_TYPE == "" {
				if strings.Index(strings.ToLower(val.Page.File), ".slide") != -1 {
					//this is a slide
					CONTENT_TYPE = "slide"
				} else {
					if strings.Index(strings.ToLower(val.Page.File), ".article") != -1 {
						//this is an article
						CONTENT_TYPE = "article"
					} else {
						//defult to article
						CONTENT_TYPE = "article"
					}
				}

			}
			CONTENT_FILE_PATH = fmt.Sprintf("%v%v", ulapphWebYaml.ContentsDir, val.Page.File)
			CONTENT_TEMPLATE_FILE_PATH = fmt.Sprintf("%v%v", ulapphWebYaml.TemplatesDir, val.Page.Template)
			if val.Page.Template == "" {
				if CONTENT_TYPE == "slide" {
					//this is a slide
					CONTENT_TEMPLATE_FILE_PATH = "./templates/slides-template-offline.txt"
				} else {
					CONTENT_TEMPLATE_FILE_PATH = "./templates/article-template-offline.txt"
				}

			}
			break
		}
	}
	if FL_FOUND_PAGE == false {
		//id in parm does not have equivalent page in yaml
		//display error
		//display content
		SYSMSGS := fmt.Sprintf("Error: Target page [%v] is not found! Please contact administrator for more info.", CONTENT_FILE_PATH)
		go SENDSYSMSG(c, SYSMAIL, SYSMSGS, uid)
		return
	} else {
		//parse the target file as per yaml
		ulapphDebug(w,r, "info", fmt.Sprintf("Opening CONTENT_FILE_PATH: %v", CONTENT_FILE_PATH))
	    file2, err := os.Open(CONTENT_FILE_PATH)
	    if err != nil {
	        log.Fatal(err)
	    }
	    defer file2.Close()
	    contentRaw, err := ioutil.ReadAll(file2)
	    if err != nil {
	        log.Fatal(err)
	    }

		var lines []string
		s := bufio.NewScanner(bytes.NewReader(contentRaw))
		for s.Scan() {
			lines = append(lines, fmt.Sprintf("%v", s.Text()))
		}
		doc, err := Parse4(w, r, &Lines{0, lines}, "ULAPPH-WEB", 0)
		if err != nil {
			panic(err)
		}

		var buf bytes.Buffer
		templateFile := CONTENT_TEMPLATE_FILE_PATH
		SL_TMP := ""
		if strings.ToLower(CONTENT_TYPE) == "slide" {
			SL_TMP = "SL"
		} else {
			SL_TMP = "AL"
		}
		if err := renderPresentation(w,r,&buf, templateFile, doc, SL_TMP); err != nil {
			panic(err)
		}
		//display content
		writeHTMLHeader(w, 200)
		w.Write(buf.Bytes())
		return
	}

}

//D0037
//Executes content as template
func ulapphGo(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	//log.Printf("ulapphGo()")
	m := r.FormValue("m")
	s := r.FormValue("s")
	a := r.FormValue("a")
	switch {
		case m != "":
			cKey := fmt.Sprintf("GO_TEMPLATE_TDSMEDIA-%v", m)
			err := renderCustomTemplates(w,r,"gotId",cKey,"",m)
			if err != nil {
				//fmt.Fprintf(w, "%v", err)
				log.Panicf("%v", err)
			}
		case s != "":
			cKey := fmt.Sprintf("GO_TEMPLATE_TDSSLIDE-%v", s)
			err := renderCustomTemplates(w,r,"gotId",cKey,"",s)
			if err != nil {
				//fmt.Fprintf(w, "%v", err)
				log.Panicf("%v", err)
			}
		case a != "":
			cKey := fmt.Sprintf("GO_TEMPLATE_TDSARTL-%v", a)
			err := renderCustomTemplates(w,r,"gotId",cKey,"",a)
			if err != nil {
				//fmt.Fprintf(w, "%v", err)
				log.Panicf("%v", err)
			}
		default:
			//D0107
			//validate access
			checkReferrer(w,r)
			_, uid := checkSession(w,r)
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			//Angular File Explorer
			//func - list, delete, move. copy
			afm_func := r.FormValue("afm_func")
			//log.Printf("afm_func: %v", afm_func)
			//log.Printf("uid: %v", uid)
			//get response body
			defer r.Body.Close()
			bodyBytes, _ := ioutil.ReadAll(r.Body)
			//log.Printf("bodyBytes: %v", string(bodyBytes))
			//get manual filter
			uReferer := r.Referer()
			z, err := url.Parse(uReferer)
			if err != nil {
				panic(err)
			}
			mFilter := ""
			m, _ := url.ParseQuery(z.RawQuery)	
			if _, ok := m["f"]; ok {
				mFilter = m["f"][0]
			}
			apd := new(AfmPostData)
			err = json.Unmarshal(bodyBytes,apd)
			if err != nil {
				//log.Printf("ERROR: %v", err)
			}
			//log.Printf("ACTION: %v", apd.Action)
			//log.Printf("PATH: %v", apd.Path)
			switch {
				case afm_func == "downloadFile?action=download":
					//log.Printf("case afm_func= %v", afm_func)
					path := r.FormValue("path")
					//path=%2FTDSMEDIA%2FCCTV%2F999001%2FY2021%2FM04%2FD05%2FH00%2F20210405001029
					BLOB_KEY := fmt.Sprintf("%v%v", uid, path)
					//log.Printf("BLOB_KEY: %v", BLOB_KEY)
					bData, err := readGcsObject(BLOB_KEY)
					if err != nil {
						panic(err)
					}
					w.Write(bData)								
					return	
				case afm_func == "list":
					MAX_NUM_ARRAY := 500
					//log.Printf("case afm_func= %v", afm_func)
					//afm_src := r.FormValue("afm_src")
					//afm_type := r.FormValue("afm_type")
					//log.Printf("afm_src: %v", afm_src)
					//log.Printf("afm_type: %v", afm_type)
					switch apd.Path {
						case "/":
							//showAngularFileManagerGCS(w,r,".angular-file-manager",uid,"/go?afm_func=list&afm_src=root&afm_type=folder")
							const defaultAfmResponse = `{
									"result": [
										{
											"name": "TDSARTL",
											"type": "dir",
											"size": 0,
											"date": "2020-03-03 15:31:40",
											"rights": "-rw-r--r--"
										},
										{
											"name": "TDSSLIDE",
											"type": "dir",
											"size": 0,
											"date": "2020-03-03 15:31:40",
											"rights": "-rw-r--r--"
										},
										{
											"name": "TDSMEDIA",
											"type": "dir",
											"size": 0,
											"date": "2020-03-03 15:31:40",
											"rights": "-rw-r--r--"
										}
									],
									"success": true,
									"errorMsg": null,
									"error": null
								}`
							//resp, err := json.Marshal(defaultAfmResponse)
							//if err != nil {
							//	//log.Printf("ERROR: json.Marshal() %v",err)
							//}
							w.Write([]byte(defaultAfmResponse))
							return
						default:
							//process given a path
							// /TDSARTL
							// /TDSSLIDE
							// /TDSMEDIA
                            //prefix := fmt.Sprintf("%v%v/", uid, apd.Path)
							prefix := ""
							contType := ""
							switch apd.Path {
								case "/TDSARTL":
									prefix = fmt.Sprintf("%v/TDSARTL/", uid)
									contType = "TDSARTL"
								case "/TDSSLIDE":
									prefix = fmt.Sprintf("%v/TDSSLIDE/", uid)
									contType = "TDSSLIDE"
								case "/TDSMEDIA":
									prefix = fmt.Sprintf("%v/TDSMEDIA/", uid)
									contType = "TDSMEDIA"
								default:
									//prefix = apd.Path
									///TDSARTL/
									switch {
										case strings.Index(apd.Path, "/TDSARTL/") != -1:
											prefix = strings.Replace(apd.Path, "/TDSARTL/", fmt.Sprintf("%v/TDSARTL/", uid), -1)
											contType = "TDSARTL"
										case strings.Index(apd.Path, "/TDSSLIDE/") != -1:
											prefix = strings.Replace(apd.Path, "/TDSSLIDE/", fmt.Sprintf("%v/TDSSLIDE/", uid), -1)
											contType = "TDSSLIDE"
										case strings.Index(apd.Path, "/TDSMEDIA/") != -1:
											prefix = strings.Replace(apd.Path, "/TDSMEDIA/", fmt.Sprintf("%v/TDSMEDIA/", uid), -1)
											contType = "TDSMEDIA"
										default:
											//prefix = fmt.Sprintf("%v/TDSMEDIA/", uid)
											prefix = fmt.Sprintf("%v/", uid)
									}
							}
							delim := ""
							/*if mFilter != "" {
								delim = mFilter
							}*/
							if r.FormValue("p") != "" {
								prefix = r.FormValue("p")
								//log.Printf("manual prefix: %v", prefix)
							}
							//log.Printf("prefix: %v", prefix)
							//log.Printf("delim: %v", delim)
                            it, err := listGcsObject(prefix, delim)
                            if err != nil {
                                //log.Printf("ERROR: listGcsObject() %v", err)
                            }
                            //log.Printf("it: %v", it)
							ard := new(AfmResponseData)
							ard.Success = true
							ard.ErrorMessage = ""
							ard.Error = ""
							
							var items []AfmItem
							var p AfmItem
                            for {
                                attrs, err := it.Next()
                                if err == iterator.Done {
                                        break
                                }
                                if err != nil {
                                        //return err
                                        //log.Printf("ERROR: iterator error: %v", err)
                                }
                                //ctr++
                                //log.Printf("attrs: %#v", attrs)
                                //log.Printf("attrs.Name: %v", attrs.Name)
								//edwin.d.vinas@gmail.com/TDSARTL/0adcc940-9dc7-4154-a14d-898d17665519
								if mFilter != "" && strings.Index(attrs.Name, mFilter) == -1 {
									continue
								}
								thisName := strings.Replace(attrs.Name, prefix, "", -1)
								//p.Name = attrs.Name
								//log.Printf("thisName: %v", thisName)
								if thisName != "" {
									SPL := strings.Split(thisName,"/")
									if len(SPL) > 2 && len(SPL) < 4 {
										//if thisName contains 2 or more slashes, stop iteration
										//testFolder/test/
										if contType == "TDSMEDIA" {
											//p.Name = fmt.Sprintf("%v/", SPL[0])
											p.Name = thisName
											p.Date = fmt.Sprintf("%v", attrs.Updated)
											p.Size = 0
											p.Type = "dir"
											p.Rights = "-rw-r--r--"
											items = append(items, p)
										}
										//break
									} else {
										p.Name = thisName
										p.Date = fmt.Sprintf("%v", attrs.Updated)
										p.Size = int(attrs.Size)
										//check if file or folder
										thisType := attrs.ContentType
										//if thisType == "text/plain" {
										if strings.Index(thisType, "/") == -1 {
											p.Type = "dir"
										} else {
											p.Type = "file"
										}
										p.Rights = "-rw-r--r--"
										items = append(items, p)
									}
									if len(items) >= MAX_NUM_ARRAY {
										//log.Printf("WARNING: Reached MAX_NUM_ARRAY: %v", MAX_NUM_ARRAY)
										break
									}
								}
                            }
							ard.Result = items
							data, err := json.Marshal(ard)
							if err != nil {
								//log.Printf("json.Marshal() Error: %v", err)
							}
							w.Write(data)
							return
					}
					//show default page
					//log.Printf("show default page...")
					showAngularFileManagerGCS(w,r,".angular-file-manager",uid,apd.Path)
				case afm_func == "upload":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "rename":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "copy":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "move":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "remove":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "edit":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "getContent":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "createFolder":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "downloadFile":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "downloadMultiple":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "compress":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "extractUrl":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")
				case afm_func == "permissions":
					//log.Printf("case afm_func= %v", afm_func)
					//log.Printf("function not yet available")				
				default:
					//log.Printf("case afm_func= default")	
					showAngularFileManagerGCS(w,r,".angular-file-manager",uid,"/go?afm_func=list")
			}
	}
}
//D0107
//Angular File Manager
func showAngularFileManagerGCS(w http.ResponseWriter, r *http.Request, name, uid, target string) {
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT2)
	doc.STR_FILLER1 = uid
	doc.STR_FILLER2 = target
	data := struct {
		*TEMPSTRUCT2
		Template    *template.Template
	}{
		doc,
		t,
	}
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}
func logout(w http.ResponseWriter, r *http.Request) {
	if SYS_STATELESS_SERVER == true {
		redURL := fmt.Sprintf("/")
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
    //redirect to IAP permissions
    redURL := fmt.Sprintf("https://myaccount.google.com/permissions")
    http.Redirect(w, r, redURL, http.StatusFound)
}
 
func displayMOTD(w http.ResponseWriter, r *http.Request, uid, deskName string) {
	
	if SYS_DISP_MOTD == true {	
		ranMsgTitle, RAN_MSG, ranMsgSlidesURL := getMOTD(w, r, uid, deskName)
		
		if RAN_MSG != "" {
			//fmt.Fprintf(w, "<hr>")
			fmt.Fprintf(w, "<hr><h3>%v</h3>", ranMsgTitle)
			fmt.Fprintf(w, "<div class=\"quotations\"><blockquote>%v", RAN_MSG)
			fmt.Fprintf(w, "<a href=\"%v\" target=\"motd\">More...</a></blockquote></div>", ranMsgSlidesURL)
			//fmt.Fprintf(w, "<hr>")
		}
	}
}
 
func displayCurrAccLog(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "N" {
		urlStr := fmt.Sprintf("%v/search?f=GET_CURR_ACC_LOG", SEARCH_SERVER)
		//client := urlfetch.Client(c)
		if err := r.ParseForm(); err != nil {
			panic(err)
		}
		resp, err := http.Get(urlStr)
		if err != nil {
			panic(err)
		}
		bodyBytes, _ := ioutil.ReadAll(resp.Body)
		FETCH_URL := string(bodyBytes)
		if strings.Index(FETCH_URL, "PRESENCE:") != -1 {
			fmt.Fprintf(w, "%v", FETCH_URL)
		}
		//w.Write(bodyBytes)
	} else {
		CURR_ACC_LOG := getCurrAccLog(w,r)
		//writeHTMLHeader(w, 200)
		w.Write([]byte(CURR_ACC_LOG))
	}
 
}
 
//websiteAll
func displaySocialSites(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "<center>")
	fmt.Fprintf(w, "<a href=\"%v\" title=\"ULAPPH Google Plus\" target=\"gcommunity\"><span class=\"fa fa-google-plus\" style=\"font-size: 40px;\"></span></a>", SOCIAL_LINK_PLUS)
	fmt.Fprintf(w, "<a href=\"%v\" title=\"ULAPPH Facebook\" target=\"fcommunity\"><span class=\"fa fa-facebook\" style=\"font-size: 40px;\"></span></a>", SOCIAL_LINK_FB)
	fmt.Fprintf(w, "<a href=\"%v\" title=\"ULAPPH Twitter\" target=\"twitter\"><span class=\"fa fa-twitter\" style=\"font-size: 40px;\"></span></a>", SOCIAL_LINK_TWITTER)
	fmt.Fprintf(w, "<a href=\"%v\" title=\"ULAPPH LinkedIn\" target=\"linkedin\"><span class=\"fa fa-linkedin\" style=\"font-size: 40px;\"></span></a>", SOCIAL_LINK_LINKEDIN)
	fmt.Fprintf(w, "<a href=\"%v\" title=\"ULAPPH Youtube\" target=\"ycommunity\"><span class=\"fa fa-youtube\" style=\"font-size: 40px;\"></span></a>", SOCIAL_LINK_YOUTUBE)
	fmt.Fprintf(w, "</center>")
}

//D0087
// validateAssertion validates assertion was signed by Google and returns the
// associated email and userID.
func validateAssertion(w http.ResponseWriter, r *http.Request, assertion string, certs map[string]string, aud string) (email string, userID string, err error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("validateAssertion() %v", ""))
	token, err := jwt.Parse(assertion, func(token *jwt.Token) (interface{}, error) {
		keyID := token.Header["kid"].(string)
		_, ok := token.Method.(*jwt.SigningMethodECDSA)
		if !ok {
			return nil, fmt.Errorf("unexpected signing method: %q", token.Header["alg"])
		}

		cert := certs[keyID]
		return jwt.ParseECPublicKeyFromPEM([]byte(cert))
	})
	ulapphDebug(w,r, "info", fmt.Sprintf("token: %#v", token))

	if err != nil {
		return "", "", err
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return "", "", fmt.Errorf("could not extract claims (%T): %+v", token.Claims, token.Claims)
	}

	if claims["aud"].(string) != aud {
		return "", "", fmt.Errorf("mismatched audience. aud field %q does not match %q", claims["aud"], aud)
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("claims: %#v", claims))
	
	return claims["email"].(string), claims["sub"].(string), nil
}
//D0087
// audience returns the expected audience value for this service.
func audience() (string, error) {
	projectNumber, err := metadata.NumericProjectID()
	if err != nil {
		return "", fmt.Errorf("metadata.NumericProjectID: %v", err)
	}

	projectID, err := metadata.ProjectID()
	if err != nil {
		return "", fmt.Errorf("metadata.ProjectID: %v", err)
	}

	return "/projects/" + projectNumber + "/apps/" + projectID, nil
}
//D0087
// certificates returns Cloud IAP's cryptographic public keys.
func certificates(w http.ResponseWriter, r *http.Request) (map[string]string, error) {
	const url = "https://www.gstatic.com/iap/verify/public_key"
	client := http.Client{
		Timeout: 30 * time.Second,
	}
	resp, err := client.Get(url)
	if err != nil {
		return nil, fmt.Errorf("Get: %v", err)
	}

	var certs map[string]string
	dec := json.NewDecoder(resp.Body)
	if err := dec.Decode(&certs); err != nil {
		return nil, fmt.Errorf("Decode: %v", err)
	}
	//ulapphDebug(w,r, "info", fmt.Sprintf("certs: %v", certs))
	return certs, nil
}
func checkSession(w http.ResponseWriter, r *http.Request) (FL_OU_USER bool, uid string) {
	ulapphDebug(w,r, "info", fmt.Sprintf("checkSession() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("referrer: %v", r.URL.String()))
	if SYS_NOREG_FIXED_USER != "" {
		return true, SYS_NOREG_FIXED_USER
	}
	if SYS_STATELESS_SERVER == true {
		userName := r.FormValue("UID")
		if userName == "" {
			uReferer := r.Referer()
			z, err := url.Parse(uReferer)
			if err != nil {
				panic(err)
			}
			m, _ := url.ParseQuery(z.RawQuery)	
			if _, ok := m["UID"]; ok {
				userName = m["UID"][0]
			}
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("userName: %v", userName))
		if r.FormValue("OPT") == "SWFS" || r.FormValue("OPT") == "CCTV" {
			if PIN_KEY != r.FormValue("PINKEY") {
				ulapphDebug(w,r, "info", fmt.Sprintf("PIN_KEY ERROR! %v", ""))
				return false, userName
			}
			return true, userName
		}
		if SYS_LOGIN_SCREEN_ENABLED == false {
			ulapphDebug(w,r, "info", fmt.Sprintf("LOGIN SCREEN DISABLED!"))
			cKey := fmt.Sprintf("ACTIVE_SESSION_STATELESS_%v", userName)
			ulapphDebug(w,r, "info", fmt.Sprintf("cKey: %v", cKey))
			as := getStrMemcacheValueByKey(w,r,cKey)
			ulapphDebug(w,r, "info", fmt.Sprintf("as: %v", as))
			if as != "Y" {
				//w.WriteHeader(200)
				//loginPage := readDefaultLogin(w,r,"ulapph-local-login.html",r.URL.String())
				//w.Write(loginPage)
				readDefaultLogin(w,r,".login-local",r.URL.String())
				return false, userName
			}
			return true, userName
		}
		cKey := fmt.Sprintf("ACTIVE_SESSION_STATELESS_%v", userName)
        as := getStrMemcacheValueByKey(w,r,cKey)
		if as != "Y" {
			//w.WriteHeader(200)
			//loginPage := readDefaultLogin(w,r,"ulapph-local-login.html",r.URL.String())
			//w.Write(loginPage)
			readDefaultLogin(w,r,".login-local",r.URL.String())
			return false, userName
		}
		//return true, ADMMAIL
		return true, userName
	}
    FL_OU_USER = false
	a, err := newApp(w,r)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
    }
	assertion := r.Header.Get("X-Goog-IAP-JWT-Assertion")
	//ulapphDebug(w,r, "info", fmt.Sprintf("assertion: %v", assertion))
	if assertion == "" {
		fmt.Fprintln(w, "No Cloud IAP header found.")
		return
	}
	uid, _, err = validateAssertion(w,r,assertion, a.certs, a.aud)
	ulapphDebug(w,r, "info", fmt.Sprintf("uid: %v", uid))
	if err != nil {
		//log.Println(err)
		fmt.Fprintln(w, "Could not validate assertion. Check app logs.")
		return
	}
    //fmt.Fprintf(w, "Hello %s\n", email)
    SPL := strings.Split(uid, "accounts.google.com:")
    if len(SPL) == 2 {
        uid = SPL[1]
    }
	return FL_OU_USER, uid
}
//checks if user is logged in 
func isLoggedIn(w http.ResponseWriter, r *http.Request) (FL_LOGGED_IN bool) {
	FL_LOGGED_IN = false
    if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
        FL_LOGGED_IN = true
    }
	
	return FL_LOGGED_IN
}
 
func promptLogin(w http.ResponseWriter, r *http.Request, uid,LFUNC string) {
    //c := appengine.NewContext(r)
	//c, cancel := context.WithCancel(context.Background())
	//defer cancel()
	//u := user.Current(c)
	uReferero := r.Referer()
	uReferer := strings.Replace(r.URL.String(), "&", "@888@", -1)
	TARGET_URL := uReferer
	duser := ""
	dtok := ""
	targetURL := ""
	if (strings.Index(TARGET_URL, "@888@user=") != -1 && strings.Index(TARGET_URL, "@888@chan=") != -1 && strings.Index(TARGET_URL, "@888@tok=") != -1) {
		targetURL = strings.Replace(TARGET_URL, "@888@", "&", -1)
		z, err := url.Parse(targetURL)
		if err != nil {
			panic(err)
		}
		//path := z.Path
		m, _ := url.ParseQuery(z.RawQuery)
		duser = m["user"][0]
		//dchan = m["chan"][0]	
		dtok = m["tok"][0]
		LFUNC = "TOKEN"
	}
	switch LFUNC {
		case "ULAPPH":
			lref := fmt.Sprintf("/login?continue=%v", url.QueryEscape(uReferero))
			w.Header().Set("Location", lref)
			w.WriteHeader(http.StatusFound)
		case "GOOGLE":
			//loginGoogle(w,r,r.URL.String())
		case "TOKEN":
			FL_TOKEN_PROC := false
			if duser == "" && dtok == "" {
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
				if FL_PROC_OK == false {return}
			} else {
				FL_TOKEN_PROC = validateToken(w, r, "IS_VALID_USER", duser, dtok)
			}
			if FL_TOKEN_PROC == false {
			   if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
					w.Header().Set("Location", "/uwm")
					w.WriteHeader(http.StatusFound)
					return
				}
			} else {
				fmt.Fprintf(w, " ")
			}
		default:
			//edv 04/10/2015
			rLoad := fmt.Sprintf("300;url=/?q=login&LFUNC=GOOGLE&TARGET_URL=%v", TARGET_URL)
			if err := htmlHeaderModalRefreshNoHome.Execute(w, rLoad); err != nil {
			 panic(err)
			}

			displayMOTD(w,r,uid,"")
			displayOauthIcons(w,r,TARGET_URL,"")
			if SYS_DISP_ADS_CONTENT == true {
				if err := mobileBodyTemplateContentLoaderSingleItemAds.Execute(w, SYS_DISP_ADS_HOST); err != nil {
				 panic(err)
				}
			}
			displayBasicCharts(w,r,uid,false)
			displayCurrAccLog(w,r)
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			//edv 10/100/2015 - dont return
			//return
	}
}

//displays eCharts for the different stats 
func displayEcharts(w http.ResponseWriter, r *http.Request, uid, TARGET, NAME, div string) {
	//c := appengine.NewContext(r)
	
	//cache
	//ECHART:STATS.COUNTRY-Countries-chart0
	//ECHART:STATS.OS-Operating Systems-chart1
	//ECHART:STATS.BROWSER-Browsers-chart2
	//ECHART:STATS.DESKTOP-Desktops-chart3
	//ECHART:STATS.CONTENT-Contents-chart4
	
	cKey := fmt.Sprintf("ECHART:%v-%v-%v", TARGET, NAME, div)
	data := getBytMemcacheValueByKey(w,r,cKey)	
 
 
	
	var p MyBox
	if data == nil {
		p = getHomeStatsNums(w,r, uid, TARGET, NAME, div)
	} else {
		var mybox *MyBox = &MyBox{}
		err := json.Unmarshal(data , mybox)
		if err != nil {
 
			panic(err)
			//return
		}
		p = *mybox
	}
	
	if err := eChartsPopular.Execute(w, &p); err != nil {
	  panic(err)
	}
	
	return
}

//displays eCharts Bar charts 
func displayEchartsBar(w http.ResponseWriter, r *http.Request, uid, TARGET, NAME, div string) {
	//OVERALL_HITS_IND_%v
	data := getBytMemcacheValueByKey(w,r,TARGET)
	if data != nil {
		TEMPDATA := TEMPSTRUCT{
			STR_FILLER1: NAME,
			STR_FILLER2: string(data),
			STR_FILLER3: div,
		}
				
		if err := eChartsHits.Execute(w, &TEMPDATA); err != nil {
		  panic(err)
		}		
	}
	
	return
}

//saves a cache of the ACB data 
func saveAutoCompsBlob(w http.ResponseWriter, r *http.Request, uid string, acb []byte) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	//log.Printf("saveAutoCompsBlob")
	//log.Printf("uid: %v", uid)
	//D0068
	//if r.FormValue("API_KEY") == CMD_GEN_KEY {
	//	//proceed
	//} else {
		if uid == "general" {
			return
		}
	//}
	//check if cnfg exists
	FL_ACB := true
	var g TDSCNFG
	thisKey := fmt.Sprintf("SYSTEM_ACB_%v", uid)
    key := datastore.NameKey("TDSCNFG", thisKey, nil)
    //D0086
    datastoreClient := createClientDS()
    //log.Printf("datastoreClient.Get()  [7984]")
	if err := datastoreClient.Get(c, key, &g); err != nil {
		//panic(err)
        //return
        FL_ACB = false
	}
	if FL_ACB == false {
		//log.Printf("FL_ACB = false")
		thisKey := fmt.Sprintf("SYSTEM_ACB_%v", uid)
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: thisKey,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: "",
				CFG_DESC: "Set via code",
		}
		key := datastore.NameKey("TDSCNFG", thisKey, nil)
 
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
				//return
        }
        //log.Printf("datastoreClient.Put()  [8008]")
		//log.Panicf("[S0016]")
	}
	//D0068
	//} else {
		//log.Printf("FL_ACB = true")
		//upload to blobstore
		//log.Printf("upload to blobstore")
		csn2 := getUpUrlString(w,r,"/upload-media")
		u := csn2
		var m bytes.Buffer
		fw := multipart.NewWriter(&m)
		file, err := fw.CreateFormFile("file", "ACB")
		if err != nil {
			return
		}
		if _, err = file.Write(acb); err != nil {
			return
		}
		_ = fw.WriteField("FUNC_CODE", "ACB")
		//D0068
		_ = fw.WriteField("API_KEY", CMD_GEN_KEY)
		_ = fw.WriteField("UID", uid)
		fw.Close()
		req, err := http.NewRequest("POST", u, &m)
		if err != nil {
			return
		}
		req.Header.Set("Content-Type", fw.FormDataContentType())
        //client := urlfetch.Client(c)
        client := &http.Client{}
		res, err := client.Do(req)
		if err != nil {
			return
		}
		if res.StatusCode != http.StatusCreated {
			return
		}
	//}
}

//redirects to Google login 
func loginGoogle(w http.ResponseWriter, r *http.Request, urlStr string) {
    //c := appengine.NewContext(r)
	//c, cancel := context.WithCancel(context.Background())
	//defer cancel()
	w.Header().Set("Location", "/uwm")
    w.WriteHeader(http.StatusFound)
	return
}

//D0068
func isJSON(s string) bool {
    var js map[string]interface{}
    return json.Unmarshal([]byte(s), &js) == nil

}

//checks if IP address is blocked 
func isIpAddressBlocked(w http.ResponseWriter, r *http.Request, ip string) (IS_BLOCKED bool) {
	//c := appengine.NewContext(r)
	IS_BLOCKED = true
	
	cKey := fmt.Sprintf("BLOCKED_IP_%v", ip)
	BLOCKED_IP := ""
 
	BLOCKED_IP = getStrMemcacheValueByKey(w,r,cKey)
	
	if BLOCKED_IP == "N" || BLOCKED_IP == "" {
		IS_BLOCKED = false
	}
		
	return IS_BLOCKED
}
 
//blocks an IP address
func blockIP(w http.ResponseWriter, r *http.Request,uid,ip, mode string) {
	cKey := fmt.Sprintf("BLOCKED_IP_%v", ip)
	putStrToMemcacheWithExp(w,r,cKey,"Y",GEN_CONTENT_EXPIRES4)
 
}

//unblocks an IP address 
func unblockIP(w http.ResponseWriter, r *http.Request,uid,ip,mode string) {
	cKey := fmt.Sprintf("BLOCKED_IP_%v", ip)
	putStrToMemcacheWithExp(w,r,cKey,"N",GEN_CONTENT_EXPIRES4)
 
}

//check is user is an Admin
func isAdmin(w http.ResponseWriter, r *http.Request) bool {
	_, uid := checkSession(w,r)
	
	FUNC_CODE := "GET_GRP_ID"
	FL_ADMIN_USER := false
	FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	
	if FL_VALID_USER == true {
	
		if GROUP_ID == "GRP_ADMIN" {
			FL_ADMIN_USER = true
		} else {
			fmt.Fprintf(w, "Sorry, only administrators can access this page.")
			return false
		}
		
	}
	return FL_ADMIN_USER
}
	
//handles the /admin-setup page whic contains Admin maintainance
//only accessible via admin of the appengine itself
func adminSetup(w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	checkHTTPS(w,r)
    //c := appengine.NewContext(r)
    recCount := 0
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	checkSysIns(w,r)
	_, uid := checkSession(w,r)
	FL_ADMIN_USER := false
	if uid == ADMMAIL {
		FL_ADMIN_USER = true
	}
	if FL_ADMIN_USER == false {
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
		if FL_PROC_OK == false {
			return
		}
		//FL_ADMIN_USER = true
	}
    users := make([]TDSUSERS, 0, 1)
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
		recCount = 1
		FL_ADMIN_USER = true
	} else {
	//check if system is installed already
    q := datastore.NewQuery("TDSUSERS").Limit(1)
    //D0086
    datastoreClient := createClientDS()
	//log.Panicf("[S0017]")
    //log.Printf("datastoreClient.Get()  [8151]")
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		panic(err)
		//return
	}
	for _, _ = range users {
		recCount++
	}
	}
	if recCount <= 0 {
		msgDtl := "[U00157] ERROR: System appears to be off-line or having a critical error or near quota limits. Contact admin for details."
		msgTyp := "error"
		msgURL := "/website?q=home"
		action := "U00157"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
	if FL_ADMIN_USER == true {
		ADMIN_FUNC := r.FormValue("ADMIN_FUNC")
		switch ADMIN_FUNC {
			case "BLOCK_IP":
				ip := r.FormValue("ip")
				//add to block list
				blockIP(w,r,uid,ip,"admin")
				fmt.Fprintf(w, "IP address %v has been temporarily blocked.<br><br>.", ip)
				return
			case "UNBLOCK_IP":
				ip := r.FormValue("ip")
				//add to block list
				unblockIP(w,r,uid,ip,"admin")
				fmt.Fprintf(w, "IP address %v has been un-blocked.<br><br>.", ip)
				return
			//newconfigtemplate
			case "EDIT_PUB_WP_LIST":
			//SPC_OPT to /people-edit?EditPeopleFunc=EDIT_CONTACTS_LIST&MEDIA_ID=787
				//get config id
				cfgName := fmt.Sprintf("SYSTEM_Public_WP_List_Media_ID")
				docID := 0
				_, docID = getTDSCNFG(w,r,1,cfgName)
				if docID > 0 {
					redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_PUB_WP_LIST", docID, docID)
					http.Redirect(w, r, redURL, http.StatusFound)
				} else {
					redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
					http.Redirect(w, r, redURL, http.StatusFound)
				}
				return
			//newconfigtemplate
			case "EDIT_PUB_UWM":
			//SPC_OPT to /people-edit?EditPeopleFunc=EDIT_CONTACTS_LIST&MEDIA_ID=787
				//get config id
				cfgName := fmt.Sprintf("SYSTEM_Public_UWM_Media_ID")
				docID := 0
				_, docID = getTDSCNFG(w,r,1,cfgName)
				if docID > 0 {
					redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_PUB_UWM", docID, docID)
					http.Redirect(w, r, redURL, http.StatusFound)
				} else {
					redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
					http.Redirect(w, r, redURL, http.StatusFound)
				}
				return
			case "SET_CATEGORY_LIST":
    				datastoreClient := createClientDS()
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_Category_List_Media_ID",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
                key := datastore.NameKey("TDSCNFG", "SYSTEM_Category_List_Media_ID", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8231]")
				//log.Panicf("[S0020]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)
				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				//secCtr := 0
				//D0067
				thisGrp := ""
				var isUwm = map[string]bool{}
				for s.Scan() {
					if len(s.Text()) > 0 {
						//log.Printf("%v", s.Text())
						thisStr := fmt.Sprintf("%v", s.Text())
						//D0067
						if len(thisStr) > 3 {
						if string(thisStr[0]) == "#" && string(thisStr[1]) == "<" && string(thisStr[2]) != "/" && thisGrp == "" {
							//start group
							//#<Basic Desktops>
							thisStr := fmt.Sprintf("%v", strings.TrimSpace(s.Text()))
							thisGrp = thisStr[2:len(thisStr)-1]
						}
						if string(thisStr[0]) == "#" && string(thisStr[1]) == "<" && string(thisStr[2]) == "/" {
							//close group
							thisGrp = ""
						}
						}
						if string(thisStr[0]) != "#" {
							//fmt.Fprintf(w, "%v", s.Text())
							buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
							//update TDSCATS
							SPL := strings.Split(s.Text(),">")
							SPL2 := strings.Split(SPL[1],"<")
							SPL3 := strings.Split(SPL2[0],":")
							if len(SPL3) > 1 {
								thisNum := str2int(SPL3[0])
								thisName := fmt.Sprintf("desktop%v", thisNum)
								thisDesc := SPL3[1]
								//check uwm number exists
								if isUwm[thisName] == true {
									w.WriteHeader(200)
									fmt.Fprintf(w, "<font color=\"red\">ERROR: Duplicate desktop numbers for %v. Please remove the duplicates to proceed.</font>", thisName)
									return
									//break 
								}
								isUwm[thisName] = true

								//should check if row exists
    								datastoreClient := createClientDS()
								desktopKey := fmt.Sprintf("%v", thisName)
								q := datastore.NewQuery("TDSCATS").Filter("__key__ =", getKeyDesktop(c,desktopKey))
								recCount,_ := datastoreClient.Count(c,q)
								if recCount > 0 {
									//exists
                                    cats := make([]TDSCATS, 0, 1)
                                    //log.Printf("datastoreClient.Get()  [8290]")
									if _, err := datastoreClient.GetAll(c,q, &cats); err != nil {
										//panic(err)
									}
									for _, x := range cats {
										if thisName == x.CAT_NAME && thisDesc == x.CAT_DESC {
											break
										}
										g := TDSCATS{
												CAT_NUM: x.CAT_NUM,
												CAT_NAME: thisName,
												CAT_DESC: thisDesc,
												CAT_SHARED: x.CAT_SHARED,
												CAT_PASS: x.CAT_PASS,
												//D0067
												CAT_GRP: thisGrp,
										}
                                        desktopKey := fmt.Sprintf("%v", thisName)
                                        _, err := datastoreClient.Put(c, getKeyDesktop(c,desktopKey), &g)
                                        //log.Printf("datastoreClient.Put()  [8309]")
										//log.Panicf("[S0021]")
										if err != nil {
												panic(err)
												//return
										}
										break
									}
								} else {
									g := TDSCATS{
											CAT_NUM: thisNum,
											CAT_NAME: thisName,
											CAT_DESC: thisDesc,
											CAT_SHARED: "N",
											CAT_PASS: "",
											//D0067
											CAT_GRP: "",
									}
									desktopKey := fmt.Sprintf("%v", thisName)
                                    _, err := datastoreClient.Put(c, getKeyDesktop(c,desktopKey), &g)
                                    //log.Printf("datastoreClient.Put()  [8329]")
									//log.Panicf("[S0021]")
									if err != nil {
											panic(err)
											//return
									}
								}
							}
						}
					}
				}
				cKey := "CATEGORY_LIST"
				putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
				//clear desktop menu
				cKey = "DESKTOPS_LIST"
				putStrToMemcacheWithoutExp(w,r,cKey,"")
				cKey = "DESKTOPS_LIST_JSON"
				putBytesToMemcacheWithoutExp(w,r,cKey,[]byte(""))

				//redirect
				redURL := fmt.Sprintf("/tools?FUNC=ALL_DESKTOPS")
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			case "SET_HOST_LIST":
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
    				datastoreClient := createClientDS()
						
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_SEARCH_SETTINGS",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						//TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_SEARCH_SETTINGS", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8370]")
				//log.Panicf("[S0022]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
				
 
				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				for s.Scan() {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
				
				cKey := fmt.Sprintf("HOST_LIST")
				putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
				//clear autocomp cache
				cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
				putStrToMemcacheWithoutExp(w,r,cKeyAll,"")
				fmt.Fprintf(w, "Host List has been set.<br><br>.")
				fmt.Fprintf(w, "%v", buf.String())
			case "SET_HOST_LIST2":
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
    				datastoreClient := createClientDS()
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_USER_TO_HOST_SETTINGS",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						//TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_USER_TO_HOST_SETTINGS", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8411]")
				//log.Panicf("[S0023]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
				var buf bytes.Buffer
    		//datastoreClient := createClientDS()
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				for s.Scan() {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
				cKey := fmt.Sprintf("HOST_LIST2")
				putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
				fmt.Fprintf(w, "User to Host List has been set.<br><br>.")
				fmt.Fprintf(w, "%v", buf.String())
				//clear cache
				cKey2 := fmt.Sprintf("MY_ULAPPH:%v", uid)
				memcacheDelete(w,r, cKey2)
			case "SET_AS_HOMEPAGE":
				URL := r.FormValue("URL")
    				datastoreClient := createClientDS()
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_HOMEPAGE_SETTINGS",
						DAT_TYP: "TXT",
						NUM_VAL: 0,
						TXT_VAL: URL,
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_HOMEPAGE_SETTINGS", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8448]")
				//log.Panicf("[S0024]")
				//update cache
				cKey := fmt.Sprintf("SYSTEM_HOMEPAGE_SETTINGS")
				putStrToMemcacheWithoutExp(w,r,cKey,URL)

				sysCacheStr["SYSTEM_HOMEPAGE_SETTINGS"] = URL
				
				fmt.Fprintf(w, "System homepage has been set.<br><br>.")
				return
			
			case "CLEAR_HOMEPAGE":
    				datastoreClient := createClientDS()
				key := datastore.NameKey("TDSCNFG", "SYSTEM_HOMEPAGE_SETTINGS", nil)
				datastoreClient.Delete(c, key)
 
				//update cache
				cKey := fmt.Sprintf("SYSTEM_HOMEPAGE_SETTINGS")
				memcacheDelete(w,r, cKey)
				
				fmt.Fprintf(w, "System homepage setting has been removed.<br><br>.")
				return
				
			case "SET_AS_AD":
				TYPE := r.FormValue("TYPE")
				tstamp := getTimestamp()
				TITLE := ""
				ADS_TYPE := ""
				CATEGORY := "desktop0"
				ADS_URL := ""
				blobkey := ""
				ADS_IMG := ""
				
				switch TYPE {
				
					case "ARTICLE":
						ADS_TYPE = "ARTICLE"
						////TYPE=ARTICLE&TITLE=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&IMG_URL=%v
						TITLE = r.FormValue("TITLE")
						DOC_ID := r.FormValue("DOC_ID")
						CATEGORY = r.FormValue("CATEGORY")
						ADS_IMG = r.FormValue("IMG_URL")
						MUSIC_ID := r.FormValue("MUSIC_ID")
						ADS_URL = fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&MUSIC_ID=%v", DOC_ID, DOC_ID, MUSIC_ID)
					
					case "SLIDE":
						ADS_TYPE = "SLIDE"
						////TYPE=ARTICLE&TITLE=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&IMG_URL=%v
						TITLE = r.FormValue("TITLE")
						DOC_ID := r.FormValue("DOC_ID")
						CATEGORY = r.FormValue("CATEGORY")
						ADS_IMG = r.FormValue("IMG_URL")
						MUSIC_ID := r.FormValue("MUSIC_ID")
						ADS_URL = fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v&GET_NEXT=&SOUND=ON", DOC_ID, DOC_ID, MUSIC_ID)
						
					default:
						MEDIA_ID2 := r.FormValue("MEDIA_ID")
						MEDIA_ID := str2int(MEDIA_ID2)
						//BLOB_KEY, PROP, TITLE, AUTHOR, DOC_STAT, FL_SHARED, IMG_URL, DATA_TYPE, MIME_TYPE, DESC, SHARED_TO string
						_, _, TITLE, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)
						ADS_TYPE = "HTML"
						ADS_IMG = r.FormValue("IMG_URL")
						if TYPE == "text" {
							ADS_URL = fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=RAWTEXT&MEDIA_ID=%v&SID=TDSMEDIA-%v", MEDIA_ID, MEDIA_ID)
						} else {
							ADS_URL = fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", MEDIA_ID, MEDIA_ID)
						}
						
					
				}
				
				ADS_URL = strings.Replace(ADS_URL, "&", "@888@", -1)
				
				q := datastore.NewQuery("TDSADS").Order("-ADS_ID").Limit(1)
				//log.Panicf("[S0025]")
                ads := make([]TDSADS, 0, 1)
                //log.Printf("datastoreClient.Get()  [8521]")
    				datastoreClient := createClientDS()
				if _, err := datastoreClient.GetAll(c,q, &ads); err != nil {
					 panic(err)
					//return
				  }
				
				thisID := 0
				for _, p := range ads{
					thisID = p.ADS_ID + 1
					p.SYS_VER = SYS_VERSION
					p.ADS_ID = thisID
					p.ADS_STATUS = 1
					p.ADS_PUB_ID = "ULAPPH"
					p.ADS_TYP = ADS_TYPE
					p.UPLOAD_BY = uid
					p.UPLOAD_DATE = tstamp
					p.CATEGORY = CATEGORY
					p.ADS_SIZE = ""
					p.ADS_VIEW = 0
					p.ADS_CLICK = 0
					p.ADS_VAL_START = 0
					p.ADS_VAL_END = 0
					p.ADS_TITLE = TITLE
					p.ADS_IMG = ADS_IMG
					p.ADS_URL = ADS_URL
					p.BLOB_KEY = blobkey
					thisKey := fmt.Sprintf("%s.%d", p.ADS_PUB_ID, p.ADS_ID)
					key := datastore.NameKey("TDSADS", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [8550]")
					//log.Panicf("[S0026]")
					if err != nil {
						 panic(err)
						//return
					}

					//clear ads id cache
					ADS_ID_CACHE_KEY := fmt.Sprintf("ADS_ID_CACHE_%v", p.ADS_ID)
					putStrToMemcacheWithoutExp(w,r,ADS_ID_CACHE_KEY,"")
					
					break
				}
				redURL := fmt.Sprintf("/admin-ads?ADS_FUNC=EditAd&ADS_ID=%d", thisID)
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			
			case "SET_ADS_TS":
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
						
    				datastoreClient := createClientDS()
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_ADS_TIMESLOTS",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						//TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_ADS_TIMESLOTS", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8585]")
				//log.Panicf("[S0027]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
				
 
				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				for s.Scan() {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
				
				cKey := fmt.Sprintf("ADS_TS_LIST_RECS")
				putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
				fmt.Fprintf(w, "Ads Slots template has been set.<br><br>.")
		
			case "SET_TOP_LIST_MENU_SOURCE":
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
						
    				datastoreClient := createClientDS()
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_Top_List_Menu_Media_ID",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_Top_List_Menu_Media_ID", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8624]")
				//log.Panicf("[S0028]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
 
				blobText := getBlobText(w, r, BLOB_KEY)
				
				//update cache
				cKey := "TOP_LIST_MENU_CACHE"
				putBytesToMemcacheWithExp(w,r,cKey,[]byte(blobText),MC_ADS_EXPIRES_30_MIN)
				fmt.Fprintf(w, "Top List Menu has been set<br><br>.")
				//fmt.Fprintf(w, "%v", blobText)
				
			case "SET_LEFT_MENU_SOURCE":
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
						
    				datastoreClient := createClientDS()
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_Left_Menu_Media_ID",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_Left_Menu_Media_ID", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8656]")
				//log.Panicf("[S0029]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
				
 
				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				for s.Scan() {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
				
				cKey := "HIDABLE_MENU_CACHE"
				putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
				fmt.Fprintf(w, "Hidable Left Menu has been set<br><br>.")
				fmt.Fprintf(w, "%v", buf.String())
			
			//newconfigtemplate			
			case "SET_PUBWP_LIST":
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
						
    				datastoreClient := createClientDS()
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_Public_WP_List_Media_ID",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_Public_WP_List_Media_ID", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8697]")
				//log.Panicf("[S0030]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				PUBLIC_WP_LIST_STR := ""
				for s.Scan() {
					if len(s.Text()) > 0 {
						thisStr := fmt.Sprintf("%v", s.Text())
						if string(thisStr[0]) != "#" {
							if PUBLIC_WP_LIST_STR != "" {
								PUBLIC_WP_LIST_STR = fmt.Sprintf("%v@888@%v", PUBLIC_WP_LIST_STR, s.Text())
							} else {
								PUBLIC_WP_LIST_STR = fmt.Sprintf("%v", s.Text())
							}
						}
					}
				}
				
				cKey := "PUBLIC_WP_LIST"
				putStrToMemcacheWithoutExp(w,r,cKey,PUBLIC_WP_LIST_STR)
				fmt.Fprintf(w, "Public wallpaper list has been set<br><br>.")
				fmt.Fprintf(w, "%v", PUBLIC_WP_LIST_STR)
				
				//clear wallpaper caches
				cKey1 := fmt.Sprintf("WALLPAPERS_LIST_%v", uid)
				cKey2 := fmt.Sprintf("WALLPAPERS_TOTAL_%v", uid)
				cKey3 := fmt.Sprintf("WALLPAPERS_LIST_%v", "admin")
				cKey4 := fmt.Sprintf("WALLPAPERS_TOTAL_%v", "admin")		
				putStrToMemcacheWithoutExp(w,r,cKey1,"")
				putStrToMemcacheWithoutExp(w,r,cKey2,"")
				putStrToMemcacheWithoutExp(w,r,cKey3,"")
				putStrToMemcacheWithoutExp(w,r,cKey4,"")
 
			//newconfigtemplate			
			case "SET_PUB_UWM":
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
						
    				datastoreClient := createClientDS()
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_Public_UWM_Media_ID",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_Public_UWM_Media_ID", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8755]")
				//log.Panicf("[S0031]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	

				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				for s.Scan() {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
				
				cKey := "PUBLIC_UWM"
				putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
				fmt.Fprintf(w, "Public UWM setup has been set<br><br>.")
				
				
			case "SET_TABZILLA_SOURCE":
			
				MEDIA_ID2 := r.FormValue("MEDIA_ID")
				MEDIA_ID := str2int(MEDIA_ID2)
						
    				datastoreClient := createClientDS()
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_Pulldown_Tabzilla_Media_ID",
						DAT_TYP: "TXT",
						NUM_VAL: MEDIA_ID,
						TXT_VAL: "",
						CFG_DESC: "Set via Media Gallery",
				}
				key := datastore.NameKey("TDSCNFG", "SYSTEM_Pulldown_Tabzilla_Media_ID", nil)
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
						//return
                }
                //log.Printf("datastoreClient.Put()  [8795]")
				//log.Panicf("[S0032]")
				//update cache
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
				
 
				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				for s.Scan() {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
				
				cKey := "TABZILLA_MENU_CACHE"
				putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
				fmt.Fprintf(w, "Tabzilla Menu has been set<br><br>.")
				fmt.Fprintf(w, "%v", buf.String())
						
			case "EDIT_TABZILLA_SOURCE":
			//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_TABZILLA_SOURCE&MEDIA_ID=787
				//get config id
				docID := 0
				cfgName := "SYSTEM_Pulldown_Tabzilla_Media_ID"
				_, docID = getTDSCNFG(w,r,1,cfgName)
				if docID > 0 {
					redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_TABZILLA_SOURCE", docID, docID)
					http.Redirect(w, r, redURL, http.StatusFound)
				} else {
					redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
					http.Redirect(w, r, redURL, http.StatusFound)
				}
				return
			
			case "EDIT_TOP_LIST_MENU":
			//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_TOP_LIST_MENU_SOURCE&MEDIA_ID=787
				//allow admin only
				//get config id
				docID := 0
				cfgName := "SYSTEM_Top_List_Menu_Media_ID"
				_, docID = getTDSCNFG(w,r,1,cfgName)
				if docID > 0 {
					redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_TOP_LIST_MENU", docID, docID)
					http.Redirect(w, r, redURL, http.StatusFound)
				} else {
					redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
					http.Redirect(w, r, redURL, http.StatusFound)
				}
				return
			
			case "EDIT_SEARCH_HOST_LIST":
			//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_HOST_LIST&MEDIA_ID=787
				  var g TDSCNFG
				  thisKey := fmt.Sprintf("SYSTEM_SEARCH_SETTINGS")
                  key := datastore.NameKey("TDSCNFG", thisKey, nil)
                  //D0086
                  datastoreClient := createClientDS()
                  //log.Printf("datastoreClient.Get()  [8855]")
				  if err := datastoreClient.Get(c, key, &g); err != nil {
					msgDtl := fmt.Sprintf("[U00178a] ERROR: SYSTEM_SEARCH_SETTINGS does not exist yet. Go to Admin Setup to Set Search Settings.")
					msgTyp := "error"
					msgURL := "/search"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to ULAPPH Search.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				  }

				  if g.NUM_VAL > 0 {
						
					//get config id
					docID := 0
					cfgName := "SYSTEM_SEARCH_SETTINGS"
					_, docID = getTDSCNFG(w,r,1,cfgName)
					if docID > 0 {
						redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_SEARCH_HOST_LIST", docID, docID)
						http.Redirect(w, r, redURL, http.StatusFound)
					} else {
						redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
						http.Redirect(w, r, redURL, http.StatusFound)
					}
				} else {
					fmt.Fprintf(w, "This is not applicable because this is not a sites server.<br>")
				}
				return
			
			case "EDIT_USERS_HOST_LIST":
			//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_HOST_LIST2&MEDIA_ID=787
    				datastoreClient := createClientDS()
				  var g TDSCNFG
				  thisKey := fmt.Sprintf("SYSTEM_SEARCH_SETTINGS")
                  key := datastore.NameKey("TDSCNFG", thisKey, nil)
                  //D0086
                  //log.Printf("datastoreClient.Get()  [8891]")
				  if err := datastoreClient.Get(c, key, &g); err != nil {
					msgDtl := fmt.Sprintf("[U00178b] ERROR: SYSTEM_SEARCH_SETTINGS does not exist yet. Go to Admin Setup to Set Search Settings.")
					msgTyp := "error"
					msgURL := "/search"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to ULAPPH Search.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				  }

				  if g.NUM_VAL > 0 {
					//get config id
					docID := 0
					cfgName := "SYSTEM_USER_TO_HOST_SETTINGS"
					_, docID = getTDSCNFG(w,r,1,cfgName)
					if docID > 0 {
						redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_USERS_HOST_LIST", docID, docID)
						http.Redirect(w, r, redURL, http.StatusFound)
					} else {
						redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
						http.Redirect(w, r, redURL, http.StatusFound)
					}
				} else {
					fmt.Fprintf(w, "This is not applicable because this is not a sites server.<br>")
				}
				return
			
			case "EDIT_ADS_SLOTS_LIST":
			//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_ADS_TS&MEDIA_ID=787
				//get config id
				docID := 0
				cfgName := "SYSTEM_ADS_TIMESLOTS"
				_, docID = getTDSCNFG(w,r,1,cfgName)
				if docID > 0 {
					redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_ADS_SLOTS_LIST", docID, docID)
					http.Redirect(w, r, redURL, http.StatusFound)
				} else {
					redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
					http.Redirect(w, r, redURL, http.StatusFound)
				}
				return
			
			case "EDIT_LEFT_MENU_SOURCE":
			//SPC_OPT to 7?ADMIN_FUNC=SET_LEFT_MENU_SOURCE&MEDIA_ID=787
				//get config id
				docID := 0
				cfgName := "SYSTEM_Left_Menu_Media_ID"
				_, docID = getTDSCNFG(w,r,1,cfgName)
				if docID > 0 {
					redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_LEFT_MENU_SOURCE", docID, docID)
					http.Redirect(w, r, redURL, http.StatusFound)
				} else {
					redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
					http.Redirect(w, r, redURL, http.StatusFound)
				}
				return
			
			case "EDIT_CATEGORY_LIST":
			//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_CATEGORY_LIST&MEDIA_ID=787
				//get config id
				docID := 0
				cfgName := "SYSTEM_Category_List_Media_ID"
				_, docID = getTDSCNFG(w,r,1,cfgName)
				if docID > 0 {
					redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_CATEGORY_LIST", docID, docID)
					http.Redirect(w, r, redURL, http.StatusFound)	
				} else {
					redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
					http.Redirect(w, r, redURL, http.StatusFound)	
				}
				return
		
			case "SEND_MSG_ALL":
				
				if err := htmlHeaderGB.Execute(w, ""); err != nil {
				  panic(err)
				}
				if err := guestbookSendMessageToAll.Execute(w, ""); err != nil {
						 panic(err)
				}
				if err := outputFooterTemplate.Execute(w, "test"); err != nil {
					 panic(err)
				}
 
			case "TDSUSERS-MANAGE":
				
    				datastoreClient := createClientDS()
				RINGTONE_URL := getRingtone(w, r, uid)
				TEMPDATA := TEMPSTRUCT{
					STR_FILLER1: uid,
					STR_FILLER2: RINGTONE_URL,
					STR_FILLER3: "Admin Users",
				}
				
				if err := genericTableDispHdr.Execute(w, &TEMPDATA); err != nil {
					 panic(err)
				}
				
				fmt.Fprintf(w, "<a href=\"/admin-setup?ADMIN_FUNC=TDSUSERS-ACCOUNT-REGISTER#new-user\"><img src=\"/static/img/new-user.png\" title=\"Add new user\" width=40 height=40/></img> Add New User</a></hr>")
				
				//display users
				if err := peopleSettingsTemplateHeader2PEOPLEAdmin.Execute(w, uid); err != nil {
					 panic(err)
				}

				q := datastore.NewQuery("TDSUSERS").Order("USER_ACC_OPT")
				//log.Panicf("[S0040]")
				recCount,_ := datastoreClient.Count(c,q)
                users := make([]TDSUSERS, 0, recCount)
                //log.Printf("datastoreClient.Get()  [9000]")
				if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
					 panic(err)
					//return
				 }
				
				pendCtr := 0
				for _, p := range users {
				
					if strings.TrimSpace(p.USER) != "" {
						q := datastore.NewQuery("TDSPROF").Filter("UID =", p.USER).Limit(1)
						//log.Panicf("[S0041]")
                        profile := make([]TDSPROF, 0, 1)
                        //log.Printf("datastoreClient.Get()  [9013]")
						if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
							 panic(err)
							//return
						}
						FL_PROFILE_FOUND := false
						for _, _ = range profile{
							FL_PROFILE_FOUND = true
							//switch p.USER_ACC_OPT {
							switch {
							case p.USER_ACC_OPT == "Blocked":
								if err := peopleSettingsTemplateTablePeopleOfflineAdmin.Execute(w, profile); err != nil {
									 panic(err)
								}
							case p.USER_ACC_OPT == "Pending":
								FL_PROFILE_FOUND = false
							case p.GROUP_ID == "GRP_ADMIN":
								if err := peopleSettingsTemplateTablePeopleAdmin.Execute(w, profile); err != nil {
									 panic(err)
								}							
							default:
								if err := peopleSettingsTemplateTablePeopleNonAdmin.Execute(w, profile); err != nil {
									 panic(err)
								}
							}
						}
						if FL_PROFILE_FOUND != true {
							switch p.USER_ACC_OPT {
							case "Pending":
								pendCtr++
								if err := peopleSettingsTemplateTablePeopleAdminPending.Execute(w, p.USER); err != nil {
									 panic(err)
								}
							default:
								if err := peopleSettingsTemplateTablePeopleAdminNoProf.Execute(w, p.USER); err != nil {
									 panic(err)
								}
								
							}
						}
					}
				}
				if pendCtr > 0 {
				fmt.Fprintf(w, "<h3><font color=red>Pending Approvals: <b>%d</b></font></h3>", pendCtr)
				}

				if err := peopleSettingsTemplateTableFooter.Execute(w, ""); err != nil {					
					 panic(err)
				}
 
				
			case "TDSUSERS-APPROVE":
								
    				datastoreClient := createClientDS()
				USER := fmt.Sprintf("%v",r.FormValue("USER"))
				if strings.TrimSpace(USER) == "" {
					return
				}
				
				if isExceptionAccount[USER] == true {
					msgDtl := "[U00010]ERROR: USER CAN ONLY BE MAINTAINED MANUALLY."
					msgTyp := "error"
					msgURL := "/?q=home&ERROR=manualOnly"
					action := fmt.Sprintf("Sorry for this access issue! Please contact administrator. <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				}	
				q := datastore.NewQuery("TDSUSERS").Filter("USER =", USER).Limit(1)
				//log.Panicf("[S0042]")
                users := make([]TDSUSERS, 0, 1)
                //log.Printf("datastoreClient.Get()  [9079]")
				if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
					 panic(err)
					//return
				}
				
				for _, p := range users{
					p.USER_ACC_OPT = "Normal"
					key := datastore.NameKey("TDSUSERS", USER, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
						//return
                    }
                    //log.Printf("datastoreClient.Put()  [9092]")
					//log.Panicf("[S0043]")
					//update user cache
					usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER)
					var buffer3 bytes.Buffer
					buffer3.WriteString(fmt.Sprintf("%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER,	p.USER,	p.COMPANY_ID,	p.CLOUD_NAME,	p.GROUP_ID,	p.LOGGED_IN,	p.LAST_LOGIN,	p.USER_ACC_OPT,	p.FL_QUOTA,	p.FL_BILLED,	p.FL_WORK,	p.FL_WF_ID, p.USER_ACC_TYP))
					TDSUSER_CACHE := buffer3.String()
					putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,TDSUSER_CACHE)
 
					//break
					putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE","")
					
					putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE-TILES","")
					
					putStrToMemcacheWithoutExp(w,r,"LAST_LOGIN_TIMESTAMP","")
 
					//send message to user
                    contentMsg := fmt.Sprintf("[ULAPPH] Hi %v! Welcome to %v! Your registration has been approved.", USER, getSchemeUrl(w,r))
                    time.AfterFunc(5*time.Second, func() {
					    laterNotifyGB(c, "autoNotifyPeopleGB", USER, contentMsg, ADMMAIL)
                    })
					//broadcast
					msgDtl3 := fmt.Sprintf("UID:%v has been approved as new user at %v >>> <br><img src=\"%v\" width=70 height=70></img>",  USER, SYS_SERVER_NAME, getProfilePic(w, r, USER))
					sysReqb := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, USER, getGeoString(w,r))
					_ = fetchURL(w,r,sysReqb)
 
					msgDtl := "[U00011] SUCCESS: USER HAS BEEN APPROVED!"
					msgTyp := "success"
					msgURL := "/"
					action := fmt.Sprintf("Great! You may now close this tab.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return						
			
				}
 
			case "TDSUSERS-BLOCK":
 
    				datastoreClient := createClientDS()
				USER := fmt.Sprintf("%v",r.FormValue("USER"))
				if strings.TrimSpace(USER) == "" {
					return
				}
				
				if isExceptionAccount[USER] == true {
					msgDtl := "[U00012] ERROR: USER CAN ONLY BE MAINTAINED MANUALLY."
					msgTyp := "error"
					msgURL := "/"
					action := fmt.Sprintf("Apologies for this access issue! Please contact administrator.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				}	
				
				q := datastore.NewQuery("TDSUSERS").Filter("USER =", USER).Limit(1)
				//log.Panicf("[S0044]")
                users := make([]TDSUSERS, 0, 1)
                //log.Printf("datastoreClient.Get()  [9148]")
				if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
					 panic(err)
					//return
				 }
				for _, p := range users{
					p.USER_ACC_OPT = "Blocked"
					key := datastore.NameKey("TDSUSERS", USER, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
						//return
                    }
                    //log.Printf("datastoreClient.Put()  [9160]")
					//log.Panicf("[S0045]")
					//update user cache
					usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER)
					var buffer3 bytes.Buffer
					buffer3.WriteString(fmt.Sprintf("%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER,	p.USER,	p.COMPANY_ID,	p.CLOUD_NAME,	p.GROUP_ID,	p.LOGGED_IN,	p.LAST_LOGIN,	p.USER_ACC_OPT,	p.FL_QUOTA,	p.FL_BILLED,	p.FL_WORK,	p.FL_WF_ID, p.USER_ACC_TYP))
					TDSUSER_CACHE := buffer3.String()
					putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,TDSUSER_CACHE)
 
					msgDtl := "[U00013]SUCCESS: USER HAS BEEN BLOCKED!"
					msgTyp := "success"
					msgURL := "/"
					action := fmt.Sprintf("Great! You may now close this tab.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					//break
				}	
 
			case "TDSUSERS-UNBLOCK":
								
    				datastoreClient := createClientDS()
				USER := fmt.Sprintf("%v",r.FormValue("USER"))
				if strings.TrimSpace(USER) == "" {
					return
				}
				
				if isExceptionAccount[USER] == true {
					msgDtl := "[U00014]ERROR: USER CAN ONLY BE MAINTAINED MANUALLY."
					msgTyp := "error"
					msgURL := "/"
					action := fmt.Sprintf("Apologies for this access issue! Please contact administrator.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				}	
				
				q := datastore.NewQuery("TDSUSERS").Filter("USER =", USER).Limit(1)
				//log.Panicf("[S0046]")
                users := make([]TDSUSERS, 0, 1)
                //log.Printf("datastoreClient.Get()  [9199]")
				if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
					 panic(err)
					//return
				 }
				for _, p := range users{
					p.USER_ACC_OPT = "Normal"
					key := datastore.NameKey("TDSUSERS", USER, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
						//return
                    }
                    //log.Printf("datastoreClient.Put()  [9211]")
					//log.Panicf("[S0047]")
					//update user cache
					usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER)
					var buffer3 bytes.Buffer
					buffer3.WriteString(fmt.Sprintf("%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER,	p.USER,	p.COMPANY_ID,	p.CLOUD_NAME,	p.GROUP_ID,	p.LOGGED_IN,	p.LAST_LOGIN,	p.USER_ACC_OPT,	p.FL_QUOTA,	p.FL_BILLED,	p.FL_WORK,	p.FL_WF_ID, p.USER_ACC_TYP))
					TDSUSER_CACHE := buffer3.String()
					putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,TDSUSER_CACHE)
 
					msgDtl := "[U00015]SUCCESS: USER HAS BEEN UN-BLOCKED!"
					msgTyp := "success"
					msgURL := "/"
					action := fmt.Sprintf("Great! You may now close this tab.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					//break
				}
				
			case "TDSUSERS-DELETE":
			
    				datastoreClient := createClientDS()
				USER := fmt.Sprintf("%v",r.FormValue("USER"))
				if strings.TrimSpace(USER) == "" {
					return
				}
 
				if isExceptionAccount[USER] == true {
					msgDtl := "[U00016]ERROR: USER CAN ONLY BE MAINTAINED MANUALLY."
					msgTyp := "error"
					msgURL := "/"
					action := fmt.Sprintf("Apologies for this access issue! Please contact administrator.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				}	
				
				key := datastore.NameKey("TDSUSERS", USER, nil)
				datastoreClient.Delete(c, key)	

				key = datastore.NameKey("TDSPROF", USER, nil)
				datastoreClient.Delete(c, key)
 
				usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER)
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"")
				
				putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE","")
				
				putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE-TILES","")
				
				putStrToMemcacheWithoutExp(w,r,"LAST_LOGIN_TIMESTAMP","")
					
				msgDtl := "[U00017]SUCCESS: USER ACCOUNT HAS BEEN DELETED! PLEASE REGISTER AGAIN."
				msgTyp := "success"
				msgURL := "/"
				action := fmt.Sprintf("Great! You may now close this tab.")
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			case "TDSUSERS-ACCOUNT":
    				datastoreClient := createClientDS()
				USER := fmt.Sprintf("%v",r.FormValue("USER"))
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				 panic(err)
				}
				q := datastore.NewQuery("TDSUSERS").Filter("USER =", USER).Limit(1)
				//log.Panicf("[S0048]")
                users := make([]TDSUSERS, 0, 1)
                //log.Printf("datastoreClient.Get()  [9277]")
				if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
					panic(err)
					//return
				 }
				for _, p := range users{
					TEMPDATA := TEMPSTRUCT2{
						STR_FILLER1: p.USER,
						STR_FILLER2: p.USER_ACC_TYP,
						STR_FILLER3: p.GROUP_ID,
						//D0084
						STR_FILLER4: p.FL_WORK,
						STR_FILLER5: p.FL_WF_ID,
					}
					if err := accountEditTemplate.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
					break
				}
				if err := htmlFooterModal.Execute(w, ""); err != nil {
				  panic(err)
				}
				return
			case "TDSUSERS-ACCOUNT-REGISTER":
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				 panic(err)
				}
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: "sample@gmail.com",
					STR_FILLER2: "Free",
					STR_FILLER3: "GRP_USER",
					STR_FILLER4: "PH",
					STR_FILLER5: uid,
				}
				if err := accountAddTemplate.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
 
				if err := htmlFooterModal.Execute(w, ""); err != nil {
				  panic(err)
				}
				return
										
			case "SET_SEARCH_CNFG":
				//cache host list here
    				datastoreClient := createClientDS()
				MEDIA_ID := 0
				sHost := ""
				isServer := "N"
				mediaIDStr := ""
				
				key := datastore.NameKey("TDSCNFG", "SYSTEM_SEARCH_SETTINGS", nil)
				
				//get current clicks and sum up
				q := datastore.NewQuery("TDSCNFG").Filter("__key__ =", key)
				//log.Panicf("[S0049]")
                config := make([]TDSCNFG, 0, 1)
                //log.Printf("datastoreClient.Get()  [9333]")
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					//panic(err)
					fmt.Fprintf(w, "SYSTEM_SEARCH_SETTINGS does not exist. Please create it first via Admin Setup.<br>.")
					return
				}
				for _, x := range config {
					MEDIA_ID = x.NUM_VAL
					sHost = x.TXT_VAL
					
					if MEDIA_ID > 0 {
						isServer = "Y"
						mediaIDStr = fmt.Sprintf("%v", MEDIA_ID)
					} else {
						mediaIDStr = "N/A"
					}
					break
				}

				TEMPDATA := TEMPSTRUCT{
					STR_FILLER1: isServer,
					STR_FILLER2: sHost,
					STR_FILLER3: mediaIDStr,
				}
				if err := rootTemplateSetSearchServer.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
 
			case "SET_TEMPLATES":
				//cache host list here
				smedia1 := 0
				smedia4 := 0
				amedia := 0
				tlist := ""
				cfgName := "CUSTOM_HOMEPAGE_THEME"
				_, smedia1 = getTDSCNFG(w,r,1,cfgName)
				cfgName = "SYSTEM_SLIDES_SETTINGS"
				_, smedia4 = getTDSCNFG(w,r,1,cfgName)
				cfgName = "SYSTEM_ARTICLES_SETTINGS"
				_, amedia = getTDSCNFG(w,r,1,cfgName)
				cfgName = "SYSTEM_AVAIL_THEMES"
				tlist, _ = getTDSCNFG(w,r,0,cfgName)
 
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: fmt.Sprintf("%v",smedia1),
					STR_FILLER4: fmt.Sprintf("%v",smedia4),
					STR_FILLER5: fmt.Sprintf("%v",amedia),
					STR_FILLER6: tlist,
				}
				if err := rootTemplateSetTemplates.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
			
			case "SET_SEARCH_CNFG_SAVE":
				setServerQ := r.FormValue("setServerQ")
				searchServerName := r.FormValue("searchServerName")
				searchHostList := ""
				mediaID := 0
    				datastoreClient := createClientDS()
				
				searchServerName = strings.TrimSpace(searchServerName)
				
				if setServerQ == "" {
					fmt.Fprintf(w, "<h3>ERROR: Populate server flag.</h3>")	
					return
				}
				
				if setServerQ == "Y" {
				//set as search server
					searchHostList = r.FormValue("searchHostList")
					mediaID = str2int(searchHostList)
				} else {
				//not a search server
					if searchServerName == "" {
						fmt.Fprintf(w, "<h3>ERROR: Populate search server hostname.</h3>")	
						return
					}
 					cKey := fmt.Sprintf("SEARCH_SERVER")
					putStrToMemcacheWithoutExp(w,r,cKey,searchServerName)
				}
				
				g := TDSCNFG{
						SYS_VER: 1,
						USER: uid,
						CFG_ID: "SYSTEM_SEARCH_SETTINGS",
						DAT_TYP: "TXT",
						NUM_VAL: mediaID,
						TXT_VAL: searchServerName,
						CFG_DESC: "Set via Admin Setup",
				}
				thisKey := fmt.Sprintf("SYSTEM_SEARCH_SETTINGS")
				key := datastore.NameKey("TDSCNFG", thisKey, nil)
                _, err := datastoreClient.Put(c, key, &g)
                //log.Printf("datastoreClient.Put()  [9425]")
				//log.Panicf("[S0050]")
				if err != nil {
					panic(err)
					//return
				}
				fmt.Fprintf(w, "<h3>SUCCESS: SEARCH HAS BEEN SET. SERVER: %v MEDIA_ID: %v</h3>", searchServerName, mediaID)

			case "SET_TEMPLATES_SAVE":
    				datastoreClient := createClientDS()
				htemp := r.FormValue("HomeTemplate")
				stemp := r.FormValue("SlidesTemplate")
				atemp := r.FormValue("ArticlesTemplate")
				tlist := r.FormValue("ThemesList")
				clear := r.FormValue("clear")
				if clear == "yes" {
					memcacheDelete(w,r, "CUSTOM_HOMEPAGE_THEME")
					memcacheDelete(w,r, "SYSTEM_SLIDES_TEMPLATE")
					memcacheDelete(w,r, "SYSTEM_ARTICLES_TEMPLATE")
					memcacheDelete(w,r, "SYSTEM_AVAIL_THEMES")
					memcacheDelete(w,r, "SYSTEM_AVAIL_THEMES_CACHE")
					memcacheDelete(w,r, "SYSTEM_HOMEPAGE_SETTINGS")
					fmt.Fprintf(w, "<h3>SUCCESS: TEMPLATES CACHE CLEARED!</h3>")
					return
				}
				if htemp != "" && htemp != "0" {
					MEDIA_ID := str2int(htemp)
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: "CUSTOM_HOMEPAGE_THEME",
							DAT_TYP: "NUM",
							NUM_VAL: MEDIA_ID,
							TXT_VAL: "",
							CFG_DESC: "Set via Admin Setup",
					}
					thisKey := fmt.Sprintf("CUSTOM_HOMEPAGE_THEME")
					key := datastore.NameKey("TDSCNFG", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &g)
                    //log.Printf("datastoreClient.Put()  [9463]")
					//log.Panicf("[S0050]")
					if err != nil {
						panic(err)
						//return
					}
					putStrToMemcacheWithoutExp(w,r,thisKey,htemp)
					fmt.Fprintf(w, "<h3>CUSTOM HOMEPAGE THEME HAS BEEN SET TO %v</h3>", MEDIA_ID)
				}
				if stemp != ""  && stemp != "0"{
					MEDIA_ID := str2int(stemp)
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: "SYSTEM_SLIDES_SETTINGS",
							DAT_TYP: "NUM",
							NUM_VAL: MEDIA_ID,
							TXT_VAL: "",
							CFG_DESC: "Set via Admin Setup",
					}
					thisKey := fmt.Sprintf("SYSTEM_SLIDES_SETTINGS")
					key := datastore.NameKey("TDSCNFG", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &g)
                    //log.Printf("datastoreClient.Put()  [9486]")
					//log.Panicf("[S0050]")
					if err != nil {
						panic(err)
						//return
					}
					putStrToMemcacheWithoutExp(w,r,thisKey,stemp)
					fmt.Fprintf(w, "<h3>SLIDE TEMPLATE HAS BEEN SET TO %v</h3>", MEDIA_ID)
				}
				if atemp != ""  && atemp != "0"{
					MEDIA_ID := str2int(atemp)
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: "SYSTEM_ARTICLES_SETTINGS",
							DAT_TYP: "NUM",
							NUM_VAL: MEDIA_ID,
							TXT_VAL: "",
							CFG_DESC: "Set via Admin Setup",
					}
					thisKey := fmt.Sprintf("SYSTEM_ARTICLES_SETTINGS")
					key := datastore.NameKey("TDSCNFG", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &g)
                    //log.Printf("datastoreClient.Put()  [9509]")
					//log.Panicf("[S0050]")
					if err != nil {
						panic(err)
						//return
					}
					putStrToMemcacheWithoutExp(w,r,thisKey,atemp)
					fmt.Fprintf(w, "<h3>ARTICLE TEMPLATE HAS BEEN SET TO %v</h3>", MEDIA_ID)
				}
				if tlist != "" {
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: "SYSTEM_AVAIL_THEMES",
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: tlist,
							CFG_DESC: "Set via Admin Setup",
					}
					thisKey := fmt.Sprintf("SYSTEM_AVAIL_THEMES")
					key := datastore.NameKey("TDSCNFG", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &g)
                    //log.Printf("datastoreClient.Put()  [9531]")
					//log.Panicf("[S0050]")
					if err != nil {
						panic(err)
						//return
					}
					putStrToMemcacheWithoutExp(w,r,thisKey,tlist)
					fmt.Fprintf(w, "<h3>AVAILABLE THEMES HAS BEEN SET TO %v</h3>", tlist)
				}
                return
			case "TDSUSERS-ACCOUNT-UPDATE":
    				datastoreClient := createClientDS()
				USER := fmt.Sprintf("%v",r.FormValue("USER"))
				ACC_TYP := r.FormValue("ACCOUNT_TYPE")
				USER_GROUP := r.FormValue("USER_GROUP")
				//D0084
				FL_WORK := r.FormValue("WORKFORCE")
				FL_WF_ID := r.FormValue("WORKFORCE_ID")
				if strings.TrimSpace(USER) == "" {
					return
				}
				if isExceptionAccount[USER] == true {
					msgDtl := "[U00014]ERROR: USER CAN ONLY BE MAINTAINED MANUALLY."
					msgTyp := "error"
					msgURL := "/"
					action := fmt.Sprintf("Apologies for this access issue! Please contact administrator.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				}
				q := datastore.NewQuery("TDSUSERS").Filter("USER =", USER).Limit(1)
				//log.Panicf("[S0051]")
                users := make([]TDSUSERS, 0, 1)
                //log.Printf("datastoreClient.Get()  [9563]")
				if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
					 panic(err)
					//return
				 }
				for _, p := range users{
					p.USER_ACC_TYP = ACC_TYP
					p.GROUP_ID = USER_GROUP
					//D0084
					p.FL_WORK = FL_WORK
					p.FL_WF_ID = FL_WF_ID
					key := datastore.NameKey("TDSUSERS", USER, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
						//return
                    }
                    //log.Printf("datastoreClient.Put()  [9579]")
 
					//update user cache
					usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER)
					var buffer3 bytes.Buffer
					buffer3.WriteString(fmt.Sprintf("%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER,	p.USER,	p.COMPANY_ID,	p.CLOUD_NAME,	p.GROUP_ID,	p.LOGGED_IN,	p.LAST_LOGIN,	p.USER_ACC_OPT,	p.FL_QUOTA,	p.FL_BILLED,	p.FL_WORK,	p.FL_WF_ID, p.USER_ACC_TYP))
					TDSUSER_CACHE := buffer3.String()
					putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,TDSUSER_CACHE)
					
					//clear memcache
					cKey := "ULAPPH-PEOPLE-QUICK-VIEW"
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//D0084
					//clear users cache
                    memcacheDelete(w,r, "TDSUSERS_CACHE")
					fmt.Fprintf(w, "<h3>SUCCESS: USER ACCOUNT HAS BEEN UPDATED!</h3>")
				}
				
			case "TDSUSERS-ACCOUNT-ADD":
				
    				datastoreClient := createClientDS()
				ADMIN_USER := r.FormValue("ADMIN_USER")
				regType := r.FormValue("regType")
				country := r.FormValue("country")
				USER := r.FormValue("USER")
				ACCOUNT_TYPE := r.FormValue("ACCOUNT_TYPE")
				USER_GROUP := r.FormValue("USER_GROUP")
				
				if uid != ADMIN_USER {
					fmt.Fprintf(w, "<h3>ERROR: ADMIN USER ACCOUNT ERROR</h3>")
					return
				}
				
				uid = USER
				
				if strings.TrimSpace(USER) == "" {
					return
				}
				
				switch regType {
				
					case "manual":
 
						//insert into TDSUSERS
						//---------------
								
							tstmp := time.Now().Local()
							
							p := TDSUSERS{
								SYS_VER: 1,	
								USER: uid,	
								COMPANY_ID: COMPANY_ID,	
								CLOUD_NAME: CLOUD_NAME,	
								GROUP_ID: USER_GROUP, 	
								LOGGED_IN: 1,	
								LAST_LOGIN: fmt.Sprintf(tstmp.Format("20060102150405")),
								LAST_ACTIVE: fmt.Sprintf(tstmp.Format("20060102150405")),
								ACTIVE_DTLS: "",
								USER_ACC_OPT: "",	
								FL_QUOTA: "Y",	
								FL_BILLED: "N",	
								FL_WORK: "N",	
								FL_WF_ID: "0",
								USER_ACC_TYP: ACCOUNT_TYPE,
							}
							
							if SYS_AUTO_REG_ENABLE == true {
								p.USER_ACC_OPT = "Normal"
							} else {
								p.USER_ACC_OPT = "Pending"
							}
							
							thisKey := fmt.Sprintf("%s", uid)
							key := datastore.NameKey("TDSUSERS", thisKey, nil)
                            _, err := datastoreClient.Put(c, key, &p)
                            //log.Printf("datastoreClient.Put()  [9653]")
							//log.Panicf("[S0053]")
							if err != nil {
								 panic(err)
								//return
							}
 
							UID := uid
							REGION := ""
							CITY := ""
							MUNICIPALITY := ""
							BARANGAY := ""
							SUBDIVISION := ""
							BIRTH_DAY := ""
							ELEM_SCHOOL := ""
							HIGH_SCHOOL := ""
							COLLEGE := ""
							POST_GRAD := ""
							PROFESSION := ""
							COMPANY := ""
							CONTACT_NUM := ""
							SOCIAL_1 := ""
							SOCIAL_2 := ""
							SOCIAL_3 := ""
							REG_VOTER := ""
							ID_NUMBER := ""
							I_HAVE_TEXT := ""
							I_NEED_TEXT := ""
							BADGE	:= ""
 
							FILLER_1 := ""
							FILLER_2 := ""	
							FILLER_3 := ""
							RINGTONE := ""
								
							f := TDSPROF {
								SYS_VER: 1,	
								UID: UID,
								PICTURE: "/static/img/no-profile.png",
								BIRTH_DAY: BIRTH_DAY,	
								ELEM_SCHOOL: ELEM_SCHOOL,
								HIGH_SCHOOL: HIGH_SCHOOL,
								COLLEGE: COLLEGE,
								POST_GRAD: POST_GRAD,
								PROFESSION: PROFESSION,
								COMPANY: COMPANY,
								CONTACT_NUM: CONTACT_NUM,
								SOCIAL_1: SOCIAL_1,	
								SOCIAL_2: SOCIAL_2,	
								SOCIAL_3: SOCIAL_3,
								COUNTRY: country,
								REGION: REGION,
								CITY: CITY,
								MUNICIPALITY: MUNICIPALITY,	
								BARANGAY: BARANGAY,
								SUBDIVISION: SUBDIVISION,
								REG_VOTER: REG_VOTER,
								ID_NUMBER: ID_NUMBER,
								I_HAVE_TEXT: I_HAVE_TEXT,
								I_NEED_TEXT: I_NEED_TEXT,
								BADGE: BADGE,
								CRED_PTS: 20 ,
								POS_VOTES: 0,
								NEG_VOTES: 0,
								LIFE_RATING: 100,
								FILLER_1: FILLER_1,
								FILLER_2: FILLER_2,
								FILLER_3: FILLER_3,
								RINGTONE: RINGTONE,
							}
 
							dsKey := fmt.Sprintf("%s", UID)
							key2 := datastore.NameKey("TDSPROF", dsKey, nil)
 
							if _, err := datastoreClient.Put(c, key2, &f); err != nil {
								 panic(err)
								//return
                            }
                            //log.Printf("datastoreClient.Put()  [9731]")
						
						//insert intial desktop0_css config records
						//-------------------
							q := datastore.NewQuery("TDSCNFG").Filter("CFG_ID= ", "desktop0_css").Limit(1)
							//log.Panicf("[S0055]")
                            config := make([]TDSCNFG, 0, 1)
                            //log.Printf("datastoreClient.Get()  [9738]")
							if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
								 panic(err)
								//return
							}
							
							for _, p := range config{
							
								p.USER = uid
								p.TXT_VAL = "/static/css/style.css"
								
								thisKey := fmt.Sprintf("%s-desktop0_css", uid)
								key := datastore.NameKey("TDSCNFG", thisKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [9752]")
								//log.Panicf("[S0056]")
								if err != nil {
									 panic(err)
									//return
								}
								break
							}
 
						//insert intial desktop0_icons config records
						//----------------------
							q = datastore.NewQuery("TDSCNFG").Filter("CFG_ID= ", "desktop0_icons").Limit(1)
							//log.Panicf("[S0057]")
                            config = make([]TDSCNFG, 0, 1)
                            //log.Printf("datastoreClient.Get()  [9766]")
							if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
								 panic(err)
								//return
							}
							
							for _, p := range config{
							
								p.USER = uid
								p.TXT_VAL = DEFAULT_DESKTOP_ICONS
								p.NUM_VAL = 0
								p.CFG_DESC = "Please edit this description"
								thisKey := fmt.Sprintf("%s-desktop0_icons", uid)
								key := datastore.NameKey("TDSCNFG", thisKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [9781]")
								//log.Panicf("[S0058]")
								if err != nil {
									 panic(err)
									//return
								}
								break
							}
							
						putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE","")
						
						putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE-TILES","")
						
						putStrToMemcacheWithoutExp(w,r,"LAST_LOGIN_TIMESTAMP","")
                        
						//update TDSSTATS
						//log task to update MOST_RECENT* stats
							
						msgDtl3 := ""
						if SYS_AUTO_REG_ENABLE == true {
							//send message to admin
							geoStr := getGeoString(w,r)
                            contentMsg := fmt.Sprintf("[ULAPPH] Registered new user. USER: %v >>> %v from %v", uid, getSchemeUrl(w,r), geoStr)
                            time.AfterFunc(5*time.Second, func() {
							    laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, contentMsg, uid)
                            })
							//notify all users of this event via channels
							msgDtl3 = fmt.Sprintf("UID:%v has registered as new ULAPPH user %v", uid, getAccessString(w,r,""))
							
							//broadcast
							msgDtl3b := fmt.Sprintf("UID:%v has registered as new user at %v >>> <br><img src=\"%v\" width=70 height=70></img>",  uid, SYS_SERVER_NAME, getProfilePic(w, r, uid))
							sysReqb := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3b, uid, getGeoString(w,r))
							_ = fetchURL(w,r,sysReqb)
							
						} else {
							//send message to admin
							approverLink := fmt.Sprintf("https://www.ulapph.com/admin-setup?ADMIN_FUNC=TDSUSERS-APPROVE&USER=%v", uid)
							contentMsg := fmt.Sprintf("[ULAPPH] Registered new user pending approval by admin. USER: %v >>> APPROVER LINK: %v", uid, approverLink)
							time.AfterFunc(5*time.Second, func() {
                                laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, contentMsg, uid)	
                            })
                            //notify all users of this event via channels
							
							msgDtl3 = fmt.Sprintf("UID:%v has registered as new ULAPPH user pending approval by admin %v", uid, getAccessString(w,r,""))
							//broadcast
							msgDtl3b := fmt.Sprintf("UID:%v has pending registration as new user at %v >>> <br><img src=\"%v\" width=70 height=70></img>",  uid, SYS_SERVER_NAME, getProfilePic(w, r, uid))
							sysReqb := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3b, uid, getGeoString(w,r))
							_ = fetchURL(w,r,sysReqb)
							
						}
						sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/registration",""),"")

						//send welcome message to user
						contentMsg := fmt.Sprintf("[ULAPPH] Hi %v! Welcome to %v! This is a sample ULAPPH message. You can send/receive messages via messaging feature.", uid, getSchemeUrl(w,r))
						time.AfterFunc(5*time.Second, func() {
                            laterNotifyGB(c, "autoNotifyPeopleGB", uid, contentMsg, ADMMAIL)	
                        })
						//send email to user
						if SYS_AUTO_REG_ENABLE == false {
                            MESSAGE := fmt.Sprintf("[ULAPPH] Hi %v! Welcome to %v! Your registration is pending approval by the admin.", uid, getSchemeUrl(w,r))
                            subject := "Registration pending approval"
                            time.AfterFunc(5*time.Second, func() {
                                laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": uid, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
                            })
						}
								
						//set memflag for new user
						IS_NEW_USER_MEM_FLAG := fmt.Sprintf("IS_NEW_USER_MEM_FLAG_%s", uid)
						putStrToMemcacheWithoutExp(w,r,IS_NEW_USER_MEM_FLAG,"Y")
						
						fmt.Fprintf(w, "<h3>SUCCESS: USER ACCOUNT (%v) HAS BEEN ADDED!</h3>", uid)
						fmt.Fprintf(w, "<a href=\"/admin-setup?ADMIN_FUNC=TDSUSERS-MANAGE\">Manage Users</a>")
						return
					
					}
				
			default:
    				datastoreClient := createClientDS()
				if err := htmlHeaderAdmin.Execute(w, ""); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<a href=\"https://appengine.google.com/\" class=\"button button-3d button-action button-pill\">App Engine<a href=\"/admin-setup\" class=\"button button-3d button-action button-pill\">Admin - Setup</a><a href=\"/admin-icons\" class=\"button button-3d button-action button-pill\">Admin - Icons</a><a href=\"/admin-slides\" class=\"button button-3d button-action button-pill\">Admin - Slides</a><a href=\"/admin-articles\" class=\"button button-3d button-action button-pill\">Admin - Articles</a><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL\" class=\"button button-3d button-action button-pill\">Admin - Media</font></a><a href=\"/admin-ads\" class=\"button button-3d button-action button-pill\">Admin - Ads</a><a href=\"/api-doc/\" class=\"button button-3d button-action button-pill\">Admin - API</a>")
				fmt.Fprintf(w, "<hr>")
				fmt.Fprintf(w, "<a href=\"/admin-setup?ADMIN_FUNC=TDSUSERS-MANAGE\" class=\"button button-glow button-border button-rounded button-primary\">Manage TDSUSERS</a><a href=\"/admin-setup?ADMIN_FUNC=SEND_MSG_ALL\" class=\"button button-glow button-border button-rounded button-primary\">Send Message to Users</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_TABZILLA_SOURCE\" class=\"button button-glow button-border button-rounded button-primary\">Edit Tabzilla Menu</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_LEFT_MENU_SOURCE\" class=\"button button-glow button-border button-rounded button-primary\">Edit Hidable Left Menu</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_CATEGORY_LIST\" class=\"button button-glow button-border button-rounded button-primary\">Edit Categories List</a><a href=\"/admin-setup?ADMIN_FUNC=SET_SEARCH_CNFG\" class=\"button button-glow button-border button-rounded button-primary\">Set Search Settings</a><a href=\"/admin-setup?ADMIN_FUNC=SET_TEMPLATES\" class=\"button button-glow button-border button-rounded button-primary\">Set Templates Settings</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_TOP_LIST_MENU\" class=\"button button-glow button-border button-rounded button-primary\">Edit System Top List Menu</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_PUB_WP_LIST\" class=\"button button-glow button-border button-rounded button-primary\">Edit Public Wallpapers</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_PUB_UWM\" class=\"button button-glow button-border button-rounded button-primary\">Edit Public UWM</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_SEARCH_HOST_LIST\" class=\"button button-glow button-border button-rounded button-primary\">Edit Search Host List</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_USERS_HOST_LIST\" class=\"button button-glow button-border button-rounded button-primary\">Edit Users Host List</a><a href=\"/admin-setup?ADMIN_FUNC=EDIT_ADS_SLOTS_LIST\" class=\"button button-glow button-border button-rounded button-primary\">Edit Ads Slots List</a>")
 
				///fmt.Fprintf(w, "<h1>System Status</h1>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">System Status</a>")
					fmt.Fprintf(w, "<ul>")
					fmt.Fprintf(w, "<li>Build Version: %v", UCD_BUILD_STR)
					SPL := strings.Split(UCD_BUILD_STR,"_")
					TS := ""
					if len(SPL) > 0 {
						TS = strings.Replace(SPL[1], "-", "", -1)
					}
					fmt.Fprintf(w, "<li>Last Upgrade: %v", stmpHumanizeStr(TS))
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">Notifications Logs</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP\">Users Location Map</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/tools?FUNC=WIDGET&t=ECHARTS\">System eCharts</a>")
					fmt.Fprintf(w, "<li>")
				TBL := "channel,Greeting,Social,TDSADS,TDSADTS,TDSADVL,TDSARTL,TDSCATS,TDSCHAT,TDSCNFG,TDSICONS,TDSLOGS,TDSMEDIA,TDSPROF,TDSRULES,TDSSLIDE,TDSSTATS,TDSURLC,TDSUSERS"
				TBLS := strings.Split(TBL, ",")
				//fmt.Fprintf(w, "<h1>Storage Status</h1>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">Storage Status</a>")
					fmt.Fprintf(w, "<ul>")
					for i:=0; i < len(TBLS); i++ {
						q := datastore.NewQuery(TBLS[i])
						//log.Panicf("[S0059]")
						recCount,_ := datastoreClient.Count(c,q)
						fmt.Fprintf(w, "<li>")
						fmt.Fprintf(w, "%v = %v rows", TBLS[i], recCount)
					}
					fmt.Fprintf(w, "</ul>")
				//fmt.Fprintf(w, "<h1>User Agent</h1>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">User Agent</a>")
				//fmt.Fprintf(w, "<hr>")
					fmt.Fprintf(w, "<ul>")
					geoStr := getGeoString(w,r)
					geoAcc := getAccessString(w,r,"")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "GEO: %v", geoStr)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "ACCESS: %v", geoAcc)
					fmt.Fprintf(w, "</ul>")
					
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">Homepage Settings</a>")
					fmt.Fprintf(w, "<ul>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "SYS_DISP_HOMEPAGE_CFG: %v", SYS_DISP_HOMEPAGE_CFG)
					fmt.Fprintf(w, "<li>")
					redURL := ""
					cfgName := "SYSTEM_HOMEPAGE_SETTINGS"
					redURL, _ = getTDSCNFG(w,r,0,cfgName)
					fmt.Fprintf(w, "SYSTEM_HOMEPAGE_SETTINGS: %v", redURL)
					if redURL != "" {
						fmt.Fprintf(w, " [<a href=\"/admin-setup?ADMIN_FUNC=CLEAR_HOMEPAGE\">Clear Homepage Settings</a>]")
					}
					fmt.Fprintf(w, "<li>Customize Homepage Settings<br>")
					fmt.Fprintf(w, "<form action=\"/admin-setup\" method=\"POST\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"ADMIN_FUNC\" value=\"SET_AS_HOMEPAGE\"/>")
					fmt.Fprintf(w, "	<textarea name=\"URL\" rows=2 cols=100>%v</textarea>", redURL)
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"Set As Homepage\"/>")
					fmt.Fprintf(w, "</form>")
					fmt.Fprintf(w, "</ul>")
 
				//fmt.Fprintf(w, "<h1>Account Keys</h1>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">Account Keys</a>")
				//fmt.Fprintf(w, "<hr>")
					fmt.Fprintf(w, "<ul>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "ENCRYPTION_KEY: %v", ENCRYPTION_KEY)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "THINGS_API_KEY: %v", THINGS_API_KEY)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "CMD_API_KEY: %v", CMD_API_KEY)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "CMD_GEN_KEY: %v", CMD_GEN_KEY)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "SYS_UNINSTALL_KEY: %v", SYS_UNINSTALL_KEY)
					fmt.Fprintf(w, "</ul>")
					
				//fmt.Fprintf(w, "<h1>Force Task Crons</h1>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">Force Task Crons</a>")
				//fmt.Fprintf(w, "<hr>")
                    fmt.Fprintf(w, "<ul>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=TASK_UPDATE_INDEX\">/ulapph-router?RTR_FUNC=TASK_UPDATE_INDEX</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=TASK_UPDATE_ACCESS\">/ulapph-router?RTR_FUNC=TASK_UPDATE_ACCESS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=TASK_UPDATE_DESKTOP\">/ulapph-router?RTR_FUNC=TASK_UPDATE_DESKTOP</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=TASK_UPDATE_OSBR\">/ulapph-router?RTR_FUNC=TASK_UPDATE_OSBR</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=TASK_UPDATE_TOP_CLICKS\">/ulapph-router?RTR_FUNC=TASK_UPDATE_TOP_CLICKS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=queue-cache-desktop0-icons\">/ulapph-router?RTR_FUNC=queue-cache-desktop0-icons</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/admin-ads?ADS_FUNC=TASK_ADS_SLOTS\">/admin-ads?ADS_FUNC=TASK_ADS_SLOTS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=TASK_USER_PROC\">/ulapph-router?RTR_FUNC=TASK_USER_PROC</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=TASK_RULE_PROC\">/ulapph-router?RTR_FUNC=TASK_RULE_PROC</a>")
					fmt.Fprintf(w, "<li>")
					
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"#\">/ulapph-router?RTR_FUNC=TASK_CLEAN_UP_INACT_USERS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=TASK_MEMCACHER_ALL_ICONS\">/ulapph-router?RTR_FUNC=TASK_MEMCACHER_ALL_ICONS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_TOP_STATS\">/ulapph-router?RTR_FUNC=CACHE_TOP_STATS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Quotations\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Quotations</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Bible Verses",bibleKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Bible\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Bible</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Jokes",jokeKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Jokes\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Jokes</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Saving Tips",savingKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Saving\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Saving</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Blogs Tips",blogKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Blogs\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Blogs</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Health Tips",healthKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Health\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Health</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Fitness Tips",fitnessKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Fitness\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Fitness</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Interview Tips",interviewKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Interview\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Interview</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Business Tips",businessKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Business\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Business</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Life Tips",lifeKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Life\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Life</a>")
					//TASK_MEMCACHER_motd(w,r,"A","ULAPPH Table Topics",ttopicsKey)
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Table\">/ulapph-router?RTR_FUNC=CACHE_SPREADSHEETS_Table</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_DESKTOP0_WALLPAPERS\">/ulapph-router?RTR_FUNC=CACHE_DESKTOP0_WALLPAPERS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_DESKTOPN_WALLPAPERS\">/ulapph-router?RTR_FUNC=CACHE_DESKTOPN_WALLPAPERS</a>")
					
					//fmt.Fprintf(w, "<li>")
					//fmt.Fprintf(w, "<a href=\"/people?PEOPLE_FUNC=SLIDE-VIEW-CACHE\">/people?PEOPLE_FUNC=SLIDE-VIEW-CACHE</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_TOP_SITES\">/ulapph-router?RTR_FUNC=CACHE_TOP_SITES</a>")	
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_DESKTOP0_ICONS\">/ulapph-router?RTR_FUNC=CACHE_DESKTOP0_ICONS</a>")	
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_DESKTOP_CSS\">/ulapph-router?RTR_FUNC=CACHE_DESKTOP_CSS</a>")	
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=DETECT_QUOTA\">/ulapph-router?RTR_FUNC=DETECT_QUOTA</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_PROF_PICS\">/ulapph-router?RTR_FUNC=CACHE_PROF_PICS</a>")	
					//fmt.Fprintf(w, "<li>")
					//fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_CONTENTS_ALL_SLIDES\">/ulapph-router?RTR_FUNC=CACHE_CONTENTS_ALL_SLIDES</a>")	
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=CACHE_URL_FETCH_01\">/ulapph-router?RTR_FUNC=CACHE_URL_FETCH_01 (PHILVOLCS)</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=URL_FETCH_NOTIFS\">/ulapph-router?RTR_FUNC=URL_FETCH_NOTIFS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=URL_FETCH_IFS_WTB\">/ulapph-router?RTR_FUNC=URL_FETCH_IFS_WTB</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=SESSION_ONLINE\">/ulapph-router?RTR_FUNC=SESSION_ONLINE</a>")	
					fmt.Fprintf(w, "</ul>")
					fmt.Fprintf(w, "<br>")
				//fmt.Fprintf(w, "<h1>Display Tables</h1>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">Display Tables</a>")
				//fmt.Fprintf(w, "<hr>")
					fmt.Fprintf(w, "<ul>")
 					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=DISPLAY&TABLE=TDSUSERS\">display-TDSUSERS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=DISPLAY&TABLE=TDSICONS\">display-TDSICONS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=DISPLAY&TABLE=TDSADS\">display-TDSADS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=DISPLAY&TABLE=TDSADVL\">display-TDSADVL</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=DISPLAY&TABLE=TDSADTS\">display-TDSADTS</a>")
					fmt.Fprintf(w, "<li>")
					fmt.Fprintf(w, "<a href=\"/ulapph-router?RTR_FUNC=DISPLAY&TABLE=TDSPROF\">display-TDSPROF</a>")
					fmt.Fprintf(w, "</ul>")
 
 
				//fmt.Fprintf(w, "<h1>Channel</h1>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">Channel</a>")
				//fmt.Fprintf(w, "<hr>")
					fmt.Fprintf(w, "<ul>")
					fmt.Fprintf(w, "<li>")
					//_, token := createToken(w,r,"","")
					tokChan := make(chan Token)
					tokChanDone := make(chan bool)
					go createTokenChan(w,r,tokChan,tokChanDone,"","")
					tok := <-tokChan
					<-tokChanDone
					//uid := tok.User
					token := tok.Token
					fmt.Fprintf(w, "TOKEN: %v", token)
					fmt.Fprintf(w, "</ul>")
					
				//fmt.Fprintf(w, "<h1>Search Index</h1>")
				fmt.Fprintf(w, "<a href=\"/#\" class=\"button button-block button-rounded button-large\">Search Index</a>")
				//fmt.Fprintf(w, "<hr>")
					fmt.Fprintf(w, "<h3>Print Index and Key</h3>")
					fmt.Fprintf(w, "<form action=\"/ulapph-router\" method=\"GET\" target=\"qv3\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"RTR_FUNC\" value=\"PRT_IDX\"/>")
					fmt.Fprintf(w, "	<input type=\"text\" name=\"idx\" value=\"\" placeholder=\"Index\" />")
					fmt.Fprintf(w, "	<input type=\"text\" name=\"doc\" value=\"\" placeholder=\"Document\" />")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"Print Content\"/>")
					fmt.Fprintf(w, "</form>")
					fmt.Fprintf(w, "<br>")
					fmt.Fprintf(w, "<h3>Flush All Memcache</h3>")
					fmt.Fprintf(w, "<form action=\"/ulapph-router\" method=\"GET\" target=\"qv3\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"RTR_FUNC\" value=\"CLR_MC_ALL\"/>")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"Flush Memcache\"/>")
					fmt.Fprintf(w, "</form>")
					fmt.Fprintf(w, "<br>")
					
				//fmt.Fprintf(w, "<h1>System Tools</h1>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">System Tools</a>")
                //fmt.Fprintf(w, "<hr>")
					fmt.Fprintf(w, "<h3>View a Memcache Key with String Value</h3>")
					fmt.Fprintf(w, "<form action=\"/ulapph-router\" method=\"GET\" target=\"qv5\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"RTR_FUNC\" value=\"VIEW_MC\"/>")
					fmt.Fprintf(w, "	<input type=\"text\" name=\"q\" value=\"\" placeholder=\"Memcache Key\" />")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"View Cache\"/>")
					fmt.Fprintf(w, "</form>")
                    fmt.Fprintf(w, "<br>")
					fmt.Fprintf(w, "<h3>View a Memcache Key with Byte Value</h3>")
					fmt.Fprintf(w, "<form action=\"/ulapph-router\" method=\"GET\" target=\"qv5\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"RTR_FUNC\" value=\"VIEW_MC2\"/>")
					fmt.Fprintf(w, "	<input type=\"text\" name=\"q\" value=\"\" placeholder=\"Memcache Key\" />")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"View Cache\"/>")
					fmt.Fprintf(w, "</form>")
					fmt.Fprintf(w, "<br>")
					fmt.Fprintf(w, "<h3>Delete a Memcache Key</h3>")
					fmt.Fprintf(w, "<form action=\"/ulapph-router\" method=\"GET\" target=\"qv3\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"RTR_FUNC\" value=\"CLR_MC\"/>")
					fmt.Fprintf(w, "	<input type=\"text\" name=\"q\" value=\"\" placeholder=\"Memcache Key\" />")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"Clear Cache\"/>")
					fmt.Fprintf(w, "</form>")
					fmt.Fprintf(w, "<br>")
					fmt.Fprintf(w, "<h3>Flush All Memcache</h3>")
					fmt.Fprintf(w, "<form action=\"/ulapph-router\" method=\"GET\" target=\"qv3\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"RTR_FUNC\" value=\"CLR_MC_ALL\"/>")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"Flush Memcache\"/>")
					fmt.Fprintf(w, "</form>")
					fmt.Fprintf(w, "<br>")
 
					fmt.Fprintf(w, "<h3>Block IP Address (site only)</h3>")
					fmt.Fprintf(w, "<form action=\"admin-setup\" method=\"GET\" target=\"qv4\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"ADMIN_FUNC\" value=\"BLOCK_IP\"/>")
					fmt.Fprintf(w, "	<input type=\"text\" name=\"ip\" value=\"\" placeholder=\"x.x.x.x\" />")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"Block IP\"/>")
					fmt.Fprintf(w, "</form>")
					fmt.Fprintf(w, "<h3>Un-Block IP Address (site only)</h3>")
					fmt.Fprintf(w, "<form action=\"admin-setup\" method=\"GET\" target=\"qv4\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"ADMIN_FUNC\" value=\"UNBLOCK_IP\"/>")
					fmt.Fprintf(w, "	<input type=\"text\" name=\"ip\" value=\"\" placeholder=\"x.x.x.x\" />")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"Un-Block IP\"/>")
					fmt.Fprintf(w, "</form>")
				fmt.Fprintf(w, "<br>")
				fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-large\">Uninstall Cloud Desktop</a>")
					fmt.Fprintf(w, "<h3><font color=red>Warning!!! Once you click Uninstall, it will delete all data forever & can no longer be recovered.</h3></font>")
					fmt.Fprintf(w, "<form action=\"/ulapph-router\" method=\"GET\" target=\"qv3\">")
					fmt.Fprintf(w, "	<input type=\"hidden\" name=\"RTR_FUNC\" value=\"UNINSTALL\"/>")
					fmt.Fprintf(w, "	<input type=\"text\" name=\"q\" value=\"\" placeholder=\"Uninstall Key\" />")
					fmt.Fprintf(w, "	<br><input type=\"submit\" name=\"submit\" value=\"Uninstall\"/>")
					fmt.Fprintf(w, "</form>")
				if err := htmlFooterSearch.Execute(w, ""); err != nil {
				  panic(err)
				}
		}
	} else {
		msgDtl := "[U00018]ERROR: ONLY ADMIN CAN ACCESS THIS FUNCTION."
		msgTyp := "error"
		msgURL := "/?q=home&ERROR=adminAccess"
		action := fmt.Sprintf("Apologies for this access issue! <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
}

//D0063 
func isIndexed(w http.ResponseWriter, r *http.Request, IDX_TARGET string, IDX_KEY string) (FL_INDEX_FOUND bool) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	index, err := search.Open(IDX_TARGET)
	if err != nil {
		 //panic(err)
	}
	var p IDX_TDSSLIDE
	err = index.Get(c, IDX_KEY, &p)
	if err != nil {
		return false
	}
	if p.DOC_TITLE != ""  {
		FL_INDEX_FOUND = true
	} else {
		FL_INDEX_FOUND = false
	}
	return FL_INDEX_FOUND 
}

func printIndex(w http.ResponseWriter, r *http.Request, IDX_TARGET string, IDX_KEY string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()	
	var buffer3 bytes.Buffer
	
	index, err := search.Open(IDX_TARGET)
	if err != nil {
		 //panic(err)
	}
 
	var p IDX_TDSSLIDE
	err = index.Get(c, IDX_KEY, &p)
	if err != nil {
		return
	}
	
	buffer3.WriteString(fmt.Sprintf("DOC_KEY: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_KEY))
	buffer3.WriteString(fmt.Sprintf("SEARCH_TYPE: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.SEARCH_TYPE))
	buffer3.WriteString(fmt.Sprintf("SOURCE_TYPE: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.SOURCE_TYPE))
	buffer3.WriteString(fmt.Sprintf("SOURCE_TBL: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.SOURCE_TBL))
	buffer3.WriteString(fmt.Sprintf("DESKTOP: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DESKTOP))
	buffer3.WriteString(fmt.Sprintf("FL_SHARED: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.FL_SHARED))
	buffer3.WriteString(fmt.Sprintf("DOC_STAT: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_STAT))
	buffer3.WriteString(fmt.Sprintf("DOC_SCOPE_OVERALL: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_SCOPE_OVERALL))
	buffer3.WriteString(fmt.Sprintf("DOC_SCOPE_COUNTRY: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_SCOPE_COUNTRY))
	buffer3.WriteString(fmt.Sprintf("DOC_SCOPE_REGION: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_SCOPE_REGION))
	buffer3.WriteString(fmt.Sprintf("DOC_SCOPE_CITY: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_SCOPE_CITY))
	buffer3.WriteString(fmt.Sprintf("DOC_SCOPE_BARANGAY: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_SCOPE_BARANGAY))
	buffer3.WriteString(fmt.Sprintf("DOC_TITLE: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_TITLE))
	buffer3.WriteString(fmt.Sprintf("DOC_AUTHOR: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_AUTHOR))
	buffer3.WriteString(fmt.Sprintf("DOC_CONTENT_TEXT: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_CONTENT_TEXT))
	buffer3.WriteString(fmt.Sprintf("DOC_CONTENT_HTML: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_CONTENT_HTML))
	buffer3.WriteString(fmt.Sprintf("DOC_CONTENT_ATOM: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DOC_CONTENT_ATOM))
	buffer3.WriteString(fmt.Sprintf("CONTENT_URL: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.CONTENT_URL))
	buffer3.WriteString(fmt.Sprintf("IMG_URL: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.IMG_URL))
	buffer3.WriteString(fmt.Sprintf("DATE_ADDED: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DATE_ADDED))
	buffer3.WriteString(fmt.Sprintf("DATE_UPDATED: <br><textarea rows=\"4\" cols=\"50\">%v</textarea><br>", p.DATE_UPDATED))
	
	fmt.Fprintf(w, "<h1>%v : %v</h1>", IDX_TARGET, IDX_KEY)
	fmt.Fprintf(w, "%v", buffer3.String())
 
}
 
func webtop(w http.ResponseWriter, r *http.Request, aUser string, tUser string, tok, targetURL, mode, SID, TITLE string) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	h := r.Header
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	nameb, _ := ua.Browser()
	checkReferrer(w,r)
	var buffer bytes.Buffer
	_, uid := checkSession(w,r)
	
	TARGET_DESKTOP := "UWM"
	//deskName := "uwm"
	deskName := "uwm-share"
	dispType := "DESKTOP"
 
	ncStatsAccess := fmt.Sprintf("STATS.DESKTOP.%s", "uwm-guest")
	time.AfterFunc(5*time.Second, func() {
        laterQueueCounterIncrement(c, ncStatsAccess)
    })
	token := ""
	if tok == "" {
		_, token = createToken(w,r,"","")
	} else {
		token = tok
	}
	RINGTONE_URL := getRingtone(w, r, uid)
	dispAds := fmt.Sprintf("%v", SYS_DISP_ADS_RIGHT)
	dNumName := deskNum2Name(w,r,uid,deskName)
	
	jwToken := ""
	//firebase
	jwtChan := make(chan string)
	jwtChanDone := make(chan bool)
	go procAuthFirebase(w,r,jwtChan,jwtChanDone,uid,token)
	jwToken = <-jwtChan
	<-jwtChanDone
	if SYS_STATELESS_SERVER == true {
		token = SYS_FIXED_TOKEN
	}

    FUNC_CODE := "GET_GRP_ID"
	_, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	if SYS_STATELESS_SERVER == true {
		GROUP_ID = "GRP_ADMIN"
	}
	TEMPDATA := TEMPSTRUCT2{
		STR_FILLER1: deskName,
		STR_FILLER2: uid,
		STR_FILLER3: token,
		STR_FILLER4: getSchemeUrl(w,r),
		STR_FILLER5: "full",
		STR_FILLER6: RINGTONE_URL,
		STR_FILLER7: dNumName,
		STR_FILLER8: dispAds,
		STR_FILLER9: getScheme(w,r),
		STR_FILLER10: SID,
		STR_FILLER11: "setuwm",
		STR_FILLER12: TITLE,
		//firebase
		STR_FILLER13: jwToken,
		STR_FILLER14: SYS_SERVER_NAME,
        STR_FILLER15: getSitesServerName(w,r),
        STR_FILLER16: SYS_NEWSAPI_ENABLE_UWMLOAD,
        STR_FILLER17: GROUP_ID,
		STR_FILLER18: SYS_RUNTIME_PLATFORM,
		BOOL_FILLER1: checkMobile(w,r),
        BOOL_FILLER2: checkWpUwmOnly(w,r,uid,TARGET_DESKTOP),
        BOOL_FILLER3: SYS_CHECK_GBM,
        BOOL_FILLER4: SYS_CHECK_SYS1,
		BOOL_FILLER5: SYS_STATELESS_SERVER,
        BOOL_FILLER6: SYS_CCTV_STREAM_ON,
		BOOL_FILLER7: SYS_DEBUGGER_MODE,
		BOOL_FILLER8: SYS_SPEECH_RECOGNITION_ON,
        NUM_FILLER1: SYS_SHOW_NEWS_EVERY_X_MINS,
        NUM_FILLER2: SYS_FETCH_NEWS_EVERY_X_MINS,
	}
	
	if mode == "guest" {
 
		if (dispType == "BLOCKED")  {
			msgDtl := "[U00024] ERROR: Access has been blocked. Please contact administrator."
			msgTyp := "error"
			msgURL := "/"
			action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Public homepage.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
					
	   if (dispType == "DESKTOP")  {
		    //webtop
			msgDtl3 := fmt.Sprintf("UID:%v accessed https://www.ulapph.com/webtop %v", uid, getAccessString(w,r,""))
			reqStr := fmt.Sprintf("https://www.ulapph.com/webtop") 				
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,reqStr,""),"")
			TASK_MEMCACHER_desktopWP_loginWP := ""
			wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "loginWP")
			TASK_MEMCACHER_desktopWP_loginWP = getStrMemcacheValueByKey(w,r,wpKey)
			TASK_MEMCACHER_desktopWP_bigWP := ""
			wpKey = fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "bigWP")
			TASK_MEMCACHER_desktopWP_bigWP = getStrMemcacheValueByKey(w,r,wpKey)
			
			TEMPDATA5 := TEMPSTRUCT{
				STR_FILLER1: getStartColor(w,r),
				STR_FILLER2: getActiveColor(w,r),
				STR_FILLER3: getInActiveColor(w,r),
				STR_FILLER4: TARGET_DESKTOP,
			}
					
			if TASK_MEMCACHER_desktopWP_loginWP != "" && TASK_MEMCACHER_desktopWP_bigWP != "" {
				
				if err := userAccessTemplateDesktopNHead1.Execute(w, TARGET_DESKTOP); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "       <style type=\"text/css\">")
				renderStyleCssTemplates(w,r,".style-css", TASK_MEMCACHER_desktopWP_loginWP, TASK_MEMCACHER_desktopWP_bigWP)
				fmt.Fprintf(w, "         </style>")
				fmt.Fprintf(w, "       <style type=\"text/css\">")
				renderJSWMStyleCssTemplates(w,r)
				fmt.Fprintf(w, "         </style>")
				if isNotesCapable[nameb] == true {
					
					if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
				}
				if err := userAccessTemplateDesktop0Head2jswm.Execute(w, &TEMPDATA5); err != nil {
				  panic(err)
				}
					
				if err := userAccessTemplateDesktop0Head3jswm.Execute(w, TARGET_DESKTOP); err != nil {
				  panic(err)
				}
			
			} else {
				TASK_MEMCACHER_desktopCss := ""
                cssKey := fmt.Sprintf("TASK_MEMCACHER_desktopCss_%v", deskName)
                TASK_MEMCACHER_desktopCss = getStrMemcacheValueByKey(w,r,cssKey)
				buffer.WriteString(fmt.Sprintf("SERVED CACHED DATA\n"))
				
				if TASK_MEMCACHER_desktopCss == "" {
					//colorize mobile tabs
					if err := userAccessTemplateUWMPart1.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssTemplates2(w,r)
					fmt.Fprintf(w, "         </style>")
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderJSWMStyleCssTemplates(w,r)
					fmt.Fprintf(w, "         </style>")
 
					if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
					
					if err := userAccessTemplateDesktopNPart2jswm.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
					if err := userAccessTemplateDesktopNPart3jswm.Execute(w, TARGET_DESKTOP); err != nil {
					  panic(err)
					}
					
				} else {
					if err := userAccessTemplateUWMPart1.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssTemplates2(w,r)
					fmt.Fprintf(w, "         </style>")
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderJSWMStyleCssTemplates(w,r)
					fmt.Fprintf(w, "         </style>") 	
					
					if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
					
					if err := userAccessTemplateDesktopNPart2jswm.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
					if err := userAccessTemplateDesktopNPart3jswm.Execute(w, TARGET_DESKTOP); err != nil {
					  panic(err)
					}
					
				}
			}
			url1 := "/logout"				
			
			if err := bootBodyTemplateRoot.Execute(w, url1); err != nil {
			  panic(err)
			}
			
			if err := loginBodyTemplateRootN1.Execute(w, ""); err != nil {
			  panic(err)
			}
			
			if err := loginBodyTemplateRootN2.Execute(w, randSeq(6)); err != nil {
			  panic(err)
			}
			
			if err := desktopBodyTemplate.Execute(w, uid); err != nil {
			  panic(err)
			}
			urhir := fmt.Sprintf("[%s]", "UWM")
			//uwm (webtop)
			showTopListMenu(w,r,"s")
			soundPrefChan := make(chan string)
			soundPrefChanDone := make(chan bool)
			go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
			soundPref := <-soundPrefChan
			<-soundPrefChanDone
			TEMPDATA3 := TEMPSTRUCT2{
				STR_FILLER1: urhir,
				STR_FILLER2: soundPref,
				STR_FILLER3: getCountry(w,r),
				STR_FILLER4: fmt.Sprintf("%v", checkMobile(w,r)),
				STR_FILLER5: getSchemeUrl(w,r),
				STR_FILLER6: TARGET_DESKTOP,
				STR_FILLER7: "",
				STR_FILLER9: getScheme(w,r),
				//BOOL_FILLER1: checkMobile(w,r),
			}
			
			if isNotesCapable[nameb] == true {
				if err := desktopBody2Template.Execute(w, &TEMPDATA3); err != nil {
				  panic(err)
				}
			} else {
			
				if err := desktopBody2TemplateNoSticky.Execute(w, &TEMPDATA3); err != nil {
				  panic(err)
				}
			}
			if uid == "" {
				uid = tUser
			}
			TEMPDATA4 := TEMPSTRUCT2{
				STR_FILLER1: uid,
				STR_FILLER2: getProfilePic(w, r, uid),
				STR_FILLER3: SYS_SERVER_NAME,
				STR_FILLER4: dNumName,
				STR_FILLER5: "0",
				STR_FILLER6: h.Get("X-AppEngine-Country"),
				STR_FILLER7: h.Get("X-AppEngine-Region"),
				STR_FILLER8: h.Get("X-AppEngine-City"),
				STR_FILLER9: h.Get("X-AppEngine-CityLatLong"),
				STR_FILLER10: h.Get("U-Referer"),
                BOOL_FILLER1: SYS_SUPER_USER,
			}

			if err := desktopBodyTooltipTemplate.Execute(w, &TEMPDATA4); err != nil {
				panic(err)
			}
			
			if err := MOTD_GeneralJSWM.Execute(w, getActiveColor(w,r)); err != nil {
			  panic(err)
			}
			//firebase				
			if err := desktopBodyPTemplatejswm.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			
			//get auto-load preferences
			//////////////////////////////////////
			//alFlag := "Y"
			alFlag := "N"
			cfgName := fmt.Sprintf("PERSONAL_JSWM_AutoLoad_Enabled_%v", uid)
			alFlag, _ = getTDSCNFG(w,r,0,cfgName)
			
			if isNotesCapable[nameb] == true {
				fmt.Fprintf(w, "<input type=\"hidden\" id=\"snm\" value=\"%v\">", SYS_SYNC_NOTE_MAIL)
				if err := desktopBodyNotesDBTemplate.Execute(w, ""); err != nil {
				  panic(err)
				}
				
				//D0045
				nMediaID := 0
				//query TDSCNFG			
				cfgName := fmt.Sprintf("PERSONAL_Local_Notes_Media_ID_%v", uid)
				_, nMediaID = getTDSCNFG(w,r,1,cfgName)
				
				xCountry := h.Get("X-AppEngine-Country")
				TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: xCountry,
				STR_FILLER2: alFlag,
				STR_FILLER3: "noteYes",
				STR_FILLER4: FIXED_WALLPAPER_IMG,
				STR_FILLER5: SYS_RUNTIME_PLATFORM,
				NUM_FILLER1: nMediaID,
				}
				
				if err := desktopBodyTabzillaTemplatejswm.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				//insert custom windows
				
				getPersonalWindows(w,r,"guest",alFlag,SID)
				//D0057 
		               cfgName = fmt.Sprintf("SYSTEM_UWM_ARR_%v_%v", SID, uid)
		               winArr, _ := getTDSCNFG(w,r,0,cfgName)		
		               cfgName = fmt.Sprintf("SYSTEM_UWM_WALLP_%v_%v", SID, uid)
		               wallp, _ := getTDSCNFG(w,r,0,cfgName)		
				TEMPDATAF := TEMPSTRUCT{
					STR_FILLER1: winArr,
					STR_FILLER2: wallp,
				}
				if err := htmlFooterJSWM.Execute(w, &TEMPDATAF); err != nil {
				  panic(err)
				}
				
			} else {
 
				xCountry := h.Get("X-AppEngine-Country")
				TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: xCountry,
				STR_FILLER2: alFlag,
				STR_FILLER3: "noteNo",
				STR_FILLER4: FIXED_WALLPAPER_IMG,
				STR_FILLER5: SYS_RUNTIME_PLATFORM,
				NUM_FILLER1: 0,
				}
			
				if err := desktopBodyTabzillaTemplatejswm.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				//insert custom windows
				getPersonalWindows(w,r,"guest",alFlag,SID)
				//D0057
		               cfgName = fmt.Sprintf("SYSTEM_UWM_ARR_%v_%v", SID, uid)
		               winArr, _ := getTDSCNFG(w,r,0,cfgName)		
		               cfgName = fmt.Sprintf("SYSTEM_UWM_WALLP_%v_%v", SID, uid)
		               wallp, _ := getTDSCNFG(w,r,0,cfgName)		
				TEMPDATAF := TEMPSTRUCT{
					STR_FILLER1: winArr,
					STR_FILLER2: wallp,
				}
				if err := htmlFooterJSWM.Execute(w, &TEMPDATAF); err != nil {
				  panic(err)
				}
			}
		}
		
		//update presence
		updateUserActiveData(w, r, c, uid, "uwm-guest")
		STRMSG := fmt.Sprintf("<img src=\"/static/img/visitor.png\" width=45 height=45>[%v] Guest has accessed your cloud desktop >>> at %v.", uid, getSchemeUrl(w,r))
		STRMSG2 := fmt.Sprintf("UID: %v has accessed your cloud desktop >>> at %v as guest.", uid, getSchemeUrl(w,r))
		time.AfterFunc(5*time.Second, func() {
            laterNotifyGB(c, "autoNotifyPeopleGB", FDBKMAIL, STRMSG2, ADMMAIL)
        })
        data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "GUEST", STRMSG2)
		ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
		//when guest logged in
		sendChannelMessage(w,r,uid, STRMSG)
		SYSMSGS := buffer.String()
		go SENDSYSMSG(c, SYSMAIL, SYSMSGS, uid)
		// TARGET: DESKTOP (END)
		return
		
	} else {
		promptRegister(w,r,uid,xCountry,"","https://lh3.googleusercontent.com/W2q6sVO6ADtrwfPYuJVBeT5Vi2G0Z9-V9cV6qm_H-9sSsZ7eii17f2akVHIsTuiWbNxX_EwXmb7OKonHWUI1RBh5R4DujN6Z","")
	}
 
}
//main function which handles /uwm url
//it basically outputs the main desktop UI and the sub-desktops up to 1000 
func uwm(w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
	checkHTTPS2(w,r)
    h := r.Header
    if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //D0086
    datastoreClient := createClientDS()
        var buffer bytes.Buffer
		//if this a shared desktop, no need to login
		TARGET_UWM := r.FormValue("u")
		passcode := r.FormValue("passcode")
		user := r.FormValue("uid")
		//if passcode is not given
		if passcode == "" && user != "" && TARGET_UWM != "" {
			msgDtl := fmt.Sprintf("[U00189] ERROR: This desktop is accessible only to select individuals. Kindly request access from author.")
			msgURL := url.QueryEscape(r.URL.String())
			msgTyp := "error"
			action := "U00189"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v&uid=%v&u=%v", msgTyp, msgDtl, msgURL, action, user, TARGET_UWM)
			http.Redirect(w, r, sysReq, http.StatusFound)	
			return
		}
        FL_SHARED_OK := false
        GROUP_ID := ""
		if passcode != "" && user != "" {
			//validate user
			//check user
			FUNC_CODE := "VALUSER"
			FL_VALID_USER := false
			if SYS_STATELESS_SERVER == true {
				FL_VALID_USER = true
			} else {
				FL_VALID_USER, GROUP_ID, _ , _ = usersProcessor(w, r, "au", user, FUNC_CODE)
			}
			if FL_VALID_USER == false {
				fmt.Fprintf(w, "Invalid shared desktop user access!")
				return
			}
			desktopKey := fmt.Sprintf("desktop%v", TARGET_UWM)
			//check permission
			cats := make([]TDSCATS, 0, 1)
			//FL_SHARED_OK := false
			if SYS_STATELESS_SERVER == true {
				//cats, _ = getBoltTDSCATSByKey(w,r,desktopKey)
				FL_SHARED_OK = false
			} else {
				q := datastore.NewQuery("TDSCATS").Filter("__key__ =", getKeyDesktop(c,desktopKey))
				//recCount,_ := datastoreClient.Count(c,q)
				//if recCount > 0 {
				//exists
				//log.Printf("shared desktop")
                //log.Printf("datastoreClient.Get()  [10645]")
				if _, err := datastoreClient.GetAll(c,q, &cats); err != nil {
					//panic(err)
				}
				//}
				for _, x := range cats {
					if x.CAT_SHARED == "Y" && passcode == x.CAT_PASS {
						FL_SHARED_OK = true
						break
					}
				}
			}
		}
		if FL_SHARED_OK == true {
			//https://edwin-daen-vinas.appspot.com?q=ushare&SID=TDSMEDIA-4406&TITLE=test
			//log.Printf("FL_SHARED_OK")
			SID := getUWMSource(w,r,user,TARGET_UWM)
			if SID == "" {
				fmt.Fprintf(w, "Invalid shared desktop settings!")
				return
			}
			//log.Printf("redir ushare")
			sysReq := fmt.Sprintf("/?q=ushare&SID=%v&TITLE=%v", SID, "Shared Desktop")
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
        //FL_OU_USER, uid := checkSession(w,r)
        _, uid := checkSession(w,r)
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER","/uwm")
		if FL_PROC_OK == false {return}
		TARGET_DESKTOP := "UWM"
		deskName := ""
		deskName2 := ""
		if TARGET_UWM == "" {
			deskName = "uwm"
			deskName2 = "desktop0"
		} else {
			deskName = fmt.Sprintf("uwm%v", TARGET_UWM)
			deskName2 = fmt.Sprintf("desktop%v", TARGET_UWM)
		}
		ncStatsAccess := fmt.Sprintf("STATS.DESKTOP.%s", deskName)
		time.AfterFunc(5*time.Second, func() {
            laterQueueCounterIncrement(c, ncStatsAccess)
        })
        updateUserActiveData(w, r, c, uid, "/uwm")
        //log.Printf("genProcAccess()")
		nameb := ""
		FL_VALID_USER := false
		if SYS_STATELESS_SERVER == true {
			uag := r.UserAgent()
			ua := user_agent.New(uag)
			//uaMobile := ua.Mobile()
			//uaPlatform := ua.Platform()
			nameb, _ = ua.Browser()
			FL_VALID_USER = true
			GROUP_ID = "GRP_ADMIN"
		} else {
			//FL_VALID_USER, FL_FOUND_RULE, _, dispType, _, _, _, _, nameb, _, _, _ := genProcAccess(w,r,uid,deskName)
			FL_VALID_USER, GROUP_ID, _, _, _, _, _, _, _, nameb, _, _, _ = genProcAccess(w,r,uid,deskName)
			if SYS_STATELESS_SERVER == true {
				GROUP_ID = "GRP_ADMIN"
			}
		}
        //if FL_VALID_USER == true && (FL_FOUND_RULE == true || FL_OU_USER == true) {
        //if FL_VALID_USER == true && (r.FormValue("FL_FOUND_RULE") == "true" || FL_FOUND_RULE == true || FL_OU_USER == true) {
        if FL_VALID_USER == true && nameb != "" {
            dispType := "DESKTOP"
            if (dispType == "BLOCKED")  {
				msgDtl := "[U00024] ERROR: Access has been blocked. Please contact administrator."
				msgTyp := "error"
				msgURL := "/"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Public homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		   //dispType := "DESKTOP"
		   if (dispType == "DESKTOP")  {
				msgDtl3 := fmt.Sprintf("UID:%v accessed https://www.ulapph.com/uwm %v", uid, getAccessString(w,r,""))
				reqStr := fmt.Sprintf("https://www.ulapph.com/uwm")
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,reqStr,""),"")
				TASK_MEMCACHER_desktopWP_loginWP := ""
				wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "loginWP")
				TASK_MEMCACHER_desktopWP_loginWP = getStrMemcacheValueByKey(w,r,wpKey)
				TASK_MEMCACHER_desktopWP_bigWP := ""
				wpKey = fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "bigWP")
				TASK_MEMCACHER_desktopWP_bigWP = getStrMemcacheValueByKey(w,r,wpKey)
				TEMPDATA5 := TEMPSTRUCT{
					STR_FILLER1: getStartColor(w,r),
					STR_FILLER2: getActiveColor(w,r),
					STR_FILLER3: getInActiveColor(w,r),
					STR_FILLER4: TARGET_DESKTOP,
				}
				if TASK_MEMCACHER_desktopWP_loginWP != "" && TASK_MEMCACHER_desktopWP_bigWP != "" {
					if err := userAccessTemplateDesktopNHead1.Execute(w, TARGET_DESKTOP); err != nil {
					  panic(err)
					}
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssTemplates(w,r,".style-css", TASK_MEMCACHER_desktopWP_loginWP, TASK_MEMCACHER_desktopWP_bigWP)
					fmt.Fprintf(w, "         </style>")
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderJSWMStyleCssTemplates(w,r)
					fmt.Fprintf(w, "         </style>")
					if isNotesCapable[nameb] == true {
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
					}
					if err := userAccessTemplateDesktop0Head2jswm.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
					if err := userAccessTemplateDesktop0Head3jswm.Execute(w, TARGET_DESKTOP); err != nil {
					  panic(err)
					}
				} else {
					TASK_MEMCACHER_desktopCss := ""
                    cssKey := fmt.Sprintf("TASK_MEMCACHER_desktopCss_%v", deskName)
                    TASK_MEMCACHER_desktopCss = getStrMemcacheValueByKey(w,r,cssKey)
					buffer.WriteString(fmt.Sprintf("SERVED CACHED DATA\n"))
					if TASK_MEMCACHER_desktopCss == "" {
						if err := userAccessTemplateUWMPart1.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						fmt.Fprintf(w, "       <style type=\"text/css\">")
						renderStyleCssTemplates2(w,r)
						fmt.Fprintf(w, "         </style>")
						fmt.Fprintf(w, "       <style type=\"text/css\">")
						renderJSWMStyleCssTemplates(w,r)
						fmt.Fprintf(w, "         </style>")
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						if err := userAccessTemplateDesktopNPart2jswm.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						if err := userAccessTemplateDesktopNPart3jswm.Execute(w, TARGET_DESKTOP); err != nil {
						  panic(err)
						}
					} else {
						if err := userAccessTemplateUWMPart1.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						fmt.Fprintf(w, "       <style type=\"text/css\">")
						renderStyleCssTemplates2(w,r)
						fmt.Fprintf(w, "         </style>")
						fmt.Fprintf(w, "       <style type=\"text/css\">")
						renderJSWMStyleCssTemplates(w,r)
						fmt.Fprintf(w, "         </style>")
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						if err := userAccessTemplateDesktopNPart2jswm.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						if err := userAccessTemplateDesktopNPart3jswm.Execute(w, TARGET_DESKTOP); err != nil {
						  panic(err)
						}
					}
				}
				url1 := "/logout"
				if err := bootBodyTemplateRoot.Execute(w, url1); err != nil {
				  panic(err)
				}
				if err := loginBodyTemplateRootN1.Execute(w, ""); err != nil {
				  panic(err)
				}
				if err := loginBodyTemplateRootN2.Execute(w, randSeq(6)); err != nil {
				  panic(err)
				}
				if err := desktopBodyTemplate.Execute(w, uid); err != nil {
				  panic(err)
				}
				urhir := fmt.Sprintf("[%s]", SYS_SERVER_NAME)
				showTopListMenu(w,r,"s")
				soundPref := ""
				if SYS_STATELESS_SERVER == true {
					soundPref = "on"
				} else {
					soundPrefChan := make(chan string)
					soundPrefChanDone := make(chan bool)
					go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
					soundPref = <-soundPrefChan
					<-soundPrefChanDone
                }
				TEMPDATA3 := TEMPSTRUCT2{
					STR_FILLER1: urhir,
					STR_FILLER2: soundPref,
					STR_FILLER3: getCountry(w,r),
					STR_FILLER4: fmt.Sprintf("%v", checkMobile(w,r)),
					STR_FILLER5: getSchemeUrl(w,r),
					STR_FILLER6: TARGET_UWM,
					STR_FILLER7: deskName2,
				}
				if isNotesCapable[nameb] == true {
					if err := desktopBody2Template.Execute(w, &TEMPDATA3); err != nil {
					  panic(err)
					}
				} else {
					if err := desktopBody2TemplateNoSticky.Execute(w, &TEMPDATA3); err != nil {
					  panic(err)
					}
				}
				//uwm
				dNumName := deskNum2Name(w,r,uid,deskName2)
				if r.FormValue("u") == "" {
					//dNumName = "Main Desktop"
                    dNumName = "Ulapph Desktop"
                    TARGET_UWM = ""
				}
				TEMPDATA4 := TEMPSTRUCT2{
					STR_FILLER1: uid,
					STR_FILLER2: getProfilePic(w, r, uid),
					STR_FILLER3: SYS_SERVER_NAME,
					STR_FILLER4: dNumName,
					STR_FILLER5: TARGET_UWM,
					STR_FILLER6: h.Get("X-AppEngine-Country"),
					STR_FILLER7: h.Get("X-AppEngine-Region"),
					STR_FILLER8: h.Get("X-AppEngine-City"),
					STR_FILLER9: h.Get("X-AppEngine-CityLatLong"),
					STR_FILLER10: h.Get("U-Referer"),
					BOOL_FILLER1: SYS_SUPER_USER,
				}

				if err := desktopBodyTooltipTemplate.Execute(w, &TEMPDATA4); err != nil {
					panic(err)
				}
				if err := MOTD_GeneralJSWM.Execute(w, getActiveColor(w,r)); err != nil {
				  panic(err)
				}
				aUser := ""
				if r.FormValue("u") == "" {
					aUser = uid
				} else {
					aUser = fmt.Sprintf("%v---%v", uid, TARGET_UWM)
				}
				
				token := ""
				if SYS_STATELESS_SERVER == true {
					token = randSeq2(64)
				} else {
					tokChan := make(chan Token)
					tokChanDone := make(chan bool)
					go createTokenChan(w,r,tokChan,tokChanDone,aUser,"")
					tok := <-tokChan
					<-tokChanDone
					token = tok.Token
                }
                RINGTONE_URL := getRingtone(w, r, uid)
				dispAds := fmt.Sprintf("%v", SYS_DISP_ADS_RIGHT)
				uwmsource := ""
				if r.FormValue("u") == "" {
					uwmsource = ""
				} else {
					uwmsource = getUWMSource(w,r,uid,r.FormValue("u"))
					if uwmsource == "" {
						uwmsource = "setuwm"
					}
				}
				jwToken := ""
				//firebase
				jwtChan := make(chan string)
				jwtChanDone := make(chan bool)
				go procAuthFirebase(w,r,jwtChan,jwtChanDone,uid,token)
				jwToken = <-jwtChan
				<-jwtChanDone
				if SYS_STATELESS_SERVER == true {
					token = SYS_FIXED_TOKEN
				}
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: deskName,
					STR_FILLER2: aUser,
					STR_FILLER3: token,
					STR_FILLER4: getSchemeUrl(w,r),
					STR_FILLER5: "full",
					STR_FILLER6: RINGTONE_URL,
					STR_FILLER7: dNumName,
					STR_FILLER8: dispAds,
					STR_FILLER9: getScheme(w,r),
					STR_FILLER10: "",
					STR_FILLER11: uwmsource,
					STR_FILLER12: deskName,
					//firebase
					STR_FILLER13: jwToken,
					STR_FILLER14: SYS_SERVER_NAME,
                    STR_FILLER15: getSitesServerName(w,r),
                    STR_FILLER16: SYS_NEWSAPI_ENABLE_UWMLOAD,
                    STR_FILLER17: GROUP_ID,
					STR_FILLER18: SYS_RUNTIME_PLATFORM,
					STR_FILLER19: getStartColor(w,r),
					STR_FILLER20: getActiveColor(w,r),
					BOOL_FILLER1: checkMobile(w,r),
                    BOOL_FILLER2: checkWpUwmOnly(w,r,uid,TARGET_UWM),
                    BOOL_FILLER3: SYS_CHECK_GBM,
                    BOOL_FILLER4: SYS_CHECK_SYS1,
					BOOL_FILLER5: SYS_STATELESS_SERVER,
                    BOOL_FILLER6: SYS_CCTV_STREAM_ON,
					BOOL_FILLER7: SYS_DEBUGGER_MODE,
					BOOL_FILLER8: SYS_SPEECH_RECOGNITION_ON,
                    NUM_FILLER1: SYS_SHOW_NEWS_EVERY_X_MINS,
                    NUM_FILLER2: SYS_FETCH_NEWS_EVERY_X_MINS,
					NUM_FILLER15: checkNumMessages(w, r, uid),
				}
                //firebase
                //log.Printf("GROUP_ID: %v", GROUP_ID)
                //log.Printf("TEMPDATA.GROUP_ID: %v", TEMPDATA.STR_FILLER17)
				if err := desktopBodyPTemplatejswm.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				//get auto-load preferences
				//////////////////////////////////////
				cfgName := fmt.Sprintf("PERSONAL_JSWM_AutoLoad_Enabled_%v", uid)
				//alFlag := "Y"
				alFlag := "N"
				cKeyAL := getStrMemcacheValueByKey(w,r,cfgName)
				if cKeyAL == "" {
					alFlag, _ = getTDSCNFG(w,r,0,cfgName)
				} else {
					alFlag = cKeyAL
				}
				if isNotesCapable[nameb] == true {
					fmt.Fprintf(w, "<input type=\"hidden\" id=\"snm\" value=\"%v\">", SYS_SYNC_NOTE_MAIL)
					if err := desktopBodyNotesDBTemplate.Execute(w, ""); err != nil {
					  panic(err)
					}
					//D0045
					nMediaID := 0
					//query TDSCNFG			
					cfgName := fmt.Sprintf("PERSONAL_Local_Notes_Media_ID_%v", uid)
					_, nMediaID = getTDSCNFG(w,r,1,cfgName)
					xCountry := h.Get("X-AppEngine-Country")
					TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: xCountry,
					STR_FILLER2: alFlag,
					STR_FILLER3: "noteYes",
					STR_FILLER4: FIXED_WALLPAPER_IMG,
					STR_FILLER5: SYS_RUNTIME_PLATFORM,
					NUM_FILLER1: nMediaID,
					}
					if err := desktopBodyTabzillaTemplatejswm.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
					//insert custom windows
					if r.FormValue("u") == "" {
						getPersonalWindows(w,r,uid,alFlag,"")
					} else {
						if str2int(r.FormValue("u")) >= 0 {
							getPersonalWindows(w,r,uid,alFlag,uwmsource)
						}
					}
					//D0057
		            cfgName = fmt.Sprintf("SYSTEM_UWM_ARR_%v_%v", uwmsource, uid)
		            winArr, _ := getTDSCNFG(w,r,0,cfgName)		
				    cfgName = fmt.Sprintf("SYSTEM_UWM_WALLP_%v_%v", uwmsource, uid)
				    wallp, _ := getTDSCNFG(w,r,0,cfgName)		
					TEMPDATAF := TEMPSTRUCT{
						STR_FILLER1: winArr,
						STR_FILLER2: wallp,
					}
					if err := htmlFooterJSWM.Execute(w, &TEMPDATAF); err != nil {
					  panic(err)
					}
				} else {
 
					xCountry := h.Get("X-AppEngine-Country")
					TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: xCountry,
					STR_FILLER2: alFlag,
					STR_FILLER3: "noteNo",
					STR_FILLER4: FIXED_WALLPAPER_IMG,
					STR_FILLER5: SYS_RUNTIME_PLATFORM,
					NUM_FILLER1: 0,
					}
				
					if err := desktopBodyTabzillaTemplatejswm.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
					//insert custom windows
					if r.FormValue("u") == "" {
						getPersonalWindows(w,r,uid,alFlag,"")
					} else {
						if str2int(r.FormValue("u")) >= 0 {
							getPersonalWindows(w,r,uid,alFlag,uwmsource)
						}
					}
					//D0057
		            cfgName = fmt.Sprintf("SYSTEM_UWM_ARR_%v_%v", uwmsource, uid)
		            winArr, _ := getTDSCNFG(w,r,0,cfgName)		
				    cfgName = fmt.Sprintf("SYSTEM_UWM_WALLP_%v_%v", uwmsource, uid)
				    wallp, _ := getTDSCNFG(w,r,0,cfgName)		
					TEMPDATAF := TEMPSTRUCT{
						STR_FILLER1: winArr,
						STR_FILLER2: wallp,
					}
					if err := htmlFooterJSWM.Execute(w, &TEMPDATAF); err != nil {
					  panic(err)
					}
				}
			}
			SYSMSGS := buffer.String()
			go SENDSYSMSG(c, SYSMAIL, SYSMSGS, uid)
			return
			
		}
        if FL_VALID_USER == false || uid == "" {
			promptRegister(w,r,uid,xCountry,"","https://lh3.googleusercontent.com/W2q6sVO6ADtrwfPYuJVBeT5Vi2G0Z9-V9cV6qm_H-9sSsZ7eii17f2akVHIsTuiWbNxX_EwXmb7OKonHWUI1RBh5R4DujN6Z","")
        }
		return
 		
}
//user personal desktop
func desktop0(w http.ResponseWriter, r *http.Request) {
	checkHTTPS2(w,r)
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	
        //c := appengine.NewContext(r)
        c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
        defer cancel()
        var buffer bytes.Buffer
		
		_, uid := checkSession(w,r)
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER","/desktop0")
		if FL_PROC_OK == false {return}
		
		deskName := "desktop0"
 
		ncStatsAccess := fmt.Sprintf("STATS.DESKTOP.%s", deskName)
		time.AfterFunc(5*time.Second, func() {
            laterQueueCounterIncrement(c, ncStatsAccess)
        })
		updateUserActiveData(w, r, c, uid, "/desktop0")
		FL_VALID_USER, _, FL_FOUND_RULE, _, dispType, _, _, _, _, nameb, _, _, _ := genProcAccess(w,r,uid,deskName)
				
		if FL_VALID_USER == true && FL_FOUND_RULE == true {	
		
			if (dispType == "BLOCKED")  {
				msgDtl := "[U00020] ERROR: Access has been blocked. Please contact administrator."
				msgTyp := "error"
				msgURL := "/"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Public homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
			
			if (dispType == "MOBILE")  {
				redURL := fmt.Sprintf("/uwm")
				http.Redirect(w, r, redURL, http.StatusFound)
				return
		   }
		   if (dispType == "DESKTOP")  {
				msgDtl3 := fmt.Sprintf("UID:%v accessed https://www.ulapph.com/desktop0 %v", uid, getAccessString(w,r,""))
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"https://www.ulapph.com/desktop0",""),"")	
 
				USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
				putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
				
				deskName := "desktop0"
				TASK_MEMCACHER_desktopWP_loginWP := ""
				wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", "loginWP", uid)
				TASK_MEMCACHER_desktopWP_loginWP = getStrMemcacheValueByKey(w,r,wpKey)
				TASK_MEMCACHER_desktopWP_bigWP := ""
				wpKey = fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", "bigWP", uid)
				TASK_MEMCACHER_desktopWP_bigWP = getStrMemcacheValueByKey(w,r,wpKey)

				TEMPDATA5 := TEMPSTRUCT{
					STR_FILLER1: getStartColor(w,r),
					STR_FILLER2: getActiveColor(w,r),
					STR_FILLER3: getInActiveColor(w,r),
					STR_FILLER4: "0(myULAPPH)",
				}
						
				if TASK_MEMCACHER_desktopWP_loginWP != "" && TASK_MEMCACHER_desktopWP_bigWP != "" {
					if err := userAccessTemplateDesktop0Head1.Execute(w, html.EscapeString(uid)); err != nil {
					  panic(err)
					}
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssTemplates(w,r,".style-css", TASK_MEMCACHER_desktopWP_loginWP, TASK_MEMCACHER_desktopWP_bigWP)
					fmt.Fprintf(w, "         </style>")
					
					if isNotesCapable[nameb] == true {
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
					}
					if err := userAccessTemplateDesktop0Head2.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
				
				} else {
					TASK_MEMCACHER_desktopCss := ""
                    cssKey := fmt.Sprintf("TASK_MEMCACHER_desktopCss_desktop0_%s", uid)
                    TASK_MEMCACHER_desktopCss = getStrMemcacheValueByKey(w,r,cssKey)
					
					if TASK_MEMCACHER_desktopCss == "" {
						if err := userAccessTemplateDesktop0Part1a.Execute(w, ""); err != nil {
						  panic(err)
						}
						fmt.Fprintf(w, "       <style type=\"text/css\">")
						renderStyleCssTemplates2(w,r)
						fmt.Fprintf(w, "         </style>")
						
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						
						if err := userAccessTemplateDesktop0Part2.Execute(w, "0(myULAPPH)"); err != nil {
						  panic(err)
						} 					
					} else {
						//use custom css
						if err := userAccessTemplateDesktop0Part1.Execute(w, TASK_MEMCACHER_desktopCss); err != nil {
						  panic(err)
						}
 
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						if err := userAccessTemplateDesktop0Part2.Execute(w, "0(myULAPPH)"); err != nil {
						  panic(err)
						} 					
					}
				}
				if err := stickyMenuOne.Execute(w, ""); err != nil {
				  panic(err)
				}
				//Top Websites
				//check memcache
				disp_MEMCACHE_TopWebsites(w,r)
				if err := stickyMenuOneLogCal.Execute(w, ""); err != nil {
				  panic(err)
				}
				//Notifications
				//check memcache
					GUESTBOOK_MSGS := ""
					cKey := fmt.Sprintf("GUESTBOOK_MSGS_%s", uid)
					GUESTBOOK_MSGS = getStrMemcacheValueByKey(w,r,cKey)
					
					GUESTBOOK_NUM_MSG := ""
					thisGBNum := 0
                    cKey = fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", uid)
                    GUESTBOOK_NUM_MSG = getStrMemcacheValueByKey(w,r,cKey)
                    thisGBNum = str2int(GUESTBOOK_NUM_MSG)
				if err := stickyMenuOneNotifNum1.Execute(w, thisGBNum); err != nil {
				  panic(err)
				}
				if err := stickyMenuOneNotifUID.Execute(w, uid); err != nil {
				  panic(err)
				}
				if err := stickyMenuOneNotifNum2.Execute(w, thisGBNum); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "%v", GUESTBOOK_MSGS)
				
				if err := stickyMenuOneNotifEnd.Execute(w, ""); err != nil {
				  panic(err)
				}
				//Notifications end
				if err := stickyMenuThree.Execute(w, ""); err != nil {
				  panic(err)
				}
                url1 := "/logout"
				if err := bootBodyTemplateRoot.Execute(w, url1); err != nil {
				  panic(err)
				}
				if err := loginBodyTemplateRoot.Execute(w, randSeq(6)); err != nil {
				  panic(err)
				}
				if err := desktopBodyTemplate.Execute(w, uid); err != nil {
				  panic(err)
				}
				urhir := fmt.Sprintf("[%s]", deskNum2Name(w,r,uid,deskName))
 
				soundPrefChan := make(chan string)
				soundPrefChanDone := make(chan bool)
				go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
				soundPref := <-soundPrefChan
				<-soundPrefChanDone
				//desktop0
				TEMPDATA3 := TEMPSTRUCT2{
					STR_FILLER1: urhir,
					STR_FILLER2: soundPref,
					STR_FILLER3: getCountry(w,r),
					STR_FILLER4: fmt.Sprintf("%v", checkMobile(w,r)),
					STR_FILLER5: getSchemeUrl(w,r),
				}
				if isNotesCapable[nameb] == true {
					if err := desktopXBody2Template.Execute(w, &TEMPDATA3); err != nil {
					  panic(err)
					}
				} else {
					if err := desktopXBody2TemplateNoSticky.Execute(w, &TEMPDATA3); err != nil {
					  panic(err)
					}		
				}
				if err := desktopBodyUnameTemplate.Execute(w, uid); err != nil {
					panic(err)
				}
 
				ranMsgTitle, RAN_MSG, ranMsgSlidesURL := getMOTD(w, r, uid, deskName)
				
				if err := MOTD_General.Execute(w, ranMsgTitle); err != nil {
				  panic(err)
				}
				
				MOTD := fmt.Sprintf("<img src=\"/static/img/motd.png\"> %v", RAN_MSG)
				if RAN_MSG != "" {
				//when motd
				sendChannelMessage(w,r,uid, MOTD)
				}
				if err := MOTD_General2.Execute(w, RAN_MSG); err != nil {
				  panic(err)
				}
				if err := MOTD_General3.Execute(w, ranMsgSlidesURL); err != nil {
				  panic(err)
				}
				// share icons
				if err := dockStartTemplate.Execute(w, uid); err != nil {
					 panic(err)
				}
				tokChan := make(chan Token)
				tokChanDone := make(chan bool)
				go createTokenChan(w,r,tokChan,tokChanDone,"","")
				tok := <-tokChan
				<-tokChanDone
				token := tok.Token
 
				RINGTONE_URL := getRingtone(w, r, uid)
				jwtChan := make(chan string)
				jwtChanDone := make(chan bool)
				go procAuthFirebase(w,r,jwtChan,jwtChanDone,uid,token)
				jwToken := <-jwtChan
				<-jwtChanDone
				
				dispAds := fmt.Sprintf("%v", SYS_DISP_ADS_RIGHT)
				
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: deskName,
					STR_FILLER2: uid,
					STR_FILLER3: token,
					STR_FILLER4: getSchemeUrl(w,r),
					STR_FILLER5: "full",
					STR_FILLER6: RINGTONE_URL,
					STR_FILLER7: deskNum2Name(w,r,uid,deskName),
					STR_FILLER8: dispAds,
					//firebase
					STR_FILLER10: jwToken,
					STR_FILLER11: SYS_SERVER_NAME,
					STR_FILLER12: getSitesServerName(w,r),
				}
				if err := desktopBodyPTemplate.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				
				//get cached desktop items
				TASK_MEMCACHER_desktopIcons := ""
 
				cKey = fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%s_%s", deskName, uid)
                TASK_MEMCACHER_desktopIcons = getStrMemcacheValueByKey(w,r,cKey)
                fmt.Fprintf(w, "%v", TASK_MEMCACHER_desktopIcons)
                
				if TASK_MEMCACHER_desktopIcons == "" {	
					FL_CUSTOM_ICONS, iconsHTML := getIcons(w, r, c, uid, deskName)
					if FL_CUSTOM_ICONS != true {
						if err := desktopBody4Template.Execute(w, uid); err != nil {
						  panic(err)
						}
					} else {
						if err := desktopBody4TemplateCUSTOM.Execute(w, iconsHTML); err != nil {
						  panic(err)
						}
					}
				}
				if err := desktopBody5Templatex.Execute(w, deskName); err != nil {
				  panic(err)
				}
				if err := desktopBody5Template.Execute(w, url1); err != nil {
				  panic(err)
				}
				if err := desktopBodyNTemplate.Execute(w, url1); err != nil {
				  panic(err)
				}
				if err := advertiseWithUsTemplate.Execute(w, deskName); err != nil {
				  panic(err)
				}	
				if err := contactUsTemplate.Execute(w, deskName); err != nil {
				  panic(err)
				}
 
				if isNotesCapable[nameb] == true {
					fmt.Fprintf(w, "<input type=\"hidden\" id=\"snm\" value=\"%v\">", SYS_SYNC_NOTE_MAIL)
					if err := desktopBodyNotesDBTemplate.Execute(w, ""); err != nil {
					  panic(err)
					}
					//D0048
					nMediaID := 0
					//query TDSCNFG			
					cfgName := fmt.Sprintf("PERSONAL_Local_Notes_Media_ID_%v", uid)
					_, nMediaID = getTDSCNFG(w,r,1,cfgName)

					TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: "",
					STR_FILLER2: "",
					STR_FILLER3: "noteYes",
					STR_FILLER4: "",
					NUM_FILLER1: nMediaID,
					}
					if err := desktopBodyTabzillaTemplateNotes.Execute(w, &TEMPDATA); err != nil {
					 http.Error(w, err.Error(), http.StatusInternalServerError)
					}
				} else {
				
					if err := desktopBodyTabzillaTemplate.Execute(w, url1); err != nil {
					 http.Error(w, err.Error(), http.StatusInternalServerError)
					}
				}
			}
			SYSMSGS := buffer.String()
			go SENDSYSMSG(c, SYSMAIL, SYSMSGS, uid)
 
		}
		_, uid = checkSession(w,r)
		
		if (FL_VALID_USER == true && FL_FOUND_RULE == false) || (uid != "") {	
			redURL := fmt.Sprintf("/?q=home&FL_VALID_USER=%v&FL_FOUND_RULE=%v", FL_VALID_USER, FL_FOUND_RULE)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
        }
		if (FL_VALID_USER == false && FL_FOUND_RULE == false) || (uid == "") {
			promptRegister(w,r,uid,xCountry,"","https://lh3.googleusercontent.com/W2q6sVO6ADtrwfPYuJVBeT5Vi2G0Z9-V9cV6qm_H-9sSsZ7eii17f2akVHIsTuiWbNxX_EwXmb7OKonHWUI1RBh5R4DujN6Z","")
        } 		
 
}

//main function which handles the /desktop url
//it displays the desktop and sub-desktops
//note that uwm and desktop are different UIs
//the desktop is the one that contains animated toolbars below similar to macOS 
func desktop(w http.ResponseWriter, r *http.Request) {
        //c := appengine.NewContext(r)
        c, cancel := context.WithCancel(context.Background())
	    defer cancel()
		checkHTTPS2(w,r)
		
		if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
		checkReferrer(w,r)
		if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
		
        var buffer bytes.Buffer
		
		_, uid := checkSession(w,r)
		TARGET_DESKTOP := r.FormValue("d")
		deskName := fmt.Sprintf("desktop%s", TARGET_DESKTOP)
		deskName1 := fmt.Sprintf("/desktop?d=%v", TARGET_DESKTOP)
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",deskName1)
		if FL_PROC_OK == false {return}
 
		ncStatsAccess := fmt.Sprintf("STATS.DESKTOP.%s", deskName)
		time.AfterFunc(5*time.Second, func() {
            laterQueueCounterIncrement(c, ncStatsAccess)
        })
		updateUserActiveData(w, r, c, uid, deskName1)
        uReferer := r.Referer()
		z, err := url.Parse(uReferer)
		if err != nil {
			panic(err)
		}
		m, _ := url.ParseQuery(z.RawQuery)	
		dVal2 := 0
		if _, ok := m["d"]; ok {
			dValP := m["d"][0]
			dVal2 = str2int(dValP)
		}
		dVal := str2int(TARGET_DESKTOP)
		if dVal > 0 && dVal <= MAX_CAT_NUM {
			//continue
		} else {
			
			if dVal2 > 0 && dVal2 <= MAX_CAT_NUM {
				//continue
			} else {
				msgDtl := fmt.Sprintf("[U00021] Error: Target desktop (desktop%d) is not valid!", dVal)
				msgTyp := "error"
				msgURL := "/?q=home&ERROR=desktopInvalid"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Carousel page.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				
				buffer.WriteString(fmt.Sprintf("Error: Target desktop (desktop%d) is not valid!", dVal))
				SYSMSGS := buffer.String()
				go SENDSYSMSG(c, SYSMAIL, SYSMSGS, uid)
				
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		}
		FL_VALID_USER, _, FL_FOUND_RULE, _, dispType, _, _, _, _, nameb, _, _, _ := genProcAccess(w,r,uid,deskName)
		
        if FL_VALID_USER == true && FL_FOUND_RULE == true {			
 
			if (dispType == "BLOCKED")  {
				msgDtl := "[U00024] ERROR: Access has been blocked. Please contact administrator."
				msgTyp := "error"
				msgURL := "/"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Public homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
			
			deskTitle := fmt.Sprintf("%v(%v)", TARGET_DESKTOP, deskNum2Name(w,r,uid,deskName))
			if (dispType == "UWM")  {
				uwm(w,r)	
				return
			}
			msgDtl3 := fmt.Sprintf("UID:%v accessed https://www.ulapph.com/desktop?d=%v %v", uid, dVal, getAccessString(w,r,""))
			reqStr := fmt.Sprintf("https://www.ulapph.com/desktop?d=%v", dVal)
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,reqStr,""),"")	
				
			if (dispType == "MOBILE")  {
				redURL := fmt.Sprintf("/uwm")
				http.Redirect(w, r, redURL, http.StatusFound)
				return				
		   }
		   if (dispType == "DESKTOP")  {
				//desktop?d=n
				TASK_MEMCACHER_desktopWP_loginWP := ""
				wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "loginWP")
				TASK_MEMCACHER_desktopWP_loginWP = getStrMemcacheValueByKey(w,r,wpKey)
				TASK_MEMCACHER_desktopWP_bigWP := ""
				wpKey = fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "bigWP")
				TASK_MEMCACHER_desktopWP_bigWP = getStrMemcacheValueByKey(w,r,wpKey)
				
				
				TEMPDATA5 := TEMPSTRUCT{
					STR_FILLER1: getStartColor(w,r),
					STR_FILLER2: getActiveColor(w,r),
					STR_FILLER3: getInActiveColor(w,r),
					STR_FILLER4: deskTitle,
				}
						
				if TASK_MEMCACHER_desktopWP_loginWP != "" && TASK_MEMCACHER_desktopWP_bigWP != "" {
				//desktop?d=n
					if err := userAccessTemplateDesktopNHead1.Execute(w, TARGET_DESKTOP); err != nil {
					  panic(err)
					}
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssTemplates(w,r,".style-css", TASK_MEMCACHER_desktopWP_loginWP, TASK_MEMCACHER_desktopWP_bigWP)
					fmt.Fprintf(w, "         </style>")
					if isNotesCapable[nameb] == true {
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
					}
					if err := userAccessTemplateDesktop0Head2.Execute(w, &TEMPDATA5); err != nil {
					  panic(err)
					}
				
				} else {
				
					//get custom css
					TASK_MEMCACHER_desktopCss := ""
                    cssKey := fmt.Sprintf("TASK_MEMCACHER_desktopCss_%v", deskName)
                    TASK_MEMCACHER_desktopCss = getStrMemcacheValueByKey(w,r,cssKey)
					if TASK_MEMCACHER_desktopCss == "" {
						
						if err := userAccessTemplateDesktopNPart1a.Execute(w, ""); err != nil {
						  panic(err)
						}
						fmt.Fprintf(w, "       <style type=\"text/css\">")
						renderStyleCssTemplates2(w,r)
						fmt.Fprintf(w, "         </style>")
 
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						if err := userAccessTemplateDesktopNPart2.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						} 					
					} else {
						//use custom css
						if err := userAccessTemplateDesktopNPart1.Execute(w, TASK_MEMCACHER_desktopCss); err != nil {
						  panic(err)
						}
						
						if err := desktopBodyNotesCSSTemplate.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						}
						if err := userAccessTemplateDesktopNPart2.Execute(w, &TEMPDATA5); err != nil {
						  panic(err)
						} 					
					}
				}
 
				if err := stickyMenuOne.Execute(w, ""); err != nil {
				  panic(err)
				}
				//Top Websites
				disp_MEMCACHE_TopWebsites(w,r)
				if err := stickyMenuOneLogCal.Execute(w, ""); err != nil {
				  panic(err)
				}
				//Notifications
				//check memcache
					GUESTBOOK_MSGS := ""
					cKey := fmt.Sprintf("GUESTBOOK_MSGS_%s", uid)
					GUESTBOOK_MSGS = getStrMemcacheValueByKey(w,r,cKey)
 
					GUESTBOOK_NUM_MSG := ""
					thisGBNum := 0
                    cKey = fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", uid)
                    GUESTBOOK_NUM_MSG = getStrMemcacheValueByKey(w,r,cKey)
                    thisGBNum = str2int(GUESTBOOK_NUM_MSG)
				if err := stickyMenuOneNotifNum1.Execute(w, thisGBNum); err != nil {
				  panic(err)
				}
				if err := stickyMenuOneNotifUID.Execute(w, uid); err != nil {
				  panic(err)
				}
				if err := stickyMenuOneNotifNum2.Execute(w, thisGBNum); err != nil {
				  panic(err)
				}
 
				fmt.Fprintf(w, "%v", GUESTBOOK_MSGS)
				if err := stickyMenuOneNotifEnd.Execute(w, ""); err != nil {
				  panic(err)
				}
				//Notifications end				
				if err := stickyMenuThree.Execute(w, ""); err != nil {
				  panic(err)
				}
                url1 := "/logout"				
				if err := bootBodyTemplateRoot.Execute(w, url1); err != nil {
				  panic(err)
				}
 
				//?d=18
				if err := loginBodyTemplateRootN1.Execute(w, dVal); err != nil {
				  panic(err)
				}
				
				if err := loginBodyTemplateRootN2.Execute(w, randSeq(6)); err != nil {
				  panic(err)
				}
				if err := desktopBodyTemplate.Execute(w, uid); err != nil {
				  panic(err)
				}
				urhir := fmt.Sprintf("[%s]", deskNum2Name(w,r,uid,deskName))
				
				//desktopN
				soundPrefChan := make(chan string)
				soundPrefChanDone := make(chan bool)
				go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
				soundPref := <-soundPrefChan
				<-soundPrefChanDone
				
				TEMPDATA3 := TEMPSTRUCT2{
					STR_FILLER1: urhir,
					STR_FILLER2: soundPref,
					STR_FILLER3: getCountry(w,r),
					STR_FILLER4: fmt.Sprintf("%v", checkMobile(w,r)),
					STR_FILLER5: getSchemeUrl(w,r),
				}
				if isNotesCapable[nameb] == true {
					if err := desktopXBody2Template.Execute(w, &TEMPDATA3); err != nil {
					  panic(err)
					}
				} else {
					if err := desktopXBody2TemplateNoSticky.Execute(w, &TEMPDATA3); err != nil {
					  panic(err)
					}		
				}
				if err := desktopBodyUnameTemplate.Execute(w, uid); err != nil {
					panic(err)
				}
				
				ranMsgTitle, RAN_MSG, ranMsgSlidesURL := getMOTD(w, r, uid, deskName)
				
				if err := MOTD_General.Execute(w, ranMsgTitle); err != nil {
				  panic(err)
				}
				
				MOTD := fmt.Sprintf("<img src=\"/static/img/motd.png\"> %v", RAN_MSG)
				if RAN_MSG != "" {
				
				//when motd
				sendChannelMessage(w,r,uid, MOTD)
				}
				if err := MOTD_General2.Execute(w, RAN_MSG); err != nil {
				  panic(err)
				}
				if err := MOTD_General3.Execute(w, ranMsgSlidesURL); err != nil {
				  panic(err)
				}
				if err := dockStartTemplate.Execute(w, uid); err != nil {
					 panic(err)
				}
				aUser := fmt.Sprintf("%v---%v", uid, TARGET_DESKTOP)
				
				tokChan := make(chan Token)
				tokChanDone := make(chan bool)
				go createTokenChan(w,r,tokChan,tokChanDone,aUser,"")
				tok := <-tokChan
				<-tokChanDone
				token := tok.Token

				jwtChan := make(chan string)
				jwtChanDone := make(chan bool)
				go procAuthFirebase(w,r,jwtChan,jwtChanDone,uid,token)
				jwToken := <-jwtChan
				<-jwtChanDone
				
				RINGTONE_URL := getRingtone(w, r, uid)
				dispAds := fmt.Sprintf("%v", SYS_DISP_ADS_RIGHT)
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: deskName,
					STR_FILLER2: aUser,
					STR_FILLER3: token,
					STR_FILLER4: getSchemeUrl(w,r),
					STR_FILLER5: "full",
					STR_FILLER6: RINGTONE_URL,
					STR_FILLER7: deskNum2Name(w,r,uid,deskName),
					STR_FILLER8: dispAds,
					STR_FILLER10: jwToken,
					STR_FILLER11: SYS_SERVER_NAME,
					STR_FILLER12: getSitesServerName(w,r),
				}
				if err := desktopBodyPTemplate.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
 
				//get cached desktop items
				TASK_MEMCACHER_desktopIcons := ""
                cKey = fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%v", deskName)
                TASK_MEMCACHER_desktopIcons = getStrMemcacheValueByKey(w,r,cKey)
				fmt.Fprintf(w, "%v", TASK_MEMCACHER_desktopIcons)
				if TASK_MEMCACHER_desktopIcons == "" {				
					//get custom icons
					//desktopN
					FL_CUSTOM_ICONS, iconsHTML := getIcons(w, r, c, uid, deskName)
					if FL_CUSTOM_ICONS != true {
						if err := desktopBody4Template.Execute(w, uid); err != nil {
						  panic(err)
						}
					} else {
						if err := desktopBody4TemplateCUSTOM.Execute(w, iconsHTML); err != nil {
						  panic(err)
						}
					}
				}
				if err := desktopBody5Templatex.Execute(w, deskName); err != nil {
				  panic(err)
				}
				if err := desktopBody5Template.Execute(w, url1); err != nil {
				  panic(err)
				}
				if err := desktopBodyNTemplate1.Execute(w, url1); err != nil {
				  panic(err)
				}
				if err := advertiseWithUsTemplate.Execute(w, deskName); err != nil {
				  panic(err)
				}	
				if err := contactUsTemplate.Execute(w, deskName); err != nil {
				  panic(err)
				}
				
				if isNotesCapable[nameb] == true {
					fmt.Fprintf(w, "<input type=\"hidden\" id=\"snm\" value=\"%v\">", SYS_SYNC_NOTE_MAIL)
					if err := desktopBodyNotesDBTemplate.Execute(w, ""); err != nil {
					  panic(err)
					}
					//D0048
					nMediaID := 0
					//query TDSCNFG			
					cfgName := fmt.Sprintf("PERSONAL_Local_Notes_Media_ID_%v", uid)
					_, nMediaID = getTDSCNFG(w,r,1,cfgName)

					TEMPDATA := TEMPSTRUCT2{
					
					STR_FILLER1: "",
					STR_FILLER2: "",
					STR_FILLER3: "noteYes",
					STR_FILLER4: "",
					NUM_FILLER1: nMediaID,
					}
					if err := desktopBodyTabzillaTemplateNotes.Execute(w, &TEMPDATA); err != nil {
					 http.Error(w, err.Error(), http.StatusInternalServerError)
					}
				} else {
					if err := desktopBodyTabzillaTemplate.Execute(w, url1); err != nil {
					  panic(err)
					}
				}
			}
			SYSMSGS := buffer.String()
			go SENDSYSMSG(c, SYSMAIL, SYSMSGS, uid)
			return
			
		}
 
		_, uid = checkSession(w,r)
		
		if (FL_VALID_USER == true && FL_FOUND_RULE == false) || (uid != "") {
			redURL := fmt.Sprintf("/?q=home&FL_VALID_USER=%v&FL_FOUND_RULE=%v", FL_VALID_USER, FL_FOUND_RULE)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
        }
		if (FL_VALID_USER == false && FL_FOUND_RULE == false) || (uid == "") {
			promptRegister(w,r,uid,xCountry,"","https://lh3.googleusercontent.com/W2q6sVO6ADtrwfPYuJVBeT5Vi2G0Z9-V9cV6qm_H-9sSsZ7eii17f2akVHIsTuiWbNxX_EwXmb7OKonHWUI1RBh5R4DujN6Z","")
        }
 		
}

//this is a function for validating user access
//note that the logic here is old and this is my code when i was starting golang; see how I created the struct using buffer
//we can improve this code by passing an actual struct populated the modern way
func genProcAccess(w http.ResponseWriter, r *http.Request, uid, deskName string) (FL_VALID_USER bool, GROUP_ID string, FL_FOUND_RULE bool, PROC_ERR_MSG, dispType, AdsID string, ruleNum int, xRegion, xCity, nameb, versionb, DestURL, TrigID string) {
	h := r.Header
    var buffer4 bytes.Buffer
	
	uReferer := r.Referer()
	uPath := r.URL.String()
	
	xCountry := h.Get("X-AppEngine-Country")
	xRegion  = h.Get("X-AppEngine-Region")
	xCity    = h.Get("X-AppEngine-City")
	ipAdd := getIpAdd(w,r)
 
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	uaMobile := ua.Mobile()
	uaPlatform := ua.Platform()
	nameb, versionb = ua.Browser()
	
	FUNC_CODE := "VALUSER"
	FL_VALID_USER2, xGROUP_ID, _ , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	if FL_VALID_USER2 == true {
		uaBot := fmt.Sprintf("%t", ua.Bot())
		uaMobile := fmt.Sprintf("%t", uaMobile)
		uaOS := ua.OS()
 
		buffer4.WriteString(fmt.Sprintf("{"))
		buffer4.WriteString(fmt.Sprintf("\"SYS_VER\": \"1\","))
		buffer4.WriteString(fmt.Sprintf("\"RULE_NUM\": \"0\","))
		buffer4.WriteString(fmt.Sprintf("\"DISP_TYP\": \"\","))	
		buffer4.WriteString(fmt.Sprintf("\"DEST_URL\": \"\","))
		buffer4.WriteString(fmt.Sprintf("\"TRIG_ID\":	\"\","))
		buffer4.WriteString(fmt.Sprintf("\"ADS_ID\": \"\","))
		buffer4.WriteString(fmt.Sprintf("\"CAP_LIMIT_DAILY\": \"100\","))	
		buffer4.WriteString(fmt.Sprintf("\"DESKTOP_ACCESSED\": \"%s\",",deskName))
		buffer4.WriteString(fmt.Sprintf("\"URL_ACESSED\": \"%s\",", uPath))	
		buffer4.WriteString(fmt.Sprintf("\"URL_REFERER\": \"%s\",", uReferer))	
		buffer4.WriteString(fmt.Sprintf("\"ACCESS_TIME\": \"\","))	
		buffer4.WriteString(fmt.Sprintf("\"COUNTRY\": \"%s\",", xCountry))	
		buffer4.WriteString(fmt.Sprintf("\"REGION\": \"%s\",", xRegion))
		buffer4.WriteString(fmt.Sprintf("\"CITY\": \"%s\",", xCity))	
		buffer4.WriteString(fmt.Sprintf("\"IP_ADDRESS\": \"%s\",", ipAdd))	
		buffer4.WriteString(fmt.Sprintf("\"IS_BOT\": \"%s\",", uaBot))
		buffer4.WriteString(fmt.Sprintf("\"IS_MOBILE\": \"%s\",", uaMobile))
		buffer4.WriteString(fmt.Sprintf("\"OS_NAME\": \"%s\",", uaOS))
		buffer4.WriteString(fmt.Sprintf("\"PLATFORM\": \"%s\",", uaPlatform))	
		buffer4.WriteString(fmt.Sprintf("\"BROWSER_NAME\": \"%s\",", nameb))
		buffer4.WriteString(fmt.Sprintf("\"BROWSER_VERSION\": \"%s\",", versionb))
		buffer4.WriteString(fmt.Sprintf("\"UID\": \"%s\"", uid))
		buffer4.WriteString(fmt.Sprintf("}"))
		
		FL_FOUND_RULE, _, PROC_ERR_MSG, ruleNum, dispType, DestURL, TrigID, AdsID = rulesProcessor(w, r, buffer4.String())
		
	}
 
	return FL_VALID_USER2, xGROUP_ID, FL_FOUND_RULE, PROC_ERR_MSG, dispType, AdsID, ruleNum, xRegion, xCity, nameb, versionb, DestURL, TrigID
}

//checks if the system is a new installation
//if it is, it redirects to an installer page 
func checkSysIns(w http.ResponseWriter, r *http.Request) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSUSERS").Limit(1)
	//log.Panicf("[S0063]")
    users := make([]TDSUSERS, 0, 1)
    //log.Printf("datastoreClient.Get()  [11866]")
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		//panic(err)
		//log.Printf("checkSysIns() ERROR: %v", err)
	}
	recCount := 0
	for _, _ = range users {
		recCount++
	}
	if recCount <= 0 {
		sysReq := fmt.Sprintf("/ulapph-router?RTR_FUNC=NEW_INSTALL&CONFIRM=")
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
}

//prompts user to register	
func promptRegister(w http.ResponseWriter, r *http.Request, uid string, xCountry, provider, avatar, email string) {

	if uid == "" {
		return
	}
	checkSysIns(w,r)
	if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
	  panic(err)
	}
	if SYS_REGISTRATION_MANUAL == true {
		message := fmt.Sprintf("[U00181] ERROR: Registration is not allowed. Only administrators can add new users to this site. Kindly contact admin [%v] to request for your account.", ADMMAIL)
		if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
		  panic(err)
		}
		if err := sysmsgErrorTemplate.Execute(w, message); err != nil {
		  panic(err)
		}
		//fmt.Fprintf(w, "<div class=\"info\"><a href=\"https://www.ulapph.com\">Register</a> for an account at OPO.ULAPPH.COM instead.</div>")
		//fmt.Fprintf(w, "<div class=\"warning\"><a href=\"/admin-setup\">Click here</a> to manage users if you are an administrator.</div>")	
		fmt.Fprintf(w, "<div class=\"error\"><a href=\"/logout\">Logout</a> from this system if you don't want to proceed.</div>")	
		if err := htmlFooterModal.Execute(w, ""); err != nil {
		  panic(err)
		}
		return
	}
   fmt.Fprintf(w, "<div class=\"info2\"><img src=\"/static/img/ulapph-logo.png\" title=\"ULAPPH Logo\" width=200 height=100></img></div>")
   fmt.Fprintf(w, "<div class=\"info2\"><h3>Welcome to %v</h3>", getSchemeUrl(w,r))
   fmt.Fprintf(w, "<p>You are logged in as <b>%v</b>", uid)
   fmt.Fprintf(w, "<br><img src='%v' width=20 height=20 title='%v'></div>", avatar, provider)
   fmt.Fprintf(w, "<div class=\"info2\">%v</div>", INFO_ABOUT_US)
	TEMPDATA := TEMPSTRUCT2{
		STR_FILLER1: xCountry,
		STR_FILLER2: r.Referer(),
		STR_FILLER3: provider,
		STR_FILLER4: uid,
		STR_FILLER5: email,
		STR_FILLER6: avatar,
	}
   if err := userRegistrationTemplate.Execute(w, &TEMPDATA); err != nil {
	 panic(err)
   }
   return
}

//concatenates the access string composed of platform, browser, ip address, operating system
//used by logger to know who is accessing the system 
func getAccessString(w http.ResponseWriter, r *http.Request, mode string) (viaStr string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	defer cancel()
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	uaPlatform := ua.OS()
	uaOS := ua.OS()
	nameb, _ := ua.Browser()
	ipAdd := getIpAdd(w,r)
	
	if uaPlatform == "" || nameb == "" {
		switch mode {
		case "C":
			viaStr = fmt.Sprintf("via unknown device using (%v) with (%v) browser and (%v) IP address", uaPlatform, nameb, ipAdd)
		default:
			viaStr = fmt.Sprintf("via unknown device <img src=\"/static/img/icon-unknown.png\" width=50 height=50> using (%v) with (%v) browser and (%v) IP address", uaPlatform, nameb, ipAdd)
		}		
	} else {
		FL_DESKTOP := checkDesktop(w,r)
		if FL_DESKTOP == true {
			switch mode {
			case "C":
				viaStr = fmt.Sprintf("via desktop using (%v) with (%v) browser and (%v) IP address", uaPlatform, nameb, ipAdd)
			default:
				viaStr = fmt.Sprintf("via desktop <img src=\"/static/img/icon-pc.png\" width=50 height=50> using (%v) with (%v) browser and (%v) IP address", uaPlatform, nameb, ipAdd)
			}
		} else {
			switch mode {
			case "C":
				viaStr = fmt.Sprintf("via mobile using (%v) with (%v) browser and (%v) IP address", uaPlatform, nameb, ipAdd)
			default:
				viaStr = fmt.Sprintf("via mobile <img src=\"/static/img/icon-mobile.png\" width=50 height=50> using (%v) with (%v) browser and (%v) IP address", uaPlatform, nameb, ipAdd)
			}
			
		}
		uasOS2 := strings.Replace(uaOS, " ", "", -1)
		ncStatsOS := fmt.Sprintf("STATS.OS.%s", uasOS2)
		time.AfterFunc(5*time.Second, func() {
            laterQueueCounterIncrement(c, ncStatsOS)
        })
		nameb2 := strings.Replace(nameb, " ", "", -1)
		ncStatsBR := fmt.Sprintf("STATS.BROWSER.%s", nameb2)
		time.AfterFunc(5*time.Second, func() {
            laterQueueCounterIncrement(c, ncStatsBR)
        })
		ncStatsIP := fmt.Sprintf("STATS.IP.%s", ipAdd)
		time.AfterFunc(5*time.Second, func() {
            laterQueueCounterIncrement(c, ncStatsIP)
        })
	}
	//append server name
	viaStr = fmt.Sprintf("[~%v] %v", SYS_SERVER_NAME, viaStr)
	return viaStr
}

//gets the country, region and city details of the user accessing the system
//it uses the default data being passed by GAE for each http request 
func getGeoString(w http.ResponseWriter, r *http.Request) (geoStr string) {
	h := r.Header
	xCountry := h.Get("X-AppEngine-Country")
	xRegion  := h.Get("X-AppEngine-Region")
	xCity    := h.Get("X-AppEngine-City")
	geoStr = fmt.Sprintf("%s.%s.%s.user", xCountry, xRegion, xCity)
	return geoStr
}

//gets the country for the given http request
//it uses the default data being passed by GAE for each http request 
func getCountry(w http.ResponseWriter, r *http.Request) (geoCountry string) {
	h := r.Header
	xCountry := h.Get("X-AppEngine-Country")
	geoCountry = fmt.Sprintf("%s", xCountry)
	return geoCountry
}
//this returns the SID only
func checkWpUwmOnly(w http.ResponseWriter, r *http.Request, uid, unum string) (FL_UWMWPONLY bool) {
	//c := appengine.NewContext(r)
	//log.Printf("checkWpUwmOnly()")
	if unum != "" {
		cfgName := fmt.Sprintf("SYSTEM_UWM_WALLP_WPUWMONLY_%v_%v", unum, uid)
		//log.Printf("cfgName: %v", cfgName)
		cfgVal, _ := getTDSCNFG(w,r,0,cfgName)
		//log.Printf("cfgVal: %v", cfgVal)
		if cfgVal == "true" {
			FL_UWMWPONLY = true
		} else {
			FL_UWMWPONLY = false
		}
	}
	return FL_UWMWPONLY
}

//gets the SID (TDSMEDIA-nn) where the UWM settings for the given UWM is stored
//this returns the SID only
func getUWMSource(w http.ResponseWriter, r *http.Request, uid, unum string) (sid string) {
	switch {	
		case unum == "":
			//docID := 0
			cfgName := "SYSTEM_Top_List_Menu_Media_ID"
			_, docID := getTDSCNFG(w,r,1,cfgName)
			sid = fmt.Sprintf("TDSMEDIA-%v",docID)
		case unum == "main":
			cfgName := fmt.Sprintf("PERSONAL_Windows_Media_ID_%v", uid)
			_, docID := getTDSCNFG(w,r,1,cfgName)
			sid = fmt.Sprintf("TDSMEDIA-%v",docID)		
		default:
			cfgName := fmt.Sprintf("SYSTEM_UWM_%v_%v", unum, uid)
			sid, _ = getTDSCNFG(w,r,0,cfgName)
	}
	return sid				
}

//gets the SID (TDSMEDIA-nn) where the Topics settings for the given UWM is stored
//this returns the SID only 
func getTopicsSource(w http.ResponseWriter, r *http.Request, uid, unum string) (sid string) {
	cfgName := fmt.Sprintf("SYSTEM_TOPICS_%v_%v", unum, uid)
	sid, _ = getTDSCNFG(w,r,0,cfgName)
	return sid
					
}
//D0113
//gets the SID (TDSMEDIA-nn) where the Custom Search settings for the given UWM is stored
//this returns the SID only 
func getCustomSearchSource(w http.ResponseWriter, r *http.Request, uid string) (sid string) {
	cfgName := fmt.Sprintf("PERSONAL_Search_Media_ID_%v", uid)
	_, docID := getTDSCNFG(w,r,1,cfgName)
	if docID > 0 {
		sid = fmt.Sprintf("TDSMEDIA-%v",docID)
	} else {
		sid = ""
	}
	return sid					
}
//D0066
//gets the SID (TDSMEDIA-nn) where the Bot settings for the given UWM is stored
func getBotSource(w http.ResponseWriter, r *http.Request, uid, unum string) (sid string) {
	cfgName := fmt.Sprintf("SYSTEM_BOT_%v_%v", unum, uid)
	sid, _ = getTDSCNFG(w,r,0,cfgName)
	if sid == "" {
		uid = REPMAIL
		cfgName := fmt.Sprintf("SYSTEM_BOT_%v_%v", unum, uid)
		sid, _ = getTDSCNFG(w,r,0,cfgName)
	}
	return sid
}
//displays the personal UWM settings
func getPersonalWindows(w http.ResponseWriter, r *http.Request, uid, alFlag, SID string) {
	switch {
		case SID != "" && SID != "setuwm":
			SPL := strings.Split(SID,"-")
			TARGET := ""
			DOC_ID := ""
			MEDIA_ID := ""
			if len(SPL[0]) > 1 {
				TARGET = SPL[0]
				DOC_ID = SPL[1]
			}
			
			if TARGET == "TDSMEDIA" {
				MEDIA_ID = DOC_ID
			} else {
				return
			}
			docID := str2int(MEDIA_ID)
			
			BLOB_KEY := ""
			BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
			
			appText := getBlobTextNoComms(w, r, BLOB_KEY)
			fmt.Fprintf(w, "%v", appText)
	
			
		default:
			if uid == "guest" && SYS_GUEST_UWM == true {
				uwmPub := getPubUWM(w,r,uid)
 
				if strings.TrimSpace(uwmPub) == "" {
 
					renderStaticTemplates(w,r,".pub-uwm")
				} else {
 
					fmt.Fprintf(w, "%v", uwmPub)
				}
				return
			}
			
			if uid != "guest" && alFlag == "Y" {	
				cKey := fmt.Sprintf("WINDOWS_PERSONAL_CACHE_%v", uid)
				cfgName := fmt.Sprintf("PERSONAL_Windows_Media_ID_%v", uid)
				WINDOWS_PERSONAL_CACHE := ""
				WINDOWS_PERSONAL_CACHE = getStrMemcacheValueByKey(w,r,cKey)
				
				if WINDOWS_PERSONAL_CACHE == "" {
				
					var buf2 bytes.Buffer
					//get config id
					docID := 0
					_, docID = getTDSCNFG(w,r,1,cfgName)
					
					if docID > 0 {
						BLOB_KEY := ""
						BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	

						appText := getBlobTextNoComms(w, r, BLOB_KEY)
						//fmt.Fprintf(w, "%v", appText)
						buf2.WriteString(fmt.Sprintf("%v\n", appText))						
					}
			
					defuwms := getDefUwms(w,r)
					buf2.WriteString(fmt.Sprintf("%v", defuwms))	
			
					//update cache
					putBytesToMemcacheWithoutExp(w,r,cKey,buf2.Bytes())
					fmt.Fprintf(w, "%v", buf2.String())
					return
				} else {
					fmt.Fprintf(w, "%v", WINDOWS_PERSONAL_CACHE)
					return
				}
			}
	}
}
//D0095
func getBoltTDSCNFGByKey(w http.ResponseWriter, r *http.Request, bKey string) (p *TDSCNFG, err error) {
	if SYS_BOLT_ENABLED == false {
		return nil, nil
	}
	db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("TDSCNFG"))
		v := b.Get([]byte(bKey))
		res := new(TDSCNFG)
		err = json.Unmarshal(v, res)
		if err != nil {
			//log.Printf("getBoltTDSCNFGByKey() [json.Unmarshal] error: %v", err)
			p = nil
			return err
		} else {
			p = res
			return nil
		}
	})
	return p, err
}
//D0095
func getBoltTDSUSERSByKey(w http.ResponseWriter, r *http.Request, bKey string) (p []TDSUSERS, err error) {
	if SYS_BOLT_ENABLED == false {
		return nil, nil
	}
	db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("TDSUSERS"))
		v := b.Get([]byte(bKey))
		if v == nil {
			return nil
		}
		//res := new([]TDSUSERS)
		err = json.Unmarshal(v, &p)
		if err != nil {
			//log.Printf("getBoltTDSUSERSByKey() [json.Unmarshal] error: %v", err)
			p = nil
			return err
		} else {
			//p = res
			return nil
		}
	})
	return p, err
}
//D0095
func getBoltTDSCATSByKey(w http.ResponseWriter, r *http.Request, bKey string) (p []TDSCATS, err error) {
	if SYS_BOLT_ENABLED == false {
		return nil, nil
	}
	db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("TDSCATS"))
		v := b.Get([]byte(bKey))
		//res := new([]TDSCATS)
		if v == nil {
			return nil
		}
		err = json.Unmarshal(v, &p)
		if err != nil {
			//log.Printf("getBoltTDSCATSByKey() [json.Unmarshal] error: %v", err)
			p = nil
			return err
		} else {
			//p = res
			return nil
		}
	})
	return p, err
}
//gets the TDSCNFG config given type and config name
func getTDSCNFG(w http.ResponseWriter, r *http.Request, vtype int, cfgName string) (tval string, nval int) {
	if SYS_STATELESS_SERVER == true {
		return "",0
	}
    c, cancel := context.WithCancel(context.Background())
	defer cancel()
    //D0086
    datastoreClient := createClientDS()
	key := datastore.NameKey("TDSCNFG", cfgName, nil)
	q := datastore.NewQuery("TDSCNFG").Filter("__key__ =", key)
	//log.Panicf("[S0616]")
    config := make([]TDSCNFG, 0, 1)
    //log.Printf("datastoreClient.Get()  [12219]")
	if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
		//panic(err)
	}
	for _, x := range config {
		switch vtype {
			case 1:
				nval = x.NUM_VAL
			default:
				tval = x.TXT_VAL
		}
		break
	}
	return tval, nval
}

//gets the contacts list for the given user 
func getContactsList(w http.ResponseWriter, r *http.Request, uid, mode string) (resp string) {
	//c := appengine.NewContext(r)
	
	cKey := fmt.Sprintf("CONTACTS_PERSONAL_CACHE_%v", uid)
	cfgName := fmt.Sprintf("PERSONAL_Contacts_Media_ID_%v", uid)
	CONTACTS_PERSONAL_CACHE := ""
	CONTACTS_PERSONAL_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	
	if CONTACTS_PERSONAL_CACHE == "" {
	
		var buf2 bytes.Buffer
		//get config id
		docID := 0
		_, docID = getTDSCNFG(w,r,1,cfgName)
		
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		for s.Scan() {
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					buf2.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			} else {
				buf2.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		}
		//update cache
		putBytesToMemcacheWithoutExp(w,r,cKey,buf2.Bytes())
		CONTACTS_PERSONAL_CACHE = buf2.String()
	}
 
	if CONTACTS_PERSONAL_CACHE == "" {
		return ""
	}
	switch mode {
		
		case "semaphore":
			s := bufio.NewScanner(strings.NewReader(CONTACTS_PERSONAL_CACHE))
			s.Scan()
			var buf bytes.Buffer
			for s.Scan() {
				templ := strings.Split(s.Text(),",")
				if len(templ) > 0 {
					if templ[20] != "" {
						newCon := strings.Replace(templ[20], " ", "", -1)
						newCon2 := strings.Replace(newCon, "-", "", -1)
						newCon3 := strings.Replace(newCon2, "+", "", -1)
						newCon4 := strings.Replace(newCon3, "(", "", -1)
						newCon5 := strings.Replace(newCon4, ")", "", -1)
						buf.WriteString(fmt.Sprintf("<option value=\"%v\">%v, %v, %v - %v</option>", newCon5, templ[2], templ[0], templ[1], newCon5))
					}	
				}
			}
 
			resp = buf.String()	
		
	}
	return resp
}
 
//gets the public wallpaper list
func getPubWpList(w http.ResponseWriter, r *http.Request, uid string) (wpList string) {
	//c := appengine.NewContext(r)

	cKey := fmt.Sprintf("PUBLIC_WP_LIST")
	cfgName := fmt.Sprintf("SYSTEM_Public_WP_List_Media_ID")
	PUBLIC_WP_LIST := ""
	PUBLIC_WP_LIST = getStrMemcacheValueByKey(w,r,cKey)
	
	if PUBLIC_WP_LIST == "" {
	
		//get config id
		docID := 0
		_, docID = getTDSCNFG(w,r,1,cfgName)
		
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		PUBLIC_WP_LIST_STR := ""
		for s.Scan() {
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					if PUBLIC_WP_LIST_STR != "" {
						PUBLIC_WP_LIST_STR = fmt.Sprintf("%v@888@%v", PUBLIC_WP_LIST_STR, s.Text())
					} else {
						PUBLIC_WP_LIST_STR = fmt.Sprintf("%v", s.Text())
					}
				}
			}
		}
		//update cache
		putStrToMemcacheWithoutExp(w,r,cKey,PUBLIC_WP_LIST_STR)
		
		PUBLIC_WP_LIST = PUBLIC_WP_LIST_STR
	}
	return PUBLIC_WP_LIST
 
}
 
//gets the public UWM settings
func getPubUWM(w http.ResponseWriter, r *http.Request, uid string) (uwmData string) {
	//c := appengine.NewContext(r)
	
	//newconfigtemplate
	cKey := fmt.Sprintf("PUBLIC_UWM")
	cfgName := fmt.Sprintf("SYSTEM_Public_UWM_Media_ID")
	PUBLIC_UWM_DATA := ""
	//PUBLIC_WP_CTR := 0
	PUBLIC_UWM_DATA = getStrMemcacheValueByKey(w,r,cKey)
 
	if strings.TrimSpace(PUBLIC_UWM_DATA) == "" {
	
		//get config id
		docID := 0
		_, docID = getTDSCNFG(w,r,1,cfgName)
 
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
		
 
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		for s.Scan() {
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					buf.WriteString(fmt.Sprintf("%v", s.Text()))
				}
			} else {
				buf.WriteString(fmt.Sprintf("%v", s.Text()))
			}
		}
		defuwms := getDefUwms(w,r)
		buf.WriteString(fmt.Sprintf("%v", defuwms))
		
		//update cache
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
 
		PUBLIC_UWM_DATA = buf.String()
	}
	return PUBLIC_UWM_DATA
}

//displays the home using a gallery format 
func showHomeGallery(w http.ResponseWriter, r *http.Request) {

	if SYS_SITE_PRIVATE == true {
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
		if FL_PROC_OK == false {return}
	}
	
	//get autocomps array
	if err := htmlWidgetBrowserS.Execute(w, ""); err != nil {
	  panic(err)
	}
	parseAutocompEntries(w,r)
	
	PUSH_LEFT_DATA := ""
	if GITURL_PUSH_LEFT == "" {
		//display slide contents
		PUSH_LEFT_DATA = getPushContents(w,r,"PUSH_LEFT_DATA")
	} else {
		//add server name
		git := fmt.Sprintf("%v%v", GITURL_PUSH_LEFT, SYS_SERVER_NAME)
		searchChan := make(chan []byte)
		go exec_FetchUrlChan(w,r,searchChan,git)
		PUSH_LEFT_DATA = string(<- searchChan)
	}
	
	PUSH_RIGHT_DATA := ""
	if GITURL_PUSH_RIGHT == "" {
		//dsplay article contents
		PUSH_RIGHT_DATA = getPushContents(w,r,"PUSH_RIGHT_DATA")
	} else {
		//add server name
		git := fmt.Sprintf("%v%v", GITURL_PUSH_RIGHT, SYS_SERVER_NAME)
		searchChan := make(chan []byte)
		go exec_FetchUrlChan(w,r,searchChan,git)
		PUSH_RIGHT_DATA = string(<- searchChan)
	}
	
	GITURL_PUSH_TOP_DATA := ""
	searchChan := make(chan []byte)
	go exec_FetchUrlChan(w,r,searchChan,GITURL_PUSH_TOP)
	GITURL_PUSH_TOP_DATA = string(<- searchChan)
 
	GITURL_PUSH_BOTTOM_DATA := ""
	searchChan = make(chan []byte)
	go exec_FetchUrlChan(w,r,searchChan,GITURL_PUSH_BOTTOM)
	GITURL_PUSH_BOTTOM_DATA = string(<- searchChan)		
	
	TEMPDATA := TEMPSTRUCT2{
		STR_FILLER1: APP_DESC,
		STR_FILLER2: APP_LEFT_BUTTON,
		STR_FILLER3: APP_RIGHT_BUTTON,
		STR_FILLER4: APP_TOP_BUTTON,
		STR_FILLER5: APP_BOTTOM_BUTTON,
		STR_FILLER6: SYS_GUEST_CHAT_URL,
		STR_FILLER7: SYS_ADD_THIS_PUB_ID,
		BOOL_FILLER1: SYS_GUEST_LOGIN,
		BOOL_FILLER2: SYS_REGISTRATION_MANUAL,
		HTM_FILLER5: template.HTML(SITE_SLOGAN),
		STR_FILLER9: SYS_DISP_LOGO,
		STR_FILLER10: APP_PLAY_BUTTON,
		STR_FILLER11: SYS_GUEST_CHAT_URL,
		HTM_FILLER1: template.HTML(PUSH_LEFT_DATA),
		HTM_FILLER2: template.HTML(PUSH_RIGHT_DATA),
		HTM_FILLER3: template.HTML(GITURL_PUSH_TOP_DATA),
		HTM_FILLER4: template.HTML(GITURL_PUSH_BOTTOM_DATA),
	}

	if err := htmlWidgetBrowserS2.Execute(w, &TEMPDATA); err != nil {
	  panic(err)
	}
	return
}
//checks any homepage settings if any custom theme is to be used
func checkHomepageSettings(w http.ResponseWriter, r *http.Request, uid, redirectURL string) {
    //c := appengine.NewContext(r)
    ulapphDebug(w,r,"info", fmt.Sprintf("checkHomepageSettings() %v", ""))
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	redURL := ""
	if SYS_SITE_PRIVATE == true {
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
		if FL_PROC_OK == false {return}
	}
	if SYS_DISP_HOMEPAGE_CFG == true {
		if SYS_CUSTOM_HOME_THEME == true {
			//get the media id containing the theme
			cKey := fmt.Sprintf("CUSTOM_HOMEPAGE_THEME")
			htemp := getStrMemcacheValueByKey(w,r,cKey)
			//log.Printf("htemp: %v", htemp)
			if strings.TrimSpace(htemp) == "" {
				_, mid := getTDSCNFG(w,r,1,cKey)
				//log.Printf("mid: %v", mid)
				if mid > 0 {
					//log.Printf("mid > 0")
					_ = renderCustomTemplates(w,r,"gotId",cKey,"",fmt.Sprintf("%v",mid))
				}

			} else {
				//log.Printf("got htemp: %v", htemp)
				_ = renderCustomTemplates(w,r,"gotId",cKey,"",strings.TrimSpace(htemp))
			}
			updateUserActiveData(w, r, c, "", "homepage-custom")
			//else use default
			return
		}
		if sysCacheStr["SYSTEM_HOMEPAGE_SETTINGS"] != "" {
			//get from memory
			redURL = sysCacheStr["SYSTEM_HOMEPAGE_SETTINGS"]
			
		} else {
			//get from settings
			cKey := fmt.Sprintf("SYSTEM_HOMEPAGE_SETTINGS")
			redURL = getStrMemcacheValueByKey(w,r,cKey)
			if redURL != "" {
				//ok
				sysCacheStr["SYSTEM_HOMEPAGE_SETTINGS"] = redURL
			} else {
				cfgName := "SYSTEM_HOMEPAGE_SETTINGS"
				redURL, _ = getTDSCNFG(w,r,0,cfgName)
				if redURL != "" {
					cKey := fmt.Sprintf("SYSTEM_HOMEPAGE_SETTINGS")
					putStrToMemcacheWithoutExp(w,r,cKey,redURL)
					sysCacheStr["SYSTEM_HOMEPAGE_SETTINGS"] = redURL
				}
			}
		}
	}
	if redURL == "" {
        //redURL = "/website?q=home"
        //redURL = "/uwm"
        redURL = fmt.Sprintf("/static/pwa/?UID=%v", uid)
	}
	ulapphDebug(w,r,"info", fmt.Sprintf("redURL: %v", redURL))
	http.Redirect(w, r, redURL, http.StatusFound)
	return
}

//gets hosts available which can be used to wall copy 
func getWallHosts(w http.ResponseWriter, r *http.Request) string {
	//c := appengine.NewContext(r)
	
	TOT := 0
	HOST_LIST := ""
	
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	
	if IS_SEARCH_SERVER == "N" {
		TOT, HOST_LIST = fetchHostList(w,r)	
	} else {
		TOT, HOST_LIST = getHostList(w,r)
	}
	
	if TOT > 1 {
	
		var buf bytes.Buffer
		scanner := bufio.NewScanner(strings.NewReader(HOST_LIST))
		
		for scanner.Scan() {
			if scanner.Text() != "" {
				SPL := strings.Split(scanner.Text(), "|")
				if len(SPL) >= 2 {
					tURL := SPL[0]
					buf.WriteString(fmt.Sprintf("<option value=\"%v\">%v</option>", strings.TrimSpace(tURL), strings.TrimSpace(tURL)))
					buf.WriteString("")
				}
 
			}
		}
		HOST_LIST = buf.String()
	}
	return HOST_LIST
}
//put search index for slides
func putSearchIndexS(w http.ResponseWriter, r *http.Request, indexName string, thisIdxKey string, slideIdx *IDX_TDSSLIDE) {
	return
}
 
//put search index for articles
func putSearchIndexA(w http.ResponseWriter, r *http.Request, indexName string, thisIdxKey string, slideIdx *IDX_TDSARTL) {
	return
}

//put search index for media 
func putSearchIndexM(w http.ResponseWriter, r *http.Request, indexName string, thisIdxKey string, slideIdx *IDX_TDSMEDIA) {
	return
}

//put search index for icons 
func putSearchIndexI(w http.ResponseWriter, r *http.Request, indexName string, thisIdxKey string, slideIdx *IDX_TDSICONS) {
	return
}

//put search index for items for sale 
func putSearchIndexF(w http.ResponseWriter, r *http.Request, indexName string, thisIdxKey string, slideIdx *IDX_FORSALE) {
	return
}

//put search index for items for wat to buy
func putSearchIndexB(w http.ResponseWriter, r *http.Request, indexName string, thisIdxKey string, slideIdx *IDX_WTBUY) {
	return
}

//put search index for items for profiles  
func putSearchIndexP(w http.ResponseWriter, r *http.Request, indexName string, thisIdxKey string, slideIdx *IDX_TDSPROF) {
	return
}

//put search index for items for profiles  
func runTopicsHaveNeed(w http.ResponseWriter, r *http.Request, UID, mode string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()	
	//get from profile
	q := datastore.NewQuery("TDSPROF").Filter("UID =", UID).Limit(1)
    profile := make([]TDSPROF, 0, 1)
    //log.Printf("datastoreClient.Get()  [12602]")
	if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
		 panic(err)
	}
	
	pstr := ""
	for _, x := range profile{
		if mode == "have" {
			pstr = x.I_HAVE_TEXT
		} else {
			pstr = x.I_NEED_TEXT
		}
	}
	s := bufio.NewScanner(strings.NewReader(pstr))

	for s.Scan() {
		if len(s.Text()) > 0 {
			thisStr := fmt.Sprintf("%v", s.Text())
			if string(thisStr[0]) != "#" {
				SEARCH_KEY := s.Text()
				data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_GOOGLE_SEARCH@888@%v@888@%v", SEARCH_KEY, UID)
				sendChannelMessage(w,r,UID,data)
				dummyCmd(w,r,UID)
			}
		}
	}
}

//function which serves the /wall url
//used for sending messages or copying files via wall 
func ulapphWall(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//WALL_KEY := r.FormValue("wall_key")
	remKey := r.FormValue("wall_key")
	if remKey != CMD_GEN_KEY {
		msgDtl := fmt.Sprintf("[U00201] ERROR: Invalid operation.")
		msgTyp := "error"
		action := "U00201"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
	_, uid := checkSession(w,r)
	WALL_FUNC := r.FormValue("WALL_FUNC")
    SYS_RC_HOST_LIST := getWallHosts(w,r)
    //D0086
    datastoreClient := createClientDS()
	switch {
	case WALL_FUNC == "SEND_MSG":
		remHost := r.FormValue("remHost")
		toUser := r.FormValue("remUser")
		fromUser := r.FormValue("uid")
		srcHost := r.FormValue("srcHost")
		message := r.FormValue("wm")
		k, _ := url.Parse(remHost)
		m, _ := url.Parse(getSchemeUrl(w,r))
		//save entry to guestbook
		dsKey := getGuestbookKey(uid)
		g := Greeting{
				MsgID: dsKey,
				//MsgType: "Wall",
				Content: message,
				Date:    time.Now(),
				Flow: "",
				OwnerPic: "/static/img/self.png",
				SenderPic: "/static/img/sender.png",
				Status: "Unread",
				OutTo: fmt.Sprintf("%v|%v", toUser, remHost),
		}
		if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
				g.Author = fromUser
		}
		key := datastore.NameKey("Greeting", dsKey, nil)
        _, err := datastoreClient.Put(c, key, &g)
        //log.Printf("datastoreClient.Put()  [12679]")
		//log.Panicf("[S0072]")
		if err != nil {
				 panic(err)
		}
		//encode msg before sending
		encMessage := base64.StdEncoding.EncodeToString([]byte(message))
		if k.Host == m.Host {
			msgDtl := fmt.Sprintf("[U00164] ERROR: Cannot send to same ulapph site.")
			fmt.Fprintf(w, "<font color=red>%v</font>", msgDtl)
		} else {
			getDataStr := fmt.Sprintf("%v/wall?WALL_FUNC=SEND_MSG2&remHost=%v&fromUser=%v&srcHost=%v&toUser=%v&wm=%v&wall_key=%v", remHost, remHost, fromUser, srcHost, toUser, encMessage, remKey)
			http.Redirect(w, r, getDataStr, http.StatusFound)
			return
		}
		return
	case WALL_FUNC == "SEND_MSG2":
		toUser := r.FormValue("toUser")
		fromUser := r.FormValue("fromUser")
		fromUserHost := r.FormValue("srcHost")
		message := r.FormValue("wm")
		//decode message
		messageb, _ := base64.StdEncoding.DecodeString(message)
		//validate user
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", fromUser, FUNC_CODE)
		if FL_VALID_USER != true {
			msgDtl := fmt.Sprintf("[U00161] ERROR: Unregistered user (%v). Register first.", fromUser)
			msgTyp := "error"
			action := "U00161"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		notifyGuestbook(w, r , "autoNotifyPeopleGB", toUser,  string(messageb), fmt.Sprintf("%v|%v", fromUser, fromUserHost))
		fmt.Fprintf(w, "Wall message sent!<br><script>window.opener = self; window.close();</script>")
		return
	case WALL_FUNC == "IDX_COPY":
		//if copy initiated from search results
		SOURCE_TBL := r.FormValue("SOURCE_TBL")
		DOC_KEY := r.FormValue("DOC_KEY")
		TITLE := r.FormValue("TITLE")
		SID := DOC_KEY
		switch SOURCE_TBL {
			case "TDSMEDIA":
				MEDIA_ID := ""
				SPL := strings.Split(DOC_KEY,"-")
				if len(SPL) > 1 {
					MEDIA_ID = SPL[1]
				}
				//sysReq := fmt.Sprintf("/wall?WALL_FUNC=MEDIA_COPY&MEDIA_ID=%v&SID=%v&TITLE=%v&wall_key=%v", MEDIA_ID, SID, TITLE, CMD_GEN_KEY)
				sysReq := fmt.Sprintf("/wall?WALL_FUNC=MEDIA_COPY&MEDIA_ID=%v&SID=%v&TITLE=%v&wall_key=%v", MEDIA_ID, SID, TITLE, remKey)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			case "TDSICONS":
				ICON_ID := ""
				SPL := strings.Split(DOC_KEY,"-")
				if len(SPL) > 1 {
					ICON_ID = SPL[1]
				}
				//sysReq := fmt.Sprintf("/wall?WALL_FUNC=ICON_COPY&ICON_ID=%v&wall_key=%v", ICON_ID, CMD_GEN_KEY)
				sysReq := fmt.Sprintf("/wall?WALL_FUNC=ICON_COPY&ICON_ID=%v&wall_key=%v", ICON_ID, remKey)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			case "TDSSLIDE":
				DOC_ID := ""
				SPL := strings.Split(DOC_KEY,"-")
				if len(SPL) > 1 {
					DOC_ID = SPL[1]
				}
				//sysReq := fmt.Sprintf("/wall?WALL_FUNC=SLIDE_COPY&DOC_ID=%v&SID=%v&TITLE=%v&wall_key=%v", DOC_ID, SID, TITLE, CMD_GEN_KEY)
				sysReq := fmt.Sprintf("/wall?WALL_FUNC=SLIDE_COPY&DOC_ID=%v&SID=%v&TITLE=%v&wall_key=%v", DOC_ID, SID, TITLE, remKey)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			case "TDSARTL":
				DOC_ID := ""
				SPL := strings.Split(DOC_KEY,"-")
				if len(SPL) > 1 {
					DOC_ID = SPL[1]
				}
				//sysReq := fmt.Sprintf("/wall?WALL_FUNC=ARTICLE_COPY&DOC_ID=%v&SID=%v&TITLE=%v&wall_key=%v", DOC_ID, SID, TITLE, CMD_GEN_KEY)
				sysReq := fmt.Sprintf("/wall?WALL_FUNC=ARTICLE_COPY&DOC_ID=%v&SID=%v&TITLE=%v&wall_key=%v", DOC_ID, SID, TITLE, remKey)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			default:
				msgDtl := fmt.Sprintf("[U00179] ERROR: Item cannot be copied.")
				msgTyp := "error"
				msgURL := "/?q=home&ERROR=invalidFormat"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Carousel homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
		}
	case WALL_FUNC == "SLIDE_COPY":
		fmt.Fprintf(w, "Copying slide....<br>")
		DOC_ID := r.FormValue("DOC_ID")
		SID := r.FormValue("SID")
		TITLE := r.FormValue("TITLE")
		uReferrer := r.FormValue("uReferrer")
		fmt.Fprintf(w, "DOC_ID: %v<br>", DOC_ID)
		fmt.Fprintf(w, "SID: %v<br>", SID)
		fmt.Fprintf(w, "TITLE: %v<br>", TITLE)
		fmt.Fprintf(w, "uReferrer: %v<br>", uReferrer)
		if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
		  panic(err)
		}
		//get remote host & user
		TEMPDATA := TEMPSTRUCT2{
			STR_FILLER1: SID,
			STR_FILLER2: uid,
			HTM_FILLER1: template.HTML(SYS_RC_HOST_LIST),
		}
		if err := wallContentCopyGetHostUser.Execute(w, &TEMPDATA); err != nil {
		  panic(err)
		}
		if err := htmlFooterModal.Execute(w, ""); err != nil {
		  panic(err)
		}
	case WALL_FUNC == "ARTICLE_COPY":
		fmt.Fprintf(w, "Copying article....")
		DOC_ID := r.FormValue("DOC_ID")
		SID := r.FormValue("SID")
		TITLE := r.FormValue("TITLE")
		uReferrer := r.FormValue("uReferrer")
		fmt.Fprintf(w, "DOC_ID: %v<br>", DOC_ID)
		fmt.Fprintf(w, "SID: %v<br>", SID)
		fmt.Fprintf(w, "TITLE: %v<br>", TITLE)
		fmt.Fprintf(w, "uReferrer: %v<br>", uReferrer)
		if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
		  panic(err)
		}
		//get remote host & user
		TEMPDATA := TEMPSTRUCT2{
			STR_FILLER1: SID,
			STR_FILLER2: uid,
			HTM_FILLER1: template.HTML(SYS_RC_HOST_LIST),
		}
		if err := wallContentCopyGetHostUser.Execute(w, &TEMPDATA); err != nil {
		  panic(err)
		}
		if err := htmlFooterModal.Execute(w, ""); err != nil {
		  panic(err)
		}
	case WALL_FUNC == "MEDIA_COPY":
		fmt.Fprintf(w, "Copying media....")
		MEDIA_ID := r.FormValue("MEDIA_ID")
		SID := r.FormValue("SID")
		TITLE := r.FormValue("TITLE")
		uReferrer := r.FormValue("uReferrer")
		fmt.Fprintf(w, "MEDIA_ID: %v<br>", MEDIA_ID)
		fmt.Fprintf(w, "SID: %v<br>", SID)
		fmt.Fprintf(w, "TITLE: %v<br>", TITLE)
		fmt.Fprintf(w, "uReferrer: %v<br>", uReferrer)
		if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
		  panic(err)
		}
		//get remote host & user
		TEMPDATA := TEMPSTRUCT2{
			STR_FILLER1: SID,
			STR_FILLER2: uid,
			HTM_FILLER1: template.HTML(SYS_RC_HOST_LIST),
		}
		if err := wallContentCopyGetHostUser.Execute(w, &TEMPDATA); err != nil {
		  panic(err)
		}
		if err := htmlFooterModal.Execute(w, ""); err != nil {
		  panic(err)
		}
	case WALL_FUNC == "CONTENT_COPY":
		fmt.Fprintf(w, "Copying content stage3....")
		SID := r.FormValue("SID")
		fmt.Fprintf(w, "SID: %v<br>", SID)
		remHost := r.FormValue("remHost")
		remUser := r.FormValue("remUser")
		//remKey := r.FormValue("remKey")
		srcHost := getSchemeUrl(w,r)
		k, _ := url.Parse(remHost)
		m, _ := url.Parse(getSchemeUrl(w,r))
		fmt.Fprintf(w, "remHost: %v<br>", remHost)
		fmt.Fprintf(w, "getSchemeUrl(w,r): %v<br>", getSchemeUrl(w,r))
		if k.Host == m.Host {
			msgDtl := fmt.Sprintf("[U00172] ERROR: Cannot send to same ulapph site.")
			fmt.Fprintf(w, "<font color=red>%v</font>", msgDtl)
			return
		}
		TARGET := ""
		DOC_ID := ""
		MEDIA_ID := ""
		SPL := strings.Split(SID,"-")
		if len(SPL[0]) > 1 {
			TARGET = SPL[0]
			DOC_ID = SPL[1]
		}
		if TARGET == "TDSMEDIA" {
			MEDIA_ID = DOC_ID
		}
		url := ""
		switch {
			////////////////////////////////
			case TARGET == "TDSSLIDE":
			cKey := fmt.Sprintf("TDSSLIDE_DOCID_CACHE_%v", DOC_ID)
			TDSSLIDE_DOCID_CACHE := ""
			FL_PROC_CACHE_OK := false
			TDSSLIDE_DOCID_CACHE = getStrMemcacheValueByKey(w,r,cKey)
			if TDSSLIDE_DOCID_CACHE != "" {
				//get from cache
				SPL := strings.Split(TDSSLIDE_DOCID_CACHE, CACHE_STORE_DELIM)
				//BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL
				if len(SPL) > 5 {
					TITLE := SPL[5]
					IMG_URL := SPL[6]
					DESC := TITLE
					//SHARED_TO = SPL[7]
					FL_PROC_CACHE_OK = true
					blobkey := fmt.Sprintf("GET_WALL:%vslides?TYPE=SLIDE@888@MODE=NORMAL@888@PARM=LOOP@888@SECS=8@888@DOC_ID=%v@888@SID=%v", srcHost, DOC_ID, SID)
					//url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_SLIDE&DOC_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, DOC_ID, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, CMD_GEN_KEY)
					url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_SLIDE&DOC_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, DOC_ID, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, remKey)
				}
			}
			if FL_PROC_CACHE_OK == false {
				thisDocID := str2int(DOC_ID)
				dsKey := fmt.Sprintf("%d", thisDocID)
				key := datastore.NameKey("TDSSLIDE", dsKey, nil)
				q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
				//log.Panicf("[S0073]")
                slide := make([]TDSSLIDE, 0, 1)
                //log.Printf("datastoreClient.Get()  [12905]")
				if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
					//checkError(w,r,"",err,"CHK_OQ")
					 panic(err)
				  }
				for _, p := range slide{
					TITLE := p.TITLE
					DESC := p.DESC
					IMG_URL := p.TAGS
					blobkey := fmt.Sprintf("GET_WALL:%vslides?TYPE=SLIDE@888@MODE=NORMAL@888@PARM=LOOP@888@SECS=8@888@DOC_ID=%v@888@SID=%v", srcHost, DOC_ID, SID)
					//url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_SLIDE&DOC_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, thisDocID, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, CMD_GEN_KEY)
					url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_SLIDE&DOC_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, thisDocID, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, remKey)
					break
				}
			}
			////////////////////////////////		
			case TARGET == "TDSARTL":
			cKey := fmt.Sprintf("TDSARTL_DOCID_CACHE_%v", DOC_ID)
			TDSARTL_DOCID_CACHE := ""
			FL_PROC_CACHE_OK := false
			TDSARTL_DOCID_CACHE = getStrMemcacheValueByKey(w,r,cKey)
			if TDSARTL_DOCID_CACHE != "" {
				//get from cache
				SPL := strings.Split(TDSARTL_DOCID_CACHE, CACHE_STORE_DELIM)
				//BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL
				if len(SPL) > 5 {
					TITLE := SPL[5]
					IMG_URL := SPL[6]
					DESC := TITLE
					blobkey := fmt.Sprintf("GET_WALL:%varticles?TYPE=ARTICLE@888@DOC_ID=%v@888@SID=%v", srcHost, DOC_ID, SID)
					//url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_ARTICLE&DOC_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, DOC_ID, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, CMD_GEN_KEY)
					url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_ARTICLE&DOC_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, DOC_ID, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, remKey)
					FL_PROC_CACHE_OK = true
				}
			}
			if FL_PROC_CACHE_OK == false {
				thisDocID := str2int(DOC_ID)
				dsKey := fmt.Sprintf("%d", thisDocID)
				key := datastore.NameKey("TDSARTL", dsKey, nil)
				q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
				//log.Panicf("[S0074]")
                article := make([]TDSARTL, 0, 1)
                //log.Printf("datastoreClient.Get()  [12947]")
				if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
					//checkError(w,r,"",err,"CHK_OQ")
					 panic(err)
				  }

				for _, p := range article{
					TITLE := p.TITLE
					DESC := p.DESC
					IMG_URL := p.TAGS
					blobkey := fmt.Sprintf("GET_WALL:%varticles?TYPE=ARTICLE@888@DOC_ID=%v@888@SID=%v", srcHost, DOC_ID, SID)
					//url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_ARTICLE&DOC_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, thisDocID, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, CMD_GEN_KEY)
					url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_ARTICLE&DOC_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, thisDocID, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, remKey)
					//fmt.Fprintf(w, "<br>url: %v<br>", url)
					break
				}
			}
			////////////////////////////////
			case TARGET == "TDSMEDIA":
			cKey := fmt.Sprintf("TDSMEDIA_MEDID_CACHE_%v", MEDIA_ID)
			TDSMEDIA_MEDID_CACHE := ""
			FL_PROC_CACHE_OK := false
			TDSMEDIA_MEDID_CACHE = getStrMemcacheValueByKey(w,r,cKey)
			if TDSMEDIA_MEDID_CACHE != "" {
				//get from cache
				SPL := strings.Split(TDSMEDIA_MEDID_CACHE, CACHE_STORE_DELIM)
				//BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL
				if len(SPL) > 5 {
					TITLE := SPL[2]
					IMG_URL := SPL[6]
					DATA_TYPE := SPL[7]
					DESC := TITLE
					//blobkey := fmt.Sprintf("GET_WALL:%vmedia?FUNC_CODE=PLAY@888@MEDIA_ID=%v@888@SID=TDSMEDIA-%v", srcHost, MEDIA_ID, MEDIA_ID)
					blobkey := fmt.Sprintf("GET_WALL:%vmedia?FUNC_CODE=RAWTEXT@888@MEDIA_ID=%v@888@SID=TDSMEDIA-%v", srcHost, MEDIA_ID, MEDIA_ID)
					//url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_MEDIA&MEDIA_ID=%v&DATA_TYPE=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, MEDIA_ID, DATA_TYPE, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, CMD_GEN_KEY)
					url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_MEDIA&MEDIA_ID=%v&DATA_TYPE=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, MEDIA_ID, DATA_TYPE, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, remKey)
					FL_PROC_CACHE_OK = true
				}
			}
			if FL_PROC_CACHE_OK == false {
				thisDocID := str2int(MEDIA_ID)
				dsKey := fmt.Sprintf("%d", thisDocID)
				key := datastore.NameKey("TDSMEDIA", dsKey, nil)
				q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
				//log.Panicf("[S0075]")
                media := make([]TDSMEDIA, 0, 1)
                //log.Printf("datastoreClient.Get()  [12993]")
				if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
					//checkError(w,r,"",err,"CHK_OQ")
					 panic(err)
				  }
				for _, p := range media{
					TITLE := p.TITLE
					DESC := TITLE
					IMG_URL := p.IMG_URL
					DATA_TYPE := p.DATA_TYPE
					blobkey := fmt.Sprintf("GET_WALL:%vmedia?FUNC_CODE=PLAY@888@MEDIA_ID=%v@888@SID=TDSMEDIA-%v", srcHost, p.MEDIA_ID, p.MEDIA_ID)
					//url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_MEDIA&MEDIA_ID=%v&DATA_TYPE=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, thisDocID, DATA_TYPE, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, CMD_GEN_KEY)
					url = fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_MEDIA&MEDIA_ID=%v&DATA_TYPE=%v&fromUser=%v&toUser=%v&srcHost=%v&TITLE=%v&DESC=[LINKED DOC] %v&IMG_URL=%v&blobkey=%v&wall_key=%v", remHost, thisDocID, DATA_TYPE, uid, remUser, srcHost, TITLE, DESC, IMG_URL, blobkey, remKey)
					break
				}
			}
		}
		jsonStr, err := json.Marshal("")
		//client := urlfetch.Client(c)
		resp, err := http.Post(url,"application/json", bytes.NewBuffer(jsonStr))
		if err != nil {
			panic(err)
		}
		defer resp.Body.Close()
		//fmt.Println("response Status:", resp.Status)
		fmt.Fprintf(w, "<br>response Status: %v", resp.Status)
		//fmt.Println("response Headers:", resp.Header)
		fmt.Fprintf(w, "<br>response Headers: %v", resp.Header)
		body, _ := ioutil.ReadAll(resp.Body)
		//fmt.Println("response Body:", string(body))
		fmt.Fprintf(w, "<br>response Body: %v", string(body))
		return
	case WALL_FUNC == "SAVE_SLIDE" || WALL_FUNC == "SAVE_ARTICLE" || WALL_FUNC == "SAVE_MEDIA":
		fmt.Fprintf(w, "Requesting approval from user via channel...")
		fromUser := r.FormValue("fromUser")
		toUser := r.FormValue("toUser")
		DOC_ID := r.FormValue("DOC_ID")
		TITLE := r.FormValue("TITLE")
		DESC := r.FormValue("DESC")
		IMG_URL := r.FormValue("IMG_URL")
		blobkey := r.FormValue("blobkey")
		//for media only
		DATA_TYPE := r.FormValue("DATA_TYPE")
		MEDIA_ID := r.FormValue("MEDIA_ID")
		//validate user
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", fromUser, FUNC_CODE)
		if FL_VALID_USER != true {
			msgDtl := fmt.Sprintf("[U00163] ERROR: Unregistered user. Register first.")
			msgTyp := "error"
			action := "U00163"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		switch WALL_FUNC {
			case "SAVE_SLIDE":
				//getDataStr := fmt.Sprintf("/wall?WALL_FUNC=SAVE_SLIDE2&DOC_ID=%v&fromUser=%v&toUser=%v&TITLE=%v&IMG_URL=%v&DESC=%v&blobkey=%v&wall_key=%v", DOC_ID, fromUser, toUser, TITLE, IMG_URL, DESC, blobkey, CMD_GEN_KEY)
				getDataStr := fmt.Sprintf("/wall?WALL_FUNC=SAVE_SLIDE2&DOC_ID=%v&fromUser=%v&toUser=%v&TITLE=%v&IMG_URL=%v&DESC=%v&blobkey=%v&wall_key=%v", DOC_ID, fromUser, toUser, TITLE, IMG_URL, DESC, blobkey, remKey)
				thisMsgLink := fmt.Sprintf("<a href=\"#\" onclick=\"getWallDataSlide('%v');return false;\">Save New Slide?<br><img src=\"/static/img/ucopy.png\" width=100 height=100><img src=\"%v\" width=80 height=80></a> %v<br>", getDataStr, IMG_URL, TITLE)
				sendChannelMessage(w,r,toUser, thisMsgLink)
				notifyGuestbook(w, r , "autoNotifyPeopleGB", toUser,  fmt.Sprintf("WALL COPY TDSSLIDE-%v %v from %v LINK: %v", DOC_ID, TITLE, fromUser, ShortenUrl(w,r,fmt.Sprintf("%v%v", getSchemeUrl(w,r), getDataStr))), fromUser)
			case "SAVE_ARTICLE":
				//getDataStr := fmt.Sprintf("/wall?WALL_FUNC=SAVE_ARTICLE2&DOC_ID=%v&fromUser=%v&toUser=%v&TITLE=%v&IMG_URL=%v&DESC=%v&blobkey=%v&wall_key=%v", DOC_ID, fromUser, toUser, TITLE, IMG_URL, DESC, blobkey, CMD_GEN_KEY)
				getDataStr := fmt.Sprintf("/wall?WALL_FUNC=SAVE_ARTICLE2&DOC_ID=%v&fromUser=%v&toUser=%v&TITLE=%v&IMG_URL=%v&DESC=%v&blobkey=%v&wall_key=%v", DOC_ID, fromUser, toUser, TITLE, IMG_URL, DESC, blobkey, remKey)
				thisMsgLink := fmt.Sprintf("<a href=\"#\" onclick=\"getWallDataArticle('%v');return false;\">Save New Article?<br><img src=\"/static/img/ucopy.png\" width=100 height=100><img src=\"%v\" width=80 height=80></a> %v<br>", getDataStr, IMG_URL, TITLE)
				sendChannelMessage(w,r,toUser, thisMsgLink)
				notifyGuestbook(w, r , "autoNotifyPeopleGB", toUser,  fmt.Sprintf("WALL COPY TDSARTL-%v %v from %v LINK: %v", DOC_ID, TITLE, fromUser, ShortenUrl(w,r,fmt.Sprintf("%v%v", getSchemeUrl(w,r), getDataStr))), fromUser)
			case "SAVE_MEDIA":
				//getDataStr := fmt.Sprintf("/wall?WALL_FUNC=SAVE_MEDIA2&MEDIA_ID=%v&DATA_TYPE=%v&fromUser=%v&toUser=%v&TITLE=%v&IMG_URL=%v&DESC=%v&blobkey=%v&wall_key=%v", MEDIA_ID, DATA_TYPE, fromUser, toUser, TITLE, IMG_URL, DESC, blobkey, CMD_GEN_KEY)
				getDataStr := fmt.Sprintf("/wall?WALL_FUNC=SAVE_MEDIA2&MEDIA_ID=%v&DATA_TYPE=%v&fromUser=%v&toUser=%v&TITLE=%v&IMG_URL=%v&DESC=%v&blobkey=%v&wall_key=%v", MEDIA_ID, DATA_TYPE, fromUser, toUser, TITLE, IMG_URL, DESC, blobkey, remKey)
				thisMsgLink := fmt.Sprintf("<a href=\"#\" onclick=\"getWallDataMedia('%v');return false;\">Save New Media?<br><img src=\"/static/img/ucopy.png\" width=100 height=100><img src=\"%v\" width=80 height=80></a> %v<br>", getDataStr, IMG_URL, TITLE)
				sendChannelMessage(w,r,toUser, thisMsgLink)
 
				notifyGuestbook(w, r , "autoNotifyPeopleGB", toUser,  fmt.Sprintf("WALL COPY TDSMEDIA-%v %v from %v LINK: %v", MEDIA_ID, TITLE, fromUser, ShortenUrl(w,r,fmt.Sprintf("%v%v", getSchemeUrl(w,r), getDataStr))), fromUser)
		}
		w.Write([]byte("OK!"))
		return
		
 
	case WALL_FUNC == "SAVE_SLIDE2" || WALL_FUNC == "SAVE_ARTICLE2" || WALL_FUNC == "SAVE_MEDIA2":
		fmt.Fprintf(w, "Saving the slide or article or media...<br>")
		updateUserActiveData(w, r, c, uid, "Wall copy"+WALL_FUNC)

		IMG_URL := r.FormValue("IMG_URL")
		TITLE := r.FormValue("TITLE")
		DESC := r.FormValue("DESC")
		blobkey := r.FormValue("blobkey")
 
		//for media only
		DATA_TYPE := r.FormValue("DATA_TYPE")
		tstamp := getTimestamp()	
		tyear := getYear()
		
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
		if FL_PROC_OK == false {return}
		
		switch WALL_FUNC {
		
			//////////////////////////////////////////
			case "SAVE_SLIDE2":
			//store new content
 
				q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(1)
				//log.Panicf("[S0076]")
                slides := make([]TDSSLIDE, 0, 1)
                //log.Printf("datastoreClient.Get()  [13099]")
				if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
                     //panic(err)
                     //log.Printf("ERROR: %v", err)
				  }
				
                thisID := 0
                recCount, _  := datastoreClient.Count(c,q)
                if recCount == 0 {
                    p := TDSSLIDE {
                        FL_COUNTRY_SPECIFIC: "",
                        SYS_VER: 0,
                        DOC_ID: 1,
                        DOC_STAT: "",
                        TITLE: "",
                        DESC: "",
                        AUTHOR: "",
                        YEAR: "",
                        CATEGORY: "",
                        TAGS: "",
                        FL_SHARED: "",
                        SHARED_TO: "",
                        BLOB_URL: "",
                        //DT_UPLOAD: "",
                        DT_UPLOAD: 0,
                        NUM_LIKES: 0,
                        NUM_COMMENTS: 0,
                        LIKED_BY: "",
                        COMMENTS_BY: "",
                        NUM_VIEWS: int64(0),
                        MUSIC_ID: 0,
                        GET_NEXT: "",
                    }
                    slides = append(slides, p)
                }
				for _, p := range slides{
					thisID = p.DOC_ID + 1
					p.SYS_VER = SYS_VERSION
					p.DOC_ID = thisID	
					p.DOC_STAT = "Personal"
					p.TITLE	= TITLE
					p.DESC	= DESC
					p.AUTHOR = uid	
					p.YEAR	= tyear
					p.CATEGORY	= "desktop0"
					p.TAGS = IMG_URL	
					p.FL_SHARED	= "Y"
					p.BLOB_URL = blobkey	
					p.DT_UPLOAD	= str2int(tstamp)
					p.NUM_LIKES	= 0
					p.NUM_COMMENTS = 0	
					p.LIKED_BY = ""	
					p.COMMENTS_BY = ""
					p.FL_COUNTRY_SPECIFIC = ""
					p.NUM_VIEWS = 0
					p.SHARED_TO = ""
					
					thisKey := fmt.Sprintf("%d", p.DOC_ID)
					key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [13158]")
					//log.Panicf("[S0077]")
					if err != nil {
						 panic(err)
					}
 
 
					
					//cache details
					TDSSLIDE_Cacher(w,r,uid,thisID,blobkey,p.DOC_STAT,p.FL_SHARED,uid,p.FL_COUNTRY_SPECIFIC,p.TITLE,p.TAGS,"",0,"")	
 
					//save entry to local search index
					tstamp := getTimestamp()
					thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", thisID)
					TITLE := strings.Replace(p.TITLE, "_", " ", -1)
					DESC := strings.Replace(p.DESC, "_", " ", -1)
					
					linkedUrl := ""
					i := strings.Index(blobkey, "GET_WALL:")
					if i != -1 {
						SPL := strings.Split(blobkey,"GET_WALL:")
						if len(SPL) > 1 {
							linkedUrl = SPL[1]
							linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
						}
					}
					slideIdx := &IDX_TDSSLIDE{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"SLIDES",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSSLIDE",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			p.FL_SHARED,
						DOC_STAT:			p.DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE,	
						DOC_DESC: 			DESC,
						DOC_AUTHOR:         p.AUTHOR,					
						DOC_CONTENT_TEXT: 	p.TITLE,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
						CONTENT_URL: 		linkedUrl,
						IMG_URL: 			p.TAGS,
						//DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
					}
                    
					putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
						
					fmt.Fprintf(w, "Success! TDSSLIDE-%v<br>", thisID)
					fmt.Fprintf(w, "<a href=\"/search?f=TDSSLIDE&q=%v\">View</a><br>", thisID)
					
					cKey := "CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT"
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					cKey = fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ALL")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					//cache contentsAll home
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					putStrToMemcacheWithoutExp(w,r,"CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT","")
					
					putStrToMemcacheWithoutExp(w,r,"CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT","")	
					
					//clear push left
					cKey = fmt.Sprintf("CACHE_PUSH_LEFT_DATA")
					putStrToMemcacheWithoutExp(w,r,cKey,"")					
					
									
				}
				return
			
			//////////////////////////////////
			case "SAVE_ARTICLE2":
			
			//store new content
 
				q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(1)
				//log.Panicf("[S0078]")
                articles := make([]TDSARTL, 0, 1)
                //log.Printf("datastoreClient.Get()  [13250]")
				if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
                     //panic(err)
                     //log.Printf("ERROR: %v", err)
				  }
				
                thisID := 0
                recCount, _  := datastoreClient.Count(c,q)
                if recCount == 0 {
                    p := TDSARTL {
                        FL_COUNTRY_SPECIFIC: "",
                        SYS_VER: 0,
                        DOC_ID: 1,
                        DOC_STAT: "",
                        TITLE: "",
                        DESC: "",
                        AUTHOR: "",
                        YEAR: "",
                        CATEGORY: "",
                        TAGS: "",
                        FL_SHARED: "",
                        SHARED_TO: "",
                        BLOB_URL: "",
                        //DT_UPLOAD: "",
                        DT_UPLOAD: 0,
                        NUM_LIKES: 0,
                        NUM_COMMENTS: 0,
                        LIKED_BY: "",
                        COMMENTS_BY: "",
                        NUM_VIEWS: int64(0),
                        MUSIC_ID: 0,
                    }
                    articles = append(articles, p)
                }
				for _, p := range articles{
					thisID = p.DOC_ID + 1
					p.SYS_VER = SYS_VERSION
					p.DOC_ID = thisID	
					p.DOC_STAT = "Personal"
					p.TITLE	= TITLE
					p.DESC	= DESC
					p.AUTHOR = uid	
					p.YEAR	= tyear
					p.CATEGORY	= "desktop0"
					p.TAGS = IMG_URL	
					p.FL_SHARED	= "Y"
					p.BLOB_URL = blobkey	
					p.DT_UPLOAD	= str2int(tstamp) 
					p.NUM_LIKES	= 0
					p.NUM_COMMENTS = 0	
					p.LIKED_BY = ""	
					p.COMMENTS_BY = ""
					p.FL_COUNTRY_SPECIFIC = ""
					p.NUM_VIEWS = 0
					p.SHARED_TO = ""
					p.MUSIC_ID = 0
					
					thisKey := fmt.Sprintf("%d", p.DOC_ID)
					key := datastore.NameKey("TDSARTL", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [13309]")
					//log.Panicf("[S0079]")
					if err != nil {
						 panic(err)
					}
 
 
					
					//cache details
					TDSARTL_Cacher(w,r,uid,thisID,blobkey,p.DOC_STAT,p.FL_SHARED,uid,p.FL_COUNTRY_SPECIFIC,p.TITLE,p.TAGS,"",0)	
					//save entry to local search index
					tstamp := getTimestamp()
					thisIdxKey := fmt.Sprintf("TDSARTL-%d", thisID)
					TITLE := strings.Replace(p.TITLE, "_", " ", -1)
					DESC := strings.Replace(p.DESC, "_", " ", -1)
					
					linkedUrl := ""
					i := strings.Index(blobkey, "GET_WALL:")
					if i != -1 {
						SPL := strings.Split(blobkey,"GET_WALL:")
						if len(SPL) > 1 {
							linkedUrl = SPL[1]
							linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
						}
					}
					articleIdx := &IDX_TDSARTL{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"ARTICLES",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSARTL",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			p.FL_SHARED,
						DOC_STAT:			p.DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE,	
						DOC_DESC: 			DESC,
						DOC_AUTHOR:         p.AUTHOR,					
						DOC_CONTENT_TEXT: 	p.TITLE,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
						CONTENT_URL: 		linkedUrl,
						IMG_URL: 			p.TAGS,
						//DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
					}
                    
					putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
					
					//notify all users of this event via channels
					fmt.Fprintf(w, "Success! TDSARTL-%v<br>", thisID)
					fmt.Fprintf(w, "<a href=\"/search?f=TDSARTL&q=%v\">View</a><br>", thisID)
					
					cKey := "CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT"
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					cKey = fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ALL")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					//cache contentsAll home
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					putStrToMemcacheWithoutExp(w,r,"CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT","")
					
					putStrToMemcacheWithoutExp(w,r,"CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT","")
					
					//clear push left
					cKey = fmt.Sprintf("CACHE_PUSH_RIGHT_DATA")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
				}
 
			////////////////////////////////////////
			case "SAVE_MEDIA2":
			
			//store new content
				q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID").Limit(1)
				//log.Panicf("[S0080]")
                media := make([]TDSMEDIA, 0, 1)
                //log.Printf("datastoreClient.Get()  [13399]")
				if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
					 panic(err)
				  }
				thisID := 0
                recCount, _  := datastoreClient.Count(c,q)
                if recCount == 0 {
                    p := TDSMEDIA {
                            SYS_VER: 0,	
                            MEDIA_ID: 0,	
                            DOC_ID: 0,	
                            DATA_TYPE: "",
                            PROP: "",	
                            TITLE: "",
                            DESC: "",
                            AUTHOR: "",	
                            YEAR: "",	
                            CATEGORY: "",	
                            DOC_STAT: "",
                            FL_SHARED: "",
                            SHARED_TO: "",
                            IMG_URL: "",
                            BLOB_KEY: "",	
                            //DT_UPLOAD: "",
                            DT_UPLOAD: 0,
                            NUM_LIKES: 0,	
                            NUM_COMMENTS: 0,	
                            LIKED_BY: "",	
                            COMMENTS_BY: "",
                            NUM_VIEWS: 0,
                            MIME_TYPE: "",
                    }
                    media = append(media, p)
                }
				for _, p := range media{
					thisID = p.MEDIA_ID + 1
					p.SYS_VER = SYS_VERSION
					p.MEDIA_ID = thisID	
					p.DOC_ID = 0
					p.DATA_TYPE	 = DATA_TYPE
					p.PROP = ""
					p.TITLE	= TITLE
					p.DESC	= DESC
					p.AUTHOR = uid	
					p.YEAR	= tyear
					p.CATEGORY	= "desktop0"	
					p.FL_SHARED	= "Y"
					//p.DOC_STAT = "ULAPPH Only"
					p.DOC_STAT = "Personal"					
					p.IMG_URL = IMG_URL
					p.BLOB_KEY = blobkey	
					p.DT_UPLOAD	= str2int(tstamp) 
					p.NUM_LIKES	= 0
					p.NUM_COMMENTS = 0	
					p.LIKED_BY = ""	
					p.COMMENTS_BY = ""
					
					thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
					key := datastore.NameKey("TDSMEDIA", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [13458]")
					//log.Panicf("[S0081]")
					if err != nil {
						 panic(err)
					}

					thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", thisID)
					TITLE := strings.Replace(p.TITLE, "_", " ", -1)
					DESC := strings.Replace(p.DESC, "_", " ", -1)
					thisCont := ""
					if DATA_TYPE == "text" {
						blobChan := make(chan string)
						go getBlobTextChan(w, r,blobChan, p.BLOB_KEY)
						thisCont = <- blobChan
					} else {
						thisCont = fmt.Sprintf("%v - %v", TITLE, DESC)
					}		
					linkedUrl := ""
					i := strings.Index(blobkey, "GET_WALL:")
					if i != -1 {
						SPL := strings.Split(blobkey,"GET_WALL:")
						if len(SPL) > 1 {
							linkedUrl = SPL[1]
							linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
						}
					}

					
					searchIdx := &IDX_TDSMEDIA{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"MEDIA",
						SOURCE_TYPE: 		p.DATA_TYPE,	
						SOURCE_TBL:  		"TDSMEDIA",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			p.FL_SHARED,
						DOC_STAT:			p.DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE,	
						DOC_DESC: 			DESC,
						DOC_AUTHOR:         uid,
						DOC_CONTENT_TEXT: 	thisCont,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
						CONTENT_URL: 		linkedUrl,
						IMG_URL: 			p.IMG_URL,
						DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
					}
                    
					putSearchIndexM(w,r,"IDX_TDSMEDIA",thisIdxKey,searchIdx)

					fmt.Fprintf(w, "Success! TDSMEDIA-%v<br>", thisID)
					fmt.Fprintf(w, "<a href=\"/search?f=TDSSLIDE&q=%v\">View</a><br>", thisID)
					break
				}
				
 
		
		}
		
		//clear the quick search database
		fmt.Fprintf(w, "Updated quick search db...<br>")
		cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKeyAll,"")
		return
 
		
	/////////////////////////////////////////////////
	case WALL_FUNC == "ICON_COPY":
		ICON_ID := r.FormValue("ICON_ID")
		if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
		  panic(err)
		}
		//get remote host & user
		if err := wallIconCopyGetHostUser.Execute(w, ICON_ID); err != nil {
		  panic(err)
		}
		if err := htmlFooterModal.Execute(w, ""); err != nil {
		  panic(err)
		}
 
		
	case WALL_FUNC == "ICON_COPY2":
		remHost := r.FormValue("remHost")
		remUser := r.FormValue("remUser")
		iconID := r.FormValue("iconID")
		srcHost := getSchemeUrl(w,r)
		
		k, _ := url.Parse(remHost)
		m, _ := url.Parse(getSchemeUrl(w,r))
		
		if k.Host == m.Host {
			msgDtl := fmt.Sprintf("[U00164] ERROR: Cannot send to same ulapph site.")
			fmt.Fprintf(w, "<font color=red>%v</font>", msgDtl)
 
		} else {
 

			URL_ADD := ""
			ICON_NAME := ""
			IMG_SRC := ""
			BLOB_KEY := ""
			
			thisIconNum := str2int(iconID)
 
			dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
			key := datastore.NameKey("TDSICONS", dsKey, nil)
			q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
			//log.Panicf("[S0082]")
            icons := make([]TDSICONS, 0, 1)
            //log.Printf("datastoreClient.Get()  [13575]")
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				 panic(err)
			}
			for _, p := range icons{
				URL_ADD		= p.URL_ADD
				ICON_NAME	= p.ICON_NAME
				IMG_SRC		= p.IMG_SRC
				BLOB_KEY	= p.BLOB_KEY
				break
			}
			//url := fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_ICON&ICON_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&ICON_NAME=%v&IMG_SRC=%v&BLOB_KEY=%v&URL_ADD=%v&wall_key=%v", remHost, iconID, uid, remUser, srcHost, ICON_NAME, IMG_SRC, BLOB_KEY, URL_ADD, CMD_GEN_KEY)
			url := fmt.Sprintf("%v/wall?WALL_FUNC=SAVE_ICON&ICON_ID=%v&fromUser=%v&toUser=%v&srcHost=%v&ICON_NAME=%v&IMG_SRC=%v&BLOB_KEY=%v&URL_ADD=%v&wall_key=%v", remHost, iconID, uid, remUser, srcHost, ICON_NAME, IMG_SRC, BLOB_KEY, URL_ADD, remKey)
			fmt.Fprintf(w, "<br>url: %v<br>", url)
			jsonStr, err := json.Marshal("")
			//client := urlfetch.Client(c)
			resp, err := http.Post(url,"application/json", bytes.NewBuffer(jsonStr))
			if err != nil {
				panic(err)
			}
			defer resp.Body.Close()
			//fmt.Println("response Status:", resp.Status)
			fmt.Fprintf(w, "<br>response Status: %v", resp.Status)
			//fmt.Println("response Headers:", resp.Header)
			fmt.Fprintf(w, "<br>response Headers: %v", resp.Header)
			return
		}
	case WALL_FUNC == "SAVE_ICON":
		fromUser := r.FormValue("fromUser")
		toUser := r.FormValue("toUser")
		ICON_ID := r.FormValue("ICON_ID")
		srcHost := r.FormValue("srcHost")
		URL_ADD := r.FormValue("URL_ADD")
		ICON_NAME := r.FormValue("ICON_NAME")
		IMG_SRC := r.FormValue("IMG_SRC")
		BLOB_KEY := r.FormValue("BLOB_KEY")
		//validate user
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", fromUser, FUNC_CODE)
		if FL_VALID_USER != true {
			msgDtl := fmt.Sprintf("[U00161] ERROR: Unregistered user (%v). Register first.", fromUser)
			msgTyp := "error"
			action := "U00161"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		//getDataStr := fmt.Sprintf("/wall?WALL_FUNC=SAVE_ICON2&ICON_ID=%v&fromUser=%v&toUser=%v&ICON_NAME=%v&IMG_SRC=%v&BLOB_KEY=%v&URL_ADD=%v&wall_key=%v", ICON_ID, fromUser, toUser, ICON_NAME, IMG_SRC, BLOB_KEY, URL_ADD, CMD_GEN_KEY)
		getDataStr := fmt.Sprintf("/wall?WALL_FUNC=SAVE_ICON2&ICON_ID=%v&fromUser=%v&toUser=%v&ICON_NAME=%v&IMG_SRC=%v&BLOB_KEY=%v&URL_ADD=%v&wall_key=%v", ICON_ID, fromUser, toUser, ICON_NAME, IMG_SRC, BLOB_KEY, URL_ADD, remKey)
		thisMsgLink := fmt.Sprintf("<a href=\"#\" onclick=\"getWallData('%v');return false;\">Save New Icon?<br><img src=\"/static/img/ucopy.png\" width=100 height=100><img src=\"%v\" width=80 height=80></a> %v<br>", getDataStr, IMG_SRC, URL_ADD)
		sendChannelMessage(w,r,toUser, thisMsgLink)
		notifyGuestbook(w, r , "autoNotifyPeopleGB", toUser,  ShortenUrl(w,r,fmt.Sprintf("%v%v", getSchemeUrl(w,r), getDataStr)), fromUser)
		wmsg := fmt.Sprintf("<img src=\"%v\" width=80 height=80></a><br>TDSICONS Copied via wall by %v from %v %v", IMG_SRC, toUser, srcHost, getAccessString(w,r,""))
		sendMessage(w, r, toUser, "CH_MSG_NOTIFY_EVENTS", wmsg, "", getMapLink(w,r,uid,"/wall",""),"")
		return
	case WALL_FUNC == "SAVE_ICON2":
		updateUserActiveData(w, r, c, uid, "Wall copy"+WALL_FUNC)
		fromUser := r.FormValue("fromUser")
		URL_ADD := r.FormValue("URL_ADD")
		ICON_NAME := r.FormValue("ICON_NAME")
		IMG_SRC := r.FormValue("IMG_SRC")
		BLOB_KEY := r.FormValue("BLOB_KEY")
		//store new icon
		q := datastore.NewQuery("TDSICONS").Order("-ICON_ID").Limit(1)
		//log.Panicf("[S0083]")
        icons := make([]TDSICONS, 0, 1)
        //log.Printf("datastoreClient.Get()  [13641]")
		if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
			 panic(err)
		  }
		
		for _, p := range icons{
			thisID := p.ICON_ID + 1
			p.SYS_VER = SYS_VERSION
			p.ICON_ID = thisID
			p.URL_ID =  0
			p.URL_ADD = URL_ADD
			p.ICON_NAME = ICON_NAME
			p.IMG_SRC = IMG_SRC
			p.DESKTOP = fromUser
			p.BLOB_KEY = BLOB_KEY
			thisKey := fmt.Sprintf("ICON[%d]", thisID)
			key := datastore.NameKey("TDSICONS", thisKey, nil)
            _, err := datastoreClient.Put(c, key, &p)
            //log.Printf("datastoreClient.Put()  [13659]")
			//log.Panicf("[S0084]")
			if err != nil {
				 panic(err)
			}
 
			thisIdxKey := fmt.Sprintf("TDSICONS-%d", thisID)
			tstamp := getTimestamp()
			
			slideIdx := &IDX_TDSICONS{
				DOC_KEY: 			thisIdxKey,
				SEARCH_TYPE: 		"ICONS",
				SOURCE_TYPE: 		"ULAPPH",	
				SOURCE_TBL:  		"TDSICONS",	
				DESKTOP: 			fromUser,
				FL_SHARED:			"Y",
				DOC_STAT:			"ULAPPH Only",
				DOC_SCOPE_OVERALL:	"",
				DOC_SCOPE_COUNTRY:  "",
				DOC_SCOPE_REGION:  	"",
				DOC_SCOPE_CITY: 	"",
				DOC_SCOPE_BARANGAY: "",
				DOC_TITLE: 			ICON_NAME,	
				DOC_DESC: 			ICON_NAME,
				DOC_AUTHOR:         fromUser,
				DOC_CONTENT_TEXT: 	ICON_NAME,
				DOC_CONTENT_HTML: 	"",	
				DOC_CONTENT_ATOM: 	"",	
				CONTENT_URL: 		URL_ADD,
				IMG_URL: 			IMG_SRC,
				DATE_ADDED: 		tstamp,
				DATE_UPDATED: 		tstamp,
			}
            
			putSearchIndexI(w,r,"IDX_TDSICONS",thisIdxKey,slideIdx)
			
			//notify all users of this event via channels
			msgDtl3 := fmt.Sprintf("UID:%v has added website <a href=\"%v\">%v</a> LINK: %v from desktop %v %v", uid, URL_ADD, ICON_NAME, URL_ADD, fromUser, getAccessString(w,r,""))
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/settings",""),"")
			//request update of cache
			time.AfterFunc(5*time.Second, func() {
                laterSettingsIcons(c, "")
            })
			break
		}
		writeHTMLHeader(w, 200)
		w.Write([]byte("OK!"))
		return	
	}
}
//function to handle the /website url
//it automatically handle the display of the website contents	
func contentsAll(w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	if SYS_STATELESS_SERVER == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this feature is not available at this time."))
		return
	}
    //log.Printf("contentsAll")
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	if SYS_SITE_PRIVATE == true && r.FormValue("bk") != SYS_BYPASS_PRIV_KEY {
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
		if FL_PROC_OK == false {return}
    }
    //D0086
    datastoreClient := createClientDS()
	query := r.FormValue("q")
	switch query {
	case "SHOW_PER_LIST_MENU":
		_, uid := checkSession(w,r)
		showPersonalMenuMobile(w,r,uid)
	case "SHOW_TOP_LIST_MENU":
		showTopListMenu(w,r,"s")
	case "LOAD_AJAX_TILES":
		deskName := r.FormValue("deskName")
		cursor := r.FormValue("cursor")
		tbl_src := r.FormValue("tbl_src")
		//dummy
		chanc:= make(chan string)
		chand := make(chan bool)
		dispTopContents(w,r,deskName,"AJAX", cursor, tbl_src, chanc, chand)
	case "GET_NEXT_CON2":
		//for remote control
			SID := r.FormValue("SID")
			MODE := r.FormValue("MODE")
			//GOTO := r.FormValue("GOTO")
			redLink := r.FormValue("redirect")
			SPL := strings.Split(SID,"-")
			TARGET := SPL[0]
			if TARGET == "" {
				TARGET = "TDSSLIDE"
			}
			DOC_ID := "0"
			if len(SPL) > 1 {
				DOC_ID = SPL[1]
			}
			docID := str2int(DOC_ID)
			//u := user.Current(c)
			uid := ""
			if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
				uid = "guest"
			}else{
				//uid = uid
				_, uid = checkSession(w,r)
			}
			reqStr := ""
			_, _, _, _, _, _, _, _, MUSIC_ID, GET_NEXT := getTDSSLIDEBlobKey(w, r, docID)
			switch {
			case TARGET == "TDSARTL" && MODE == "ARTICLE":
				reqStr = fmt.Sprintf("/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&MUSIC_ID=%v", docID, docID, MUSIC_ID)
				if redLink == "y" {
					http.Redirect(w, r, reqStr, http.StatusFound)
					return						
				}
				data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK2@888@%v@888@%v@888@%v", reqStr,uid,"FORCE")
				//when sysopen
				sendChannelMessage(w,r,uid,data)
				dummyCmd(w,r,uid)
				
			case TARGET == "TDSSLIDE" && MODE == "PRESENTER":
				reqStr = fmt.Sprintf("/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v", docID, docID, MUSIC_ID, GET_NEXT, SLIDE_SOUND_SET)
				if redLink == "y" {
					http.Redirect(w, r, reqStr, http.StatusFound)
					return						
				}
				data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK2@888@%v@888@%v@888@%v", reqStr,uid,"FORCE")
				//when sysopen
				sendChannelMessage(w,r,uid,data)
				dummyCmd(w,r,uid)
			}
 
	case "GET_NEXT_CON":
 
			//OPTIMIZE THIS
			//fmt.Fprintf(w, "<h3>Fetching next slide...</h3>")
			SID := r.FormValue("SID")
			MODE := r.FormValue("MODE")
			GOTO := r.FormValue("GOTO")
			//PARM := r.FormValue("PARM")
			GET_NEXT_LIST := r.FormValue("GET_NEXT")
			GNL := strings.Split(GET_NEXT_LIST,",")
			
			TARGET := ""
			docID := 0
			TITLE := ""
			reqStr := ""
			BLOB_KEY := ""
			MUSIC_ID := 0
			GET_NEXT := ""
			
			SPL := strings.Split(SID,"-")
			TARGET = SPL[0]
			if TARGET == "" {
				TARGET = "TDSSLIDE"
			}
			DOC_ID := "0"
			if len(SPL) > 1 {
				DOC_ID = SPL[1]
			}
			docID = str2int(DOC_ID)
			docPrev := docID
			
			//u := user.Current(c)
			uid := ""
			if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
				uid = "guest"
			}else{
				//uid = uid
				_, uid = checkSession(w,r)
			}
 
			switch {
						
			case TARGET == "TDSARTL":
				reqStr = fmt.Sprintf("/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&MUSIC_ID=%v", docID, docID, MUSIC_ID)
				//http.Redirect(w, r, reqStr, http.StatusFound)
				//return
				data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK@888@%v@888@%v@888@%v", reqStr,uid,docID)
				//channel.Send(c,uid,data)
				//send firebase
				//sendEvent(w,r,uid,[]byte(data))
				//sendEvent(w,r,uid,data)
				//when sysopen
				sendChannelMessage(w,r,uid,data)
				dummyCmd(w,r,uid)
			
			case GET_NEXT_LIST != "" && len(GNL) == 0:
				reqStr =  fmt.Sprintf("/website?q=GET_NEXT_CON&SID=TDSSLIDE-%v&MODE=PRESENTER&GOTO=%v", GET_NEXT_LIST, GET_NEXT_LIST)
				http.Redirect(w, r, reqStr, http.StatusFound)
				return	
					
			case GET_NEXT_LIST != "" && len(GNL) >= 1:
				//use the passed next contents
				thisCon := ""
				if len(GNL) > 1 {
					myrand := randNum(0, len(GNL) - 1)
					thisCon = GNL[myrand]
				} else {
					thisCon = GNL[0]
				}
				
				if thisCon != "" {
					reqStr =  fmt.Sprintf("/website?q=GET_NEXT_CON&SID=TDSSLIDE-%v&MODE=PRESENTER&GOTO=%v", thisCon, thisCon)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return					
				} else {
					reqStr =  fmt.Sprintf("/rcg?m=%v&q=%v&n=%v", "loop", "desktop0", 1)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return	
				}
			
			case GOTO != "":
				//presenter via mobile
				q := datastore.NewQuery("TDSSLIDE").Filter("DOC_ID =", docID).Limit(1)
				//log.Panicf("[S0085]")
				recCount, _  := datastoreClient.Count(c,q)
				
				if recCount == 0 {
					q := datastore.NewQuery("TDSSLIDE").Filter("DOC_ID >", 0).Limit(1)
					//log.Panicf("[S0086]")
                    slides := make([]TDSSLIDE, 0, 1)
                    //log.Printf("datastoreClient.Get()  [13888]")
					if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
						 panic(err)
					}
					for _, p := range slides {
						docID = p.DOC_ID
						TITLE = p.TITLE
						BLOB_KEY = p.BLOB_URL
						MUSIC_ID = p.MUSIC_ID
						GET_NEXT = p.GET_NEXT
						break
					}
				} else {
                    slides := make([]TDSSLIDE, 0, 1)
                    //log.Printf("datastoreClient.Get()  [13902]")
					if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
						 panic(err)
					}
					for _, p := range slides {
						docID = p.DOC_ID
						TITLE = p.TITLE
						BLOB_KEY = p.BLOB_URL
						MUSIC_ID = p.MUSIC_ID
						GET_NEXT = p.GET_NEXT
						break
					}
				}
				
				FUNC_CODE := "GET_GRP_ID"
				FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
				
				if FL_VALID_USER == true {
					//proceed
				} else {
					reqStr =  fmt.Sprintf("/rcg?m=%v&q=%v&n=%v", "loop", "desktop0", 1)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return				
				}
				
				//SID = fmt.Sprintf("%v-%v", TARGET, docID)
				i := strings.Index(BLOB_KEY, "GET_WALL:")
				if i != -1 {
					//fetch a new one
					reqStr =  fmt.Sprintf("/rcg?m=%v&q=%v&n=%v", "loop", "desktop0", 1)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return
				}
			
			}
 
			if TARGET == "TDSSLIDE" {
				if MODE == "PRESENTER" {
					if GOTO != "" {
						//uid := ""
						PRESENTER_SESSION_KEY := fmt.Sprintf("%v-%v-%v", uid, BLOB_KEY, randSeq2(36))
						reqStr = fmt.Sprintf("/slides?TYPE=SLIDE&MODE=PRESENTER&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&PRESENTER_SESSION_KEY=%v&GOTO=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v", docID, docID, TITLE, PRESENTER_SESSION_KEY, GOTO, MUSIC_ID, GET_NEXT, SLIDE_SOUND_SET)
					} else {
						reqStr = fmt.Sprintf("/slides?TYPE=SLIDE&MODE=PRESENTER&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v", docID, docID, TITLE, MUSIC_ID, GET_NEXT, SLIDE_SOUND_SET)
					}
				} else {
					reqStr = fmt.Sprintf("/slides?TYPE=SLIDE&MODE=PRESENTER&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v", docID, docID, TITLE, MUSIC_ID, GET_NEXT, SLIDE_SOUND_SET)
				}
			} else {
				reqStr = fmt.Sprintf("/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&TITLE=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v", docID, docID, TITLE, MUSIC_ID, GET_NEXT, SLIDE_SOUND_SET)
			}
			if reqStr == "" {
				reqStr =  fmt.Sprintf("/rcg?m=%v&q=%v&n=%v", "loop", "desktop0", 1)
				http.Redirect(w, r, reqStr, http.StatusFound)
				return			
			} else {
				//make sure AUDIENCE follows the presenter				
				data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK@888@%v@888@%v@888@%v", reqStr, uid, docPrev)
				//when sysopen
				sendChannelMessage(w,r,uid,data)
				dummyCmd(w,r,uid)
			}
			return
			
	default:
        //log.Printf("default")
		updateUserActiveData(w, r, c, "", "/website")
		_, uid := checkSession(w,r)
		if uid == "" {
			uid = getGeoString(w,r)
		}
		if query == "" {
			query = "home"
		}
		if err := userAccessTemplateMobileRootAll.Execute(w, "ULAPPH"); err != nil {
		  panic(err)
		}
		url1 := "/logout"	
        //get custom hidable menu from cache
		showLeftMenu(w,r)
		if err := mobileBodyTemplateContentA.Execute(w, url1); err != nil {
		  panic(err)
		}
		if err := mobileBodyTemplateContentB2.Execute(w, ""); err != nil {
		  panic(err)
		}
		if SYS_DISP_SEARCH == true {
			if err := htmlBodySearchGlow.Execute(w, ""); err != nil {
			  panic(err)
			}
		}
		if SYS_DISP_MOTD == true {
			displayMOTD(w,r,uid,"")
		}
		if err := mobileBodyTemplateContentLoaderA2.Execute(w, ""); err != nil {
		  panic(err)
		}	
		//switch query {
		switch {
			case strings.Index(query, "desktop") != -1:
 
				//load tiles from cache
				//FL_REDIR := true
				cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v", query)
				CACHE_SLIDES_CONTENTS_ALL_TILES := ""
				CACHE_SLIDES_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
				if CACHE_SLIDES_CONTENTS_ALL_TILES != "" {
					fmt.Fprintf(w, "%v", CACHE_SLIDES_CONTENTS_ALL_TILES)
				} else {
					TASK_MEMCACHER_contentsAll_Slides(w,r,query)
				}
				cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v", query)
				CACHE_ARTICLES_CONTENTS_ALL_TILES := ""
				CACHE_ARTICLES_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
				if CACHE_ARTICLES_CONTENTS_ALL_TILES != "" {
					fmt.Fprintf(w, "%v", CACHE_ARTICLES_CONTENTS_ALL_TILES)
				} else {
					TASK_MEMCACHER_contentsAll_Articles(w,r,query)
				}
				//display TDSICONS in tiles for this category
				cKey = fmt.Sprintf("CACHE_TDSICONS_CONTENTS_ALL_TILES_%v", query)
				CACHE_TDSICONS_CONTENTS_ALL_TILES := ""
				CACHE_TDSICONS_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
				if CACHE_TDSICONS_CONTENTS_ALL_TILES != "" {
					fmt.Fprintf(w, "%v", CACHE_TDSICONS_CONTENTS_ALL_TILES)
				} else {
					if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Popular Websites"); err != nil {
					  panic(err)
					}	
					TASK_MEMCACHER_contentsAll_Icons(w,r,query)
				}
            case query == "home":
                //log.Printf("home")
				//D0035 - lets apply some channels here
				chan_latest := make(chan string)
				chan_latest_done := make(chan bool)
 
				go dispTopContents(w,r,"root","WHATS-NEW","","", chan_latest, chan_latest_done)
				
				chan_pinned := make(chan string)
				chan_pinned_done := make(chan bool)
 
				go dispTopContents(w,r,"root","PINNED","","", chan_pinned, chan_pinned_done)
 
				chan_top := make(chan string)
				chan_top_done := make(chan bool)
 
				go dispTopContents(w,r,"root","TOP","","", chan_top, chan_top_done)
				
				//get channel values
				chan_latest_val := <- chan_latest
				chan_pinned_val := <- chan_pinned
				chan_top_val := <- chan_top
				
				//wait for all channels to finish
				<-chan_latest_done
				<-chan_pinned_done
				<-chan_top_done
				
				if SYS_CONTENTS_HDR_ON == "Y" {
					TEMPDATA := TEMPSTRUCT{
						STR_FILLER1: "Latest Articles and Slides",
						STR_FILLER2: LATEST_ARTICLES_SLIDES_BG,
					}
					if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
				}
				fmt.Fprintf(w, chan_latest_val)
				
				if SYS_CONTENTS_HDR_ON == "Y" {
					TEMPDATA := TEMPSTRUCT{
						STR_FILLER1: "Pinned Slides, Articles & Media",
						STR_FILLER2: PINNED_ARTICLES_SLIDES_BG,
					}
					if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
				}
				fmt.Fprintf(w, chan_pinned_val)
				
				if SYS_CONTENTS_HDR_ON == "Y" {
					TEMPDATA := TEMPSTRUCT{
						STR_FILLER1: "Top Slides and Articles",
						STR_FILLER2: TOP_ARTICLES_SLIDES_BG,
					}
					if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
				}
				fmt.Fprintf(w, chan_top_val)			
		}
		
		
		if SYS_DISP_ADS_CONTENT == true {
			if err := mobileBodyTemplateContentLoaderSingleItemAds.Execute(w, SYS_DISP_ADS_HOST); err != nil {
			  panic(err)
			}
		}
		
		TEMPDATA := TEMPSTRUCT{
			STR_FILLER1: SYS_GUEST_CHAT_URL,
			STR_FILLER2: getStartColor(w,r),
		}
		if err := mobileBodyTemplateContentLoaderB.Execute(w, &TEMPDATA); err != nil {
		  panic(err)
		}
 
		displaySocialSites(w,r)		
		
		if err := mobileBodyTemplateContentFooter.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {
		  panic(err)
		}
		
		fmt.Fprintf(w, "<input type=\"hidden\" id=\"SYS_AJAX_LOAD_ON\" value=\"%v\"/>", SYS_AJAX_LOAD_ON)
		fmt.Fprintf(w, "<input type=\"hidden\" id=\"deskName\" value=\"%v\">", "root")
		fmt.Fprintf(w, "<input type=\"hidden\" id=\"TDSSLIDE\" value=\"%v\">", 0)
		fmt.Fprintf(w, "<input type=\"hidden\" id=\"TDSARTL\" value=\"%v\">", 0)
		fmt.Fprintf(w, "<input type=\"hidden\" id=\"chatHelp\" value=\"%v\">", SYS_GUEST_CHAT_URL)
		
		if err := desktopBodyTabzillaTemplateMobilePublicChan.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {					
		  panic(err)
		}
		
		msg := fmt.Sprintf("UID: %v has accessed website contents %v/website?q=home", uid, domRefMatchS)
		data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "WEBSITE", msg)
		ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
		
	}
}

//a bug workaround to override last message 
func dummyCmd(w http.ResponseWriter, r *http.Request, uid string) {
	//override last message
	//bug!!! looping error
	data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@dummy")
	//bug fix
	sendChannelMessage(w,r,uid,data)
}

//shows personal menu in mobile 
func showPersonalMenuMobile(w http.ResponseWriter, r *http.Request, uid string) {
	//c := appengine.NewContext(r)
	
	if uid == "" {
		return
	}
	cfgName := fmt.Sprintf("PERSONAL_Top_List_Menu_Media_ID_%v", uid)
	docID := 0
	_, docID = getTDSCNFG(w,r,1,cfgName)
	if docID > 0 {
		//display list menu
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ := getTDSMEDIABlobKey(w, r, docID)	
		
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		buf.WriteString("<div>")
		buf.WriteString("<h3 align=\"center\">My Personal Menu</h3>")
		buf.WriteString("<ul class=\"pure-menu-list\">")
	
		for s.Scan() {
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					buf.WriteString(fmt.Sprintf("%v", s.Text()))
				}
			} else {
				buf.WriteString(fmt.Sprintf("%v", s.Text()))
			}
		}
		buf.WriteString("</ul>")
		buf.WriteString("</li>")
		buf.WriteString("</div>")
		w.Write(buf.Bytes())
		
	}
}
//parses the cached ACB entries 
func parseAutocompEntries(w http.ResponseWriter, r *http.Request) {
    //log.Printf("parseAutocompEntries")
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	_, uid := checkSession(w,r)
	if uid == "" {
		uid = "general"
	}
	fmt.Fprintf(w, "<input type=\"hidden\" id=\"scheme\" value=\"%v\">\n", getScheme(w,r))
	//overall autocomp cache
	cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
	//start window cache
	cKeyAll2 := fmt.Sprintf("STARTWIN_CACHE_%v", uid)
    AUTOCOMP_CACHE := ""
    AUTOCOMP_CACHE = getStrMemcacheValueByKey(w,r,cKeyAll)
    if AUTOCOMP_CACHE != "" {
        //log.Printf("AUTOCOMP_CACHE Found") 
		//AUTOCOMP_CACHE = fmt.Sprintf("%s", item.Value)
		if strings.Index(AUTOCOMP_CACHE, "ERROR: ") != -1 || strings.Index(AUTOCOMP_CACHE, "urlfetch: DEADLINE_EXCEEDED") != -1 {
			AUTOCOMP_CACHE = ""
			putStrToMemcacheWithoutExp(w,r,cKeyAll,"")
		}
		if AUTOCOMP_CACHE != "" {
			fmt.Fprintf(w, "<script>\n")
			fmt.Fprintf(w, "\n")
			fmt.Fprintf(w, "$(function(){\n")
			fmt.Fprintf(w, "  var currencies = [\n")
			w.Write([]byte(AUTOCOMP_CACHE))
			fmt.Fprintf(w, "  ];\n")
			fmt.Fprintf(w, "  // setup autocomplete function pulling from currencies[] array\n")
			fmt.Fprintf(w, "  $('#autocomplete').autocomplete({\n")
			fmt.Fprintf(w, "	lookup: currencies,\n")
			fmt.Fprintf(w, "	onSelect: function (suggestion) {\n")
			fmt.Fprintf(w, "	  		var x = document.getElementById(\"scheme\").value;\n")
			fmt.Fprintf(w, "	  		var uid = document.getElementById(\"aUser\").value;\n")
			fmt.Fprintf(w, "	  		var str = suggestion.data;\n")
			fmt.Fprintf(w, "	  		var n = str.indexOf(\"?\"); if (n > 0) { str = str+\"&UID=\"+uid+\"&uid=\"+uid; } else {str = str+\"?UID=\"+uid+\"&uid=\"+uid;}\n")
			fmt.Fprintf(w, "	  		var res = \"\";\n")
			fmt.Fprintf(w, "	  		if (x == \"http:\") {\n")
			fmt.Fprintf(w, "	  			res = str.replace(\"https://\", \"http://\");\n")
			fmt.Fprintf(w, "	  		}else {\n")
			fmt.Fprintf(w, "	  			res = str.replace(\"http://\", \"https://\");\n")
			fmt.Fprintf(w, "	  		}\n")
			fmt.Fprintf(w, "	        var thehtml = \"<strong><a href='#' onClick=\\\"location.href='\" + res + \"'; return false;\\\">Open Here</a></strong> | <strong><a href='#' onClick=\\\"window.postMessage('\" + res + \"', 'https://www.ulapph.com'); return false;\\\">Child Window</a></strong> | <strong><a href='#' onClick=\\\"window.open('\" + res + \"'); return false;\\\">In New Tab</a></strong> | <strong><a href='#' onClick=\\\"window.open();return false;\\\">Blank Window</a></strong>\";\n")
			fmt.Fprintf(w, "	        $('#outputcontent').html(thehtml);\n")
			fmt.Fprintf(w, "	}\n")
			fmt.Fprintf(w, "  });\n")
			fmt.Fprintf(w, "\n")
			fmt.Fprintf(w, "});\n")
			fmt.Fprintf(w, "\n")
			fmt.Fprintf(w, "</script>\n")
			fmt.Fprintf(w, "</head>\n")
			return
		}
    }
	if AUTOCOMP_CACHE == "" {
        //log.Printf("AUTOCOMP_CACHE Empty") 
		//get from temp blob
		//log.Printf("get from temp blob")
		cKeyACB := fmt.Sprintf("ACB_BLOB_%v", uid)
		ACB_BLOB := ""
		ACB_BLOB = getStrMemcacheValueByKey(w,r,cKeyACB)
		if ACB_BLOB == "" && SYS_STATELESS_SERVER == false {
            //log.Printf("ACB_BLOB Empty") 
			//log.Printf("get from config blob")
			var g TDSCNFG
			thisKey := fmt.Sprintf("SYSTEM_ACB_%v", uid)
            key := datastore.NameKey("TDSCNFG", thisKey, nil)
            //D0086
            datastoreClient := createClientDS()
            //log.Printf("datastoreClient.Get()  [14254]")
			if err := datastoreClient.Get(c, key, &g); err != nil {
				//return
			}
			ACB_BLOB = g.TXT_VAL
			putStrToMemcacheWithoutExp(w,r,cKeyACB,ACB_BLOB)
		}
		if strings.Index(ACB_BLOB, "ERROR: ") != -1 || strings.Index(ACB_BLOB, "urlfetch: DEADLINE_EXCEEDED") != -1 {
			ACB_BLOB = ""
			putStrToMemcacheWithoutExp(w,r,cKeyACB,"")
		}
		//log.Printf("ACB_BLOB: %v", ACB_BLOB)
		if ACB_BLOB != "" && SYS_STATELESS_SERVER == false {
            //log.Printf("ACB_BLOB Found")
			//log.Printf("get blob content")
			blobChan := make(chan []byte)
			go getBlobByteChan(w, r,blobChan, ACB_BLOB)
			thisCont := <- blobChan
			if thisCont != nil {
				fmt.Fprintf(w, "<script>\n")
				fmt.Fprintf(w, "\n")
				fmt.Fprintf(w, "$(function(){\n")
				fmt.Fprintf(w, "  var currencies = [\n")
				w.Write(thisCont)
				fmt.Fprintf(w, "  ];\n")
				fmt.Fprintf(w, "  // setup autocomplete function pulling from currencies[] array\n")
				fmt.Fprintf(w, "  $('#autocomplete').autocomplete({\n")
				fmt.Fprintf(w, "	lookup: currencies,\n")
				fmt.Fprintf(w, "	onSelect: function (suggestion) {\n")
				fmt.Fprintf(w, "	  		var x = document.getElementById(\"scheme\").value;\n")
				fmt.Fprintf(w, "	  		var uid = document.getElementById(\"aUser\").value;\n")
				fmt.Fprintf(w, "	  		var str = suggestion.data;\n")
				fmt.Fprintf(w, "	  		var n = str.indexOf(\"?\"); if (n > 0) { str = str+\"&UID=\"+uid+\"&uid=\"+uid; } else {str = str+\"?UID=\"+uid+\"&uid=\"+uid;}\n")
				fmt.Fprintf(w, "	  		var res = \"\";\n")
				fmt.Fprintf(w, "	  		if (x == \"http:\") {\n")
				fmt.Fprintf(w, "	  			res = str.replace(\"https://\", \"http://\");\n")
				fmt.Fprintf(w, "	  		}else {\n")
				fmt.Fprintf(w, "	  			res = str.replace(\"http://\", \"https://\");\n")
				fmt.Fprintf(w, "	  		}\n")
                fmt.Fprintf(w, "	        var thehtml = \"<strong><a href='#' onClick=\\\"location.href='\" + res + \"'; return false;\\\">Open Here</a></strong> | ")
                fmt.Fprintf(w, "	        thehtml += \"<strong><a href='#' onClick=\\\"window.postMessage('\" + res + \"', 'https://www.ulapph.com'); return false;\\\">Child Window</a></strong> | ")
                fmt.Fprintf(w, "	        thehtml += \"<strong><a href='#' onClick=\\\"window.open('\" + res + \"'); return false;\\\">In New Tab</a></strong> | ")
                fmt.Fprintf(w, "	        thehtml += \"<strong><a href='#' onClick=\\\"window.open();return false;\\\">Blank Window</a></strong>\";\n")
				fmt.Fprintf(w, "	        $('#outputcontent').html(thehtml);\n")
				fmt.Fprintf(w, "	}\n")
				fmt.Fprintf(w, "  });\n")
				fmt.Fprintf(w, "\n")
				fmt.Fprintf(w, "});\n")
				fmt.Fprintf(w, "\n")
				fmt.Fprintf(w, "</script>\n")
				fmt.Fprintf(w, "</head>\n")
				
				putBytesToMemcacheWithExp(w,r,cKeyAll,thisCont,GEN_CONTENT_EXPIRES4)
	
				return
			}
		}
	}
	//temp for parsing menu/list
	var buf0 bytes.Buffer
	//for auto-complete
	var buf bytes.Buffer 
	var bufM bytes.Buffer
			
	//parse system start menu
	//use the cached data
	//SYSTEM MENU
	cKey := "TOP_LIST_MENU_CACHE"
    TOP_LIST_MENU_CACHE := ""
    TOP_LIST_MENU_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if uid != "general" {
        //TOP_LIST_MENU_CACHE = fmt.Sprintf("%s", item.Value)
        if TOP_LIST_MENU_CACHE != "" {
            //log.Printf("TOP_LIST_MENU_CACHE Found")
			buf0.WriteString(TOP_LIST_MENU_CACHE)
		}
	}
	
	if TOP_LIST_MENU_CACHE == "" {
        //log.Printf("TOP_LIST_MENU_CACHE Empty")
		//bug fix on missing top menu entries
		//clear autocomp list
		cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
        putStrToMemcacheWithoutExp(w,r,cKeyAll,"")
		SYS_MENU := []byte("")
		fmt.Fprintf(w, "	<input type=\"hidden\" id=\"IP\" value=\"%v\"/>", SYS_FIXED_IP_ADDRESS)
		if SYS_STATELESS_SERVER == true {
			SYS_MENU = readDefaultMenu(w,r,"ulapph-start-menu-local.txt")
		} else {
			SYS_MENU = readDefaultMenu(w,r,"ulapph-start-menu.txt")
		}
        b1, b2 := parseMenuList(w,r,SYS_MENU)
        buf.WriteString(b1)
        bufM.WriteString(b2)
	}
		
	//if user is valid, parse his personal menu as well
	cKey = fmt.Sprintf("TOP_LIST_MENU_PERSONAL_CACHE_%s", uid)
    AUTOCOMP_CACHE2 := ""
    AUTOCOMP_CACHE2 = getStrMemcacheValueByKey(w,r,cKey)
	if uid != "general" {
        if AUTOCOMP_CACHE2 != "" {
			buf0.WriteString(AUTOCOMP_CACHE2)
		}
	}
	
	if AUTOCOMP_CACHE2 == "" {
		//bug fix on missing top menu entries
	}
	
	//parse desktops list
	cKey2 := "DESKTOPS_LIST"
    DESKTOPS_LIST := ""
    DESKTOPS_LIST = getStrMemcacheValueByKey(w,r,cKey2)
    if DESKTOPS_LIST != "" {
        buf0.WriteString(DESKTOPS_LIST)
    }
 
	//parse provider apps list
	cKey3 := "PROVIDER_APPS_GOGL"
    PROVIDER_APPS_GOGL := ""
    PROVIDER_APPS_GOGL = getStrMemcacheValueByKey(w,r,cKey3)
    if PROVIDER_APPS_GOGL != "" {
		buf0.WriteString(PROVIDER_APPS_GOGL)
	}
	
	cKey4 := "PROVIDER_APPS_MSFT"
    PROVIDER_APPS_MSFT := ""
    PROVIDER_APPS_MSFT = getStrMemcacheValueByKey(w,r,cKey4)
    if PROVIDER_APPS_MSFT != "" {
		buf0.WriteString(PROVIDER_APPS_MSFT)
	}
	
	cKey5 := "PROVIDER_APPS_DB"
    PROVIDER_APPS_DB := ""
    PROVIDER_APPS_DB = getStrMemcacheValueByKey(w,r,cKey5)
    if PROVIDER_APPS_DB != "" {
		buf0.WriteString(PROVIDER_APPS_DB)
	}
 
	//parse uwm list
	cKey = fmt.Sprintf("WINDOWS_PERSONAL_CACHE_%v", uid)
    WINDOWS_PERSONAL_CACHE := ""
    WINDOWS_PERSONAL_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if uid != "general" {
        if WINDOWS_PERSONAL_CACHE != "" {
			buf0.WriteString(WINDOWS_PERSONAL_CACHE)
		}
	}
 
	fmt.Fprintf(w, "<script>\n")
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "$(function(){\n")
	fmt.Fprintf(w, "  var currencies = [\n")
    b1, b2 := parseMenuList(w,r,buf0.Bytes())
    buf.WriteString(b1)
    bufM.WriteString(b2)

    //Include the unified cloud menu
    SYS_MENU := readDefaultMenu(w,r,"ulapph-cloud-menu.txt")
    c1, c2 := parseMenuList(w,r,SYS_MENU)
    buf.WriteString(c1)
    bufM.WriteString(c2)

	var buf1 bytes.Buffer
	//parse host list
	cKey = fmt.Sprintf("HOST_LIST")
    HOST_LIST := ""
    HOST_LIST = getStrMemcacheValueByKey(w,r,cKey)
    if HOST_LIST != "" {
		buf1.WriteString(HOST_LIST)
	}
	if HOST_LIST == "" {
		IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
		if IS_SEARCH_SERVER == "N" {
			_, HOST_LIST = fetchHostList(w,r)	
		} else {
			_, HOST_LIST = getHostList(w,r)
        }
        if HOST_LIST != "" {
            buf1.WriteString(HOST_LIST)
        }
	}
	
    scanner := bufio.NewScanner(bytes.NewReader(buf1.Bytes()))
    for scanner.Scan() {
		if scanner.Text() != "" {
			SPL := strings.Split(scanner.Text(), "|")
			if len(SPL) >= 2 {
				tURL := SPL[0]
				tKey := SPL[1]
				buf.WriteString(fmt.Sprintf("{ value: '%v', data: '%v' }, ", strings.TrimSpace(tKey), strings.TrimSpace(tURL)))
				bufM.WriteString(fmt.Sprintf("<option value=\"%v\" title=\"%v\">%v</option>", strings.TrimSpace(tURL), strings.TrimSpace(tURL), strings.TrimSpace(tKey)))
				buf.WriteString("")
			}
 
		}
    }
 
	//D0033
	//parse google drive entries
	if uid != "general" {
		
		cKey := fmt.Sprintf("GDRIVE_FILES_CACHE_%v", uid)
		GDCACHE := getBytMemcacheValueByKey(w,r,cKey)
		
		if GDCACHE != nil {
			//retrieve entries
			
			df := new(DriveFiles)
			err := json.Unmarshal(GDCACHE, df)
			if err != nil {
				//log.Panicf("[json.Unmarshal] error: %v", err)
			} else {
				//For each file add in autocomplete
				for i, file := range df.Files {
					str := stripchars(file.Name, "'")
					str = stripchars(str, "\"")
					str = stripchars(str, "\\")
					str = stripchars(str, "\n")
					str = stripchars(str, "\t")
					str = stripchars(str, "{")
					str = stripchars(str, "}")
					str = stripchars(str, ":")
					str = stripchars(str, "[")
					str = stripchars(str, "]")
					name := fmt.Sprintf("GDRIVE-%v | %v", i, str)
					tURL := file.WebViewLink
					buf.WriteString(fmt.Sprintf("{ value: '%v', data: '%v' }, ", strings.TrimSpace(name), strings.TrimSpace(tURL)))
					buf.WriteString("")
				}
			}	
		}
	}
	
	//add default links
	buf.WriteString(fmt.Sprintf("{ value: 'register', data: '%vlogin' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'logs, users, visitors, robots', data: '%vlogin' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'Website', data: '%vcontents?q=home' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'Full Desktop', data: '%vuwm' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'Guest Desktop', data: '%v?q=login&LFUNC=guest&TARGET_URL=/login' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'Random Desktop', data: '%vtools?FUNC=random' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'guest', data: '%v?q=login&LFUNC=guest&TARGET_URL=/login' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'login google', data: '%v?q=login&LFUNC=GOOGLE&TARGET_URL=/login' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'login qr', data: '%v?q=login&LFUNC=token&TARGET_URL=/login' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'login facebook', data: '%vauth?provider=facebook&continue=' },", domRefMatchS))	
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'login github', data: '%vauth?provider=github&continue=' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'login plus', data: '%vauth?provider=gplus&continue=' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'login linkedin', data: '%vauth?provider=linkedin&continue=' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'login onedrive', data: '%vauth?provider=onedrive&continue=' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'www, website, contents', data: '%vcontents?q=home' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'sites directory', data: '%vdirectory?DIR_FUNC=sites' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'people directory', data: '%vdirectory?DIR_FUNC=people' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'search, in ulapph, all sites', data: '%vsearch' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'trending', data: '%vsocial?SO_FUNC=show-trending' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'whats new', data: '%vsocial?SO_FUNC=show-whats-new' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'public chat', data: '%vchat' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'ulapph help', data: 'https://github.com/edwindvinas/ULAPPH-Cloud-Desktop' },"))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'access logs, notifications', data: '%vinfodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'private chat', data: '%vchat?CHAT_FUNC=newChatRoom' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'guestbook', data: '%vguestbook?GB_FUNC=GB_OWNER' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'uwm desktop jswm', data: '%vuwm' },", domRefMatchS))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'golang, gopher', data: 'https://golang.org/' },"))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'google cloud platform', data: 'https://cloud.google.com/' },"))
	buf.WriteString("")
	buf.WriteString(fmt.Sprintf("{ value: 'logout, exit, bye', data: '%vlogout' },", domRefMatchS))
	buf.WriteString("")
	
	//include all docs search index
	FUNC_CODE := "GET_GRP_ID"
	FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	
	iStr := ""
	if SYS_STATELESS_SERVER == false {
		iStr = autoSearchIndex(w, r, "IDX_TDSMEDIA", FL_VALID_USER)
		if iStr != "" {buf.WriteString(iStr)}
		iStr = autoSearchIndex(w, r, "IDX_TDSSLIDE", FL_VALID_USER)
		if iStr != "" {buf.WriteString(iStr)}
		iStr = autoSearchIndex(w, r, "IDX_TDSARTL", FL_VALID_USER)
		if iStr != "" {buf.WriteString(iStr)}
		iStr = autoSearchIndex(w, r, "IDX_TDSICONS", FL_VALID_USER)
		if iStr != "" {buf.WriteString(iStr)}
	}
	
	//save data to cache
	//update cache
	//autocomplete cache
	putBytesToMemcacheWithExp(w,r,cKeyAll,buf.Bytes(),GEN_CONTENT_EXPIRES4)
	//update cache
	putBytesToMemcacheWithExp(w,r,cKeyAll2,bufM.Bytes(),GEN_CONTENT_EXPIRES4)
 
	//respond
	w.Write(buf.Bytes())
	
	if SYS_STATELESS_SERVER == false {
		saveAutoCompsBlob(w,r,uid,buf.Bytes())
	}
	//log.Printf("saveAutoCompsBlob")
	fmt.Fprintf(w, "  ];\n")
	fmt.Fprintf(w, "  // setup autocomplete function pulling from currencies[] array\n")
	fmt.Fprintf(w, "  $('#autocomplete').autocomplete({\n")
	fmt.Fprintf(w, "	lookup: currencies,\n")
	fmt.Fprintf(w, "	onSelect: function (suggestion) {\n")
	fmt.Fprintf(w, "	  		var x = document.getElementById(\"scheme\").value;\n")
	fmt.Fprintf(w, "	  		var uid = document.getElementById(\"aUser\").value;\n")
	fmt.Fprintf(w, "	  		var str = suggestion.data;\n")
	fmt.Fprintf(w, "	  		var n = str.indexOf(\"?\"); if (n > 0) { str = str+\"&UID=\"+uid+\"&uid=\"+uid; } else {str = str+\"?UID=\"+uid+\"&uid=\"+uid;}\n")
	fmt.Fprintf(w, "	  		var res = \"\";\n")
	fmt.Fprintf(w, "	  		if (x == \"http:\") {\n")
	fmt.Fprintf(w, "	  			res = str.replace(\"https://\", \"http://\");\n")
	fmt.Fprintf(w, "	  		}else {\n")
	fmt.Fprintf(w, "	  			res = str.replace(\"http://\", \"https://\");\n")
	fmt.Fprintf(w, "	  		}\n")
	  fmt.Fprintf(w, "	        var thehtml = \"<strong><a href='#' onClick=\\\"location.href='\" + res + \"'; return false;\\\">Open Here</a></strong> | <strong><a href='#' onClick=\\\"window.postMessage('\" + res + \"', 'https://www.ulapph.com'); return false;\\\">Child Window</a></strong> | <strong><a href='#' onClick=\\\"window.open('\" + res + \"'); return false;\\\">In New Tab</a></strong> | <strong><a href='#' onClick=\\\"window.open();return false;\\\">Blank Window</a></strong>\";\n")
	  fmt.Fprintf(w, "	        $('#outputcontent').html(thehtml);\n")
	fmt.Fprintf(w, "	}\n")
	fmt.Fprintf(w, "  });\n")
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "});\n")
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "</script>\n")
	fmt.Fprintf(w, "</head>\n")
	return
}
//parses the top/personal menu so it can be displayed in widget search
func parseMenuList(w http.ResponseWriter, r *http.Request, input []byte) (string, string) {
	var buf bytes.Buffer
	var bufM bytes.Buffer
    scanner := bufio.NewScanner(bytes.NewReader(input))
    for scanner.Scan() {
        if strings.Index(scanner.Text(), "{title:") != -1 || strings.Index(scanner.Text(), "openWindow") != -1 {
            //<input type="hidden" value="'/tools?FUNC=WIDGET&t=RemoteControl', 800, 500, 'left', 'top', {title: 'Remote Control', icon: '/static/img/jswm-web.png'}" size="60" id="remoteControl" />
            tMessage := strings.TrimSpace(scanner.Text())
            i := strings.Index(tMessage, "title:")
            if i != -1 {			
                temp := strings.Split(tMessage, "'")
                buf.WriteString(fmt.Sprintf("{ value: '%v', data: '%v' }, ", temp[7], temp[1]))
                bufM.WriteString(fmt.Sprintf("<option value=\"%v\" title=\"%v\">%v</option>", temp[1], temp[1], temp[7]))
            }
            if strings.Index(tMessage, "openWindow") != -1 && strings.Index(scanner.Text(), "onclick") != -1 {
                //<a href="#page" onclick="openWindow('https://funhtml5games.com/', 'HTML5 Games' ); return false">HTML5 Games</a>
                temp := strings.Split(tMessage, "'")
                temp2 := strings.Split(tMessage, ">")
                temp3 := strings.Split(temp2[1], "<")
                buf.WriteString(fmt.Sprintf("{ value: '%v', data: '%v' }, ", fmt.Sprintf("%v - %v", temp[3], temp3[0]), temp[1]))
                bufM.WriteString(fmt.Sprintf("<option value=\"%v\" title=\"%v\">%v</option>", temp[1], temp[1], fmt.Sprintf("%v - %v", temp[3], temp3[0])))
            }
        }
        if strings.Index(scanner.Text(), "window.open") != -1 && strings.Index(scanner.Text(), "onclick") != -1 {
            //window.open('https://gmail.google.com/','_blank');
            //<a href="#page" onclick="window.open('https://ulapph-4.appspot.com/uwm','_blank'); return false">UPOU-MIS</a>
            tMessage := strings.TrimSpace(scanner.Text())
            //get link
            temp := strings.Split(tMessage, "'")
            //get name
            if strings.Index(scanner.Text(), "onclick=") != -1 {
                temp2 := strings.Split(tMessage, ">")
                temp3 := strings.Split(temp2[1], "<")
                buf.WriteString(fmt.Sprintf("{ value: '%v', data: '%v' }, ", temp3[0], temp[1]))
                bufM.WriteString(fmt.Sprintf("<option value=\"%v\" title=\"%v\">%v</option>", temp[1], temp[1], temp3[0]))
            } else {
                buf.WriteString(fmt.Sprintf("{ value: '%v', data: '%v' }, ", temp[1], temp[1]))
                bufM.WriteString(fmt.Sprintf("<option value=\"%v\" title=\"%v\">%v</option>", temp[1], temp[1], temp[1]))
            }
            buf.WriteString("")
        }
        if strings.Index(scanner.Text(), "window.open") != -1 && strings.Index(scanner.Text(), "onclick") == -1 {
            //window.open("https://www.sample.com/link.html", "MyLinkTitle");
            tMessage := strings.TrimSpace(scanner.Text())
            //get link
            temp := strings.Split(tMessage, "\"")
			if len(temp) == 5 {
                buf.WriteString(fmt.Sprintf("{ value: '%v', data: '%v' }, ", temp[3], temp[1]))
                bufM.WriteString(fmt.Sprintf("<option value=\"%v\" title=\"%v\">%v</option>", temp[1], temp[3], temp[3]))
				
			}
            buf.WriteString("")
        }
    }
    return buf.String(), bufM.String()
} 
//search engine for articles, slides and media files 
func autoSearchIndex(w http.ResponseWriter, r *http.Request, IDX_TARGET string, FL_VALID_USER bool) string {
    return ""
}
//shows the system top list menu based on the entries found in the media file
func showTopListMenu(w http.ResponseWriter, r *http.Request, mode string) {
    //log.Printf("showTopListMenu()")
    //c := appengine.NewContext(r)
	
	_, uid := checkSession(w,r)
	
	var buf bytes.Buffer
		
	buf.WriteString(fmt.Sprintf("<nav id=\"menu\">"))
    buf.WriteString(fmt.Sprintf("<ul>"))

	////////////////////////
	
	//SYSTEM MENU
	cKey := "TOP_LIST_MENU_CACHE"
	TOP_LIST_MENU_CACHE := ""
	TOP_LIST_MENU_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	
	if TOP_LIST_MENU_CACHE == ""  {
		//log.Printf("top list menu cache not found!")
		var buf2 bytes.Buffer
		//get config id
		docID := 0
		cfgName := "SYSTEM_Top_List_Menu_Media_ID"
		_, docID = getTDSCNFG(w,r,1,cfgName)
		if docID > 0 {
			BLOB_KEY := ""
			BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
			blobText := getBlobText(w, r, BLOB_KEY)
			if strings.Index(blobText, "quota") != -1 {
                //D0089
                //SYS_MENU := fetchURL(w,r,SYS_DEFAULT_MENU_GIT)
				SYS_MENU := []byte("")
				fmt.Fprintf(w, "	<input type=\"hidden\" id=\"IP\" value=\"%v\"/>", SYS_FIXED_IP_ADDRESS)
				if SYS_STATELESS_SERVER == true {
					SYS_MENU = readDefaultMenu(w,r,"ulapph-start-menu-local.txt")
				} else {
					SYS_MENU = readDefaultMenu(w,r,"ulapph-start-menu.txt")
				}
				buf2.WriteString(fmt.Sprintf("%v\n", string(SYS_MENU)))
			} else {
				buf2.WriteString(fmt.Sprintf("%v\n", blobText))
			}
		}	else {
            //SYS_MENU := fetchURL(w,r,SYS_DEFAULT_MENU_GIT)
			SYS_MENU := []byte("")
			fmt.Fprintf(w, "	<input type=\"hidden\" id=\"IP\" value=\"%v\"/>", SYS_FIXED_IP_ADDRESS)
			if SYS_STATELESS_SERVER == true {
				SYS_MENU = readDefaultMenu(w,r,"ulapph-start-menu-local.txt")
			} else {
				SYS_MENU = readDefaultMenu(w,r,"ulapph-start-menu.txt")
			}
			buf2.WriteString(fmt.Sprintf("%v\n", string(SYS_MENU)))
		}
		
		if buf2.String() == "" {
            //SYS_MENU := fetchURL(w,r,SYS_DEFAULT_MENU_GIT)
			SYS_MENU := []byte("")
			fmt.Fprintf(w, "	<input type=\"hidden\" id=\"IP\" value=\"%v\"/>", SYS_FIXED_IP_ADDRESS)
			if SYS_STATELESS_SERVER == true {
				SYS_MENU = readDefaultMenu(w,r,"ulapph-start-menu-local.txt")
			} else {
				SYS_MENU = readDefaultMenu(w,r,"ulapph-start-menu.txt")
			}
			buf2.WriteString(fmt.Sprintf("%v\n", string(SYS_MENU)))
		}
		
		//update cache
		putBytesToMemcacheWithExp(w,r,cKey,buf2.Bytes(),MC_ADS_EXPIRES_30_MIN)
 
		buf.WriteString(fmt.Sprintf("%v", buf2.String()))
	
	} else {
		//log.Printf("top list menu cache found!")
		buf.WriteString(fmt.Sprintf("%v", TOP_LIST_MENU_CACHE))
	
    }
 
	//auto-generate desktops menu from categories list
	dlist := listDesktops(w,r,uid)
	buf.WriteString(fmt.Sprintf("%v", dlist))
	
	//provider apps
	provApps := getAppsProvider(w,r)
	buf.WriteString(fmt.Sprintf("%v", provApps))
	
	if uid != "" {
		//PERSONAL MENU
		cKey := fmt.Sprintf("TOP_LIST_MENU_PERSONAL_CACHE_%v", uid)
		cfgName := fmt.Sprintf("PERSONAL_Top_List_Menu_Media_ID_%v", uid)
		TOP_LIST_MENU_PERSONAL_CACHE := ""
		TOP_LIST_MENU_PERSONAL_CACHE = getStrMemcacheValueByKey(w,r,cKey)
		
		if TOP_LIST_MENU_PERSONAL_CACHE == "" {
			var buf2 bytes.Buffer
			//get config id
			docID := 0
			_, docID = getTDSCNFG(w,r,1,cfgName)
			BLOB_KEY := ""
			BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
			//var buf bytes.Buffer
            //reader := blobstore.NewReader(c, appengine.BlobKey(BLOB_KEY))
            blobText := getBlobText(w, r, BLOB_KEY)
			s := bufio.NewScanner(strings.NewReader(blobText))
			//secCtr := 0
			for s.Scan() {
				//fmt.Fprintf(w, "%v", s.Text())
				if len(s.Text()) > 0 {
					thisStr := fmt.Sprintf("%v", s.Text())
					if string(thisStr[0]) != "#" {
						buf2.WriteString(fmt.Sprintf("%v\n", s.Text()))
					}
				} else {
					buf2.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			}
			//update cache
			putBytesToMemcacheWithoutExp(w,r,cKey,buf2.Bytes())
			
			buf.WriteString(fmt.Sprintf("%v", buf2.String()))
		
		} else {
			//log.Printf("top menu cache found!")
			buf.WriteString(fmt.Sprintf("%v", TOP_LIST_MENU_PERSONAL_CACHE))
		
		}
    }

	buf.WriteString(fmt.Sprintf("</ul>"))

	buf.WriteString(fmt.Sprintf("</nav>"))
	
	//clear autocomp list
	cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
	putStrToMemcacheWithoutExp(w,r,cKeyAll,"")
	
	if mode == "s" {
		writeHTMLHeader(w, 200)
		w.Write(buf.Bytes())
	}
	return		
	
}
//list all wallpapers
func listImgWallpapers(w http.ResponseWriter, r *http.Request) []byte {
	var buf bytes.Buffer
	files, err := ioutil.ReadDir("./static/img/wallpapers/")
	if err != nil {
		//log.Fatal(err)
		ulapphDebug(w,r, "error", fmt.Sprintf("listImgWallpapers() ERROR: %v", err))
		return nil
	}
	
	buf.WriteString(fmt.Sprintf("<hr>"))
	buf.WriteString(fmt.Sprintf("<h3>Wallpapers</h3>"))
	buf.WriteString(fmt.Sprintf("You can drag image to the UWM desktop to set as current wallpaper."))
	for _, f := range files {
		fName := f.Name()
		buf.WriteString(fmt.Sprintf("<img src=\"/img/wallpapers/%v\" width=\"50\" height=\"50\" title=\"%v\"></img>", fName, fName))
		//fmt.Println(f.Name())
	}
	return buf.Bytes()
}

//D0102
//read desktop categories file from templates
func readDesktopCategories(w http.ResponseWriter, r *http.Request, name string) []byte {
    //log.Printf("readDesktopCategories(): %v", name)
    file, err := os.Open("templates/"+name)
    if err != nil {
        log.Fatal(err)
    }
    defer file.Close()
    b, err := ioutil.ReadAll(file)
    if err != nil {
        log.Fatal(err)
    }
	var buf bytes.Buffer
	s := bufio.NewScanner(bytes.NewReader(b))
	for s.Scan() {
		switch {
			case strings.HasPrefix(s.Text(), "#APPEND_URL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_URL_DATA: "):
				SPL := strings.Split(s.Text()," ")
				thisStr := fmt.Sprintf("%v", s.Text())
				if len(SPL) > 1 && string(thisStr[0]) == "#" {
					TARGET := SPL[1]
					validateURL(w,r,TARGET)
					//fetch contents of url and append
					urlData := fetchURL(w,r,TARGET)
					if urlData != "" {
						scanner := bufio.NewScanner(strings.NewReader(urlData))	
						for scanner.Scan() {
							msg := scanner.Text()
							buf.WriteString(fmt.Sprintf("%v\n", msg))
						}
					}
				} else {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			case strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA: "):
				SPL := strings.Split(s.Text()," ")
				thisStr := fmt.Sprintf("%v", s.Text())
				if len(SPL) > 1 && string(thisStr[0]) == "#" {
					//append it now
					BLOB_KEY := contentCheckSid(w,r,SPL[1])
					appText := getBlobText(w, r, BLOB_KEY)
					buf.WriteString(fmt.Sprintf("%v\n", appText))
				} else {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			default:
				SPL := strings.Split(s.Text()," ")
				thisStr := fmt.Sprintf("%v", s.Text())
				if len(SPL) > 1 && string(thisStr[0]) == "#" {
					//ignore comments
				} else {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
		}
	}
    return buf.Bytes()
}
//D0089
//show default start menu from templates
func readDefaultMenu(w http.ResponseWriter, r *http.Request, name string) []byte {
    //log.Printf("readDefaultMenu(): %v", name)
    file, err := os.Open("templates/"+name)
    if err != nil {
        log.Fatal(err)
    }
    defer file.Close()
    b, err := ioutil.ReadAll(file)
    if err != nil {
        log.Fatal(err)
    }
    return b
}
//D0098
//show default login page from templates
func readDefaultLogin(w http.ResponseWriter, r *http.Request, name, cont string) {
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT2)
	//tc := time.Now()
	doc.STR_FILLER1 = cont
	data := struct {
		*TEMPSTRUCT2
		Template    *template.Template
	}{
		doc,
		t,
	}
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}
//D0098
//show local ace editor
func showAceEditor(w http.ResponseWriter, r *http.Request, name, uid, pText string) {
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT2)
	//tc := time.Now()
	doc.STR_FILLER1 = pText
	doc.STR_FILLER2 = uid
	data := struct {
		*TEMPSTRUCT2
		Template    *template.Template
	}{
		doc,
		t,
	}
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}
//D0089
//show default categories
func readDefaultCategories(w http.ResponseWriter, r *http.Request) []byte {
    file, err := os.Open("templates/ulapph-categories-default.txt")
    if err != nil {
        log.Fatal(err)
    }
    defer file.Close()
    b, err := ioutil.ReadAll(file)
    if err != nil {
        log.Fatal(err)
    }
    return b
}
//shows the left menu of the website 
func showLeftMenu(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	_, uid := checkSession(w,r)
	FUNC_CODE := "GET_GRP_ID"
	//uid := uid
	FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	if FL_VALID_USER == true {
	}
	cKey := "HIDABLE_MENU_CACHE"
	HIDABLE_MENU_CACHE := ""
	HIDABLE_MENU_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if strings.TrimSpace(HIDABLE_MENU_CACHE) == "" {
		//get config id
		docID := 0
		cfgName := "SYSTEM_Left_Menu_Media_ID"
		_, docID = getTDSCNFG(w,r,1,cfgName)
        BLOB_KEY := ""
        if docID > 0 {
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
        }
		var buf bytes.Buffer
        //reader := blobstore.NewReader(c, appengine.BlobKey(BLOB_KEY))
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            //panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		//secCtr := 0
		for s.Scan() {
			//fmt.Fprintf(w, "%v", s.Text())
			thisStr := strings.Replace(s.Text(), "width=\"60\"", "width=\"40\"", -1)
			thisStr = strings.Replace(thisStr, "height=\"60\"", "height=\"40\"", -1)
			buf.WriteString(fmt.Sprintf("%v\n", thisStr))
		}
		//update cache
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		w.Write(buf.Bytes())
		return
	
	} else {
		w.Write([]byte(HIDABLE_MENU_CACHE))
		return
	}
 
}
//D0070
func getCategoriesBytes(w http.ResponseWriter, r *http.Request, uid string) ([]byte){
	if SYS_STATELESS_SERVER == true {
		return nil
	}
	//c := appengine.NewContext(r)
	cKey := "CATEGORY_LIST"
	CATEGORY_LIST := ""
	CATEGORY_LIST = getStrMemcacheValueByKey(w,r,cKey)
	if CATEGORY_LIST == "" {
		//get config id
		docID := 0
		cfgName := "SYSTEM_Category_List_Media_ID"
        _, docID = getTDSCNFG(w,r,1,cfgName)
        if docID <= 0 {
            return nil
        }
        BLOB_KEY := ""
        if docID > 0 {
        BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
        }
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            //panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		//secCtr := 0
		for s.Scan() {
			buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
		}
		//update cache
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		//writeHTMLHeader(w, 200)
		//w.Write(buf.Bytes())
		return buf.Bytes()
	} else {
		//writeHTMLHeader(w, 200)
		return []byte(CATEGORY_LIST)
	}
	//return nil
}
//gets the categories list from media file
//connected to how the all desktops are listed 
func getCategories(w http.ResponseWriter, r *http.Request, uid string) {
	if SYS_STATELESS_SERVER == true {
		writeHTMLHeader(w, 200)
		w.Write([]byte(""))
		return
	}
	//c := appengine.NewContext(r)
	cKey := "CATEGORY_LIST"
	CATEGORY_LIST := ""
	CATEGORY_LIST = getStrMemcacheValueByKey(w,r,cKey)
	if CATEGORY_LIST == "" {
		//get config id
		docID := 0
		cfgName := "SYSTEM_Category_List_Media_ID"
        _, docID = getTDSCNFG(w,r,1,cfgName)
        if docID == 0 {
            //use default
            CATEGORY_LIST := readDefaultCategories(w,r)
            putBytesToMemcacheWithoutExp(w,r,cKey,CATEGORY_LIST)
            //writeHTMLHeader(w, 200)
            w.Write(CATEGORY_LIST)
            return
        }
        BLOB_KEY := ""
        if docID > 0 {
        BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
        }
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            //panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		//secCtr := 0
		for s.Scan() {
			buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
		}
		//update cache
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		writeHTMLHeader(w, 200)
		w.Write(buf.Bytes())
		return
	} else {
		writeHTMLHeader(w, 200)
		w.Write([]byte(CATEGORY_LIST))
		return
	}
}
//handles the /cache url
//used for caching using app cache 
func ulapphCache(w http.ResponseWriter, r *http.Request) {
	
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
                    		
	CACHE_TARGET := r.FormValue("q")
	deskNum := r.FormValue("d")
	deskName := fmt.Sprintf("%v%v", CACHE_TARGET, deskNum)
	
	FORCE_CACHE_MANIFEST_RELOAD_FLAG := ""
	
	if SYS_APP_CACHE_ENABLE == false {
		FORCE_CACHE_MANIFEST_RELOAD_FLAG = "Y"
	}
	
	switch CACHE_TARGET {			
 
		case "ulocD":
			SID := r.FormValue("SID")
			cKey := fmt.Sprintf("CACHE_MANIFEST_%s", SID)
			CACHE_MANIFEST_ULOCD := ""
			CACHE_MANIFEST_ULOCD = getStrMemcacheValueByKey(w,r,cKey)
			
			w.Header().Set("Content-Type", "text/cache-manifest")
			w.WriteHeader(200)
			if err := ulocACache.Execute(w, CACHE_MANIFEST_ULOCD); err != nil {
			  panic(err)
			}
			return
	
		case "ulocA":
			cKey := fmt.Sprintf("CACHE_MANIFEST_RELOAD_ULOC_%s", uid)
			CACHE_MANIFEST_RELOAD_ULOC := ""
			CACHE_MANIFEST_RELOAD_ULOC = getStrMemcacheValueByKey(w,r,cKey)
			
			w.Header().Set("Content-Type", "text/cache-manifest")
			w.WriteHeader(200)
			if err := ulocACache.Execute(w, CACHE_MANIFEST_RELOAD_ULOC); err != nil {
			  panic(err)
			}
			return
			
		case "ulocB":
			cKey := fmt.Sprintf("CACHE_MANIFEST_RELOAD_ULOC_%s", uid)
			CACHE_MANIFEST_RELOAD_ULOC := ""
			CACHE_MANIFEST_RELOAD_ULOC = getStrMemcacheValueByKey(w,r,cKey)
			
			w.Header().Set("Content-Type", "text/cache-manifest")
			w.WriteHeader(200)
			if err := ulocBCache.Execute(w, CACHE_MANIFEST_RELOAD_ULOC); err != nil {
			  panic(err)
			}
			return
			
		case "desktop0":
			
			//check if cache needs reload
			//CACHE_MANIFEST_RELOAD_FLAG_ulapph@gmail.com
			CACHE_MANIFEST_RELOAD_FLAG := ""
			cKey := fmt.Sprintf("CACHE_MANIFEST_RELOAD_FLAG_%s", uid)
			CACHE_MANIFEST_RELOAD_FLAG = getStrMemcacheValueByKey(w,r,cKey)
			if CACHE_MANIFEST_RELOAD_FLAG == "" || CACHE_MANIFEST_RELOAD_FLAG == "Y" || FORCE_CACHE_MANIFEST_RELOAD_FLAG == "Y" {
				w.Header().Set("Content-Type", "text/cache-manifest")
				w.WriteHeader(200)
				//update timestamp
				timestamp := getTimestamp()
				cText := fmt.Sprintf("%s-%v", uid, timestamp)
				if err := userAccessCacheDesktop0Part1.Execute(w, cText); err != nil {
				  panic(err)
				}
 
				//check if personal wallpaper found
				TASK_MEMCACHER_desktopWP_loginWP := ""
				wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", "loginWP", uid)
				TASK_MEMCACHER_desktopWP_loginWP = getStrMemcacheValueByKey(w,r,wpKey)
				//update login wallpaper
				if err := userAccessCacheDesktop0Part2.Execute(w, TASK_MEMCACHER_desktopWP_loginWP); err != nil {   		
				  panic(err)
				}
				TASK_MEMCACHER_desktopWP_bigWP := ""
				wpKey = fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", "bigWP", uid)
				TASK_MEMCACHER_desktopWP_bigWP = getStrMemcacheValueByKey(w,r,wpKey)
				//update main wallpaper
				if err := userAccessCacheDesktop0Part3.Execute(w, TASK_MEMCACHER_desktopWP_bigWP); err != nil {   		
				  panic(err)
				}
				
				//set manifest refresh to N
				putStrToMemcacheWithoutExp(w,r,cKey,"N")
			} else {
				w.Header().Set("Content-Type", "text/cache-manifest")
				w.WriteHeader(200)
				//update timestamp
				if err := userAccessCacheDesktop0Part1.Execute(w, ""); err != nil {   		
				  panic(err)
				}
 
				//check if personal wallpaper found
				TASK_MEMCACHER_desktopWP_loginWP := ""
				wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", "loginWP", uid)
				TASK_MEMCACHER_desktopWP_loginWP = getStrMemcacheValueByKey(w,r,wpKey)
				//update login wallpaper
				if err := userAccessCacheDesktop0Part2.Execute(w, TASK_MEMCACHER_desktopWP_loginWP); err != nil {   		
				  panic(err)
				}
				TASK_MEMCACHER_desktopWP_bigWP := ""
				wpKey = fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", "bigWP", uid)
				TASK_MEMCACHER_desktopWP_bigWP = getStrMemcacheValueByKey(w,r,wpKey)
				//update main wallpaper
				if err := userAccessCacheDesktop0Part3.Execute(w, TASK_MEMCACHER_desktopWP_bigWP); err != nil {   		
				  panic(err)
				}
				
			}
			
		case "desktopN":
			
			//check if cache needs reload
			//CACHE_MANIFEST_RELOAD_FLAG_ulapph@gmail.com
			CACHE_MANIFEST_RELOAD_FLAG := ""
			cKey := fmt.Sprintf("CACHE_MANIFEST_RELOAD_FLAG_%s", deskName)
			CACHE_MANIFEST_RELOAD_FLAG = getStrMemcacheValueByKey(w,r,cKey)
			if CACHE_MANIFEST_RELOAD_FLAG == "" || CACHE_MANIFEST_RELOAD_FLAG == "Y" || FORCE_CACHE_MANIFEST_RELOAD_FLAG == "Y" {
				w.Header().Set("Content-Type", "text/cache-manifest")
				w.WriteHeader(200)
				//update timestamp
				timestamp := getTimestamp()
				cText := fmt.Sprintf("%s-%v", uid, timestamp)
				if err := userAccessCacheDesktop0Part1.Execute(w, cText); err != nil {
				  panic(err)
				}
 
				//check if personal wallpaper found
				TASK_MEMCACHER_desktopWP_loginWP := ""
				wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "loginWP")
				TASK_MEMCACHER_desktopWP_loginWP = getStrMemcacheValueByKey(w,r,wpKey)
				//update login wallpaper
				if err := userAccessCacheDesktop0Part2.Execute(w, TASK_MEMCACHER_desktopWP_loginWP); err != nil {   		
				  panic(err)
				}
				TASK_MEMCACHER_desktopWP_bigWP := ""
				wpKey = fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "bigWP")
				TASK_MEMCACHER_desktopWP_bigWP = getStrMemcacheValueByKey(w,r,wpKey)
				//update main wallpaper
				if err := userAccessCacheDesktop0Part3.Execute(w, TASK_MEMCACHER_desktopWP_bigWP); err != nil {   		
				  panic(err)
				}
				
				//set manifest refresh to N
				putStrToMemcacheWithoutExp(w,r,cKey,"N")
			} else {
				w.Header().Set("Content-Type", "text/cache-manifest")
				w.WriteHeader(200)
				//update timestamp
				if err := userAccessCacheDesktop0Part1.Execute(w, ""); err != nil {   		
				  panic(err)
				}
				//check if personal wallpaper found
				TASK_MEMCACHER_desktopWP_loginWP := ""
				wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "loginWP")
				TASK_MEMCACHER_desktopWP_loginWP = getStrMemcacheValueByKey(w,r,wpKey)
 
				//update login wallpaper
				if err := userAccessCacheDesktop0Part2.Execute(w, TASK_MEMCACHER_desktopWP_loginWP); err != nil {   		
				  panic(err)
				}
				TASK_MEMCACHER_desktopWP_bigWP := ""
				wpKey = fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", deskName, "bigWP")
				TASK_MEMCACHER_desktopWP_bigWP = getStrMemcacheValueByKey(w,r,wpKey)
 
				//update main wallpaper
				if err := userAccessCacheDesktop0Part3.Execute(w, TASK_MEMCACHER_desktopWP_bigWP); err != nil {   		
				  panic(err)
				}
				
			}
				
		default:
			msgDtl := fmt.Sprintf("[U00025] ERROR: Invalid cache request.")
			msgTyp := "error"
			msgURL := "/?q=home&ERROR=invalidCache"
			action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Carousel homepage.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
	}
}

//sends a system message via email 
func SENDSYSMSG(c context.Context, SYSMAIL, SYSMSGS, UID string) string {
 
    if (SYS_MSG_ENABLE == true) {
		t := time.Now().Local()
		const layout = "Jan 2, 2006"
        SUBJECT := fmt.Sprintf("SYSERR %s [%s]", t.Format(layout), UID)
        FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
        SENDGENEMAIL(c, SUBJECT, SYSMAIL, FROM, SYSMSGS)
	}
    return SYSMAIL
}

//sends an invite via email 
func SENDINVITE(c context.Context, desktop, uid, inviteEmail string) string {
 
    if (SYS_INV_ENABLE == true) {
		SUBJECT := fmt.Sprintf("[ULAPPH INVITATION] Invitation to join ULAPPH from %s", uid)
        BODY := fmt.Sprintf("Hi %s!<br><br>Your friend (%s) has just joined ULAPPH and he would like you to join as well." +
                            "Just visit https://www.ulapph.com in order to join ULAPPH -- the free Cloud Desktop in the Philippines!" +
                            "<br><br>You need to have a valid Google email account." +
                            "We will be waiting for you.<br><br>Thank you!<br><br> *** ULAPPH *** ", inviteEmail, uid)
        FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
        SENDGENEMAIL(c, SUBJECT, inviteEmail, FROM, BODY)
	}
    return desktop
}

//sends ads event via email 
func SENDADSEVENT(c context.Context, ToEmail, Message, uid string) string {
 
    if (SYS_LOG_ADS_VIEW_MAIL == true) {
		SUBJECT := fmt.Sprintf("[ULAPPH ADS CLICK] Ads clicked by %s", uid)
		BODY := fmt.Sprintf("%v", Message)
        FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
        SENDGENEMAIL(c, SUBJECT, ToEmail, FROM, BODY)
	}
    return uid
}
//sends a generic email 
func SENDGENEMAIL(c context.Context, SUBJECT, TO, FROM, MESSAGE string) string {
 
    if (SYS_GEN_MAIL_ENABLE == true) {
        mailjetClient := mailjet.NewMailjetClient(SYS_MAILJET_API_KEY, SYS_MAILJET_API_SECRET)
        messagesInfo := []mailjet.InfoMessagesV31 {
            mailjet.InfoMessagesV31{
            From: &mailjet.RecipientV31{
                Email: FROM,
                Name: "ULAPPH Desktop",
            },
            To: &mailjet.RecipientsV31{
                mailjet.RecipientV31 {
                Email: TO,
                Name: TO,
                },
            },
            Subject: SUBJECT,
            TextPart: MESSAGE,
            HTMLPart: MESSAGE,
            CustomID: "SENDGENEMAIL",
            },
        }
        messages := mailjet.MessagesV31{Info: messagesInfo }
        res, err := mailjetClient.SendMailV31(&messages)
        if err != nil {
            log.Fatal(err)
        }
        //log.Printf("Mailjet email response: %+v\n", res)
		ulapphDebug2("info", fmt.Sprintf("Mailjet email response: %+v\n", res))
	}
    return TO
}

//sends reports via email 
func SENDREPORTS(c context.Context, SUBJECT, TO, FROM, MESSAGE string) string {
 
    if (SYS_SEND_REPORTS_ENABLE == true) {
		BODY := MESSAGE
        SENDGENEMAIL(c, SUBJECT, TO, FROM, BODY)
	}
    return TO
}

//sends email about a shared desktop0 
func SENDSHARED0MAIL(c context.Context, TO, FROM, MESSAGE string) string {
 
    if (SYS_SHR_MAIL_ENABLE == true) {
		SUBJECT := fmt.Sprintf("[ULAPPH SHARING] Shared Desktop0 Icons from %s", TO)
        BODY := fmt.Sprintf("Hi %s!<br><br>Please forward to your friend and ask him/her to click the below link." + 
                            "If link is not all clickable, copy/paste text in between [S0092] and [END]." +
                            "<br><br>********************************************************************************<br><br>" +
                            "[S0092]<br>%v<br>[END]<br><br>********************************************************************************<br><br>" +
                            "Please click the above link to save this to your desktop0.", TO, MESSAGE)
        SENDGENEMAIL(c, SUBJECT, TO, FROM, BODY)
	}
    return TO
}
//sends an inquiry via email 
func SENDINQUIRY(c context.Context, desktop, uid, inquireEmail, contactNum, message string) string {

    if (SYS_INQ_ENABLE == true) {
		SUBJECT := fmt.Sprintf("[ULAPPH ADVERTISEMENT] Inquiry to advertise in ULAPPH from %s", uid)
        BODY := fmt.Sprintf("Hi!<br><br>%v<br><br>Submitted via %s\nContac Email: %s \nContact Number:%s.<br><br>Thank you!<br><br>" +
                            "*** ULAPPH *** ", message, desktop, inquireEmail, contactNum)
        FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
        SENDGENEMAIL(c, SUBJECT, SYSMAIL, FROM, BODY)
	}
    return uid
}
 
//sends an ads inquiry via email 
func SENDADSINQ(c context.Context, desktop, uid, inquireEmail, contactNum, message string) string {
 
    if (SYS_INQ_ENABLE == true) {
		SUBJECT := fmt.Sprintf("[ULAPPH ADVERTISEMENT] Inquiry to advertise in ULAPPH from %s", uid)
        BODY := fmt.Sprintf("Hi!<br><br>%v<br><br>Submitted via %s\nContac Email: %s \nContact Number:%s.<br><br>Thank you!<br><br>" +
                            "*** ULAPPH *** ", message, desktop, inquireEmail, contactNum)
        FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
        SENDGENEMAIL(c, SUBJECT, ADSMAIL, FROM, BODY)
	}
    return uid
}

//sends feedback via email 
func SENDFEEDBACK(c context.Context, fbType, desktop, uid, inquireEmail, contactNum, message string) string {
 
	switch fbType {
		case "feedback":
			if (SYS_FBK_ENABLE == true) {
				SUBJECT := fmt.Sprintf("[ULAPPH FEEDBACK] Feedback from %s", uid)
                BODY := fmt.Sprintf("Hi!<br><br>An inquiry has been sent to ULAPPH via %s. Contact him/her via email (%s) or %s." +
                                    "<br><br>MESSAGE:\n%v <br><br>Thank you!<br><br> *** ULAPPH *** ", desktop, inquireEmail, contactNum, message)
                FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
                SENDGENEMAIL(c, SUBJECT, SYSMAIL, FROM, BODY)
			}
		
		case "fb-cancel":
				SUBJECT := fmt.Sprintf("[ULAPPH PAYPAL CANCEL] Paypal payment cancelled.")
				BODY := fmt.Sprintf("Hi!<br><br>A payment has been cancelled.<br><br>InquireEmail: %v <br>ContactNum: %v<br>Message: %v", inquireEmail, contactNum, message)
                FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
                SENDGENEMAIL(c, SUBJECT, SYSMAIL, FROM, BODY)
 
		case "fb-success":
				SUBJECT := fmt.Sprintf("[ULAPPH PAYPAL SUCCESS] Paypal payment successful.")
				BODY := fmt.Sprintf("Hi!<br><br>A payment has been successful.<br><br>InquireEmail: %v <br>ContactNum: %v<br>Message: %v", inquireEmail, contactNum, message)
                FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
                SENDGENEMAIL(c, SUBJECT, SYSMAIL, FROM, BODY)
				
		case "services":
				SUBJECT := fmt.Sprintf("[ULAPPH SERVICES] Services Inquiry from %s", uid)
                BODY := fmt.Sprintf("Hi!<br><br>An inquiry has been sent to ULAPPH via %s. Contact him/her via email (%s) or %s." +
                                    "<br><br>MESSAGE:\n%v <br><br>Thank you!<br><br> *** ULAPPH *** ", desktop, inquireEmail, contactNum, message)
                FROM := fmt.Sprintf("ULAPPH <anything@%v.appspotmail.com>", SYS_SERVER_NAME)
                SENDGENEMAIL(c, SUBJECT, SYSMAIL, FROM, BODY)
	}
    return uid
}
//handles the /settings url for handling settings and configuratios of desktops
func settings(w http.ResponseWriter, r *http.Request) {

	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	checkReferrer(w,r)
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
    //D0086
    datastoreClient := createClientDS()
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	updateUserActiveData(w, r, c, uid, "/settings")
	
	uReferer := r.Referer()
	sl := strings.Split(uReferer, "/desktop?d=")
	thisDesk:= sl[len(sl)-1]
	thisDeskNum := str2int(thisDesk)
	currDesktop := ""
	if thisDeskNum <= 0 {
		currDesktop = "desktop0"
	} else {
		currDesktop = fmt.Sprintf("desktop%v", thisDeskNum)
	}

	//get user privilege
	FUNC_CODE := "GET_GRP_ID"
	FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
	if FL_VALID_USER == true {
	
		if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN" ) && currDesktop == "desktop0" {
			TEMPDATA := TEMPSTRUCT{
				NUM_FILLER1: thisDeskNum,
				STR_FILLER1: uid,
			}
			if err := iconsSettingsTemplateHeader.Execute(w, &TEMPDATA); err != nil {
				 panic(err)
			}
 
			if err := iconsSettingsTemplateHeader2.Execute(w, uid); err != nil {
				 panic(err)
			}
			
			q := datastore.NewQuery("TDSICONS").Filter("DESKTOP= ", "all")
			//log.Panicf("[S0093]")
			recCount,_ := datastoreClient.Count(c,q)
            icons := make([]TDSICONS, 0, recCount)
            //log.Printf("datastoreClient.Get()  [15507]")
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				 panic(err)
			}
			
			if err := iconsSettingsTemplateTable.Execute(w, icons); err != nil {
				 panic(err)
			}
 
			q = datastore.NewQuery("TDSICONS").Filter("DESKTOP= ", uid)
			//log.Panicf("[S0094]")
			recCount,_ = datastoreClient.Count(c,q)
            icons = make([]TDSICONS, 0, recCount)
            //log.Printf("datastoreClient.Get()  [15520]")
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				 panic(err)
			}
			
			if err := iconsSettingsTemplateTable.Execute(w, icons); err != nil {
				 panic(err)
			}
			//include all icons memcache
				TASK_MEMCACHER_SettingsAllIcons := ""
                cKey := "TASK_MEMCACHER_SettingsAllIcons"
                TASK_MEMCACHER_SettingsAllIcons = getStrMemcacheValueByKey(w,r,cKey)
                fmt.Fprintf(w, "%v", TASK_MEMCACHER_SettingsAllIcons)
				if TASK_MEMCACHER_SettingsAllIcons == "" {
					time.AfterFunc(5*time.Second, func() {
                        laterSettingsIcons(c, "")
                    })
				}
				
			if GROUP_ID == "GRP_ADMIN" {
			
				if err := iconsSettingsTemplateTableFooterAdmin.Execute(w, icons); err != nil {
					 panic(err)
				}
			} else {
				if err := iconsSettingsTemplateTableFooterNoHTMLClose.Execute(w, icons); err != nil {
					 panic(err)
				}
			}
			//display saved toolbars
			if err := iconsSettingsTemplateSavedToolbars.Execute(w, maxTDSCNFGSaveTB); err != nil {
				 panic(err)
			}
			
			q = datastore.NewQuery("TDSCNFG").Filter("USER =", uid).
											   Filter("CFG_ID =", "desktop0_icons").
											   Limit(maxTDSCNFGSaveTB)
			//log.Panicf("[S0095]")
            config := make([]TDSCNFG, 0, maxTDSCNFGSaveTB)
            //log.Printf("datastoreClient.Get()  [15559]")
			if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
				 panic(err)
			  }
			if err := iconsSettingsTemplateTableSTB.Execute(w, config); err != nil {
					 panic(err)
			}
			
			if err := iconsSettingsTemplateTableFooter1.Execute(w, ""); err != nil {
				 panic(err)
			}
			//end save toolbars
			//blobstore - upload custom icons
			uploadURL := "/upload"
			err := rootTemplate.Execute(w, uploadURL)
			if err != nil {
					////log.Panicf("%v", err)
			}
			getCategories(w,r,uid)
			err = rootTemplate2.Execute(w, currDesktop)
			if err != nil {
					////log.Panicf("%v", err)
			}
			//blobstore end
 
			//blobstore - upload advertisements
			//------------------------------
			if GROUP_ID == "GRP_ADMIN" {
				uploadURL2 := "/upload-ads"
				err := rootTemplateAds.Execute(w, uploadURL2)
				if err != nil {
						////log.Panicf("%v", err)
				}
				err = rootTemplate2Ads.Execute(w, currDesktop)
				if err != nil {
						////log.Panicf("%v", err)
				}
				//blobstore end
			}
			
			if err := generalFooterBodyHTMLzilla.Execute(w, ""); err != nil {
				 panic(err)
			}
		} else if (GROUP_ID == "GRP_ADMIN" && thisDeskNum >= 1) {
			TEMPDATA := TEMPSTRUCT{
				NUM_FILLER1: thisDeskNum,
				STR_FILLER1: uid,
			}
			if err := iconsSettingsTemplateHeader.Execute(w, &TEMPDATA); err != nil {
				 panic(err)
			}
 
			if err := iconsSettingsTemplateHeader2.Execute(w, uid); err != nil {
				 panic(err)
			}
			
			q := datastore.NewQuery("TDSICONS").Filter("DESKTOP=", currDesktop)
			//log.Panicf("[S0096]")
			recCount,_ := datastoreClient.Count(c,q)
            icons := make([]TDSICONS, 0, recCount)
            //log.Printf("datastoreClient.Get()  [15619]")
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				 panic(err)
			}
			if err := iconsSettingsTemplateTable.Execute(w, icons); err != nil {
				 panic(err)
			}
 
			q = datastore.NewQuery("TDSICONS").Filter("DESKTOP= ", uid)
			//log.Panicf("[S0097]")
			recCount,_ = datastoreClient.Count(c,q)
            icons = make([]TDSICONS, 0, recCount)
            //log.Printf("datastoreClient.Get()  [15631]")
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				 panic(err)
			}
			if err := iconsSettingsTemplateTable.Execute(w, icons); err != nil {
				 panic(err)
			}
			//include all icons memcache
				TASK_MEMCACHER_SettingsAllIcons := ""
                cKey := "TASK_MEMCACHER_SettingsAllIcons"
                TASK_MEMCACHER_SettingsAllIcons = getStrMemcacheValueByKey(w,r,cKey)
                fmt.Fprintf(w, "%v", TASK_MEMCACHER_SettingsAllIcons)
				if TASK_MEMCACHER_SettingsAllIcons == "" {
					time.AfterFunc(5*time.Second, func() {
                        laterSettingsIcons(c, "")
                    })
				}
 
			if GROUP_ID == "GRP_ADMIN" {
				if err := iconsSettingsTemplateTableFooterAdmin.Execute(w, icons); err != nil {
					 panic(err)
				}
			} else {
				if err := iconsSettingsTemplateTableFooterNoHTMLClose.Execute(w, icons); err != nil {
					 panic(err)
				}
			}
			//display saved toolbars
			if err := iconsSettingsTemplateSavedToolbars.Execute(w, maxTDSCNFGSaveTB); err != nil {
				 panic(err)
			}
			
			cfgIcons := fmt.Sprintf("%v_icons", currDesktop)
			q = datastore.NewQuery("TDSCNFG").Filter("USER =", currDesktop).
											   Filter("CFG_ID =", cfgIcons).
											   Limit(maxTDSCNFGSaveTB)
			//log.Panicf("[S0098]")
            config := make([]TDSCNFG, 0, maxTDSCNFGSaveTB)
            //log.Printf("datastoreClient.Get()  [15669]")
			if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
				 panic(err)
			  }
			if err := iconsSettingsTemplateTableSTB120.Execute(w, config); err != nil {
					 panic(err)
			}
			
			if err := iconsSettingsTemplateTableFooter1.Execute(w, ""); err != nil {
				 panic(err)
			}
			//end save toolbars
			//blobstore - upload custom icons
			uploadURL := "/upload"
			//w.Header().Set("Content-Type", "text/html")
			err := rootTemplate.Execute(w, uploadURL)
			if err != nil {
					////log.Panicf("%v", err)
			}
			getCategories(w,r,uid)
			err = rootTemplate2.Execute(w, currDesktop)
			if err != nil {
					////log.Panicf("%v", err)
			}
			//blobstore end
 
			//blobstore - upload advertisements
			//------------------------------
			if GROUP_ID == "GRP_ADMIN" {
				uploadURL2 := "/upload-ads"
				err := rootTemplateAds.Execute(w, uploadURL2)
				if err != nil {
						////log.Panicf("%v", err)
				}
				err = rootTemplate2Ads.Execute(w, currDesktop)
				if err != nil {
						////log.Panicf("%v", err)
				}
			}
			//blobstore end
			if err := generalFooterBodyHTMLzilla.Execute(w, ""); err != nil {
				 panic(err)
			}
			
		} else {
			msgDtl := "[U00026] ERROR: FOR THIS DESKTOP, CHANGE SETTINGS NOT ALLOWED FOR YOUR ACCOUNT TYPE"
			msgTyp := "error"
			msgURL := fmt.Sprintf("/%v#page", currDesktop)
			action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to the previous desktop.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
	
	}
 
}

//generate random contents which displays random tips inside the desktop
func ranLotto(w http.ResponseWriter, r *http.Request) (string) {
	tickets := r.FormValue("tickets")
	numTickets, _ := strconv.Atoi(tickets)
	lgame := r.FormValue("lg")
	resp := ""
	for i:=0; i<numTickets; i++ {
	msg := ""
	switch lgame {
		case "6/55":
			rnum := randNum(1,55)
			msg = fmt.Sprintf("<b>%v</b>", rnum)
			for i:=0; i<5; i++ {
			rnum := randNum(1,55)
			msg = fmt.Sprintf("<b>%v</b>-<b>%v</b>", msg, rnum)
			}

		case "6/42":
			rnum := randNum(1,42)
			msg = fmt.Sprintf("<b>%v</b>", rnum)
			for i:=0; i<5; i++ {
			rnum := randNum(1,42)
			msg = fmt.Sprintf("<b>%v</b>-<b>%v</b>", msg, rnum)
			}

		case "6/45":
			rnum := randNum(1,45)
			msg = fmt.Sprintf("<b>%v</b>", rnum)
			for i:=0; i<5; i++ {
			rnum := randNum(1,45)
			msg = fmt.Sprintf("<b>%v</b>-<b>%v</b>", msg, rnum)
			}

		case "6/49":
			rnum := randNum(1,49)
			msg = fmt.Sprintf("<b>%v</b>", rnum)
			for i:=0; i<5; i++ {
			rnum := randNum(1,49)
			msg = fmt.Sprintf("<b>%v</b>-<b>%v</b>", msg, rnum)
			}

		case "6/58":
			rnum := randNum(1,58)
			msg = fmt.Sprintf("<b>%v</b>", rnum)
			for i:=0; i<5; i++ {
			rnum := randNum(1,58)
			msg = fmt.Sprintf("<b>%v</b>-<b>%v</b>", msg, rnum)
			}
	}
	resp = fmt.Sprintf("%v<br>%v", resp, msg)
	}
	return resp 
}

//enerate random contents which displays random tips inside the desktop
func ranConGen(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	RAN_FUNC := r.FormValue("RAN_FUNC")
	if RAN_FUNC == "LG" {
		resp := ranLotto(w,r)
		w.WriteHeader(200)
		w.Write([]byte(resp))
		return
	}
    checkReferrer(w,r)
    //D0086
    datastoreClient := createClientDS()
	timestamp := getTimestamp()
	//D0065
	if SYS_DISP_ADS_CONTENT  == true {
		sRand := fmt.Sprintf("ADS_RAND_%s", string(timestamp[13]))
		if sRand == "ADS_RAND_0" || sRand == "ADS_RAND_2" || sRand == "ADS_RAND_4" || sRand == "ADS_RAND_6" || sRand == "ADS_RAND_8" {
	 
			sysReq := fmt.Sprintf("/media?FUNC_CODE=GET_RAN_MED")
			http.Redirect(w, r, sysReq, http.StatusFound)
			return		
		}
	}
	
	
	if SYS_SITE_PRIVATE == true {
		_, uid := checkSession(w,r)
 
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER != true {
			return
		}
	}
	
	
	deskName := r.FormValue("q")
	boxNum := r.FormValue("n")
	mode := r.FormValue("m")
	seqNum := str2int(boxNum)
	var bLine bytes.Buffer
 
	
	//get desktop slides count
	cKey := fmt.Sprintf("TDSSLIDE_TOTAL_%v", deskName)
	cKey2 := fmt.Sprintf("TDSSLIDE_TOTAL_%v_ARRAY", deskName)
	TDSSLIDE_TOTAL := ""
	TDSSLIDE_NUM := 0
    TDSSLIDE_TOTAL_ARRAY := ""
    TDSSLIDE_TOTAL = getStrMemcacheValueByKey(w,r,cKey)
	TDSSLIDE_NUM = str2int(TDSSLIDE_TOTAL)
	TDSSLIDE_TOTAL_ARRAY = getStrMemcacheValueByKey(w,r,cKey2)
	
	_, uid := checkSession(w,r)
	if TDSSLIDE_TOTAL == "" || TDSSLIDE_TOTAL_ARRAY == "" {
		q := datastore.NewQuery("TDSSLIDE").Filter("CATEGORY =", deskName)
		//log.Panicf("[S0099]")
		recCount,_ := datastoreClient.Count(c,q)
		TDSSLIDE_NUM, _ = datastoreClient.Count(c,q)
		TDSSLIDE_TOTAL = fmt.Sprintf("%v", TDSSLIDE_NUM)
		putStrToMemcacheWithoutExp(w,r,cKey,TDSSLIDE_TOTAL)
		//store list
		TDSSLIDE_ARRAY := ""
        slide := make([]TDSSLIDE, 0, recCount)
        //log.Printf("datastoreClient.Get()  [15849]")
		if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
			 panic(err)
		 }
		for _, p := range slide {
			TDSSLIDE_ARRAY = fmt.Sprintf("%v,%v", TDSSLIDE_ARRAY, p.DOC_ID)
		}
		TDSSLIDE_TOTAL_ARRAY = TDSSLIDE_ARRAY
		putStrToMemcacheWithoutExp(w,r,cKey2,TDSSLIDE_ARRAY)
		
	}

	if TDSSLIDE_NUM <= 3 {
	//get all slides count
		cKey := fmt.Sprintf("TDSSLIDE_TOTAL")
		cKey3 := fmt.Sprintf("TDSSLIDE_TOTAL_ARRAY")
        TDSSLIDE_TOTAL_ARRAY := ""
        TDSSLIDE_TOTAL = getStrMemcacheValueByKey(w,r,cKey)
        TDSSLIDE_NUM = str2int(TDSSLIDE_TOTAL)
		TDSSLIDE_TOTAL_ARRAY = getStrMemcacheValueByKey(w,r,cKey3)
 
		if TDSSLIDE_TOTAL == "" || TDSSLIDE_TOTAL_ARRAY == "" {
			q := datastore.NewQuery("TDSSLIDE").Order("DOC_ID")
			//log.Panicf("[S0100]")
			TDSSLIDE_NUM, _ = datastoreClient.Count(c,q)
			TDSSLIDE_TOTAL = fmt.Sprintf("%v", TDSSLIDE_NUM)
			putStrToMemcacheWithoutExp(w,r,cKey,TDSSLIDE_TOTAL)
			//store list
			TDSSLIDE_ARRAY := ""
            slide := make([]TDSSLIDE, 0, TDSSLIDE_NUM)
            //log.Printf("datastoreClient.Get()  [15879]")
			if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
				 panic(err)
			 }
			for _, p := range slide {
				TDSSLIDE_ARRAY = fmt.Sprintf("%v,%v", TDSSLIDE_ARRAY, p.DOC_ID)
			}
			TDSSLIDE_TOTAL_ARRAY = TDSSLIDE_ARRAY
			putStrToMemcacheWithoutExp(w,r,cKey3,TDSSLIDE_ARRAY)
		}	
	}
	
	myrand := randNum(1, TDSSLIDE_NUM)
	//get document ID based on array
	SPL := strings.Split(TDSSLIDE_TOTAL_ARRAY,",")
	docIDArrVal := ""
	docIDIntVal := 0
	if len(SPL) > 3 {
		docIDArrVal = SPL[myrand]
	} else {
		docIDIntVal = myrand
	}
	
	docIDIntVal = str2int(docIDArrVal)
	BLOB_KEY, DOC_STAT, FL_SHARED, _, _, TITLE2, IMG_URL, _, MUSIC_ID, GET_NEXT := getTDSSLIDEBlobKey(w, r, docIDIntVal)
	
	//_, uid := checkSession(w,r)
	
	if FL_SHARED == "N" || DOC_STAT == "Personal" || DOC_STAT == "ULAPPH Only" {
 
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			
			if FL_VALID_USER == true {
				//allow
			} else {
				//redirect
				thisRanURL :=  fmt.Sprintf("/rcg?m=%v&q=%v&n=%v", mode, deskName, boxNum)
				http.Redirect(w, r, thisRanURL, http.StatusFound)
				return
			}
	}
	
	//remove underscore in TITLE
	TITLE := strings.Replace(TITLE2, "_", " ", -1)
	SIDref := fmt.Sprintf("SLIDE-%v", docIDIntVal)
	
	if BLOB_KEY == "" {
		//rcg?m=sing&q=desktop0&n=1
		thisRanURL :=  fmt.Sprintf("/rcg?m=%v&q=%v&n=%v", mode, deskName, boxNum)
		http.Redirect(w, r, thisRanURL, http.StatusFound)
		return
	} else {
		
		textEff, imgEff := getRanAnim()
		
		switch mode {
			case "ref":
				bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
				bLine.WriteString(fmt.Sprintf("<META http-equiv=\"refresh\" content=\"%v;URL=/rcg?m=ref&q=%v&n=%v\">", DEFAULT_REFRESH_ADS_BOX + seqNum, deskName, seqNum))
				bLine.WriteString("</head><body>")
				bLine.WriteString(fmt.Sprintf("<center><a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=TDSSLIDE-%v&CATEGORY=%v&TITLE=%v&MUSIC_ID=%v\" target=\"%v\"><img src=\"%v\" width=290 height=270 class=\"animated infinite %v\"><br><b class=\"animated infinite %v\">%v</b></a></center>", docIDIntVal, docIDIntVal, deskName, TITLE, MUSIC_ID, deskName, IMG_URL, imgEff, textEff, TITLE))
				bLine.WriteString(fmt.Sprintf("</body></html>"))
				writeHTMLHeader(w, 200)
				w.Write([]byte(bLine.String()))
			
			case "sing":
				bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
				bLine.WriteString("</head><body>")
				bLine.WriteString(fmt.Sprintf("<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=TDSSLIDE-%v&CATEGORY=%v&TITLE=%v&MUSIC_ID=%v\" target=\"%v\"><img src=\"%v\" width=290 height=270 class=\"animated infinite %v\"><br><b class=\"animated infinite %v\">%v</b></a> [%v]", docIDIntVal, docIDIntVal, deskName, TITLE, MUSIC_ID, deskName, IMG_URL, imgEff, textEff, TITLE, SIDref))
				bLine.WriteString(fmt.Sprintf("</body></html>"))
				writeHTMLHeader(w, 200)
				w.Write([]byte(bLine.String()))
				
			case "loop":
				SPL := strings.Split(BLOB_KEY,"GET_WALL:")
				if len(SPL) > 1 {
					thisRanURL :=  fmt.Sprintf("/rcg?m=%v&q=%v&n=%v", mode, deskName, boxNum)
					http.Redirect(w, r, thisRanURL, http.StatusFound)
					return
				}	
				////u := user.Current(c)
				//uid := ""
				_, uid := checkSession(w,r)
			   if uid == "" {
					//return
				} else {
					//uid = uid
					_, uid = checkSession(w,r)
					reqStr := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=TDSSLIDE-%v&CATEGORY=%v&TITLE=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v", getSchemeUrl(w,r), docIDIntVal, docIDIntVal, deskName, TITLE, MUSIC_ID, GET_NEXT, SLIDE_SOUND_SET)
					data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK@888@%v@888@%v@888@%v", reqStr,uid,docIDIntVal)
					sendChannelMessage(w,r,uid,data)
					dummyCmd(w,r,uid)
					return
				}
			
		}
		return		
	}
	
}

//D0056
//display angular ui tree
func ulapphTree(w http.ResponseWriter, r *http.Request) {
	//fmt.Fprintf(w,"tree goes here")
	//c := appengine.NewContext(r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	FUNC := r.FormValue("FUNC_CODE")
	SID := r.FormValue("SID")
	DISP := r.FormValue("d")
	switch FUNC {
		case "SAVEJSON":
			//log.Printf("updating json")
			bodyBytes, _ := ioutil.ReadAll(r.Body)
			//log.Printf("%v", string(bodyBytes))
			err := blobFileSaver(w,r,SID,bodyBytes)
			if err != nil {
				//log.Printf("User to Host List has been updated at TDSMEDIA-%v", MEDIA_ID)
				//log.Printf("ERROR: %v", err)
				return
			}

		default:
			//log.Printf("rendering tree")
			SPL := strings.Split(SID,"-")
			DOC_ID := "0"
			if len(SPL) > 1 {
				DOC_ID = SPL[1]
			}
            docID := str2int(DOC_ID)
            TITLE := ""
            if docID > 0 {
            _, _, TITLE, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
            }
			renderStaticTemplatesTree(w,r,SID,TITLE,DISP)
	}
	return
}

//execute Javascript via otto interpreter
func ulapphOtto(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)

	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	SID := r.FormValue("SID")
	DEBUG :=  strings.ToUpper(r.FormValue("DEBUG"))
	//UID := r.FormValue("UID") 
	//get JSON body input
	defer r.Body.Close()
	j, err := ioutil.ReadAll(r.Body)
	if err != nil {
		panic(err)
	}

	//get the TDSMEDIA javascript
	BLOB_KEY := contentCheckSid(w,r,SID)
	blobChan := make(chan string)
	go getBlobTextChan(w, r,blobChan, BLOB_KEY)
	thisCont := <- blobChan
	if DEBUG == "Y" {
	fmt.Fprintf(w,"%v\n", thisCont)
	}

	//start otto vm
	vm := otto.New()

	// a map container to decode the JSON structure into
	c := make(map[string]interface{})

	// unmarschal JSON
	e := json.Unmarshal(j, &c)

	// panic on error
	if e != nil {
		panic(e)
	}

	// copy c's keys into k
	for key, val := range c {
		vm.Set(key, val)
		if DEBUG == "Y" {
		fmt.Fprintf(w,"%v = %v\n", key, val)
		}
	}

	_, err = vm.Run(thisCont)
	if err != nil {
		if DEBUG == "Y" {
		fmt.Fprintf(w,"ERROR: %v\n", err)
		}
		return 
	}

	if value, err := vm.Get("output"); err == nil {
	    if value_str, err := value.ToString(); err == nil {
		if DEBUG == "Y" {
		fmt.Fprintf(w, "output = %v\n", value_str)
		}
		w.Write([]byte(value_str))
	    }
	}
	return
}
func readLocalFile(w http.ResponseWriter, r *http.Request, FILE string) string {
	ulapphDebug(w,r, "info", fmt.Sprintf("readLocalFile() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("FILE: %v", FILE))
	SPL := strings.Split(FILE, "://")
	switch {
		case SPL[0] == "ai":
			//name := "../ULAPPH-Cloud-Desktop-AI/" + SPL[1]
			name := "ai/" + SPL[1]
			//test if folder exists (cloud run)
			if _, err := os.Stat(name); os.IsNotExist(err) {
				// path/to/whatever does not exist
				ulapphDebug(w,r, "info", fmt.Sprintf("Using /ai path: %v", name))
				name = "ai/" + SPL[1]
			}
			
			b, err := ioutil.ReadFile(name)
			if err != nil {
				ulapphDebug(w,r, "error", fmt.Sprintf("ERROR ioutil.ReadFile(): %v", name))
				return ""
			}
			return string(b)
		default:
			ulapphDebug(w,r, "error", fmt.Sprintf("UNSUPPORTED FILE TYPE: %v", SPL[0]))
			return ""
	}
}
func readGcsAiFile(w http.ResponseWriter, r *http.Request, FILE string) string {
	ulapphDebug(w,r, "info", fmt.Sprintf("readGcsAiFile() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("FILE: %v", FILE))
	SPL := strings.Split(FILE, "://")
	switch {
		case SPL[0] == "ai":
			ctx := context.Background()
			client, err := storage.NewClient(ctx)
			if err != nil {
				log.Fatalf("ERROR: %v", err)
			}
			BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
			BLOB_KEY := "ULAPPH-Cloud-Desktop-AI/" + SPL[1]
			ulapphDebug(w,r, "info", fmt.Sprintf("BUCKET_NAME: %v", BUCKET_NAME))
			ulapphDebug(w,r, "info", fmt.Sprintf("BLOB_KEY: %v", BLOB_KEY))
			rc, err := client.Bucket(BUCKET_NAME).Object(BLOB_KEY).NewReader(ctx)
			if err != nil {
				//log.Printf("readGcsObject() ERROR: client.Bucket() read error: %v BLOB_KEY: %v", err, BLOB_KEY)
				ulapphDebug(w,r, "error", fmt.Sprintf("readGcsObject() ERROR: client.Bucket() read error: %v BLOB_KEY: %v", err, BLOB_KEY))
				return ""
			}
			defer rc.Close()
			data, err := ioutil.ReadAll(rc)
			if err != nil {
					return ""
			}
			return string(data)
		default:
			ulapphDebug(w,r, "error", fmt.Sprintf("UNSUPPORTED FILE TYPE: %v", SPL[0]))
			return ""
	}
}
//D0075
//cType - channel
//uid - user
//uid_rx - otto receiver
//SID - TDSMEDIA-x
//bName - botName
//devID - deviceID
//FL_DEBUG - Y or N
//key to be set
//value of key
//resp - raw response text
func execOtto(w http.ResponseWriter, r *http.Request, cType, uid,uid_rx,SID, oTS, bName, devID, FL_DEBUG, key, val string) (resp string) {
	ulapphDebug(w,r, "info", fmt.Sprintf("execOtto() %v", ""))
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//DEBUG = "Y"
	//check first if SID or SID URL
	//log.Printf("execOtto()")
	SID = html.EscapeString(SID)
	//log.Printf("SID: %v", SID)
	ulapphDebug(w,r, "info", fmt.Sprintf("SID: %v", SID))
	FILE_TYPE := isValidUrl(w,r,SID)
	//log.Printf("FILE_TYPE: %v", FILE_TYPE)
	ulapphDebug(w,r, "info", fmt.Sprintf("FILE_TYPE: %v", FILE_TYPE))
	cKey := fmt.Sprintf("ULAPPH_NLP_%v", SID)
	//log.Printf("cKey: %v", cKey)
	ulapphDebug(w,r, "info", fmt.Sprintf("cKey: %v", cKey))
	thisCont := getStrMemcacheValueByKey(w,r,cKey)
	if thisCont == "" {
		switch {
		case FILE_TYPE == "SID":
			//get the TDSMEDIA javascript
			//log.Printf("FILE_TYPE = SID")
			ulapphDebug(w,r, "info", fmt.Sprintf("FILE_TYPE = SID: %v", ""))
			BLOB_KEY := contentCheckSid(w,r,SID)
			blobChan := make(chan string)
			go getBlobTextChan(w, r,blobChan, BLOB_KEY)
			thisCont = <- blobChan
		case FILE_TYPE == "URL":
			//get from remote site
			//log.Printf("FILE_TYPE = URL")
			ulapphDebug(w,r, "info", fmt.Sprintf("FILE_TYPE = URL: %v", ""))
			STR_GET_REMOTE_DATA := SID
			thisCont = fetchURL(w,r,STR_GET_REMOTE_DATA)
		case FILE_TYPE == "FILE":
			//get from a regular file
			if SYS_APPENGINE_STANDARD == true {
				thisCont = readGcsAiFile(w,r,SID)
			} else {
				thisCont = readLocalFile(w,r,SID)
			}
		default:
			ulapphDebug(w,r, "error", fmt.Sprintf("UNSUPPORTED FILE_TYPE = FILE: %v", ""))
			thisCont = ""
		}
		//putStrToMemcacheWithExp(w,r,cKey,thisCont,GEN_CONTENT_EXPIRES)
		putStrToMemcacheWithExp(w,r,cKey,thisCont,150)
	}
	if thisCont == "" {
		log.Panicf("execOtto Error: empty SID: %v", SID)
		return ""
	}
	//log.Printf("thisCont: %v", thisCont)
	//fmt.Fprintf(w,"%v\n", thisCont)
	//start otto vm
	vm := otto.New()
	/*vm.Set("ottoFuncNlpProseExecWithTokens", func(kb, input string) []string {
		//log.Printf("ottoFunc: ottoFuncNlpProseExecWithTokens")
		//log.Printf("input: %v", input)
		doc, err := prose.NewDocument(input)
		if err != nil {
			log.Panicf("Prose error: %v", err)
			return []string{"error"}
		}
		//log.Printf("doc: %#v", doc)
		var thisResp []string
		for _, tok := range doc.Tokens() {
			//log.Printf("TEXT: %v TAG: %v LABEL: %v<br>", tok.Text, tok.Tag, tok.Label)
			thisTok := fmt.Sprintf("%v@777@%v@777@%v", tok.Text, tok.Tag, tok.Label)
			thisResp = append(thisResp, thisTok) 
		}
		justString := strings.Join(thisResp,"@888@")
		//log.Printf("Executing OttoJS: %v", kb)
		resp := execOtto(w,r, cType, uid, uid_rx, kb, oTS, bName, devID, "N", "input", justString)
		//log.Printf("resp: %v", resp)
		return []string{resp}
	})*/
	/*vm.Set("ottoFuncFindExactMatch", func(s,l string) string {
		//get from cache if available
		//log.Printf("ottoFunc: ottoFuncFindExactMatch")
		//log.Printf("SID: %v", s)
                cKey := fmt.Sprintf("ULAPPH_NLP_%v", s)
                //log.Printf("cKey: %v", cKey)
                thisCont := getStrMemcacheValueByKey(w,r,cKey)
		if thisCont == "" {
			BLOB_KEY := contentCheckSid(w,r,s)
			thisCont = getBlobTextNoComms(w, r, BLOB_KEY)
			putStrToMemcacheWithExp(w,r,cKey,thisCont,150)
		}
		dec := json.NewDecoder(strings.NewReader(thisCont))
		proses := []ProseDataNLP{}
		for {
			ent := ProseDataNLP{}
			err := dec.Decode(&ent)
			if err != nil {
				if err == io.EOF {
					break
				}
				panic(err)
			}
			proses = append(proses, ent)
		}
		cmRes := ""
		for _, p := range proses {
			if p.Text == l{
				cmRes = p.Answer
				break
			}
		}
		//log.Printf("cmRes: %v", cmRes)
		return cmRes
	})*/
	/*vm.Set("ottoFuncFindFuzzyMatch", func(s,l string) []string {
		//get from cache if available
		//log.Printf("ottoFunc: ottoFuncFindFuzzyMatch")
		//log.Printf("search: %v", s)
		SID := r.FormValue("SID")
                cKey := fmt.Sprintf("ULAPPH_NLP_%v", SID)
                //log.Printf("cKey: %v", cKey)
                thisCont := getStrMemcacheValueByKey(w,r,cKey)
		dec := json.NewDecoder(strings.NewReader(thisCont))
		proses := []ProseDataNLP{}
		for {
			ent := ProseDataNLP{}
			err := dec.Decode(&ent)
			if err != nil {
				if err == io.EOF {
					break
				}
				panic(err)
			}
			proses = append(proses, ent)
		}
		wordsToTest := []string{}
		for _, p := range proses {
			if p.Text != "" && p.Help != "" && p.IsRegexp == "fuzzy"{
				wordsToTest = append(wordsToTest, fmt.Sprintf("%v@888@%v@888@%v@888@%v", p.Answer, p.Text, p.Help, p.IsAnsOtto))
			}
		}
		//find closest match
		bagSizes := []int{2, 3, 4}
		cm := closestmatch.New(wordsToTest, bagSizes)
		//cmRes := cm.Closest(s)
		resLimit, _ := strconv.Atoi(l)
		if resLimit <= 0 {
			resLimit = 1
		}
		//find closest match
		cmRes := cm.ClosestN(s, resLimit)
		//log.Printf("cmRes: %v", cmRes)
		return cmRes
	})*/
	FL_CLEAR_KVO := false
	vm.Set("ottoFuncClearConversation", func() string {
		//log.Printf("ottoFunc: ottoFuncClearConversation")
		cKeyA := fmt.Sprintf("ULAPPH_NLP_KVO_%v_%v_%v", uid, bName, devID)
		//log.Printf("cKeyA: %v", cKeyA)
		g := OttoAwareness {
            OttoJS: SID,
			OttoChannel: cType,
			OttoReceiver: uid_rx,
			OttoBotName: bName,
			OttoUserStatus: "",
			OttoUserName: "",
			OttoUserEmail: uid,
			OttoUserNick: "",
			OttoUserAge: "",
			OttoUserGender: "",
			OttoUserCountry: "",
			OttoUserCity: "",
			OttoUserDeviceType: "",
			OttoUserDeviceId: devID,
			OttoLocalTimestamp: oTS,
			OttoUserContext: "",
			OttoFillerStr1: "",
			OttoFillerStr2: "",
			OttoFillerStr3: "",
			OttoFillerStr4: "",
            OttoFillerStr5: "",
            OttoFillerStr6: "",
            OttoFillerStr7: "",
            OttoFillerStr8: "",
            OttoFillerStr9: "",
            OttoFillerStr10: "",
            //counters
            OttoCounter1: "",
            OttoCounter2: "",
            OttoCounter3: "",
            //flags
            OttoFlag1: "",
            OttoFlag2: "",
            OttoFlag3: "",
		}
		data, err := json.Marshal(g)
		if err != nil {
			log.Panicf("json.Marshal() Error: %v", err)
		}
		putBytesToMemcacheWithExp(w,r,cKeyA,data,GEN_CONTENT_EXPIRES)
		FL_CLEAR_KVO = true
		//also clear all AI files for this user
		prefix := "FACHE/"
		delim := uid
		it, err := listGcsObject(prefix, delim)
		if err != nil {
			//log.Printf("ERROR: listGcsObject() %v", err)
		}
		//log.Printf("it: %v", it)
		//var names []string
		for {
			attrs, err := it.Next()
			if err == iterator.Done {
					break
			}
			if err != nil {
					//return err
					//log.Printf("iterator error: %v", err)
			}
			//names = append(names, attrs.Name)
			err = deleteGcsObject(c, attrs.Name)
			if err != nil {
				log.Printf("ERROR: deleteGcsObject() %v", err)
			}				
		}
			
		return ""
	})
	vm.Set("ottoFuncHttpGet", func(s string) string {
	  //log.Printf("ottoFunc: ottoFunchttpGet")
	  //client := urlfetch.Client(c)
	  //r, err := http.Get(s)
	  r, err := http.Get(s)
	  if err != nil {
	    panic(vm.MakeCustomError("IOError", "failed making http request"))
	  }

	  d, err := ioutil.ReadAll(r.Body)
	  if err != nil {
	    panic(vm.MakeCustomError("IOError", "failed reading body"))
	  }

	  return string(d)
	})
	vm.Set("ottoFuncHttpPost", func(s, t, d string) string {
	  //log.Printf("ottoFunc: ottoFuncHttpPost")
	  // s - link
	  // t - content type
	  // d - data in string format
	  //client := urlfetch.Client(c)
	  //r, err := http.Get(s)
	  r, err := http.Post(s, t, strings.NewReader(d))
	  if err != nil {
	    panic(vm.MakeCustomError("IOError", "failed making http request"))
	  }

	  b, err := ioutil.ReadAll(r.Body)
	  if err != nil {
	    panic(vm.MakeCustomError("IOError", "failed reading body"))
	  }

	  return string(b)
    })
	vm.Set("ottoFuncScrapeWebsite", func(s, u string, n int) (text string) {
	  //log.Printf("ottoFunc: ottoFuncScrapeWebsite")
	  ulapphDebug(w,r, "info", fmt.Sprintf("ottoFuncScrapeWebsite() %v", ""))
	  // s - selector
      // u - link
      // n - limit rows
        goq, err := goquery.NewDocument(r,u)
        if err != nil {
            log.Fatalf("ERROR: %v", err)
        }
        // use CSS selector found with the browser inspector
        // for each, use index and item
        var buf bytes.Buffer
        ctr := 0
        goq.Find(s).Each(func(index int, item *goquery.Selection) {
            //text = item.Text()
			ulapphDebug(w,r, "info", fmt.Sprintf("goq.Find(s).Each(): %#v", item))
            if ctr < n {
                ctr++
                buf.WriteString(fmt.Sprintf("%v\n", item.Text()))
				ulapphDebug(w,r, "info", fmt.Sprintf("item.Text(): %v\n", item.Text()))
            } else {
                if ctr > 0 {
                    text = buf.String()
                } else {
                    text = "No data found!"
                }
            }
        })
		if ctr <= n {
			text = buf.String()
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("text: %v", text))
        return text
    })
    //issue: scans all images
	vm.Set("ottoFuncScrapeWebsiteImages", func(s, u string, n int) (imglist string) {
	  //log.Printf("ottoFunc: ottoFuncScrapeWebsiteImages")
	  // s - selector
      // u - link
      // n - limit rows
        goq, err := goquery.NewDocument(r,u)
        if err != nil {
            log.Fatalf("ERROR: %v", err)
        }
        // use CSS selector found with the browser inspector
        // for each, use index and item
        var buf bytes.Buffer
        ctr := 0
        // Find and print image URLs
        goq.Find("img").Each(func(index int, element *goquery.Selection) {
			ulapphDebug(w,r, "info", fmt.Sprintf("goq.Find(\"img\").Each(): %#v", element))
            if ctr < n {
                imgSrc, exists := element.Attr("src")
                if exists {
                    //fmt.Println(imgSrc)
					ulapphDebug(w,r, "info", fmt.Sprintf("imgSrc: %v\n", imgSrc))
					resImgUrl := resolveURL(u,imgSrc)
                    ctr++
                    buf.WriteString(fmt.Sprintf("%v@888@", resImgUrl))
					ulapphDebug(w,r, "info", fmt.Sprintf("resImgUrl: %v\n", resImgUrl))
                }
            } else {
                if ctr > 0 {
                    imglist = buf.String()
                } else {
                    imglist = ""
                }
            }
        })
		if ctr <= n {
			imglist = buf.String()
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("imglist: %v", imglist))
        return imglist
	})
    //issue: scans all images (data-img-url)
	vm.Set("ottoFuncScrapeWebsiteImagesDataUrl", func(s, u string, n int) (imglist string) {
	  //log.Printf("ottoFunc: ottoFuncScrapeWebsiteImages")
	  // s - selector
      // u - link
      // n - limit rows
        goq, err := goquery.NewDocument(r,u)
        if err != nil {
            log.Fatalf("ERROR: %v", err)
        }
        // use CSS selector found with the browser inspector
        // for each, use index and item
        var buf bytes.Buffer
        ctr := 0
        // Find and print image URLs
        goq.Find("img").Each(func(index int, element *goquery.Selection) {
			ulapphDebug(w,r, "info", fmt.Sprintf("goq.Find(\"img\").Each(): %#v", element))
            if ctr < n {
                imgSrc, exists := element.Attr("data-img-url")
                if exists {
                    //fmt.Println(imgSrc)
					ulapphDebug(w,r, "info", fmt.Sprintf("imgSrc: %v\n", imgSrc))
					resImgUrl := resolveURL(u,imgSrc)
                    ctr++
                    buf.WriteString(fmt.Sprintf("%v@888@", resImgUrl))
					ulapphDebug(w,r, "info", fmt.Sprintf("resImgUrl: %v\n", resImgUrl))
                }
            } else {
                if ctr > 0 {
                    imglist = buf.String()
                } else {
                    imglist = ""
                }
            }
        })
		if ctr <= n {
			imglist = buf.String()
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("imglist: %v", imglist))
        return imglist
	})
	//D0081
	/*vm.Set("ottoFuncGetIntentDialogflow", func(user,input string) (string,string) {
	  //log.Printf("ottoFunc: ottoFuncGetIntentDialogflow")
		// Use NLP
		nlpDebug(w,r,FL_DEBUG, "info", "Call processDialoflowNLP()")
		response,response2 := processDialogflowNLP(w,r,FL_DEBUG,devID,input)
		nlpDebug(w,r,FL_DEBUG, "info", "processDialogflowNLP() resp: "+fmt.Sprintf("%v",response))
		nlpDebug(w,r,FL_DEBUG, "info", "processDialogflowNLP() resp2: "+fmt.Sprintf("%v",response2))
		//log.Printf("response: %v", response)
		return response, response2
	})*/
	//D0081
	/*vm.Set("ottoFuncSendEmail", func(mode,uid,input string) string {
	  //log.Printf("ottoFunc: ottoFuncSendEmail")
		nlpDebug(w,r,FL_DEBUG, "error", "Send email: "+ADMMAIL)
		geoStr := getGeoString(w,r)
		geoAcc := getAccessString(w,r,"")
		subject := fmt.Sprintf("[ULAPPH] %v intent [%v]", mode, uid)
		MESSAGE := fmt.Sprintf("[ULAPPH] %v intent [<b>%v</a>] [%v] [%v] [%v] [%v] [%v]", mode, input, SYS_SERVER_NAME, SID, uid, geoStr, geoAcc)
        time.AfterFunc(5*time.Second, func() {
            laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": uid, "MESSAGE": MESSAGE})
        })
		return "sent email"
	})*/
	//D0081
	vm.Set("ottoFuncSendEmailGeneric", func(to,from,subject,message string) string {
	  //log.Printf("ottoFunc: ottoFuncSendEmailGeneric")
        time.AfterFunc(5*time.Second, func() {
            laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": to, "FROM": from, "MESSAGE": message})
        })
		return "ok"
    })
	vm.Set("ottoFuncSetVoiceSpeaker", func(vName string) string {
	  //log.Printf("ottoFunc: ottoFuncSendEmailGeneric")
        VOICE_NAME := fmt.Sprintf("VOICE_NAME_%v", SID)
		putStrToMemcacheWithoutExp(w,r,VOICE_NAME,vName)
		return "ok"
    })
	vm.Set("ottoFuncUploadGcsObject", func(user,key, text string) string {
      //log.Printf("ottoFunc: ottoFuncUploadGcsObject")
        ctx := context.Background()
        cKey = fmt.Sprintf("TEMP/%v/%v", user, key)
        _, _, err := uploadGcsObject(ctx, strings.NewReader(text), cKey, true)
        if err != nil {
            switch err {
            case storage.ErrBucketNotExist:
                //log.Printf("FATAL ERROR: uploadGcsObject() Please create the bucket first e.g. with `gsutil mb`")
            default:
                //log.Printf("ERROR: uploadGcsObject() %v", err)
            }
        }
        gcsMediaUrl := mediaURL(cKey)
		return gcsMediaUrl
    })
    //log.Printf("Setting OttoJS VM KVO Fields...")
	cKeyA := fmt.Sprintf("ULAPPH_NLP_KVO_%v_%v_%v", uid, bName, devID)
	//log.Printf("cKeyA: %v", cKeyA)
	thisOA := getBytMemcacheValueByKey(w,r,cKeyA)
	//log.Printf("thisOA: %v", string(thisOA))
	//set kv object
	//log.Printf("set kvo: %v", string(thisOA))
	if thisOA == nil || len(thisOA) <= 0 {
        kvo := OttoAwareness {
            OttoJS: SID,
            OttoChannel: cType,
            OttoReceiver: uid_rx,
            OttoBotName: bName,
            OttoUserStatus: "",
            OttoUserName: "",
            OttoUserEmail: uid,
            OttoUserNick: "",
            OttoUserAge: "",
            OttoUserGender: "",
            OttoUserCountry: "",
            OttoUserCity: "",
            OttoUserDeviceType: "",
            OttoUserDeviceId: devID,
			OttoLocalTimestamp: oTS,
            OttoUserContext: "",
            OttoFillerStr1: "",
            OttoFillerStr2: "",
            OttoFillerStr3: "",
            OttoFillerStr4: "",
            OttoFillerStr5: "",
            OttoFillerStr6: "",
            OttoFillerStr7: "",
            OttoFillerStr8: "",
            OttoFillerStr9: "",
            OttoFillerStr10: "",
            //counters
            OttoCounter1: "",
            OttoCounter2: "",
            OttoCounter3: "",
            //flags
            OttoFlag1: "",
            OttoFlag2: "",
            OttoFlag3: "",
        }
        data, err := json.Marshal(kvo)
        if err != nil {
            //log.Printf("json.Marshal() Error: %v", err)
        }
        //log.Printf("kvo data initialized: %v", string(data))
        vm.Set("kvo", string(data))
    } else {
        //log.Printf("kvo data from cache: %v", string(thisOA))
		var kvo OttoAwareness
		err := json.Unmarshal(thisOA, &kvo)
		if err != nil {
				ulapphDebug(w,r, "error", fmt.Sprintf("json.Unmarshal() %v", ""))
		}
		kvo.OttoJS = SID
        data, err := json.Marshal(kvo)
        if err != nil {
            //log.Printf("json.Marshal() Error: %v", err)
        }
        vm.Set("kvo", string(data))
    }
	//set input object
	//log.Printf("set key/val: %v", val)
	vm.Set(key, val)
    //log.Printf("vm.Run()")
	_, err := vm.Run(thisCont)
	if err != nil {
		//log.Printf("ERROR: %v\n", err)
		resp = fmt.Sprintf("<font color=\"red\">[%v] ERROR: %v</font>", SID, err)
		return resp
	}
	//get updated kvo
	//log.Printf("GETTING UPDATED kvo...")
	if KvoValue, err := vm.Get("kvo"); err == nil {
	    if value_str, err := KvoValue.ToString(); err == nil {
            //log.Printf("kvo updated after exec: %v", value_str)
            //resp = value_str
            if value_str != "" {
                var kvo OttoAwareness
                err := json.Unmarshal([]byte(value_str), &kvo)
                if err != nil {
                    //panic(err)
                    //log.Printf("json.Unmarshal: %v", err)
                    //value_str = "{}"
                }
            }
            //save kvo to memcache
            if FL_CLEAR_KVO  == false {
                putBytesToMemcacheWithExp(w,r,cKeyA,[]byte(value_str),TOT_ONLINE_EXPIRES_MIN)
                //putBytesToMemcacheWithExp(w,r,cKeyA,[]byte(""),TOT_ONLINE_EXPIRES_MIN)
            }
	    }
	}
	//get log data 
	//log.Printf("GETTING UPDATED log...")
	if value, err := vm.Get("log"); err == nil {
		if SYS_STATELESS_SERVER == true {
			FL_DEBUG = "Y"
		}
	    if value_str, err := value.ToString(); err == nil {
		nlpDebug(w,r,FL_DEBUG, "info", "**********OTTO EXEC LOGS START**********")
		//log.Printf("***********OTTO EXEC LOGS START**************")
		//log.Printf("%v", value_str)
		nlpDebug(w,r,FL_DEBUG, "info", value_str)
		//log.Printf("***********OTTO EXEC LOGS END**************")
		nlpDebug(w,r,FL_DEBUG, "info", "**********OTTO EXEC LOGS END**********")
	    }
	}
	//log.Printf("resp: %v", resp)
	//get output data
	//log.Printf("GETTING UPDATED output...")
	if value, err := vm.Get("output"); err == nil {
	    if value_str, err := value.ToString(); err == nil {
		//log.Printf("output = %v", value_str)
		resp = value_str
	    }
	}
	//log.Printf("resp: %v", resp)
	return resp
}
//handles the /chat url which makes the firebase chat possible
func ulapphChat(w http.ResponseWriter, r *http.Request) {
	if SYS_CHAT_REDIR != "" {
		http.Redirect(w, r, SYS_CHAT_REDIR, http.StatusFound)
		return
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//u := user.Current(c)
	h := r.Header
	//do we really need this for every chat message?
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//uid := ""
	//if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
	_, uid := checkSession(w,r)
	//}
	if uid == "" {
		ipAdd := getIpAdd(w,r)
		geoStr := getGeoString(w,r)
		uid = fmt.Sprintf("guest-%v@%v", geoStr, ipAdd)
	}
	CHAT_FUNC := r.FormValue("CHAT_FUNC")
	UID := r.FormValue("UID")
	NICK := r.FormValue("NICK")
	MSG := r.FormValue("MESSAGE")
    token := ""
    //D0086
    datastoreClient := createClientDS()
	switch CHAT_FUNC {
		case "connectChatRoom":
			//allow user to connect to chatroom link via mini-browser
			if err := htmlWidgetBrowserCR.Execute(w, ""); err != nil {
			  panic(err)
			}
		case "newChatRoom":
			//invite is populated
			INV := r.FormValue("INVITE")
			roomID := r.FormValue("RID")
			logLink := r.FormValue("logLink")
			intent := r.FormValue("intent")
			if INV == "SYS_GUEST_CHAT_URL" {
				redURL := SYS_GUEST_CHAT_URL
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			}
			CC_KEY := r.FormValue("cc_key")
			if CC_KEY != SYS_RECAPTCHA_KEY && isLoggedIn(w,r) != true {
				redURL := fmt.Sprintf("/captcha?CC_FUNC=DISP2&INVITE=%v&RID=%v&logLink=%v&intent=%v", INV, roomID, logLink,intent)
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			}
			//create random room id
			UID = uid
			if roomID == "" {
				roomID = randSeq2(36)
			}
			ukey := fmt.Sprintf("%v-%v", UID, roomID)
			timestamp := getTimestamp()
			p := TDSCHAT{
					OWNER: UID,
					ROOM_ID: roomID,
					START_TSTMP:  timestamp,
					USER:  ukey,
			}
			key := datastore.NameKey("TDSCHAT", ukey, nil)
			if _, err := datastoreClient.Put(c, key, &p); err != nil {
				 panic(err)
            }
            //log.Printf("datastoreClient.Put()  [16761]")
			if uid == "" {
				uid = ukey
				_, token = createToken(w,r,ukey,"PC")
			} else {
				_, token = createToken(w,r,ukey,"PC")
			}
			if INV != "" {
				geoStr := getGeoString(w,r)
				geoAcc := getAccessString(w,r,"")
				chatLink := fmt.Sprintf("%vchat?CHAT_FUNC=joinChatRoom&roomID=%v&owner=%v&mode=private&logLink=%v&intent=%v", getSchemeUrl(w,r), roomID, uid, logLink, intent)
				chatLink = strings.Replace(chatLink, " ", "%%20", -1)
				chatURLMessage := fmt.Sprintf("[PRIVATE CHAT] Can we have a chat please? >>> I'm %v %v. Just click this link>>> %v", geoStr, geoAcc, chatLink)
				//when chat request
				sendChannelMessage(w,r,INV, chatURLMessage)
				//send snippet
				cKey := fmt.Sprintf("GBM_MSG_SNIPPET_%s", INV)
				putStrToMemcacheWithExp(w,r,cKey,chatURLMessage,30)
				//send gb
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", INV, chatURLMessage, uid)
                })
                //open a child window
				data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_WINDOW@888@%v", chatLink)
				//when sysopen window
				sendChannelMessage(w,r,INV,data)
			}
			if INV != "" {
				//IS_ACTIVE := getActiveStatus(w,r,INV)
				//send knock knock to user
				PROFILE_PIC_URLME := getProfilePic(w, r, uid)
				COUNTRY_PIC_URL := getCountryPic(w, r, uid)
				kmsg := fmt.Sprintf("Knock, knock, knock!!! from user: %v <br><a href=\"#\" onclick=\"knock('%v');return false;\"><img src=\"%v\" height=100 width=100></img><img src=\"%v\" width=48 height=30><img src=\"/static/img/knock.png\" width=50 height=50/></img></a>",uid, uid, PROFILE_PIC_URLME, COUNTRY_PIC_URL)
				//update all sys msg
				cKey := fmt.Sprintf("KNOCK_MSG_%s", INV)
				putStrToMemcacheWithExp(w,r,cKey,kmsg,30)
				updateUserActiveData(w, r, c, uid, fmt.Sprintf("newChatRoom-active-%v", INV))
			}
			uag := r.UserAgent()
			ua := user_agent.New(uag)
			nameb, _ := ua.Browser()
			isNotesOK := fmt.Sprintf("%v", isNotesCapable[nameb])
			CHAT_TONE := fmt.Sprintf("%v%v", getSchemeUrl(w,r), DEFAULT_CHAT_TONE)
			dispAds := fmt.Sprintf("%v", SYS_DISP_ADS_RIGHT)
			soundPrefChan := make(chan string)
			soundPrefChanDone := make(chan bool)
			go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
			soundPref := <-soundPrefChan
			<-soundPrefChanDone
			jwtChan := make(chan string)
			jwtChanDone := make(chan bool)
			go procAuthFirebase(w,r,jwtChan,jwtChanDone,uid,token)
			jwToken := <-jwtChan
			<-jwtChanDone
			TEMPDATA := TEMPSTRUCT3{
				STR_FILLER1: "chat",
				STR_FILLER2: uid,
				STR_FILLER3: token,
				STR_FILLER4: getSchemeUrl(w,r),
				STR_FILLER5: "private",
				STR_FILLER6: CHAT_TONE,
				STR_FILLER7: isNotesOK,
				STR_FILLER8: dispAds,
				STR_FILLER9: roomID,
				STR_FILLER10: soundPref,
				STR_FILLER11: getStartColor(w,r),
				STR_FILLER12: getActiveColor(w,r),
				//firebase
				STR_FILLER13: jwToken,
				STR_FILLER14: SYS_SERVER_NAME,
				STR_FILLER15: getSitesServerName(w,r),
			}
			//firebase
			if err := chatTemplateA1.Execute(w, ""); err != nil {
			  panic(err)
			}
			renderStyleCssColored(w,r,".chat-style")
			//firebase
			if err := chatTemplateA2.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
		case "newChatRoomAppRTC":
			//invite is populated
			INV := r.FormValue("INVITE")
			//create random room id
			UID = uid
			roomID := randSeq2(36)
			appRTC := fmt.Sprintf("https://apprtc.appspot.com/r/%v", roomID)
			
			FL_IS_BOT := isBot(w,r)
		
			if INV != "" && FL_IS_BOT != true {
				geoStr := getGeoString(w,r)
				geoAcc := getAccessString(w,r,"")
				chatURLMessage := fmt.Sprintf("[VIDEO CHAT] Can we have a video chat please? >>> I'm %v %v. Just click this link: %v", geoStr, geoAcc, appRTC)
				if uid == "" {
					uid = geoStr
                }
                time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", INV, chatURLMessage, uid)
                })
			}
			
			if INV != "" {
				IS_ACTIVE := getActiveStatus(w,r,INV)
 
				//send knock knock to user
				PROFILE_PIC_URLME := getProfilePic(w, r, uid)
				COUNTRY_PIC_URL := getCountryPic(w, r, uid)
				kmsg := fmt.Sprintf("Knock, knock, knock!!! from user: %v <br><a href=\"#\" onclick=\"knock('%v');return false;\"><img src=\"%v\" height=100 width=100></img><img src=\"%v\" width=48 height=30><img src=\"/static/img/knock.png\" width=50 height=50/></img></a>",uid, uid, PROFILE_PIC_URLME, COUNTRY_PIC_URL)
				//update all sys msg
				cKey := fmt.Sprintf("KNOCK_MSG_%s", INV)
				putStrToMemcacheWithExp(w,r,cKey,kmsg,30)
				
				if IS_ACTIVE == "N" {
					fmt.Fprintf(w, "<font color=red>VIDEO CHAT INACTIVE:</font><br>Sorry, user (%v) is inactive at this time at this server. Check the <a href=\"/directory?DIR_FUNC=people\">people directory</a> to know where this user is currently active. If possible, please send email to <b>%v</b> or send SMS to <b>%v</b>. Thanks!", INV, ADMMAIL, SMS_CONTACT_NBR)
					return
				} else {
					updateUserActiveData(w, r, c, uid, fmt.Sprintf("newChatRoom-active-%v", INV))
				}
			}
			http.Redirect(w, r, appRTC, http.StatusFound)
			return
		case "joinChatRoom":
			//log.Printf("joinChatRoom")
			mode := r.FormValue("mode")
			roomID := r.FormValue("roomID")
			owner := r.FormValue("owner")
			ukey := fmt.Sprintf("%v-%v", uid, roomID)
			if mode == "" || roomID == "" || owner == "" {
				return
			}
			timestamp := getTimestamp()
			p := TDSCHAT{
					OWNER: owner,
					ROOM_ID: roomID,
					START_TSTMP:  timestamp,
					USER:  ukey,
			}
			key := datastore.NameKey("TDSCHAT", ukey, nil)
			if _, err := datastoreClient.Put(c, key, &p); err != nil {
				 panic(err)
            }
            //log.Printf("datastoreClient.Put()  [16910]")
			//log.Panicf("[S0102]")
			if uid == "" {
				uid, token = createToken(w,r,ukey,"PC")
			} else {
				_, token = createToken(w,r,ukey,"PC")
			}
			//log.Printf("uid: %v", uid)
			//log.Printf("token: %v", token)
			updateUserActiveData(w, r, c, uid, fmt.Sprintf("joinChatRoom(%v)", mode))
			uag := r.UserAgent()
			ua := user_agent.New(uag)
			nameb, _ := ua.Browser()
			isNotesOK := fmt.Sprintf("%v", isNotesCapable[nameb])
			CHAT_TONE := fmt.Sprintf("%v%v", getSchemeUrl(w,r), DEFAULT_CHAT_TONE)
			dispAds := fmt.Sprintf("%v", SYS_DISP_ADS_RIGHT)
			soundPrefChan := make(chan string)
			soundPrefChanDone := make(chan bool)
			go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
			soundPref := <-soundPrefChan
			<-soundPrefChanDone
			jwtChan := make(chan string)
			jwtChanDone := make(chan bool)
			go procAuthFirebase(w,r,jwtChan,jwtChanDone,uid,token)
			jwToken := <-jwtChan
			<-jwtChanDone
			TEMPDATA := TEMPSTRUCT3{
				STR_FILLER1: "chat",
				STR_FILLER2: uid,
				STR_FILLER3: token,
				STR_FILLER4: getSchemeUrl(w,r),
				STR_FILLER5: "private",
				STR_FILLER6: CHAT_TONE,
				STR_FILLER7: isNotesOK,
				STR_FILLER8: dispAds,
				STR_FILLER9: roomID,
				STR_FILLER10: soundPref,
				STR_FILLER11: getStartColor(w,r),
				STR_FILLER12: getActiveColor(w,r),
				//firebase
				STR_FILLER13: jwToken,
				STR_FILLER14: SYS_SERVER_NAME,
				STR_FILLER15: getSitesServerName(w,r),
			}
			//log.Printf("TEMPDATA: %#v", TEMPDATA)
			if err := chatTemplateA1.Execute(w, ""); err != nil {
			  panic(err)
			}
			renderStyleCssColored(w,r,".chat-style")
			//firebase
			if err := chatTemplateA2.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			//log.Printf("chatTemplateA2 rendered")
		case "isTyping":
			mode := r.FormValue("mode")
			roomID := r.FormValue("roomID")
			if mode == "private" && roomID != "" {
				PROFILE_PIC_URL := getProfilePic(w, r, UID)
				msg := fmt.Sprintf("<img src=\"%v\" width=40 height=40> %v is typing...", PROFILE_PIC_URL, NICK)
				data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, msg)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
			} else {
				PROFILE_PIC_URL := getProfilePic(w, r, UID)
				msg := fmt.Sprintf("<img src=\"%v\" width=40 height=40> %v is typing...", PROFILE_PIC_URL, NICK)
				data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, msg)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
			}
		case "addUser2":
			//private chats
			mode := r.FormValue("mode")
			roomID := r.FormValue("roomID")
			if mode == "private" && roomID != "" {
				xCountry := h.Get("X-AppEngine-Country")
				xRegion  := h.Get("X-AppEngine-Region")
				xCity    := h.Get("X-AppEngine-City")
				loc := fmt.Sprintf("%s.%s.%s", xCountry, xRegion, xCity)
				viaStr := getAccessString(w,r,"C")
				msg := fmt.Sprintf("%v(%v) has joined ULAPPH Chat - Private from %v %v", UID, NICK, loc, viaStr)
				data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
				
				//notify number of users online
				usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST_TOT_%v", roomID)
				USERS_ONLINE_TOT := ""
				USERS_ONLINE_TOT = getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
				msg = fmt.Sprintf("There are (%v) private users online @ %v", USERS_ONLINE_TOT, getSchemeUrl(w,r))
				data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)	
 
				chatURL := fmt.Sprintf("%vchat?CHAT_FUNC=joinChatRoom&roomID=%v&owner=%v&mode=private", getSchemeUrl(w,r), roomID, uid)
				chatURL = ShortenUrl(w,r,chatURL)
				msg = fmt.Sprintf("You can invite others to this private chat by sending this URL via email or guestbook: %v", chatURL)
				data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
				
				//display initial welcome tips
				ranMsgTitle, RAN_MSG, _ := getMOTD(w, r, uid, "")
				if RAN_MSG != "" {
					msg := fmt.Sprintf("\"%v\" - %v (Want more tips? Type /quote)", RAN_MSG, ranMsgTitle)
					data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
					ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
					
				}
				
				//clear room caches
				//update users online cache
				USERS_ONLINE_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST_%v", roomID)
				putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
				
				//cache total online users
				USERS_ONLINE_TOT = fmt.Sprintf("USERS_ONLINE_LIST_TOT_%v", roomID)	
				putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_TOT,"")
				
				//also notify all users about this
				geoStr := getGeoString(w,r)
				msgDtl3 := fmt.Sprintf("UID:%v %v has joined ULAPPH Chat - Private! >>> %v", geoStr, UID, getAccessString(w,r,""))
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,UID,"/chat",""),"")
				
				//broadcast
				sysReqb := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, UID, getGeoString(w,r))
				_ = fetchURL(w,r,sysReqb)
			}
			
		case "addUser":
			//public chats
			xCountry := h.Get("X-AppEngine-Country")
			xRegion  := h.Get("X-AppEngine-Region")
			xCity    := h.Get("X-AppEngine-City")
			mode := r.FormValue("mode")
			loc := fmt.Sprintf("%s.%s.%s", xCountry, xRegion, xCity)
			viaStr := getAccessString(w,r,"C")
			msg := fmt.Sprintf("%v(%v) has joined channel \"%v\" at %v from %v %v ", UID, NICK, mode, domRefMatchS, loc, viaStr)
			data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
			ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
			ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
			
			//notify number of users online
			usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST_TOT")
			USERS_ONLINE_TOT := ""
			USERS_ONLINE_TOT = getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
			msg = fmt.Sprintf("There are (%v) users online @ %v", USERS_ONLINE_TOT, getSchemeUrl(w,r))
			data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
 
 
			ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
			//display initial welcome tips
			ranMsgTitle, RAN_MSG, _ := getMOTD(w, r, uid, "")
			if RAN_MSG != "" {
				msg := fmt.Sprintf("\"%v\" - %v (Want more tips? Type /quote)", RAN_MSG, ranMsgTitle)
				data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
				
			}
			
			//also notify all users about this
			geoStr := getGeoString(w,r)
			msgDtl3 := fmt.Sprintf("UID:%v %v has joined ULAPPH Chat! >>> (%v) %v", geoStr, UID, mode, getAccessString(w,r,""))
			msgDtl3b := fmt.Sprintf("UID:%v %v has joined ULAPPH Chat! (%v) >>> %vchat %v", geoStr, UID, mode, getSchemeUrl(w,r), getAccessString(w,r,""))
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,UID,"/chat",""),"")
 
			//broadcast
			sysReqb := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, UID, getGeoString(w,r))
			_ = fetchURL(w,r,sysReqb)
			
			//notify admin
			if ADMMAIL != UID {
				notifyGuestbook(w, r , "autoNotifyPeopleGB", ADMMAIL, msgDtl3b, UID)
			}
 
		case "newMessage":
 
			//check if it is a command
			mode := r.FormValue("mode")
			roomID := r.FormValue("roomID")
			
			FL_PRIV_CHAT := false
			if mode == "private" && roomID != "" {
				FL_PRIV_CHAT = true
			}
			
 
 
			switch string(MSG[0]) {
				case "/":
					SPL := strings.Split(MSG," ")
					if len(SPL) > 0 {
						switch strings.ToLower(SPL[0]) {
							case "/help":
								
								if FL_PRIV_CHAT == true {
									//if private
									
									usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST_%v", roomID)
									usersOnline_CACHE := ""
									usersOnline_CACHE = getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
 
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
									
									msg := fmt.Sprintf("Online Users: %v", usersOnline_CACHE)
									data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
									data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", SYS_CHAT_HELP)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
									
								} else {
									//public
									usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
									usersOnline_CACHE := ""
									usersOnline_CACHE = getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
 
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
									
									msg := fmt.Sprintf("Online Users: %v", usersOnline_CACHE)
									data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")	
 
									data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", SYS_CHAT_HELP)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
								}
							
							case "/quote":
							
								if FL_PRIV_CHAT == true {
									//private
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
									
									ranMsgTitle, RAN_MSG, _ := getMOTD(w, r, uid, "")
									if RAN_MSG != "" {
										msg := fmt.Sprintf("\"%v\" - %v", RAN_MSG, ranMsgTitle)
										data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
										ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
										
									} else {
										data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", "No data found, please try again later!")
										ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
									}
								} else {
									//public
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
									
									ranMsgTitle, RAN_MSG, _ := getMOTD(w, r, uid, "")
									if RAN_MSG != "" {
										msg := fmt.Sprintf("\"%v\" - %v", RAN_MSG, ranMsgTitle)
										data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
										ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
										
									} else {
										data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", "No data found, please try again later!")
										ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
									}
								}
								
							
							case "/scrape":
								site := SPL[1]
								keyword := ""
								if len(SPL) > 2 {
								keyword = SPL[2]
								}
								bodyString := fetchURL(w,r,site)
								text, err := html2text.FromString(bodyString)
								if err != nil {
									panic(err)
								}
								//scan text & return only lines with text being searched
								res := grepText(w,r,text,keyword)
 
								if FL_PRIV_CHAT == true {
									//private
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
									if res != "" {
										scanner := bufio.NewScanner(strings.NewReader(res))	
										for scanner.Scan() {
											msg := scanner.Text()
												data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
												ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
										}
									} else {
										data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", "No data found, please try again later!")
										ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
									}
								} else {
									//public
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
									if res != "" {
										scanner := bufio.NewScanner(strings.NewReader(res))	
										for scanner.Scan() {
											msg := scanner.Text()
											data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
											ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
										}
									} else {
										data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", "No data found, please try again later!")
										ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
									}
								}
							case "/bye":
							
								if FL_PRIV_CHAT == true {
									//private
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
 
									//delete old channel here
									datastoreClient.Delete(c, getKeyChannel(c,UID))
									
									USERS_ONLINE_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST_%v", roomID)
									putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
									geoStr := getGeoString(w,r)
									msg := fmt.Sprintf("UID:%v %v(%v) has left ULAPPH Chat!", geoStr, UID, NICK)
									data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
									
								} else {
									//public
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
 
									//delete old channel here
									datastoreClient.Delete(c, getKeyChannel(c,UID))
									
									USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
									putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,roomID)
									geoStr := getGeoString(w,r)
									msg := fmt.Sprintf("UID:%v %v(%v) has left ULAPPH Chat!", geoStr, UID, NICK)
									data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
								}
								
							case "/kick":
							
								//get user privilege
								FUNC_CODE := "GET_GRP_ID"
								FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", UID, FUNC_CODE)
								
								if FL_VALID_USER == true {
								
									if GROUP_ID == "GRP_ADMIN" {
								
										if FL_PRIV_CHAT == true {
											//private
											data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
											ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
 
											//delete old channel here
											datastoreClient.Delete(c, getKeyChannel(c, SPL[1]))
											
											//clear online list
											USERS_ONLINE_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST_%v", roomID)
											putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
											//force logout the user
											//log task to decrement stats for online users
											ipStr := getIpAdd(w,r)
											geoStr := getGeoString(w,r)
											geoAcc := getAccessString(w,r,"")
											FROM := fmt.Sprintf("%v %v %v", geoStr, geoAcc, ipStr)
                                            time.AfterFunc(5*time.Second, func() {
                                                laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-stats-dec-logged-in", map[string]string{"uid": SPL[1], "from": FROM})
                                            })
											//geoStr := getGeoString(w,r)
											msg := fmt.Sprintf("UID:%v %v has been kicked out from ULAPPH Chat!", geoStr,  SPL[1])
											data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
											ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
											
										} else {
											//public
											data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
											ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
 
											//delete old channel here
											datastoreClient.Delete(c, getKeyChannel(c, SPL[1]))
											
											//clear online list
 											USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
											putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
											
											//force logout the user
											//log task to decrement stats for online users
											ipStr := getIpAdd(w,r)
											geoStr := getGeoString(w,r)
											geoAcc := getAccessString(w,r,"")
											FROM := fmt.Sprintf("%v %v %v", geoStr, geoAcc, ipStr)
                                            time.AfterFunc(5*time.Second, func() {
                                                laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-stats-dec-logged-in", map[string]string{"uid": SPL[1], "from": FROM})
                                            })
											//geoStr := getGeoString(w,r)
											msg := fmt.Sprintf("UID:%v %v has been kicked out from ULAPPH Chat!", geoStr,  SPL[1])
											data = fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msg)
											ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
										}
										
									} else {
									
										if FL_PRIV_CHAT == true {
											//kick private
											MSG := "Error! Only admins can kick other users!"
											data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
											ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
										} else {
											//kick public
											MSG := "Error! Only admins can kick other users!"
											data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
											ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
										}
									}
								}
								
							default:
								if FL_PRIV_CHAT == true {
									
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
								} else {
									data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
									ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
								}
						}
					
					}
				default:
					//if not keyword; just a message
					if FL_PRIV_CHAT == true {
						//private message
						data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
						ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHAT_ROOM", data, roomID)
					} else {
						//public message
						data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", NICK, MSG)
						ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
					}
			
			}
		
 
		default:
			CC_KEY := r.FormValue("cc_key")
			pubchan := r.FormValue("pubchan")
			if CC_KEY != SYS_RECAPTCHA_KEY && isLoggedIn(w,r) != true {
				redURL := fmt.Sprintf("/captcha?CC_FUNC=DISP4&pubchan=%v", pubchan)
				http.Redirect(w, r, redURL, http.StatusFound)
				return			
			}

			if uid == "" {
				uid, token = createToken(w,r,"","")
			} else {
				_, token = createToken(w,r,"","")
			}

			uag := r.UserAgent()
			ua := user_agent.New(uag)
			nameb, _ := ua.Browser()
			isNotesOK := fmt.Sprintf("%v", isNotesCapable[nameb])
			CHAT_TONE := fmt.Sprintf("%v%v", getSchemeUrl(w,r), DEFAULT_CHAT_TONE)
			dispAds := fmt.Sprintf("%v", SYS_DISP_ADS_RIGHT)
			soundPrefChan := make(chan string)
			soundPrefChanDone := make(chan bool)
			go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
			soundPref := <-soundPrefChan
			<-soundPrefChanDone
			//firebase
			
			jwtChan := make(chan string)
			jwtChanDone := make(chan bool)
			go procAuthFirebase(w,r,jwtChan,jwtChanDone,uid,token)
			jwToken := <-jwtChan
			<-jwtChanDone
			
			pubRoom := ""
			switch {
				case pubchan == "":
					pubchan = "public"
					pubRoom = SYS_CHAT_PUB_ROOM_ID
				case pubchan == "country":
					h := r.Header
					xCountry := h.Get("X-AppEngine-Country")
					//pubchan = xCountry
					pubRoom = fmt.Sprintf("%v:%v", xCountry, SYS_CHAT_COUNTRY_ROOM_ID)
				case pubchan == "worldwide":
					pubRoom = SYS_CHAT_WORLD_ROOM_ID
				default:
					pubchan = "public"
					pubRoom = SYS_CHAT_PUB_ROOM_ID
			}
 
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: "chat",
				STR_FILLER2: uid,
				STR_FILLER3: token,
				STR_FILLER4: getSchemeUrl(w,r),
				STR_FILLER5: pubchan,
				STR_FILLER6: CHAT_TONE,
				STR_FILLER7: isNotesOK,
				STR_FILLER8: dispAds,
				STR_FILLER9: pubRoom,
				STR_FILLER10: soundPref,
				STR_FILLER11: getStartColor(w,r),
				STR_FILLER12: getActiveColor(w,r),
				//firebase
				STR_FILLER13: jwToken,
				STR_FILLER14: SYS_SERVER_NAME,
				STR_FILLER15: getSitesServerName(w,r),
			}
			if err := chatTemplateA1.Execute(w, ""); err != nil {
			  panic(err)
			}
			renderStyleCssColored(w,r,".chat-style")
			//firebase		
			if err := chatTemplateA2.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			//notify admin
			msgDtlg := fmt.Sprintf("WARNING: [%v] has accessed public chat at %vchat?pubchan=%v", uid, getSchemeUrl(w,r), pubchan)
			if FDBKMAIL != uid {
				notifyGuestbook(w, r , "autoNotifyPeopleGB", FDBKMAIL, msgDtlg, uid)
			}
			
	}
}

//sends chat messages given the message and target roomID in firebase 
func ulapphChatSender(w http.ResponseWriter, r *http.Request, UC_FUNC string, MSG, roomID string) {
	//D0116
	if SYS_REALTIME_NOTIFS == false {
		return
	}
	switch UC_FUNC {
		case "CH_MSG_NOTIFY_CHAT_ROOM":
			//private chats
			sendChatPrivate(w, r, roomID, MSG)
		//firebase
		//public chat
		case "CH_MSG_NOTIFY_CHATS":
			mode := r.FormValue("mode")
			roomID := r.FormValue("roomID")
			if roomID == "" {
				sendChatPublic(w, r, mode, SYS_CHAT_PUB_ROOM_ID, MSG)
			} else {
				sendChatPublic(w, r, mode, roomID, MSG)
			}
		//announce to world chat
		case "CH_MSG_NOTIFY_CHATS_WORLD":
			//public chats
			mode := "worldwide"
			roomID := SYS_CHAT_WORLD_ROOM_ID
			sendChatPublic(w, r, mode, roomID, MSG)
			//also notify to country level
			mode = "country"
			h := r.Header
			xCountry := h.Get("X-AppEngine-Country")
			roomID = fmt.Sprintf("%v:%v", xCountry, SYS_CHAT_COUNTRY_ROOM_ID)
			sendChatPublic(w, r, mode, roomID, MSG)
	}
}

//saved data to browser local storage
func ulapphLocal(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	LS_FUNC := r.FormValue("LS_FUNC")
	DOC_ID := r.FormValue("DOC_ID")
	SID := r.FormValue("SID")
	TITLE := r.FormValue("TITLE")
	TITLE = strings.Replace(TITLE, "_", " ", -1)
	IMG_SRC := r.FormValue("IMG_SRC")
	docID := str2int(DOC_ID)
	//use SID if available
	if SID != "" {
		SPL := strings.Split(SID,"-")
		TARGET := SPL[0]
		if len(SPL) > 1 {
			DOC_ID = SPL[1]
			docID = str2int(DOC_ID)
		}
		if LS_FUNC == "" {		
			switch TARGET {
				case "TDSSLIDE":
					LS_FUNC = "SLIDE_COPY"
				case "TDSARTL":
					LS_FUNC = "ARTICLE_COPY"
			}
		}
	}
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	switch LS_FUNC {
		case "IMG2BYTE":
			imgUrl := r.FormValue("imgUrl")
			imgBytes := openImageURLtoBytes(w,r,imgUrl)
			w.Header().Set("Content-Type", "application/octet-stream")
			w.WriteHeader(200)
			w.Write(imgBytes)
			return
		case "IDX_COPY":
			//if copy initiated from search results
			SOURCE_TBL := r.FormValue("SOURCE_TBL")
			SOURCE_TYPE := r.FormValue("SOURCE_TYPE")
			DOC_KEY := r.FormValue("DOC_KEY")
			TITLE := r.FormValue("TITLE")
			TITLE = strings.Replace(TITLE, "_", " ", -1)
			IMG_SRC := r.FormValue("IMG_SRC")
			if IMG_SRC == "" {
				IMG_SRC = "/static/img/NoImageAvailable.png"
			}
			SID := DOC_KEY
			
			switch SOURCE_TBL {
				case "TDSMEDIA":
					MEDIA_ID := ""
					SPL := strings.Split(DOC_KEY,"-")
					if len(SPL) > 1 {
						MEDIA_ID = SPL[1]
					}
					
					switch  {
						case SOURCE_TYPE == "image" || strings.Index(SOURCE_TYPE, "image/") != -1:
							docID := str2int(MEDIA_ID)
							_, _, _, _, _, _, IMG_SRC, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
							sysReq := fmt.Sprintf("/uloc?LS_FUNC=MEDIA_IMAGE&MEDIA_ID=%v&SID=%v&IMG_SRC=%v&TITLE=%v", MEDIA_ID, SID, IMG_SRC, TITLE)
							http.Redirect(w, r, sysReq, http.StatusFound)
							return						
						case SOURCE_TYPE == "text" || strings.Index(SOURCE_TYPE, "text/") != -1:
							sysReq := fmt.Sprintf("/uloc?LS_FUNC=MEDIA_TEXT&MEDIA_ID=%v&SID=%v&IMG_SRC=%v&TITLE=%v", MEDIA_ID, SID, IMG_SRC, TITLE)
							http.Redirect(w, r, sysReq, http.StatusFound)
							return					
					}
					
				case "TDSSLIDE":
					//uloc?LS_FUNC=SLIDE_COPY&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&IMG_SRC=%v
					DOC_ID := ""
					SPL := strings.Split(DOC_KEY,"-")
					if len(SPL) > 1 {
						DOC_ID = SPL[1]
					}
					sysReq := fmt.Sprintf("/uloc?LS_FUNC=SLIDE_COPY&DOC_ID=%v&SID=%v&TITLE=%v&IMG_SRC=%v", DOC_ID, SID, TITLE, IMG_SRC)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case "TDSARTL":
					//uloc?LS_FUNC=ARTICLE_COPY&DOC_ID=%v&SID=TDSARTL-%v&TITLE=%v&IMG_SRC=%v
					DOC_ID := ""
					SPL := strings.Split(DOC_KEY,"-")
					if len(SPL) > 1 {
						DOC_ID = SPL[1]
					}
					sysReq := fmt.Sprintf("/uloc?LS_FUNC=ARTICLE_COPY&DOC_ID=%v&SID=%v&TITLE=%v&IMG_SRC=%v", DOC_ID, SID, TITLE, IMG_SRC)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				default:
					msgDtl := fmt.Sprintf("[U00179] ERROR: Item cannot be copied.")
					msgTyp := "error"
					msgURL := "/?q=home&ERROR=invalidFormat"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Carousel homepage.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
			}
		
		case "MEDIA_IMAGE":
			IMG_SRC := r.FormValue("IMG_SRC") 	
 
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: IMG_SRC,
				STR_FILLER2: fmt.Sprintf("%v", TITLE),
				STR_FILLER3: randSeq2(20),
				STR_FILLER4: "IMAGE",
				STR_FILLER5: IMG_SRC,
				HTM_FILLER1: "",
			}
			
			if err := ulocTemplateB.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			if err := ulocTemplateStorages.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := ulocTemplateB2.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}		
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return			
	
		case "MEDIA_TEXT":
			MEDIA_ID := r.FormValue("MEDIA_ID")
			SID := r.FormValue("SID")
			SPL := strings.Split(SID,"-")
			DOC_ID := "0"			
			
			cKey := fmt.Sprintf("CACHE_ULOC_TDSMEDIA_%v", MEDIA_ID)
			CACHE_ULOC_TDSMEDIA := ""
			CACHE_ULOC_TDSMEDIA = getStrMemcacheValueByKey(w,r,cKey)
			
			if CACHE_ULOC_TDSMEDIA == "" {
 
				if len(SPL) > 1 {
					DOC_ID = SPL[1]
				}
				docID := str2int(DOC_ID)
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ := getTDSMEDIABlobKey(w, r, docID)	
				
 
				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				//secCtr := 0
				for s.Scan() {
					buf.WriteString(fmt.Sprintf("%v<br>", s.Text()))
				}
 
				CACHE_ULOC_TDSMEDIA := buf.String()
				
				//store this to cache
				putStrToMemcacheWithoutExp(w,r,cKey,CACHE_ULOC_TDSMEDIA)
			
			}
			
 
			if CACHE_ULOC_TDSMEDIA != "" {
			
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: CACHE_ULOC_TDSMEDIA,
					STR_FILLER2: fmt.Sprintf("%v", TITLE),
					STR_FILLER3: randSeq2(20),
					STR_FILLER4: "TEXT",
					STR_FILLER5: "/static/img/text-icon.gif",
					HTM_FILLER1: "",
					
				}
 
				if err := ulocTemplateB.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				if err := ulocTemplateStorages.Execute(w, ""); err != nil {
				  panic(err)
				}	
				if err := ulocTemplateB2.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				if err := htmlFooterModal.Execute(w, ""); err != nil {
				  panic(err)
				}
			} else {
				fmt.Fprintf(w, "ERROR: Empty data for SID: %v. Please try again!", SID)
			}
			return
	
		case "ARTICLE_COPY":
 
			cKey := fmt.Sprintf("CACHE_ULOC_TDSARTL_%v", DOC_ID)
			CACHE_ULOC_TDSARTL := ""
			CACHE_ULOC_TDSARTL = getStrMemcacheValueByKey(w,r,cKey)
			
			if CACHE_ULOC_TDSARTL == "" {
			
				blobkey, PUB_STAT, FL_SHARED, AUTHOR, _, _, _, _, _ := getTDSARTLBlobKey(w, r, docID)
				_, doc, err := Parse3(w, r, blobkey, TITLE, 0, "desktop0", SID, "OFFLINE", AUTHOR, PUB_STAT, FL_SHARED)
				if err != nil {
					i := strings.Index(blobkey, "GET_WALL:")
					if i != -1 {
						SPL := strings.Split(blobkey,"GET_WALL:")
						if len(SPL) > 1 {
							msgDtl := "[U00184] Linked document cannot be copied. Go to the source site instead."
							msgTyp := "error"
							action := "U00184"
							sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
							////log.Panicf("error: %v", err)
							http.Redirect(w, r, sysReq, http.StatusFound)
							return
						}
						
					} else {
						//panic(err)
						msgDtl := fmt.Sprintf("[U00184] Critical error. Parse3 error: %v", err)
						msgTyp := "error"
						action := "U00184"
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
						////log.Panicf("error: %v", err)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
				}
				//fmt.Fprintf(w, "doc: %v<br>", doc)
				var buf bytes.Buffer
				title2 := fmt.Sprintf("%v.article-offline", TITLE)
				SL_TMP := ""
				if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
					panic(err)
				}

				//replace img src here with dataurl
				var bufc bytes.Buffer
				s := bufio.NewScanner(&buf)
				s.Scan()
				for s.Scan() {
 
					i := strings.Index(s.Text(), "<img src=")
					if i != -1 {
						SPL := strings.Split(s.Text(),"<img src=\"")
						SPL = strings.Split(SPL[1],"\"")
						if len(SPL) > 1 {
							//client := urlfetch.Client(c)
							if err := r.ParseForm(); err != nil {
								panic(err)
							}
							thisImgUrl := ""
							SPLU := strings.Split(SPL[0],"http:")
							SPLX := strings.Split(SPL[0],"https:")
							if len(SPLU) > 1 || len(SPLX) > 1 {
								thisImgUrl = SPL[0]
							} else {
								thisImgUrl = fmt.Sprintf("%v%v", getSchemeUrl(w,r), SPL[0])
							}
							resp, err := http.Get(thisImgUrl)
							if err != nil {
								//panic(err)
							}
 
							//bodyBytes, _ := ioutil.ReadAll(resp.Body)
							bodyBytes, _ := ioutil.ReadAll(resp.Body)
							ct := resp.Header.Get("Content-Type")
							enc := encode(bodyBytes)
 
							img64 := format(enc, ct)
							repImg := strings.Replace(s.Text(), SPL[0], img64, -1)
							bufc.WriteString(fmt.Sprintf("%v\n", repImg))
 
						}
					} else {
						bufc.WriteString(fmt.Sprintf("%v\n", s.Text()))
					}
				}

				CACHE_ULOC_TDSARTL = bufc.String()
				//store this to cache
				putStrToMemcacheWithoutExp(w,r,cKey,CACHE_ULOC_TDSARTL)
			
			}
 
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: CACHE_ULOC_TDSARTL,
				STR_FILLER2: fmt.Sprintf("%v", TITLE),
				STR_FILLER3: randSeq2(20),
				STR_FILLER4: "ARTICLE",
				STR_FILLER5: IMG_SRC,
				HTM_FILLER1: template.HTML(fmt.Sprintf("[<a download=\"TDSARTL-%v.html\" href=\"/uloc?LS_FUNC=ARTICLE_COPY2&DOC_ID=%v&SID=TDSARTL-%v\">Download File</a>]", DOC_ID, DOC_ID, DOC_ID)),
			}
			
			if err := ulocTemplateB.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			if err := ulocTemplateStorages.Execute(w, ""); err != nil {
			  panic(err)
			}	
			if err := ulocTemplateB2.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			
		case "ARTICLE_COPY2":
			cKey := fmt.Sprintf("CACHE_ULOC_TDSARTL_%v", DOC_ID)
			CACHE_ULOC_TDSARTL := ""
			CACHE_ULOC_TDSARTL = getStrMemcacheValueByKey(w,r,cKey)
			
			if CACHE_ULOC_TDSARTL == "" {
				
				
				dArticle := downloadArticle(w,r,SID)
				
				CACHE_ULOC_TDSARTL = dArticle
				//store this to cache
				putStrToMemcacheWithoutExp(w,r,cKey,CACHE_ULOC_TDSARTL)
			
			}
			fmt.Fprintf(w, "%v", CACHE_ULOC_TDSARTL)
			return
 
		case "SLIDE_COPY":
			fmt.Fprintf(w, "Copying slide...<br>")
			cKey := fmt.Sprintf("CACHE_ULOC_TDSSLIDE_%v", DOC_ID)
			CACHE_ULOC_TDSSLIDE := ""
			CACHE_ULOC_TDSSLIDE = getStrMemcacheValueByKey(w,r,cKey)
			
			if CACHE_ULOC_TDSSLIDE == "" {
			
				blobkey, PUB_STAT, FL_SHARED, AUTHOR, _, _, _, _, _, _  := getTDSSLIDEBlobKey(w, r, docID)
				_, doc, err := Parse3(w, r, blobkey, TITLE, 0, "desktop0", SID, "OFFLINE", AUTHOR, PUB_STAT, FL_SHARED)
				if err != nil {
					//could be a linked content
					i := strings.Index(blobkey, "GET_WALL:")
					if i != -1 {
						SPL := strings.Split(blobkey,"GET_WALL:")
						if len(SPL) > 1 {
							msgDtl := fmt.Sprintf("[U00148] Linked document cannot be copied. Go to the source site instead.")
							msgTyp := "error"
							action := "U00148"
							sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
							http.Redirect(w, r, sysReq, http.StatusFound)
							return
						}
					} else {
						//panic(err)
						msgDtl := fmt.Sprintf("[U00180] Critical error. Parse3 error. %v", err)
						msgTyp := "error"
						action := "U00180"
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
				}
				var buf bytes.Buffer
				
				FL_DESKTOP := checkDesktop(w,r)
				title2 := ""
				if FL_DESKTOP == true {
					title2 = fmt.Sprintf("%v.slide-offline", TITLE)
				} else {
					title2 = fmt.Sprintf("%v.article-offline", TITLE)
				}
				SL_TMP := ""
				if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
					panic(err)
				}
				
				//replace img src here with dataurl
				var bufc bytes.Buffer
				s := bufio.NewScanner(&buf)
				s.Scan()
				for s.Scan() {
 
					i := strings.Index(s.Text(), "<img src=")
					if i != -1 {
						SPL := strings.Split(s.Text(),"<img src=\"")
						SPL = strings.Split(SPL[1],"\"")
						if len(SPL) > 1 {
							//client := urlfetch.Client(c)
							if err := r.ParseForm(); err != nil {
								panic(err)
							}
							thisImgUrl := ""
							SPLU := strings.Split(SPL[0],"http:")
							SPLX := strings.Split(SPL[0],"https:")
							if len(SPLU) > 1 || len(SPLX) > 1 {
								thisImgUrl = SPL[0]
							} else {
								thisImgUrl = fmt.Sprintf("%v%v", getSchemeUrl(w,r), SPL[0])
							}
							resp, err := http.Get(thisImgUrl)
							if err != nil {
								//panic(err)
							}
							bodyBytes, _ := ioutil.ReadAll(resp.Body)
							ct := resp.Header.Get("Content-Type")
							enc := encode(bodyBytes)
 
							img64 := format(enc, ct)
							repImg := strings.Replace(s.Text(), SPL[0], img64, -1)
							bufc.WriteString(fmt.Sprintf("%v\n", repImg))
 
						}
					} else {
						bufc.WriteString(fmt.Sprintf("%v\n", s.Text()))
					}
				}
 
				CACHE_ULOC_TDSSLIDE = bufc.String()
				//store this to cache
				putStrToMemcacheWithoutExp(w,r,cKey,CACHE_ULOC_TDSSLIDE)
			}
 
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: CACHE_ULOC_TDSSLIDE,
				STR_FILLER2: fmt.Sprintf("%v", TITLE),
				STR_FILLER3: randSeq2(20),
				STR_FILLER4: "SLIDE",
				STR_FILLER5: IMG_SRC,
				HTM_FILLER1: template.HTML(fmt.Sprintf("[<a download=\"TDSSLIDE-%v.html\" href=\"/uloc?LS_FUNC=SLIDE_COPY2&DOC_ID=%v&SID=TDSSLIDE-%v\">Download File</a>]", DOC_ID, DOC_ID, DOC_ID)),
			}
			
			if err := ulocTemplateB.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			if err := ulocTemplateStorages.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := ulocTemplateB2.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			
		case "SLIDE_COPY2":
			cKey := fmt.Sprintf("CACHE_ULOC_TDSSLIDE_%v", DOC_ID)
			CACHE_ULOC_TDSSLIDE := ""
			CACHE_ULOC_TDSSLIDE = getStrMemcacheValueByKey(w,r,cKey)
			
			if CACHE_ULOC_TDSSLIDE == "" {
				dSlide := downloadSlide(w,r,SID)
 
				CACHE_ULOC_TDSSLIDE = dSlide
				//store this to cache
				putStrToMemcacheWithoutExp(w,r,cKey,CACHE_ULOC_TDSSLIDE)
			}
						
			fmt.Fprintf(w, "%v", CACHE_ULOC_TDSSLIDE)
			return
			
		case "ulocX":
 
			cKey := fmt.Sprintf("CACHE_MANIFEST_RELOAD_ULOC_%s", uid)
			putStrToMemcacheWithoutExp(w,r,cKey,randSeq2(20))
			redURL := fmt.Sprintf("/uloc")
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		default:			
			if err := ulocTemplateA.Execute(w, ""); err != nil {
			  panic(err)
			}
			
			if err := ulocTemplateStorages.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := ulocTemplateA2.Execute(w, randSeq2(20)); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
	}
}

var chatTemplateA1 = template.Must(template.New("chatTemplateA").Parse(chatTemplateDispA1))
const chatTemplateDispA1 = `
	<!doctype html>
	<html lang="en">
	<head>
	  <meta charset="UTF-8">
	  <title>Chat::www.ulapph.com - ULAPPH Cloud Desktop</title>
	  <meta name="description" content="ULAPPH Cloud Desktop" />
	  <link rel="shortcut icon" href="/static/img/favicon.ico"/>
`
var chatTemplateA2 = template.Must(template.New("chatTemplateA").Parse(chatTemplateDispA2))
const chatTemplateDispA2 = `
	<style>
		.note {
			background-color: {{.STR_FILLER11}};
			height: 250px;
			padding: 10px;
			position: absolute;
			width: 200px;
			-webkit-box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.5);
		}
 
		.note:hover .closebutton {
			display: block;
		}
 
		.closebutton {
			display: none;
			background-image: url(/static/img/deleteButton.png);
			height: 30px;
			position: absolute;
			left: -15px;
			top: -15px;
			width: 30px;
		}
 
		.closebutton:active {
			background-image: url(/static/img/deleteButtonPressed.png);
		}
 
		.edit {
			outline: none;
		}
 
		.timestamp {
			position: absolute;
			left: 0px;
			right: 0px;
			bottom: 0px;
			font-size: 9px;
			background-color: {{.STR_FILLER12}};
			color: white;
			border-top: 1px solid #a80;
			padding: 2px 4px;
			text-align: right;
		}
	</style>
		<script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
 
		<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
		<link rel="stylesheet" href="/static/css/alertify.core.css" />
		<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
		<script type="text/javascript" src="/static/js/jquery.titlealert.js"></script>
		<script type="text/javascript" charset="utf-8">
			window.onbeforeunload = function (e) {
				e = e || window.event;
 
				// For IE and Firefox prior to version 4
				if (e) {
					e.returnValue = 'ULAPPH Window Manager';
				}
 
				// For Safari
				return 'ULAPPH Window Manager';
			};
		</script>		
	</head>
	<body>		
	  <ul class="pages">
		<li class="chat page">
		  <div class="chatArea">
			<ul class="messages"></ul>
		  </div>
		  <input class="inputMessage" placeholder="Type here..."/>
		</li>
		<li class="login page">
		  <div class="form">
                       {{if eq .STR_FILLER5 "worldwide"}}
                       <!--img src="/static/img/globerotate.gif"-->
		       <h2>Chat Worldwide</h2>
                       {{end}}
                       {{if eq .STR_FILLER5 "country"}}
                       <!--img src="/static/img/cuberotate.gif"-->
		       <h2>Chat Country</h2>
                       {{end}}
                       {{if eq .STR_FILLER5 "public"}}
                       <!--img src="/static/img/circlerotate.gif"-->
		       <h2>Chat Public</h2>
                       {{end}}
			<h3 class="title">What's your nickname?</h3>
			 <input class="usernameInput" type="text" value="{{.STR_FILLER2}}" maxlength="50" />
			 <input type="hidden" id="desktop" value="{{.STR_FILLER1}}">
			 <input type="hidden" id="dName" value="{{.STR_FILLER7}}">
			 <input type="hidden" id="aUser" value="{{.STR_FILLER2}}">
			 <input type="hidden" id="tok" value="{{.STR_FILLER3}}">
			 <input type="hidden" id="host" value="{{.STR_FILLER4}}">
			 <input type="hidden" id="mode" value="{{.STR_FILLER5}}">
			 <input type="hidden" id="ringtone" value="{{.STR_FILLER6}}">
			 <input type="hidden" id="dispAds" value="{{.STR_FILLER8}}">
			 <input type="hidden" id="roomID" value="{{.STR_FILLER9}}">
			 <input type="hidden" id="soundStat" value="on">
			 <!--//firebase-->
			 <input type="hidden" id="jwt" value="{{.STR_FILLER13}}">
			 <input type="hidden" id="aep" value="{{.STR_FILLER14}}">
			 <input type="hidden" id="sss" value="{{.STR_FILLER15}}">
			 <div id="focusCont"></div>
		  </div>
		</li>
	  </ul>
	  <script src="/static/js/alertify.min.js"></script>
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
	  <script src="/static/js/chat-main.js"></script>
	  {{if eq .STR_FILLER7 "true" }}
	  <script src="/static/js/cloud-notes-chat.js"></script>
	  {{end}}
	</body>
	</html>
`
var streamTemplateA2 = template.Must(template.New("streamTemplateA2").Parse(streamTemplateDispA2))
const streamTemplateDispA2 = `
	  <!--h3>ULAPPH Cloud Desktop - Stream</h3-->
		{{if eq .STR_FILLER9 "on" }}
			<a href="" onclick="soundOnOffStream();return false;" title="Click to disable sound"><img id="soundFlag" src="/static/img/sound-on.png" width="20" height="20"></img></a>
		{{else}}
			<a href="" onclick="soundOnOffStream();return false;" title="Click to enable sound"><img id="soundFlag" src="/static/img/sound-off.png" width="20" height="20"></img></a>
		{{end}}
		<a href="/stream?STR_FUNC=REQ_RUN&UID={{.STR_FILLER2}}"><img src="/static/img/run.png" width="20" height="20" title="Click to request topic search"></a>
	  <hr>
`
 
var streamTemplateA3 = template.Must(template.New("streamTemplateA3").Parse(streamTemplateDispA3))
 
const streamTemplateDispA3 = `
		 <!--hr-->
         <input type="hidden" id="soundStat" value="{{.STR_FILLER9}}">
		 <input type="hidden" id="desktop" value="{{.STR_FILLER1}}">
		 <input type="hidden" id="dName" value="{{.STR_FILLER7}}">
		 <input type="hidden" id="aUser" value="{{.STR_FILLER2}}">
		 <input type="hidden" id="tok" value="{{.STR_FILLER3}}">
		 <input type="hidden" id="host" value="{{.STR_FILLER4}}">
		 <input type="hidden" id="mode" value="{{.STR_FILLER5}}">
		 <input type="hidden" id="ringtone" value="{{.STR_FILLER6}}">
		 <input type="hidden" id="dispAds" value="{{.STR_FILLER8}}">
		 <!--//firebase-->
		 <input type="hidden" id="jwt" value="{{.STR_FILLER10}}">
		 <input type="hidden" id="aep" value="{{.STR_FILLER11}}">
		 <input type="hidden" id="sss" value="{{.STR_FILLER12}}">
		<style>
		#channel-area{
			width: 100%;
			position:relative;
			vertical-align: top;
			z-index:111;
			bottom:0px;
			left:0px;
			padding:6px;
			background-color:#e6fce1;
		}
		</style>
		 <a name="area"></a>
		 <div id="channel-area"></div>
		
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
 
	  <script src="/static/js/alertify.min.js"></script>
	  <script src="/static/js/channel-stream.js"></script>	
	  <script src="/static/js/channel-firebase.js"></script>	
	  <script src="/static/js/wall-copy.js"></script>
	  <script src="/static/js/soundOnOff.js"></script>
	</body>
	</html>
`
 
var streamTemplateA1 = template.Must(template.New("streamTemplateA1").Parse(streamTemplateDispA1))
 
const streamTemplateDispA1 = `
	<!doctype html>
	<html lang="en">
	<head>
	  <meta charset="UTF-8">
	  <title>Stream::www.ulapph.com - ULAPPH Cloud Desktop</title>
	  <meta name="description" content="ULAPPH Cloud Desktop" />
	  <link rel="shortcut icon" href="/static/img/favicon.ico"/>
		<link rel="stylesheet" href="/static/css/chat-style.css">
	<style>
		.note {
			background-color: {{.STR_FILLER6}};
			height: 250px;
			padding: 10px;
			position: absolute;
			width: 200px;
			-webkit-box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.5);
		}
 
		.note:hover .closebutton {
			display: block;
		}
 
		.closebutton {
			display: none;
			background-image: url(/static/img/deleteButton.png);
			height: 30px;
			position: absolute;
			left: -15px;
			top: -15px;
			width: 30px;
		}
 
		.closebutton:active {
			background-image: url(/static/img/deleteButtonPressed.png);
		}
 
		.edit {
			outline: none;
		}
 
		.timestamp {
			position: absolute;
			left: 0px;
			right: 0px;
			bottom: 0px;
			font-size: 9px;
			background-color: {{.STR_FILLER7}};
			color: white;
			border-top: 1px solid #a80;
			padding: 2px 4px;
			text-align: right;
		}
	</style>
		<script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	
		<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
		  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
		  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
		  <script src="/static/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/static/css/alertify.core.css" />
		<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
		<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
		<script type="text/javascript" src="/static/js/jquery.titlealert.js"></script>
		<!--script type="text/javascript" src="/static/js/floating-1.12.js"></script-->
	
	</head>
	<body>	
	  <!--a href="/stream?STR_FUNC=NEW_CHAN&UID={{.STR_FILLER8}}"><img src="/static/img/loading.gif" height=30 width=30 title="Click to refresh stream"></a>
		<a href="{{.STR_FILLER1}}" title="ULAPPH Google Plus" target="gcommunity"><img src="/static/img/icon-comm.png" height=30 width=30/></a>
		<a href="{{.STR_FILLER2}}" title="ULAPPH Facebook" target="fcommunity"><img src="/static/img/facebook-icon.png" height=30 width=30/></a>
		<a href="{{.STR_FILLER3}}" title="ULAPPH Twitter" target="twitter"><img src="/static/img/twitter-icon.png" height=30 width=30/></a>
		<a href="{{.STR_FILLER4}}" title="ULAPPH LinkedIn" target="linkedin"><img src="/static/img/linkedin-icon.png" height=30 width=30/></a>
		<a href="{{.STR_FILLER5}}" title="ULAPPH Youtube" target="ycommunity"><img src="/static/img/Youtube.png" height=30 width=30/></a-->
 
`
 
var ulocTemplateA = template.Must(template.New("ulocTemplateA").Parse(ulocTemplateDispA))
 
const ulocTemplateDispA = `
<!DOCTYPE html>
<html manifest="/cache?q=ulocA&f=" lang="en-US" class="no-js">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <title>Local Storage:www.ulapph.com - ULAPPH Cloud Desktop</title>
  <link rel="shortcut icon" href="/static/img/favicon.ico"/>
  <meta name="description" content="ULAPPH Cloud Desktop" />
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <link rel="stylesheet" href="/static/css/localStorage.css" />
  <script src="/static/js/localStorage.js"></script>
  <link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
</head>
<body>
  <div class="center">
  <a href="/uloc"><img src="/static/img/uloc.png" width=100 height=100></a>
    <h1>ULAPPH Local Storage</h1>
`
 
var ulocTemplateA2 = template.Must(template.New("ulocTemplateA2").Parse(ulocTemplateDispA2))
 
const ulocTemplateDispA2 = `
    <hr>
    <h3>[ <a href="/search">SEARCH</a> ] [ <a href="/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=50">SLIDES</a> ] [ <a href="/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=50">ARTICLES</a> ] [ <a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=50">MEDIA</a> ] [ <a href="/uloc?LS_FUNC=ulocX&f={{.}}">CLEAR APP CACHE</a> ]</h3>
  </div>
  <hr>
 
`
 
var ulocTemplateStorages = template.Must(template.New("ulocTemplateStorages").Parse(ulocTemplateStoragesB))
 
const ulocTemplateStoragesB = `
    <hr>
    <h3 id="File1"></h3>
    <div class="toggle-button">
        <button></button>
    </div>
    <hr>
    <h3 id="File2"></h3>
    <div class="toggle-button-2">
        <button></button>
    </div>
    <hr>
    <h3 id="File3"></h3>
    <div class="toggle-button-3">
        <button></button>
    </div>
    <hr>
    <h3 id="File4"></h3>
    <div class="toggle-button-4">
        <button></button>
    </div>
    <hr>
    <h3 id="File5"></h3>
    <div class="toggle-button-5">
        <button></button>
    </div>
    <hr>
    <h3 id="File6"></h3>
    <div class="toggle-button-6">
        <button></button>
    </div>
    <hr>
    <h3 id="File7"></h3>
    <div class="toggle-button-7">
        <button></button>
    </div>
    <hr>
    <h3 id="File8"></h3>
    <div class="toggle-button-8">
        <button></button>
    </div>
    <hr>
    <h3 id="File9"></h3>
    <div class="toggle-button-9">
        <button></button>
    </div>
    <hr>
    <h3 id="File10"></h3>
    <div class="toggle-button-10">
        <button></button>
    </div>
    <hr>
    <h3 id="File11"></h3>
    <div class="toggle-button-11">
        <button></button>
    </div>
    <hr>
    <h3 id="File12"></h3>
    <div class="toggle-button-12">
        <button></button>
    </div>
    <hr>
    <h3 id="File13"></h3>
    <div class="toggle-button-13">
        <button></button>
    </div>
    <hr>
    <h3 id="File14"></h3>
    <div class="toggle-button-14">
        <button></button>
    </div>
    <hr>
    <h3 id="File15"></h3>
    <div class="toggle-button-15">
        <button></button>
    </div>
    <hr>
    <h3 id="File16"></h3>
    <div class="toggle-button-16">
        <button></button>
    </div>
    <hr>
    <h3 id="File17"></h3>
    <div class="toggle-button-17">
        <button></button>
    </div>
    <hr>
    <h3 id="File18"></h3>
    <div class="toggle-button-18">
        <button></button>
    </div>
    <hr>
    <h3 id="File19"></h3>
    <div class="toggle-button-19">
        <button></button>
    </div>
    <hr>
    <h3 id="File20"></h3>
    <div class="toggle-button-20">
        <button></button>
    </div>
    <hr>
    <h3 id="File21"></h3>
    <div class="toggle-button-21">
        <button></button>
    </div>
    <hr>
    <h3 id="File22"></h3>
    <div class="toggle-button-22">
        <button></button>
    </div>
    <hr>
    <h3 id="File23"></h3>
    <div class="toggle-button-23">
        <button></button>
    </div>
    <hr>
    <h3 id="File24"></h3>
    <div class="toggle-button-24">
        <button></button>
    </div>
    <hr>
    <h3 id="File25"></h3>
    <div class="toggle-button-25">
        <button></button>
    </div>
    <hr>
    <h3 id="File26"></h3>
    <div class="toggle-button-26">
        <button></button>
    </div>
    <hr>
    <h3 id="File27"></h3>
    <div class="toggle-button-27">
        <button></button>
    </div>
    <hr>
    <h3 id="File28"></h3>
    <div class="toggle-button-28">
        <button></button>
    </div>
    <hr>
    <h3 id="File29"></h3>
    <div class="toggle-button-29">
        <button></button>
    </div>
    <hr>
    <h3 id="File30"></h3>
    <div class="toggle-button-30">
        <button></button>
    </div>
    <hr>
    <h3 id="File31"></h3>
    <div class="toggle-button-31">
        <button></button>
    </div>
    <hr>
    <h3 id="File32"></h3>
    <div class="toggle-button-32">
        <button></button>
    </div>
    <hr>
    <h3 id="File33"></h3>
    <div class="toggle-button-33">
        <button></button>
    </div>
    <hr>
    <h3 id="File34"></h3>
    <div class="toggle-button-34">
        <button></button>
    </div>
    <hr>
    <h3 id="File35"></h3>
    <div class="toggle-button-35">
        <button></button>
    </div>
    <hr>
    <h3 id="File36"></h3>
    <div class="toggle-button-36">
        <button></button>
    </div>
    <hr>
    <h3 id="File37"></h3>
    <div class="toggle-button-37">
        <button></button>
    </div>
    <hr>
    <h3 id="File38"></h3>
    <div class="toggle-button-38">
        <button></button>
    </div>
    <hr>
    <h3 id="File39"></h3>
    <div class="toggle-button-39">
        <button></button>
    </div>
    <hr>
    <h3 id="File40"></h3>
    <div class="toggle-button-40">
        <button></button>
    </div>
    <hr>
    <h3 id="File41"></h3>
    <div class="toggle-button-41">
        <button></button>
    </div>
    <hr>
    <h3 id="File42"></h3>
    <div class="toggle-button-42">
        <button></button>
    </div>
    <hr>
    <h3 id="File43"></h3>
    <div class="toggle-button-43">
        <button></button>
    </div>
    <hr>
    <h3 id="File44"></h3>
    <div class="toggle-button-44">
        <button></button>
    </div>
    <hr>
    <h3 id="File45"></h3>
    <div class="toggle-button-45">
        <button></button>
    </div>
    <hr>
    <h3 id="File46"></h3>
    <div class="toggle-button-46">
        <button></button>
    </div>
    <hr>
    <h3 id="File47"></h3>
    <div class="toggle-button-47">
        <button></button>
    </div>
    <hr>
    <h3 id="File48"></h3>
    <div class="toggle-button-48">
        <button></button>
    </div>
    <hr>
    <h3 id="File49"></h3>
    <div class="toggle-button-49">
        <button></button>
    </div>
    <hr>
    <h3 id="File50"></h3>
    <div class="toggle-button-50">
        <button></button>
    </div>
    <hr>
    <h3 id="FileAll">CLEAR LOCAL STORAGE</h3>
    <div class="toggle-button-all">
        <button></button>
    </div>
`
 
var ulocTemplateB = template.Must(template.New("ulocTemplateB").Parse(ulocTemplateDispB))
 
const ulocTemplateDispB = `
<!DOCTYPE html>
<html manifest="/cache?q=ulocB&f=" lang="en-US" class="no-js">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <title>Local Storage::www.ulapph.com - ULAPPH Cloud Desktop</title>
  <meta name="description" content="ULAPPH Cloud Desktop" />
  <link rel="shortcut icon" href="/static/img/favicon.ico"/>
  <link rel="stylesheet" href="/static/css/localStorage.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
  <script src="/static/js/localStorage.js"></script>
</head>
<body>
      <a href="/uloc"><img src="/static/img/uloc.png" width=100 height=100></a>
		<div class="container">
		  <button type="button" class="btn btn-info btn-lg" id="btn2">Copy to Browser Storage</button> {{.HTM_FILLER1}}
		</div>
	  <h3>Content to copy:</h3><br>
		<textarea id="myTextArea" cols="150" rows="15">{{.STR_FILLER1}}</textarea>
		<h3>Title:</h3>
		<textarea id="myTextAreaTitle" cols="150" rows="2">{{.STR_FILLER2}}</textarea>
		<input type="hidden" id="myFormat" value="{{.STR_FILLER4}}">
		<input type="hidden" id="myIcon" value="{{.STR_FILLER5}}">
		<br>
		<img src={{.STR_FILLER5}} height=100 width=100>	 		
		<br /><br /><b>LOCAL STORAGE STATUS:</b><br />
		  <div class="center">	
`
 
var ulocTemplateB2 = template.Must(template.New("ulocTemplateB2").Parse(ulocTemplateDispB2))
 
const ulocTemplateDispB2 = `
		  <hr>
			<h3>[ <a href="/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT">SLIDES</a> ] [ <a href="/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT">ARTICLES</a> ] [ <a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT">MEDIA</a> ] [ <a href="/uloc?LS_FUNC=ulocX&f={{.STR_FILLER3}}">CLEAR APP CACHE</a> ]</h3>
		  </div>
 
		<script type='text/javascript'>//<![CDATA[
			$('#btn2').click(function() {
				saveToFreeStorage();
			});
			
			$('#btn3').click(function() {
				saveToDiskStorage();
			});
			
		//]]>
		</script>
		
`
 
// encode is our main function for
// base64 encoding a passed []byte
func encode(bin []byte) []byte {
	e64 := base64.StdEncoding
 
	maxEncLen := e64.EncodedLen(len(bin))
	encBuf := make([]byte, maxEncLen)
 
	e64.Encode(encBuf, bin)
	return encBuf
}
 
// format is an abstraction of the mime switch to create the
// acceptable base64 string needed for browsers.
func format(enc []byte, mime string) string {
	switch mime {
	case "image/gif", "image/jpeg", "image/pjpeg", "image/png", "image/tiff":
		return fmt.Sprintf("data:%s;base64,%s", mime, enc)
	case "text/plain":
		return fmt.Sprintf("data:%s;base64,%s", mime, enc)
	default:
	}
 
	return fmt.Sprintf("data:image/png;base64,%s", enc)
}

//handles the recaptcha processing 
func ulapphCaptcha(w http.ResponseWriter, r *http.Request) {
	CC_FUNC := r.FormValue("CC_FUNC")
	switch CC_FUNC {
		case "DISP3":
			REDIR := "GUEST"
			sitekey := SYS_RECAPTCHA_KEY		
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: REDIR,
				STR_FILLER2: sitekey,
			}
			if err := formTemplate3.Execute(w, &TEMPDATA); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
			}
		case "DISP4":
			REDIR := "PCHAT"
			PCH := r.FormValue("pubchan")
			sitekey := SYS_RECAPTCHA_KEY		
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: REDIR,
				STR_FILLER2: sitekey,
				STR_FILLER3: PCH,
			}
			if err := formTemplate3.Execute(w, &TEMPDATA); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
			}
		case "DISP2":
			REDIR := "CHAT"
			INV := r.FormValue("INVITE")
			RID := r.FormValue("RID")
			logLink := r.FormValue("logLink")
			intent := r.FormValue("intent")
			sitekey := SYS_RECAPTCHA_KEY
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: REDIR,
				STR_FILLER2: sitekey,
				STR_FILLER3: INV,
				STR_FILLER4: RID,
				STR_FILLER5: logLink,
				STR_FILLER6: intent,
			}
			if err := formTemplate2.Execute(w, &TEMPDATA); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
			}
		case "DISP":
			//skip checking if logged in
			//https://edwin-daen-vinas.appspot.com/social?SO_FUNC=SO_VIEW&SID=TDSSLIDE-578&TITLE=Oracle%20FMW%20Administration%20Training%20-%20Post-Assessment&cc_key=6LcvMwoUAAAAAPsrpukBmQ5vocDI7y1K7-iSTRCM
			REDIR := r.FormValue("R")
			SID := r.FormValue("SID")
			SO_FUNC := r.FormValue("SO_FUNC")
			TITLE := r.FormValue("TITLE")
			content := r.FormValue("content")
			REC_TYP := r.FormValue("REC_TYP")

			if isLoggedIn(w,r) == true {
				redURL := fmt.Sprintf("/social?SO_FUNC=SO_VIEW&SID=%v&TITLE=%v&cc_key=%v", SID, TITLE, SYS_RECAPTCHA_KEY)
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			} else {
			sitekey := SYS_RECAPTCHA_KEY		
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: REDIR,
				STR_FILLER2: sitekey,
				STR_FILLER3: SID,
				STR_FILLER4: SO_FUNC,
				STR_FILLER5: TITLE,
				STR_FILLER6: content,
				STR_FILLER7: REC_TYP,
			}
			if err := formTemplate.Execute(w, &TEMPDATA); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
			}
			}
		case "CHECK":
			isValid, err := VerifyCaptcha(w,r)
			if isValid {
				RedirCaptcha(w,r)
			} else {
				fmt.Fprintf(w, "Invalid captcha! ERROR: %v", err)
			}
	}
	return
}

//handles redirection of recaptcha 
func RedirCaptcha(w http.ResponseWriter, r *http.Request) {
	REDIR := r.FormValue("R")
	switch REDIR {
		case "GUEST":
			CC_KEY := r.FormValue("CC_KEY")	
			redURL := fmt.Sprintf("/?q=login&LFUNC=guest&TARGET_URL=/login&cc_key=%v", CC_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
		case "PCHAT":
			CC_KEY := r.FormValue("CC_KEY")	
			PCH := r.FormValue("pubchan")	
			redURL := fmt.Sprintf("/chat?cc_key=%v&pubchan=%v", CC_KEY, PCH)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
		case "SOCIAL":
			SID := r.FormValue("SID")
			if SID == "" {
				SID = "ULAPPH_GENERAL"
			}
			SO_FUNC := r.FormValue("SO_FUNC")
			TITLE := r.FormValue("TITLE")
			content := r.FormValue("content")
			REC_TYP := r.FormValue("REC_TYP")
			CC_KEY := r.FormValue("CC_KEY")	
 
			redURL := fmt.Sprintf("/social?SO_FUNC=%v&SID=%v&TITLE=%v&REC_TYP=%v&content=%v&cc_key=%v", SO_FUNC, SID, TITLE, REC_TYP, content, CC_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
		//D0040
		case "COMMENT":
			SID := r.FormValue("SID")
			TITLE := r.FormValue("TITLE")
			CC_KEY := r.FormValue("CC_KEY")	

			redURL := fmt.Sprintf("%vsocial?SO_FUNC=SO_VIEW&SID=%v&TITLE=%v&cc_key=%v", getSchemeUrl(w,r), SID, TITLE, CC_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
		case "CHAT":
			INV := r.FormValue("INVITE")
			RID := r.FormValue("RID")
			CC_KEY := r.FormValue("CC_KEY")	
			logLink := r.FormValue("logLink")	
			redURL := fmt.Sprintf("/chat?CHAT_FUNC=newChatRoom&INVITE=%v&RID=%v&cc_key=%v&logLink=%v", INV, RID, CC_KEY, logLink)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
	}
	
}
 
//handles recaptch verification
func VerifyCaptcha(w http.ResponseWriter, r *http.Request) (valid bool, err error) {
	//c := appengine.NewContext(r)
	response := r.FormValue("g-recaptcha-response")
	//client := urlfetch.Client(c)
	resp, err := http.PostForm(postURL,
		url.Values{"secret": {SYS_RECAPTCHA_SECRET}, "response": {response}})
	if err != nil {
		return false, err
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return false, err
	}
	gr := new(googleResponse)
	err = json.Unmarshal(body, gr)
	if err != nil {
		return false, err
	}
	if !gr.Success {
		return false, err
	}
	return gr.Success, err
}
 
//stream alerts, notifications, events
func ulapphStream(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()

	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	
	checkReferrer(w,r)
	_, uid := checkSession(w,r)
    //D0086
    datastoreClient := createClientDS()
	STR_FUNC := r.FormValue("STR_FUNC")
	mode := r.FormValue("mode")
	token := ""
	
	switch STR_FUNC {
			
		case "DEL_CHAN":
			//update status	
			UID := r.FormValue("UID")
			if UID != uid {
				fmt.Fprintf(w, "Invalid user.")
				return
			}
			if UID != "" {
				uid = UID
			}
			//delete old channel here
			datastoreClient.Delete(c, getKeyChannel(c,uid))
			uReferer := r.Referer()
			http.Redirect(w, r, uReferer, http.StatusFound)
			return
 
		case "DEL_RES_STREAM":
			UID := r.FormValue("UID")
			if UID != uid {
				fmt.Fprintf(w, "Invalid user.")
				return
			}
			//delete old channel here
			datastoreClient.Delete(c, getKeyChannel(c,UID))

			tokChan := make(chan Token)
			tokChanDone := make(chan bool)
			go createTokenChan(w,r,tokChan,tokChanDone,UID,"")
			tok := <-tokChan
			<-tokChanDone
			token := tok.Token
				
			MOTD := fmt.Sprintf("<img src=\"/static/img/stream.png\" width=50 height=50> %v", "You are now connected!")
			sendChannelMessage(w,r,UID, MOTD)
				
			  w.Write([]byte(token))
			  return
			
	}
	
	if mode == "guest" || uid == "" {
			redURL := "https://www.ulapph.com/rag?f=slides&d=desktop0&n=1"
			http.Redirect(w, r, redURL, http.StatusFound)
			return
	}

	_ = validateAccess(w, r, "IS_VALID_USER",r.Referer())
	switch STR_FUNC {
		case "RUN_TOPICS":
			//D0065
			UID := ""
			if _, err := strconv.Atoi(r.FormValue("u")); err != nil {
				UID = uid
			} else {
				UID = fmt.Sprintf("%v---%v", uid, r.FormValue("u"))
			}
			refUwm := getRefUwm(w,r)
			UWM := ""
			//log.Printf("refUwm: %v", refUwm)
			if refUwm != "" {
				UWM = fmt.Sprintf("%v---%v", uid, refUwm)
			} else {
				UWM = uid 
			}

			switch r.FormValue("u") {
				case "-1":
					//forsale
					runTopicsHaveNeed(w,r,uid,"have")
					fmt.Fprintf(w, "Topic search has been run.<br>")
					
				case "-2":
					//wantobuy
					runTopicsHaveNeed(w,r,uid,"need")
					fmt.Fprintf(w, "Topic search has been run.<br>")
				
				default:
					//topicsource := getTopicsSource(w,r,uid,r.FormValue("u"))
					//if topicsource != "" {
                        time.AfterFunc(5*time.Second, func() { 
						    laterRunStream(c, UID, UWM)
                        })
                        STRMSG := fmt.Sprintf("<img src=\"/static/img/cron.png\" width=45 height=45>Your run request has been queued.")
						//when run request
						sendChannelMessage(w,r,UID, STRMSG)
						fmt.Fprintf(w, "Request to run topic search has been queued.<br>")		
					//} else {
					//	fmt.Fprintf(w, "No topics found!<br>")
					//}				
				
			}
			return
		case "REQ_RUN":
			UID := r.FormValue("UID")
			k := strings.Index(UID, "---")
			if UID != "" && k != -1 {
 
				time.AfterFunc(5*time.Second, func() { 
                    laterRunStream(c, UID, "")
                })
                STRMSG := fmt.Sprintf("<img src=\"/static/img/cron.png\" width=45 height=45>Your run request has been queued.")
				//when run request
				sendChannelMessage(w,r,UID, STRMSG)
				fmt.Fprintf(w, "Request to run topic search has been queued.<br>")
			} else {
                //wants/needs
                time.AfterFunc(5*time.Second, func() {
				    laterRunAPIs(c, uid)
                })
                //urlfetch list
                time.AfterFunc(5*time.Second, func() {
                    laterUrlFetchInd(c, "URL_FETCH_NOTIFS_IND", uid, "NOW")
                })
				//fmt.Fprintf(w, "Request to run Query Plus and Query Web has been queued.<br>")
				fmt.Fprintf(w, "Request to run topic search has been queued.<br>")
				fmt.Fprintf(w, "URL Fetch job has been queued.<br>")
				STRMSG := fmt.Sprintf("<img src=\"/static/img/cron.png\" width=45 height=45>Your run request has been queued.")
				//sendEvent(w,r, uid, STRMSG)	
				//when run request
				sendChannelMessage(w,r,uid, STRMSG)	
			}
			return
 			
		case "NEW_CHAN":
			UID := r.FormValue("UID")
			//delete old channel here
			if UID != "" {
				datastoreClient.Delete(c, getKeyChannel(c,UID))
			} else {
				datastoreClient.Delete(c, getKeyChannel(c,uid))
			}
			http.Redirect(w, r, "/stream?UID="+UID, http.StatusFound)	
			return
			
		default:
			//update status
			UID := r.FormValue("UID")
			refUwm := ""
			if UID == "" {
				refUwm = getRefUwm(w,r)
			} else {
				SPL := strings.Split(UID, "---")
				if len(SPL) > 0 {
					refUwm = SPL[1]
				}
			}
 
			aUser := ""
			if refUwm == "" {
				aUser = uid
			} else {
				aUser = fmt.Sprintf("%v---%v", uid, refUwm)
			}
			
			if uid == "" {
				uid, token = createToken(w,r,"","")
			} else {
				_, token = createToken(w,r,aUser,"")
			}
			
			TEMPDATA2 := TEMPSTRUCT2{
				STR_FILLER1: SOCIAL_LINK_PLUS,
				STR_FILLER2: SOCIAL_LINK_FB,
				STR_FILLER3: SOCIAL_LINK_TWITTER,
				STR_FILLER4: SOCIAL_LINK_LINKEDIN,
				STR_FILLER5: SOCIAL_LINK_YOUTUBE,
				STR_FILLER6: getStartColor(w,r),
				STR_FILLER7: getActiveColor(w,r),
				STR_FILLER8: aUser,
			}
			if err := streamTemplateA1.Execute(w, &TEMPDATA2); err != nil {
			  panic(err)
			}
			
			uag := r.UserAgent()
			ua := user_agent.New(uag)	
			nameb, _ := ua.Browser()
			isNotesOK := fmt.Sprintf("%v", isNotesCapable[nameb])
			STR_TONE := fmt.Sprintf("%v%v", getSchemeUrl(w,r), "/static/audio/water-drop.ogg")
			dispAds := fmt.Sprintf("%v", SYS_DISP_ADS_RIGHT)
			soundPrefChan := make(chan string)
			soundPrefChanDone := make(chan bool)
			go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
			soundPref := <-soundPrefChan
			<-soundPrefChanDone
			//firebase
			
			jwtChan := make(chan string)
			jwtChanDone := make(chan bool)
			go procAuthFirebase(w,r,jwtChan,jwtChanDone,uid,token)
			jwToken := <-jwtChan
			<-jwtChanDone
			
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: "stream",
				STR_FILLER2: aUser,
				STR_FILLER3: token,
				STR_FILLER4: getSchemeUrl(w,r),
				STR_FILLER5: "temp",
				STR_FILLER6: STR_TONE,
				STR_FILLER7: isNotesOK,
				STR_FILLER8: dispAds,
				STR_FILLER9: soundPref,
				//firebase
				STR_FILLER10: jwToken,
				STR_FILLER11: SYS_SERVER_NAME,
				STR_FILLER12: getSitesServerName(w,r),
				
			}
						
			if err := streamTemplateA2.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			//display links to auto-slides
			if err := streamTemplateA3.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			if err := outputFooterTemplate.Execute(w, ""); err != nil {
				 panic(err)
			}		
			//send motd
			_, RAN_MSG, _ := getMOTD(w, r, uid, "desktop0")
			if RAN_MSG != "" {			
				MOTD := fmt.Sprintf("<img src=\"/static/img/motd.png\"> %v", RAN_MSG)
				sendChannelMessage(w,r,uid, MOTD)
			}
			return
	}
}
 
//proc auth firebase to get the jwt token
func procAuthFirebase(w http.ResponseWriter, r *http.Request, thisChan chan string, chanDone chan bool, uid, token string) {
	
	if FL_FIREBASE_ENABLE == false {
		//return jwToken
		thisChan <- "1234567890-dummy-firebase-token"
		chanDone <- true
		return
	}
	
	//read firebase json
	readSecret(w,r)
 
	fuser := &User{
		Email:    uid,
		Password: token,
	}
 
	tok := createFirebaseToken(r,fuser)
	jwToken, err := tok.SignedString(PRIVATE_KEY)
	if err != nil {
 
		panic(err)
	}
	
	//return jwToken
	thisChan <- jwToken
	chanDone <- true
}
			
//read secret for the firebase json configurations
func readSecret(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	rdr := strings.NewReader(FIREBASE_SERVER_JSON)
	sv := &struct {
		Email      string `json:"client_email"`
		PrivateKey string `json:"private_key"`
	}{}

	if err := json.NewDecoder(rdr).Decode(sv); err != nil {
		////log.Panicf("json.NewDecoder() ERROR: %v", err)
		panic(err)
	}
	SERVICE_ACCOUNT_EMAIL = sv.Email
	if key, err := jwt.ParseRSAPrivateKeyFromPEM([]byte(sv.PrivateKey)); err != nil {
		panic(err)
	} else {
		PRIVATE_KEY = key
	}
}

//creates a JWT token for firebase 
func createFirebaseToken(r *http.Request, u *User) *jwt.Token {
	tok := jwt.New(jwt.SigningMethodRS256)
	cl := tok.Claims.(jwt.MapClaims)
	cl["iss"] = SERVICE_ACCOUNT_EMAIL
	cl["sub"] = SERVICE_ACCOUNT_EMAIL
	cl["aud"] = "https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit"
	now := time.Now().Unix()
	cl["iat"] = int(now)
	cl["exp"] = int(now + (60 * 60))
	cl["uid"] = fmt.Sprintf("%v", r.Header.Get("X-Goog-Authenticated-User-Email"))
	cl["claims"] = map[string]interface{}{
		"premium_account": 1,
	}
	return tok
}
 
//handles the /store url designed to handle store payments
func ulapphStore(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}	
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	
	STO_FUNC := r.FormValue("STO_FUNC")
	PRD_ID := r.FormValue("PRD_ID")
	PRD_DESC := r.FormValue("PRD_DESC")
	PRD_AMT := r.FormValue("PRD_AMT")
	
	switch {
		case STO_FUNC == "paypal-cancel":
			msgDtl := fmt.Sprintf("<img src=\"/static/img/paypal.png\"><img src=\"/static/img/warning.png\"><br>[U00168] PAYPAL CANCELLED: Paypal payment was cancelled. Product: %v Description: %v Amount: %v %v. (*ULAPPH_PAYPAL)", PRD_ID, PRD_DESC, PRD_AMT, getAccessString(w,r,""))
			//when paypal
			sendChannelMessage(w,r,ADMMAIL, msgDtl)
			updateUserActiveData(w, r, c, "", "paypal-cancel")
			
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := paypalCancelledTemplate.Execute(w, ""); err != nil {
			  panic(err)
			}  			
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			
		case STO_FUNC == "paypal-success":
			msgDtl := fmt.Sprintf("<img src=\"/static/img/paypal.png\"><img src=\"/static/img/success.png\"><br>[U00169] PAYPAL SUCCESS : Paypal payment was successful. Product: %v Description: %v Amount: %v %v. (*ULAPPH_PAYPAL)", PRD_ID, PRD_DESC, PRD_AMT, getAccessString(w,r,""))
			msgSms := fmt.Sprintf("[PAYPAL] Payment OK. P:%v D:%v Amount: %v %v. (*ULAPPH_PAYPAL)", PRD_ID, PRD_DESC, PRD_AMT, getAccessString(w,r,""))
			//when paypal
			sendChannelMessage(w,r,ADMMAIL, msgDtl)
			//sendsms
			time.AfterFunc(5*time.Second, func() { 
                laterSendSMS(c, SMS_CONTACT_NBR, msgSms)
            })
            //sendmail
            time.AfterFunc(5*time.Second, func() {
			    laterNotifyGB(c, "autoNotifyPeopleGB", FDBKMAIL, msgDtl, ADMMAIL)
			    laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, msgDtl, ADMMAIL)
            })
			updateUserActiveData(w, r, c, "", "paypal-success")
			
			//D0044
			//If this for installer purchase
			//log.Printf("msgDtl: %v", msgDtl)
			switch {
				
				case PRD_ID == "UCWP3-A" &&
					 PRD_DESC == "UCWP3-A ULAPPH_Cloud_Website_Plan_3":
					redURL := fmt.Sprintf("https://ulapph-installer.appspot.com/compile?COM_FUN=INSTALL&FL_PAID=Y")
					http.Redirect(w, r, redURL, http.StatusFound)
					return	
					
				default:
					if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
					  panic(err)
					}
					if err := paypalPaidTemplate.Execute(w, ""); err != nil {
					  panic(err)
					}  			
					if err := htmlFooterModal.Execute(w, ""); err != nil {
					  panic(err)
					}
			}
			return
			
		case STO_FUNC == "paypal-premium-success":
			//Premium content
			msgDtl := fmt.Sprintf("<img src=\"/static/img/paypal.png\"><img src=\"/static/img/success.png\"><br>[U00191] PAYPAL SUCCESS : Paypal payment was successful. Product: %v Description: %v Amount: %v %v. (*ULAPPH_PAYPAL)", PRD_ID, PRD_DESC, PRD_AMT, getAccessString(w,r,""))
			msgSms := fmt.Sprintf("[PAYPAL] Payment OK. P:%v D:%v Amount: %v %v. (*ULAPPH_PAYPAL)", PRD_ID, PRD_DESC, PRD_AMT, getAccessString(w,r,""))
			//when paypal
			sendChannelMessage(w,r,ADMMAIL, msgDtl)
            //sendsms
            time.AfterFunc(5*time.Second, func() { 
			    laterSendSMS(c, SMS_CONTACT_NBR, msgSms)
            })
            //sendmail
			time.AfterFunc(5*time.Second, func() {
			    laterNotifyGB(c, "autoNotifyPeopleGB", FDBKMAIL, msgDtl, ADMMAIL)
			    laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, msgDtl, ADMMAIL)
            })
			updateUserActiveData(w, r, c, "", "paypal-premium-success")
			
			item_number := r.FormValue("item_number")
			SID := PRD_ID
			_, uid := checkSession(w,r)			
			registerAccessCode(w,r,uid,SID,item_number)
			return			
			
		case STO_FUNC == "Premium":
			//Premium content
			SID := r.FormValue("SID")
			//make sure content is really premium
			SPL := strings.Split(SID,"-")
			TARGET := SPL[0]
			DOC_ID := "0"
			if len(SPL) > 1 {
				DOC_ID = SPL[1]
			}
			docID := str2int(DOC_ID)
			DOC_STAT := ""
			FL_SHARED := ""
			TITLE := ""
			BLOB_KEY := ""
			AUTHOR := ""
			switch TARGET {
				case "TDSSLIDE":
					BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, TITLE, _, _, _, _  = getTDSSLIDEBlobKey(w, r, docID)
				case "TDSARTL":
					BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, TITLE, _, _, _ = getTDSARTLBlobKey(w, r, docID)
				case "TDSMEDIA":
					BLOB_KEY, _, TITLE, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
			}
			if DOC_STAT != "Premium" || FL_SHARED != "Y" {
				fmt.Fprintf(w, "[U00192] ERROR: You have accessed a non-Premium or unshared content! SID: %v<br>", SID)
				return
			}
			finalCost := ""
			premCost := getBlobTextPremiumCost(w,r,BLOB_KEY)
			prevLink := getBlobTextPremiumPreview(w,r,BLOB_KEY)
			if premCost != "error" && premCost != "" {
				premCost := strings.Replace(premCost, ",", "", -1)
				finalCost = premCost
			}
			if finalCost == "" {
				finalCost = PAYPAL_PREMIUM_COST
			}
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: SID,
				STR_FILLER2: PAYPAL_MERCHANT_ID,
				STR_FILLER3: PAYPAL_CURRENCY,
				STR_FILLER4: finalCost,
				STR_FILLER5: randSeq2(36),
				STR_FILLER6: getSchemeUrl(w,r),
				STR_FILLER7: TITLE,
				STR_FILLER8: AUTHOR,
				STR_FILLER9: prevLink,
			}
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := paypalPremiumContent.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}  			
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			
		default:
			fmt.Fprintf(w, "[U00170] ERROR: Invalid transaction code: %v<br>", STO_FUNC)
	}
}

//registers an access code for the given content 
func registerAccessCode(w http.ResponseWriter, r *http.Request, uid, SID, accessCode string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	if SID != "" {
			SPL := strings.Split(SID,"-")
			TARGET := SPL[0]
			DOC_ID2 := SPL[1]
 
			switch TARGET {
				case "TDSSLIDE":
 
					DOC_ID := str2int(DOC_ID2)
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSSLIDE", dsKey, nil)
					q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
					//log.Panicf("[S0103]")
                    slide := make([]TDSSLIDE, 0, 1)
                    //log.Printf("datastoreClient.Get()  [19246]")
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						panic(err)
					  }
					
					for _, p := range slide{
						//append
						var buf bytes.Buffer
						scanner := bufio.NewScanner(strings.NewReader(p.SHARED_TO))
						for scanner.Scan() {
							buf.WriteString(fmt.Sprintf("%v\n", scanner.Text()))
						}
						buf.WriteString(fmt.Sprintf("%v\n", accessCode))
						p.SHARED_TO = buf.String()
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [19263]")
						//log.Panicf("[S0104]")
						if err != nil {
							panic(err)
						
						}
						//update cached details
						TDSSLIDE_Cacher(w,r,uid,p.DOC_ID,p.BLOB_URL,p.DOC_STAT,p.FL_SHARED,p.AUTHOR,p.FL_COUNTRY_SPECIFIC,p.TITLE,p.TAGS,p.SHARED_TO,p.MUSIC_ID, p.GET_NEXT)
							
						
						//notify admin
						reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&DOC_ID=%v&SID=TDSSLIDE-%v&auth=p&passcode=%v", p.DOC_ID, p.DOC_ID,accessCode)
						msgDtl3 := fmt.Sprintf("A customer has successfully paid and provided access code to slide <a href=\"%v\">%v<img src=\"%v\" with=100 height=60></a> in %v %v.", reqStr, p.TITLE, p.TAGS, p.CATEGORY, reqStr)
						time.AfterFunc(5*time.Second, func() {
                            laterNotifyGB(c, "autoNotifyPeopleGB", FDBKMAIL, msgDtl3, ADMMAIL)
                        })	
						reqStr = fmt.Sprintf("/social?SO_FUNC=CHK_SHR&SID=TDSSLIDE-%v&auth=p&passcode=%v", p.DOC_ID,accessCode)
						fmt.Fprintf(w, "Thank you very much!<br>Here is your access code for %v:<br><h3>%v</h3><br><br><a href=\"%v\" target=\"premium-%v\">Access Now!</a>", SID, accessCode, reqStr, SID)
						//return
						break
					}
				
				case "TDSARTL":
					DOC_ID := str2int(DOC_ID2)
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSARTL", dsKey, nil)
					q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
					//log.Panicf("[S0105]")
                    article := make([]TDSARTL, 0, 1)
                    //log.Printf("datastoreClient.Get()  [19292]")
					if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
						panic(err)
					  }
					
					for _, p := range article{
						//append
						var buf bytes.Buffer
						scanner := bufio.NewScanner(strings.NewReader(p.SHARED_TO))
						for scanner.Scan() {
							buf.WriteString(fmt.Sprintf("%v\n", scanner.Text()))
						}
						buf.WriteString(fmt.Sprintf("%v\n", accessCode))
						p.SHARED_TO = buf.String()
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSARTL", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [19309]")
						//log.Panicf("[S0106]")
						if err != nil {
							panic(err)
						
						}
						//update cached details
						TDSARTL_Cacher(w,r,uid,p.DOC_ID, p.BLOB_URL, p.DOC_STAT, p.FL_SHARED, p.AUTHOR, p.FL_COUNTRY_SPECIFIC, p.TITLE, p.TAGS, p.SHARED_TO, p.MUSIC_ID)
						
						//notify admin
						reqStr := fmt.Sprintf("/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&auth=p&passcode=%v&MUSIC_ID=%v", p.DOC_ID, p.DOC_ID,accessCode, p.MUSIC_ID)
						msgDtl3 := fmt.Sprintf("A customer has successfully paid and provided access code to article <a href=\"%v\">%v<img src=\"%v\" with=100 height=60></a> in %v %v.", reqStr, p.TITLE, p.TAGS, p.CATEGORY, reqStr)
						time.AfterFunc(5*time.Second, func() {
                            laterNotifyGB(c, "autoNotifyPeopleGB", FDBKMAIL, msgDtl3, ADMMAIL)
                        })
						reqStr = fmt.Sprintf("/social?SO_FUNC=CHK_SHR&SID=TDSARTL-%v&auth=p&passcode=%v", p.DOC_ID,accessCode)
						fmt.Fprintf(w, "Thank you very much!<br>Here is your access code for %v:<br><h3>%v</h3><br><br><a href=\"%v\" target=\"premium-%v\">Access Now!</a>", SID, accessCode, reqStr, SID)
						//return
						break
					}
 
				case "TDSMEDIA":
					MEDIA_ID2 := r.FormValue("MEDIA_ID")
					MEDIA_ID := str2int(MEDIA_ID2)
						
						
					dsKey := fmt.Sprintf("%d", MEDIA_ID)
					key := datastore.NameKey("TDSMEDIA", dsKey, nil)
					q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
					//log.Panicf("[S0107]")
                    media := make([]TDSMEDIA, 0, 1)
                    //log.Printf("datastoreClient.Get()  [19340]")
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					  }
					
					for _, p := range media{
						var buf bytes.Buffer
						scanner := bufio.NewScanner(strings.NewReader(p.SHARED_TO))
						for scanner.Scan() {
							buf.WriteString(fmt.Sprintf("%v\n", scanner.Text()))
						}
						buf.WriteString(fmt.Sprintf("%v\n", accessCode))
						p.SHARED_TO = buf.String()
						
						thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
						key := datastore.NameKey("TDSMEDIA", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [19357]")
						//log.Panicf("[S0108]")
						if err != nil {
							 panic(err)
						
						}		
 
						//clear cache
						cKey := fmt.Sprintf("TDSMEDIA_MEDID_CACHE_%v", p.MEDIA_ID)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						reqStr := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d&auth=p&passcode=%v", p.MEDIA_ID,accessCode)
								
						reqStr = fmt.Sprintf("/social?SO_FUNC=CHK_SHR&SID=TDSMEDIA-%v&auth=p&passcode=%v", p.MEDIA_ID,accessCode)
						fmt.Fprintf(w, "Thank you very much!<br>Here is your access code for %v:<br><h3>%v</h3><br><br><a href=\"%v\" target=\"premium-%v\">Access Now!</a>", SID, accessCode, reqStr, SID)
						//return
						break
					}
			}
	}
}

//handles directory listing for people, sites etc 
func ulapphDirectory(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	DIR_FUNC := r.FormValue("DIR_FUNC")
	//serve real people only
    FL_IS_BOT := isBot(w,r)
    //D0086
    datastoreClient := createClientDS()
	switch DIR_FUNC {
		case "cctv-recent":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			recent_num := r.FormValue("recent_num")
			_, uid := checkSession(w,r)
			if uid == "" {
				//do nothing
				w.WriteHeader(200)
				w.Write([]byte("invalid operation"))
				return
			} else {
				//D0074
				cKey := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", SYS_SERVER_NAME)
				//log.Printf("cKey: %v", cKey)
				cctv_list := getStrMemcacheValueByKey(w,r,cKey)
				if strings.TrimSpace(cctv_list) == "" {
					//cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", uid)
					cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", SYS_SERVER_NAME)
					cctv_list, _ = getTDSCNFG(w,r,0,cfgName)
					putStrToMemcacheWithoutExp(w,r,cKey,cctv_list)
				}
				//log.Printf("cctv_list: %v", cctv_list)
				//@888@desktop1700@888@desktopCat Javen@888@desktop999001
				SPL := strings.Split(cctv_list, "@888@")
				ctr := 0
				wstr := ""
				wLinks := "<ul>"
				wLinkso := "<ul>"
				for i:=0;i<len(SPL);i++ {
					if SPL[i] != "" {
						cKeyTS := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", SPL[i])
						catLastUpload := getStrMemcacheValueByKey(w,r,cKeyTS)
						//log.Printf("catLastUpload: %v", catLastUpload)
						timestamp := stmpHumanizeStr(catLastUpload)
						m := strings.Index(timestamp, "hour")
						ms := strings.Index(timestamp, "minutes")
						ss := strings.Index(timestamp, "seconds")
						md := strings.Index(timestamp, "days")
						if m != -1 || ms != -1 || ss != -1 || md != -1 {
							ctr++
							catDesc := deskNum2Name(w,r,uid,SPL[i])
							catNum := strings.Replace(SPL[i], "desktop", "", -1)
							//thisLink := fmt.Sprintf("/social?SO_FUNC=get-tot-media&cat=%v&catname=%v", SPL[i], catDesc)
							thisLink := fmt.Sprintf("/media?FUNC_CODE=VIEW_THUMBS&PROC=&RECENT=%v&cont_type=CCTV&cont_cat=%v&cat_name=%v&kword=%v", recent_num, SPL[i], catDesc, catNum)
							if ms != -1 {
								wLinks = fmt.Sprintf("%v<li><img src=\"/static/img/jswm-shide.png\" title=\"Appears Active\"><a href=\"%v\" target=\"%v\">[%v] %v (%v)</a></li>", wLinks, thisLink, SPL[i], SPL[i], catDesc, timestamp)
							} else if ss != -1 {
								wLinks = fmt.Sprintf("%v<li><img src=\"/static/img/jswm-shide.png\" title=\"Appears Active\"><a href=\"%v\" target=\"%v\">[%v] %v (%v)</a></li>", wLinks, thisLink, SPL[i], SPL[i], catDesc, timestamp)
							} else {
								wLinks = fmt.Sprintf("%v<li><img src=\"/static/img/jswm-shide2.png\" title=\"Inactive\"><a href=\"%v\" target=\"%v\">[%v] %v (%v)</a></li>", wLinks, thisLink, SPL[i], SPL[i], catDesc, timestamp)
							}
						} else {
							//cctv may be outdated
							wstr = fmt.Sprintf("%v<br>%v", wstr, SPL[i])
							catDesc := deskNum2Name(w,r,uid,SPL[i])
							catNum := strings.Replace(SPL[i], "desktop", "", -1)
							thisLink := fmt.Sprintf("/media?FUNC_CODE=VIEW_THUMBS&PROC=&RECENT=%v&cont_type=CCTV&cont_cat=%v&cat_name=%v&kword=%v", recent_num, SPL[i], catDesc, catNum)
							wLinkso = fmt.Sprintf("%v<li><img src=\"/static/img/jswm-shide2.png\" title=\"Appears Inactive\"><a href=\"%v\" target=\"%v\">[%v] %v (%v)</a></li>", wLinkso, thisLink, SPL[i], SPL[i], catDesc, timestamp)
						}
						//users online
						usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
						usersOnline_CACHE := getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
						//fuCtr := 0
						if usersOnline_CACHE != "" {
							wLinks = fmt.Sprintf("%v<ul>", wLinks)
							SPLB := strings.Split(usersOnline_CACHE,",")
							for j := 0; j < len(SPLB); j++ {
								if SPLB[j] != "" {
									catDesc := deskNum2Name(w,r,uid,SPL[i])
									catNum := strings.Replace(SPL[i], "desktop", "", -1)
									thisLink := fmt.Sprintf("/media?FUNC_CODE=VIEW_THUMBS&PROC=&RECENT=%v&cont_type=CCTV&cont_cat=%v&cat_name=%v&kword=%v&uid=%v", recent_num, SPL[i], catDesc, catNum, SPLB[j])
									//check if user camera is active
									cKeyTS2 := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v_%v", SPL[i], SPLB[j])
									catLastUpload2 := getStrMemcacheValueByKey(w,r,cKeyTS2)
									//log.Printf("catLastUpload2: %v", catLastUpload2)
									timestamp := stmpHumanizeStr(catLastUpload2)
									m := strings.Index(timestamp, "hour")
									ms := strings.Index(timestamp, "minute")
									ss := strings.Index(timestamp, "second")
									md := strings.Index(timestamp, "day")
									if m != -1 || ms != -1 || ss != -1 || md != -1 {
										if ms != -1 {
											//minutes ago
											wLinks = fmt.Sprintf("%v<li><img src=\"/static/img/jswm-shide.png\" title=\"Maybe Inactive\"><a href=\"%v\" target=\"%v\">[%v] [%v] %v (%v)</a></li>", wLinks, thisLink, SPL[i], SPLB[j], SPL[i], catDesc, timestamp)
										} else if ss != -1 {
											//seconds ago
											wLinks = fmt.Sprintf("%v<li><img src=\"/static/img/views-icon.png\" title=\"Appears Active\"><a href=\"%v\" target=\"%v\">[%v] [%v] %v (%v)</a></li>", wLinks, thisLink, SPL[i], SPLB[j], SPL[i], catDesc, timestamp)
										} else {
											wLinks = fmt.Sprintf("%v<li><img src=\"/static/img/jswm-shide2.png\" title=\"Appears Inactive\"><a href=\"%v\" target=\"%v\">[%v] [%v] %v (%v)</a></li>", wLinks, thisLink, SPL[i], SPLB[j], SPL[i], catDesc, timestamp)
										}
									} else {
										//hours ago
										//wLinks = fmt.Sprintf("%v<li><a href=\"%v\" target=\"%v\">[%v] %v</a></li>", wLinks, thisLink, SPL[i], SPL[i], catDesc)
										wLinks = fmt.Sprintf("%v<li><img src=\"/static/img/jswm-shide2.png\" title=\"Appears Inactive\"><a href=\"%v\" target=\"%v\">[%v] [%v] %v (%v)</a></li>", wLinks, thisLink, SPL[i], SPLB[j], SPL[i], catDesc, timestamp)
									}
								}
							}
							wLinks = fmt.Sprintf("%v</ul>", wLinks)
						}
						
						
					}
				}
				wLinks = fmt.Sprintf("%v</ul>", wLinks)
                wLinkso = fmt.Sprintf("%v</ul>", wLinkso)
				w.WriteHeader(200)
				if ctr > 0 {
					w.Write([]byte(fmt.Sprintf("<html>")))
					//cctv-recent
					w.Write([]byte(fmt.Sprintf("You may review the following %v cameras!<br>", ctr)))
					w.Write([]byte(wLinks))
					if wstr != "" {
						w.Write([]byte(fmt.Sprintf("<br>Warning: These are not updated: %v<br>", wstr)))
						w.Write([]byte(wLinkso))
					}
					w.Write([]byte(fmt.Sprintf("</html>")))
				} else {
					w.Write([]byte(fmt.Sprintf("No cameras available!")))
				}
			}
		//D0074
		case "cctv-call":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			_, uid := checkSession(w,r)
			if uid == "" {
				//do nothing
				w.WriteHeader(200)
				w.Write([]byte("invalid operation"))
				return
			} else {
				//D0074
				cKey := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", SYS_SERVER_NAME)
				//log.Printf("cKey: %v", cKey)
				cctv_list := getStrMemcacheValueByKey(w,r,cKey)
				if strings.TrimSpace(cctv_list) == "" {
					//cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", uid)
					cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", SYS_SERVER_NAME)
					cctv_list, _ = getTDSCNFG(w,r,0,cfgName)
					putStrToMemcacheWithoutExp(w,r,cKey,cctv_list)
				}
				//log.Printf("cctv_list: %v", cctv_list)
				SPL := strings.Split(cctv_list, "@888@")
				ctr := 0
				wstr := ""
				wLinks := "<ul>"
				wLinkso := "<ul>"
				for i:=0;i<len(SPL);i++ {
					if SPL[i] != "" {
						cKeyTS := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", SPL[i])
						catLastUpload := getStrMemcacheValueByKey(w,r,cKeyTS)
						//log.Printf("catLastUpload: %v", catLastUpload)
						timestamp := stmpHumanizeStr(catLastUpload)
						m := strings.Index(timestamp, "hour")
						if m != -1 {
							//cctv may be outdated
							wstr = fmt.Sprintf("%v<br>%v", wstr, SPL[i])
							catDesc := deskNum2Name(w,r,uid,SPL[i])
							thisLink := fmt.Sprintf("/social?SO_FUNC=webrtc-call&cat=%v&catname=%v", SPL[i], catDesc)
							wLinkso = fmt.Sprintf("%v<li><a href=\"%v\" target=\"%v\">%v</a></li>", wLinkso, thisLink, SPL[i], catDesc)
						} else {
							ctr++
							catDesc := deskNum2Name(w,r,uid,SPL[i])
							thisLink := fmt.Sprintf("/social?SO_FUNC=webrtc-call&cat=%v&catname=%v", SPL[i], catDesc)
							wLinks = fmt.Sprintf("%v<li><a href=\"%v\" target=\"%v\">%v</a></li>", wLinks, thisLink, SPL[i], catDesc)
						}
					}
				}
				wLinks = fmt.Sprintf("%v</ul>", wLinks)
				wLinkso = fmt.Sprintf("%v</ul>", wLinkso)
				w.WriteHeader(200)
				if ctr > 0 {
					w.Write([]byte(fmt.Sprintf("You may call the following %v cameras!<br>", ctr)))
					w.Write([]byte(wLinks))
					if wstr != "" {
						w.Write([]byte(fmt.Sprintf("<br>Warning: These are not updated: %v<br>", wstr)))
						w.Write([]byte(wLinkso))
					}
				} else {
					w.Write([]byte(fmt.Sprintf("No cameras available!")))
				}
			}
		//D0074
		case "cctv-review":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			_, uid := checkSession(w,r)
			if uid == "" {
				//do nothing
				w.WriteHeader(200)
				w.Write([]byte("invalid operation"))
				return
			} else {
				//D0074
				cKey := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", SYS_SERVER_NAME)
				//log.Printf("cKey: %v", cKey)
				cctv_list := getStrMemcacheValueByKey(w,r,cKey)
				if strings.TrimSpace(cctv_list) == "" {
					//cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", uid)
					cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", SYS_SERVER_NAME)
					cctv_list, _ = getTDSCNFG(w,r,0,cfgName)
					putStrToMemcacheWithoutExp(w,r,cKey,cctv_list)
				}
				//log.Printf("cctv_list: %v", cctv_list)
				SPL := strings.Split(cctv_list, "@888@")
				ctr := 0
				wstr := ""
				wLinks := "<ul>"
				wLinkso := "<ul>"
				for i:=0;i<len(SPL);i++ {
					if SPL[i] != "" {
						cKeyTS := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", SPL[i])
						catLastUpload := getStrMemcacheValueByKey(w,r,cKeyTS)
						//log.Printf("catLastUpload: %v", catLastUpload)
						timestamp := stmpHumanizeStr(catLastUpload)
						m := strings.Index(timestamp, "hour")
						if m != -1 {
							//cctv may be outdated
							wstr = fmt.Sprintf("%v<br>%v", wstr, SPL[i])
							catDesc := deskNum2Name(w,r,uid,SPL[i])
							thisLink := fmt.Sprintf("/social?SO_FUNC=get-tot-media&cat=%v&catname=%v", SPL[i], catDesc)
							wLinkso = fmt.Sprintf("%v<li><a href=\"%v\" target=\"%v\">%v (%v)</a></li>", wLinkso, thisLink, SPL[i], catDesc, timestamp)
						} else {
							ctr++
							catDesc := deskNum2Name(w,r,uid,SPL[i])
							thisLink := fmt.Sprintf("/social?SO_FUNC=get-tot-media&cat=%v&catname=%v", SPL[i], catDesc)
							wLinks = fmt.Sprintf("%v<li><a href=\"%v\" target=\"%v\">%v (%v)</a></li>", wLinks, thisLink, SPL[i], catDesc, timestamp)
						}
					}
				}
				wLinks = fmt.Sprintf("%v</ul>", wLinks)
				wLinkso = fmt.Sprintf("%v</ul>", wLinkso)
				w.WriteHeader(200)
				if ctr > 0 {
					//cctv-review
					w.Write([]byte(fmt.Sprintf("You may review the following %v cameras!<br>", ctr)))
					w.Write([]byte(wLinks))
					if wstr != "" {
						w.Write([]byte(fmt.Sprintf("<br>Warning: These are not updated: %v<br>", wstr)))
						w.Write([]byte(wLinkso))
					}
				} else {
					w.Write([]byte(fmt.Sprintf("No cameras available!")))
				}
            }
		//D0074
		case "cctv-battery":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			_, uid := checkSession(w,r)
			if uid == "" {
				//do nothing
				w.WriteHeader(200)
				w.Write([]byte("Invalid operation. You are not logged in."))
				uReferer := r.Referer()
				//if err == nil {
					pStr := fmt.Sprintf("<a href=\"%v\">Click here</a> to login now!", uReferer)
					w.Write([]byte(pStr))
				//}
				return
			} else {
				//list of users
				var uids []string
				FUNC_CODE := "GET_GRP_ID"
				FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
				if FL_VALID_USER == true {
					if GROUP_ID != "GRP_ADMIN" {
						uids = append(uids, uid)
					} else {
						//If user is admin, do for all cctvs
						usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
						usersOnline_CACHE := getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
						//fuCtr := 0
						if usersOnline_CACHE != "" {
							SPLB := strings.Split(usersOnline_CACHE,",")
							for j := 0; j < len(SPLB); j++ {
								if SPLB[j] != "" {
									uids = append(uids, SPLB[j] )
								}
							}
						}
					}
				}
						
				//D0074
				//initiating cctv batteries
				//log.Printf("initiating cctv battery status")
				//send channel message to initiate battery status
				//cKey := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", uid)
				wstr := ""
				ctr := 0
				cctvUIDs := "<ul>"
				for i:=0; i < len(uids); i++ {
					uid := uids[i]
					//log.Printf("Query list of cctvs...")
					//wstr := ""
					//ctr := 0
					prefix := fmt.Sprintf("%v/TDSMEDIA/CCTV/previous/", uid)
					delim := ""
					it, err := listGcsObject(prefix, delim)
					if err != nil {
						//log.Printf("ERROR: listGcsObject() %v", err)
					}
					//log.Printf("it: %v", it)
					//cctvUIDs := "<ul>"
					for {
						attrs, err := it.Next()
						if err == iterator.Done {
								break
						}
						if err != nil {
								//return err
								//log.Printf("iterator error: %v", err)
						}
						ctr++
						//log.Printf("attrs: %#v", attrs)
						//log.Printf("attrs.Name: %v", attrs.Name)
						SPL := strings.Split(attrs.Name, "previous/")
						//log.Printf("attrs.Updated: %v", attrs.Updated)
						desktop := fmt.Sprintf("desktop%v", SPL[1])
						//2020-01-26 13:43:19.536 +0000 UTC
						timestamp := stmpHumanizeGcs(fmt.Sprintf("%v",attrs.Updated))
						m := strings.Index(timestamp, "hour")
						if m != -1 {
							//cctv may be outdated
							wstr = fmt.Sprintf("%v<br>%v", wstr, desktop)
						} else {
							ctr++
							data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_STRUWM_BATTERY_GET@888@%v@888@%v", uid,desktop)
							cctvUIDs = fmt.Sprintf("%v<li>%v-%v</li>", cctvUIDs, uid, desktop)
							//sendChannelMessage(w,r,uid,data)
							sendChannelMessage(w,r,"cctv",data)
						}
					}
				}
				w.WriteHeader(200)
				w.Write([]byte("<html>"))
				if ctr > 0 {
					//w.Write([]byte(fmt.Sprintf("Sent cctv battery status signal to %v cameras!", ctr)))
					w.Write([]byte("Sent cctv battery status signal to the following cameras!"))
					if cctvUIDs != "<ul>" {
						cctvUIDs = fmt.Sprintf("%v</ul>", cctvUIDs)
						w.Write([]byte(fmt.Sprintf("<br>Camera UIDs: %v", cctvUIDs)))
					}
					if wstr != "" {
						w.Write([]byte(fmt.Sprintf("<br>Warning: These are not updated: %v", wstr)))
					}
				} else {
					w.Write([]byte(fmt.Sprintf("Sorry, No cameras available!")))
				}
				w.Write([]byte("</html>"))
				return
			}
		//D0074
		case "cctv-capture":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			_, uid := checkSession(w,r)
			if uid == "" {
				//do nothing
				w.WriteHeader(200)
				w.Write([]byte("Invalid operation. You are not logged in."))
				uReferer := r.Referer()
				//if err == nil {
					pStr := fmt.Sprintf("<a href=\"%v\">Click here</a> to login now!", uReferer)
					w.Write([]byte(pStr))
				//}
				return
			} else {
				//list of users
				var uids []string
				
				FUNC_CODE := "GET_GRP_ID"
				FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
				if FL_VALID_USER == true {
					if GROUP_ID != "GRP_ADMIN" {
						uids = append(uids, uid)
					} else {
						//If user is admin, do for all cctvs
						usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
						usersOnline_CACHE := getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
						//fuCtr := 0
						if usersOnline_CACHE != "" {
							SPLB := strings.Split(usersOnline_CACHE,",")
							for j := 0; j < len(SPLB); j++ {
								if SPLB[j] != "" {
									uids = append(uids, SPLB[j] )
								}
							}
						}
					}
				}
						
				//D0074
				//initiating cctv captures
				//log.Printf("initiating cctv captures")
				//send channel message to initiate capture
				//cKey := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", uid)
				wstr := ""
				ctr := 0
				cctvUIDs := "<ul>"
				for i:=0; i < len(uids); i++ {
					uid := uids[i]
					//log.Printf("Query list of cctvs...")
					//wstr := ""
					//ctr := 0
					prefix := fmt.Sprintf("%v/TDSMEDIA/CCTV/previous/", uid)
					delim := ""
					it, err := listGcsObject(prefix, delim)
					if err != nil {
						//log.Printf("ERROR: listGcsObject() %v", err)
					}
					//log.Printf("it: %v", it)
					//cctvUIDs := "<ul>"
					for {
						attrs, err := it.Next()
						if err == iterator.Done {
								break
						}
						if err != nil {
								//return err
								//log.Printf("iterator error: %v", err)
						}
						ctr++
						//log.Printf("attrs: %#v", attrs)
						//log.Printf("attrs.Name: %v", attrs.Name)
						SPL := strings.Split(attrs.Name, "previous/")
						//log.Printf("attrs.Updated: %v", attrs.Updated)
						desktop := fmt.Sprintf("desktop%v", SPL[1])
						//2020-01-26 13:43:19.536 +0000 UTC
						timestamp := stmpHumanizeGcs(fmt.Sprintf("%v",attrs.Updated))
						m := strings.Index(timestamp, "hour")
						ms := strings.Index(timestamp, "minute")
						ss := strings.Index(timestamp, "second")
						if m != -1 || ms != -1 || ss != -1 {
							ctr++
							//delete previous image
							prevData := fmt.Sprintf("%v/TDSMEDIA/CCTV/previous/%v", uid,SPL[1])
							ulapphDebug(w,r, "info", fmt.Sprintf("Deleted CCTV prevData: %v", prevData))
							err := deleteGcsObject(c, prevData)
							if err != nil {
								log.Printf("ERROR: deleteGcsObject() %v", err)
							}
							data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_STRUWM_CAPTURE@888@%v@888@%v", uid,desktop)
							cctvUIDs = fmt.Sprintf("%v<li>%v-%v</li>", cctvUIDs, uid, desktop)
							//edwin.d.vinas@gmail.com-desktop999477
							///media?FUNC_CODE=VIEW_THUMBS&PROC=&RECENT=&cont_type=CCTV&cont_cat=desktop999641&cat_name=unknown&kword=999641&uid=demo.ulapph@gmail.com
							thisLink := fmt.Sprintf("/media?FUNC_CODE=VIEW_THUMBS&PROC=&RECENT=&cont_type=CCTV&cont_cat=%v&cat_name=unknown&kword=%v&uid=%v", desktop, SPL[1], uid)
							cctvUIDs = fmt.Sprintf("%v<ul><li><a href=\"%v\" target=\"%v\">Review CCTV Images</a></li></ul>", cctvUIDs, thisLink, thisLink)
							sendChannelMessage(w,r,uid,data)
						} else {
							//cctv may be outdated
							wstr = fmt.Sprintf("%v<br>%v", wstr, desktop)
						}
					}
				}
				w.WriteHeader(200)
				w.Write([]byte("<html>"))
				if ctr > 0 {
					//w.Write([]byte(fmt.Sprintf("Sent cctv capture signal to %v cameras!", ctr)))
					w.Write([]byte("Sent cctv capture signal to the following cameras!"))
					if cctvUIDs != "<ul>" {
						cctvUIDs = fmt.Sprintf("%v</ul>", cctvUIDs)
						w.Write([]byte(fmt.Sprintf("<br>Camera UIDs: %v", cctvUIDs)))
					}
					if wstr != "" {
						w.Write([]byte(fmt.Sprintf("<br>Warning: These are not updated: %v", wstr)))
					}
				} else {
					w.Write([]byte(fmt.Sprintf("Sorry, No cameras available!")))
				}
				w.Write([]byte("</html>"))
				return
			}
		//D0076
		case "cctv-alarm":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			_, uid := checkSession(w,r)
			if uid == "" {
				//do nothing
				w.WriteHeader(200)
				w.Write([]byte("Invalid operation. You are not logged in."))
				uReferer := r.Referer()
				//if err == nil {
					pStr := fmt.Sprintf("<a href=\"%v\">Click here</a> to login now!", uReferer)
					w.Write([]byte(pStr))
				//}
				return
			} else {
				alarmStatus := r.FormValue("alarm")
				if alarmStatus != "" {
					//set alarm
					cKey := fmt.Sprintf("CCTV_AUTODETECTION_FLAG_%v", SYS_SERVER_NAME)
					//log.Printf("cKey: %v", cKey)
					putStrToMemcacheWithoutExp(w,r,cKey,alarmStatus)
					alStat := ""
					if alarmStatus == "Y" {
					alStat = "ON"
					} else {
					alStat = "OFF"
					} 
					w.Write([]byte(fmt.Sprintf("Alarm has been set to <b>%v</b>!", alStat)))
					//also save data in DS
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: cKey,
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: alarmStatus,
							CFG_DESC: "Set via code",
					}
					ckey := datastore.NameKey("TDSCNFG", cKey, nil)
					if _, err := datastoreClient.Put(c, ckey, &g); err != nil {
							panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [19693]")
					return;
				} else {
					//D0074
					cKey := fmt.Sprintf("CCTV_AUTODETECTION_FLAG_%v", SYS_SERVER_NAME)
					//log.Printf("cKey: %v", cKey)
					cctv_status := getStrMemcacheValueByKey(w,r,cKey)
					if (strings.TrimSpace(cctv_status) == "") {
						//get status in DS
						cctv_status, _ = getTDSCNFG(w,r,0,cKey)
					}
					if strings.TrimSpace(cctv_status) == "Y" {
						//automl is ON
						butText := fmt.Sprintf("<label class=\"switch\"><input type=\"checkbox\" checked onclick=\"alarmSet('N');\"><div class=\"slider round\"></div>")
						w.Write([]byte(fmt.Sprintf("ON - CCTV is currently detecting intruders and will send alarms when person(s) is detected in all cameras except those where autodetection is not enabled. Click the switch to disable.<br>%v", butText)))
					} else {
						//automl is OFF
						butText := fmt.Sprintf("<label class=\"switch\"><input type=\"checkbox\" onclick=\"alarmSet('Y');\"><div class=\"slider round\"></div>")
						w.Write([]byte(fmt.Sprintf("OFF - CCTV is not detecting intruders and will not send any alarms. Click the switch to enable.<br>%v", butText)))
					}
				}
            }
		//D0098
		case "cctv-recent-local":
			ulapphDebug(w,r, "info", fmt.Sprintf("cctv-recent-local: %v", ""))
			//FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			//if FL_PROC_OK == false {return}
			recent_num := r.FormValue("recent_num")
			_, uid := checkSession(w,r)
			if uid == "" {
				//do nothing
				w.WriteHeader(200)
				w.Write([]byte("invalid operation"))
				return
			} else {
				//D0074
				cKey := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", SYS_SERVER_NAME)
				ulapphDebug(w,r, "info", fmt.Sprintf("cKey: %v", cKey))
				//log.Printf("cKey: %v", cKey)
				cctv_list := getStrMemcacheValueByKey(w,r,cKey)
				ulapphDebug(w,r, "info", fmt.Sprintf("cctv_list: %v", cctv_list))
				if strings.TrimSpace(cctv_list) == "" {
					w.Write([]byte(fmt.Sprintf("No cameras available!")))
					return
				}
				//log.Printf("cctv_list: %v", cctv_list)
				SPL := strings.Split(cctv_list, "@888@")
				ctr := 0
				wstr := ""
				w.Write([]byte("<html>"))
				wLinks := "<ul>"
				wLinkso := "<ul>"
				ulapphDebug(w,r, "info", fmt.Sprintf("SPL LEN: %v", len(SPL)))
				for i:=0;i<len(SPL);i++ {
					if SPL[i] != "" {
						ulapphDebug(w,r, "info", fmt.Sprintf("SPL[i]: %v", SPL[i]))
						cKeyTS := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", SPL[i])
						catLastUpload := getStrMemcacheValueByKey(w,r,cKeyTS)
						ulapphDebug(w,r, "info", fmt.Sprintf("catLastUpload: %v", catLastUpload))
						cKeyCN := fmt.Sprintf("TDSMEDIA_CAT_LAST_NAME_%v", SPL[i])
						catDesc := getStrMemcacheValueByKey(w,r,cKeyCN)
						ulapphDebug(w,r, "info", fmt.Sprintf("catDesc: %v", catDesc))
						//log.Printf("catLastUpload: %v", catLastUpload)
						timestamp := stmpHumanizeStr(catLastUpload)
						ulapphDebug(w,r, "info", fmt.Sprintf("timestamp: %v", timestamp))
						m := strings.Index(timestamp, "hour")
						if m != -1 {
							ctr++
							ulapphDebug(w,r, "info", fmt.Sprintf("cctv may be outdated: %v", SPL[i]))
							//cctv may be outdated
							wstr = fmt.Sprintf("%v<br>%v", wstr, SPL[i])
							//catDesc := deskNum2Name(w,r,uid,SPL[i])
							thisLink := fmt.Sprintf("/tools?FUNC=WIDGET&t=CCTV_STREAM&SID=GEN&RECENT=%v&cont_type=TDSMEDIA&cont_cat=%v&cat_name=%v", recent_num, SPL[i], catDesc)
							wLinkso = fmt.Sprintf("%v<li><a href=\"%v\" target=\"%v\">%v (%v)</a></li>", wLinkso, thisLink, SPL[i], catDesc, SPL[i])
						} else {
							ulapphDebug(w,r, "info", fmt.Sprintf("cctv is latest: %v", SPL[i]))
							ctr++
							//catDesc := deskNum2Name(w,r,uid,SPL[i])
							//thisLink := fmt.Sprintf("/social?SO_FUNC=get-tot-media&cat=%v&catname=%v", SPL[i], catDesc)
							thisLink := fmt.Sprintf("/tools?FUNC=WIDGET&t=CCTV_STREAM&SID=GEN&RECENT=%v&cont_type=TDSMEDIA&cont_cat=%v&cat_name=%v", recent_num, SPL[i], catDesc)
							wLinks = fmt.Sprintf("%v<li><a href=\"%v\" target=\"%v\">%v (%v)</a></li>", wLinks, thisLink, SPL[i], catDesc, SPL[i])
						}
					}
				}
				wLinks = fmt.Sprintf("%v</ul>", wLinks)
                wLinkso = fmt.Sprintf("%v</ul>", wLinkso)
				w.WriteHeader(200)
				if ctr > 0 {
					ulapphDebug(w,r, "info", fmt.Sprintf("ctr > 0: %v", ctr))
					w.Write([]byte(fmt.Sprintf("You may review the following %v cameras!<br>", ctr)))
					w.Write([]byte(wLinks))
					if wstr != "" {
						//w.Write([]byte(fmt.Sprintf("<br>Warning: These are not updated: %v<br>", wstr)))
						//w.Write([]byte("<br>"))
						w.Write([]byte(wLinkso))
					}
				} else {
					ulapphDebug(w,r, "info", fmt.Sprintf("ctr < 0: %v", ctr))
					w.Write([]byte(fmt.Sprintf("No cameras available!")))
				}
				w.Write([]byte("</html>"))
			}
		//D0074
		case "cctv":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			_, uid := checkSession(w,r)
			if uid == "" {
				//do nothing
				w.WriteHeader(200)
				w.Write([]byte("invalid operation"))
				return
			} else {
				//list of users
				var uids []string
				
				FUNC_CODE := "GET_GRP_ID"
				FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
				if FL_VALID_USER == true {
					if GROUP_ID != "GRP_ADMIN" {
						uids = append(uids, uid)
					} else {
						//If user is admin, do for all cctvs
						usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
						usersOnline_CACHE := getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
						//fuCtr := 0
						if usersOnline_CACHE != "" {
							SPLB := strings.Split(usersOnline_CACHE,",")
							for j := 0; j < len(SPLB); j++ {
								if SPLB[j] != "" {
									uids = append(uids, SPLB[j] )
								}
							}
						}
					}
				}
						
				var buf bytes.Buffer
				ctr := 0
				for i:=0; i < len(uids); i++ {
					uid := uids[i]
					//get list of cctvs
					//cKey := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", uid)
					//cKey := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", SYS_SERVER_NAME)
					//log.Printf("cKey: %v", cKey)
					//log.Printf("cctv_list: %v", cctv_list)
					//log.Printf("Query list of cctvs...")
					//edwin.d.vinas@gmail.com/TDSMEDIA/CCTV
					//ctr := 0
					//delim := fmt.Sprintf("%v/TDSMEDIA/CCTV/previous/", uid)
					prefix := fmt.Sprintf("%v/TDSMEDIA/CCTV/previous/", uid)
					delim := ""
					it, err := listGcsObject(prefix, delim)
					if err != nil {
						//log.Printf("ERROR: listGcsObject() %v", err)
					}
					//log.Printf("it: %v", it)
					for {
							attrs, err := it.Next()
							if err == iterator.Done {
									break
							}
							if err != nil {
									//return err
									//log.Printf("iterator error: %v", err)
							}
							ctr++
							//log.Printf("attrs: %#v", attrs)
							//log.Printf("attrs.Name: %v", attrs.Name)
							//log.Printf("attrs.Updated: %v", attrs.Updated)
							BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
							imgLink := fmt.Sprintf("https://storage.cloud.google.com/%v/%v", BUCKET_NAME, attrs.Name)
							//2020-01-26 13:43:19.536 +0000 UTC
							timestamp := stmpHumanizeGcs(fmt.Sprintf("%v",attrs.Updated))
							//include only those seconds, minutes or hours ago
							isNow := strings.Index(timestamp, "now")
							isSecs := strings.Index(timestamp, "second")
							isMins := strings.Index(timestamp, "minute") 
							isHours := strings.Index(timestamp, "hour") 
							if isNow != -1 || isSecs != -1 || isMins != -1 || isHours != -1 {
								//log.Printf("timestamp: %v", timestamp)
								buf.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\"><img src=\"%v\">%v</a> - %v<br>", imgLink, attrs.Name, attrs.Name, imgLink, timestamp, attrs.Name))
							}
					}
				}
				if ctr > 0 {
					w.WriteHeader(200)
					w.Write(buf.Bytes())
					return
				} else {
					w.WriteHeader(200)
					w.Write([]byte("No data found! Please try again later."))
					return
				}
			}
		//online users map portal
		case "map":
			updateUserActiveData(w, r, c, "", "/directory-map")
			if FL_IS_BOT == true {
				if r.FormValue("esk") != EXT_SEARCH_GEN_KEY {
					//log.Printf("Robot not allowed!")
					fmt.Fprintf(w, "Robot not allowed!")
					return
				}
			}
			IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
			//if this server is not sites server
			if IS_SEARCH_SERVER != "Y" {
				urlStr := fmt.Sprintf("%v/search?f=GET_MAP_LIST&esk=%v", SEARCH_SERVER, EXT_SEARCH_GEN_KEY)
				//client := urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
				resp, err := http.Get(urlStr)
				if err != nil {
					panic(err)
				}
				bodyBytes, _ := ioutil.ReadAll(resp.Body)
				w.Write(bodyBytes)
				return
			} else {
				showOverallMap(w,r)
				return
			}
		//online servers map portal
		case "map2":
			updateUserActiveData(w, r, c, "", "/directory-map2")
			if FL_IS_BOT == true {
				//log.Printf("Robot not allowed!")
				fmt.Fprintf(w, "Robot not allowed!")
				return
			}
			IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
			//if this server is not sites server
			if IS_SEARCH_SERVER != "Y" {
				urlStr := fmt.Sprintf("%v/search?f=GET_MAP_LIST2&esk=%v", SEARCH_SERVER, EXT_SEARCH_GEN_KEY)
				//client := urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
				resp, err := http.Get(urlStr)
				if err != nil {
					panic(err)
				}
				bodyBytes, _ := ioutil.ReadAll(resp.Body)
				w.Write(bodyBytes)
				return
			} else {
				showOverallMap2(w,r)
				return
			}
		case "sites":
			updateUserActiveData(w, r, c, "", "/directory-sites")
			IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
			//if this server is not sites server
			if IS_SEARCH_SERVER != "Y" {
				redURL := fmt.Sprintf("%v/directory?DIR_FUNC=sites", getSchemeNewUrl(w,r,SEARCH_SERVER))
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			} else {
				showOverallSites(w,r,FL_IS_BOT)
				return
			}
		//D0077
		case "tracker":
			updateUserActiveData(w, r, c, "", "/directory-tracker")
			IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
			//if this server is not sites server
			xhost := r.FormValue("xhost")
			xuid := r.FormValue("xuid")
			//log.Printf("xhost: %v", xhost)
			//log.Printf("xuid: %v", xuid)
			if IS_SEARCH_SERVER != "Y" {
				redURL := fmt.Sprintf("%v/directory?DIR_FUNC=tracker&xuid=%v&xhost=%v", getSchemeNewUrl(w,r,SEARCH_SERVER), xuid, xhost)
				xLongLat := fetchURL(w,r,redURL)
				w.WriteHeader(200)
				w.Write([]byte(xLongLat))
				//log.Printf("xLongLat: %v", xLongLat)
				return
			} else {
				showUserLocation(w,r,xhost,xuid)
				return
			}

		case "people":
			updateUserActiveData(w, r, c, "", "/directory-people")
			IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
			//if this server is not sites server
			if IS_SEARCH_SERVER != "Y" {
				redURL := fmt.Sprintf("%v/directory?DIR_FUNC=people", getSchemeNewUrl(w,r,SEARCH_SERVER))
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			} else {
				showOverallPeople(w,r,FL_IS_BOT)
				return
			}
		case "sessions":
			updateUserActiveData(w, r, c, "", "/directory-sessions")
			IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
			//if this server is not sites server
			if IS_SEARCH_SERVER != "Y" {
				redURL := fmt.Sprintf("%v/directory?DIR_FUNC=sessions", getSchemeNewUrl(w,r,SEARCH_SERVER))
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			} else {
				showOverallSessions(w,r, "sessions",FL_IS_BOT)
				return
			}
		case "sessions2":
			updateUserActiveData(w, r, c, "", "/directory-sessions2")
			IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
			//if this server is not sites server
			if IS_SEARCH_SERVER != "Y" {
				showOverallSessions(w,r, "sessions2",FL_IS_BOT)
				return
			}
		//D0039
		case "GOTO_MY_ULAPPH":
			//log.Printf("GOTO_MY_ULAPPH...")
			//D0044
			renderStaticGotoMyUlapphs(w,r)
			return
		case "TRACKER_SELECT_USER":
			//log.Printf("TRACKER_SELECT_USER")
			renderStaticTrackerSelectUser(w,r)
			return
		//D0044
		case "FL_ULAPPH_EXISTS":
			//log.Printf("FL_ULAPPH_EXISTS...")
			mode := r.FormValue("m")
			url := getMyULAPPH(w,r,mode)
			//fmt.Fprintf(w, url)
			if len(url) <= 0 {
				//log.Printf("FL_ULAPPH_EXISTS...NO")
				w.WriteHeader(400)
			} else {
				w.WriteHeader(200)
				//log.Printf("FL_ULAPPH_EXISTS...YES")
				//log.Printf("url: %v", url)
				w.Write([]byte("ok"))
			}
			return
		//D0084
		case "FLA":
			//find live agents
			//log.Printf("FLA")
			intent := r.FormValue("intent")
			user := r.FormValue("user")
			recipient := r.FormValue("recipient")
			deviceID := r.FormValue("did")
			//D0085
			cType := r.FormValue("CH")
			//log.Printf("intent: %v", intent)
			//log.Printf("user: %v", user)
			//log.Printf("deviceID: %v", deviceID)
			updateUserActiveData(w, r, c, "", "/directory-agents")
			IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
			//if this server is not sites server
			if IS_SEARCH_SERVER != "Y" {
				URL := fmt.Sprintf("%v/directory?DIR_FUNC=FLA&user=%v&intent=%v&did=%v&ch=%v&recipient=%v", getSchemeNewUrl(w,r,SEARCH_SERVER), user, intent, deviceID, cType, recipient)
				//log.Printf("URL: %v", URL)
				//client := urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
				resp, err := http.Get(URL)
				if err != nil {
					panic(err)
				}
				bodyBytes, _ := ioutil.ReadAll(resp.Body)
				w.Write(bodyBytes)
				return
			} else {
			        intent := r.FormValue("intent")
			        user := r.FormValue("user")
			        deviceID := r.FormValue("did")
			        cType := r.FormValue("ch")
                    uid_rx := r.FormValue("recipient")
                    time.AfterFunc(5*time.Second, func() {
                        laterSendLiveAgents(c, cType, user, uid_rx, intent, deviceID)
                    })
				//procGetAgents(w,r)
				return
			}

	}
}
//editor for slides and articles
//it uses Ace editor customized for ulapph cloud desktop
func editor(w http.ResponseWriter, r *http.Request) {
	//log.Printf("editor()")
	checkHTTPS(w,r)	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //D0086
    datastoreClient := createClientDS()	
	uReferer := r.Referer()
	EDIT_FUNC := r.FormValue("EDIT_FUNC")
	EDIT_FUNC2 := r.FormValue("EDIT_FUNC2")
	EDIT_MODE := r.FormValue("EDIT_MODE")
	
	switch EDIT_FUNC {
		
		case "SEMAPHORE":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			if SEMAPHORE_API_KEY == "" {
				fmt.Fprintf(w, "ERROR: API not available. <a href=\"http://semaphore.co/\">Subscribe</a> to Semaphore first.")
				return
			}
			
			if EDIT_MODE == "" {
				////u := user.Current(c)
				_, uid := checkSession(w,r)
				cons := getContactsList(w,r,uid,"semaphore")
				if cons == "" {
					fmt.Fprintf(w, "ERROR: No contacts found. Please create/import contacts first.")
					return	
				}
				if err := textSemaphoreBody.Execute(w, template.HTML(cons)); err != nil {
				  panic(err)
				}
			} else {
				
				r.ParseForm() // Required if you don't call r.FormValue()
				MSG := r.FormValue("MSG")
				TO := r.Form["TO"]
				if len(TO) > 1 {
					ctr := 0
					fmt.Fprintf(w, "Send message by bulk...<br>")
						for i := 0; i < len(TO); i += 20 {
							batch := TO[i:min(i+20, len(TO))]
							ctr++
							fmt.Fprintf(w, "***<br>")
							fmt.Fprintf(w, "BATCH#%v:<br>", ctr)
							//send each batch
							mTO := batch[0]
							for j := 1; j < len(batch); j++ {
								mTO = fmt.Sprintf("%v,%v", mTO, batch[j])
							}
							fmt.Fprintf(w, "TO: %v<br>", mTO)
							fmt.Fprintf(w, "MSG: %v<br>", MSG)
							URL := ""
							URL = fmt.Sprintf("http://beta.semaphore.co/api/v4/messages?apikey=%v&number=%v&message=%v&sendername=%v", SEMAPHORE_API_KEY, mTO, url.QueryEscape(MSG), SEMAPHORE_SENDER_NAME)
							req, err := http.NewRequest("POST", URL, nil)
 
                            //client := urlfetch.Client(c)
                            client := &http.Client{}
							resp, err := client.Do(req)
							if err != nil {
								panic(err)
							}
							
							bodyBytes, _ := ioutil.ReadAll(resp.Body)
							FETCH_URL := string(bodyBytes)

							k := strings.Index(FETCH_URL, "failure")
							if k != -1 {
								fmt.Fprintf(w, "<font color=red>%v</font><br>", FETCH_URL)
							} else {
								fmt.Fprintf(w, "<font color=green>%v</font><br>", FETCH_URL)
							}
 
						}
						printSemaFooter(w,r)
					//}
				} else {
					if MSG == "" || len(TO) <= 0 {
						fmt.Fprintf(w, "ERROR: Message and Mobile number must be populated! Press Back to return.")
						return
					}
 
					fmt.Fprintf(w, "<a href=\"/editor?EDIT_FUNC=SEMAPHORE\">Go back</a><br>")
					fmt.Fprintf(w, "<hr>")
					fmt.Fprintf(w, "Send message...<br>")
					fmt.Fprintf(w, "TO: %v<br>", TO[0])
					fmt.Fprintf(w, "MSG: %v<br>", MSG)
					sTO := TO[0]
					URL := ""
					URL = fmt.Sprintf("http://beta.semaphore.co/api/v4/messages?apikey=%v&number=%v&message=%v&sendername=%v", SEMAPHORE_API_KEY, sTO, url.QueryEscape(MSG), SEMAPHORE_SENDER_NAME)
					req, err := http.NewRequest("POST", URL, nil)
 
                    //client := urlfetch.Client(c)
                    client := &http.Client{}
					resp, err := client.Do(req)
					if err != nil {
						panic(err)
					}
 
					bodyBytes, _ := ioutil.ReadAll(resp.Body)
					FETCH_URL := string(bodyBytes)
					k := strings.Index(FETCH_URL, "failure")
					if k != -1 {
						fmt.Fprintf(w, "<font color=red>%v</font><br>", FETCH_URL)
					} else {
						fmt.Fprintf(w, "<font color=green>%v</font><br>", FETCH_URL)
					}
					printSemaFooter(w,r)
					return					
					
				}
			}
			return
			
		case "SEMAPHORE-STAT":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			if SEMAPHORE_API_KEY == "" {
				fmt.Fprintf(w, "ERROR: API not available. <a href=\"http://semaphore.co/\">Subscribe</a> to Semaphore first.")
				return
			}
			URL := fmt.Sprintf("http://beta.semaphore.co/api/v4/account?apikey=%v&sendername=%v", SEMAPHORE_API_KEY, SEMAPHORE_SENDER_NAME)
			req, err := http.NewRequest("GET", URL, nil)
			req.Header.Set("Content-Type", "text/html")
 
            //client := urlfetch.Client(c)
            client := &http.Client{}
			resp, err := client.Do(req)
			if err != nil {
				panic(err)
			}
 
			bodyBytes, _ := ioutil.ReadAll(resp.Body)
			FETCH_URL := string(bodyBytes)
			k := strings.Index(FETCH_URL, "failure")
			if k != -1 {
				fmt.Fprintf(w, "<font color=red>%v</font><br>", FETCH_URL)
			} else {
				fmt.Fprintf(w, "<font color=green>%v</font><br>", FETCH_URL)
			}
			printSemaFooter(w,r)
			return
 
		case "SEMAPHORE-MSG":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			if SEMAPHORE_API_KEY == "" {
				fmt.Fprintf(w, "ERROR: API not available. <a href=\"http://semaphore.co/\">Subscribe</a> to Semaphore first.")
				return
			}
			URL := fmt.Sprintf("http://beta.semaphore.co/api/v4/messages?apikey=%v&sendername=%v", SEMAPHORE_API_KEY, SEMAPHORE_SENDER_NAME)
			req, err := http.NewRequest("GET", URL, nil)
			req.Header.Set("Content-Type", "text/html")
 
            //client := urlfetch.Client(c)
            client := &http.Client{}
			resp, err := client.Do(req)
			if err != nil {
				panic(err)
			}
			
			bodyBytes, _ := ioutil.ReadAll(resp.Body)
			FETCH_URL := string(bodyBytes)
			fmt.Fprintf(w, "<a href=\"http://semaphore.co/messages/reports\">Message Report</a><br>")
			fmt.Fprintf(w, "%v", FETCH_URL)
			printSemaFooter(w,r)	
			return
		case "TEXT-CSS":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			TEXT := r.FormValue("TEXT")
			ACE := r.FormValue("ACE")
			EDIT_MODE := r.FormValue("EDIT_MODE")
			SPEAK := r.FormValue("SPEAK")
 
			if ACE == "Y" {
				TEXT2, err := base64.StdEncoding.DecodeString(TEXT)
				if err != nil {
 
				}
 
				TEXT = string(TEXT2)
				var buf bytes.Buffer
				scanner := bufio.NewScanner(strings.NewReader(TEXT))
				for scanner.Scan() {
					if scanner.Text() == "" {
						buf.WriteString(fmt.Sprintf("<br>%v", scanner.Text()))
					} else {
						buf.WriteString(scanner.Text())
					}
				}
				TEXT = buf.String()
			}
			
			if EDIT_MODE == "" {
 
				//display form to input textarea and select format options
				if err := textCSSBody.Execute(w, TEXT); err != nil {
				  panic(err)
				}
			} else {
				CSS := r.FormValue("CSS-TYPE")
				CALI := r.FormValue("CSS-ALIGN")
				//TEXT := r.FormValue("TEXT")
				t := presentTemplates[path.Ext(CSS)]
				if t == nil {
					panic(t)
				}
				doc := new(TEMPSTRUCT2)
				doc.STR_FILLER1	= TEXT
				doc.STR_FILLER2	= CALI
				doc.STR_FILLER3	= SPEAK
				if CSS == ".starwars" {
					doc.HTM_FILLER1 = template.HTML(TEXT)
				}
				data := struct {
					*TEMPSTRUCT2
					Template    *template.Template
				}{
					doc,
					t,
				}
				//fmt.Fprintf(w, "%v", data)
				t.Execute(w, &data)
			}
			return
		case "DRAW":
			SRC := r.FormValue("SID")
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			if err := textDrawBody.Execute(w, SRC); err != nil {
			  panic(err)
			}
            return
        case "TIMELINE":
			_, uid := checkSession(w,r)
            //log.Printf("TIMELINE")
			SID := r.FormValue("SID")
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			//D0070
			switch {
            case SID == "GEN":
                //log.Printf("TIMELINE: GEN")
                //show timelinejs form
                keyword := r.FormValue("KEY")
				thisCats := getCategoriesBytes(w,r,uid)
				renderTimelineForm(w,r,".timelinejs-gen", keyword, thisCats)
				return
            case SID == "GEN2":
                //log.Printf("TIMELINE: GEN2")
				FUNC_CODE := "GET_GRP_ID"
				_, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
				repMode := r.FormValue("report")
				start_date := r.FormValue("start_date")
				start_time := r.FormValue("start_time")
				end_date := r.FormValue("end_date")
				end_time := r.FormValue("end_time")
				contType := r.FormValue("cont_type")
				contCat := r.FormValue("cont_cat")
				kword := r.FormValue("kword")
				//get year
				SPL := strings.Split(start_date, ", ")
				start_year := SPL[1]
				//log.Printf("start_year: %v", start_year)
				//log.Printf("start_date: %v", start_date)
				//log.Printf("start_time: %v", start_time)
				//log.Printf("end_date: %v", end_date)
				//log.Printf("end_time: %v", end_time)
				//log.Printf("contType: %v", contType)
				//log.Printf("contCat: %v", contCat)
				//compose timestamp
				start_tstmp := fmt.Sprintf("%v %v", start_date, start_time)
				end_tstmp := fmt.Sprintf("%v %v", end_date, end_time)
				//log.Printf("start_tstmp: %v", start_tstmp)
				//log.Printf("end_tstmp: %v", end_tstmp)
				rt1, _ := time.Parse("_2 January, 2006 3:04 PM", start_tstmp)
				start_rt1 := fmt.Sprintf("%v", rt1.Format("20060102150405"))
				rt2, _ := time.Parse("_2 January, 2006 3:04 PM", end_tstmp)
				start_rt2 := fmt.Sprintf("%v", rt2.Format("20060102150405"))
				//log.Printf("start_rt1: %v", start_rt1)
				//log.Printf("start_rt2: %v", start_rt2)
				start := str2int(start_rt1)
				end := str2int(start_rt2)
				tjs := Timelinejs{}
				titm := TimelineMedia{}
					titm.Caption = "TimelineJS generator"
					titm.Credit = "ULAPPH Cloud Desktop"
					titm.URL = "/static/timelines/img/timeline-header.png"
				titt := TimelineText{}
					//titt.Headline = "Autogenerated TimelineJS"
					if kword != "" {
						titt.Headline = fmt.Sprintf("TimelineJS for %v - %v with \"%v\"", start_tstmp, end_tstmp, kword)
					} else {
						titt.Headline = fmt.Sprintf("TimelineJS for %v - %v", start_tstmp, end_tstmp)
					}
					titt.Text = "An autogenerated timeline via ULAPPH Cloud Desktop using TimelineJS"
				tjst := TimelineTitle{}
					tjst.Media = titm
					tjst.Text = titt
				tjs.Title = tjst
				switch contType {
                case "CCTV":
                    //log.Printf("TIMELINE: CCTV")
                    //nRecCtr :=0
                    //numRecent, _ := strconv.Atoi(RECENT)
                    //List all CCTV images from cloud storage
                    if kword == "" {
                        //requires camera number like "1"
                        fmt.Fprintf(w, "ERROR: Please indicate the camera number.")
                        return
                    }
                    //log.Printf("kword: %v", kword)
                    //log.Printf("start_year: %v", start_year)
                    //log.Printf("start_date: %v", start_date)
                    //log.Printf("start_time: %v", start_time)
                    //log.Printf("end_date: %v", end_date)
                    //log.Printf("end_time: %v", end_time)
                    //log.Printf("contType: %v", contType)
                    //log.Printf("contCat: %v", contCat)
                    //wstr := ""
                    ctr := 0
                    prefix := fmt.Sprintf("%v/TDSMEDIA/CCTV/%v/", uid, kword)
                    delim := ""
                    it, err := listGcsObject(prefix, delim)
                    if err != nil {
                        //log.Printf("ERROR: listGcsObject() %v", err)
                    }
                    //log.Printf("it: %v", it)
                    for {
                        attrs, err := it.Next()
                        if err == iterator.Done {
                                break
                        }
                        if err != nil {
                                //return err
                                //log.Printf("iterator error: %v", err)
                        }
                        //ctr++
                        //log.Printf("attrs: %#v", attrs)
                        //log.Printf("attrs.Name: %v", attrs.Name)
                        flAdded := timelineShowCCTV(w,r,uid,GROUP_ID,contCat,start,end,attrs,&tjs)
                        if flAdded == true {
                            ctr++
                        }
                    }
                    //log.Printf("timelineShowCCTV done [%v] items", ctr)
				case "TDSSLIDE":
					if repMode == "rep-stats" {
						w.WriteHeader(200)
						w.Write([]byte("N/A"))
						return
					}
					//q := datastore.NewQuery("TDSSLIDE").Filter("YEAR =", start_year).Limit(500)
					q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(500)
					if contCat != "" {
					q = datastore.NewQuery("TDSSLIDE").Filter("CATEGORY =", contCat).Filter("YEAR =", start_year)
					}
					recCount,_ := datastoreClient.Count(c,q)
					//log.Printf("recCount: %v", recCount)
                    slide := make([]TDSSLIDE, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [20418]")
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						 panic(err)
					}
					ctr := 0
					for _, p := range slide{
						if kword != "" {
							i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
							j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
							if i != -1 || j != -1 {
								flAdded := timelineAddEventSlide(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
								if flAdded == true {
									ctr++
								}
							}

						} else {
							flAdded := timelineAddEventSlide(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
							if flAdded == true {
								ctr++
							}
						}
					}
                case "TDSARTL":
                    //log.Printf("TIMELINE: TDSARTL")
					if repMode == "rep-stats" {
						w.WriteHeader(200)
						w.Write([]byte("N/A"))
						return
					}
					//q := datastore.NewQuery("TDSARTL").Filter("YEAR =", start_year).Limit(500)
					q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(500)
					if contCat != "" {
					q = datastore.NewQuery("TDSARTL").Filter("CATEGORY =", contCat).Filter("YEAR =", start_year)
					}
					recCount,_ := datastoreClient.Count(c,q)
					//log.Printf("recCount: %v", recCount)
                    article := make([]TDSARTL, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [20456]")
					if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
						 panic(err)
					}
					ctr := 0
					for _, p := range article{
						if kword != "" {
							i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
							j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
							if i != -1 || j != -1 {
								flAdded := timelineAddEventArticle(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
								if flAdded == true {
									ctr++
								}
							}

						} else {
							flAdded := timelineAddEventArticle(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
							if flAdded == true {
								ctr++
							}
						}
					}
                case "TDSMEDIA":
                    //log.Printf("TIMELINE: TDSMEDIA")
					if repMode == "rep-stats" {
						w.WriteHeader(200)
						w.Write([]byte("N/A"))
						return
					}
					//q := datastore.NewQuery("TDSMEDIA").Filter("YEAR =", start_year).Limit(500)
					q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID").Limit(500)
					if contCat != "" {
					q = datastore.NewQuery("TDSMEDIA").Filter("CATEGORY =", contCat).Filter("YEAR =", start_year)
					}
					recCount,_ := datastoreClient.Count(c,q)
					//log.Printf("recCount: %v", recCount)
                    media := make([]TDSMEDIA, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [20494]")
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					ctr := 0
					for _, p := range media{
						if kword != "" {
							i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
							j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
							if i != -1 || j != -1 {
								flAdded := timelineAddEventMedia(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
								if flAdded == true {
									ctr++
								}
							}

						} else {
							flAdded := timelineAddEventMedia(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
							if flAdded == true {
								ctr++
							}
						}
					}
                default:
                    //log.Printf("TIMELINE: TDSSLIDE")
					//slides
					//q := datastore.NewQuery("TDSSLIDE").Filter("YEAR =", start_year).Limit(500)
					q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(500)
					recCount,_ := datastoreClient.Count(c,q)
					//log.Printf("recCount: %v", recCount)
                    slide := make([]TDSSLIDE, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [20525]")
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						 panic(err)
					}
					for _, p := range slide{
						if kword != "" {
							i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
							j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
							if i != -1 || j != -1 {
								timelineAddEventSlide(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
							}

						} else {
							timelineAddEventSlide(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
						}
					}
					//articles
					//q1 := datastore.NewQuery("TDSARTL").Filter("YEAR =", start_year).Limit(500)
					q1 := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(500)
					recCount,_ = datastoreClient.Count(c,q1)
					//log.Printf("recCount: %v", recCount)
                    article := make([]TDSARTL, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [20547]")
					if _, err := datastoreClient.GetAll(c, q1, &article); err != nil {
						 panic(err)
					}
					for _, p := range article{
						if kword != "" {
							i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
							j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
							if i != -1 || j != -1 {
								timelineAddEventArticle(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
							}

						} else {
							timelineAddEventArticle(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
						}
					}
					//media
					//q2 := datastore.NewQuery("TDSMEDIA").Filter("YEAR =", start_year).Limit(500)
					q2 := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID").Limit(500)
					recCount,_ = datastoreClient.Count(c,q2)
					//log.Printf("recCount: %v", recCount)
                    media := make([]TDSMEDIA, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [20569]")
					if _, err := datastoreClient.GetAll(c, q2, &media); err != nil {
						 panic(err)
					}
					for _, p := range media{
						if kword != "" {
							i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
							j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
							if i != -1 || j != -1 {
								timelineAddEventMedia(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
							}

						} else {
							timelineAddEventMedia(w,r,uid,GROUP_ID,kword,contCat,start,end,&tjs,&p)
						}
					}

				}
				if err := textTimelineBodyRaw.Execute(w, tjs); err != nil {
				  panic(err)
				}
				return
			default:
				srcURL := fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=RAWJSON&SID=%v", SID)
				if err := textTimelineBody.Execute(w, srcURL); err != nil {
				  panic(err)
				}
			}
			return
		case "MERMAID":
			renderStaticTemplates(w,r,".mermaid")
			return
		case "CRYPTO":
			//log.Printf("CRYPTO")
			UID := r.FormValue("UID")
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			if EDIT_MODE == "" {
				//log.Printf("EDIT_MODE=")
				//display form to input textarea and select format options
				if err := textCryptoBody.Execute(w, UID); err != nil {
				  panic(err)
				}
			} else {
				mode := r.FormValue("ct")
				key := r.FormValue("k")
				text := r.FormValue("t")
				dview := r.FormValue("cv")
				sid := r.FormValue("sid")
				cStr := []byte("")
				fileName := ""
				//log.Printf("EDIT_MODE=OK")
				if sid != "" {
					//log.Printf("sid: %v", sid)
					fileName = sid
					BLOB_KEY := contentCheckSid(w,r,sid)
					if BLOB_KEY != "" {
						text = getBlobText(w, r, BLOB_KEY)
					} else {
						fmt.Fprintf(w, "Invalid format. Only SID format is allowed such as TDSMEDIA-nn, TDSARTL-nn, or TDSSLIDE-nn.")
						return
					}
				}
				if key == "" || len(key) != 16 {
					key = ENCRYPTION_KEY
				}
				if mode == "" {
					fmt.Fprintf(w, "ERROR: Select encrypt or decrypt mode.")
					return
				}
				if r.FormValue("remote") == "Y" {
					//log.Printf("remote")
					url := r.FormValue("url")
					//log.Printf("url: %v", url)
					text = fetchURL(w,r,url)
					fileName = url
				} else {
					IS_FILE_OK := true
					r.ParseMultipartForm(32 << 20)
					file, handler, err := r.FormFile("file")
					if err != nil {
						IS_FILE_OK = false
					}
					if IS_FILE_OK == true {
						defer file.Close()
						data, err := ioutil.ReadAll(file)
						if err != nil {
							IS_FILE_OK = false
						}
						if string(data) != "" && IS_FILE_OK == true {
							text = string(data)
							fileName = handler.Filename+".txt"
						}
					}
				}
				//log.Printf("text: %v", text)
				FL_BASE64 := IsBase64(text)
				if mode == "d" && FL_BASE64 == false {
					fmt.Fprintf(w, "ERROR: Cannot decrypt an un-encrypted data.")
					return
				}
				if mode == "e" && FL_BASE64 == true {
					fmt.Fprintf(w, "ERROR: Data is already encrypted.")
					return
				}
				if text == "" {
					fmt.Fprintf(w, "ERROR: Enter text or upload text file.")
					return
				}
				//log.Printf("mode: %v", mode)
				ulapphDebug(w,r, "info", fmt.Sprintf("mode: %v", mode))
				ulapphDebug(w,r, "key", fmt.Sprintf("key: %v", key))
				if mode == "v" {
					cStr = []byte(text)
					fileName = fileName+"(as-is).txt"
				} else {
					if mode == "e" {
						//encrypt
						cStr = encrypter2(w,r,text,key)
						fileName = fileName+"(encrypted).txt"
					} else {
						//decrypt
						cStr = decrypter2(w,r,text,key)
						fileName = fileName+"(decrypted).txt"
					}
				}
				if mode == "d" || mode == "v" {
					switch {
						case dview == "d":
							//log.Printf("dview=d")
							w.Header().Set(`Content-Type`, `text/plain`)
							disp := fmt.Sprintf("attachment; filename=%v", fileName)
							w.Header().Set(`Content-Disposition`, disp)
							w.Write(cStr)
							return
						case dview == "t":
							showAceEditor(w,r,".ace-local",UID,text)
							return
						case dview == "s" || dview == "a":
							//fmt.Fprintf(w, "Preparing slide...")
							//log.Printf("Preparing slide/article...")
							var lines []string
							s := bufio.NewScanner(bytes.NewReader(cStr))
							for s.Scan() {
								lines = append(lines, fmt.Sprintf("%v", s.Text()))
							}
							doc, err := Parse4(w, r, &Lines{0, lines}, "ULAPPH-CRYPTO", 0)
							if err != nil {
								panic(err)
							}
							var buf bytes.Buffer
							title2 := ""
							SL_TMP := ""
							if dview == "s" {
								title2 = fmt.Sprintf("%v.slide", "ULAPPH-CRYPTO")
								if SYS_STATELESS_SERVER == true {
									title2 = fmt.Sprintf("%v.slide-offline", "ULAPPH-CRYPTO")
								}
								SL_TMP = "S"
							} else {
								title2 = fmt.Sprintf("%v.article", "ULAPPH-CRYPTO")
								SL_TMP = "A"
							}
							if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
								panic(err)
							}
							//if redirect
							if r.FormValue("redirect") == "Y" {
								//log.Printf("redirect...")
								//log.Printf("data: %v", len(buf.String()))
								//_, uid := checkSession(w,r)
								uid := UID
								cKey := fmt.Sprintf("ULAPPH_DROP_OPEN_%s_%v", uid, base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(fileName)," "))))
								//log.Printf("cKey: %v", cKey)
								putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
								redURL := ""
								if SL_TMP == "S" {
									redURL = fmt.Sprintf("%vsearch?f=get-auto-content2&cKey=%v&PARM=LOOP&TYPE=SLIDE&SECS=8&API_KEY=%v&UID=%v", domRefMatchS, cKey, CMD_API_KEY, UID)
									//redURL = fmt.Sprintf("/search?f=get-auto-content2&cKey=%v&PARM=LOOP&TYPE=SLIDE&SECS=8&API_KEY=%v", cKey, CMD_API_KEY)
								} else {
									redURL = fmt.Sprintf("%vsearch?f=get-auto-content2&cKey=%v&TYPE=ARTICLE&API_KEY=%v&UID=%v", domRefMatchS, cKey, CMD_API_KEY, UID)	
									//redURL = fmt.Sprintf("/search?f=get-auto-content2&cKey=%v&TYPE=ARTICLE&API_KEY=%v", cKey, CMD_API_KEY)	
								}
								data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_WINDOW@888@%v", redURL)
								sendChannelMessage(w,r,uid,data)
								//log.Printf("redURL: %v", redURL)
								//log.Printf("sendChannelMessage()")
								return
							}
							//display slides
							writeHTMLHeader(w, 200)
							w.Write(buf.Bytes())
							return
						case dview == "t":
							//log.Printf("dview=t")
							//fmt.Fprintf(w, "Preparing text...")
							s := bufio.NewScanner(bytes.NewReader(cStr))
							s.Scan()
							for s.Scan() {
								fmt.Fprintf(w, "%v<br>", fmt.Sprintf("%v", s.Text()))
							}
							return
					}
				} else {
					//fmt.Fprintf(w, "<pre>%v</pre>", string(cStr))
					w.Header().Set(`Content-Type`, `text/plain`)
					disp := fmt.Sprintf("attachment; filename=%v", fileName)
					w.Header().Set(`Content-Disposition`, disp)
					w.Write(cStr)
					return
				}
			}
			return
		case "TEXT-TO-SPEECH":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			CONTENT := r.FormValue("CONTENT")
			if CONTENT == "" {
				if err := textToSpeechBody.Execute(w, ""); err != nil {
				  panic(err)
				}
			} else {
				CONTENT_TEXT := ""
				BLOB_KEY := contentCheckSid(w,r,CONTENT)
				if BLOB_KEY != "" {
					CONTENT_TEXT = getBlobText(w, r, BLOB_KEY)
				} else {
					if err := textToSpeechBody.Execute(w, "Invalid content format. Only SID format is allowed."); err != nil {
					  panic(err)
					}
				}
				if err := textToSpeechBody.Execute(w, CONTENT_TEXT); err != nil {
				  panic(err)
				}
			}
			return
		case "COMPILE":
			CODE := r.FormValue("CODE")
			decoded_str, _ := base64.StdEncoding.DecodeString(CODE)
			if err := playGoBody.Execute(w, string(decoded_str)); err != nil {
			  panic(err)
			}
			return

		case "JSOTTO":
			CODE := r.FormValue("CODE")
			decoded_str, _ := base64.StdEncoding.DecodeString(CODE)
			//if err := playGoBody.Execute(w, string(decoded_str)); err != nil {
			//  panic(err)
			//}
			fmt.Fprintf(w,"%v", decoded_str)
			vm := otto.New()
			_, err := vm.Run(decoded_str)
			if err != nil {
				fmt.Fprintf(w,"ERROR: %v", err)
				return 
			}

			if value, err := vm.Get("z"); err == nil {
			    if value_int, err := value.ToInteger(); err == nil {
				fmt.Fprintf(w, "z=%v", value_int)
			    }
			}

			return
		case "GET_UP_URL":
			ulapphDebug(w,r, "info", fmt.Sprintf("GET_UP_URL: %v", r.FormValue("SID")))
			if EDIT_FUNC2 != "SAVE_TEXT" {
				SID := r.FormValue("SID")
				//check if this is github save
				switch {
					case strings.Index(SID, "GITHUB_CONTENT@888@") != -1:
							csn2 := getUpUrlString(w,r,"/upload-media")
							uploadURL3 := csn2
							w.Header().Set("Access-Control-Allow-Origin", "*")
							w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
							writeHTMLHeader(w, 200)
							fmt.Fprintf(w, "%v",uploadURL3)	
							return
				}
				switch SID {
                    			case "NEWTEXT":
                        			//log.Printf("NEWTEXT")
						csn2 := getUpUrlString(w,r,"/upload-media")
                        			uploadURL3 := csn2
						w.Header().Set("Access-Control-Allow-Origin", "*")
						w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
                        			writeHTMLHeader(w, 200)
                        			//log.Printf("uploadURL3: %v", uploadURL3)
						fmt.Fprintf(w, "%v",uploadURL3)	
					case "NEWSLIDE":
						csn2 := getUpUrlString(w,r,"/upload-slides")
						uploadURL3 := csn2
						w.Header().Set("Access-Control-Allow-Origin", "*")
						w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
						writeHTMLHeader(w, 200)
						fmt.Fprintf(w, "%v",uploadURL3)	
					case "NEWARTICLE":
						csn2 := getUpUrlString(w,r,"/upload-articles")
						uploadURL3 := csn2
						w.Header().Set("Access-Control-Allow-Origin", "*")
						w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
						writeHTMLHeader(w, 200)
						fmt.Fprintf(w, "%v",uploadURL3)
					default:
						SPL := strings.Split(SID,"-")
						if len(SPL[0]) > 1 {
							TARGET := SPL[0]
							//uploadURL3 := ""
							switch TARGET {
								case "TDSSLIDE":
									csn2 := getUpUrlString(w,r,"/upload-slides")
									uploadURL3 := csn2
									w.Header().Set("Access-Control-Allow-Origin", "*")
									w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
									writeHTMLHeader(w, 200)
									fmt.Fprintf(w, "%v",uploadURL3)
								case "TDSARTL":
									csn2 := getUpUrlString(w,r,"/upload-articles")
									uploadURL3 := csn2
									w.Header().Set("Access-Control-Allow-Origin", "*")
									w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
									writeHTMLHeader(w, 200)
									fmt.Fprintf(w, "%v",uploadURL3)
                                				case "TDSMEDIA":
									csn2 := getUpUrlString(w,r,"/upload-media")
                                    					uploadURL3 := csn2
									w.Header().Set("Access-Control-Allow-Origin", "*")
									w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
									writeHTMLHeader(w, 200)
									fmt.Fprintf(w, "%v",uploadURL3)
									ulapphDebug(w,r, "info", fmt.Sprintf("uploadURL3: %v", uploadURL3))
							}
						}
				}
			}
			return
        case "SAVE_TEXT":
            //log.Printf("SAVE_TEXT")
			VAL_TEXT := r.FormValue("VAL_TEXT")
            //D0086
            SID := r.FormValue("SID")
            //log.Printf("SID: %v", SID)
            //D0086
            ctx := context.Background()
            inpData := strings.NewReader(VAL_TEXT)
            public := false
            if SID == "" {
                log.Fatalf("No SID!")
            }
            //_, objAttrs, err := uploadGcsObject(ctx, inpData, SID, public)
            _, _, err := uploadGcsObject(ctx, inpData, SID, public)
            if err != nil {
                switch err {
                case storage.ErrBucketNotExist:
                    log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
                default:
                    log.Fatalf("ERROR: %v", err)
                }
            }

            //log.Printf("URL: %s", objectURL(objAttrs))
            //log.Printf("MediaURL: %s", objAttrs.MediaLink)
            //log.Printf("Size: %d", objAttrs.Size)
            //log.Printf("MD5: %x", objAttrs.MD5)
            //log.Printf("objAttrs: %+v", objAttrs)
            return
        case "GET_TEXT":
			//log.Printf("GET_TEXT")
			KEY_TEXT := r.FormValue("KEY_TEXT")
			FL_DESKTOP := checkDesktop(w,r)
			lbs := ""
			if FL_DESKTOP == true {
				lbs = "\n"
			} else {
				lbs = "<br>"
			}
			switch KEY_TEXT {
				case "NEWTEXT":
					//D0070
					TSID := r.FormValue("TEMPLATE_SID")
					//log.Printf("TSID: %v", TSID)
					if TSID != "" {
						//get sample text template
						BLOB_KEY := contentCheckSid(w,r,TSID)
						//log.Printf("BLOB_KEY: %v", BLOB_KEY)
						blobByte := getBlobByte(w, r, BLOB_KEY)
						writeHTMLHeader(w, 200)
						w.Write(blobByte)
						return
					}
					var buf bytes.Buffer
					buf.WriteString(fmt.Sprintf("Sample Text file%v", lbs))
					buf.WriteString(fmt.Sprintf("You can treat this as your notepad.%v", lbs))
					writeHTMLHeader(w, 200)
					w.Write(buf.Bytes())
					return
				case "NEWSLIDE":
					var buf bytes.Buffer
					buf.WriteString(fmt.Sprintf("Sample Title%v", lbs))
					buf.WriteString(fmt.Sprintf("Sample Sub-title%v", lbs))
					const layout = "2 Jan 2006"
					t := time.Now().Local()
					buf.WriteString(fmt.Sprintf("%v", t.Format(layout)))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("%v%v", APP_DESC, lbs))
					buf.WriteString(fmt.Sprintf("Company/School Name%v", lbs))
					buf.WriteString(fmt.Sprintf("%v%v", getSchemeUrl(w,r), lbs))
					_, uid := checkSession(w,r)
					if uid != "" {
						buf.WriteString(fmt.Sprintf("%v%v", uid, lbs))
					} else {
						buf.WriteString(fmt.Sprintf("sample@gmail.com%v", lbs))
					}
					
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Sample Section 1%v", lbs))
					buf.WriteString(fmt.Sprintf("- List here%v", lbs))
					buf.WriteString(fmt.Sprintf(".link %v Sample Link%v", getSchemeUrl(w,r), lbs))
					buf.WriteString(fmt.Sprintf("- Another list%v", lbs))
					buf.WriteString(fmt.Sprintf("- Some new list%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Sample Section 2%v", lbs))
					buf.WriteString(fmt.Sprintf("- List here%v", lbs))
					buf.WriteString(fmt.Sprintf("[[%v][S0109]]%v", getSchemeUrl(w,r), lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Sample Section 3%v", lbs))
					buf.WriteString(fmt.Sprintf(".image https://golang.org/doc/gopher/gopherbw.png 600 900%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Sample Section 4%v", lbs))
					buf.WriteString(fmt.Sprintf(".image https://talks.golang.org/2012/chat/gophers.jpg 600 900%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
 
					writeHTMLHeader(w, 200)
					w.Write(buf.Bytes())
					return
					
				case "NEWARTICLE":
					var buf bytes.Buffer
					buf.WriteString(fmt.Sprintf("Main Article Title!%v", lbs))
					buf.WriteString(fmt.Sprintf("Sub-title here%v", lbs))
					const layout = "2 Jan 2006"
					t := time.Now().Local()
					buf.WriteString(fmt.Sprintf("%v", t.Format(layout)))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("%v%v", APP_DESC, lbs))
					buf.WriteString(fmt.Sprintf("Company/School Name%v", lbs))
					buf.WriteString(fmt.Sprintf("%v%v", getSchemeUrl(w,r), lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* My Hello world article%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("This is my sample article. You can put any sentences or paragraphs here. This can be a very long text.%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Another section here%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("All sections starts with asterisks. %v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Section with Image%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("You can put an image, a link or an iframe to your articles.%v", lbs))
					buf.WriteString(fmt.Sprintf(".image https://www.linuxidc.com/upload/2015_03/150302124510391.png%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* A section with Youtube iframe%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf(".iframe https://youtu.be/2Kg7JpA2JSQ%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* You can also put links such as links to your favourite videos:%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("[[https://youtu.be/CnYtWWDor2s][S0110]]%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
 
					writeHTMLHeader(w, 200)
					w.Write(buf.Bytes())
					return
				default:
					switch {
						case strings.Index(KEY_TEXT, "GITHUB_CONTENT@888@") != -1:
							//possible KEY_TEXT is GITHUB_CONTENT@888@
							gcs := getStrMemcacheValueByKey(w,r,KEY_TEXT)
							writeHTMLHeader(w, 200)
							//w.Write(gcb)
							w.Write([]byte(gcs))
							return							
						
                        default:
							BLOB_KEY := contentCheckSid(w,r,KEY_TEXT)
							var buf bytes.Buffer
                            blobBytes, err := readBytesFromGcsFileText(w,r,BLOB_KEY)
                            if err != nil {
                                log.Fatalf("ERROR: readBytesFromGcsFileText(): %v", err)
                            }
                            s := bufio.NewScanner(bytes.NewReader(blobBytes))
							sbuf := make([]byte, 0, 64*1024)
							s.Buffer(sbuf, 1024*1024)
							lctr := 0
							for s.Scan() {
								lctr++
								if EDIT_MODE == "TINY" {
									buf.WriteString(fmt.Sprintf("%v<br>", s.Text()))
								} else {
									buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
								}
							}
 
							writeHTMLHeader(w, 200)
							w.Write(buf.Bytes())
							return
					}
			}
 
		case "TINY":
			if err := htmlEditorTinyMCE.Execute(w, ""); err != nil {
				 panic(err)
			}
			return
		case "ACE-LOCAL":
			SID := r.FormValue("SID")
			UID := r.FormValue("UID")
			BLOB_KEY := r.FormValue("BLOB_KEY")
			ulapphDebug(w,r, "info", fmt.Sprintf("BLOB_KEY: %v", BLOB_KEY))
			preText := ""
			switch SID {
				case "NEWTEXT":
					lbs := "\n"
					var buf bytes.Buffer
					buf.WriteString(fmt.Sprintf("Sample Text file%v", lbs))
					buf.WriteString(fmt.Sprintf("You can treat this as your notepad.%v", lbs))
					preText = buf.String()
				case "NEWSLIDE":
					lbs := "\n"
					var buf bytes.Buffer
					buf.WriteString(fmt.Sprintf("Sample Title%v", lbs))
					buf.WriteString(fmt.Sprintf("Sample Sub-title%v", lbs))
					const layout = "2 Jan 2006"
					t := time.Now().Local()
					buf.WriteString(fmt.Sprintf("%v", t.Format(layout)))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("%v%v", APP_DESC, lbs))
					buf.WriteString(fmt.Sprintf("Company/School Name%v", lbs))
					buf.WriteString(fmt.Sprintf("%v%v", getSchemeUrl(w,r), lbs))
					_, uid := checkSession(w,r)
					if uid != "" {
						buf.WriteString(fmt.Sprintf("%v%v", uid, lbs))
					} else {
						buf.WriteString(fmt.Sprintf("sample@gmail.com%v", lbs))
					}
					
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Sample Section 1%v", lbs))
					buf.WriteString(fmt.Sprintf("- List here%v", lbs))
					buf.WriteString(fmt.Sprintf(".link %v Sample Link%v", getSchemeUrl(w,r), lbs))
					buf.WriteString(fmt.Sprintf("- Another list%v", lbs))
					buf.WriteString(fmt.Sprintf("- Some new list%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Sample Section 2%v", lbs))
					buf.WriteString(fmt.Sprintf("- List here%v", lbs))
					buf.WriteString(fmt.Sprintf("[[%v][S0109]]%v", getSchemeUrl(w,r), lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Sample Section 3%v", lbs))
					buf.WriteString(fmt.Sprintf(".image https://golang.org/doc/gopher/gopherbw.png 600 900%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Sample Section 4%v", lbs))
					buf.WriteString(fmt.Sprintf(".image https://talks.golang.org/2012/chat/gophers.jpg 600 900%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					preText = buf.String()
				case "NEWARTICLE":
					lbs := "\n"
					var buf bytes.Buffer
					buf.WriteString(fmt.Sprintf("Main Article Title!%v", lbs))
					buf.WriteString(fmt.Sprintf("Sub-title here%v", lbs))
					const layout = "2 Jan 2006"
					t := time.Now().Local()
					buf.WriteString(fmt.Sprintf("%v", t.Format(layout)))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("%v%v", APP_DESC, lbs))
					buf.WriteString(fmt.Sprintf("Company/School Name%v", lbs))
					buf.WriteString(fmt.Sprintf("%v%v", getSchemeUrl(w,r), lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* My Hello world article%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("This is my sample article. You can put any sentences or paragraphs here. This can be a very long text.%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Another section here%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("All sections starts with asterisks. %v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* Section with Image%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("You can put an image, a link or an iframe to your articles.%v", lbs))
					buf.WriteString(fmt.Sprintf(".image https://www.linuxidc.com/upload/2015_03/150302124510391.png%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* A section with Youtube iframe%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf(".iframe https://youtu.be/2Kg7JpA2JSQ%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("* You can also put links such as links to your favourite videos:%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					buf.WriteString(fmt.Sprintf("[[https://youtu.be/CnYtWWDor2s][S0110]]%v", lbs))
					buf.WriteString(fmt.Sprintf("%v", lbs))
					preText = buf.String()
				case "SWFSBLOB":
					//preText = BLOB_KEY
					ulapphDebug(w,r, "info", fmt.Sprintf("case SWFSBLOB: %v", BLOB_KEY))
					BLOB_KEY  = strings.Replace(BLOB_KEY, "https://", "http://", -1)
					ulapphDebug(w,r, "info", fmt.Sprintf("BLOB_KEY: %v", BLOB_KEY))
					swfsData := fetchURL(w,r,BLOB_KEY)
					preText = html.UnescapeString(swfsData)
					//preText = ""

				case "STATIC":
					TEXT := r.FormValue("TEXT")
					TEXT2, err := base64.StdEncoding.DecodeString(TEXT)
					if err != nil {
					}
					preText = html.UnescapeString(string(TEXT2))
				default: 
					preText = `
var x = 100;
var text = "hello, world";
console.log(x);
alert(text);
`
			}
			showAceEditor(w,r,".ace-local",UID,preText)
			return
		case "READER_NEXT":
			
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			SID := r.FormValue("SID")
			CATEGORY := r.FormValue("CATEGORY")
 
 
			switch SID {
				case "NEWTEXT":
					SID = "TDSMEDIA-1"
					CATEGORY = ""
				case "NEWARTICLE":
					SID = "TDSARTL-1"
					CATEGORY = ""
				case "NEWSLIDE":
					SID = "TDSSLIDE-1"
					CATEGORY = ""
			}
			
			SPL := strings.Split(SID,"-")
			TARGET := SPL[0]
			DOC_ID := "0"
			if len(SPL) > 1 {
				DOC_ID = SPL[1]
			}
			docID := str2int(DOC_ID)
			
			FL_CON_FOUND := false
			if CATEGORY != "" {
				switch TARGET {
					case "TDSSLIDE":
						q := datastore.NewQuery("TDSSLIDE").Filter("DOC_ID >", docID)
						//log.Panicf("[S0111]")
						recCount, _  := datastoreClient.Count(c,q)
                        slide := make([]TDSSLIDE, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21230]")
						if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
							 panic(err)
						 }
						for _, p := range slide {
							if p.CATEGORY == CATEGORY {
								FL_CON_FOUND = true
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSSLIDE-%v&CATEGORY=%v", p.DOC_ID, p.CATEGORY)
								http.Redirect(w, r, redURL, http.StatusFound)
								return
							}
						}
						
					case "TDSARTL":
						q := datastore.NewQuery("TDSARTL").Filter("DOC_ID >", docID)
						//log.Panicf("[S0112]")
						recCount, _  := datastoreClient.Count(c,q)
                        article := make([]TDSARTL, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21248]")
						if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
							 panic(err)
						 }
						for _, p := range article {
							if p.CATEGORY == CATEGORY {
								FL_CON_FOUND = true
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSARTL-%v&CATEGORY=%v", p.DOC_ID, p.CATEGORY)
								http.Redirect(w, r, redURL, http.StatusFound)
								return
							}
						}
					case "TDSMEDIA":
						q := datastore.NewQuery("TDSMEDIA").Filter("MEDIA_ID >", docID)
						//log.Panicf("[S0113]")
						recCount, _  := datastoreClient.Count(c,q)
                        media := make([]TDSMEDIA, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21265]")
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
						}
						for _, p := range media {
							if p.DATA_TYPE == "text" && p.CATEGORY == CATEGORY {
								FL_CON_FOUND = true
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSMEDIA-%v&CATEGORY=%v", p.MEDIA_ID, p.CATEGORY)
								http.Redirect(w, r, redURL, http.StatusFound)
								return
							}
						}
				}
			}
			
			if FL_CON_FOUND == false {
				switch TARGET {
					case "TDSSLIDE":
						q := datastore.NewQuery("TDSSLIDE").Filter("DOC_ID >", docID).Limit(1)
						//log.Panicf("[S0114]")
                        slide := make([]TDSSLIDE, 0, 1)
                        //log.Printf("datastoreClient.Get()  [21286]")
						if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
							 panic(err)
						 }
						for _, p := range slide {
							redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSSLIDE-%v&CATEGORY=", p.DOC_ID)
							http.Redirect(w, r, redURL, http.StatusFound)
							return
						}
						
					case "TDSARTL":
						q := datastore.NewQuery("TDSARTL").Filter("DOC_ID >", docID).Limit(1)
						//log.Panicf("[S0115]")
                        article := make([]TDSARTL, 0, 1)
                        //log.Printf("datastoreClient.Get()  [21300]")
						if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
							 panic(err)
						 }
						for _, p := range article {
							redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSARTL-%v&CATEGORY=", p.DOC_ID)
							http.Redirect(w, r, redURL, http.StatusFound)
							return
						}
					case "TDSMEDIA":
						q := datastore.NewQuery("TDSMEDIA").Filter("MEDIA_ID >", docID)
						//log.Panicf("[S0116]")
						recCount, _  := datastoreClient.Count(c,q)
                        media := make([]TDSMEDIA, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21314]")
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
						}
						for _, p := range media {
							if p.DATA_TYPE == "text" {
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSMEDIA-%v&CATEGORY=", p.MEDIA_ID)
								http.Redirect(w, r, redURL, http.StatusFound)
								return
							}
						}
				}
				
			}
			fmt.Fprintf(w, "Sorry, there is a problem looking for content...")
			return
		
		case "READER_PREVIOUS":	
			
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			SID := r.FormValue("SID")
			CATEGORY := r.FormValue("CATEGORY")
			
			switch SID {
				case "NEWTEXT":
					SID = "TDSMEDIA-1"
					CATEGORY = ""
				case "NEWARTICLE":
					SID = "TDSARTL-1"
					CATEGORY = ""
				case "NEWSLIDE":
					SID = "TDSSLIDE-1"
					CATEGORY = ""
			}
			
			SPL := strings.Split(SID,"-")
			TARGET := SPL[0]
			DOC_ID := "0"
			if len(SPL) > 1 {
				DOC_ID = SPL[1]
			}
			docID := str2int(DOC_ID)
			
			FL_CON_FOUND := false
			if CATEGORY != "" {
				switch TARGET {
					case "TDSSLIDE":
						q := datastore.NewQuery("TDSSLIDE").Filter("DOC_ID <", docID)
						//log.Panicf("[S0117]")
						recCount, _  := datastoreClient.Count(c,q)
                        slide := make([]TDSSLIDE, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21366]")
						if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
							 panic(err)
						 }
						for _, p := range slide {
							if p.CATEGORY == CATEGORY {
								FL_CON_FOUND = true
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSSLIDE-%v&CATEGORY=%v", p.DOC_ID, p.CATEGORY)
								http.Redirect(w, r, redURL, http.StatusFound)
								return
							}
						}
						
					case "TDSARTL":
						q := datastore.NewQuery("TDSARTL").Filter("DOC_ID <", docID)
						//log.Panicf("[S0118]")
						recCount, _  := datastoreClient.Count(c,q)
                        article := make([]TDSARTL, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21384]")
						if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
							 panic(err)
						 }
						for _, p := range article {
							if p.CATEGORY == CATEGORY {
								FL_CON_FOUND = true
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSARTL-%v&CATEGORY=%v", p.DOC_ID, p.CATEGORY)
								http.Redirect(w, r, redURL, http.StatusFound)
								return
							}
						}
					case "TDSMEDIA":
						q := datastore.NewQuery("TDSMEDIA").Filter("MEDIA_ID <", docID)
						//log.Panicf("[S0119]")
						recCount, _  := datastoreClient.Count(c,q)
                        media := make([]TDSMEDIA, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21401]")
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
						}
						for _, p := range media {
							if p.DATA_TYPE == "text" && p.CATEGORY == CATEGORY {
								FL_CON_FOUND = true
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSMEDIA-%v&CATEGORY=%v", p.MEDIA_ID, p.CATEGORY)
								http.Redirect(w, r, redURL, http.StatusFound)
								return
							}
						}
				}
			}
			
			if FL_CON_FOUND == false {
				switch TARGET {
					case "TDSSLIDE":
						q := datastore.NewQuery("TDSSLIDE").Filter("DOC_ID <", docID).Limit(1)
						//log.Panicf("[S0120]")
                        slide := make([]TDSSLIDE, 0, 1)
                        //log.Printf("datastoreClient.Get()  [21422]")
						if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
							 panic(err)
						 }
						for _, p := range slide {
							redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSSLIDE-%v&CATEGORY=", p.DOC_ID)
							http.Redirect(w, r, redURL, http.StatusFound)
							return
						}
						
					case "TDSARTL":
						q := datastore.NewQuery("TDSARTL").Filter("DOC_ID <", docID).Limit(1)
						//log.Panicf("[S0121]")
                        article := make([]TDSARTL, 0, 1)
                        //log.Printf("datastoreClient.Get()  [21436]")
						if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
							 panic(err)
						 }
						for _, p := range article {
							redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSARTL-%v&CATEGORY=", p.DOC_ID)
							http.Redirect(w, r, redURL, http.StatusFound)
							return
						}
					case "TDSMEDIA":
						q := datastore.NewQuery("TDSMEDIA").Filter("MEDIA_ID <", docID)
						//log.Panicf("[S0122]")
						recCount, _  := datastoreClient.Count(c,q)
                        media := make([]TDSMEDIA, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21450]")
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
						}
						for _, p := range media {
							if p.DATA_TYPE == "text" {
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSMEDIA-%v&CATEGORY=", p.MEDIA_ID)
								http.Redirect(w, r, redURL, http.StatusFound)
								return
							}
						}
				}
			}
			
			fmt.Fprintf(w, "Sorry, there is a problem looking for content...")
			
			return	
			
		case "READER_RANDOM":	
			
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			SID := r.FormValue("SID")
			CATEGORY := r.FormValue("CATEGORY")
			
			SPL := strings.Split(SID,"-")
			TARGET := SPL[0]
			
			FL_CON_FOUND := false
			if CATEGORY != "" {
				switch TARGET {
					case "TDSSLIDE":
						q := datastore.NewQuery("TDSSLIDE").Filter("CATEGORY =", CATEGORY)
						//log.Panicf("[S0123]")
						recCount, _  := datastoreClient.Count(c,q)
						myran := randNum(1, recCount)
                        slide := make([]TDSSLIDE, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21487]")
						if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
							 panic(err)
						 }
						ctr := 0
						for _, p := range slide {
							ctr++
							if myran == ctr {
								FL_CON_FOUND = true
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSSLIDE-%v&CATEGORY=%v", p.DOC_ID, p.CATEGORY)
								http.Redirect(w, r, redURL, http.StatusFound)
								//return
								break
							}
						}
						
					case "TDSARTL":
						q := datastore.NewQuery("TDSARTL").Filter("CATEGORY =", CATEGORY)
						//log.Panicf("[S0124]")
						recCount, _  := datastoreClient.Count(c,q)
						myran := randNum(1, recCount)
                        article := make([]TDSARTL, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21509]")
						if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
							 panic(err)
						 }
						 ctr := 0
						for _, p := range article {
							ctr++
							if myran == ctr {
								FL_CON_FOUND = true
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSARTL-%v&CATEGORY=%v", p.DOC_ID, p.CATEGORY)
								http.Redirect(w, r, redURL, http.StatusFound)
								//return
								break
							}
 
						}
					case "TDSMEDIA":
						q := datastore.NewQuery("TDSMEDIA").Filter("CATEGORY =", CATEGORY)
						//log.Panicf("[S0125]")
						recCount, _  := datastoreClient.Count(c,q)
						myran := randNum(1, recCount)
                        media := make([]TDSMEDIA, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21531]")
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
						}
						ctr := 0
						for _, p := range media {
							if p.DATA_TYPE == "text" {
								ctr++
								if myran == ctr {
									FL_CON_FOUND = true
									redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSMEDIA-%v&CATEGORY=%v", p.MEDIA_ID, p.CATEGORY)
									http.Redirect(w, r, redURL, http.StatusFound)
									//return
									break
								}
							}
						}
				}
			}
			
			if FL_CON_FOUND == false {
				switch TARGET {
					case "TDSSLIDE":
						q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID")
						//log.Panicf("[S0126]")
						recCount, _  := datastoreClient.Count(c,q)
						myran := randNum(1, recCount)
                        slide := make([]TDSSLIDE, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21559]")
						if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
							 panic(err)
						 }
						 ctr := 0
						for _, p := range slide {
							ctr++
							if myran == ctr {
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSSLIDE-%v&CATEGORY=", p.DOC_ID)
								http.Redirect(w, r, redURL, http.StatusFound)
								//return
								break
							}
						}
						
					case "TDSARTL":
						q := datastore.NewQuery("TDSARTL").Order("-DOC_ID")
						//log.Panicf("[S0127]")
						recCount, _  := datastoreClient.Count(c,q)
						myran := randNum(1, recCount)
                        article := make([]TDSARTL, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21580]")
						if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
							 panic(err)
						 }
						 ctr := 0
						for _, p := range article {
							ctr++
							if myran == ctr {
								redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSARTL-%v&CATEGORY=", p.DOC_ID)
								http.Redirect(w, r, redURL, http.StatusFound)
								//return
								break
							}
						}
					case "TDSMEDIA":
						q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID")
						//log.Panicf("[S0128]")
						recCount, _  := datastoreClient.Count(c,q)
						myran := randNum(1, recCount)
                        media := make([]TDSMEDIA, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [21600]")
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
						}
						ctr := 0
						for _, p := range media {
							if p.DATA_TYPE == "text" {
								ctr++
								if myran == ctr {
									redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=TDSMEDIA-%v&CATEGORY=", p.MEDIA_ID)
									http.Redirect(w, r, redURL, http.StatusFound)
									//return
									break
								}
							}
						}
				}
			}
			
			fmt.Fprintf(w, "Sorry, there is a problem looking for content...")
			
			return
		case "READER":
			ulapphDebug(w,r, "info", "case READER:")
			if SYS_STATELESS_SERVER == true {
				SID := r.FormValue("SID")
				uid := r.FormValue("uid")
				UID := r.FormValue("UID")
				url := fmt.Sprintf("/editor?EDIT_FUNC=ACE-LOCAL&SID=%v&UID=%v&uid=%v", SID, UID, uid)
				http.Redirect(w, r, url, http.StatusFound)
				return
			}
			PREF_EDIT := r.FormValue("PREF_EDIT")
			FL_DESKTOP := checkDesktop(w,r)
			ulapphDebug(w,r, "info", fmt.Sprintf("FL_DESKTOP: %v", FL_DESKTOP))
			if PREF_EDIT == "TINY" {
				if err := htmlEditorTinyMCE.Execute(w, ""); err != nil {
					 panic(err)
				}
			} else {
				if FL_DESKTOP == true {
					uag := r.UserAgent()
					ua := user_agent.New(uag)
					nameb, _ := ua.Browser()
			
					if isAceReaderCapable[nameb] == false {
						//redirect
						url := strings.Replace(r.URL.String(), "EDIT_FUNC=READER", "EDIT_FUNC=", -1)
						http.Redirect(w, r, url, http.StatusFound)
						return
					}
					if err := htmlEditorHeaderReader.Execute(w, ""); err != nil {
						 panic(err)
					}
					
					_, uid := checkSession(w,r)
					ulapphDebug(w,r, "info", "uid:"+uid)
					fmt.Fprintf(w, "	<input type=\"hidden\" id=\"UID\" value=\"%v\"/>", uid)
 
					
					TEMPDATA := TEMPSTRUCT{
						STR_FILLER1: getActiveColor(w,r),
					}
					ulapphDebug(w,r, "info", "STR_FILLER1:"+TEMPDATA.STR_FILLER1)
					if err := htmlEditorBodyReader.Execute(w, &TEMPDATA); err != nil {
						 panic(err)
					}
 
					if err := htmlEditorContentReader.Execute(w, ""); err != nil {
						 panic(err)
					}
					
					if err := htmlEditorFooterReader.Execute(w, ""); err != nil {
						 panic(err)
					}
				} else {
 
					if err := htmlEditorTinyMCE.Execute(w, ""); err != nil {
						 panic(err)
					}
				}
			}
			return

		case "APPEND":
			//log.Printf("APPEND...")
			AP_FUNC := r.FormValue("AP_FUNC")
			UID := r.FormValue("UID")
			//log.Printf("UID: %v", UID)
			if UID == "" {
				fmt.Fprintf(w, "Invalid operation!")
				log.Panicf("Invalid user!")
				return
			}			
			
			switch AP_FUNC {
				case "APPEND-UWM":
					//log.Printf("APPEND-UWM...")
					UWM := r.FormValue("UWM")
					SID := getUWMSource(w,r,UID,UWM)
					if SID == "" {
						//fmt.Fprintf(w, "Error operation! No existing SID!")
						log.Panicf("Invalid SID!")
						fmt.Fprintf(w, "No UWM source has been set for UWM%v.", UWM)
						return					
					}
					thisCont := r.FormValue("TEXT")
					//log.Printf("appendToSid...")
					err := appendToSid(w,r,UID,AP_FUNC,SID,thisCont)	
					if err != nil {
						w.WriteHeader(400)
						fmt.Fprintf(w, "Error operation! %v", err)
						return				
					} else {
						w.WriteHeader(200)
						w.Write([]byte(SID))
						return							
					}					
				
				default:
					fmt.Fprintf(w, "Invalid operation! No function!")
					log.Panicf("Invalid operation!")
					return					
				
			}
			//return
			
		default:
			if SYS_STATELESS_SERVER == true {
				SID := r.FormValue("SID")
				uid := r.FormValue("uid")
				UID := r.FormValue("UID")
				url := fmt.Sprintf("/editor?EDIT_FUNC=ACE-LOCAL&SID=%v&UID=%v&uid=%v", SID, UID, uid)
				http.Redirect(w, r, url, http.StatusFound)
				return
			}
			uag := r.UserAgent()
			ua := user_agent.New(uag)
			nameb, _ := ua.Browser()
	
			if isAceReaderCapable[nameb] == true {
				//redirect
				url := fmt.Sprintf("%v&EDIT_FUNC=READER", r.URL.String())
				http.Redirect(w, r, url, http.StatusFound)
				return
			}
	
			FL_DESKTOP := checkDesktop(w,r)
			PREF_EDIT := r.FormValue("PREF_EDIT")
			if PREF_EDIT == "TINY" {
				if err := htmlEditorTinyMCE.Execute(w, ""); err != nil {
					 panic(err)
				}
			} else {
				if FL_DESKTOP == true {
					if err := htmlEditorHeader.Execute(w, ""); err != nil {
						 panic(err)
					}
					
					_, uid := checkSession(w,r)
					
					msg := ""
					if uid != "" {
						msg = fmt.Sprintf("You are logged in as<br> <b>%v</b>", uid)
						fmt.Fprintf(w, "	<input type=\"hidden\" id=\"UID\" value=\"%v\"/>", uid)
					} else {
						msg = fmt.Sprintf("Hi <b>Guest</b>,<br> please <a href=\"/?q=home\" target=\"google\">login</a><br> to save slides.")
						fmt.Fprintf(w, "	<input type=\"hidden\" id=\"UID\" value=\"%v\"/>", uid)
						
					}
					
					TEMPDATA := TEMPSTRUCT2{
						STR_FILLER1: getActiveColor(w,r),
						HTM_FILLER1: template.HTML(msg),
					}
					
					if err := htmlEditorBody.Execute(w, &TEMPDATA); err != nil {
						 panic(err)
					}
 
					if err := htmlEditorContent.Execute(w, ""); err != nil {
						 panic(err)
					}
					
					if err := htmlEditorFooter.Execute(w, ""); err != nil {
						 panic(err)
					}
				} else {
 
					if err := htmlEditorTinyMCE.Execute(w, ""); err != nil {
						 panic(err)
					}
				}
			}
			return
	
	}
}
//D0086
func objectURL(objAttrs *storage.ObjectAttrs) string {
	return fmt.Sprintf("https://storage.googleapis.com/%s/%s", objAttrs.Bucket, objAttrs.Name)
}
//D0086
func mediaURL(name string) string {
    bucket := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	return fmt.Sprintf("https://storage.cloud.google.com/%s/%s", bucket, name)
}
//D0086
func uploadGcsObject(ctx context.Context, r io.Reader, name string, public bool) (*storage.ObjectHandle, *storage.ObjectAttrs, error) {
	if SYS_STATELESS_SERVER == true {
		return nil, nil, nil
	}
    bucket := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	client, err := storage.NewClient(ctx)
	if err != nil {
		return nil, nil, err
	}
	bh := client.Bucket(bucket)
	// Next check if the bucket exists
	if _, err = bh.Attrs(ctx); err != nil {
		return nil, nil, err
	}
	obj := bh.Object(name)
	w := obj.NewWriter(ctx)
	if _, err := io.Copy(w, r); err != nil {
		return nil, nil, err
	}
	if err := w.Close(); err != nil {
		return nil, nil, err
	}
	if public {
		if err := obj.ACL().Set(ctx, storage.AllUsers, storage.RoleReader); err != nil {
			return nil, nil, err
		}
	}
	attrs, err := obj.Attrs(ctx)
	return obj, attrs, err
}
//D0086
func deleteGcsObject(ctx context.Context, name string) error {
	if SYS_STATELESS_SERVER == true {
		return nil
	}
    //log.Printf("deleteGcsObject()")
    bucket := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	client, err := storage.NewClient(ctx)
	if err != nil {
		return err
	}
    o := client.Bucket(bucket).Object(name)
    if err := o.Delete(ctx); err != nil {
        return err
    }
    return err
}
//D0089
func updateGcsObjPermission(name, FL_SHARED, DOC_STAT string) error {
	if SYS_STATELESS_SERVER == true {
		return nil
	}
    ctx := context.Background()
    bucket := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	client, err := storage.NewClient(ctx)
	if err != nil {
		return err
	}
    o := client.Bucket(bucket).Object(name)
    switch {
        case FL_SHARED == "N":
            if err := o.ACL().Delete(ctx, storage.AllUsers); err != nil {
                //return err
            }
            if err := o.ACL().Delete(ctx, storage.AllAuthenticatedUsers); err != nil {
                //return err
            }
        case FL_SHARED == "Y" && DOC_STAT == "ULAPPH Only":
            if err := o.ACL().Set(ctx, storage.AllAuthenticatedUsers, storage.RoleReader); err != nil {
                return err
            }
        case FL_SHARED == "Y" && DOC_STAT == "Worldwide":
            if err := o.ACL().Set(ctx, storage.AllUsers, storage.RoleReader); err != nil {
                return err
            }

    }
    return err
}
func listGcsObject(prefix, delim string) (*storage.ObjectIterator, error) {
	if SYS_STATELESS_SERVER == true {
		return nil, nil
	}
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
    // Prefixes and delimiters can be used to emulate directory listings.
    // Prefixes can be used filter objects starting with prefix.
    // The delimiter argument can be used to restrict the results to only the
    // objects in the given "directory". Without the delimiter, the entire  tree
    // under the prefix is returned.
    //
    // For example, given these blobs:
    //   /a/1.txt
    //   /a/b/2.txt
    //
    // If you just specify prefix="a/", you'll get back:
    //   /a/1.txt
    //   /a/b/2.txt
    //
    // However, if you specify prefix="a/" and delim="/", you'll get back:
    //   /a/1.txt
    it := client.Bucket(BUCKET_NAME).Objects(ctx, &storage.Query{
            Prefix:    prefix,
            Delimiter: delim,
    })
    return it, err
}
//D0086
func readGcsObject(BLOB_KEY string) ([]byte, error) {
	if SYS_STATELESS_SERVER == true {
		return nil, nil
	}
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(BLOB_KEY).NewReader(ctx)
	if err != nil {
        //log.Printf("readGcsObject() ERROR: client.Bucket() read error: %v BLOB_KEY: %v", err, BLOB_KEY)
        return nil, err
	}
	defer rc.Close()
    data, err := ioutil.ReadAll(rc)
    if err != nil {
            return nil, err
    }
    return data, nil
}
//Read a GCS file and copy to another file
func readCopyGcsObject(BLOB_KEY, DEST string) error {
	if SYS_STATELESS_SERVER == true {
		return nil
	}
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(BLOB_KEY).NewReader(ctx)
	if err != nil {
        //log.Printf("readGcsObject() ERROR: client.Bucket() read error: %v BLOB_KEY: %v", err, BLOB_KEY)
        return err
	}
	defer rc.Close()
    bData, err := ioutil.ReadAll(rc)
    if err != nil {
            return err
    }
    //copy to new file
    public := false
    //_, objAttrs, err := uploadGcsObject(ctx, bytes.NewReader(bData), DEST, public)
    _, _, err = uploadGcsObject(ctx, bytes.NewReader(bData), DEST, public)
    if err != nil {
        switch err {
        case storage.ErrBucketNotExist:
            log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
        default:
            log.Fatalf("ERROR: %v", err)
        }
    }
    //log.Printf("URL: %s", objectURL(objAttrs))
    //log.Printf("MediaURL: %s", objAttrs.MediaLink)
    //log.Printf("Size: %d", objAttrs.Size)
    //log.Printf("MD5: %x", objAttrs.MD5)
    //log.Printf("objAttrs: %+v", objAttrs)
    ///log.Printf("UUID: %v", UUID)
    return nil
}
//D0070
func timelineAddEventMedia(w http.ResponseWriter, r *http.Request, uid, GROUP_ID, kword,contCat string, start, end int, tjs *Timelinejs, p *TDSMEDIA) bool {
	dks := TimelineEvent{}
	sd := TimelineStartDate{}
	ed := TimelineEndDate{}
	tm := TimelineEventMedia{}
	tt := TimelineText{}
	thisDU := p.DT_UPLOAD
	flAdded := false
	if thisDU >= start && thisDU <= end && (p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
		//fmt.Fprintf(w, "%v\n", p)
		//split DT_UPLOAD
		//20180824124749
		STR := fmt.Sprintf("%v", p.DT_UPLOAD)
		year := STR[0:4] //2018
		month := STR[4:6] //08
		day := STR[6:8] //24
		hour := STR[8:10] //12 
		minute := STR[10:12] //47
		sec := STR[12:14] //49
		sd.Year = year
		sd.Month = month
		sd.Day = day
		sd.Hour = hour
		sd.Minute = minute
		sd.Second = sec
		ed.Year = year
		ed.Month = month
		ed.Day = day
		ed.Hour = hour
		ed.Minute = minute
		ed.Second = sec
		tm.URL = p.IMG_URL
		reqStr := fmt.Sprintf("/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", p.MEDIA_ID, p.MEDIA_ID)
		tm.Link = reqStr 
		tm.Caption = fmt.Sprintf("%v/TDSMEDIA-%v/%v/%v", p.CATEGORY, p.MEDIA_ID, p.DATA_TYPE, p.MIME_TYPE)
		tm.Credit = "Copyright (c) ULAPPH Cloud Desktop" 
		//tm.URL = p.TAGS
		tt.Headline = p.TITLE
        ///search?f=TDSMEDIA-UPD&q=50
        
        inDocLink := fmt.Sprintf("/search?t=InDoc&IDX=%v&SID=TDSMEDIA-%v&q=%v", "IDX_TDSMEDIA", p.MEDIA_ID, kword)
		tt.Text = fmt.Sprintf("%v<br>[ TDSMEDIA-%v ][ <a href=\"/search?f=TDSMEDIA-UPD&q=%v\" target=\"tjs\">Update</a> ][ <a href=\"%v\" target=\"tjs\">View</a> ][ <a href=\"%v\" target=\"ids\">View</a> ]", p.DESC, p.MEDIA_ID, p.MEDIA_ID, reqStr, inDocLink)
		dks.StartDate = sd
		dks.EndDate = ed
		dks.Media = tm
		dks.Text = tt
		if contCat == "" {
			tjs.AllEvents = append(tjs.AllEvents, dks) 
			flAdded = true 
		}else {
			if p.CATEGORY == contCat {
				//fmt.Fprintf(w, "%v\n", p)
				tjs.AllEvents = append(tjs.AllEvents, dks) 
				flAdded = true
			}

		}
	}
	return flAdded
}
//D0096
//timeline for the CCTV images from cloud storage
func timelineShowCCTV(w http.ResponseWriter, r *http.Request, uid, GROUP_ID, contCat string, start, end int, p *storage.ObjectAttrs, tjs *Timelinejs) bool {
	//c := appengine.NewContext(r)
	//log.Printf("timelineShowCCTV called")
	//log.Printf("uid: %v", uid)
	//log.Printf("GROUP_ID: %v", GROUP_ID)
	//log.Printf("contCat: %v", contCat)
	//log.Printf("start: %v", start)
    //log.Printf("end: %v", end)
	dks := TimelineEvent{}
	sd := TimelineStartDate{}
	ed := TimelineEndDate{}
	tm := TimelineEventMedia{}
	tt := TimelineText{}
    gct, _ := time.Parse("2006-01-02 15:04:05 +0000 UTC", fmt.Sprintf("%v",p.Updated))
	gctmp := fmt.Sprintf("%v", gct.Format("20060102150405"))
    thisDU := str2int(gctmp)
	if ((start <= 0 && end <= 0) || (thisDU >= start && thisDU <= end))  {
        gcsUrl := fmt.Sprintf("https://storage.cloud.google.com/%s/%s", p.Bucket, p.Name)
		//adUrl := fmt.Sprintf("/media?FUNC_CODE=DELETE&BLOB_KEY=%v", p.Name)
		//upUrl := fmt.Sprintf("/media?FUNC_CODE=VIEW&BLOB_KEY=%v", p.Name)
        //shUrl := fmt.Sprintf("/share?SH_FUNC=all&title=%v&url=%v", "ULAPPH-CCTV", gcsUrl)
        SPL := strings.Split(p.Name, "/")
        thisName := SPL[len(SPL)-1]
		//fmt.Fprintf(w, "%v\n", p)
		//split DT_UPLOAD
		//20180824124749
		STR := fmt.Sprintf("%v", gctmp)
		year := STR[0:4] //2018
		month := STR[4:6] //08
		day := STR[6:8] //24
		hour := STR[8:10] //12 
		minute := STR[10:12] //47
		sec := STR[12:14] //49
		sd.Year = year
		sd.Month = month
		sd.Day = day
		sd.Hour = hour
		sd.Minute = minute
		sd.Second = sec
		ed.Year = year
		ed.Month = month
		ed.Day = day
		ed.Hour = hour
		ed.Minute = minute
		ed.Second = sec
		tm.URL = gcsUrl
        //reqStr := fmt.Sprintf("/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", p.MEDIA_ID, p.MEDIA_ID)
        reqStr := gcsUrl
		tm.Link = reqStr 
        //tm.Caption = fmt.Sprintf("%v/TDSMEDIA-%v/%v/%v", p.CATEGORY, p.MEDIA_ID, p.DATA_TYPE, p.MIME_TYPE)
        tm.Caption = gctmp
		tm.Credit = "Copyright (c) ULAPPH Cloud Desktop" 
		//tm.URL = p.TAGS
        //tt.Headline = p.TITLE
        tt.Headline = gctmp
        ///search?f=TDSMEDIA-UPD&q=50
        
        //inDocLink := fmt.Sprintf("/search?t=InDoc&IDX=%v&SID=TDSMEDIA-%v&q=%v", "IDX_TDSMEDIA", p.MEDIA_ID, kword)
        //tt.Text = fmt.Sprintf("%v<br>[ TDSMEDIA-%v ][ <a href=\"/search?f=TDSMEDIA-UPD&q=%v\" target=\"tjs\">Update</a> ][ <a href=\"%v\" target=\"tjs\">View</a> ][ <a href=\"%v\" target=\"ids\">View</a> ]", p.DESC, p.MEDIA_ID, p.MEDIA_ID, reqStr, inDocLink)
        //tt.Text = fmt.Sprintf("	%v <h3>%v (ID: %v) (N) - [<a href=\"%v\" target=\"%v\" title=\"edit\">E</a>] [<a href=\"%v\" target=\"%v\" title=\"share\">S</a>] - %v [<a href=\"%v\" target=\"%v\" title=\"delete\">D</a>] - %v</h3>", gcsUrl, thisName, thisName, upUrl, thisName, shUrl, thisName, p.Updated, adUrl, "delete", stmpHumanizeStr(fmt.Sprintf("%v",p.Updated)))
        tt.Text = fmt.Sprintf("%v - %v", thisName, stmpHumanizeStr(fmt.Sprintf("%v",p.Updated)))
		dks.StartDate = sd
		dks.EndDate = ed
		dks.Media = tm
		dks.Text = tt
		//if contCat == "" {
		//	tjs.AllEvents = append(tjs.AllEvents, dks) 
		//}else {
		//	if p.CATEGORY == contCat {
				//fmt.Fprintf(w, "%v\n", p)
				tjs.AllEvents = append(tjs.AllEvents, dks) 
		//	}
        //
        //}
        return true
        
    }
    return false
}
//photo galllery for the CCTV images from cloud storage
func photoGalleryShowCCTV(w http.ResponseWriter, r *http.Request, uid, GROUP_ID, contCat string, start, end int, p *storage.ObjectAttrs) []byte {
	//c := appengine.NewContext(r)
	//log.Printf("photoGalleryShowMedia called")
	//log.Printf("uid: %v", uid)
	//log.Printf("GROUP_ID: %v", GROUP_ID)
	//log.Printf("contCat: %v", contCat)
	//log.Printf("start: %v", start)
    //log.Printf("end: %v", end)
	var buffer3 bytes.Buffer
    gct, _ := time.Parse("2006-01-02 15:04:05 +0000 UTC", fmt.Sprintf("%v",p.Updated))
	gctmp := fmt.Sprintf("%v", gct.Format("20060102150405"))
	thisDU := str2int(gctmp)
	if ((start <= 0 && end <= 0) || (thisDU >= start && thisDU <= end))  {
		//var buffer3 bytes.Buffer
		//imgAlt := "img01"
        buffer3.WriteString(fmt.Sprintf("<li>"))
        gcsUrl := fmt.Sprintf("https://storage.cloud.google.com/%s/%s", p.Bucket, p.Name)
		adUrl := fmt.Sprintf("/media?FUNC_CODE=DELETE&BLOB_KEY=%v", p.Name)
		upUrl := fmt.Sprintf("/media?FUNC_CODE=VIEW&BLOB_KEY=%v", p.Name)
        shUrl := fmt.Sprintf("/share?SH_FUNC=all&title=%v&url=%v", "ULAPPH-CCTV", gcsUrl)
        //edwin.d.vinas@gmail.com/TDSMEDIA/CCTV/1/Y2020/M01/D27/H12/20200127120911
        SPL := strings.Split(p.Name, "/")
        thisName := SPL[len(SPL)-1]
		buffer3.WriteString(fmt.Sprintf("	<div data-alt=\"%v\" data-description=\"<h3>%v (ID: %v) (N) - [<a href='%v' target='%v' title='edit'>E</a>] [<a href='%v' target='%v' title='share'>S</a>] - %v [<a href='%v' target='%v' title='delete'>D</a>] - %v</h3>\" data-max-width=\"1800\" data-max-height=\"2400\">", gcsUrl, thisName, thisName, upUrl, thisName, shUrl, thisName, p.Updated, adUrl, "delete", stmpHumanizeStr(fmt.Sprintf("%v",p.Updated))))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"1300\"></div>", gcsUrl))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"1000\"></div>", gcsUrl))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"700\"></div>", gcsUrl))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"300\"></div>", gcsUrl))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"200\"></div>", gcsUrl))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"140\"></div>", gcsUrl))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\"></div>", gcsUrl))
		buffer3.WriteString(fmt.Sprintf("		<noscript>"))
		buffer3.WriteString(fmt.Sprintf("			<img src=\"%v\" title=\"%v\"/>", gcsUrl, p.Name))
		buffer3.WriteString(fmt.Sprintf("		</noscript>"))
		buffer3.WriteString(fmt.Sprintf("	</div>"))
		buffer3.WriteString(fmt.Sprintf("</li>"))
		//w.Write(buffer3.Bytes())
	}
	return buffer3.Bytes()
}
//D0118
func photoGalleryShowMediaStatic(w http.ResponseWriter, r *http.Request, uid, GROUP_ID, contCat string, start, end int, p *TDSMEDIA) {
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
		var buffer3 bytes.Buffer
		imgAlt := "img01"
		buffer3.WriteString(fmt.Sprintf("<li>\n"))
		//adUrl := fmt.Sprintf("/media?FUNC_CODE=DELETE&MEDIA_ID=%v&BLOB_KEY=%v", p.MEDIA_ID, p.BLOB_KEY)
		adUrl := fmt.Sprintf("/media?FUNC_CODE=DELETE&IMG_URL=%v", p.IMG_URL)
		//upUrl := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v", p.MEDIA_ID)
		upUrl := fmt.Sprintf("/media?FUNC_CODE=RENAME&IMG_URL=%v", p.IMG_URL)
		shUrl := fmt.Sprintf("/share?SH_FUNC=all&title=%v&url=%v", p.TITLE, p.IMG_URL)
		if p.PROP != "big_wp" {
			buffer3.WriteString(fmt.Sprintf("	<div data-alt=\"%v\" data-description=\"<h3>%v (ID: %v) (N) - [<a href='%v' target='%v' title='rename'>R</a>] [<a href='%v' target='%v' title='share'>S</a>] - %v [<a href='%v' target='%v' title='delete'>D</a>] - %v</h3>\" data-max-width=\"1800\" data-max-height=\"2400\">\n", imgAlt, p.TITLE, p.MEDIA_ID, upUrl, p.MEDIA_ID, shUrl, p.MEDIA_ID, p.DT_UPLOAD, adUrl, "delete", stmpHumanize(p.DT_UPLOAD)))
		} else {
			buffer3.WriteString(fmt.Sprintf("	<div data-alt=\"%v\" data-description=\"<h3>%v (ID: %v) (Y) - [<a href='%v' target='%v' title='rename'>R</a>] - %v [<a href='%v' target='%v' title='delete'>D</a>] - %v - [<a href='%v' target='%v' title='share'>S</a>]</h3>\" data-max-width=\"1800\" data-max-height=\"2400\">\n", imgAlt, p.TITLE, p.MEDIA_ID, upUrl, p.MEDIA_ID, shUrl, p.MEDIA_ID, p.DT_UPLOAD, adUrl, "delete", stmpHumanize(p.DT_UPLOAD)))
		}
		//buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"1300\"></div>\n", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"1000\"></div>\n", p.IMG_URL))
		//buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"700\"></div>\n", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"300\"></div>\n", p.IMG_URL))
		//buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"200\"></div>\n", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"140\"></div>\n", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\"></div>\n", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<noscript>\n"))
		buffer3.WriteString(fmt.Sprintf("			<img src=\"%v\" title=\"%v\"/>\n", p.IMG_URL, imgAlt))
		buffer3.WriteString(fmt.Sprintf("		</noscript>\n"))
		buffer3.WriteString(fmt.Sprintf("	</div>\n"))
		buffer3.WriteString(fmt.Sprintf("</li>\n"))
		buffer3.WriteString(fmt.Sprintf("\n"))
		w.Write(buffer3.Bytes())
	}
}

//D0072
func photoGalleryShowMedia(w http.ResponseWriter, r *http.Request, uid, GROUP_ID, contCat string, start, end int, p *TDSMEDIA) {
	//c := appengine.NewContext(r)
	//log.Printf("photoGalleryShowMedia called")
	//log.Printf("uid: %v", uid)
	//log.Printf("GROUP_ID: %v", GROUP_ID)
	//log.Printf("contCat: %v", contCat)
	//log.Printf("start: %v", start)
	//log.Printf("end: %v", end)
	thisDU := p.DT_UPLOAD
	if ((start <= 0 && end <= 0) || (thisDU >= start && thisDU <= end)) && (p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
		var buffer3 bytes.Buffer
		imgAlt := "img01"
		buffer3.WriteString(fmt.Sprintf("<li>"))
		adUrl := fmt.Sprintf("/media?FUNC_CODE=DELETE&MEDIA_ID=%v&BLOB_KEY=%v", p.MEDIA_ID, p.BLOB_KEY)
		upUrl := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v", p.MEDIA_ID)
		shUrl := fmt.Sprintf("/share?SH_FUNC=all&title=%v&url=%v", p.TITLE, p.IMG_URL)
		if p.PROP != "big_wp" {
			buffer3.WriteString(fmt.Sprintf("	<div data-alt=\"%v\" data-description=\"<h3>%v (ID: %v) (N) - [<a href='%v' target='%v' title='edit'>E</a>] [<a href='%v' target='%v' title='share'>S</a>] - %v [<a href='%v' target='%v' title='delete'>D</a>] - %v</h3>\" data-max-width=\"1800\" data-max-height=\"2400\">", imgAlt, p.TITLE, p.MEDIA_ID, upUrl, p.MEDIA_ID, shUrl, p.MEDIA_ID, p.DT_UPLOAD, adUrl, "delete", stmpHumanize(p.DT_UPLOAD)))
		} else {
			buffer3.WriteString(fmt.Sprintf("	<div data-alt=\"%v\" data-description=\"<h3>%v (ID: %v) (Y) - [<a href='%v' target='%v' title='edit'>E</a>] - %v [<a href='%v' target='%v' title='delete'>D</a>] - %v - [<a href='%v' target='%v' title='share'>S</a>]</h3>\" data-max-width=\"1800\" data-max-height=\"2400\">", imgAlt, p.TITLE, p.MEDIA_ID, upUrl, p.MEDIA_ID, shUrl, p.MEDIA_ID, p.DT_UPLOAD, adUrl, "delete", stmpHumanize(p.DT_UPLOAD)))
		}
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"1300\"></div>", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"1000\"></div>", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"700\"></div>", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"300\"></div>", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"200\"></div>", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\" data-min-width=\"140\"></div>", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<div data-src=\"%v\"></div>", p.IMG_URL))
		buffer3.WriteString(fmt.Sprintf("		<noscript>"))
		buffer3.WriteString(fmt.Sprintf("			<img src=\"%v\" title=\"%v\"/>", p.IMG_URL, imgAlt))
		buffer3.WriteString(fmt.Sprintf("		</noscript>"))
		buffer3.WriteString(fmt.Sprintf("	</div>"))
		buffer3.WriteString(fmt.Sprintf("</li>"))
		w.Write(buffer3.Bytes())
	}
}
//D0070
func timelineAddEventArticle(w http.ResponseWriter, r *http.Request, uid, GROUP_ID, kword, contCat string, start, end int, tjs *Timelinejs, p *TDSARTL) bool {
	dks := TimelineEvent{}
	sd := TimelineStartDate{}
	ed := TimelineEndDate{}
	tm := TimelineEventMedia{}
	tt := TimelineText{}
	thisDU := p.DT_UPLOAD
	flAdded := false
	if thisDU >= start && thisDU <= end && (p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
		//fmt.Fprintf(w, "%v\n", p)
		//split DT_UPLOAD
		//20180824124749
		STR := fmt.Sprintf("%v", p.DT_UPLOAD)
		year := STR[0:4] //2018
		month := STR[4:6] //08
		day := STR[6:8] //24
		hour := STR[8:10] //12 
		minute := STR[10:12] //47
		sec := STR[12:14] //49
		sd.Year = year
		sd.Month = month
		sd.Day = day
		sd.Hour = hour
		sd.Minute = minute
		sd.Second = sec
		ed.Year = year
		ed.Month = month
		ed.Day = day
		ed.Hour = hour
		ed.Minute = minute
		ed.Second = sec
		//tm.URL = p.IMG_URL
		tm.URL = p.TAGS
		tt.Headline = p.TITLE
		///search?f=TDSMEDIA-UPD&q=50
		reqStr2 := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.FL_COUNTRY_SPECIFIC)
		tm.Link = reqStr2
		tm.Caption = fmt.Sprintf("%v/TDSARTL-%v/%v/%v", p.CATEGORY, p.DOC_ID, "article", "format")
        tm.Credit = "Copyright (c) ULAPPH Cloud Desktop" 
        inDocLink := fmt.Sprintf("/search?t=InDoc&IDX=%v&SID=TDSARTL-%v&q=%v", "IDX_TDSARTL", p.DOC_ID, kword)
		tt.Text = fmt.Sprintf("%v<br>[ TDSARTL-%v ][ <a href=\"/search?f=TDSARTL-UPD&q=%v\" target=\"tjs\">Open</a>][ <a href=\"%v\" target=\"tjs\">View</a> ][ <a href=\"%v\" target=\"ids\">InDoc Search</a> ]", p.DESC, p.DOC_ID, p.DOC_ID, reqStr2, inDocLink)
		dks.StartDate = sd
		dks.EndDate = ed
		dks.Media = tm
		dks.Text = tt
		if contCat == "" {
			tjs.AllEvents = append(tjs.AllEvents, dks) 
			flAdded = true 
		}else {
			if p.CATEGORY == contCat {
				//fmt.Fprintf(w, "%v\n", p)
				tjs.AllEvents = append(tjs.AllEvents, dks) 
				flAdded = true 
			}

		}
	}
	return flAdded

}
//D0070
func timelineAddEventSlide(w http.ResponseWriter, r *http.Request, uid, GROUP_ID, kword, contCat string, start, end int, tjs *Timelinejs, p *TDSSLIDE) bool {
	dks := TimelineEvent{}
	sd := TimelineStartDate{}
	ed := TimelineEndDate{}
	tm := TimelineEventMedia{}
	tt := TimelineText{}
	thisDU := p.DT_UPLOAD
	flAdded := false
	if thisDU >= start && thisDU <= end && (p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
		//fmt.Fprintf(w, "%v\n", p)
		//split DT_UPLOAD
		//20180824124749
		STR := fmt.Sprintf("%v", p.DT_UPLOAD)
		year := STR[0:4] //2018
		month := STR[4:6] //08
		day := STR[6:8] //24
		hour := STR[8:10] //12 
		minute := STR[10:12] //47
		sec := STR[12:14] //49
		sd.Year = year
		sd.Month = month
		sd.Day = day
		sd.Hour = hour
		sd.Minute = minute
		sd.Second = sec
		ed.Year = year
		ed.Month = month
		ed.Day = day
		ed.Hour = hour
		ed.Minute = minute
		ed.Second = sec
		//tm.URL = p.IMG_URL
		tm.URL = p.TAGS
		tt.Headline = p.TITLE
		///search?f=TDSMEDIA-UPD&q=50
		reqStr := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.FL_COUNTRY_SPECIFIC)
		tm.Link = reqStr
		tm.Caption = fmt.Sprintf("%v/TDSSLIDE-%v/%v/%v", p.CATEGORY, p.DOC_ID, "slide", "format")
        tm.Credit = "Copyright (c) ULAPPH Cloud Desktop" 
        
        inDocLink := fmt.Sprintf("/search?t=InDoc&IDX=%v&SID=TDSSLIDE-%v&q=%v", "IDX_TDSSLIDE", p.DOC_ID, kword)
		tt.Text = fmt.Sprintf("%v<br>[ TDSSLIDE-%v ][ <a href=\"/search?f=TDSSLIDE-UPD&q=%v\" target=\"tjs\">Update</a> ][ <a href=\"%v\" target=\"tjs\">View</a> ][ <a href=\"%v\" target=\"ids\">InDoc Search</a> ]", p.DESC, p.DOC_ID, p.DOC_ID, reqStr, inDocLink)
		dks.StartDate = sd
		dks.EndDate = ed
		dks.Media = tm
		dks.Text = tt
		if contCat == "" {
			tjs.AllEvents = append(tjs.AllEvents, dks) 
			flAdded = true
		}else {
			if p.CATEGORY == contCat {
				//fmt.Fprintf(w, "%v\n", p)
				tjs.AllEvents = append(tjs.AllEvents, dks) 
				flAdded = true
			}

		}
	}
	return flAdded
}
//prints semaphore footer 
func printSemaFooter(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "<hr><a href=\"/editor?EDIT_FUNC=SEMAPHORE\">Home</a> | <a href=\"/editor?EDIT_FUNC=SEMAPHORE-STAT\">Check Balance</a> | <a href=\"/editor?EDIT_FUNC=SEMAPHORE-MSG\">Messages</a> | <a href=\"http://semaphore.co/payments\">Buy Credits</a> | <a href=\"/people-edit?EditPeopleFunc=EDIT_CONTACTS_LIST&UID=\">Contacts</a>")
}
 
//generate adverts (iframe)
func ranAdsGen(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	a := strings.Index(SYS_DISP_ADS_HOST, SYS_SERVER_NAME)
	if SYS_DISP_ADS_HOST != "" && a == -1 {
		URL := fmt.Sprintf("%v/rag?f=slides&d=desktop0&n=1", SYS_DISP_ADS_HOST)
		//client := urlfetch.Client(c)
		if err := r.ParseForm(); err != nil {
			panic(err)
		}
		resp, err := http.Get(URL)
		if err != nil {
			panic(err)
		}
		bodyBytes, _ := ioutil.ReadAll(resp.Body)
		w.Write(bodyBytes)
		return
	}
	h := r.Header
	uReferer := r.Referer()
	xCountry := h.Get("X-AppEngine-Country")
	xRegion  := h.Get("X-AppEngine-Region")
	xCity    := h.Get("X-AppEngine-City")
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	uaPlatform := ua.OS()
	nameb, _ := ua.Browser()
	var bLine bytes.Buffer
	///rag?d=desktop0&n=1
	deskName := r.FormValue("d")
	adNum := r.FormValue("n")
	view := r.FormValue("f")
	adSeq := str2int(adNum)
	cKey := fmt.Sprintf("TASK_MEMCACHER_adslotsProcessor_AdsID")
	//get ads memcache
	TASK_MEMCACHER_adslotsProcessor_AdsID_CACHE := ""
	thisDesktop := fmt.Sprintf("%s", deskName)
	AdsID := ""
	TASK_MEMCACHER_adslotsProcessor_AdsID_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if TASK_MEMCACHER_adslotsProcessor_AdsID_CACHE == "" {
		FL_FOUND_SLOT, AdsID2 := adslotsProcessor(w, r, thisDesktop)
		if FL_FOUND_SLOT == true {
			AdsID = AdsID2
		} else {
			AdsID = "17,70,71"
		}
	} else {
		AdsID = TASK_MEMCACHER_adslotsProcessor_AdsID_CACHE
	}
	//get ads
	indAds := strings.Split(AdsID,",")
	FL_DESKTOP := checkDesktop(w,r)
	for i := 0; i < len(indAds) && i <= 2; i++ {
		seqNum := i + 1
		switch {
			case adSeq == seqNum:
				thisAdId := str2int(indAds[i])
				ADM := fmt.Sprintf("AD%s", adNum)
				FL_ADS_FOUND, _, IMG_URL, ADS_LINK, ADS_DEST, ADS_TITLE := getAds2(w, r, ADM, thisAdId, thisDesktop, xCountry, xRegion, xCity, uaPlatform, nameb, uReferer)
				if FL_ADS_FOUND == false {
					switch {
						case view == "slides":
							bLine.WriteString(fmt.Sprintf("<a href=\"%vadvertisement#advertise\" target=\"%v\" title=\"%v\">", getSchemeUrl(w,r), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"https://lh3.googleusercontent.com/7ToWzl3FYDL50CgLEVoaXmOOt6wf_PCl_Sey6X8rqugO1JWephYYrXwbmxSkoEEq6X7Vb5vaNsgHxF2wxleplTdv6ngDexOscQ=s250\" height=250 width=250>"))
							bLine.WriteString(fmt.Sprintf("</a>"))
							
						case view == "tiles":
							bLine.WriteString(fmt.Sprintf("<center>"))
							bLine.WriteString(fmt.Sprintf("<a href=\"%vadvertisement#advertise\" target=\"%v\" title=\"%v\">", getSchemeUrl(w,r), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"https://lh3.googleusercontent.com/7ToWzl3FYDL50CgLEVoaXmOOt6wf_PCl_Sey6X8rqugO1JWephYYrXwbmxSkoEEq6X7Vb5vaNsgHxF2wxleplTdv6ngDexOscQ=s250\" height=150 width=250>"))
							bLine.WriteString(fmt.Sprintf("</a>"))
							bLine.WriteString(fmt.Sprintf("</center>"))
							
						default:
							bLine.WriteString(fmt.Sprintf("<a href=\"%vadvertisement#advertise\" target=\"%v\" title=\"%v\">", getSchemeUrl(w,r), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"https://lh3.googleusercontent.com/7ToWzl3FYDL50CgLEVoaXmOOt6wf_PCl_Sey6X8rqugO1JWephYYrXwbmxSkoEEq6X7Vb5vaNsgHxF2wxleplTdv6ngDexOscQ=s500\" height=500 width=500>"))
							bLine.WriteString(fmt.Sprintf("</a>"))
					}
				} else {		
					var Url *url.URL
					Url, _ = url.Parse(ADS_LINK)
					i := strings.Index(ADS_DEST, "/guestbook?UID=")
					if i != -1 {
						SPL := strings.Split(ADS_DEST,"=")
						if len(SPL) > 1 {
							LC_UID := SPL[1]
							usersProcessor_IS_LOGGED_IN := ""
							usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", LC_UID)
							usersProcessor_IS_LOGGED_IN = getStrMemcacheValueByKey(w,r,usersProcessor_CACHE_KEY)
 
							if usersProcessor_IS_LOGGED_IN != "" {
								if usersProcessor_IS_LOGGED_IN == "N" {
									IMG_URL = "https://lh3.googleusercontent.com/Mp2lWbMD30Uf-drHOv5pnwo_NfucL4hlbXo_E6-csrSQbTLOlfCbekgR2CPkY7E1oGBBWZ0YL2KzVQAFFcEiDpt8R5grRb3u9A"
								} else {
									IMG_URL = "https://lh3.googleusercontent.com/UdY-gUfjw4kPoo9dL4FHOIoGznUyeWCfW50SiAdk-by8tLHqbuXImY2Dakp-6da86h9oQezi_mGus5Ozq06RvpusaKgDx5Qwtw"
								}
							} else {
								var e Channelstore
                                FL_CHAN_EXIST := true
                                //D0086
                                datastoreClient := createClientDS()
                                //log.Printf("datastoreClient.Get()  [22432]")
								if err := datastoreClient.Get(c, getKeyChannel(c,LC_UID), &e); err != nil {
									FL_CHAN_EXIST = false
								}
							
								if FL_CHAN_EXIST == false {
									IMG_URL = "https://lh3.googleusercontent.com/Mp2lWbMD30Uf-drHOv5pnwo_NfucL4hlbXo_E6-csrSQbTLOlfCbekgR2CPkY7E1oGBBWZ0YL2KzVQAFFcEiDpt8R5grRb3u9A"
								} else {
									IMG_URL = "https://lh3.googleusercontent.com/UdY-gUfjw4kPoo9dL4FHOIoGznUyeWCfW50SiAdk-by8tLHqbuXImY2Dakp-6da86h9oQezi_mGus5Ozq06RvpusaKgDx5Qwtw"
								}
							}
						}
					}
					a := strings.Index(ADS_DEST, "/media?FUNC_CODE=GET_MEDIA")
					b := strings.Index(ADS_DEST, "/media?FUNC_CODE=RAWTEXT")
					if a != -1 || b != -1 {
							ADS_DEST2 := strings.Replace(ADS_DEST, "@888@", "&", -1)
							redURL := fmt.Sprintf("%v&uReferer=%v", ADS_DEST2, uReferer)
							http.Redirect(w, r, redURL, http.StatusFound)
							return
					}
 
					textEff, imgEff := getRanAnim()
					
					switch {
						case view == "tiles":
							bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
							//billing fix
							bLine.WriteString("</head><body>")
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\"><b class=\"animated infinite %v\">%v</b></a>", Url.String(), ADM, ADS_TITLE, textEff, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<br>"))
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\">", Url.String(), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"%v=s250\" height=\"190\" class=\"animated infinite %v\">", IMG_URL, imgEff))
							bLine.WriteString(fmt.Sprintf("</a>"))
							
							
						case view == "slides":
							bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
							bLine.WriteString("</head><body>")
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\"><b class=\"animated infinite %v\">%v</b></a>", Url.String(), ADM, ADS_TITLE, textEff, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<br>"))
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\">", Url.String(), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"%v=s250\" width=\"250\" height=\"250\" class=\"animated infinite %v\">", IMG_URL, imgEff))
							bLine.WriteString(fmt.Sprintf("</a>"))
							
						case view == "floatd":
							bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
							//billing fix
							bLine.WriteString("</head><body>")
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\"><b class=\"animated infinite %v\">%v</b></a>", Url.String(), ADM, ADS_TITLE, textEff, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<br>"))
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\">", Url.String(), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"%v\" width=\"100%%\" height=\"100%%\" class=\"animated infinite %v\">", IMG_URL, imgEff))
							bLine.WriteString(fmt.Sprintf("</a>"))

						case FL_DESKTOP == true || view == "large":
							bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
							//billing fix
							bLine.WriteString("</head><body>")
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\"><b class=\"animated infinite %v\">%v</b></a>", Url.String(), ADM, ADS_TITLE, textEff, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<br>"))
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\">", Url.String(), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"%v=s500\" height=500 width=500 class=\"animated infinite %v\">", IMG_URL, imgEff))
							bLine.WriteString(fmt.Sprintf("</a>"))
							
							
						case FL_DESKTOP !=true:
							bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
							//billing fix
							bLine.WriteString("</head><body>")
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\"><b class=\"animated infinite %v\">%v</b></a>", Url.String(), ADM, ADS_TITLE, textEff, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<br>"))
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\">", Url.String(), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"%v=s290\" height=290 width=290 class=\"animated infinite %v\">", IMG_URL, imgEff))
							bLine.WriteString(fmt.Sprintf("</a>"))
							
							
						default:
							bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
							//billing fix
							bLine.WriteString("</head><body>")
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\"><b class=\"animated infinite %v\">%v</b></a>", Url.String(), ADM, ADS_TITLE, textEff, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<br>"))
							bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\" title=\"%v\">", Url.String(), ADM, ADS_TITLE))
							bLine.WriteString(fmt.Sprintf("<img src=\"%v=s500\" height=500 width=500 class=\"animated infinite %v\">", IMG_URL, imgEff))
							bLine.WriteString(fmt.Sprintf("</a>"))
							
							
					}
					
				}
				
				bLine.WriteString("</body></html>")
				break
		}
	
	}
	writeHTMLHeader(w, 200)
	w.Write([]byte(bLine.String()))
	return
 
}

//generates random animations via css
func getRanAnim() (textEff, imgEff string) {
	//generate text effects
	myrand := randNum(1, 74)
	textEff = adsEffs[myrand]
	if textEff == "" {
		textEff = "flash"
	}
	//generate image effects
	myrand = randNum(1, 74)
	imgEff = adsEffs[myrand]
	if imgEff == "" {
		imgEff = "shake"
	}
	return
}
 
//displays common tools
func commonTools(w http.ResponseWriter, r *http.Request, uid, FORMAT, SID, uReferer string) {
	fmt.Fprintf(w, "<div class=\"success2\">")
	if err := htmlBodySearchGlow.Execute(w, randSeq2(10)); err != nil {
	  panic(err)
	}
	if err := htmlQuickSearchForms.Execute(w, ""); err != nil {
	  panic(err)
	}
	fmt.Fprintf(w, "</div>")
	fmt.Fprintf(w, "<div class=\"success2\">")
	fmt.Fprintf(w, "	<a href=\"/?q=qm#upload-music\">")
	fmt.Fprintf(w, "		<img src=\"/static/img/new-music.png\" title=\"upload music\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "	<a href=\"/?q=qv#upload-video\">")
	fmt.Fprintf(w, "		<img src=\"/static/img/new-video.png\" title=\"upload video\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "	<a href=\"/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWARTICLE&CATEGORY=desktop0\">")
	fmt.Fprintf(w, "		<img src=\"/static/img/new-article.png\" title=\"newArticle\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "	<a href=\"/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWSLIDE&CATEGORY=desktop0\">")
	fmt.Fprintf(w, "		<img src=\"/static/img/new-slide.png\" title=\"newSlide\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "	<a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0\">")
	fmt.Fprintf(w, "		<img src=\"/static/img/new-text.png\" title=\"newTextFile\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "	<a href=\"/?q=qi#upload-image\">")
	fmt.Fprintf(w, "		<img src=\"https://lh3.googleusercontent.com/kSr4cjtoSAIgMtfCIwP4yTX4rsNwBntXEz2aW9CKKlxCatokvQPkVUKUIQA5K9x7BQCvU9RiALTyPlVfbHRfKzza-OiP\" title=\"addImageFile\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "	<a href=\"/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD\">")
	fmt.Fprintf(w, "		<img src=\"/static/img/uploader.png\" title=\"multiUpload\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "	<a href=\"/?q=qu\" target=\"qu\">")
	fmt.Fprintf(w, "		<img src=\"https://lh3.googleusercontent.com/QtzAaanTReFACnFMGZ_Yc2yHOAFOEmOJN9yc_xrGOebTyX81sXFd0uQjbK_lklDC08r21DgSgXEN4qlLsR9J516MVfjGlQ\" title=\"addWebsite\" height=\"40\" width=\"40\"></a>")
	if FORMAT != "" {
		if FORMAT == "SLIDE" {
			fmt.Fprintf(w, "	<a href=\"#\" onclick=\"ULAPPH_QR.PopIn.show('%v');return false;\">", uReferer)
		} else {
			fmt.Fprintf(w, "	<a href=\"#\" onclick=\"ULAPPH_QR.PopIn.show('%v');return false;\">", uReferer)
		}
	} else {
		fmt.Fprintf(w, "	<a href=\"https://zxing.appspot.com/generator/\"")
	}
	fmt.Fprintf(w, "		<img src=\"/static/img/qr-icon.png\" title=\"qrCode\" height=\"40\" width=\"40\"></a></div>")
	fmt.Fprintf(w, "<div class=\"success2\">")
	fmt.Fprintf(w, "<a href=\"/?q=home\"><img src=\"/static/img/home.png\" title=\"Carousel\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/uwm\"><img src=\"/static/img/jswm.png\" title=\"Desktop0\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/slides?CATEGORY=desktop0\"><img src=\"/static/img/ulapph-icons-slides.png\" title=\"Slides Home\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/articles?CATEGORY=desktop0\"><img src=\"/static/img/ulapph-icons-articles.png\" title=\"Articles Home\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/media?q=desktop0\"><img src=\"/static/img/ulapph-icons-media.png\" title=\"Media Home\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/chat\"><img src=\"/static/img/chat.png\" title=\"Chat\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/stream\"><img src=\"/static/img/stream.png\" title=\"Stream\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/tools?FUNC=WIDGET&t=RemoteControl\"><img src=\"/static/img/remote.png\" title=\"Remote\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/media?FUNC_CODE=UMP\"><img src=\"/static/img/music-player.png\" title=\"Music Player\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/media?FUNC_CODE=MDP\"><img src=\"/static/img/midi-player.png\" title=\"MIDI Player\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/media?FUNC_CODE=UVP\"><img src=\"/static/img/video-player.png\" title=\"Video Player\" height=\"40\" width=\"40\"></a>")
	fmt.Fprintf(w, "<a href=\"/media?FUNC_CODE=VIEW_THUMBS\"><img src=\"https://lh3.googleusercontent.com/yi50g4HBwhK7dtxPPsr4UFVbYsIa2DEnKg4SKDfbSu0bmBwoUxdtTEvjYw1JjLQI1-6Lq8jMqc-rkZFecKwjYe9Y9TM\" title=\"Photo Gallery\" height=\"40\" width=\"40\"></a>")
	if FORMAT != "" {
		if FORMAT == "SLIDE" {
			fmt.Fprintf(w, "<a href=\"/wall?WALL_FUNC=SLIDE_COPY&uReferrer=%v&wall_key=%v\">", uReferer, CMD_GEN_KEY)
			fmt.Fprintf(w, "		<a href=\"/wall?WALL_FUNC=SLIDE_COPY&uReferrer=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" title=\"Wall copy\" height=\"40\" width=\"40\"></a> <a href=\"/uloc?LS_FUNC=SLIDE_COPY&uReferrer=%v\" target=\"uloc\"><img src=\"/static/img/uloc.png\" title=\"ULOC copy\" height=\"40\" width=\"40\"></a>", uReferer, CMD_GEN_KEY, uReferer)
		} else {
			fmt.Fprintf(w, "<a href=\"/wall?WALL_FUNC=ARTICLE_COPY&uReferrer=%v&wall_key=%v\">", uReferer, CMD_GEN_KEY)
			fmt.Fprintf(w, "		<a href=\"/wall?WALL_FUNC=ARTICLE_COPY&uReferrer=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" title=\"Wall copy\" height=\"40\" width=\"40\"></a> <a href=\"/uloc?LS_FUNC=ARTICLE_COPY&uReferrer=%v\" target=\"uloc\"><img src=\"/static/img/uloc.png\" title=\"ULOC copy\" height=\"40\" width=\"40\"></a>", uReferer, CMD_GEN_KEY, uReferer)
		}
	}
	fmt.Fprintf(w, "</div>")
 
	fmt.Fprintf(w, "<div class=\"success2\">[ <a href=\"/infodb?DB_FUNC=ULAPPH-QUOTATIONS\" target=gc>Quotations</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-BIBLE\" target=gc>Bible</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-JOKES\" target=gc>Jokes</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-SAVING\" target=gc>Saving</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-BLOG\" target=gc>Blog</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-HEALTH\" target=gc>Health</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-FITNESS\" target=gc>Fitness</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-INTERVIEW\" target=gc>Interview</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-BUSINESS\" target=gc>Business</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-LIFE\" target=gc>Life</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-TABLE-TOPICS\" target=gc>Table Topics</a> ]</div>	")
}

//handles /comands url
//accepts special API commands 
func ulapphCommands(w http.ResponseWriter, r *http.Request) {
	//D0059
	//c := appengine.NewContext(r)
	API_KEY_R := r.Header["Authorization"]
	API_KEY := ""
	if len(API_KEY_R) <= 0 {
		API_KEY = r.FormValue("API_KEY")
	} else {
		API_KEY = API_KEY_R[0]
	}
	
	if CMD_API_KEY != API_KEY &&  CMD_GEN_KEY != API_KEY {
		w.WriteHeader(200)
		w.Write([]byte("ERROR: Unauthorized operation"))
		return	
	}
	
	CMD_FUNC := r.FormValue("CMD_FUNC")

	//todos updates (adhoc)
	if CMD_FUNC == "TODOS" {
		TARGET := r.FormValue("t")
		switch TARGET {
			case "update":
				uid := r.FormValue("uid")
				stat := r.FormValue("stat")
				todo := r.FormValue("todo")
				//ckey := r.FormValue("ckey")
				updateTodo(w,r,uid,stat,todo)
				return
				
			default:
				return
			
				
		}
	}
	
	//speed testing
	if CMD_FUNC == "SPEEDTEST" {
		TARGET := r.FormValue("t")
		switch TARGET {
			case "get-ip":
				//show ip
				ipAdd := getIpAdd(w,r)
				w.Write([]byte(ipAdd))
				return
 
			case "get-data":
				size := r.FormValue("ckSize")
				sizec := str2int(size)
				//get data
				w.Header().Set("Content-Description", "File Transfer")
				w.Header().Set("Content-Type", "application/octet-stream")
				w.Header().Set("Content-Disposition", "attachment; filename=random.dat")
				w.Header().Set("Content-Transfer-Encoding", "binary")
				w.Header().Set("Cache-Control", "no-store, no-cache, must-revalidate, max-age=0")
				w.Header().Set("Cache-Control", "post-check=0, pre-check=0")
				w.Header().Set("Pragma", "no-cache")
				w.Header().Set("Pragma", "no-cache")
				
				//w.WriteHeader(200)
				data := make([]byte, 1048576)
				
				for i:=0; i < sizec; i++ {
				  rand.Read(data)
				  //fmt.Fprintf(w, data)
				  w.Write(data)
				  if f, ok := w.(http.Flusher); ok {
					 f.Flush()
				  } else {
					 //log.Panicf("No flusher")
					 return
				  }
				}
		}	
		
		return
	}
	
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	
	_, uid := checkSession(w,r)

	switch CMD_FUNC {
		//D0059
		case "extract_planner":
			cfgMedia := r.FormValue("SID")
			token := r.FormValue("token")
			//bodyBytes, _ := ioutil.ReadAll(r.Body)
			//log.Printf("token: %v", token)
			//log.Printf("config: %v", cfgMedia)
			err := extractPlannerTasks(w,r,token,cfgMedia)
			if err != nil {
				fmt.Fprintf(w, "Error extracting planner tasks: %v", err)
			}
			return
		case "scrape":
			url := r.FormValue("url")
			sel := r.FormValue("selector")
			img := r.FormValue("extract_images")
			lnk := r.FormValue("extract_links")
			txt := r.FormValue("extract_text")
			tlen := r.FormValue("text_len")
			itxt := r.FormValue("inc_raw_text")
			disp := r.FormValue("output")
			user := r.FormValue("user")
			if user != "" {
				uid = user
			}
			res := ""
			switch disp {
				case "alertify":
					scraperAlertify(w,r,uid,url,sel,img,lnk,txt,tlen)
					return
				case "json":
					scraperJson(w,r,uid,url,sel,img,lnk,txt,tlen,itxt)
					return
				default:
					//default slide
					res = scraper(w,r,uid,url,sel,img,lnk,txt,tlen)
			}
			w.WriteHeader(200)
			//w.Write([]byte("command: scrape: ok, open link below..."))
			w.Write([]byte(fmt.Sprintf("%v", res)))
			return
		default:
			////log.Panicf("%v", CMD_FUNC)
			w.WriteHeader(200)
			w.Write([]byte("command: not found"))
			return
	}
	//return
}
//delete All Todos related to XPIMS app
func deleteTodos(w http.ResponseWriter, r *http.Request, uid string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    //q := datastore.NewQuery("Todo").KeysOnly()
	//q := datastore.NewQuery("Todo").Filter("Owner=", uid).KeysOnly()
	q := datastore.NewQuery("Todo").Ancestor(defaultTodoList(c, uid)).KeysOnly()
    //log.Printf("datastoreClient.Get()  [22762]")
	keys, err := datastoreClient.GetAll(c,q, nil)
	if err != nil {
		panic(err)
	}
	err = datastoreClient.DeleteMulti(c, keys)
	if err != nil {
		panic(err)
	}	
			
}
func archiveDoneTodos(w http.ResponseWriter, r *http.Request, uid string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    //q := datastore.NewQuery("Todo").KeysOnly()
	//q := datastore.NewQuery("Todo").Filter("Done=", true).Filter("O=", true).FilKeysOnly()
	q := datastore.NewQuery("Todo").Ancestor(defaultTodoList(c, uid)).Filter("Done=", true).KeysOnly()
    //log.Printf("datastoreClient.Get()  [22762]")
	keys, err := datastoreClient.GetAll(c,q, nil)
	if err != nil {
		panic(err)
	}
	err = datastoreClient.DeleteMulti(c, keys)
	if err != nil {
		panic(err)
	}	
			
}
//update TODOs from XPIMS app
func updateTodo(w http.ResponseWriter, r *http.Request,uid,stat,todo string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//log.Printf("uid: %v", uid)
	//log.Printf("stat: %v", stat)
	//log.Printf("todo: %v", todo)
    //D0086
    datastoreClient := createClientDS()
	if todo != "" {
		//update items
		q := datastore.NewQuery("Todo").Order("Done")
		//log.Panicf("[S0040]")
		recCount,_ := datastoreClient.Count(c,q)
        todos := make([]Todo, 0, recCount)
        //log.Printf("datastoreClient.Get()  [22790]")
		if _, err := datastoreClient.GetAll(c,q, &todos); err != nil {
			 panic(err)
			//return
		 }
		FL_FOUND := false
		for _, p := range todos {
			//log.Printf("p.Text: %v", p.Text)
			//log.Printf("todo: %v", todo)
			if html.UnescapeString(p.Text) == html.UnescapeString(todo) {
				//log.Printf("found: %v", p.Id)
				if stat == "x" {
					p.Done = true
					p.save(w,r,c,uid)
					//log.Printf("Saved p: %v", p)
				}
				FL_FOUND = true
				break				
			}
		}
		if FL_FOUND == false {
			//log.Printf("not found: %v", todo)
			g := Todo{
					Done: false,
					Text: todo,
			}
			g.save(w,r,c,uid)
			//log.Printf("Saved g: %v", g)			
		}
	}
}

//function which can scrape webpages 
func scraper(w http.ResponseWriter, r *http.Request,uid,url,sel,img,lnk,txt,tlen string) string {
	SEARCH_KEY := url
	UID := uid
	//SL_TMP := ""
	MODE := "D"
	maxTxtLen := str2int(tlen)
	if maxTxtLen <= 0 {
		maxTxtLen = 50
	}
	cKey := fmt.Sprintf("ULAPPH_SCRS_%s_%v", UID, base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(SEARCH_KEY)," "))))
	cKey2 := fmt.Sprintf("ULAPPH_SCRA_%s_%v", UID, base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(SEARCH_KEY)," "))))
	cKey3 := fmt.Sprintf("ULAPPH_SCRT_%s_%v", UID, base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(SEARCH_KEY)," "))))
	var lines []string
	var buffer5 bytes.Buffer
	sUrl := ShortenUrl(w,r,SEARCH_KEY)
	lines = append(lines, fmt.Sprintf("ULAPPH Scraper - %v", sUrl))
	const layout = "2 Jan 2006"
	t := time.Now().Local()
	lines = append(lines, fmt.Sprintf("%v", t.Format(layout)))
	lines = append(lines, fmt.Sprintf(""))
	lines = append(lines, fmt.Sprintf(""))
	lines = append(lines, fmt.Sprintf("%v", APP_DESC))
	lines = append(lines, fmt.Sprintf("%v", getSchemeUrl(w,r)))
	lines = append(lines, fmt.Sprintf(""))
	if SYS_DISP_ADS_CONTENT == true {
		//put ads
		for i := 1; i < 4; i++ {
			//append ads
			lines = append(lines, " ")
			//thisAd := fmt.Sprintf("* ")
			thisAd := fmt.Sprintf("* Advertisement")
			lines = append(lines, thisAd)
			thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
			lines = append(lines, fmt.Sprintf("%v", thisFrame))
			lines = append(lines, " ")
			lines = append(lines, " ")
		}
	}
	goq, err := goquery.NewDocument(r,url)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	// use CSS selector found with the browser inspector
	// for each, use index and item
	ctr := 0
	goq.Find(sel).Each(func(index int, item *goquery.Selection) {
		title := item.Text()
		if len(title) > maxTxtLen {
			title = title[0:maxTxtLen]
		} else {
			title = title[0:len(title)]
		}
		linkTag := item.Find("a")
		link, _ := linkTag.Attr("href")
		//log.Printf("Post #%d: %s - %s\n\n\n", index, title, link)
		if txt == "Y" || txt == "y"  {
		s1 := getSentence(title)
		lines = append(lines, fmt.Sprintf("* %v", s1))
		lines = append(lines, fmt.Sprintf(""))
		buffer5.WriteString(fmt.Sprintf("* %v<br>", s1))
		buffer5.WriteString(fmt.Sprintf("<br>"))
		if len(s1) > 0 { ctr++}
		}
		imgTag := item.Find("img")
		imgLink, _ := imgTag.Attr("imgsrc")
		if imgLink == "" {
			imgTag := item.Find("img")
			imgLink, _ := imgTag.Attr("src")
			if imgLink != "" {
				lines = append(lines, fmt.Sprintf("* "))
				buffer5.WriteString(fmt.Sprintf("* <br>"))
				if img == "Y" || img == "y"  {
					lines = append(lines, fmt.Sprintf(".image %v 600 900", resolveURL(url,imgLink)))
					buffer5.WriteString(fmt.Sprintf(".image %v 600 900<br>", resolveURL(url,imgLink)))
					buffer5.WriteString(fmt.Sprintf("<br>"))
					if len(imgLink) > 0 { ctr++}
				}
				if lnk == "Y" || lnk == "y"  {
					lines = append(lines, fmt.Sprintf(".link %v",resolveURL(url,link)))
					buffer5.WriteString(fmt.Sprintf(".link %v<br>", resolveURL(url,link)))
					buffer5.WriteString(fmt.Sprintf("<br>"))
					if len(link) > 0 { ctr++}
				}
				lines = append(lines, fmt.Sprintf(""))
				buffer5.WriteString(fmt.Sprintf("<br>"))
			} else {
				if lnk == "Y" || lnk == "y" && link != "" {
					lines = append(lines, fmt.Sprintf(".link %v",resolveURL(url,link)))
					buffer5.WriteString(fmt.Sprintf(".link %v<br>", resolveURL(url,link)))
					buffer5.WriteString(fmt.Sprintf("<br>"))
					if len(link) > 0 { ctr++}
				}
				lines = append(lines, fmt.Sprintf(""))
				buffer5.WriteString(fmt.Sprintf("<br>"))
			}
		} else {
				lines = append(lines, fmt.Sprintf("* "))
				buffer5.WriteString(fmt.Sprintf("* <br>"))
				if img == "Y" || img == "y"  {
					lines = append(lines, fmt.Sprintf(".image %v 600 900", resolveURL(url,imgLink)))
					buffer5.WriteString(fmt.Sprintf(".image %v 600 900<br>", resolveURL(url,imgLink)))
					buffer5.WriteString(fmt.Sprintf("<br>"))
					if len(imgLink) > 0 { ctr++}
				}
				if lnk == "Y" || lnk == "y"  {
					lines = append(lines, fmt.Sprintf(".link %v",resolveURL(url,link)))
					buffer5.WriteString(fmt.Sprintf(".link %v<br>", resolveURL(url,link)))
					buffer5.WriteString(fmt.Sprintf("<br>"))
					if len(link) > 0 { ctr++}
				}
				lines = append(lines, fmt.Sprintf(""))
				buffer5.WriteString(fmt.Sprintf("<br>"))
		}
	})
	if ctr <= 0 {
		return "ERROR: No results found!"
	}
	//append in auto-slides-------------
	lines = append(lines, fmt.Sprintf("* Auto-generated by ULAPPH Cloud Desktop"))
	lines = append(lines, fmt.Sprintf(".link %v Visit Website", sUrl))
	dURL := fmt.Sprintf("%vsearch?f=get-auto-content2&cKey=%v&API_KEY=%v", domRefMatchS, cKey3, CMD_API_KEY)
	lines = append(lines, fmt.Sprintf(".link %v Download Results in Text Format", ShortenUrl(w,r,dURL)))
	lines = append(lines, fmt.Sprintf("- %v", time.Now()))
	lines = append(lines, fmt.Sprintf("- %v", uid))
	lines = append(lines, fmt.Sprintf(""))
	//------------
	//--------------------------
	doc, err := Parse4(w, r, &Lines{0, lines}, "SCRAPE", 0)
	if err != nil {
		panic(err)
	}
	if MODE == "D" || MODE == "C" {
		//save raw slide text
		putBytesToMemcacheWithExp(w,r,cKey3,buffer5.Bytes(),GEN_CONTENT_EXPIRES)
	}
	//FL_DESKTOP := checkDesktop(w,r)
	FL_DESKTOP := true
	if FL_DESKTOP == true {
		//fmt.Fprintf(w, "doc: %v<br>", doc)
		var buf bytes.Buffer
		title2 := fmt.Sprintf("%v.slide", "SCRAPE")
		SL_TMP := "S"
		if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
			panic(err)
		}
		//fmt.Fprintf(w, "lines:<br> %v<br>", buf.Bytes())
		putBytesToMemcacheWithExp(w,r,cKey,buf.Bytes(),GEN_CONTENT_EXPIRES)
	}
	FL_DESKTOP = false
	if FL_DESKTOP == false {
		//fmt.Fprintf(w, "doc: %v<br>", doc)
		var buf bytes.Buffer
		title2 := fmt.Sprintf("%v.article", "SCRAPE")
		SL_TMP := "A"
		if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
			panic(err)
		}
		//fmt.Fprintf(w, "lines:<br> %v<br>", buf.Bytes())
		putBytesToMemcacheWithExp(w,r,cKey2,buf.Bytes(),GEN_CONTENT_EXPIRES)
	}
	redURL := ""
	sredURL := ""
	aredURL := ""
	if MODE == "D" {
		FL_SLIDABLE := checkSlidable(w,r)
		if FL_SLIDABLE == true {
			redURL = fmt.Sprintf("%vsearch?f=get-auto-content2&cKey=%v&PARM=LOOP&TYPE=SLIDE&SECS=8&API_KEY=%v", domRefMatchS, cKey, CMD_API_KEY)
			sredURL = redURL
		} else {
			redURL = fmt.Sprintf("%vsearch?f=get-auto-content2&cKey=%v&API_KEY=%v", domRefMatchS, cKey2, CMD_API_KEY)
			aredURL = redURL
		}
	}
	if r.FormValue("redirect") == "Y" || r.FormValue("redirect") == "y" {
		if r.FormValue("format") == "a" || r.FormValue("format") == "A" {
			http.Redirect(w, r, aredURL, http.StatusFound)
		} else {
			http.Redirect(w, r, sredURL, http.StatusFound)
		}
		return redURL
	}
	return redURL
}

//handles notifications for scraped websites 
func scraperAlertify(w http.ResponseWriter, r *http.Request,uid,url,sel,img,lnk,txt,tlen string) {
	var pl []*ChanMessage
	maxTxtLen := str2int(tlen)
	if maxTxtLen <= 0 {
		maxTxtLen = 50
	}
	goq, err := goquery.NewDocument(r,url)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	// use CSS selector found with the browser inspector
	// for each, use index and item
	ctr := 0
	goq.Find(sel).Each(func(index int, item *goquery.Selection) {
		var buffer5 bytes.Buffer
		title := item.Text()
		if len(title) > maxTxtLen {
			title = title[0:maxTxtLen]
		} else {
			title = title[0:len(title)]
		}
		linkTag := item.Find("a")
		link, _ := linkTag.Attr("href")

		if txt == "Y" || txt == "y"  {
			s1 := getSentence(title)
			buffer5.WriteString(fmt.Sprintf("%v<br>", s1))
			if len(s1) > 0 { ctr++}
		}
		imgTag := item.Find("img")
		imgLink, _ := imgTag.Attr("imgsrc")
		if imgLink == "" {
			imgTag := item.Find("img")
			imgLink, _ := imgTag.Attr("src")
			if imgLink != "" {
				if img == "Y" || img == "y"  {
					buffer5.WriteString(fmt.Sprintf("<img src=\"%v\" width=200 height=150><br>", resolveURL(url,imgLink)))
					if len(imgLink) > 0 { ctr++}
				}
				if lnk == "Y" || lnk == "y"  {
					rlink := resolveURL(url,link)
					if strings.Index(rlink, "https://") != -1 {
						buffer5.WriteString(fmt.Sprintf("<a href=\"#\" onclick=\"openWindow('%v','Scraper'); return false\">HTTPS Link</a><br>", rlink))
					} else {
						buffer5.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"view\">HTTP Link</a><br>", resolveURL(url,link)))
					}
					buffer5.WriteString(fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"share\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", "scrape", rlink))
					if len(link) > 0 { ctr++}
				}
			} else {
				if lnk == "Y" || lnk == "y" && link != "" {
					rlink := resolveURL(url,link)
					if strings.Index(rlink, "https://") != -1 {
						buffer5.WriteString(fmt.Sprintf("<a href=\"#\" onclick=\"openWindow('%v','Scraper'); return false\">HTTPS Link</a><br>", rlink))
					} else {
						buffer5.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"view\">HTTP Link</a><br>", resolveURL(url,link)))
					}
					buffer5.WriteString(fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"share\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", "scrape", rlink))
					if len(link) > 0 { ctr++}
				}
			}
		} else {
				if img == "Y" || img == "y"  {
					buffer5.WriteString(fmt.Sprintf("<img src=\"%v\" width=200 height=150><br>", resolveURL(url,imgLink)))
					if len(imgLink) > 0 { ctr++}
				}
				if lnk == "Y" || lnk == "y"  {
					rlink := resolveURL(url,link)
					if strings.Index(rlink, "https://") != -1 {
						buffer5.WriteString(fmt.Sprintf("<a href=\"#\" onclick=\"openWindow('%v','Scraper'); return false\">HTTPS Link</a><br>", rlink))
					} else {
						buffer5.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"view\">HTTP Link</a><br>", resolveURL(url,link)))
					}
					buffer5.WriteString(fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"share\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", "scrape", rlink))
					if len(link) > 0 { ctr++}
				}
		}
		msg := buffer5.String()
		i := strings.Index(msg, "<img")
		if i != -1 {
			SCR := fmt.Sprintf("<img src=\"/static/img/scraper.png\" width=50 height=50 title=\"%v[%v]\"> %v", url, sel, msg)
			//when scraper
			g := new(ChanMessage)
			g.User = uid
			g.Message = SCR
			pl = append(pl, g)
		}
	})
	if ctr <= 0 {
		fmt.Fprintf(w, "<img src=\"/static/img/scraper.png\" width=50 height=50><img src=\"/static/img/channel-error.png\" width=50 height=50> No scrape results found!")
	} else {
		fmt.Fprintf(w, "<img src=\"/static/img/scraper.png\" width=50 height=50><img src=\"/static/img/success.png\" width=50 height=50> %v scrape results found!", ctr)
	}
	//now send
	for _, m := range pl {
		delaySecond(1)
		sendChannelMessage(w,r,m.User,m.Message)
	}
	return
}
//scrapes websites and returns json 
func scraperJson(w http.ResponseWriter, r *http.Request,uid,url,sel,img,lnk,txt,tlen, itxt string) {
	var pl []*Scraper
	maxTxtLen := str2int(tlen)
	if maxTxtLen <= 0 {
		maxTxtLen = 50
	}
	goq, err := goquery.NewDocument(r,url)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	// use CSS selector found with the browser inspector
	// for each, use index and item
	goq.Find(sel).Each(func(index int, item *goquery.Selection) {
		p := new(Scraper)
		//var buffer5 bytes.Buffer
		title := item.Text()
		title = strings.Replace(title,"\n","",-1)
		re_leadclose_whtsp := regexp.MustCompile(`^[\s\p{Zs}]+|[\s\p{Zs}]+$`)
		re_inside_whtsp := regexp.MustCompile(`[\s\p{Zs}]{2,}`)
		final := re_leadclose_whtsp.ReplaceAllString(title, "")
		final = re_inside_whtsp.ReplaceAllString(final, " ")
		title = final
		if strings.ToUpper(itxt) == "Y" {
			bodyString := fetchURL(w,r,url)
			text, err := html2text.FromString(bodyString)
			if err != nil {
				//panic(err)
				p.Text = fmt.Sprintf("%v", err)
			}
			p.Text = text
		}
		if len(title) > maxTxtLen {
			title = title[0:maxTxtLen]
		} else {
			title = title[0:len(title)]
		}
		linkTag := item.Find("a")
		link, _ := linkTag.Attr("href")
		if txt == "Y" || txt == "y"  {
			s1 := getSentence(title)
			p.Title = s1
		}
		imgTag := item.Find("img")
		imgLink, _ := imgTag.Attr("imgsrc")
		if imgLink == "" {
			imgTag := item.Find("img")
			imgLink, _ := imgTag.Attr("src")
			if imgLink != "" {
				if img == "Y" || img == "y"  {
					p.Image = resolveURL(url,imgLink)
				}
				if lnk == "Y" || lnk == "y"  {
					rlink := resolveURL(url,link)
					if strings.Index(rlink, "https://") != -1 {
						p.URL = rlink
					} else {
						p.URL = resolveURL(url,link)
					}
				}
			} else {
				if lnk == "Y" || lnk == "y" && link != "" {
					rlink := resolveURL(url,link)
					if strings.Index(rlink, "https://") != -1 {
						p.URL = rlink
					} else {
						p.URL = resolveURL(url,link)
					}
				}
			}
		} else {
				if img == "Y" || img == "y"  {
					p.Image = resolveURL(url,imgLink)
				}
				if lnk == "Y" || lnk == "y"  {
					rlink := resolveURL(url,link)
					if strings.Index(rlink, "https://") != -1 {
						p.URL = rlink
					} else {
						p.URL = resolveURL(url,link)
					}
				}
		}
		pl = append(pl, p)
	})
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
	data,_ := json.MarshalIndent(pl, "", "  ")
	w.Write(data)
	return
}
// returns complete url
func resolveURL(urlm, link string) string {
	u, err := url.Parse(link)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	base, err := url.Parse(urlm)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	return fmt.Sprintf("%v", base.ResolveReference(u))
}
 
//gets sentences given a string or paragraph 
func getSentence(txt string) (s1 string) {
 
    tokenizer, err := english.NewSentenceTokenizer(nil)
    if err != nil {
        panic(err)
    }
 
    sentences := tokenizer.Tokenize(txt)
    for _, s := range sentences {
        //fmt.Println(s.Text)
		s1 = s.Text
		break
    }	
	return s1
}
//handles /tools url which handles the different tools
func ulapphTools(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//log.Printf("checking referrer")
	TARGET := r.FormValue("t")
	TOOL_FUNC := r.FormValue("FUNC")
	//log.Printf("checking country")
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	uReferer := r.Referer()
	DESKTOP := r.FormValue("CATEGORY")
	MODE := r.FormValue("MODE")
	PARM := r.FormValue("PARM")
	FORMAT := r.FormValue("FORMAT")
	TITLE := r.FormValue("TITLE")
	SOUND := r.FormValue("SOUND")
	if SOUND == "" {
		SOUND = "ON"
	}
	SECS := r.FormValue("SECS")
	DOC_ID := r.FormValue("DOC_ID")
	SID := r.FormValue("SID")
	if SID != "" {
		SPL := strings.Split(SID,"-")
		if len(SPL) > 1 {
			DOC_ID = SPL[1]
		}
	}
	if TOOL_FUNC == "GET_TOKEN" {
		getToken(w,r)
		return
    }
	if TOOL_FUNC == "THEMES" { 
		//log.Printf("THEMES")
		con_url := r.FormValue("con_url")
		getAvailThemes(w,r,SID,con_url)
		return
    }
	if TOOL_FUNC == "MIRROR" {
        if r.FormValue("uid") == "" {
            _, uid := checkSession(w,r)
        	redURL := fmt.Sprintf("%v&uid=%v", r.URL.String(), uid)
            http.Redirect(w, r, redURL, http.StatusFound)
        } else {
			uid := r.FormValue("uid")
			rnum := randNum(1,999)
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: uid,
				STR_FILLER2: PIN_KEY,
				STR_FILLER3: fmt.Sprintf("Camera of %v", uid),
				//STR_FILLER4: "999001",
				STR_FILLER4: fmt.Sprintf("999%03d", rnum),
			}
            if err := htmlMirror.Execute(w, &TEMPDATA); err != nil {
            panic(err)
            }
        }
		return
	}
	if TOOL_FUNC == "MIRROR2" {
        if r.FormValue("uid") == "" {
            _, uid := checkSession(w,r)
        	redURL := fmt.Sprintf("%v&uid=%v", r.URL.String(), uid)
            http.Redirect(w, r, redURL, http.StatusFound)
        } else {
			uid := r.FormValue("uid")
			rnum := randNum(1,999)
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: uid,
				STR_FILLER2: PIN_KEY,
				STR_FILLER3: fmt.Sprintf("Camera of %v", uid),
				//STR_FILLER4: "999001",
				STR_FILLER4: fmt.Sprintf("999%03d", rnum),
			}
            if err := htmlMirror2.Execute(w, &TEMPDATA); err != nil {
            panic(err)
            }
        }
		return
	}
	if TOOL_FUNC == "MIRROR3" {
        if r.FormValue("uid") == "" {
            _, uid := checkSession(w,r)
        	redURL := fmt.Sprintf("%v&uid=%v", r.URL.String(), uid)
            http.Redirect(w, r, redURL, http.StatusFound)
        } else {
			uid := r.FormValue("uid")
			rnum := randNum(1,999)
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: uid,
				STR_FILLER2: PIN_KEY,
				STR_FILLER3: fmt.Sprintf("Camera of %v", uid),
				//STR_FILLER4: "999001",
				STR_FILLER4: fmt.Sprintf("999%03d", rnum),
			}
            if err := htmlMirror3.Execute(w, &TEMPDATA); err != nil {
            panic(err)
            }
        }
		return
	}
	checkReferrer(w,r)
	//log.Printf("checking user session")
	_, uid := checkSession(w,r)
	if TOOL_FUNC == "random" {
		if uid == "" {
			uid = getGeoString(w,r)
		}
		updateUserActiveData(w, r, c, uid, "random ulapph")
		IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
		TOT := 0
		HOST_LIST := ""
		if IS_SEARCH_SERVER == "N" {
			TOT, HOST_LIST = fetchHostList(w,r)
		} else {
			TOT, HOST_LIST = getHostList(w,r)
		}
		myrand := 1
		if TOT > 1 {
			myrand = randNum(1, TOT)
		}
		scanner := bufio.NewScanner(strings.NewReader(HOST_LIST))
		lctr := 0
		rs := ""
		for scanner.Scan() {
			lctr++
			if scanner.Text() != "" && lctr == myrand {
				SPL := strings.Split(scanner.Text(), "|")
				if len(SPL) >= 2 {
					tURL := SPL[0]
					rs = strings.TrimSpace(tURL)
					break
				}
			}
		}
		if rs != "" {
			http.Redirect(w, r, rs, http.StatusFound)
			return
		}
		return
	}
	if TOOL_FUNC == "WIDGET" {
		switch TARGET {
			case "Weather":
				redURL := fmt.Sprintf("https://www.msn.com/en-ph/weather/today")
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			case "Calendar":
				if err := htmlWidgetCalendar.Execute(w, uid); err != nil {
				  panic(err)
				}
				return
			case "WallMessage":
				SYS_RC_HOST_LIST := getWallHosts(w,r)
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: getSchemeUrl(w,r),
					STR_FILLER2: uid,
					STR_FILLER3: CMD_GEN_KEY,
					HTM_FILLER1: template.HTML(SYS_RC_HOST_LIST),
				}
				if err := htmlWidgetWallMessage.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				return
			case "showAcIndex":
				_, uid := checkSession(w,r)
				if uid == "" {
					uid = "general"
				}
				cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
                AUTOCOMP_CACHE := ""
                AUTOCOMP_CACHE = getStrMemcacheValueByKey(w,r,cKeyAll)
					if AUTOCOMP_CACHE != "" {
						fmt.Fprintf(w, "<html>")
						fmt.Fprintf(w, "<body>")
						fmt.Fprintf(w, "<script>")
						fmt.Fprintf(w, "  var json = [\n")
						w.Write([]byte(AUTOCOMP_CACHE))
						fmt.Fprintf(w, "  ];\n")
						fmt.Fprintf(w, "	  		for (var key in json) {\n")
						fmt.Fprintf(w, "	  		   if (json.hasOwnProperty(key)) {\n")
						fmt.Fprintf(w, "	  			  document.write(\"<a href=\" + json[key].data + \"><b>\" + json[key].value + \"</b></a><br>\");\n")
						fmt.Fprintf(w, "	  		   }\n")
						fmt.Fprintf(w, "	  		}\n")
						fmt.Fprintf(w, "</script>")
						fmt.Fprintf(w, "</body>")
						fmt.Fprintf(w, "</html>")
						return
					}
				//}
				return
			case "ProxyBrowser":
				if err := htmlWidgetBrowserURLFetch.Execute(w, ""); err != nil {
				  panic(err)
				}
				return
			case "RandomGenerator":
				if err := htmlWidgetRanGen.Execute(w, ""); err != nil {
				  panic(err)
				}
				return

			case "RandomMotd":
				docID := str2int(r.FormValue("MEDIA_ID"))
				BLOB_KEY := ""
				BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				for s.Scan() {
					if len(s.Text()) > 0 {
						buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
					}
				}
				RAN_MSG := getRanText(w,r,buf.String())
				renderMessage3D(w,r,RAN_MSG)
				return
			case "CountDownWidget":
				TITLE := r.FormValue("title")
				DATE := r.FormValue("date") // 12/07/2016 10:45:30 AM
				if TITLE == "" || DATE == "" {
					fmt.Fprintf(w, "Please populate title and date.")
					return
				}
				renderCountdownPage(w,r,".countdown", TITLE, DATE, getStartColor(w,r), getActiveColor(w,r), getInActiveColor(w,r))
				//fmt.Fprintf(w, "<a href=\"%v\">Link</a>", r.URL.String())
				return

			case "ButtonLink":
				url := r.FormValue("url")
				title := r.FormValue("title")
				renderButtonLink(w,r,".buttonlink", url, title)
				return
			case "AnalogClockWidget":
				renderStyleCssColored(w,r,".analog-clock")
				return
			case "WorldTimezone":
				renderStyleCssColored(w,r,".timezone")
				return
			case "TREE":
				renderStaticTemplates(w,r,".ptree")
				return
			case "RECORD":
				renderStaticTemplates(w,r,".webrtcRec")
				return
			case "GIF-REC":
				renderStaticTemplates(w,r,".webrtcGif")
				return
			case "BROADCAST-AV":
				renderStaticTemplates(w,r,".webrtcBrodAV")
				return
			case "BROADCAST-A":
				renderStaticTemplates(w,r,".webrtcBrodA")
				return
			case "JSBEAUTIFY":
				//redURL := fmt.Sprintf("%vjsbeautify/", domRefMatchS)
				uid := r.FormValue("UID")
				redURL := fmt.Sprintf("/static/jsbeautify/index.html?UID=%v", uid)
				http.Redirect(w, r, redURL, http.StatusFound)
                return
            case "MINIFY":
                t1 := time.Now()
                //log.Printf("Minifying your code...")
                mime := r.FormValue("mime")
                src := r.FormValue("src")
                //log.Printf("mime: %v", mime)
                //log.Printf("src: %v", src)
                m := minify.New()
                m.AddFunc("text/css", css.Minify)
                m.AddFunc("text/html", mhtml.Minify)
                m.AddFunc("image/svg+xml", svg.Minify)
                m.AddFuncRegexp(regexp.MustCompile("^(application|text)/(x-)?(java|ecma)script$"), js.Minify)
                m.AddFuncRegexp(regexp.MustCompile("[/+]json$"), mjson.Minify)
                m.AddFuncRegexp(regexp.MustCompile("[/+]xml$"), xml.Minify)
                out, err := m.String(mime, src)
                if err != nil {
                    //log.Printf("ERROR: %v", err)
                    panic(err)
                }
                //fmt.Println(out)
                //log.Printf("out: %v", out)
                w.WriteHeader(200)
                //w.Write(buf.Bytes())
                t2 := time.Now()
                mObject := new(MinifyObject)
                mObject.Data = out
                diff := t2.Sub(t1)
                mObject.OldSize = len(src)
                mObject.NewSize = len(out)
                mObject.Time = diff
                data, err := json.Marshal(mObject)
                if err != nil {
                    //log.Printf("ERROR: %v", err)
                }
                w.Write(data)
                //log.Printf("BUF: %v", buf.String())
				return
			case "ECHARTS":
				displayBasicCharts(w,r,uid,true)
				return
			case "CountDownGet":
				//RFC3339     = "2006-01-02T15:04:05Z07:00"
				rt := time.Now().Local()
				dnow := fmt.Sprintf("%v", rt.Format("01/02/2006 03:04:05 PM"))					
				if err := textCountdownGet.Execute(w, dnow); err != nil {
				  panic(err)
				}
				return
			case "Speedtest":
				renderStaticTemplates(w,r,".speedtest")
				return
			case "RandomGeneratorRes":
				len := r.FormValue("len")
				mode := r.FormValue("mode")
				if mode == "alphanumeric" {
					//uuidstr, _ := uuid.NewV4()
					uuidstr := uuid.NewV4()
					writeHTMLHeader(w, 200)
					fmt.Fprintf(w, "<input type=\"text\" name=\"ranstr\" value=\"%v\" size=\"%v\" maxlength=\"%v\">", uuidstr, len, len)
				} else {
					num := str2int(len)
					rs := randSeq2(num)
					writeHTMLHeader(w, 200)
					fmt.Fprintf(w, "<input type=\"text\" name=\"ranstr\" value=\"%v\" size=\"%v\" maxlength=\"%v\">", rs, len, len)
				}
				return
			case "DWEETIO":
				redURL := fmt.Sprintf("https://dweet.io/follow/ULAPPH-%v", SYS_SERVER_NAME)
				http.Redirect(w, r, redURL, http.StatusFound)
				return
 
			case "ULAPPHStart":
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER","/tools")
				if FL_PROC_OK == false {return}
				clear := r.FormValue("clear")
				_, uid := checkSession(w,r)
				if clear == "true" {
					http.Redirect(w, r, "/tools?FUNC=CLR_ACS", http.StatusFound)
					return
				}
				cKeyAll2 := fmt.Sprintf("STARTWIN_CACHE_%v", uid)
				mens := getBytMemcacheValueByKey(w,r,cKeyAll2)
 				if mens == nil {
					//force refresh
					http.Redirect(w, r, "/tools?FUNC=WIDGET&t=MiniBrowserGet", http.StatusFound)
					return
				}
				if err := textStartBody.Execute(w, template.HTML(string(mens))); err != nil {
				  panic(err)
				}

			case "ULAPPHStartExpanded":
				//get start menu contents
				showTopListMenu(w,r,"s")
                return
			case "MiniBrowserGet":
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER","/tools")
				if FL_PROC_OK == false {return}
				MEDIA_ID := r.FormValue("MEDIA_ID")
				TITLE := r.FormValue("TITLE")
                GITURL := r.FormValue("GITURL")
				_, _, thisRanWp := getRandomWp()
				if thisRanWp == "" {
					thisRanWp = SYS_DEFAULT_WALLPAPER_IMAGE
				}
				mbData := getBasicColors(w,r)
				mbData.STR_FILLER4 = thisRanWp
				if err := htmlWidgetBrowser.Execute(w, &mbData); err != nil {
				  panic(err)
				}
				switch {
                    case MEDIA_ID == "" && GITURL == "":
						parseAutocompEntries(w,r)
					case MEDIA_ID != "":
						SID := fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID)
						BLOB_KEY := contentCheckSid(w,r,SID)
						blobChan := make(chan []byte)
						go getBlobByteChan(w, r,blobChan, BLOB_KEY)
						thisCont := <- blobChan
						w.Write(thisCont)
					case GITURL != "":
						thisCont := fetchURL(w,r,GITURL)
						w.Write([]byte(thisCont))
						fmt.Fprintf(w,"<input type=\"hidden\" id=\"scheme\" value=\"%v\">", getScheme(w,r))
				}
				if TITLE == "" {
					TITLE = "ULAPPH Cloud Desktop"
				}
				_, uid := checkSession(w,r)
				TEMPDATA := TEMPSTRUCT{
					STR_FILLER1: TITLE,
					STR_FILLER2: GITURL,
					STR_FILLER3: uid,
				}
				if err := htmlWidgetBrowserB.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
                return
            //D0113
			case "MiniBrowserGetCustom":
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER","/tools")
				if FL_PROC_OK == false {return}
				MEDIA_ID := r.FormValue("MEDIA_ID")
				TITLE := r.FormValue("TITLE")
                GITURL := r.FormValue("GITURL")
				_, _, thisRanWp := getRandomWp()
				if thisRanWp == "" {
					thisRanWp = SYS_DEFAULT_WALLPAPER_IMAGE
				}
				mbData := getBasicColors(w,r)
				mbData.STR_FILLER4 = thisRanWp
				if err := htmlWidgetBrowser.Execute(w, &mbData); err != nil {
				  panic(err)
				}
				switch {
                    case MEDIA_ID == "" && GITURL == "":
						parseAutocompEntries(w,r)
					case MEDIA_ID != "":
						SID := fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID)
						BLOB_KEY := contentCheckSid(w,r,SID)
						blobChan := make(chan []byte)
						go getBlobByteChan(w, r,blobChan, BLOB_KEY)
						thisCont := <- blobChan
						w.Write(thisCont)
					case GITURL != "":
						thisCont := fetchURL(w,r,GITURL)
						w.Write([]byte(thisCont))
						fmt.Fprintf(w,"<input type=\"hidden\" id=\"scheme\" value=\"%v\">", getScheme(w,r))
				}
				if TITLE == "" {
					TITLE = "ULAPPH Cloud Desktop"
				}
				_, uid := checkSession(w,r)
				//TEMPDATA := TEMPSTRUCT{
				//	STR_FILLER1: TITLE,
				//	STR_FILLER2: GITURL,
				//	STR_FILLER3: uid,
				//}
				//D0113
				//if err := htmlWidgetBrowserB.Execute(w, &TEMPDATA); err != nil {
				//  panic(err)
				//}
				//log.Printf("uid: %v", uid)
				SID := getCustomSearchSource(w,r,uid)
				if SID == "" {
					//log.Panicf("Invalid SID!")
					//fmt.Fprintf(w, "No custom search source has been set for user %v.", uid)
					//return
					msgDtl := "[U00204]ERROR: Custom Search Source not defined."
					msgTyp := "error"
					msgURL := "/"
					action := fmt.Sprintf("To fix, please create a custom search source.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return					
				}
				BLOB_KEY := contentCheckSid(w,r,SID)
				blobChan := make(chan string)
				go getBlobTextChan(w, r,blobChan, BLOB_KEY)
				tempt := <- blobChan
				//w.Write(thisCont)

				if tempt == "" {
					log.Panicf("template error: blob empty")
					return
				}
				t := Template()
				////log.Printf("parseCustomTemplateReg...")
				t = parseCustomTemplateReg(tempt)
				if t == nil {
					log.Panicf("template error: parse error")
					return
				}
				doc := new(TEMPSTRUCT2)
				//tc := time.Now()
				doc.STR_FILLER1 = "ULAPPH Cloud Desktop"
				doc.STR_FILLER2 = ""
				doc.STR_FILLER3 = uid
				//doc.STR_FILLER4 = dDesc
				//doc.STR_FILLER5 = latestStamp
				data := struct {
					*TEMPSTRUCT2
					Template    *template.Template
				}{
					doc,
					t,
				}
				////log.Printf("data: %v", data)
				buf := &bytes.Buffer{}
				err := t.Execute(buf, &data)
				if err != nil {
					// Send back error message, for example:
					msgDtl := url.QueryEscape(fmt.Sprintf("[U00203] Template error: %v", err))
					msgTyp := "error"
					action := "U00203"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				} else {
					// No error, send the content, HTTP 200 response status implied
					buf.WriteTo(w)
				}
                return
			case "MiniBrowserPost":
				turl := r.FormValue("url")
				teng := r.FormValue("engine")
				i := strings.Index(turl, "http://")
				j := strings.Index(turl, "https://")
				k := strings.Index(turl, "get http://")
				l := strings.Index(turl, "get https://")
				m := strings.Index(teng, "search?f=glow2")
				tdsa := strings.Index(strings.ToUpper(turl), "TDSARTL-")
				tdss := strings.Index(strings.ToUpper(turl), "TDSSLIDE-")
				tdsm := strings.Index(strings.ToUpper(turl), "TDSMEDIA-")
				tdsa1 := strings.Index(strings.ToUpper(turl), "ARTICLE-")
				tdss1 := strings.Index(strings.ToUpper(turl), "SLIDE-")
				tdsm1 := strings.Index(strings.ToUpper(turl), "MEDIA-")
				tdesk := strings.Index(strings.ToUpper(turl), "DESKTOP-")

				switch {
					case tdesk >= 0 :
						SPL := strings.Split(turl,"-")
						DESK_ID := "0"
						if len(SPL) > 1 {
							DESK_ID = SPL[1]
						}
                       				redURL := fmt.Sprintf("/uwm?targetDesktop=%v", DESK_ID)
                        			http.Redirect(w, r, redURL, http.StatusFound)
						return
					case tdsa >= 0 || tdsa1 >= 0:
						SPL := strings.Split(turl,"-")
						DOC_ID := "0"
						if len(SPL) > 1 {
							DOC_ID = SPL[1]
						}
                       				redURL := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%v", DOC_ID)
                        			http.Redirect(w, r, redURL, http.StatusFound)
						return
					case tdss >= 0 || tdss1 >= 0:
						SPL := strings.Split(turl,"-")
						DOC_ID := "0"
						if len(SPL) > 1 {
							DOC_ID = SPL[1]
						}
                        			redURL := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v", DOC_ID)
                        			http.Redirect(w, r, redURL, http.StatusFound)
						return
					case tdsm >= 0 || tdsm1 >= 0:
						SPL := strings.Split(turl,"-")
						DOC_ID := "0"
						if len(SPL) > 1 {
							DOC_ID = SPL[1]
						}
                        			redURL := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v", DOC_ID)
                        			http.Redirect(w, r, redURL, http.StatusFound)
						return
					case k > 0 || l > 0:
						//download & save url
                        			SPL := strings.Split(turl, "wget ")
                        			WgetUrlDownload(w,r,"WGET-URL",uid,url.QueryEscape(SPL[1]))
                        			return
                    			case m >= 0:
                        			if i != -1 || j != -1 {
                            				//this is a url
                            				http.Redirect(w, r, turl, http.StatusFound)
                            				return                           
                      	 	 		}
                       				 //redURL := fmt.Sprintf("/editor?EDIT_FUNC=TIMELINE&SID=GEN&KEY=%v", turl)
						//_, uid := checkSession(w,r)
						//redURL := fmt.Sprintf("/chat-bubble/ulapphbot.html?uid=%v&UID=%v", uid, uid)
						//redURL := fmt.Sprintf("https://www.google.com/search?q=%v&source=lnt&tbs=qdr:d", turl)
						redURL := fmt.Sprintf("/tools?FUNC=WIDGET&t=MiniBrowserGet&kw=%v", turl)
                        			http.Redirect(w, r, redURL, http.StatusFound)
                        			return
					case i < 0 && j < 0 && strings.TrimSpace(turl) != "":
                        			redURL := fmt.Sprintf("%v%v", teng, turl)
                        			http.Redirect(w, r, redURL, http.StatusFound)
						return
                    			default:
						http.Redirect(w, r, turl, http.StatusFound)
						return
				}
			//D0113
			case "MiniBrowserPostCustom":
                turl := r.FormValue("url")
                teng := r.FormValue("engine")
				i := strings.Index(turl, "http://")
				j := strings.Index(turl, "https://")
				k := strings.Index(turl, "get http://")
                l := strings.Index(turl, "get https://")
                m := strings.Index(teng, "search?f=glow2")
				tdsa := strings.Index(strings.ToUpper(turl), "TDSARTL-")
				tdss := strings.Index(strings.ToUpper(turl), "TDSSLIDE-")
				tdsm := strings.Index(strings.ToUpper(turl), "TDSMEDIA-")
				tdsa1 := strings.Index(strings.ToUpper(turl), "ARTICLE-")
				tdss1 := strings.Index(strings.ToUpper(turl), "SLIDE-")
				tdsm1 := strings.Index(strings.ToUpper(turl), "MEDIA-")
				switch {
					case tdsa >= 0 || tdsa1 >= 0:
						SPL := strings.Split(turl,"-")
						DOC_ID := "0"
						if len(SPL) > 1 {
							DOC_ID = SPL[1]
						}
                        redURL := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%v", DOC_ID)
                        http.Redirect(w, r, redURL, http.StatusFound)
						return
					case tdss >= 0 || tdss1 >= 0:
						SPL := strings.Split(turl,"-")
						DOC_ID := "0"
						if len(SPL) > 1 {
							DOC_ID = SPL[1]
						}
                        redURL := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v", DOC_ID)
                        http.Redirect(w, r, redURL, http.StatusFound)
						return
					case tdsm >= 0 || tdsm1 >= 0:
						SPL := strings.Split(turl,"-")
						DOC_ID := "0"
						if len(SPL) > 1 {
							DOC_ID = SPL[1]
						}
                        redURL := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v", DOC_ID)
                        http.Redirect(w, r, redURL, http.StatusFound)
						return
					case k > 0 || l > 0:
						//download & save url
                        SPL := strings.Split(turl, "wget ")
                        WgetUrlDownload(w,r,"WGET-URL",uid,url.QueryEscape(SPL[1]))
                        return
                    case m >= 0:
                        if i != -1 || j != -1 {
                            //this is a url
                            http.Redirect(w, r, turl, http.StatusFound)
                            return                           
                        }
                        //redURL := fmt.Sprintf("/editor?EDIT_FUNC=TIMELINE&SID=GEN&KEY=%v", turl)
						//_, uid := checkSession(w,r)
						//redURL := fmt.Sprintf("/chat-bubble/ulapphbot.html?uid=%v&UID=%v", uid, uid)
						//redURL := fmt.Sprintf("https://www.google.com/search?q=%v&source=lnt&tbs=qdr:d", turl)
						redURL := fmt.Sprintf("/tools?FUNC=WIDGET&t=MiniBrowserGetCustom&kw=%v", turl)
                        http.Redirect(w, r, redURL, http.StatusFound)
                        return
					case i < 0 && j < 0 && strings.TrimSpace(turl) != "":
                        redURL := fmt.Sprintf("%v%v", teng, turl)
                        http.Redirect(w, r, redURL, http.StatusFound)
						return
                    default:
						http.Redirect(w, r, turl, http.StatusFound)
						return
				}
			case "FAM_TREE":
				tm := r.FormValue("MEDIA_ID")
				gen := r.FormValue("gen")
				if gen == "yes" {
					renderStaticTemplates(w,r,".famtree")
					return
				}
				if tm != "" {
					//display fam tree
					turl := fmt.Sprintf("/tools?FUNC=WIDGET&t=FAM_TREE&MEDIA_ID=%v&gen=yes", tm)
					http.Redirect(w, r, turl, http.StatusFound)
					return	
				} else {
					//display input box to get media id
					if err := htmlWidgetFamTree.Execute(w, ""); err != nil {
					  panic(err)
					}
				}
				return
            case "CCTV_STREAM":
				SID := r.FormValue("SID")
				if SYS_STATELESS_SERVER == false || SID == "" {
					renderStaticTemplates(w,r,".cctv-stream")
				} else {
					FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
					if FL_PROC_OK == false {return}
					switch {
						case SID == "GEN":
							//log.Printf("CCTV_STREAM: GEN")
							//show timelinejs form
							keyword := r.FormValue("KEY")
							thisCats := getCategoriesBytes(w,r,uid)
							renderTimelineForm(w,r,".timelinejs-cctv", keyword, thisCats)
							return
						case SID == "GEN2":
							renderStaticTemplatesCctv(w,r)
							return
					}
				}
                return			
			case "HTERM":
				renderStyleCssColored(w,r,".html5-term")
				return
				
			case "ScanRemoteControl":
				ctrURL := fmt.Sprintf("%vpresenter?MODE=CONTROL@888@PRESENTER_SESSION_KEY=%v", getSchemeUrl(w,r), "ULAPPH_Remote_Control")
				ctrURL = ShortenUrl(w,r,ctrURL)
				apiLink := fmt.Sprintf("https://chart.googleapis.com/chart?cht=qr&chs=490x490&chl=%v&choe=UTF-8", ctrURL)
				http.Redirect(w, r, apiLink, http.StatusFound)
				return
				
			case "QuickLaunch":
				if err := htmlQuickSearchTool.Execute(w, ""); err != nil {
				  panic(err)
				}
				return
			//D0106
			//save link to icons
			case "ADDICON":
				tName := r.FormValue("title")
				tUrl := r.FormValue("url")
				tDesk := r.FormValue("uwm")
				apiKey := r.FormValue("apiKey")
				addLinkToIcons(w,r,tName,tUrl,tDesk,apiKey)
				return
				
		}
	}
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER","/tools")
	if FL_PROC_OK == false {return}
	
	if TOOL_FUNC == "Run Fetcher Now" {
		//log.Printf("Run Fetcher Now...")
        time.AfterFunc(5*time.Second, func() {
			//log.Printf("Calling laterUrlFetchInd()...[Run Fetcher Now]")
            laterUrlFetchInd(c, "URL_FETCH_NOTIFS_IND", uid, "NOW")
        })
		fmt.Fprintf(w, "URL Fetch job has been queued.")
	}
 
	//D0033
	if TOOL_FUNC == "DRIVES" {
		action := r.FormValue("ACT")
		switch TARGET {
			case "MYDRIVE_GOOGLE":
				switch action {
					case "A":
						//fmt.Fprintf(w, "Authneticating %v", TARGET)
						oauth2GoogleCall(w,r,uid,"drive")
					case "S":
						//fmt.Fprintf(w, "Syncing %v", TARGET)
						syncGoogleDrive(w,r,uid)
					default:
						fmt.Fprintf(w, "Invalid operation")
				}
				
			case "MYDRIVE_GITHUB":
				switch action {
					case "A":
						//fmt.Fprintf(w, "Authneticating %v", TARGET)
						oauth2GithubCall(w,r,uid,"github")
					case "S":
						//fmt.Fprintf(w, "Syncing %v", TARGET)
						syncGithubDrive(w,r,uid)
					case "B":
						//get branches of a repo
						repo := r.FormValue("repo")
						getGithubBranches(w,r,repo)
					case "R":
						//get repo tree
						repo := r.FormValue("repo")
						sha := r.FormValue("sha")
						bra := r.FormValue("bra")
						getGithubTree(w,r,bra,repo,sha)
					case "C":
						//get content
						bra := r.FormValue("bra")
						repo := r.FormValue("repo")
						path := r.FormValue("path")
						sha := r.FormValue("sha")
						sha2 := r.FormValue("sha2")
						getGithubContent(w,r,bra,repo,path,sha,sha2)
					default:
						fmt.Fprintf(w, "Invalid operation")
				}		
 
			default:
				fmt.Fprintf(w, "Invalid operation")
				
		}
		return
	}
	if TOOL_FUNC == "ALL_RECENT" {
		fmt.Fprintf(w, "<html><head>")
		fmt.Fprintf(w, "<link rel=\"stylesheet\" href=\"/static/lib/css/buttons/buttons.css\">")
		style2 := fmt.Sprintf("<style>html * { color: #ffffff !important; }</style>")
		fmt.Fprintf(w, "%v", style2)
		fmt.Fprintf(w, "</head><body>")
		
		fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-royal button-large\">Slides Recent</a>")
		fmt.Fprintf(w, "<center>")
		
		if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=5&UID=%v\" class=\"button button-pill button-raised button-royal\">5</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=10&UID=%v\" class=\"button button-pill button-raised button-royal\">10</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=20&UID=%v\" class=\"button button-pill button-raised button-royal\">20</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=30&UID=%v\" class=\"button button-pill button-raised button-royal\">30</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=50&UID=%v\" class=\"button button-pill button-raised button-royal\">50</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=100&UID=%v\" class=\"button button-pill button-raised button-royal\">100</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=500&UID=%v\" class=\"button button-pill button-raised button-royal\">500</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=1000&UID=%v\" class=\"button button-pill button-raised button-royal\">1000</a></span>", uid)

		} else {
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=5&UID=%v\" class=\"button button-pill button-raised button-royal\">5</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=10&UID=%v\" class=\"button button-pill button-raised button-royal\">10</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=20&UID=%v\" class=\"button button-pill button-raised button-royal\">20</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=30&UID=%v\" class=\"button button-pill button-raised button-royal\">30</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=50&UID=%v\" class=\"button button-pill button-raised button-royal\">50</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=100&UID=%v\" class=\"button button-pill button-raised button-royal\">100</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=500&UID=%v\" class=\"button button-pill button-raised button-royal\">500</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=1000&UID=%v\" class=\"button button-pill button-raised button-royal\">1000</a></span>", uid)
		}
		
		fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-highlight button-large\">Articles Recent</a>")

		if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=5&UID=%v\" class=\"button button-pill button-raised button-highlight\">5</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=10&UID=%v\" class=\"button button-pill button-raised button-highlight\">10</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=20&UID=%v\" class=\"button button-pill button-raised button-highlight\">20</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=30&UID=%v\" class=\"button button-pill button-raised button-highlight\">30</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=50&UID=%v\" class=\"button button-pill button-raised button-highlight\">50</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=100&UID=%v\" class=\"button button-pill button-raised button-highlight\">100</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=500&UID=%v\" class=\"button button-pill button-raised button-highlight\">500</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES-LOCAL&CATEGORY=desktop0&VIEW=RECENT&LAST=1000&UID=%v\" class=\"button button-pill button-raised button-highlight\">1000</a></span>", uid)
		} else {
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=5&UID=%v\" class=\"button button-pill button-raised button-highlight\">5</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=10&UID=%v\" class=\"button button-pill button-raised button-highlight\">10</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=20&UID=%v\" class=\"button button-pill button-raised button-highlight\">20</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=30&UID=%v\" class=\"button button-pill button-raised button-highlight\">30</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=50&UID=%v\" class=\"button button-pill button-raised button-highlight\">50</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=100&UID=%v\" class=\"button button-pill button-raised button-highlight\">100</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=500&UID=%v\" class=\"button button-pill button-raised button-highlight\">500</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=1000&UID=%v\" class=\"button button-pill button-raised button-highlight\">1000</a></span>", uid)

		}
		
		fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-action button-large\">Media Recent</a>")

		if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA-LOCAL&CATEGORY=ALL_RECENT&LAST=5&UID=%v\" class=\"button button-pill button-raised button-action\">5</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA-LOCAL&CATEGORY=ALL_RECENT&LAST=10&UID=%v\" class=\"button button-pill button-raised button-action\">10</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA-LOCAL&CATEGORY=ALL_RECENT&LAST=20&UID=%v\" class=\"button button-pill button-raised button-action\">20</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA-LOCAL&CATEGORY=ALL_RECENT&LAST=30&UID=%v\" class=\"button button-pill button-raised button-action\">30</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA-LOCAL&CATEGORY=ALL_RECENT&LAST=50&UID=%v\" class=\"button button-pill button-raised button-action\">50</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA-LOCAL&CATEGORY=ALL_RECENT&LAST=100&UID=%v\" class=\"button button-pill button-raised button-action\">100</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA-LOCAL&CATEGORY=ALL_RECENT&LAST=500&UID=%v\" class=\"button button-pill button-raised button-action\">500</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA-LOCAL&CATEGORY=ALL_RECENT&LAST=1000&UID=%v\" class=\"button button-pill button-raised button-action\">1000</a></span>", uid)
		} else {
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=5&UID=%v\" class=\"button button-pill button-raised button-action\">5</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=10&UID=%v\" class=\"button button-pill button-raised button-action\">10</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=20&UID=%v\" class=\"button button-pill button-raised button-action\">20</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=30&UID=%v\" class=\"button button-pill button-raised button-action\">30</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=50&UID=%v\" class=\"button button-pill button-raised button-action\">50</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=100&UID=%v\" class=\"button button-pill button-raised button-action\">100</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=500&UID=%v\" class=\"button button-pill button-raised button-action\">500</a></span>", uid)
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=1000&UID=%v\" class=\"button button-pill button-raised button-action\">1000</a></span>", uid)

		}

		if SYS_STATELESS_SERVER == false && SYS_SWFS_ENABLED == false {
			fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-caution button-large\">S & A With Music</a>")

			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=WITH_MUSIC\" class=\"button button-pill button-raised button-primary\">Slides with Music</a></span>")
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=WITH_MUSIC\" class=\"button button-pill button-raised button-primary\">Articles with Music</a></span>")
			
			fmt.Fprintf(w, "<a href=\"#\" class=\"button button-block button-rounded button-caution button-large\">Others</a>")

			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/tools?FUNC=ALL_COMMENTS\" class=\"button button-pill button-raised button-primary\">All Comments</a></span>")
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_WALLPAPERS\" class=\"button button-pill button-raised button-primary\">All Wallpapers</a></span>")
			fmt.Fprintf(w, "<span class=\"button-wrap\"><a href=\"/editor?EDIT_FUNC=TIMELINE&SID=GEN\" class=\"button button-pill button-raised button-primary\">TimelineJS</a></span>")
		}
		fmt.Fprintf(w, "</center>")
		fmt.Fprintf(w, "</body></html>")
		return
	}
	//D0042
	if TOOL_FUNC == "ALL_COMMENTS" {
		if err := showAllRecents.Execute(w, getStartColor(w,r)); err != nil {
			 panic(err)
		}
		if err := showDiscussionsHdr.Execute(w, ""); err != nil {
			 panic(err)
		}
		procDiscussions(w,r)
		if err := showTrendingFooterSelf.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {
			 panic(err)
		}
		return
	}
	if TOOL_FUNC == "ALL_DESKTOPS" {
        ok := listAllDesktops(w,r,uid)
        if ok == false {
            fmt.Fprintf(w, "<html>NOTE: It seems you have not defined your desktops yet. Kindly <a href=\"https://github.com/edwindvinas/ULAPPH-Cloud-Desktop/blob/master/DOCS/Installation%%20Guide%%20using%%20Shell.md#step-5c\" target=\"gtd\">follow this guide</a> to configure your desktops.</html>")
        }
		return
	}

	if TOOL_FUNC == "ALL_NOTES" {
		dks := listAllNotes(w,r, uid)
		if err := htmlNotesJSONtoTable.Execute(w, &dks); err != nil {
		  panic(err)
		}
		if err := outputFooterTemplate.Execute(w, ""); err != nil {
			 panic(err)
		}
		return
	}
	
	if TOOL_FUNC == "ALL_ICONS" {
		//dlist := listAllIcons(w,r,uid)
		//w.Write(dlist)
		listAllIcons(w,r,uid)
		return
	}
    //D0086
    datastoreClient := createClientDS()

	if TOOL_FUNC == "CLR_AC" || TOOL_FUNC == "CLR_ACM" || TOOL_FUNC == "CLR_ACS" {
		key := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
		memcacheDelete(w,r, key)
	
		thisKey := fmt.Sprintf("SYSTEM_ACB_%v", uid)
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: thisKey,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: "",
				CFG_DESC: "Set via code",
		}
		ckey := datastore.NameKey("TDSCNFG", thisKey, nil)
		if _, err := datastoreClient.Put(c, ckey, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [23903]")
		//log.Panicf("[S0129]")
		
		cKeyACB := fmt.Sprintf("ACB_BLOB_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKeyACB,"")
 
		showTopListMenu(w,r,"h")
		
		turl := ""
		if TOOL_FUNC == "CLR_AC" {
			turl = "/tools?FUNC=WIDGET&t=MiniBrowserGet";
		} else if (TOOL_FUNC == "CLR_ACS") {
			turl = "/tools?FUNC=WIDGET&t=ULAPPHStart";
		} else {
			turl = "/uwm";
		}
		http.Redirect(w, r, turl, http.StatusFound)	
		return
	}
	if TOOL_FUNC == "WIDGET" {
		//widgets
		switch TARGET {
			case "ADDUWM":
				n := r.FormValue("n")
				//D0065
				if _, err := strconv.Atoi(n); err != nil {
					if n != "" {
						fmt.Fprintf(w, "ERROR: Cannot set UWM source for a temporary desktop <b>%v</b>", n)
						return
					}
				}
				d := r.FormValue("d")
				uwmsource := getUWMSource(w,r,uid,n)
				if uwmsource != "" {
					renderAddUWMPage(w,r,".adduwm", uid, n, d)
				} else {
					fmt.Fprintf(w, "<html>Hi %v! No UWM source has been set for UWM%v. Please check documentation on how to set the UWM source. But here are the steps to setup UWM: <li>You may <a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0\">Create Initial Text File</a>. You may just set it to blank initially. <li>Then get the SID and enter ULAPPH command in start menu: <b>setuwm TDSMEDIA-ID</b> in order to set the UWM for this desktop.</html>", uid, n)
				}
				return
				
			//D0029
			case "TODO":
				//fmt.Fprintf(w, "%v", todosHTML)	
				if err := todosHTML.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				}	
				return
 
			case "Viewer":
				turl := fmt.Sprintf("/slides")
				http.Redirect(w, r, turl, http.StatusFound)	
				return
 
			case "MyUrlFetcher":
			
				if err := htmlURLFetcher.Execute(w, ""); err != nil {
				  panic(err)
				}
				if err := htmlFooterBasic.Execute(w, ""); err != nil {
					 panic(err)
				}
				return	
 
			//D0033
			case "MyDrives":
 
				//get github user
				GITHUB_USER_NAME, _ := getGithubUser(w,r)
				
				
				TEMPDATA := TEMPSTRUCT{
					STR_FILLER1: GITHUB_USER_NAME,
				}
						
				if err := htmlDrives.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				if err := outputFooterTemplate.Execute(w, ""); err != nil {
					 panic(err)
				}
				return	
				
			case "RemoteControl":
				cKey := fmt.Sprintf("ULAPPH_RC_%v", uid)
				var lines []string
				lines = append(lines, fmt.Sprintf("ULAPPH Remote Control"))
				lines = append(lines, fmt.Sprintf("%v", getSchemeUrl(w,r)))
				const layout = "2 Jan 2006"
				t := time.Now().Local()
				lines = append(lines, fmt.Sprintf("%v", t.Format(layout)))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf("%v", APP_DESC))
				lines = append(lines, fmt.Sprintf("%v", getSchemeUrl(w,r)))
				lines = append(lines, fmt.Sprintf(""))
 
				if SYS_DISP_ADS_CONTENT == true {
					//put ads
					for i := 1; i < 4; i++ {
						//append ads
						lines = append(lines, " ")
						//thisAd := fmt.Sprintf("* ")
						thisAd := fmt.Sprintf("* Advertisement")
						lines = append(lines, thisAd)
						thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
						lines = append(lines, fmt.Sprintf("%v", thisFrame))
						lines = append(lines, " ")
						lines = append(lines, " ")
					
					}
				}
				
				ctrURL := fmt.Sprintf("%vpresenter?MODE=CONTROL@888@PRESENTER_SESSION_KEY=%v", getSchemeUrl(w,r), "ULAPPH_Remote_Control")
				apiLink := fmt.Sprintf("https://chart.googleapis.com/chart?cht=qr&chs=490x490&chl=%v&choe=UTF-8", ctrURL)
				
				lines = append(lines, fmt.Sprintf("* Scan QR Code using your Android/iPhone"))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf(".iframe %v 500 500", apiLink))
				lines = append(lines, fmt.Sprintf(""))
				
				lines = append(lines, fmt.Sprintf("* "))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf(".image https://lh3.googleusercontent.com/KtsYeia5YU3_d9IxldDm9CVE9QY-d5uoef0jFzkQ5QDMcSJ3e0-uJKpZkycd_xFDHopq1DeDi5wf_ydZF7YIlMWY5Woc 600 900"))
				lines = append(lines, fmt.Sprintf(""))
				
				lines = append(lines, fmt.Sprintf("* "))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf(".image https://lh3.googleusercontent.com/3NSFvgZihJqcvl9h4Nze5zjLUtUF1yaEmjBvYLdyuGHWKOfUPdqb1oi36AMOz9T4MKcFeS-Ub3CfDdHZx69OefjknDzz 600 900"))
				lines = append(lines, fmt.Sprintf(""))
 
				lines = append(lines, fmt.Sprintf("* Read the ULAPPH Remote Control User Guide"))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf(".link https://www.ulapph.com/slides?TYPE=SLIDE&DOC_ID=201&SID=TDSSLIDE-201 How to use the ULAPPH Mobile Remote Control?"))
				lines = append(lines, fmt.Sprintf(".image https://lh3.googleusercontent.com/RZQzgCQKExx5_c7DGLvt58VY7wzrqnnK5VB8c98dt-RNjQ2VVKr4irV_oJlpTyet5yJyGfH5zEs3ftbTtjxtTUxHn2GB 400 1000"))
				lines = append(lines, fmt.Sprintf(""))
 
				lines = append(lines, fmt.Sprintf("* You should use same login for website & remote control..."))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf(".link https://www.ulapph.com/logout Click here to logout!"))
				lines = append(lines, fmt.Sprintf(""))
				
				//append in auto-slides-------------
				lines = append(lines, fmt.Sprintf("* Last Updated"))
				lines = append(lines, fmt.Sprintf("- %v", time.Now()))
				lines = append(lines, fmt.Sprintf(""))
				//------------
					
				//--------------------------
				doc, err := Parse4(w, r, &Lines{0, lines}, "URC", 0)
				if err != nil {
					panic(err)
				}
				
				var buf bytes.Buffer
				title2 := fmt.Sprintf("%v.slide", "URC")
				SL_TMP := "S"
				if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
					panic(err)
				}		
				putBytesToMemcacheWithExp(w,r,cKey,buf.Bytes(),MC_ADS_EXPIRES_30_MIN)
 
				FL_SLIDABLE := checkSlidable(w,r)
				if FL_SLIDABLE == true {
					//redURL := fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=rc", cKey)
					redURL := fmt.Sprintf("/search?f=get-auto-content2&cKey=%v&mode=rc&API_KEY=%v", cKey, CMD_API_KEY)
					http.Redirect(w, r, redURL, http.StatusFound)
					//return
				} else {
					fmt.Fprintf(w, "ERROR: Your browser does not support slides format.")
					//return
				}		
				return
 
 
			case "MyLocalNotes":
			
				nStat := ""
				nMediaID := 0
				//query TDSCNFG			
				cfgName := fmt.Sprintf("PERSONAL_Local_Notes_Media_ID_%v", uid)
				_, nMediaID = getTDSCNFG(w,r,1,cfgName)
				if nMediaID == 0 {
					nStat = "NOT FOUND"
				} else {
					nStat = "OK"
				}
				
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: nStat,
					STR_FILLER2: strconv.Itoa(nMediaID),
					STR_FILLER3: uid,
					STR_FILLER4: getSchemeUrl(w,r),
				}
				if err := htmlWidgetMyLocalNotes.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				if err := outputFooterTemplate.Execute(w, ""); err != nil {
					 panic(err)
				}
				return	
				
			case "MyDefaultSlide":
			
				nStat := ""
				nMediaID := 0		
				cfgName := fmt.Sprintf("PERSONAL_Default_Slide_Media_ID_%v", uid)
				_, nMediaID = getTDSCNFG(w,r,1,cfgName)
				
				if nMediaID == 0 {
					nStat = "NOT FOUND"
				} else {
					nStat = "OK"
				}
				
				TEMPDATA := TEMPSTRUCT2{
					STR_FILLER1: nStat,
					STR_FILLER2: strconv.Itoa(nMediaID),
					STR_FILLER3: uid,
					STR_FILLER4: getSchemeUrl(w,r),
				}
				if err := htmlWidgetDefaultSlide.Execute(w, &TEMPDATA); err != nil {
				  panic(err)
				}
				if err := outputFooterTemplate.Execute(w, ""); err != nil {
					 panic(err)
				}
				return	
 
			case "MyPreferences":
			
				MP_FUNC := r.FormValue("MP_FUNC")
				
				switch MP_FUNC {
				
				case "JSWM_AUTO_LOAD_OFF":
					cfgName := fmt.Sprintf("PERSONAL_JSWM_AutoLoad_Enabled_%v", uid)
					
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: cfgName,
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: "N",
							CFG_DESC: "Set via My Preferences",
					}
					key := datastore.NameKey("TDSCNFG", cfgName, nil)
					if _, err := datastoreClient.Put(c, key, &g); err != nil {
							panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [24158]")
					putStrToMemcacheWithoutExp(w,r,cfgName,"N")
					//log.Panicf("[S0132]")
					fmt.Fprintf(w, "SUCCESS: Auto-load windows has been DISABLED. Changes will take effect upon reload.")
				
				case "JSWM_SOUND_OFF":
					cfgName := fmt.Sprintf("PERSONAL_JSWM_Sound_Enabled_%v", uid)
					
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: cfgName,
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: "off",
							CFG_DESC: "Set via My Preferences",
					}
					key := datastore.NameKey("TDSCNFG", cfgName, nil)
					if _, err := datastoreClient.Put(c, key, &g); err != nil {
							panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [24179]")
					//log.Panicf("[S0133]")
					cKey := fmt.Sprintf("SOUND_PREF_%v", uid)
					putStrToMemcacheWithoutExp(w,r,cKey,"off")
					fmt.Fprintf(w, "SUCCESS: Sounds for notifications has been DISABLED. Changes will take effect upon reload.")
					
					//send channel message
					data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_UPDATE_SND@888@off")
					//channel.Send(c,uid,data)
					//send firebase
					//sendEvent(w,r,uid,data)
					//when update sound
					sendChannelMessage(w,r,uid,data)
				
				case "JSWM_AUTO_LOAD_ON":
					cfgName := fmt.Sprintf("PERSONAL_JSWM_AutoLoad_Enabled_%v", uid)
					
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: cfgName,
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: "Y",
							CFG_DESC: "Set via My Preferences",
					}
					key := datastore.NameKey("TDSCNFG", cfgName, nil)
					if _, err := datastoreClient.Put(c, key, &g); err != nil {
							panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [24209]")
					//log.Panicf("[S0134]")
					putStrToMemcacheWithoutExp(w,r,cfgName,"Y")
					fmt.Fprintf(w, "SUCCESS: Auto-load windows has been ENABLED. Changes will take effect upon reload.")
					
					
				case "JSWM_SOUND_ON":
					cfgName := fmt.Sprintf("PERSONAL_JSWM_Sound_Enabled_%v", uid)
					
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: cfgName,
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: "on",
							CFG_DESC: "Set via My Preferences",
					}
					key := datastore.NameKey("TDSCNFG", cfgName, nil)
					if _, err := datastoreClient.Put(c, key, &g); err != nil {
							panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [24231]")
					//log.Panicf("[S0135]")
					cKey := fmt.Sprintf("SOUND_PREF_%v", uid)
					putStrToMemcacheWithoutExp(w,r,cKey,"on")
					fmt.Fprintf(w, "SUCCESS: Sounds for notifications has been ENABLED. Changes will take effect upon reload.")
					
					//send channel message
					data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_UPDATE_SND@888@on")
					sendChannelMessage(w,r,uid,data)
					
				default:
					//alFlag := "Y"
					alFlag := "N"					
					cfgName := fmt.Sprintf("PERSONAL_JSWM_AutoLoad_Enabled_%v", uid)
					
					alFlag, _ = getTDSCNFG(w,r,0,cfgName)
					
					cfgName = fmt.Sprintf("PERSONAL_Windows_Media_ID_%v", uid)
					uwmDocID := 0
					_, uwmDocID = getTDSCNFG(w,r,1,cfgName)

					//D0113
					//log.Printf("uid: %v", uid)
					cfgName = fmt.Sprintf("PERSONAL_Search_Media_ID_%v", uid)
					customSearchDocID := 0
					_, customSearchDocID = getTDSCNFG(w,r,1,cfgName)
					
					soundPref := "off"
					//query TDSCNFG			
					cfgName = fmt.Sprintf("PERSONAL_JSWM_Sound_Enabled_%v", uid)
					soundPref, _ = getTDSCNFG(w,r,0,cfgName)
					
 
					//get start menu color
					startColor := ""
					//query TDSCNFG			
 					cfgName = fmt.Sprintf("PERSONAL_StartMenu_Color_%v", uid)
					startColor, _ = getTDSCNFG(w,r,0,cfgName)
 
					//get active window color
					activeColor := ""
					//query TDSCNFG			
					cfgName = fmt.Sprintf("PERSONAL_ActiveWindows_Color_%v", uid)
					activeColor, _ = getTDSCNFG(w,r,0,cfgName)
 
					//get inactive window color
					inActiveColor := ""
					//query TDSCNFG			
					cfgName = fmt.Sprintf("PERSONAL_InActiveWindows_Color_%v", uid)	
					inActiveColor, _ = getTDSCNFG(w,r,0,cfgName)
					
					//get appProvider
					appProvider := ""
					//query TDSCNFG			
					cfgName = fmt.Sprintf("PERSONAL_Apps_Provider_%v", uid)
					appProvider, _ = getTDSCNFG(w,r,0,cfgName)
 
					//get privacy
					userPriv := ""
					//query TDSCNFG			
					cfgName = fmt.Sprintf("PERSONAL_Privacy_%v", uid)					
					userPriv, _ = getTDSCNFG(w,r,0,cfgName)

					//get location
					userLoc := ""
					//query TDSCNFG			
					cfgName = fmt.Sprintf("PERSONAL_Default_Location_%v", uid)
					userLoc, _ = getTDSCNFG(w,r,0,cfgName)

					//get voice
					speechVoice := ""
					//query TDSCNFG			
					cfgName = fmt.Sprintf("PERSONAL_SpeechVoice_%v", uid)
					speechVoice, _ = getTDSCNFG(w,r,0,cfgName)

                    var buf bytes.Buffer
                    for k, v := range uwmColors {
						//log.Printf("key[%s] value[%s]\n", k, v)
						buf.WriteString(fmt.Sprintf("<option value='%v'>%v</option>", v, k))
                    }
                    if startColor == "#" || activeColor == "#" || inActiveColor == "#" {
                        startColor, activeColor, inActiveColor = getRandomColors()
                    }
					TEMPDATA := TEMPSTRUCT2{
						STR_FILLER1: alFlag,
						STR_FILLER2: uid,
						STR_FILLER3: getSchemeUrl(w,r),
						STR_FILLER4: soundPref,
						STR_FILLER5: startColor,
						STR_FILLER6: activeColor,
						STR_FILLER7: inActiveColor,
						STR_FILLER8: appProvider,
						STR_FILLER9: userPriv,
						STR_FILLER10: userLoc,
						STR_FILLER11: speechVoice,
						BOOL_FILLER1: SYS_SUPER_USER,
						NUM_FILLER1: uwmDocID,
						//D0113
						NUM_FILLER2: customSearchDocID,
						HTM_FILLER1: template.HTML(buf.String()),
					}
					
					if err := htmlWidgetMyPreferences.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
 
					renderStyleCssColored(w,r,".colors-scheme")
 
					TEMPDATA2 := TEMPSTRUCT2{
						STR_FILLER1: MOTD_1_name,
						NUM_FILLER1: MOTD_1_mediaID,
						
						STR_FILLER2: MOTD_2_name,
						NUM_FILLER2: MOTD_2_mediaID,
						
						STR_FILLER3: MOTD_3_name,
						NUM_FILLER3: MOTD_3_mediaID,
						
						STR_FILLER4: MOTD_4_name,
						NUM_FILLER4: MOTD_4_mediaID,
						
						STR_FILLER5: MOTD_5_name,
						NUM_FILLER5: MOTD_5_mediaID,
						
						STR_FILLER6: MOTD_6_name,
						NUM_FILLER6: MOTD_6_mediaID,
						
						STR_FILLER7: MOTD_7_name,
						NUM_FILLER7: MOTD_7_mediaID,
						
						STR_FILLER8: MOTD_8_name,
						NUM_FILLER8: MOTD_8_mediaID,
						
						STR_FILLER9: MOTD_9_name,
						NUM_FILLER9: MOTD_9_mediaID,
						
						STR_FILLER10: MOTD_10_name,
						NUM_FILLER10: MOTD_10_mediaID,
						
						STR_FILLER11: MOTD_11_name,
						NUM_FILLER11: MOTD_11_mediaID,
						
						STR_FILLER12: MOTD_12_name,
						NUM_FILLER12: MOTD_12_mediaID,
						
						STR_FILLER13: MOTD_13_name,
						NUM_FILLER13: MOTD_13_mediaID,
						
						STR_FILLER14: MOTD_14_name,
						NUM_FILLER14: MOTD_14_mediaID,
						
						STR_FILLER15: MOTD_15_name,
						NUM_FILLER15: MOTD_15_mediaID,
					}
					if err := htmlWidgetMyPreferencesMOTD.Execute(w, &TEMPDATA2); err != nil {
					  panic(err)
					}
					
					//show links to wallpapers
					//listWps := listImgWallpapers(w,r)
					//w.Write(listWps)
					
					if err := outputFooterTemplate.Execute(w, ""); err != nil {
						 panic(err)
					}
					return	
			}
				
		}
	
	} else if TOOL_FUNC == "Edit URL List" && TARGET == "URL_FETCH" {
	//SPC_OPT to /media?FUNC_CODE=SET_URLFETCH_LIST&MEDIA_ID=nn
		docID := 0
		cfgName := fmt.Sprintf("SYSTEM_URLFETCH_Media_ID_%v", uid)
		_, docID = getTDSCNFG(w,r,1,cfgName)
		
		if docID > 0 {
			reqStr := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=UpdateURLFETCHList", docID, docID)
			http.Redirect(w, r, reqStr, http.StatusFound)
			return
		} else {
			msgDtl := fmt.Sprintf("[U00165] ERROR: URL list doesn't exist yet. Create first a text file in Media Gallery and Set as URL Fetcher.")
			msgTyp := "error"
			msgURL := ""
			action := "U00165"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		
	} else if TOOL_FUNC != "" && TARGET == "SLI_ART" {
		REF := r.FormValue("REF")
		//fmt.Fprintf(w, "%v", REF)
		i := strings.Index(REF, "TYPE=SLIDE")
		if i != -1 {
			FORMAT = "SLIDE"
		} else {
			FORMAT = "ARTICLE"
		}
		
		switch TOOL_FUNC {
			case "first":
				if FORMAT == "ARTICLE" {
					reqStr := fmt.Sprintf("/slides?TYPE=ARTICLE&MODE=%v&PARM=%v&SECS=%v&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, SECS, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return
				} else {
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=%v&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, SECS, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return
				}
			case "switch2Slide":
				reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=%v&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, SECS, DOC_ID, SID, SOUND, DESKTOP)
				http.Redirect(w, r, reqStr, http.StatusFound)
				return
				
			case "switch2Article":
				reqStr := fmt.Sprintf("/slides?TYPE=ARTICLE&FORCE=Y&MODE=%v&PARM=%v&SECS=%v&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v&TITLE=%v", MODE, PARM, SECS, DOC_ID, SID, SOUND, DESKTOP, TITLE)
				http.Redirect(w, r, reqStr, http.StatusFound)
				return
				
			case "speed5":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=5&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return			
			case "speed10":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=10&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return				
			case "speed15":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=15&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return				
			case "speed30":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=30&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return				
			case "speed60":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=60&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return	
			case "speed120":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=120&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return
			case "speed300":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=300&DOC_ID=%v&SID=%v&SOUND=%v&CATEGORY=%v", MODE, PARM, DOC_ID, SID, SOUND, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return					
			case "soundOFF":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=60&DOC_ID=%v&SID=%v&SOUND=OFF&CATEGORY=%v", MODE, PARM, DOC_ID, SID, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return			
			case "soundON":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=%v&PARM=%v&SECS=60&DOC_ID=%v&SID=%v&SOUND=ON&CATEGORY=%v", MODE, PARM, DOC_ID, SID, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return	
			case "autoSlideOFF":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=MANUAL&PARM=NOLOOP&SECS=60&DOC_ID=%v&SID=%v&SOUND=OFF&CATEGORY=%v", DOC_ID, SID, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return			
			case "autoSlideON":
					reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=60&DOC_ID=%v&SID=%v&SOUND=ON&CATEGORY=%v", DOC_ID, SID, DESKTOP)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return	
			case "editDoc":
					reqStr := fmt.Sprintf("/editor?DOC_ID=%v&SID=%v", DOC_ID, SID)
					http.Redirect(w, r, reqStr, http.StatusFound)
					return	
			case "updDoc":
					reqStr := ""
					if FORMAT == "SLIDE" {
						reqStr = fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v", DOC_ID)
					} else {
						reqStr = fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%v", DOC_ID)
					}
					http.Redirect(w, r, reqStr, http.StatusFound)
					return	
			case "getURL":
					reqStr := ""
					if FORMAT == "SLIDE" {
						reqStr = fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&DOC_ID=%v&SID=TDSSLIDE-%v", DOC_ID, DOC_ID)
					} else {
						reqStr = fmt.Sprintf("https://www.ulapph.com/slides?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v", DOC_ID, DOC_ID)
					}
				    fmt.Fprintf(w, "<a href=\"%v\">%v</a>", reqStr, reqStr)
					return
			case "getPURL":
					reqStr := ""
					if FORMAT == "SLIDE" {
						reqStr = fmt.Sprintf("https://www.ulapph.com/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&SECS=10&DOC_ID=%v", DOC_ID)
						data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK@888@%v@888@%v@888@%v", reqStr,uid,DOC_ID)
						sendChannelMessage(w,r,uid,data)
						dummyCmd(w,r,uid)
					}
					return		
		}
		
	} else {
		switch TARGET {
			//decomm???
			case "SLI_SEARCH":
				if err := htmlEscSearch.Execute(w, ""); err != nil {
				  panic(err)
				}
				if err := htmlBodySearchGlow.Execute(w, randSeq2(10)); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<hr>")
				if err := htmlQuickSearchForms.Execute(w, ""); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<hr>")
				if err := htmlBodySearchAPIplus.Execute(w, uid); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<hr>")
				if err := htmlBodySearchAPIweb.Execute(w, uid); err != nil {
				  panic(err)
				}
				return
			
			case "QUICK_SEARCH":
				if err := htmlEscSearch.Execute(w, ""); err != nil {
				  panic(err)
				}
				if err := htmlQuickSearchForms.Execute(w, ""); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<hr>")
				if err := htmlBodySearchInternal.Execute(w, ""); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<hr>")
				if err := htmlBodySearchExternal.Execute(w, ""); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<hr>")
				if err := htmlBodySearchGoogle.Execute(w, ""); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<hr>")
				if err := htmlBodySearchWikipedia.Execute(w, ""); err != nil {
				  panic(err)
				}
				return
				
		
			case "SLI_ART":
		
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				}
				uReferer = html.EscapeString(uReferer)
				fmt.Fprintf(w, "<div class=\"validation2\"><h3>Tools for Slides & Articles</h3></div>")
				commonTools(w,r,uid,FORMAT,SID,uReferer)
				fmt.Fprintf(w, "<div class=\"success2\">[<a href=\"/tools?t=SLI_ART&FUNC=getURL&REF=%v\">Get URL</a>] [<a href=\"/tools?t=SLI_ART&FUNC=getPURL&REF=%v\">Presenter Link</a>] [<a href=\"/social?SO_FUNC=SO_VIEW&SID=%v&TITLE=%v\">Like/Dislike/Comments</a>]</div>", uReferer, uReferer, SID, TITLE)
				fmt.Fprintf(w, "<div class=\"success2\">Automatic Slide: [<a href=\"/tools?t=SLI_ART&FUNC=autoSlideOFF&REF=%v\">MANUAL</a>] [<a href=\"/tools?t=SLI_ART&FUNC=autoSlideON&REF=%v\">AUTO</a>]</div>", uReferer, uReferer)
				if FORMAT == "SLIDE" {
					//go to first slide
					fmt.Fprintf(w, "<div class=\"success2\"><a href=\"/tools?t=SLI_ART&FUNC=first&REF=%v\">Go to First Slide</a></div>", uReferer)
				} else {
					fmt.Fprintf(w, "<div class=\"success2\"><a href=\"/tools?t=SLI_ART&FUNC=first&REF=%v\">Reload article</a></div>", uReferer)
				}
				if FORMAT == "SLIDE" {
					//force slide/article
					fmt.Fprintf(w, "<div class=\"success2\"><a href=\"/tools?t=SLI_ART&FUNC=switch2Article&REF=%v\">Switch to Article Mode</a></div>", uReferer)
				} else {
					fmt.Fprintf(w, "<div class=\"success2\"><a href=\"/tools?t=SLI_ART&FUNC=switch2Slide&REF=%v\">Switch to Slide Mode</a></div>", uReferer)
				}
				//change seconds
				fmt.Fprintf(w, "<div class=\"success2\">Speed: [<a href=\"/tools?t=SLI_ART&FUNC=speed5&REF=%v\">5</a>] [<a href=\"/tools?t=SLI_ART&FUNC=speed10&REF=%v\">10</a>] [<a href=\"/tools?t=SLI_ART&FUNC=speed15&REF=%v\">15</a>] [<a href=\"/tools?t=SLI_ART&FUNC=speed30&REF=%v\">30</a>] [<a href=\"/tools?t=SLI_ART&FUNC=speed60&REF=%v\">60</a>] [<a href=\"/tools?t=SLI_ART&FUNC=speed120&REF=%v\">120</a>] [<a href=\"/tools?t=SLI_ART&FUNC=speed300&REF=%v\">300</a>]</div>", uReferer, uReferer, uReferer, uReferer, uReferer, uReferer, uReferer)
				//change direction left/right
				//turn on/off sound
				fmt.Fprintf(w, "<div class=\"success2\">Sound: [<a href=\"/tools?t=SLI_ART&FUNC=soundOFF&REF=%v\">OFF</a>] [<a href=\"/tools?t=SLI_	RT&FUNC=soundON&REF=%v\">ON</a>]</div>", uReferer, uReferer)
				//display qr link
				fmt.Fprintf(w, "<div class=\"success2\">[<a href=\"/tools?t=SLI_ART&FUNC=editDoc&REF=%v\" target=\"edit\">Edit</a>] [<a href=\"/tools?t=SLI_ART&FUNC=updDoc&REF=%v\" target=\"upd\">Update</a>] [<a href=\"/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWSLIDE&CATEGORY=desktop0\" target=\"add-slide\">New Slide</a>] [<a href=\"/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWARTICLE&CATEGORY=desktop0\" target=\"add-article\">New Article</a>]</div>", uReferer, uReferer)
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://zxing.appspot.com/generator/\" target=\"qrcode\">QR Code Generator</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\">[ <a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">Logs</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=MAP_TODAY_ALL&DATE=\">Maps</a> ] [ <a href=\"/settings?q=desktop0\">Settings</a> ] [ <a href=\"/admin-setup\">Admin</a> ] [ <a href=\"/logout\">Logout</a> ]</div>")
				fmt.Fprintf(w, "<div class=\"info\">Cloud Desktop Build Number:<br>%v</div>", UCD_BUILD_STR)
				fmt.Fprintf(w, "<div class=\"info\"><img src=\"/static/img/help.png\" width=\"70\" height=\"70\"><br><a href=\"https://github.com/edwindvinas/ULAPPH-Cloud-Desktop\" target=\"help\">ULAPPH Cloud Desktop Help Docs</a></div>")
				
				if err := htmlFooterModalTools.Execute(w, ""); err != nil {
				  panic(err)
				}
				
			case "DESK":
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				}
				uReferer = html.EscapeString(uReferer)
				fmt.Fprintf(w, "<div class=\"warning2\"><h3>Tools for Desktop</h3></div>")
				commonTools(w,r,uid,"","",uReferer)
				
				cKey := fmt.Sprintf("URLFETCH_LIST_%v", uid)
				URLFETCH_CACHE := "http://www.sample.com/anylink/"
				URLFETCH_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	
				if URLFETCH_CACHE == "" {
					//get from datastore
					//get config id
					docID := 0
					cfgName := fmt.Sprintf("SYSTEM_URLFETCH_Media_ID_%v", uid)
					_, docID = getTDSCNFG(w,r,1,cfgName)
					
					BLOB_KEY := ""
					BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
					
 
					var buf bytes.Buffer
                    bData, err := readGcsObject(BLOB_KEY)
                    if err != nil {
                        panic(err)
                    }
                    s := bufio.NewScanner(bytes.NewReader(bData))
					secCtr := 0
					for s.Scan() {
						if len(s.Text()) > 0 {			
							thisStr := fmt.Sprintf("%v", s.Text())
							if string(thisStr[0]) != "#" {
								secCtr++
							}
						}
						//secCtr++
						if secCtr <= MAX_URL_FETCH_LINES {
							//fmt.Fprintf(w, "%v", s.Text())
							buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
						} else {
							break
						}
					}
					//update cache
					cKey := fmt.Sprintf("URLFETCH_LIST_%v", uid)
					putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
					URLFETCH_CACHE = string(buf.Bytes())
 
				}
	
				if URLFETCH_CACHE != "" {
					URLFETCH_CACHE = "[OK]"
				} else {
					URLFETCH_CACHE = "[Error]"
				}
				if err := iconsSettingsTemplateUrlFetch.Execute(w, URLFETCH_CACHE); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<div class=\"success2\">ULAPPH Local Storage:<br><a href=\"/uloc\"><img src=\"/static/img/uloc.png\" width=80 height=80></a></div>")
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://onlineclock.net/radio/\">Timer with Radio</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://www.towerhobbies.com/ucc.html\">Currency Converter</a></div>")	
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://scientific-calculator.appspot.com/\">Calculator</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://www.magicscroll.net/\">E-Books Reader</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://www.ulapph.com/tools?FUNC=MIRROR\" target=\"mirr\">Show Webcam Mirror</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"/tools?t=CON_STAT\">Check Internet Connection</a></div>")	
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://webaudiodemos.appspot.com/AudioRecorder/index.html\">Voice Recorder</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://html5-demos.appspot.com/static/getusermedia/photobooth.html\">Live Photobooth</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://webcamtoy.com/\">Webcam Toy</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\"><a href=\"https://www.soundstep.com/blog/experiments/jsdetection/\">Magic Xylophone</a></div>")
				fmt.Fprintf(w, "<div class=\"success2\">[ <a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">Logs</a> ] [ <a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=MAP_TODAY_ALL&DATE=\">Maps</a> ] [ <a href=\"/settings?q=desktop0\">Settings</a> ] [ <a href=\"/admin-setup\">Admin</a> ] [ <a href=\"/logout\">Logout</a> ]</div>")
				fmt.Fprintf(w, "<div class=\"info\">Cloud Desktop Build Number:<br>%v</div>", UCD_BUILD_STR)
				fmt.Fprintf(w, "<div class=\"info\"><img src=\"/static/img/help.png\" width=\"70\" height=\"70\"><br><a href=\"https://github.com/edwindvinas/ULAPPH-Cloud-Desktop\" target=\"help\">ULAPPH Cloud Desktop Help Docs</a></div>")
				
				if err := htmlFooterModalTools.Execute(w, ""); err != nil {
				  panic(err)
				}
 
			case "CON_STAT":
				if err := htmlToolsConnection.Execute(w, ""); err != nil {
				  panic(err)
				}
			
			default:
				msgDtl := "[U00117] ERROR: Invalid tool function."
				msgTyp := "error"
				msgURL := ""
				action := "U00117"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
		}
	}
 
}

//function to handle listing of all desktops using JSON formatand rendering library
//given the JSON list of all desktops, a tabular view is generated in the browser
func listAllDesktops(w http.ResponseWriter, r *http.Request, uid string) bool {
    dks := listDesktopsButs(w,r,uid)
    if dks == nil {
        return false
    }
	if err := htmlDesktopsJSONtoTable.Execute(w, &dks); err != nil {
	  panic(err)
	}
	if err := outputFooterTemplate.Execute(w, ""); err != nil {
		 panic(err)
	}
	return true
}

//function to handle listing of all icons using JSON formatand rendering library
//given the JSON list of all icons, a tabular view is generated in the browser
func listAllIcons(w http.ResponseWriter, r *http.Request, uid string) {
	dks := listDesktopsIcons(w,r,uid)
	if err := htmlIconsJSONtoTable.Execute(w, &dks); err != nil {
	  panic(err)
	}
	if err := outputFooterTemplate.Execute(w, ""); err != nil {
		 panic(err)
	}
	return
}
//D0096
//function generate random wallpaper
func getRandomWp() (int, string, string) {
	files, err := ioutil.ReadDir("./static/img/wallpapers/")
	if err != nil {
		log.Fatal(err)
	}
	
	//totLen := len(uwmWallpapers)
	totLen := len(files)
	myrand := randNum(1, totLen)
	myrand = myrand - 1
	if SYS_DEFAULT_WALLPAPER == true {
		return myrand, "default", SYS_DEFAULT_WALLPAPER_IMAGE
	}
	img := ""
	desc := ""
	i := 0
	for _, f := range files  {
		if i == myrand {
			fName := f.Name()
			img = fmt.Sprintf("/static/img/wallpapers/%v", fName)
			desc = fName
			break
		}
		i++
	}
	
	
	return myrand, desc, img
}		
//function generate random colors
func getRandomColors() (color1, color2, color3 string) {

	myrand := randNum(1, 50)
	myrand = myrand - 1
	i := 0
	ranOk := false
	for _, v := range uwmColors {
		if i == myrand {
			SPL := strings.Split(v, ",")
			if len(SPL) > 0 {
				color1 = "#"+SPL[0]
				color2 = "#"+SPL[1]
				color3 = "#"+SPL[2]
				ranOk = true
			}
			if ranOk == false {
				myrand = randNum(1, 50)
			} else {
				break
			}
		}
		i++
	}
	
	return color1, color2, color3
}
 
//function to handle /search
//it process in site or extended multiple sites search
func ulapphSearch(w http.ResponseWriter, r *http.Request) {
	//log.Printf("ulapphSearch()")
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
	//u := user.Current(c)
    uid := ""
	if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		//uid = uid
		_, uid = checkSession(w,r)
	} else {
		uid = getGeoString(w,r)
	}
	
	if SYS_STATELESS_SERVER == true {
		uid = r.FormValue("UID")
	}
	//log.Printf("uid: %v\n", uid)

	SEARCH_FUNC := r.FormValue("f")
	SEARCH_TARGET := r.FormValue("t")
	SEARCH_KEY := r.FormValue("s")
	SEARCH_INT := r.FormValue("i")
	i := strings.Index(SEARCH_KEY, "http://")
	j := strings.Index(SEARCH_KEY, "https://")
	if i != -1 || j != -1 {
		http.Redirect(w, r, SEARCH_KEY, http.StatusFound)
		return
	}
	s := getScheme(w,r)
	sec := "N"
	if s == "https:" {
		sec = "Y"
	}
	switch {
		case SEARCH_FUNC == "fetch-url":
			URL := r.FormValue("URL")
			var Url *url.URL
			Url, _ = url.Parse(URL)
			u, err := url.Parse(URL)
			if err != nil {
				panic(err)
			}
			//tHost := u.Host
			tSch := u.Scheme
			if tSch == "" {
				fmt.Fprintf(w, "Error, please indicate url scheme.")
				return
			}
			cKey := fmt.Sprintf("FETCH_URL_%v", Url.String())
            FETCH_DATA := ""
            FETCH_DATA = getStrMemcacheValueByKey(w,r,cKey)
            if FETCH_DATA != "" {
				fmt.Fprintf(w, "%v", FETCH_DATA)
				return
			}
			if FETCH_DATA == "" {
				//client := urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
				resp, err := http.Get(URL)
				if err != nil {
					panic(err)
				}
				bodyBytes, _ := ioutil.ReadAll(resp.Body)
				FETCH_URL := string(bodyBytes)
				if FETCH_URL != "" {
					//cKey := fmt.Sprintf("FETCH_URL")
					putBytesToMemcacheWithExp(w,r,cKey,bodyBytes,MC_ADS_EXPIRES_30_MIN)
					fmt.Fprintf(w, "%v", string(bodyBytes))
				}
				return
			}
		case SEARCH_FUNC == "get-auto-content":
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			if FL_VALID_USER == false {
				fmt.Fprintf(w, "content not available for guests")
				return
			}
			//search?s=google+appengine&f=glow2&t=Query+Web
			cKey := r.FormValue("cKey")
			UID := r.FormValue("UID")
			if UID == "" {
				UID = uid
			}
			mode := r.FormValue("m")
			keyword := r.FormValue("s")
			AUTO_SLIDES := ""
			totDel := 0
			for j := 0; j < 5 && AUTO_SLIDES == ""; j++ {
				AUTO_SLIDES = getStrMemcacheValueByKey(w,r,cKey)
				if AUTO_SLIDES == "" {
					delaySecond(15)
					totDel = totDel + 15
					if totDel > 120 || cKey == "" {
						break
					}
				} else {
					break
				}
			}
			if AUTO_SLIDES != "" {
				writeHTMLHeader(w, 200)
				w.Write([]byte(AUTO_SLIDES))
				return
			} else {
				//fmt.Fprintf(w, "ERROR: cKey(%v) not found.", cKey)
				switch mode {
					case "P":
						redURL := fmt.Sprintf("/search?s=%v&f=glow2&UID=%v&t=Query+Plus", keyword, UID)
						http.Redirect(w, r, redURL, http.StatusFound)
					case "W":
						redURL := fmt.Sprintf("/search?s=%v&f=glow2&UID=%v&t=Query+Web", keyword, UID)
						http.Redirect(w, r, redURL, http.StatusFound)	
					case "I":
						redURL := fmt.Sprintf("/search?s=%v&f=glow2&UID=%v&t=Query+Images", keyword, UID)
						http.Redirect(w, r, redURL, http.StatusFound)	
				}
				return
			}
		case SEARCH_FUNC == "get-auto-content2":
			//log.Printf("get-auto-content2...")
			if r.FormValue("API_KEY") != CMD_API_KEY {
				redURL := fmt.Sprintf("/login")
				http.Redirect(w, r, redURL, http.StatusFound)
				return
			}
			cKey := r.FormValue("cKey")
			//log.Printf("cKey: %v", cKey)
			AUTO_SLIDES := ""
			totDel := 0
			for j := 0; j < 5 && AUTO_SLIDES == ""; j++ {
				AUTO_SLIDES = getStrMemcacheValueByKey(w,r,cKey)
				//log.Printf("getStrMemcacheValueByKey()")
				if AUTO_SLIDES == "" {
					delaySecond(15)
					totDel = totDel + 15
					if totDel > 120 || cKey == "" {
						break
					}
				} else {
					break
				}
			}
			//log.Printf("AUTO_SLIDES: %v", AUTO_SLIDES)
			if AUTO_SLIDES != "" {
				writeHTMLHeader(w, 200)
				w.Write([]byte(AUTO_SLIDES))
			}
			return
		//case SEARCH_FUNC == "ext-search" && SYS_SEARCHABLE == false:
		case SEARCH_FUNC == "ext-search" && (SYS_EXT_SEARCHABLE == false || r.FormValue("esk") != EXT_SEARCH_GEN_KEY):
			return
		case SEARCH_FUNC == "GET_HOST_LIST":
			_, HOST_LIST := getHostList(w,r)
			writeHTMLHeader(w, 200)
			w.Write([]byte(HOST_LIST))
			return
		case SEARCH_FUNC == "GET_MAP_LIST":
			//log.Printf("GET_MAP_LIST")
			if r.FormValue("esk") != EXT_SEARCH_GEN_KEY {
				//log.Printf("Unauthorized access")
				return
			}
			showOverallMap(w,r)
			return
		case SEARCH_FUNC == "GET_MAP_LIST2":
			if r.FormValue("esk") != EXT_SEARCH_GEN_KEY {
				//log.Printf("Unauthorized access")
				return
			}
			showOverallMap2(w,r)
			return
		case SEARCH_FUNC == "GET_CURR_ACC_LOG":
			CURR_ACC_LOG := getCurrAccLog(w,r)
			//writeHTMLHeader(w, 200)
			w.Write([]byte(CURR_ACC_LOG))
			return
		//search from social media
		case SEARCH_TARGET == "Query Plus" || SEARCH_TARGET == "Query Web" || SEARCH_TARGET == "Query Images" || SEARCH_TARGET == "Query Youtube":
			UID := r.FormValue("UID")
			switch {	
			case SEARCH_TARGET == "Query Web":
				cKey := fmt.Sprintf("ULAPPH_GWEBS_%s_%v", UID, base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(SEARCH_KEY)," "))))
				cKey2 := fmt.Sprintf("ULAPPH_GWEBA_%s_%v", UID, base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(SEARCH_KEY)," "))))
				
				FL_DESKTOP := checkDesktop(w,r)
				if FL_DESKTOP == true {
					ULAPPH_GPWEBS := ""
					ULAPPH_GPWEBS = getStrMemcacheValueByKey(w,r,cKey)
					
					if ULAPPH_GPWEBS != "" {
						//serve cache
						redURL := fmt.Sprintf("/search?f=get-auto-content&cKey=%v", cKey)
						http.Redirect(w, r, redURL, http.StatusFound)
						return
					}
					
				} else {
				
					ULAPPH_GPWEBA := ""
					ULAPPH_GPWEBA = getStrMemcacheValueByKey(w,r,cKey2)
					
					if ULAPPH_GPWEBA != "" {
						//serve cache
						redURL := fmt.Sprintf("/search?f=get-auto-content&cKey=%v", cKey2)
						http.Redirect(w, r, redURL, http.StatusFound)
						return						
					}
					
				}
				redURL := fmt.Sprintf("/gsearch?FUNC_CODE=SEARCH-ACTS&UID=%v&SEARCH_KEY=%v&MODE=D", UID, SEARCH_KEY)
				http.Redirect(w, r, redURL, http.StatusFound)
				return
 
			case SEARCH_TARGET == "Query Images":
 
				cKey := fmt.Sprintf("ULAPPH_GIMGS_%s_%v", UID, base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(SEARCH_KEY)," "))))
				cKey2 := fmt.Sprintf("ULAPPH_GIMGA_%s_%v", UID, base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(SEARCH_KEY)," "))))
				
				FL_DESKTOP := checkDesktop(w,r)
				if FL_DESKTOP == true {
					ULAPPH_GPWEBS := ""
					ULAPPH_GPWEBS = getStrMemcacheValueByKey(w,r,cKey)
					
					if ULAPPH_GPWEBS != "" {
						//serve cache
						redURL := fmt.Sprintf("/search?f=get-auto-content&cKey=%v", cKey)
						http.Redirect(w, r, redURL, http.StatusFound)
						return
					}
					
				} else {
 
					ULAPPH_GPWEBA := ""
					ULAPPH_GPWEBA = getStrMemcacheValueByKey(w,r,cKey2)
					
					if ULAPPH_GPWEBA != "" {
						//serve cache
						redURL := fmt.Sprintf("/search?f=get-auto-content&cKey=%v", cKey2)
						http.Redirect(w, r, redURL, http.StatusFound)
						return						
					}
					
				}
				redURL := fmt.Sprintf("/gsearch?FUNC_CODE=SEARCH-ACTS-IMG&UID=%v&SEARCH_KEY=%v&MODE=D", UID, SEARCH_KEY)
				http.Redirect(w, r, redURL, http.StatusFound)
				return 
			}
		
		//search is coming from external sites
		case SEARCH_TARGET == "All ULAPPH Sites" && SEARCH_FUNC != "rc2":
		//ext-search
			
			if SYS_SITE_PRIVATE == true {
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
				if FL_PROC_OK == false {return}
			}
	
			t := time.Now().Local()
			start := fmt.Sprintf(t.Format("20060102150405"))
 			stat := Search {
				Mode: "Enterprise Search",
				Start: start,
				End: "",
				Results: 0,
				Sites: 1,			
			}
			
			HOST_LIST := ""
			IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
			
			if IS_SEARCH_SERVER == "N" {
				_, HOST_LIST = fetchHostList(w,r)
					
			} else {
				
				_, HOST_LIST = getHostList(w,r)
			}
			
 			if err := userAccessTemplateMobileRootSearch.Execute(w, "ULAPPH"); err != nil {
			 panic(err)
			}
 
			url1 := "/logout"	
			//get custom hidable menu from cache
			showLeftMenu(w,r)
			
			if err := mobileBodyTemplateContentA.Execute(w, url1); err != nil {
			 panic(err)
			}
			
			if err := mobileBodyTemplateContentB2.Execute(w, ""); err != nil {
			 panic(err)
			}
 
			if err := mobileBodyTemplateContentLoaderA2Search.Execute(w, ""); err != nil {
			 panic(err)
			}
			
			//show local results first
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
 
			//buffer for search res
			var buffer bytes.Buffer
				
			if FL_VALID_USER == true {
				stat.Sites++
				SEARCH_FUNC = "glow2"
 
				searchChan := make(chan []byte)
				//searchChanDone := make(chan bool, 7)
				go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSSLIDE", SEARCH_KEY, 0, "SLIDE", sec)
				buffer.Write([]byte(<-searchChan))
				
				searchChan = make(chan []byte)
				go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSARTL", SEARCH_KEY, 0, "ARTICLE", sec)
				buffer.Write([]byte(<-searchChan))
				
				searchChan = make(chan []byte)
				go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSMEDIA", SEARCH_KEY, 0, "MEDIA", sec)
				buffer.Write([]byte(<-searchChan))
				
				searchChan = make(chan []byte)
				go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSPROF", SEARCH_KEY, 0, "PROFILE", sec)
				buffer.Write([]byte(<-searchChan))
				
				searchChan = make(chan []byte)
				go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSICONS", SEARCH_KEY, 0, "WEBSITE", sec)
				buffer.Write([]byte(<-searchChan))
 
				
			} else {
				//SEARCH_FUNC = "ext-search"
				stat.Sites++
 
				fUrl := fmt.Sprintf("%vsearch?f=ext-search&d=SLIDE&i=IDX_TDSSLIDE&s=%v&uid=%v&sec=%v&esk=%v", domRefMatchS, SEARCH_KEY, uid, sec, EXT_SEARCH_GEN_KEY)
				searchChan := make(chan []byte)
				go exec_FetchUrlChan(w,r,searchChan,fUrl)
				buffer.Write(<-searchChan)
			}
			//fetch each site and search contents
			temp := strings.Split(HOST_LIST,"\n")
			if len(temp) > 0 {
 
				
				//searchChan := make(chan []byte, len(temp))
				
				for j := 0; j < len(temp); j++ {
					
					tURL := ""
					SPL := strings.Split(temp[j], "|")
					if len(SPL) < 2 {
						tURL = strings.TrimSpace(temp[j])
					} else {
						tURL = strings.TrimSpace(SPL[0])
					}
 
					//tURL = strings.TrimSpace(temp[j])
					i := strings.Index(getSchemeUrl(w,r), tURL)
					if tURL != "" && i == -1 {
					//if tURL != "" {
						stat.Sites++
						fUrl := fmt.Sprintf("%v/search?f=ext-search&d=SLIDE&i=IDX_TDSSLIDE&s=%v&uid=%v&sec=%v&esk=%v", tURL, SEARCH_KEY, uid, sec, EXT_SEARCH_GEN_KEY)
						searchChan := make(chan []byte)
						go exec_FetchUrlChan(w,r,searchChan,fUrl)
						buffer.Write(<-searchChan)
						
						stat.Sites++
						fUrl = fmt.Sprintf("%v/search?f=ext-search&d=ARTICLE&i=IDX_TDSARTL&s=%v&uid=%v&sec=%v&esk=%v", tURL, SEARCH_KEY, uid, sec, EXT_SEARCH_GEN_KEY)
						searchChan = make(chan []byte)
						go exec_FetchUrlChan(w,r,searchChan,fUrl)
						buffer.Write(<-searchChan)
						
						stat.Sites++
						fUrl = fmt.Sprintf("%v/search?f=ext-search&d=MEDIA&i=IDX_TDSMEDIA&s=%v&uid=%v&sec=%v&esk=%v", tURL, SEARCH_KEY, uid, sec, EXT_SEARCH_GEN_KEY)
						searchChan = make(chan []byte)
						go exec_FetchUrlChan(w,r,searchChan,fUrl)
						buffer.Write(<-searchChan)
						
						stat.Sites++
						fUrl = fmt.Sprintf("%v/search?f=ext-search&d=PROFILE&i=IDX_TDSPROF&s=%v&uid=%v&sec=%v&esk=%v", tURL, SEARCH_KEY, uid, sec, EXT_SEARCH_GEN_KEY)
						searchChan = make(chan []byte)
						go exec_FetchUrlChan(w,r,searchChan,fUrl)
						buffer.Write(<-searchChan)
						
						stat.Sites++
						//exec_FetchUrl(w,r,fUrl)
						fUrl = fmt.Sprintf("%v/search?f=ext-search&d=WEBSITE&i=IDX_TDSICONS&s=%v&uid=%v&sec=%v&esk=%v", tURL, SEARCH_KEY, uid, sec, EXT_SEARCH_GEN_KEY)
						searchChan = make(chan []byte)
						go exec_FetchUrlChan(w,r,searchChan,fUrl)
						buffer.Write(<-searchChan)
					}
				}
 
			}
			//display all results finally
 
			w.Write(buffer.Bytes())
			
			if SYS_DISP_ADS_CONTENT == true {
				if err := mobileBodyTemplateContentLoaderSingleItemAds.Execute(w, SYS_DISP_ADS_HOST); err != nil {
				 panic(err)
				}
			}
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: SYS_GUEST_CHAT_URL,
				STR_FILLER2: getStartColor(w,r),
			}
			if err := mobileBodyTemplateContentLoaderB.Execute(w, &TEMPDATA); err != nil {
			 panic(err)
			}
 
			stat.End = fmt.Sprintf(t.Format("20060102150405"))
 			timeFormat := "20060102150405"
			then, _ := time.Parse(timeFormat, start)
			duration := time.Since(then)
			stat.Elapsed = duration.Seconds()
 
			//All ULAPPH sites
			if SEARCH_KEY != "" {
				fmt.Fprintf(w, "<center><font color=green><b>%v</b> for <b>\"%v\"</b> from <b>%v</b> queries took <b>%v</b> seconds!</font></center><br>", stat.Mode, SEARCH_KEY, stat.Sites, stat.Elapsed)	
			}
			
			
			displaySocialSites(w,r)
			
			if err := mobileBodyTemplateContentFooter.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {
			 panic(err)
			}
			
			if err := desktopBodyTabzillaTemplateMobilePublic.Execute(w, url1); err != nil {					
			 panic(err)
			} 			
			return
 
		case SEARCH_FUNC == "ext-search":
			IDX_NAME := r.FormValue("i")
			SEARCH_KEY := r.FormValue("s")
			DATA_TYPE := r.FormValue("d")
			uid := r.FormValue("uid")
			sec := r.FormValue("sec")
			esk := r.FormValue("esk")
			
			if esk != EXT_SEARCH_GEN_KEY {
				return
			}
			
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			
			searchChan := make(chan []byte)
			//searchChanDone := make(chan bool)
			
			switch {
				
				case SYS_SEARCHABLE == false || FL_VALID_USER == false:
					SEARCH_FUNC = "ext-search-pub"
					go searchIndex(w, r, searchChan, SEARCH_FUNC, IDX_NAME, SEARCH_KEY, 0, DATA_TYPE, sec)
					w.Write(<-searchChan)
					
				case FL_VALID_USER == true:
					go searchIndex(w, r, searchChan, SEARCH_FUNC, IDX_NAME, SEARCH_KEY, 0, DATA_TYPE, sec)	
					w.Write(<-searchChan)
			}
			//<-searchChanDone
			
			return
		
		case SEARCH_FUNC == "PRESENTER":			
			SLIDE_NUM := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_PRESENT_SLIDE@888@%v", SLIDE_NUM)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			//redirect to referrer
			uReferer := r.Referer()
			http.Redirect(w, r, uReferer, http.StatusFound)
			return
 
		case SEARCH_FUNC == "ARTICLE":			
			ART_NUM := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_PRESENT_ARTICLE@888@%v", ART_NUM)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			//redirect to referrer
			uReferer := r.Referer()
			http.Redirect(w, r, uReferer, http.StatusFound)
			return
			
		case SEARCH_FUNC == "RC_WEB_SEARCH":			
			KEYWORD := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_WEB_SEARCH@888@%v", KEYWORD)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			cKey3 := fmt.Sprintf("ULAPPH_GWEBM_%s_%v", "manual", base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(KEYWORD)," "))))
			redURL := fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=web", cKey3)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "RC_NWS_SEARCH":			
			KEYWORD := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_NWS_SEARCH@888@%v", KEYWORD)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			//redirect to referrer
			uReferer := r.Referer()
			http.Redirect(w, r, uReferer, http.StatusFound)
			return
			
			
		case SEARCH_FUNC == "RC_DIC_SEARCH":	
			KEYWORD := strings.ToLower(r.FormValue("q"))
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_DIC_SEARCH@888@%v", strings.Replace(KEYWORD, " ", "_", -1))
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			//redirect to referrer
			uReferer := r.Referer()
			http.Redirect(w, r, uReferer, http.StatusFound)
			return
 
		case SEARCH_FUNC == "RC_WIKI_SEARCH":			
			KEYWORD := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_WIKI_SEARCH@888@%v", strings.Replace(KEYWORD, " ", "_", -1))
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			//redirect to referrer
			uReferer := r.Referer()
			http.Redirect(w, r, uReferer, http.StatusFound)
			return			
			
		case SEARCH_FUNC == "RC_WEB_SEARCH2":			
			URL := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_WEB_SEARCH2@888@%v", URL)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			uReferer := r.Referer()
			http.Redirect(w, r, uReferer, http.StatusFound)
			//http.Redirect(w, r, fUrl, http.StatusFound)
			return
			
		case SEARCH_FUNC == "RC_PLAY_MUSIC":			
			mid := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_PLAY_MUSIC@888@%v", mid)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			fmt.Fprintf(w, "Music has been queued. Click back to return.")
			return
		
		case SEARCH_FUNC == "RC_YT_SEARCH":			
			KEYWORD := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_YT_SEARCH@888@%v", KEYWORD)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			cKey3 := fmt.Sprintf("ULAPPH_GYTBY_%s_%v", "manual", base64.StdEncoding.EncodeToString([]byte(stripchars(strings.TrimSpace(KEYWORD)," "))))
			redURL := fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=yt", cKey3)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
		
		case SEARCH_FUNC == "RC_IN_ULAPPH":			
			KEYWORD := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_IN_ULAPPH@888@%v", KEYWORD)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			redURL := fmt.Sprintf("/search?f=rc1&s=%v&t=%v", KEYWORD, "In ULAPPH")
			http.Redirect(w, r, redURL, http.StatusFound)
			return
		
		case SEARCH_FUNC == "RC_ALL_ULAPPH":			
			KEYWORD := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_ALL_ULAPPH@888@%v", KEYWORD)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			redURL := fmt.Sprintf("/search?f=glow2&s=%v&t=%v", KEYWORD, "All ULAPPH Sites")
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "RC_YT_SEARCH_ID":			
			YID := r.FormValue("q")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_YT_SEARCH_ID@888@%v", YID)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			//redirect to referrer
			uReferer := r.Referer()
			http.Redirect(w, r, uReferer, http.StatusFound)
			return
		
		case SEARCH_FUNC == "RC_YT_SEARCH_ID2":	
			YID := r.FormValue("q")
			TYPE := r.FormValue("t")
			//send channel message
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_RC_YT_SEARCH_ID2@888@%v@888@%v", YID, TYPE)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
			//redirect to referrer
			//uReferer := r.Referer()
			//http.Redirect(w, r, uReferer, http.StatusFound)
			return
		//D0062
		//maybe we can remove these search due to dialogflow
		case SEARCH_FUNC == "TDSSLIDE":			
			SEARCH_KEY := r.FormValue("q")
			redURL := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v", SEARCH_KEY, SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "TDSARTL":		
			SEARCH_KEY := r.FormValue("q")
			redURL := fmt.Sprintf("/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v", SEARCH_KEY, SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "TDSMEDIA":		
			SEARCH_KEY := r.FormValue("q")
			redURL := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v", SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "TDSSLIDE-UPD":			
			SEARCH_KEY := r.FormValue("q")
			redURL := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v", SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "TDSARTL-UPD":		
			SEARCH_KEY := r.FormValue("q")
			redURL := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%v", SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "TDSMEDIA-UPD":		
			SEARCH_KEY := r.FormValue("q")
			redURL := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v", SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "EXT-GOOGLE":		
			SEARCH_KEY := r.FormValue("q")
			redURL := fmt.Sprintf("https://www.google.com?q=%v", SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case SEARCH_FUNC == "EXT-WIKIPEDIA":		
			SEARCH_KEY := r.FormValue("q")
			redURL := fmt.Sprintf("https://en.wikipedia.org/w/index.php?search=%v", SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
 		
		case SEARCH_TARGET == "InDoc":
			if SYS_SITE_PRIVATE == true {
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
				if FL_PROC_OK == false {return}
			}
			
			IDX_TARGET := r.FormValue("IDX")
			SID := r.FormValue("SID")
			SEARCH_KEY := r.FormValue("q")
			if SID == "" {
				fmt.Fprintf(w, "Incomplete inputs")
				return				
			}
			if IDX_TARGET == "AUTO" {
				SPL := strings.Split(SID,"-")
				if len(SPL) > 0 {
					TARGET := SPL[0]
					switch TARGET {
						case "TDSSLIDE":	
							IDX_TARGET = "IDX_TDSSLIDE"
						case "TDSARTL":
							IDX_TARGET = "IDX_TDSARTL"
						case "TDSMEDIA":
							IDX_TARGET = "IDX_TDSMEDIA"
						default:
							fmt.Fprintf(w, "Invalid format")
							return						
					}
				} else {
					fmt.Fprintf(w, "Invalid target")
					return						
				}
			}
            _, uid := checkSession(w,r)
            
			//perform bleve search
			bleveSearch(w,r,uid,IDX_TARGET,SID,SEARCH_KEY)
			return
		//Search took x.x secs with x results from 1 site
		default:
			if SYS_SITE_PRIVATE == true {
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
				if FL_PROC_OK == false {return}
			}
			t := time.Now().Local()
			start := fmt.Sprintf(t.Format("20060102150405"))
			stat := Search {
				Mode: "Site Search",
				Start: start,
				End: "",
				Results: 0,
				Sites: 1,
			}
			//search is internal
			SEARCH_KEY := r.FormValue("s")
			if SEARCH_FUNC == "basic" && SEARCH_TARGET == "" {
				SEARCH_TARGET = "In ULAPPH"
			}
 
			if err := userAccessTemplateMobileRootSearch.Execute(w, "ULAPPH"); err != nil {
			 panic(err)
			}
 
			url1 := "/logout"	
			//get custom hidable menu from cache
			//showLeftMenu(w,r)
			
			if err := mobileBodyTemplateContentA.Execute(w, url1); err != nil {
			 panic(err)
			}
			
			if err := mobileBodyTemplateContentB2.Execute(w, ""); err != nil {
			 panic(err)
			}
 
			if err := mobileBodyTemplateContentLoaderA2Search.Execute(w, ""); err != nil {
			 panic(err)
			}
			switch  {
 
				case SEARCH_FUNC == "glow" || SEARCH_FUNC == "basic":
 
					
					switch SEARCH_INT {
						
					case "yes":
						if err := htmlBodySearchGlowSelf.Execute(w, SEARCH_KEY); err != nil {
						  panic(err)
						}		
					case "all":
						if err := htmlBodySearchGlowExt.Execute(w, SEARCH_KEY); err != nil {
						  panic(err)
						}
					default:
						if err := htmlBodySearchGlow.Execute(w, SEARCH_KEY); err != nil {
						  panic(err)
						}					
					}
					
					//get URLFETCH searches
					cKey := fmt.Sprintf("URLFETCH_LIST")
					URL_LIST := ""
					URL_LIST = getStrMemcacheValueByKey(w,r,cKey)
 
					if URL_LIST != "" {
 
						temp := strings.Split(URL_LIST,"\n")
						if len(temp) > 0 {
							fmt.Fprintf(w, "<section class=\"webdesigntuts-workshop2\">")
							fmt.Fprintf(w, "	<h1><font color=blue>Website Monitor List</font></h1>")
							fmt.Fprintf(w, "<ul>")
							for j := 0; j < len(temp); j++ {
 
								tURL := strings.TrimSpace(temp[j])
								if tURL != ""  {
									fmt.Fprintf(w, "<li><a href=\"%v\" target=\"urlfetch\">%v</a>", tURL, tURL)
								}
							}
							fmt.Fprintf(w, "</ul>")
							fmt.Fprintf(w, "</section>")
						}
					}
                
				case SEARCH_FUNC == "glow2" && SEARCH_TARGET == "In ULAPPH" && SEARCH_KEY != "":
                    
                    //searchRes := searchIndexS.Search(types.SearchReq{Text:SEARCH_KEY})
                    //fmt.Fprintf(w, fmt.Sprintf("%v", searchRes))
                    //return

					if SYS_SITE_PRIVATE == true {
						FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
						if FL_PROC_OK == false {return}
					}
 
					recCtr := 0
					
					searchChan := make(chan []byte)
					//searchChanDone := make(chan bool, 2)
					stat.Sites++
					go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSSLIDE", SEARCH_KEY, recCtr, "SLIDE", sec)
					w.Write(<-searchChan)
					
					stat.Sites++
					searchChan = make(chan []byte)
					go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSARTL", SEARCH_KEY, recCtr, "ARTICLE", sec)
					w.Write(<-searchChan)
					_, uid := checkSession(w,r)
					if uid != "" {
						searchChan := make(chan []byte)
						//searchChanDone := make(chan bool, 5)
						stat.Sites++
						go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSMEDIA", SEARCH_KEY, recCtr, "MEDIA", sec)
						w.Write(<-searchChan)
						
						searchChan = make(chan []byte)
						stat.Sites++
						go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSPROF", SEARCH_KEY, recCtr, "PROFILE", sec)
						w.Write(<-searchChan)
						
						searchChan = make(chan []byte)
						stat.Sites++
						go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSICONS", SEARCH_KEY, recCtr, "WEBSITE", sec)
						w.Write(<-searchChan)
					}
 
				case SEARCH_FUNC == "rc1" && SEARCH_TARGET == "In ULAPPH" && SEARCH_KEY != "":
				
					if SYS_SITE_PRIVATE == true {
						FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
						if FL_PROC_OK == false {return}
					}
	
					recCtr := 0
					//result := ""
					
					searchChan := make(chan []byte, 2)
					stat.Sites++
					//searchChanDone := make(chan bool)
					go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSSLIDE", SEARCH_KEY, recCtr, "SLIDE", sec)
					fmt.Fprintf(w, "%v", <-searchChan)
					//<-searchChanDone
					
					stat.Sites++
					go searchIndex(w, r, searchChan, SEARCH_FUNC, "IDX_TDSARTL", SEARCH_KEY, recCtr, "ARTICLE", sec)
					fmt.Fprintf(w, "%v", <-searchChan)
					//<-searchChanDone
					
										
				default:
					///editor?EDIT_FUNC=TIMELINE&SID=GEN
					reqStr := fmt.Sprintf("/editor?EDIT_FUNC=TIMELINE&SID=GEN")
					http.Redirect(w, r, reqStr, http.StatusFound)
					return
            }
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: SYS_GUEST_CHAT_URL,
				STR_FILLER2: getStartColor(w,r),
			}
			if err := mobileBodyTemplateContentLoaderB.Execute(w, &TEMPDATA); err != nil {
			 panic(err)
			}
			stat.End = fmt.Sprintf(t.Format("20060102150405"))
 			timeFormat := "20060102150405"
			then, _ := time.Parse(timeFormat, start)
			duration := time.Since(then)
			stat.Elapsed = duration.Seconds()
			//default
			if SEARCH_KEY != "" {
				fmt.Fprintf(w, "<center><font color=green><b>%v</b> for <b>\"%v\"</b> from <b>%v</b> queries took <b>%v</b> seconds!</font></center><br>", stat.Mode, SEARCH_KEY, stat.Sites, stat.Elapsed)
			}
			displaySocialSites(w,r)
			if err := mobileBodyTemplateContentFooter.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {
			 panic(err)
			}
			if err := desktopBodyTabzillaTemplateMobilePublic.Execute(w, url1); err != nil {					
			 panic(err)
			}
	}	
}
//handles bleve search which is capable of searching inside a document line by line 
func bleveSearch(w http.ResponseWriter, r *http.Request, uid, IDX_TARGET, SID, SEARCH_KEY string) {
    //c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
	if SEARCH_KEY == "" {
		bleveSearchOut(w,r,uid,IDX_TARGET,SID,"","","",SEARCH_KEY,nil)
		return
    }
    
	// open a new index
	mapping := bleve.NewIndexMapping()
	inBlev, err := bleve.NewMemOnly(mapping)
	if err != nil {
		fmt.Println(err)
		return
    }
    blobkey := ""
    pDOC_STAT := ""
    pFL_SHARED := ""
    pDOC_AUTHOR := ""
    pDOC_TITLE := ""
    pDOC_DESC := ""
    pCONTENT_URL := ""
    if IDX_TARGET == "IDX_TDSSLIDE" || IDX_TARGET == "IDX_TDSARTL" || IDX_TARGET == "IDX_TDSMEDIA" {
        SPL := strings.Split(SID,"-")
        DOC_ID := "0"
        if len(SPL) > 1 {
            DOC_ID = SPL[1]
        }
        docID := str2int(DOC_ID)
        //blobkey := ""
        if IDX_TARGET == "IDX_TDSSLIDE" {
            blobkey, pDOC_STAT, pFL_SHARED, pDOC_AUTHOR, _, pDOC_TITLE, _, _, _, _  = getTDSSLIDEBlobKey(w, r, docID)
        } else if IDX_TARGET == "IDX_TDSARTL" {
            blobkey, pDOC_STAT, pFL_SHARED, pDOC_AUTHOR, _, pDOC_TITLE, _, _, _ = getTDSARTLBlobKey(w, r, docID)
        } else {
            blobkey, _, pDOC_TITLE, pDOC_AUTHOR, pDOC_STAT, pFL_SHARED, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
        }
    } else {
        fmt.Fprintf(w, "InDocSearch Error: Invalid SID type")
        return
    }
	FL_SEARCH_OK := false
	switch {
		case pFL_SHARED == "Y" && (pDOC_STAT == "Premium" || pDOC_STAT == "Worldwide" || pDOC_STAT == "ULAPPH Only" || (pDOC_STAT == "Personal" && pDOC_AUTHOR == uid)):
			FL_SEARCH_OK = true
		case pFL_SHARED == "Y" && (pDOC_STAT == "Premium" || pDOC_STAT == "Worldwide" || pDOC_STAT == "ULAPPH Only"):
			FL_SEARCH_OK = true
		case pDOC_AUTHOR == uid:
			FL_SEARCH_OK = true
		case pFL_SHARED == "Y" && (pDOC_STAT == "Premium" || pDOC_STAT == "Worldwide" || pDOC_STAT == "ULAPPH Only" || pDOC_AUTHOR == uid):
			FL_SEARCH_OK = true
		case pDOC_AUTHOR == uid:
			FL_SEARCH_OK = true
		case pFL_SHARED == "Y" && (pDOC_STAT == "Premium" || pDOC_STAT == "Worldwide"):
			FL_SEARCH_OK = true
	}
	if FL_SEARCH_OK == true {
		switch {
			case IDX_TARGET == "IDX_TDSSLIDE" || IDX_TARGET == "IDX_TDSARTL" || IDX_TARGET == "IDX_TDSMEDIA":
				blobByte := getBlobByte(w, r, blobkey)
				//for every section, add to index
				scanner := bufio.NewScanner(bytes.NewReader(blobByte))
				thisText := ""
				i := 0
				l := 0
				for scanner.Scan() {
					l++
					if scanner.Text() != "" {
						thisStr := fmt.Sprintf("%v", scanner.Text())
						if string(thisStr[0]) == "*" {
							if thisText != "" {
                                
								d := Bleve {
									Name: scanner.Text(),
									Text: thisText,
								}
								// index some data
								inBlev.Index(fmt.Sprintf("id%v:line%v",i,l), d)
							}
							thisText = ""
							i++
						} else {
							thisText = fmt.Sprintf("%v\n%v", thisText, scanner.Text())
						}
					}
				}
            default:
                fmt.Fprintf(w, "InDocSearch Error: Invalid SID type")
                return
        }
        
		// search for some text
		query := bleve.NewMatchQuery(SEARCH_KEY)
		search := bleve.NewSearchRequest(query)
		search.Highlight = bleve.NewHighlight()
		searchResults, err := inBlev.Search(search)
		if err != nil {
			//fmt.Println(err)
			return
		}
		bleveSearchOut(w,r,uid,IDX_TARGET,SID,SEARCH_KEY,pDOC_TITLE, pDOC_DESC,pCONTENT_URL,searchResults)
	} else {
		fmt.Fprintf(w, "Insufficient privilege to search this document!")
	}
}

//handles blevesearch output 
func bleveSearchOut(w http.ResponseWriter, r *http.Request, uid, IDX_TARGET, SID, SEARCH_KEY, TITLE, DESC, URL string, searchResults interface{}) {
 
	const header = `<!DOCTYPE html>
		<html>
		<head>
		<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
		</head>
		<body bgcolor="white">`
	fmt.Fprintf(w, "%v", header)
		
	if SEARCH_KEY != "" {
		//fmt.Fprintf(w, "<br>Searched <b>%v</b> in <b>%v</b> <br><b>Title</b>: %v <br><b>Desc</b>: %v</b>", SEARCH_KEY, SID, TITLE, DESC)
        fmt.Fprintf(w, "<br>Searched <b>%v</b> in <b>%v</b> <br><b>Title</b>: %v", SEARCH_KEY, SID, TITLE)
        //fmt.Fprintf(w, "<br><b>Open</b>: [ <a href=\"%v\" target=\"%v-view\">Full</a> ][ <a href=\"%v\" target=\"%v-text\">Text</a> ] <hr>", URL, SID, fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=%v", SID), SID)
        fmt.Fprintf(w, "<br>[ <a href=\"%v\" target=\"%v-text\">Open Text</a> ] <hr>", fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=%v", SID), SID)
		
		fmt.Fprintf(w, "<pre>%v</pre><hr>", searchResults)	
	}
 
	TEMPDATA := TEMPSTRUCT{
		STR_FILLER1: IDX_TARGET,
		STR_FILLER2: SID,
		STR_FILLER3: SEARCH_KEY,
	}		
	if err := htmlInDocSearch.Execute(w, &TEMPDATA); err != nil {
	  panic(err)
	}
 
	const footer = `<br><br></html>
		</body>`
	fmt.Fprintf(w, "%v", footer)
}

//determine if the http request is from a bot 
func isBot(w http.ResponseWriter, r *http.Request) (FL_IS_BOT bool) {
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	uaBot := ua.Bot()
	
	uaPlatform := ua.Platform()
	uaOS := ua.OS()	
	nameb, _ := ua.Browser()
	FL_IS_BOT = false
	if uaBot == true || (uaPlatform == "" && uaOS == "" && nameb == "") {
		FL_IS_BOT = true
	}
	return FL_IS_BOT
}
 
//checks http request is from a desktop
func checkDesktop(w http.ResponseWriter, r *http.Request) (FL_DESKTOP bool) {
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	uaPlatform := ua.Platform()
	nameb, _ := ua.Browser()
	dispStr := fmt.Sprintf("%s.%s", uaPlatform, nameb)
	if isDesktop[dispStr] == true {
		FL_DESKTOP = true
	} else {
		FL_DESKTOP = false
	}
	return FL_DESKTOP
}

//checks http request is from a mobile
func checkMobile(w http.ResponseWriter, r *http.Request) (FL_MOBILE bool) {
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	if ua.Mobile() == true {
		FL_MOBILE = true
	} else {
		FL_MOBILE = false
	}
	return FL_MOBILE
}
 
//checks if the browser is capable of handling slides format 
func checkSlidable(w http.ResponseWriter, r *http.Request) (FL_DESKTOP bool) {
	if SYS_CHK_AUTO_SL2ART == false {
		FL_DESKTOP = true
	} else {
		uag := r.UserAgent()
		ua := user_agent.New(uag)
		uaPlatform := ua.Platform()
		nameb, _ := ua.Browser()
		dispStr := fmt.Sprintf("%s.%s", uaPlatform, nameb)
 
		if isSlidable[dispStr] == true {
			FL_DESKTOP = true
		} else {
			FL_DESKTOP = false
		}
	}
 
	return FL_DESKTOP
}
//search the slides, articles, media index files 
//it uses google appengine search api to index and search documents
func searchIndex(w http.ResponseWriter, r *http.Request, searchChan chan []byte, SEARCH_FUNC string, IDX_TARGET string, SEARCH_KEY string, recCtr int, ITEM_TYPE, sec string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//u := user.Current(c)
	
	var buffer3 bytes.Buffer
		
	uid := ""
	if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		//uid = uid
		_, uid = checkSession(w,r)
	}
	index, err := search.Open(IDX_TARGET)
	if err != nil {
		 //panic(err)
	}
	
	for t := index.Search(c, SEARCH_KEY, nil); ; {
		var doc Doc
		id, err := t.Next(&doc)
		if err == search.Done {
			break
		}
		if err != nil {
			break
		}
		var p IDX_TDSSLIDE
		err = index.Get(c, id, &p)
		if err != nil {
			return
		}
		
		FL_SEARCH_OK := false
		FL_DISP_MODE := "normal"
		if SEARCH_FUNC == "rc1" {
			FL_DISP_MODE = "remote1"
		}		
		
		switch {
		
			case (SEARCH_FUNC == "glow2" || SEARCH_FUNC == "rc1") &&
				 (p.FL_SHARED == "Y" && (p.DOC_STAT == "Premium" || p.DOC_STAT == "Worldwide" || p.DOC_STAT == "ULAPPH Only" || (p.DOC_STAT == "Personal" && p.DOC_AUTHOR == uid))):
				FL_SEARCH_OK = true
 
			case (SEARCH_FUNC == "glow2" || SEARCH_FUNC == "rc1") &&
				 (p.FL_SHARED == "Y" && (p.DOC_STAT == "Premium" || p.DOC_STAT == "Worldwide" || p.DOC_STAT == "ULAPPH Only")):
				FL_SEARCH_OK = true
				
			case (SEARCH_FUNC == "glow2"	|| SEARCH_FUNC == "rc1") && p.DOC_AUTHOR == uid:
				FL_SEARCH_OK = true
				
			case (SEARCH_FUNC == "ext-search" || SEARCH_FUNC == "rc1") &&
				 (p.FL_SHARED == "Y" && (p.DOC_STAT == "Premium" || p.DOC_STAT == "Worldwide" || p.DOC_STAT == "ULAPPH Only" || p.DOC_AUTHOR == uid)):
				FL_SEARCH_OK = true
				
			case (SEARCH_FUNC == "ext-search" || SEARCH_FUNC == "rc1") && p.DOC_AUTHOR == uid:
				FL_SEARCH_OK = true
				
			case (SEARCH_FUNC == "ext-search-pub" || SEARCH_FUNC == "rc1") && (p.DOC_STAT == "Premium" || p.DOC_STAT == "Worldwide" && p.FL_SHARED == "Y"):
				FL_SEARCH_OK = true
 
			case SEARCH_FUNC == "ifs-wtb":
				FL_SEARCH_OK = true
				FL_DISP_MODE = "cron"
			//D0063
			//case p.DOC_AUTHOR == uid:
			//	FL_SEARCH_OK = true
		}
		
		if FL_SEARCH_OK == true {
			//myCtr++
			switch {
			case FL_DISP_MODE == "remote1":
				buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"index1\">"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
 
				switch ITEM_TYPE {
					case "SLIDE":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "ARTICLE":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "MEDIA":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-media.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "PROFILE":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-profile.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "WEBSITE":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-website.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "FS":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-forsale.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "WTB":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-wantobuy.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
				}
				
				buffer3.WriteString(fmt.Sprintf("		<a href=\"/message-channel?CHAN_FUNC=openLink&UID=&message=@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK@888@%v@888@0\" class=\"creator_name\"  target=\"view\">%v</a>", searchSchemeHandler(w,r,p.CONTENT_URL,sec), p.DOC_STAT))
				buffer3.WriteString(fmt.Sprintf("			  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
				buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("       <a href=\"https://www.ulapph.com/search?t=InDoc&IDX=%v&SID=%v&q=%v\" target=\"%v\"><img src=\"/static/img/doc-search.png\" title=\"Search InDoc\" height=\"16\" width=\"16\"></a>", IDX_TARGET, p.DOC_KEY, SEARCH_KEY, p.DOC_KEY))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("       <a href=\"https://www.ulapph.com/wall?WALL_FUNC=IDX_COPY&SOURCE_TBL=%v&DOC_KEY=%v&SOURCE_TYPE=%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" title=\"Wall Copy\" height=\"16\" width=\"16\"></a>", p.SOURCE_TBL, p.DOC_KEY, p.SOURCE_TYPE, p.DOC_TITLE, CMD_GEN_KEY))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("       <a href=\"https://www.ulapph.com/uloc?LS_FUNC=IDX_COPY&SOURCE_TBL=%v&DOC_KEY=%v&SOURCE_TYPE=%v&IMG_SRC=%v&TITLE=%v\"><img src=\"/static/img/uloc.png\" title=\"Save to ULOC\" height=\"16\" width=\"16\"></a>", p.SOURCE_TBL, p.DOC_KEY, p.SOURCE_TYPE, p.IMG_URL, p.DOC_TITLE))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.DOC_NUM_COMMENTS))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.DOC_NUM_LIKES))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.DOC_NUM_VIEWS))))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("	  </ul>"))
				buffer3.WriteString(fmt.Sprintf("	</div>"))
				buffer3.WriteString(fmt.Sprintf("	<article>"))
				buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.IMG_URL))
				buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
				buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
				
				//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.DOC_TITLE, p.DOC_DESC)))
				buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.DOC_TITLE, stmpHumanizeStr(p.DATE_UPDATED))))
				buffer3.WriteString(fmt.Sprintf("	  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	  <a href=\"/message-channel?CHAN_FUNC=openLink&UID=&message=@888@ULAPPH-SYS-UPD@888@SYS_OPEN_LINK@888@%v@888@0\"  target=\"view\"></a>", searchSchemeHandler(w,r,p.CONTENT_URL,sec)))
				buffer3.WriteString(fmt.Sprintf("	</article>"))
				buffer3.WriteString(fmt.Sprintf("</div>"))
				
			case FL_DISP_MODE == "normal":
				buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"index2\">"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
 
				switch ITEM_TYPE {
					case "SLIDE":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "ARTICLE":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "MEDIA":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-media.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "PROFILE":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-profile.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "WEBSITE":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-website.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "FS":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-forsale.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
					case "WTB":
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-wantobuy.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
				}
				
				buffer3.WriteString(fmt.Sprintf("		<a href=\"%v\" class=\"creator_name\"  target=\"view\">%v</a>", searchSchemeHandler(w,r,p.CONTENT_URL,sec), p.DOC_STAT))
				buffer3.WriteString(fmt.Sprintf("			  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
				buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("       <a href=\"https://www.ulapph.com/search?t=InDoc&IDX=%v&SID=%v&q=%v\" target=\"%v\"><img src=\"/static/img/doc-search.png\" title=\"Search InDoc\" height=\"16\" width=\"16\"></a>", IDX_TARGET, p.DOC_KEY, SEARCH_KEY, p.DOC_KEY))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("       <a href=\"https://www.ulapph.com/wall?WALL_FUNC=IDX_COPY&SOURCE_TBL=%v&DOC_KEY=%v&SOURCE_TYPE=%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" title=\"Wall Copy\" height=\"16\" width=\"16\"></a>", p.SOURCE_TBL, p.DOC_KEY, p.SOURCE_TYPE, p.DOC_TITLE, CMD_GEN_KEY))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("       <a href=\"https://www.ulapph.com/uloc?LS_FUNC=IDX_COPY&SOURCE_TBL=%v&DOC_KEY=%v&SOURCE_TYPE=%v&IMG_SRC=%v&TITLE=%v\"><img src=\"/static/img/uloc.png\" title=\"Save to ULOC\" height=\"16\" width=\"16\"></a>", p.SOURCE_TBL, p.DOC_KEY, p.SOURCE_TYPE, p.IMG_URL, p.DOC_TITLE))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.DOC_NUM_COMMENTS))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.DOC_NUM_LIKES))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.DOC_NUM_VIEWS))))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("	  </ul>"))
				buffer3.WriteString(fmt.Sprintf("	</div>"))
				buffer3.WriteString(fmt.Sprintf("	<article>"))
				buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.IMG_URL))
				buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
				buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
				//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.DOC_TITLE, p.DOC_DESC)))
				buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.DOC_TITLE, stmpHumanizeStr(p.DATE_UPDATED))))
				buffer3.WriteString(fmt.Sprintf("	  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	  <a href=\"%v\"  target=\"view\"></a>", searchSchemeHandler(w,r,p.CONTENT_URL,sec)))
				buffer3.WriteString(fmt.Sprintf("	</article>"))
				buffer3.WriteString(fmt.Sprintf("</div>"))
				
			default:
				buffer3.WriteString(fmt.Sprintf("%v: %v<br>", IDX_TARGET, p.DOC_TITLE))
				buffer3.WriteString(fmt.Sprintf("<a href=\"%v\"><img src=\"%v\" width=100 height=60><br>View Item</a>", searchSchemeHandler(w,r,p.CONTENT_URL,sec), p.IMG_URL))
			}
		}
	}
	
	searchChan <- buffer3.Bytes()
}

//handles search schemes to determine if http or https 
func searchSchemeHandler(w http.ResponseWriter, r *http.Request, turl, sec string) string {

	if SYS_CHG_HTTPS == false {
		return turl
	}
	
	s := strings.Index(turl, "https:")
	n := strings.Index(turl, "http:")
	
	if s == -1 && n == -1 {
		turl = fmt.Sprintf("%v%v", getSchemeUrl(w,r), turl)
	}
	
	switch {
		case sec == "Y" && SYS_HTTPS == true:
			turl = strings.Replace(turl, "http://", "https://", -1)
			
		case sec == "Y" && SYS_HTTPS == false:
			k, _ := url.Parse(turl)
			hs := fmt.Sprintf("https://%v/", k.Host)
			turl = strings.Replace(turl, "http://", "https://", -1)
			turl = strings.Replace(turl, hs, domRefMatchS, -1)
			
		case sec == "N":
			turl = strings.Replace(turl, "https://", "http://", -1)
 
	}
	return turl
	
}

//handles /people url 
func people(w http.ResponseWriter, r *http.Request) {
	checkReferrer(w,r)
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	PEOPLE_FUNC := r.FormValue("PEOPLE_FUNC")
    _, uid := checkSession(w,r)
    //D0086
    datastoreClient := createClientDS()
	switch PEOPLE_FUNC {
		case "CHECK-SYS1":
			//check regularly for new eq
			writeHTMLHeader(w, 200)
			cKey := "ALARM_EQ_MSG"
			ALARM_EQ_MSG := ""
			ALARM_EQ_MSG = getStrMemcacheValueByKey(w,r,cKey)
			w.Write([]byte(ALARM_EQ_MSG))
			//also check alarm for user
			cKey2 := fmt.Sprintf("ALARM_EQ_MSG_%v", uid)
			ALARM_EQ_MSG2 := ""
			ALARM_EQ_MSG2 = getStrMemcacheValueByKey(w,r,cKey2)
			w.Write([]byte(ALARM_EQ_MSG2))
			return
 
		//check site act
		case "CHECK-SYS2":
			//check regularly for new eq
			cKey := "ACTIVITY_SITE"
			ACTIVITY_SITE := ""
			ACTIVITY_SITE = getStrMemcacheValueByKey(w,r,cKey)
 
			writeHTMLHeader(w, 200)
			w.Write([]byte(ACTIVITY_SITE))
			return
 
		//check ext act
		case "CHECK-SYS3":
			//check regularly for new eq
			cKey := "ACTIVITY_EXT"
			ACTIVITY_EXT := ""
			ACTIVITY_EXT = getStrMemcacheValueByKey(w,r,cKey)
 
			writeHTMLHeader(w, 200)
			w.Write([]byte(ACTIVITY_EXT))
			return
			
		//check logged ins
		//check broadcast msg
		case "CHECK-BM":
			//check regularly for new eq
			cKey := "BROADCAST_MSG"
			BROADCAST_MSG := ""
			BROADCAST_MSG = getStrMemcacheValueByKey(w,r,cKey)
 
			writeHTMLHeader(w, 200)
			w.Write([]byte(BROADCAST_MSG))
			return
			
		//check motd
		case "CHECK-MOTD":
			//check regularly for new eq
			if SYS_STATELESS_SERVER == true {
				MOTD_MSG := getLocalMotd(w,r,"motd")
				writeHTMLHeader(w, 200)
				w.Write([]byte(MOTD_MSG))
				return
			}
			UID := r.FormValue("UID")
			cKey := fmt.Sprintf("MOTD_MSG_%s", UID)
			MOTD_MSG := ""
			MOTD_MSG = getStrMemcacheValueByKey(w,r,cKey)
 
			writeHTMLHeader(w, 200)
			w.Write([]byte(MOTD_MSG))
			return
 
		//report activity when ui is used
		case "REP-ACT":
			UID := r.FormValue("UID")
			title := r.FormValue("title")
			url := r.FormValue("url")
			url = resolveURL(domRefMatchS,url)
			//send shareable link
			MSG := fmt.Sprintf("<img src=\"/static/img/jswm.png\" width=50 height=50> New window opened: [%v] %v <a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"%v\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", title, ShortenUrl(w,r,url), title, url, title)
			if uid != "" && url != "" && title != "" {
				//when a UWM window is opened
				sendChannelMessage(w,r,uid, MSG)
			}
			updateUserActiveData(w, r, c, UID, "uwm")
			return
			
		//report activity when chatters present
		case "REP-ACT2":
			UID := r.FormValue("UID")
			mode := r.FormValue("mode")
			//newconfigtemplate
			updateUserActiveData(w, r, c, UID, fmt.Sprintf("chatroom-%v", mode))
			return
		
		//report generic activity
		case "REP-ACTX":
			UID := r.FormValue("UID")
			STAT := r.FormValue("STAT")
			updateUserActiveData(w, r, c, UID, STAT)
			return
	}
	
	//do this here
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	
	switch PEOPLE_FUNC {
 
		case "SETUWM":
			//var seturl = '/people?PEOPLE_FUNC=SETUWM&u=' + urlParams["u"] + '&UID=' + aUser.value + '&SID=' + sid;
			unum := r.FormValue("u")
			UID := r.FormValue("UID")
			SID := r.FormValue("SID")
			
			SPL := strings.Split(UID, "---")
			if len(SPL) <= 0 {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))	
				return
			}
			if SPL[0] == "" || SPL[1] == "" {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))	
				return
			}
 
			if uid != SPL[0] {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))	
				return
			}
			cfgName := fmt.Sprintf("SYSTEM_UWM_%v_%v", unum, uid)
			g := TDSCNFG{
					SYS_VER: 1,
					USER: uid,
					CFG_ID: cfgName,
					DAT_TYP: "TXT",
					NUM_VAL: 0,
					TXT_VAL: SID,
					CFG_DESC: "Set via Media Gallery",
			}
			key := datastore.NameKey("TDSCNFG", cfgName, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
					panic(err)
            }
            //log.Printf("datastoreClient.Put()  [26341]")
			//log.Panicf("[S0150]")
			
			//msgDtl3 := fmt.Sprintf("UWM source has been set successfully! >>> UWM:%v SID: %v", unum, SID)
			//time.AfterFunc(5*time.Second, func() {
            //    laterNotifyGB(c, "autoNotifyPeopleGB", uid, msgDtl3, ADMMAIL)
			//})
			writeHTMLHeader(w, 200)
			w.Write([]byte("UWM source has been set successfully!"))	
			return	
 
		
		case "SETTOPICS":
			if isAdmin(w,r) == false {
				fmt.Fprintf(w, "Only admins allowed!")
				return
			}
			//var seturl = '/people?PEOPLE_FUNC=SETUWM&u=' + urlParams["u"] + '&UID=' + aUser.value + '&SID=' + sid;
			unum := r.FormValue("u")
			UID := r.FormValue("UID")
			//UID := "SYSTEM_USER"
			SID := r.FormValue("SID")
			
			SPL := strings.Split(UID, "---")
			if len(SPL) <= 0 {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))	
				return
			}
			if SPL[0] == "" || SPL[1] == "" {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))	
				return
			}
 
			if uid != SPL[0] {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))	
				return
			}
			cfgName := fmt.Sprintf("SYSTEM_TOPICS_%v_%v", unum, uid)
			g := TDSCNFG{
					SYS_VER: 1,
					USER: uid,
					CFG_ID: cfgName,
					DAT_TYP: "TXT",
					NUM_VAL: 0,
					TXT_VAL: SID,
					CFG_DESC: "Set via Media Gallery",
			}
			key := datastore.NameKey("TDSCNFG", cfgName, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
					panic(err)
            }
            //log.Printf("datastoreClient.Put()  [26395]")
			//log.Panicf("[S0151]")
			
			msgDtl3 := fmt.Sprintf("Topics source has been set successfully! >>> UWM:%v SID: %v", unum, SID)
			time.AfterFunc(5*time.Second, func() {
                laterNotifyGB(c, "autoNotifyPeopleGB", uid, msgDtl3, ADMMAIL)
            })
			writeHTMLHeader(w, 200)
			w.Write([]byte("Topics source has been set successfully!"))	
			return				
		//D0066
		case "SETBOT":
			if isAdmin(w,r) == false {
				fmt.Fprintf(w, "Only admins allowed!")
				return
			}
			//var seturl = '/people?PEOPLE_FUNC=SETBOT&u=' + urlParams["u"] + '&UID=' + aUser.value + '&SID=' + sid;
			unum := r.FormValue("u")
			UID := r.FormValue("UID")
			//UID := "SYSTEM_USER"
			SID := r.FormValue("SID")
			SPL := strings.Split(UID, "---")
			if len(SPL) <= 0 {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))
				return
			}
			if SPL[0] == "" || SPL[1] == "" {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))
				return
			}
			if uid != SPL[0] {
				writeHTMLHeader(w, 200)
				w.Write([]byte("Unauthorized operation!"))
				return
			}
			cfgName := fmt.Sprintf("SYSTEM_BOT_%v_%v", unum, uid)
			g := TDSCNFG{
					SYS_VER: 1,
					USER: uid,
					CFG_ID: cfgName,
					DAT_TYP: "TXT",
					NUM_VAL: 0,
					TXT_VAL: SID,
					CFG_DESC: "Set via Media Gallery",
			}
			key := datastore.NameKey("TDSCNFG", cfgName, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
					panic(err)
            }
            //log.Printf("datastoreClient.Put()  [26446]")
			//log.Panicf("[S0151]")
			msgDtl3 := fmt.Sprintf("Bot source has been set successfully! >>> UWM:%v SID: %v", unum, SID)
			time.AfterFunc(5*time.Second, func() {
                laterNotifyGB(c, "autoNotifyPeopleGB", uid, msgDtl3, ADMMAIL)
            })
            writeHTMLHeader(w, 200)
			w.Write([]byte("Bot source has been set successfully!"))
			return

		case "SYNC_NOTE":
			//r.ParseForm()
 
			dbName := r.FormValue("dbName")
			note_desktop_name := r.FormValue("dName")
			note_text := r.FormValue("note_text")
 
			//nKey := fmt.Sprintf("%v-%v-%v", dbName, note_desktop, note_id)
			nKey := fmt.Sprintf("%v-%v", dbName, note_desktop_name)
			MESSAGE := fmt.Sprintf("%v", note_text)
			subject := fmt.Sprintf("[NOTES] %v", nKey)
            time.AfterFunc(5*time.Second, func() {
                laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": uid, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
            })
		case "CHECK-GBM":
			cKey := fmt.Sprintf("GBM_MSG_SNIPPET_%v", uid)
			GBM_MSG_SNIPPET := ""
			GBM_MSG_SNIPPET = getStrMemcacheValueByKey(w,r,cKey)
			if GBM_MSG_SNIPPET == "" {
				GUESTBOOK_NUM_MSGS := checkNumMessages(w, r, uid)
				if GUESTBOOK_NUM_MSGS > 0 {
					if GUESTBOOK_NUM_MSGS == 1 {
						GBM_MSG_SNIPPET = fmt.Sprintf("You have %v new message!", GUESTBOOK_NUM_MSGS)
					} else {
						GBM_MSG_SNIPPET = fmt.Sprintf("You have %v new messages!", GUESTBOOK_NUM_MSGS)
					}
				}
			}
			writeHTMLHeader(w, 200)
			w.Write([]byte(GBM_MSG_SNIPPET))
			return
		case "CHECK-GBM-NUM-NEW":
			GUESTBOOK_NUM_MSGS := int2str(checkNumMessages(w, r, uid))
			writeHTMLHeader(w, 200)
			w.Write([]byte(GUESTBOOK_NUM_MSGS))
			return
		case "QUICK-VIEW":
			updateUserActiveData(w, r, c, uid, "QUICK-VIEW")
			GUESTBOOK_NUM_MSGS := checkNumMessages(w, r, uid)
			if GUESTBOOK_NUM_MSGS > 0 {
				reqStr := fmt.Sprintf("/guestbook?GB_FUNC=REFRESH")
				http.Redirect(w, r, reqStr, http.StatusFound)
				return
			}
 
			cKey := "ULAPPH-PEOPLE-QUICK-VIEW"
            ULAPPH_PEOPLE_QUICK_VIEW := []byte("")
            ULAPPH_PEOPLE_QUICK_VIEW = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_PEOPLE_QUICK_VIEW != nil {
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				} 	
				//ULAPPH_PEOPLE_QUICK_VIEW = item.Value
				//display slides
				//writeHTMLHeader(w, 200)
				w.Write(ULAPPH_PEOPLE_QUICK_VIEW)
				//return
				if err := htmlFooterModalKnock.Execute(w, ""); err != nil {
				  panic(err)
				}
			}
			
			if string(ULAPPH_PEOPLE_QUICK_VIEW) == "" {
 
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				} 		
				ctrOnline := 0
				listOnline := ""
				invCtr := 0
				//contHTML := ""
				//contHTML := fmt.Sprintf("<script src=\"https://apis.google.com/static/js/platform.js\" async defer></script><div class=\"warning2\">[<a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE\">View Online</a>] [<a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE&o=tiles\">Active Users</a>] [<a href=\"/people?PEOPLE_FUNC=LIST-VIEW\">View All</a>] [<a href=\"/chat\">Chat</a>] [<a href=\"https://ulapph-sites.appspot.com/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">Presence</a>] [<a href=\"https://ulapph-sites.appspot.com/directory?DIR_FUNC=sites\">List Sites</a>] [<a href=\"/guestbook?GB_FUNC=GB_OWNER\">Messages</a>] [<a href=\"/editor?EDIT_FUNC=SEMAPHORE\">SMS</a>] [<a href=\"/tools?FUNC=WIDGET&t=WallMessage\">WallMessage</a>] [<a href=\"/admin-setup?ADMIN_FUNC=SEND_MSG_ALL\">Broadcast Message</a>] [<a href=\"https://ulapph-sites.appspot.com/directory?DIR_FUNC=people\">All Users</a>] [<a href=\"/directory?DIR_FUNC=sessions2\">Site Sessions</a>] [<a href=\"https://ulapph-sites.appspot.com/directory?DIR_FUNC=sessions\">All Sessions</a>]</div>")
				contHTML := fmt.Sprintf("<script src=\"https://apis.google.com/static/js/platform.js\" async defer></script><div class=\"warning2\">[<a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE\">View Online</a>] [<a href=\"/people?PEOPLE_FUNC=LIST-VIEW\">View All</a>]</div>")
				q := datastore.NewQuery("TDSUSERS").Order("-LAST_LOGIN")
				//log.Panicf("[S0152]")
				recCount, _  := datastoreClient.Count(c,q)
                users := make([]TDSUSERS, 0, recCount)
                //log.Printf("datastoreClient.Get()  [26528]")
				if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
					 panic(err)
				 }
				
				for _, p := range users {
					//FL_PROFILE_FOUND := false
					isLOGGED_IN := p.LOGGED_IN
					USER_ACC_OPT := p.USER_ACC_OPT
					//fmt.Fprintf(w, "p.USER:<br> %s<br>", p.USER)
					
					q := datastore.NewQuery("TDSPROF").Filter("UID =", p.USER).Limit(1)
					//log.Panicf("[S0153]")
                    profile := make([]TDSPROF, 0, 1)
                    //log.Printf("datastoreClient.Get()  [26542]")
					if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
						 panic(err)
					}
					
					for _, x := range profile{
						if USER_ACC_OPT != "Invisible" {
							if (isLOGGED_IN == 1) {
								ctrOnline++
								contHTML = fmt.Sprintf("%v <div class=\"info2\"><img src=\"/static/img/flags/%v.gif\" width=48 height=30><a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=50 height=50 title=\"%s\"></img></a><a href=\"/guestbook?UID=%v\"><img src=\"/static/img/guestbook.png\" width=50 height=50/></img></a><a href=\"/chat?CHAT_FUNC=newChatRoom&INVITE=%v\"><img src=\"/static/img/chat.png\" width=50 height=50/></img></a><a href=\"#\" onclick=\"knock('%v');return false;\"><img src=\"/static/img/knock.png\" width=50 height=50/></img></a><g:hangout render=\"createhangout\" invites=\"[{ id : '%v', invite_type : 'EMAIL' }]\" widget_size=\"175\"></g:hangout><br>UID: %v<br>Acc Type: %v<br>Logged in: %v<br>Device: %v<br>Last active: %v<br>Credit Points: %v pts</div>", contHTML, x.COUNTRY, x.UID, x.UID, x.PICTURE, x.UID, x.UID, x.UID, x.UID, x.UID, x.UID, p.USER_ACC_TYP, stmpHumanizeStr(p.LAST_LOGIN), p.ACTIVE_DTLS, stmpHumanizeStr(p.LAST_ACTIVE), humanize.Comma(int64(x.CRED_PTS)))
								listOnline = fmt.Sprintf("%v <a href=\"/guestbook?UID=%v&GB_FUNC=FILTER\">%v</a>", listOnline, x.UID, x.UID)
							} else {
								contHTML = fmt.Sprintf("%v <div class=\"info2\"><img src=\"/static/img/flags/%v.gif\" width=48 height=30><a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=50 height=50 title=\"%s\"></img></a><a href=\"/guestbook?UID=%v\"><img src=\"/static/img/guestbook-offline.png\" width=50 height=50/></img></a><a href=\"#\" onclick=\"knock('%v');return false;\"><img src=\"/static/img/knock.png\" width=50 height=50/></img></a><g:hangout render=\"createhangout\" invites=\"[{ id : '%v', invite_type : 'EMAIL' }]\" widget_size=\"175\"></g:hangout><br>UID: %v<br>Acc Type: %v<br>Logged in: %v<br>Device: %v<br>Last active: %v<br>Credit Points: %v pts</div>", contHTML, x.COUNTRY, x.UID, x.UID, x.PICTURE, x.UID, x.UID, x.UID, x.UID, x.UID, p.USER_ACC_TYP, stmpHumanizeStr(p.LAST_LOGIN), p.ACTIVE_DTLS, stmpHumanizeStr(p.LAST_ACTIVE), humanize.Comma(int64(x.CRED_PTS)))
							}
						} else {
							invCtr++
						}
					}
				}	
				
				contHTML = fmt.Sprintf("%v <div class=\"success2\">Number of visible users online: %d</div>", contHTML, ctrOnline)	
				contHTML = fmt.Sprintf("%v <div class=\"validation2\">Number of invisible users: %d</div>", contHTML, invCtr)	
				contHTML = fmt.Sprintf("%v <div class=\"info2\">%v</div>", contHTML, listOnline)
				
				putStrToMemcacheWithExp(w,r,cKey,contHTML,MC_PEOPLE_EXPIRES_10_MIN)
				
				w.Write([]byte(contHTML))
				if err := htmlFooterModalKnock.Execute(w, ""); err != nil {
				  panic(err)
				}
				return
			}
					
		case "QUICK-VIEW-ONLINE":
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			
			if FL_VALID_USER != true {
				URL := fmt.Sprintf("%v/rag?f=slides&d=desktop0&n=1", SYS_DISP_ADS_HOST)
				//client := urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
				
				resp, err := http.Get(URL)
				if err != nil {
					panic(err)
				}
 
				bodyBytes, _ := ioutil.ReadAll(resp.Body)
				w.Write(bodyBytes)
			
				return
			}
		
			updateUserActiveData(w, r, c, uid, "QUICK-VIEW-ONLINE")
			DMODE := r.FormValue("o")
 
			cKey := "ULAPPH-PEOPLE-QUICK-VIEW-ONLINE"
			cKey2 := "ULAPPH-PEOPLE-QUICK-VIEW-ONLINE-TILES"
			cKey3 := "LAST_LOGIN_TIMESTAMP"
			
			LAST_LOGIN_TIMESTAMP_OLD := ""
			LAST_LOGIN_TIMESTAMP_OLD = getStrMemcacheValueByKey(w,r,cKey3)
			
            ULAPPH_PEOPLE_QUICK_VIEW := []byte("")
            ULAPPH_PEOPLE_QUICK_VIEW = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_PEOPLE_QUICK_VIEW != nil {
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				} 	
 
				//ULAPPH_PEOPLE_QUICK_VIEW = item.Value
				//display slides
				//writeHTMLHeader(w, 200)
				if DMODE == "" && string(ULAPPH_PEOPLE_QUICK_VIEW) != "" {
					w.Write(ULAPPH_PEOPLE_QUICK_VIEW)
					//return
					if err := htmlFooterModal.Execute(w, ""); err != nil {
					  panic(err)
					}
				}
			}
			
            ULAPPH_PEOPLE_QUICK_VIEW_TILES := []byte("")
            ULAPPH_PEOPLE_QUICK_VIEW_TILES = getBytMemcacheValueByKey(w,r,cKey2)
            if ULAPPH_PEOPLE_QUICK_VIEW_TILES != nil {    
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				} 	
 
				//ULAPPH_PEOPLE_QUICK_VIEW_TILES = item.Value
				//display slides
				//writeHTMLHeader(w, 200)
				if DMODE == "tiles" && string(ULAPPH_PEOPLE_QUICK_VIEW_TILES) != "" {
					w.Write(ULAPPH_PEOPLE_QUICK_VIEW_TILES)
					return
				}
			}
			
			if string(ULAPPH_PEOPLE_QUICK_VIEW) == "" || string(ULAPPH_PEOPLE_QUICK_VIEW_TILES) == "" || LAST_LOGIN_TIMESTAMP_OLD == "" {
 
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				} 		
				ctrOnline := 0
				listOnline := ""
				//contHTML := ""
				//contHTML := fmt.Sprintf("<script src=\"https://apis.google.com/static/js/platform.js\" async defer></script><div class=\"warning2\">[<a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE\">View Online</a>] [<a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE&o=tiles\">Active Users</a>] [<a href=\"/people?PEOPLE_FUNC=LIST-VIEW\">View All</a>] [<a href=\"/chat\">Chat</a>] [<a href=\"https://ulapph-sites.appspot.com/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">Presence</a>] [<a href=\"https://ulapph-sites.appspot.com/directory?DIR_FUNC=sites\">List Sites</a>] [<a href=\"/guestbook?GB_FUNC=GB_OWNER\">Messages</a>] [<a href=\"/editor?EDIT_FUNC=SEMAPHORE\">SMS</a>] [<a href=\"/guestbook?GB_FUNC=GB_OWNER\">Messages</a>] [<a href=\"/editor?EDIT_FUNC=SEMAPHORE\">SMS</a>] [<a href=\"/tools?FUNC=WIDGET&t=WallMessage\">WallMessage</a>] [<a href=\"/admin-setup?ADMIN_FUNC=SEND_MSG_ALL\">Broadcast Message</a>] [<a href=\"https://ulapph-sites.appspot.com/directory?DIR_FUNC=people\">All Users</a>] [<a href=\"/directory?DIR_FUNC=sessions2\">Site Sessions</a>] [<a href=\"https://ulapph-sites.appspot.com/directory?DIR_FUNC=sessions\">All Sessions</a>]</div>")
				contHTML := fmt.Sprintf("<script src=\"https://apis.google.com/static/js/platform.js\" async defer></script><div class=\"warning2\">[<a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE\">View Online</a>] [<a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE&o=tiles\">Active Users</a>] [<a href=\"/people?PEOPLE_FUNC=LIST-VIEW\">View All</a>] </div>")
				contHTML2 := ""
				contHTML3 := ""
 
				q := datastore.NewQuery("TDSUSERS").Order("-LAST_ACTIVE")
				//log.Panicf("[S0154]")
				recCount, _  := datastoreClient.Count(c,q)
                users := make([]TDSUSERS, 0, recCount)
                //log.Printf("datastoreClient.Get()  [26658]")
				if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
					 panic(err)
				 }
				
				rCtr := 0
				pendCtr := 0
				invCtr := 0
				LAST_LOGIN_TIMESTAMP := ""
				for _, p := range users {
					rCtr++
					if rCtr == 1 {
						LAST_LOGIN_TIMESTAMP = p.LAST_ACTIVE
						if LAST_LOGIN_TIMESTAMP_OLD == LAST_LOGIN_TIMESTAMP {
							//no need to update
							return
						}
					}
					//FL_PROFILE_FOUND := false
					isLOGGED_IN := p.LOGGED_IN
					USER_ACC_OPT := p.USER_ACC_OPT
					//fmt.Fprintf(w, "p.USER:<br> %s<br>", p.USER)
 
					q := datastore.NewQuery("TDSPROF").Filter("UID =", p.USER).Limit(1)
					//log.Panicf("[S0155]")
                    profile := make([]TDSPROF, 0, 1)
                    //log.Printf("datastoreClient.Get()  [26684]")
					if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
						 panic(err)
					}
					for _, x := range profile{
						if USER_ACC_OPT != "Invisible" {
							if (isLOGGED_IN == 1) {
								ctrOnline++
								contHTML = fmt.Sprintf("%v <div class=\"info2\"><img src=\"/static/img/flags/%v.gif\" width=48 height=30><a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=50 height=50 title=\"%v\"></img></a><a href=\"/guestbook?UID=%v\"><img src=\"/static/img/guestbook.png\" width=50 height=50/></img></a><a href=\"/chat?CHAT_FUNC=newChatRoom&INVITE=%v\"><img src=\"/static/img/chat.png\" width=50 height=50/></img></a><a href=\"/guestbook?GB_FUNC=KNOCK&UID=%v\"><img src=\"/static/img/knock.png\" width=50 height=50/></img></a><g:hangout render=\"createhangout\" invites=\"[{ id : '%v', invite_type : 'EMAIL' }]\" widget_size=\"175\"></g:hangout><br>UID: %v<br>Logged in: %v<br>Device: %v<br>Last active: %v<br>Credit Points: %v pts</div>", contHTML, x.COUNTRY, x.UID, x.UID, x.PICTURE, x.UID, x.UID, x.UID, x.UID, x.UID, x.UID, stmpHumanizeStr(p.LAST_LOGIN), p.ACTIVE_DTLS, stmpHumanizeStr(p.LAST_ACTIVE), humanize.Comma(int64(x.CRED_PTS)))
								contHTML2 = fmt.Sprintf("%v <a href=\"/guestbook?UID=%v\"><img src=\"%v\" width=50 height=50 title=\"%v\"></img></a>", contHTML2, x.UID, x.PICTURE, x.UID)
								listOnline = fmt.Sprintf("%v <a href=\"/guestbook?UID=%v&GB_FUNC=FILTER\">%v</a>", listOnline, x.UID, x.UID)
							} else {
								contHTML3 = fmt.Sprintf("%v <a href=\"/guestbook?UID=%v\"><img src=\"%v\" width=50 height=50 title=\"%v\"></img></a>", contHTML3, x.UID, x.PICTURE, x.UID)
							}
							if USER_ACC_OPT == "Pending" {
								pendCtr++
							}
						} else {
							invCtr++
						}
					}
				}	
				
				contHTML = fmt.Sprintf("%v <div class=\"success2\">Number of visible users online: %d</div>", contHTML, ctrOnline)	
				contHTML = fmt.Sprintf("%v <div class=\"validation2\">Number of invisible users: %d</div>", contHTML, invCtr)
				contHTML = fmt.Sprintf("%v <div class=\"info2\">%v</div>", contHTML, listOnline)
				
				putStrToMemcacheWithoutExp(w,r,cKey,contHTML)
				
				contHTML4 := ""
				if pendCtr > 0 {
					contHTML4 = fmt.Sprintf("<span class=\"blink_me\"><a href=\"/people?PEOPLE_FUNC=QUICK-VIEW\"><img src=\"/static/img/ulapph-icons-people-icon.png\" width=50 height=50 title=\"View People\"></a><a href=\"/admin-setup?ADMIN_FUNC=TDSUSERS-MANAGE\"><img src=\"/static/img/pending.png\" width=50 height=50><font size=\"16\" color=\"yellow\">Approval(%d)</font></a></span><img src=\"/static/img/tag.png\" title=\"<-- Pending Members\"> %v <img src=\"/static/img/tag.png\" title=\"ONLINE <--> OFFLINE\"> %v", pendCtr, contHTML2, contHTML3)
				} else {
					contHTML4 = fmt.Sprintf("<a href=\"/people?PEOPLE_FUNC=QUICK-VIEW\"><img src=\"/static/img/ulapph-icons-people-icon.png\" width=50 height=50 title=\"View People\"></a>%v <img src=\"/static/img/tag.png\" title=\"ONLINE <--> OFFLINE\"> %v", contHTML2, contHTML3)
				}
				putStrToMemcacheWithoutExp(w,r,cKey2,contHTML4)
				
				putStrToMemcacheWithoutExp(w,r,"LAST_LOGIN_TIMESTAMP",LAST_LOGIN_TIMESTAMP)
				
				switch DMODE {
					case "tiles":
						w.Write([]byte(contHTML4))
						return
					
					default:
						w.Write([]byte(contHTML))
						if err := htmlFooterModal.Execute(w, ""); err != nil {
						  panic(err)
						}
						return
				}
				
			}
	
		case "SLIDE-VIEW":
			
			var lines []string
			lines = append(lines, fmt.Sprintf("ULAPPH People Online"))
			lines = append(lines, fmt.Sprintf("List of Visible Online Users")) 				
			const layout = "2 Jan 2006"
			t := time.Now().Local()
			lines = append(lines, fmt.Sprintf("%v", t.Format(layout)))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("%v", APP_DESC))
			lines = append(lines, fmt.Sprintf("%v", getSchemeUrl(w,r)))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* Quick Links"))
			lines = append(lines, fmt.Sprintf(">>> [[/people?PEOPLE_FUNC=LIST-VIEW][List All Visible Users]]"))
			lines = append(lines, fmt.Sprintf(">>> [[/people-edit?EditPeopleFunc=EditPeople&UID=%v][Edit Profile]]", uid))
			lines = append(lines, fmt.Sprintf(">>> [[/people-edit?EditPeopleFunc=ViewPeople&UID=%v][Preview Profile]]", uid))
			lines = append(lines, fmt.Sprintf(">>> [[/people-edit?EditPeopleFunc=HideUser&UID=%v][Hide Profile]]", uid))
			lines = append(lines, fmt.Sprintf(">>> [[/people-edit?EditPeopleFunc=UnhideUser&UID=%v][UnHide Profile]]", uid))
			lines = append(lines, fmt.Sprintf(">>> [[/guestbook?UID=%s][View All Messages]]", uid))
			lines = append(lines, fmt.Sprintf(">>> [[/guestbook?UID=%s&GB_FUNC=REFRESH][Wait Messages]]", uid))
			lines = append(lines, fmt.Sprintf(""))
			
			if SYS_DISP_ADS_CONTENT == true {
				//put ads
				for i := 1; i < 4; i++ {
					//append ads
					lines = append(lines, " ")
					//thisAd := fmt.Sprintf("* ")
					thisAd := fmt.Sprintf("* Advertisement")
					lines = append(lines, thisAd)
					thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
					lines = append(lines, fmt.Sprintf("%v", thisFrame))
					lines = append(lines, " ")
					lines = append(lines, " ")
				
				}
			}
			
			//display record as slides
			q := datastore.NewQuery("TDSUSERS").Order("-LOGGED_IN")
			//log.Panicf("[S0157]")
			recCount, _  := datastoreClient.Count(c,q)
            users := make([]TDSUSERS, 0, recCount)
            //log.Printf("datastoreClient.Get()  [26782]")
			if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
				 panic(err)
			 }
			
			for _, p := range users {
				//FL_PROFILE_FOUND := false
				isLOGGED_IN := p.LOGGED_IN
				USER_ACC_OPT := p.USER_ACC_OPT
				//fmt.Fprintf(w, "p.USER:<br> %s<br>", p.USER)
 
				q := datastore.NewQuery("TDSPROF").Filter("UID =", p.USER).Limit(1)
				//log.Panicf("[S0158]")
                profile := make([]TDSPROF, 0, 1)
                //log.Printf("datastoreClient.Get()  [26796]")
				if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
					 panic(err)
				}
				for _, x := range profile{
					if USER_ACC_OPT != "Invisible" {
						//FL_PROFILE_FOUND = true
						if (isLOGGED_IN == 1) {
							lines = append(lines, fmt.Sprintf("* %v", x.UID))
							lines = append(lines, fmt.Sprintf(".image %v 300 250", x.PICTURE))
							lines = append(lines, fmt.Sprintf("- Company: %v", x.COMPANY))
							lines = append(lines, fmt.Sprintf("- Profession: %v", x.PROFESSION))
							lines = append(lines, fmt.Sprintf("- Location: %v", x.CITY))
							lines = append(lines, fmt.Sprintf(">>> [[/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v][View Profile]] >>> [[/people?PEOPLE_FUNC=LIST-VIEW][View All People]] >>> [[/guestbook?UID=%v][S0159]] >>> [[/guestbook?UID=%v&GB_FUNC=FILTER][Message History]] >>> [[/guestbook?UID=%s][View All Messages]] >>> [[/guestbook?UID=%s&GB_FUNC=REFRESH][Wait Messages]]", x.UID, x.UID, x.UID, x.UID, uid, uid))
							lines = append(lines, fmt.Sprintf(""))
						}
					}
 
				}
 
			}
 
			//fmt.Fprintf(w, "cKey: %v<br>", cKey)
			doc, err := Parse4(w, r, &Lines{0, lines}, "ULAPPH-PEOPLE", 0)
			if err != nil {
				panic(err)
			}
			//fmt.Fprintf(w, "doc: %v<br>", doc)
			var buf bytes.Buffer
			title2 := fmt.Sprintf("%v.slide-people", "ULAPPH-PEOPLE")
			SL_TMP := ""
			//renderPresentation(&buf, title2, doc)
			if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
				panic(err)
			}		
			
			//display slides
			writeHTMLHeader(w, 200)
			w.Write(buf.Bytes())
			//fmt.Fprintf(w, "Task Completed<br>")
			return
		
		case "LIST-VIEW":
			//get user privilege
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			
			if FL_VALID_USER == true {
			
				if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" {
					
					RINGTONE_URL := getRingtone(w, r, uid)
					
					TEMPDATA := TEMPSTRUCT{
						STR_FILLER1: uid,
						STR_FILLER2: RINGTONE_URL,
						STR_FILLER3: "People Directory",
					}
					
					if err := genericTableDispHdr.Execute(w, &TEMPDATA); err != nil {
						 panic(err)
					}
 
					//display icons
					if err := peopleSettingsTemplateHeader2PEOPLE.Execute(w, uid); err != nil {
						 panic(err)
					}
					GUESTBOOK_NEWM := checkNewMessages(w, r, uid)
					redURL := fmt.Sprintf("/guestbook?UID=%s", uid)
					if GUESTBOOK_NEWM != "" {
						fmt.Fprintf(w, "<a href=\"%s\"><img src=\"/static/img/newmessage.gif\" width=80 height=40></img></a></h1>", redURL)
						fmt.Fprintf(w, "%v", GUESTBOOK_NEWM)
					}
					q := datastore.NewQuery("TDSUSERS").Order("-LOGGED_IN")
					//log.Panicf("[S0160]")
					recCount, _  := datastoreClient.Count(c,q)
                    users := make([]TDSUSERS, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [26873]")
					if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
						 panic(err)
					 }
					
					
					FL_PROFILE_CREATE := false
					FL_PROFILE_HIDDEN := false
					for _, p := range users {
						FL_PROFILE_FOUND := false
						//FL_PROFILE_UNHIDE := false
						isLOGGED_IN := p.LOGGED_IN
						USER_ACC_OPT := p.USER_ACC_OPT
						q := datastore.NewQuery("TDSPROF").Filter("UID =", p.USER).Limit(1)
						//log.Panicf("[S0161]")
                        profile := make([]TDSPROF, 0, 1)
                        //log.Printf("datastoreClient.Get()  [26889]")
						if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
							 panic(err)
						}
						for _, _ = range profile{
							FL_PROFILE_FOUND = true
							
							if USER_ACC_OPT != "Invisible" {
								
								if (isLOGGED_IN == 1 || uid == p.USER) {
									if err := peopleSettingsTemplateTablePeople.Execute(w, profile); err != nil {
										 panic(err)
									}
								} else {
									if err := peopleSettingsTemplateTablePeopleOffline.Execute(w, profile); err != nil {
										 panic(err)
									}
								}
							} else {
								if p.USER == uid {
									FL_PROFILE_HIDDEN = true
								}
							}
						}
						if p.USER == uid && FL_PROFILE_FOUND == false {
							FL_PROFILE_CREATE = true
						}
						if FL_PROFILE_FOUND == false && p.USER == uid {
						}
					}
					switch {
						case FL_PROFILE_CREATE == true:
							if err := peopleSettingsTemplateTableFooter2.Execute(w, uid); err != nil {
								 panic(err)
							}
						case FL_PROFILE_HIDDEN == true:
							if err := peopleSettingsTemplateTableFooter3.Execute(w, uid); err != nil {
								 panic(err)
							}	
						default:
							if err := peopleSettingsTemplateTableFooter.Execute(w, ""); err != nil {
								 panic(err)
							}
					}
					
				}
			
			}
					
		default:
			FL_DESKTOP := checkDesktop(w,r)
			if FL_DESKTOP == true {
				reqStr := fmt.Sprintf("/people?PEOPLE_FUNC=LIST-VIEW")
				http.Redirect(w, r, reqStr, http.StatusFound)
				return
			} else {
				reqStr := fmt.Sprintf("/people?PEOPLE_FUNC=QUICK-VIEW")
				http.Redirect(w, r, reqStr, http.StatusFound)
				return			
			}
	}
}
//checks if user needs to see the media
func filterMedia(w http.ResponseWriter, r *http.Request, media []TDSMEDIA, recCount int, uid string) ([]TDSMEDIA) {
	media2 := make([]TDSMEDIA, 0, recCount)
	for _, p := range media{
		i := strings.Index(p.BLOB_KEY, "GET_WALL:")
		if uid == "all" {
			if (p.FL_SHARED == "Y" && i == -1) {
				media2 = append(media2, p)
			}
		} else if (p.DOC_STAT == "Worldwide" && p.FL_SHARED == "Y" && i == -1) {
			media2 = append(media2, p)
		} else if (p.AUTHOR == uid && i == -1) {
			media2 = append(media2, p)
		}
	}
	return media2
}
//handles/infodb handler
//used for viewing articles, slides or media index 
func infodb(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	uReferer := r.Referer()
	DB_FUNC := r.FormValue("DB_FUNC")
    //D0086
    datastoreClient := createClientDS()
	_, uid := checkSession(w,r)
	switch {
			
		case DB_FUNC == "VIEWER-SLIDES-ALL":
			updateUserActiveData(w, r, c, "", "contentIndex")
			if SYS_SITE_PRIVATE == true {
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
				if FL_PROC_OK == false {return}
			}	
		
			//if forced
			FL_SLIDABLE := true
			format := r.FormValue("TYPE")
			switch format {
				case "SLIDE":
					FL_SLIDABLE = true
				case "ARTICLE":
					FL_SLIDABLE = false
				default:
					FL_SLIDABLE = checkSlidable(w,r)
				
			}
			
			cKey := ""
			IDB_SLEEP_VIEW_SLIDES_ALL := []byte("")
			
			if FL_SLIDABLE == true {
				cKey = fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ALL")
                //IDB_SLEEP_VIEW_SLIDES_ALL := []byte("")
                IDB_SLEEP_VIEW_SLIDES_ALL = getBytMemcacheValueByKey(w,r,cKey)
                if IDB_SLEEP_VIEW_SLIDES_ALL != nil {
					//IDB_SLEEP_VIEW_SLIDES_ALL = item.Value
					//if string(IDB_SLEEP_VIEW_SLIDES_ALL) != "" {
						//display slides
						writeHTMLHeader(w, 200)
						w.Write(IDB_SLEEP_VIEW_SLIDES_ALL)
						return
					//}
					
				}
			
			} else {
				cKey = fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ALL2")
                //IDB_SLEEP_VIEW_SLIDES_ALL := []byte("")
                IDB_SLEEP_VIEW_SLIDES_ALL = getBytMemcacheValueByKey(w,r,cKey)
                if IDB_SLEEP_VIEW_SLIDES_ALL != nil {
					//IDB_SLEEP_VIEW_SLIDES_ALL = item.Value
					//if string(IDB_SLEEP_VIEW_SLIDES_ALL) != "" {
						//display slides
						writeHTMLHeader(w, 200)
						w.Write(IDB_SLEEP_VIEW_SLIDES_ALL)
						return
					//}
					
				}
			}
 
			if string(IDB_SLEEP_VIEW_SLIDES_ALL) == "" {
 
				var lines []string
				lines = append(lines, fmt.Sprintf("Index of Slides, Articles, Media"))
				lines = append(lines, fmt.Sprintf("%v", getSchemeUrl(w,r))) 				
				const layout = "2 Jan 2006"
				t := time.Now().Local()
				lines = append(lines, fmt.Sprintf("%v", t.Format(layout)))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf("%v", APP_DESC))
				lines = append(lines, fmt.Sprintf("%v", getSchemeUrl(w,r)))
				lines = append(lines, fmt.Sprintf(""))
 
				lines = append(lines, " ")
				lines = append(lines, fmt.Sprintf("* About"))
				lines = append(lines, fmt.Sprintf("- This is an autogenerated content"))
				thisLink := ShortenUrl(w,r,fmt.Sprintf("%vinfodb?DB_FUNC=VIEWER-SLIDES-ALL&TYPE=SLIDE&PARM=LOOP&SECS=8", domRefMatchS))
				lines = append(lines, fmt.Sprintf(".link %v View Slide Format", thisLink))
				thisLink = ShortenUrl(w,r,fmt.Sprintf("%vinfodb?DB_FUNC=VIEWER-SLIDES-ALL&TYPE=ARTICLE", domRefMatchS))
				lines = append(lines, fmt.Sprintf(".link %v View Article Format", thisLink))
				timg := fmt.Sprintf(".image %v/static/img/gopher.png 300 300", domRefMatchS)
				lines = append(lines, fmt.Sprintf("%v", timg))
				lines = append(lines, " ")
				lines = append(lines, " ")
				
				q := datastore.NewQuery("TDSSLIDE").Order("DOC_ID")
				//log.Panicf("[S0162]")
				recCount, _  := datastoreClient.Count(c,q)
				slide := make([]TDSSLIDE, 0, recCount)
                //log.Printf("datastoreClient.Get()  [27048]")
				if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
					 panic(err)
				 }
				//prevCat := ""
				for _, p := range slide {
					i := strings.Index(p.BLOB_URL, "GET_WALL:")
					if p.FL_SHARED == "Y"  && i == -1 && p.DOC_STAT != "Personal" {	
						lines = append(lines, fmt.Sprintf("* [%v] %v", p.DOC_ID, strings.Replace(p.TITLE, "_", " ", -1)))
						thisLink := ""
						//i := strings.Index(p.BLOB_URL, "GET_WALL:")
						if i != -1 {
							//retrieve slide
							
							SPL := strings.Split(p.BLOB_URL,"GET_WALL:")
							if len(SPL) > 1 {
								thisLink = SPL[1]
								thisLink = strings.Replace(thisLink, "@888@", "&", -1)
								lines = append(lines, fmt.Sprintf("- LINKED DOC"))
							}
						} else {
							thisLink = fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v", domRefMatchS, p.DOC_ID, p.DOC_ID, p.TITLE, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET)
						}
						thisLink = ShortenUrl(w,r,thisLink)
						lines = append(lines, fmt.Sprintf(".link %v TDSSLIDE-%v (%v)", thisLink, p.DOC_ID, p.DOC_STAT))
						//lines = append(lines, fmt.Sprintf("- %v", p.AUTHOR))
						if p.TAGS != "" {
							lines = append(lines, fmt.Sprintf(".image %v 600 900", p.TAGS))
						}
						lines = append(lines, fmt.Sprintf(""))
					}
				}
				
				q = datastore.NewQuery("TDSARTL").Order("DOC_ID")
				//log.Panicf("[S0163]")
				recCount, _  = datastoreClient.Count(c,q)
                article := make([]TDSARTL, 0, recCount)
                //log.Printf("datastoreClient.Get()  [27085]")
				if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
					 panic(err)
				 }
				//prevCat := ""
				for _, p := range article {
					i := strings.Index(p.BLOB_URL, "GET_WALL:")
					if p.FL_SHARED == "Y"  && i == -1 && p.DOC_STAT != "Personal" {	
						lines = append(lines, fmt.Sprintf("* [%v] %v", p.DOC_ID, strings.Replace(p.TITLE, "_", " ", -1)))
						thisLink := ""
						//i := strings.Index(p.BLOB_URL, "GET_WALL:")
						if i != -1 {
							//retrieve slide
							
							SPL := strings.Split(p.BLOB_URL,"GET_WALL:")
							if len(SPL) > 1 {
								thisLink = SPL[1]
								thisLink = strings.Replace(thisLink, "@888@", "&", -1)
								lines = append(lines, fmt.Sprintf("- LINKED DOC"))
							}
						} else {
							thisLink = fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&TITLE=%v&CATEGORY=%v", domRefMatchS, p.DOC_ID, p.DOC_ID, p.TITLE, p.CATEGORY)
						}
						thisLink = ShortenUrl(w,r,thisLink)
						lines = append(lines, fmt.Sprintf(".link %v TDSARTL-%v (%v)", thisLink, p.DOC_ID, p.DOC_STAT))
						//lines = append(lines, fmt.Sprintf("- %v", p.AUTHOR))
						if p.TAGS != "" {
						lines = append(lines, fmt.Sprintf(".image %v 600 900", p.TAGS))
						}
						lines = append(lines, fmt.Sprintf(""))
					}
				}
				
				q = datastore.NewQuery("TDSMEDIA").Filter("SYS_VER =", 888).Limit(20)
				//log.Panicf("[S0164]")
				recCount, _  = datastoreClient.Count(c,q)
                media := make([]TDSMEDIA, 0, recCount)
                //log.Printf("datastoreClient.Get()  [27122]")
				if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
					 panic(err)
				}
				
				for _, p := range media{
					i := strings.Index(p.BLOB_KEY, "GET_WALL:")
					if p.FL_SHARED == "Y"  && i == -1  && p.DOC_STAT != "Personal" {	
						lines = append(lines, fmt.Sprintf("* [%v] %v", p.MEDIA_ID, strings.Replace(p.TITLE, "_", " ", -1)))
						thisLink := ""
 
						if i != -1 {
							SPL := strings.Split(p.BLOB_KEY,"GET_WALL:")
							if len(SPL) > 1 {
								thisLink = SPL[1]
								thisLink = strings.Replace(thisLink, "@888@", "&", -1)
								lines = append(lines, fmt.Sprintf("- LINKED DOC"))
							}
						} else {
							switch {
								case p.DATA_TYPE == "image" || p.DATA_TYPE == "music" || p.DATA_TYPE == "video":
									thisLink = fmt.Sprintf("%vmedia?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", domRefMatchS, p.MEDIA_ID, p.MEDIA_ID)
								case p.DATA_TYPE == "text":
									thisLink = fmt.Sprintf("%vmedia?FUNC_CODE=GET_MEDIA&MEDIA_ID=%v&SID=TDSMEDIA-%v", domRefMatchS, p.MEDIA_ID, p.MEDIA_ID)
								default:
									thisLink = fmt.Sprintf("%vmedia?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", domRefMatchS, p.MEDIA_ID, p.MEDIA_ID)
							}
						}
						thisLink = ShortenUrl(w,r,thisLink)
						lines = append(lines, fmt.Sprintf(".link %v TDSMEDIA-%v (%v) ", thisLink, p.MEDIA_ID, p.DOC_STAT))
						//lines = append(lines, fmt.Sprintf("- %v", p.AUTHOR))
						if p.IMG_URL != "" {
						lines = append(lines, fmt.Sprintf(".image %v 600 900", p.IMG_URL))
						}
						lines = append(lines, fmt.Sprintf(""))
					}
				}

				doc, err := Parse4(w, r, &Lines{0, lines}, "SLIDES-ULAPPH", 0)
 
				if err != nil {
					msgDtl := fmt.Sprintf("[U00148] Critical error. Parse4 error. [%v]", err)
					msgTyp := "error"
					action := "U00148"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
					//log.Panicf("error: %v", err)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					//panic(err)
				}
				
				if FL_SLIDABLE == true {
					//fmt.Fprintf(w, "doc: %v<br>", doc)
					var buf bytes.Buffer
					title2 := fmt.Sprintf("%v.slide", "SLIDES-ULAPPH")
					SL_TMP := "S"
					if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
						panic(err)
					}		
 
					putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
					
					//display slides
					writeHTMLHeader(w, 200)
					w.Write(buf.Bytes())
					return
				} else {
					//fmt.Fprintf(w, "doc: %v<br>", doc)
					var buf bytes.Buffer
					title2 := fmt.Sprintf("%v.article", "ARTICLE-ULAPPH")
					SL_TMP := "A"
					if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
						panic(err)
					}		
 
					putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
					
					//display slides
					writeHTMLHeader(w, 200)
					w.Write(buf.Bytes())
					return
				
				}
				
			}
	}
 
	//_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	r.ParseForm()
	
	
	//get user privilege
	FUNC_CODE := "GET_GRP_ID"
	FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	//FL_PROC_CONT := false
	if FL_VALID_USER == true {
		switch  {
			case GROUP_ID == "GRP_ADMIN":
			case GROUP_ID == "GRP_USER" &&	(DB_FUNC == "VIEWER-SLIDES-ALL" ||
											DB_FUNC == "VIEWER-SLIDES-STATS"  ||
											DB_FUNC == "VIEWER-TOP-SITES" ||
											DB_FUNC == "VIEWER-TOP-SITES-1" || DB_FUNC == "VIEWER-TOP-SITES-2" || DB_FUNC == "VIEWER-TOP-SITES-3" || DB_FUNC == "VIEWER-TOP-SITES-4" || DB_FUNC == "VIEWER-TOP-SITES-5" || DB_FUNC == "VIEWER-TOP-SITES-6" || DB_FUNC == "VIEWER-TOP-SITES-7" || DB_FUNC == "VIEWER-TOP-SITES-8" || DB_FUNC == "VIEWER-TOP-SITES-9" || DB_FUNC == "VIEWER-TOP-SITES-10" || DB_FUNC == "VIEWER-TOP-SITES-11" || DB_FUNC == "VIEWER-TOP-SITES-12" ||  DB_FUNC == "VIEWER-TOP-SITES-13" || DB_FUNC == "VIEWER-TOP-SITES-14" || DB_FUNC == "VIEWER-TOP-SITES-15" || DB_FUNC == "VIEWER-TOP-SITES-16" || DB_FUNC == "VIEWER-TOP-SITES-17" || DB_FUNC == "VIEWER-TOP-SITES-18" || DB_FUNC == "VIEWER-TOP-SITES-19" || DB_FUNC == "VIEWER-TOP-SITES-20" ||
											DB_FUNC == "ULAPPH-NEWS" ||
											DB_FUNC == "ULAPPH-QUOTATIONS" ||
											DB_FUNC == "ULAPPH-BIBLE" ||
											DB_FUNC == "ULAPPH-JOKES" ||
											DB_FUNC == "ULAPPH-SAVING" ||
											DB_FUNC == "ULAPPH-BLOG" ||
											DB_FUNC == "ULAPPH-HEALTH" ||
											DB_FUNC == "ULAPPH-FITNESS" ||
											DB_FUNC == "ULAPPH-INTERVIEW" ||
											DB_FUNC == "ULAPPH-BUSINESS" ||
											DB_FUNC == "ULAPPH-LIFE" ||
											DB_FUNC == "ULAPPH-TABLE-TOPICS" ||
											DB_FUNC == "ULAPPH-NOTIFICATIONS-LOG" ||
											DB_FUNC == "ULAPPH-NOTIFICATIONS-MAP" ||
											DB_FUNC == "" ):
			case GROUP_ID == "GRP_USER" && (DB_FUNC == "SLIDES" || DB_FUNC == "ARTICLES" || DB_FUNC == "MEDIA"):
			case SYS_NOREG_FIXED_USER != "":
            		default:
				msgDtl := fmt.Sprintf("[U00030] ERROR: You are not authorized to access this resource.")
				msgTyp := "error"
				msgURL := "/?q=home&ERROR=notAuthorized"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to ULAPPH Carousel homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return				
		}
	}
	
	switch DB_FUNC {
	case "SLIDES-LOCAL":
		if SYS_STATELESS_SERVER == false {
			//log.Printf("SLIDES-LOCAL is for local only")
			return
		}
		SID := r.FormValue("SID")
		if SID == "" {
			SID = "GEN"
		}
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
		if FL_PROC_OK == false {return}
		switch {
			case SID == "GEN":
				//log.Printf("SLIDES-LOCAL: GEN")
				//show timelinejs form
				keyword := r.FormValue("KEY")
				thisCats := getCategoriesBytes(w,r,uid)
				renderTimelineForm(w,r,".timelinejs-slides", keyword, thisCats)
				return
			case SID == "GEN2":
				renderStaticTemplatesSlides(w,r)
				return
		}
		return	
	case "SLIDES":
			updateUserActiveData(w, r, c, "", "contentIndex")
			if SYS_SITE_PRIVATE == true {
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
				if FL_PROC_OK == false {return}
			}	
 
			CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
			VIEW := fmt.Sprintf("%v",r.FormValue("VIEW"))
			
			if err := infoDBTemplateHeaderSlidesAdmin.Execute(w, CATEGORY); err != nil {
				 panic(err)
			}	
			if err := rootTemplateSlidesCategory.Execute(w, CATEGORY); err != nil {
				 panic(err)
			}
			getCategories(w,r,uid)
			if err := rootTemplateSlidesCategoryB.Execute(w, CATEGORY); err != nil {
				 panic(err)
			}
			csn2 := getUpUrlString(w,r,"/upload-slides")
			uploadURL2 := csn2
			err := rootTemplateSlidesA.Execute(w, uploadURL2)
			if err != nil {
					////log.Panicf("%v", err)
			}
			getCategories(w,r,uid)
			err = rootTemplateSlidesB.Execute(w, CATEGORY)
			if err != nil {
					////log.Panicf("%v", err)
			}
			//display slides w/ music
			if VIEW == "WITH_MUSIC" {
				LIMIT := 1000
				q := datastore.NewQuery("TDSSLIDE").Filter("MUSIC_ID >", 0).Limit(LIMIT)
				//log.Panicf("[S0165]")
				recCount, _  := datastoreClient.Count(c,q)
                slides := make([]TDSSLIDE, 0, recCount)	
                //log.Printf("datastoreClient.Get()  [27316]")
				if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
					 panic(err)
				}
				if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
					 panic(err)
				}
				for _, p := range slides{
					if p.MUSIC_ID != 0 {
						if err := slidesDispTemplateAdminRecsRecent.Execute(w, &p); err != nil {
							 panic(err)
						}	
					}
				}
				if err := infoDBTemplateTableFooterHelp.Execute(w, uid); err != nil {
					 panic(err)
				}
				if err := infoDBTemplateTableFooter.Execute(w, uid); err != nil {
					 panic(err)
				}
				return
			}
			
			if CATEGORY != "desktop0" {
				//display slides
				if CATEGORY != "" {
					//OPTIMIZE this
					if VIEW == "RECENT" {
						LAST := r.FormValue("LAST")
						LIMIT := 0
						if LAST == "" {
							LIMIT = 2000
						} else {
							LIMIT = str2int(LAST)
						}
						q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(LIMIT)
						//log.Panicf("[S0165]")
						recCount, _  := datastoreClient.Count(c,q)
						slides := make([]TDSSLIDE, 0, recCount)	
                        //log.Printf("datastoreClient.Get()  [27355]")
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
						}
						if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
							 panic(err)
						}
						for _, p := range slides{
							if p.CATEGORY == CATEGORY {
								
								if err := slidesDispTemplateAdminRecsRecent.Execute(w, &p); err != nil {
									 panic(err)
								}
							}
						}
					} else {
						q := datastore.NewQuery("TDSSLIDE").Filter("CATEGORY =", CATEGORY)
						//log.Panicf("[S0166]")
						recCount, _  := datastoreClient.Count(c,q)
						slides := make([]TDSSLIDE, 0, recCount)	
						//log.Printf("datastoreClient.Get()  [27375]")
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
						}	
						if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
							 panic(err)
						}
						if err := slidesDispTemplateAdminRecs.Execute(w, slides); err != nil {
							 panic(err)
						}
					
					}
				} else {
					//OPTIMIZE this
					q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(2000)
					//log.Panicf("[S0167]")
					recCount, _  := datastoreClient.Count(c,q)
					slides := make([]TDSSLIDE, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [27393]")
					if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
						 panic(err)
					}
					if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
						 panic(err)
					}
					if err := slidesDispTemplateAdminRecs.Execute(w, slides); err != nil {
						 panic(err)
					}
				}
				
				IS_NEW_USER_MEM_FLAG := fmt.Sprintf("IS_NEW_USER_MEM_FLAG_%s", uid)
				IS_NEW_USER_MEM_FLAG_CACHE := ""
				IS_NEW_USER_MEM_FLAG_CACHE = getStrMemcacheValueByKey(w,r,IS_NEW_USER_MEM_FLAG)
 
				if IS_NEW_USER_MEM_FLAG_CACHE == "" {
					if err := infoDBTemplateTableFooterHelp.Execute(w, uid); err != nil {
						 panic(err)
					}
				} else {
					if err := infoDBTemplateTableFooter.Execute(w, uid); err != nil {
						 panic(err)
					}
				}
 
			} else {
				if VIEW == "RECENT" {
					LAST := r.FormValue("LAST")
					LIMIT := 0
					if LAST == "" {
						LIMIT = 2000
					} else {
						LIMIT = str2int(LAST)
					}
						
					q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(LIMIT)
					//log.Panicf("[S0168]")
					recCount, _  := datastoreClient.Count(c,q)
					slides := make([]TDSSLIDE, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [27433]")
					if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
						 panic(err)
					}	
					if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
						 panic(err)
					}
					for _, p := range slides{
						if p.AUTHOR == uid {
							if err := slidesDispTemplateAdminRecsMineRecent.Execute(w, &p); err != nil {
								 panic(err)
							}
						}
					}
				} else {
					q := datastore.NewQuery("TDSSLIDE").Filter("AUTHOR =", uid)
					//log.Panicf("[S0169]")
					recCount, _  := datastoreClient.Count(c,q)
                    slides := make([]TDSSLIDE, 0, recCount)	
                    //log.Printf("datastoreClient.Get()  [27452]")
					if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
						 panic(err)
					}	
					if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
						 panic(err)
					}
					if err := slidesDispTemplateAdminRecsMine.Execute(w, slides); err != nil {
						 panic(err)
					}
				
				}
				
				IS_NEW_USER_MEM_FLAG := fmt.Sprintf("IS_NEW_USER_MEM_FLAG_%s", uid)
				IS_NEW_USER_MEM_FLAG_CACHE := ""
				IS_NEW_USER_MEM_FLAG_CACHE = getStrMemcacheValueByKey(w,r,IS_NEW_USER_MEM_FLAG)
 
				if IS_NEW_USER_MEM_FLAG_CACHE == "" {
					if err := infoDBTemplateTableFooterHelp.Execute(w, uid); err != nil {
						 panic(err)
					}
				} else {
					if err := infoDBTemplateTableFooter.Execute(w, uid); err != nil {
						 panic(err)
					}
				}
			}
	case "ARTICLES-LOCAL":
		if SYS_STATELESS_SERVER == false {
			//log.Printf("ARTICLES-LOCAL is for local only")
			return
		}
		SID := r.FormValue("SID")
		if SID == "" {
			SID = "GEN"
		}
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
		if FL_PROC_OK == false {return}
		switch {
			case SID == "GEN":
				//log.Printf("ARTICLES-LOCAL: GEN")
				//show timelinejs form
				keyword := r.FormValue("KEY")
				thisCats := getCategoriesBytes(w,r,uid)
				renderTimelineForm(w,r,".timelinejs-articles", keyword, thisCats)
				return
			case SID == "GEN2":
				renderStaticTemplatesArticles(w,r)
				return
		}
		return	
 
	case "ARTICLES":
			updateUserActiveData(w, r, c, "", "contentIndex")
			if SYS_SITE_PRIVATE == true {
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
				if FL_PROC_OK == false {return}
			}	
 
			CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
			VIEW := fmt.Sprintf("%v",r.FormValue("VIEW"))
			
			if err := infoDBTemplateHeaderArticlesAdmin.Execute(w, CATEGORY); err != nil {
				 panic(err)
			}	
			if err := rootTemplateArticlesCategory.Execute(w, CATEGORY); err != nil {
				 panic(err)
			}
			getCategories(w,r,uid)
			if err := rootTemplateArticlesCategoryB.Execute(w, CATEGORY); err != nil {
				 panic(err)
			}
			csn2 := getUpUrlString(w,r,"/upload-articles")
			uploadURL2 := csn2
			//w.Header().Set("Content-Type", "text/html")
			err := rootTemplateArticlesA.Execute(w, uploadURL2)
			if err != nil {
					////log.Panicf("%v", err)
			}
			getCategories(w,r,uid)
			err = rootTemplateArticlesB.Execute(w, CATEGORY)
			if err != nil {
					////log.Panicf("%v", err)
			}
			
			//display slides w/ music
			if VIEW == "WITH_MUSIC" {
				LIMIT := 1000
				q := datastore.NewQuery("TDSARTL").Filter("MUSIC_ID >", 0).Limit(LIMIT)
				//log.Panicf("[S0165]")
				recCount, _  := datastoreClient.Count(c,q)
				articles := make([]TDSARTL, 0, recCount)	
				//log.Printf("datastoreClient.Get()  [27544]")
				if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
					 panic(err)
				}
				if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
					 panic(err)
				}
				for _, p := range articles{
					if p.MUSIC_ID != 0 {
						if err := articlesDispTemplateAdminRecsRecent.Execute(w, &p); err != nil {
							 panic(err)
						}	
					}
				}
				if err := infoDBTemplateTableFooterHelp.Execute(w, uid); err != nil {
					 panic(err)
				}
				if err := infoDBTemplateTableFooter.Execute(w, uid); err != nil {
					 panic(err)
				}
				return
			}
				
			if CATEGORY != "desktop0" {
				//display articles
				if CATEGORY != "" {
					//OPTIMIZE this
					if VIEW == "RECENT" {
						LAST := r.FormValue("LAST")
						LIMIT := 0
						if LAST == "" {
							LIMIT = 2000
						} else {
							LIMIT = str2int(LAST)
						}
					
						q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(LIMIT)
						//log.Panicf("[S0170]")
						recCount, _  := datastoreClient.Count(c,q)
						articles := make([]TDSARTL, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [27584]")
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
						}	
						if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
							 panic(err)
						}
						for _, p := range articles{
							if p.CATEGORY == CATEGORY {
								
								if err := articlesDispTemplateAdminRecsRecent.Execute(w, &p); err != nil {
									 panic(err)
								}
							}
						}
					} else {
						q := datastore.NewQuery("TDSARTL").Filter("CATEGORY =", CATEGORY)
						//log.Panicf("[S0171]")
						recCount, _  := datastoreClient.Count(c,q)
						articles := make([]TDSARTL, 0, recCount)
                        //log.Printf("datastoreClient.Get()  [27604]")
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
						}	
						if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
							 panic(err)
						}
						if err := articlesDispTemplateAdminRecs.Execute(w, articles); err != nil {
							 panic(err)
						}
 
					}
				} else {
					//OPTIMIZE this
					q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(2000)
					//log.Panicf("[S0172]")
					recCount, _  := datastoreClient.Count(c,q)
 
					articles := make([]TDSARTL, 0, recCount)
                    //log.Printf("datastoreClient.Get()  [27623]")
                    if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
						 panic(err)
					}
					if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
						 panic(err)
					}
					if err := articlesDispTemplateAdminRecs.Execute(w, articles); err != nil {
						 panic(err)
					}
				}
				IS_NEW_USER_MEM_FLAG := fmt.Sprintf("IS_NEW_USER_MEM_FLAG_%s", uid)
				IS_NEW_USER_MEM_FLAG_CACHE := ""
				IS_NEW_USER_MEM_FLAG_CACHE = getStrMemcacheValueByKey(w,r,IS_NEW_USER_MEM_FLAG)
 
				if IS_NEW_USER_MEM_FLAG_CACHE == "" {
					if err := infoDBTemplateTableFooterHelp.Execute(w, uid); err != nil {
						 panic(err)
					}
				} else {
					if err := infoDBTemplateTableFooter.Execute(w, uid); err != nil {
						 panic(err)
					}
				}
 
			} else {
				//display articles
				//OPTIMIZE this
				if VIEW == "RECENT" {
					
					LAST := r.FormValue("LAST")
					LIMIT := 0
					if LAST == "" {
						LIMIT = 2000
					} else {
						LIMIT = str2int(LAST)
					}
						
					q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(LIMIT)
					//log.Panicf("[S0173]")
					recCount, _  := datastoreClient.Count(c,q)
					articles := make([]TDSARTL, 0, recCount)
					//log.Printf("datastoreClient.Get()  [27665]")
					if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
						 panic(err)
					}
					
					if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
						 panic(err)
					}
					for _, p := range articles{
						if p.AUTHOR == uid {
							
							if err := articlesDispTemplateAdminRecsMineRecent.Execute(w, &p); err != nil {
								 panic(err)
							}
						}
					}
				} else {
					q := datastore.NewQuery("TDSARTL").Filter("AUTHOR =", uid)
					//log.Panicf("[S0174]")
					recCount, _  := datastoreClient.Count(c,q)
					articles := make([]TDSARTL, 0, recCount)
					//log.Printf("datastoreClient.Get()  [27686]")
					if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
						 panic(err)
					}	
					if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
						 panic(err)
					}
					if err := articlesDispTemplateAdminRecsMine.Execute(w, articles); err != nil {
						 panic(err)
					}
				
				}
				IS_NEW_USER_MEM_FLAG := fmt.Sprintf("IS_NEW_USER_MEM_FLAG_%s", uid)
				IS_NEW_USER_MEM_FLAG_CACHE := ""
				IS_NEW_USER_MEM_FLAG_CACHE = getStrMemcacheValueByKey(w,r,IS_NEW_USER_MEM_FLAG)
 
				if IS_NEW_USER_MEM_FLAG_CACHE == "" {
					if err := infoDBTemplateTableFooterHelp.Execute(w, uid); err != nil {
						 panic(err)
					}
				} else {
					if err := infoDBTemplateTableFooter.Execute(w, uid); err != nil {
						 panic(err)
					}
				}
			}
 
		case "ULAPPH-QUOTATIONS":
		
			FL_SLIDABLE := checkSlidable(w,r)
			cKey := ""
			ULAPPH_QUOTATIONS := []byte("")
			
			if FL_SLIDABLE == true {
		
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", quotesKey)
 
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", quotesKey)
			
			}
			
            //ULAPPH_QUOTATIONS := []byte("")
            ULAPPH_QUOTATIONS = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_QUOTATIONS != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_QUOTATIONS)
				
			}
			
			if string(ULAPPH_QUOTATIONS) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-QUOTATIONS&SID=UlapphQuotations")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Quotations",quotesKey,reqStr)
				//http.Redirect(w, r, reqStr, http.StatusFound)
				//return
			}
			return
			
		case "ULAPPH-STOCKS":
			cKey := fmt.Sprintf("ULAPPH_STOCKS_%v", stocksKey)
            ULAPPH_STOCKS := []byte("")
            ULAPPH_STOCKS = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_STOCKS != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_STOCKS)
			}
			if string(ULAPPH_STOCKS) == "" {
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-STOCKS&SID=UlapphStocks")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Stocks",stocksKey,reqStr)
			}
			return
		case "ULAPPH-EQ-PH":
			cKey := fmt.Sprintf("ULAPPH_EQ_%v", "PH")
            ULAPPH_EQ_PH := []byte("")
            ULAPPH_EQ_PH = getBytMemcacheValueByKey(w,r,cKey)
			if ULAPPH_EQ_PH == nil {
				fmt.Fprintf(w, "Sorry, cache not available now. Please come back after a couple of minutes.")
				TASK_MEMCACHER_URLFETCH_philvolcs_EQ(w,r)
			} else {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_EQ_PH)
			}
			return
 
		case "ULAPPH-NOTIFICATIONS-LOG":
				
			SP_FUNC := r.FormValue("SP_FUNC")
			DATE := r.FormValue("DATE")
			DATE_SEQ2 := r.FormValue("SEQ")
			SID := r.FormValue("SID")
			if DATE_SEQ2 == "" {
				DATE_SEQ2 = "999"
			}
			DATE_SEQ := str2int(DATE_SEQ2)
			
			if DATE == "TODAY" || DATE == "" {
				//get TDSLOGS key
				currenttime := time.Now().Local()
				DATE = currenttime.Format("2006-01-02")
			}
			
			if DATE_SEQ < 0 || DATE_SEQ > 24 {
				currenttime := time.Now().Local()
				DATE_SEQ = currenttime.Hour()	
			}
			
			accessLogKey := ""
			thisData := ""
			SPL := strings.Split(SID,"-")
			if len(SPL) > 1 {
				TARGET := SPL[0]
				DOC_nn := SPL[1]
				DOC_ID := str2int(DOC_nn)
				if (TARGET == "TDSSLIDE" || TARGET == "TDSARTL" || TARGET == "TDSMEDIA") && DOC_ID > 0 {
					accessLogKey = fmt.Sprintf("%v", SID)
					thisData = "I"
				} else {
					accessLogKey = fmt.Sprintf("%v.%v", DATE, DATE_SEQ)
					thisData = "D"
				}
			}
				
			//accessLogKey = fmt.Sprintf("%v.%v", DATE, DATE_SEQ)
			accessLogText := []byte("")
			
            var g TDSLOGS
            //D0086
            datastoreClient := createClientDS()
            //log.Printf("datastoreClient.Get()  [27818]")
            if err := datastoreClient.Get(c, getKeyAccess(c,accessLogKey), &g); err != nil {
				//do nothing
			} else {
				accessLogText = g.ACCESS_LOG_TEXT
			}
			
			if accessLogText != nil {
				
				if SP_FUNC == "GET_LOG" {
					//writeHTMLHeader(w, 200)
					if err := htmlHeaderModalBlinkColorLinkify.Execute(w, 600); err != nil {
					  panic(err)
					}
					cv := fmt.Sprintf("<div class=\"success2\"><h3>(%v hits) %v</h3></div>", g.ACCESS_LOG_CTR, accessLogKey)
					w.Write([]byte(cv))
					//cv = fmt.Sprintf("<div class=\"success2\"><h3>Hits: %v</h3></div>", g.ACCESS_LOG_CTR)
					//w.Write([]byte(cv))
					w.Write([]byte(accessLogText))
					if err := outputFooterTemplate.Execute(w, ""); err != nil {
						 panic(err)
					}
					return
				} else {
					//writeHTMLHeader(w, 200)
					//FL_CACHE_FOUND = true
					if err := htmlHeaderModalBlinkColorLinkify.Execute(w, 600); err != nil {
					  panic(err)
					}
					fmt.Fprintf(w, "<div id=\"map23\" class=\"warning2\"><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=MAP_TODAY_ALL&DATE=%v\">View All Locs Today</a> | <a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">View All Logs Today</a> | <a href=\"https://ulapph-sites.appspot.com/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">View All Sites Log</a></div>", DATE)		
 
 
					//NOTIFICATIONS_CACHE_TEXT = item.Value
					//display slides
					if SYS_DISP_ADS_CONTENT == true {
						if err := mobileBodyTemplateContentLoaderSingleItemAds.Execute(w, SYS_DISP_ADS_HOST); err != nil {
						 panic(err)
						}
					}	
 
					fmt.Fprintf(w, "<h3>ULAPPH Broadcast Messages</h3>")
					fmt.Fprintf(w, "<iframe src=\"https://freesecure.timeanddate.com/clock/i5jccu94/fs48/tcf90/pc9f0/ftbi/th2\" width=\"300\" height=\"100\" scrolling=\"no\"></iframe>")
					fmt.Fprintf(w, "<iframe src=\"https://oras.pagasa.dost.gov.ph/widget.shtml\" width=300 height=100 scrolling=no></iframe>")
					fmt.Fprintf(w, "<div id=\"calendar\"></div>")
					fmt.Fprintf(w, "<div id=\"date\">Select Date</div>")
					if thisData == "I" {
						fmt.Fprintf(w, "<div class=\"warning2\"><h1>Notifications Logs for %v</h1>Site: %v<br>Hits: %v</div>", SID, getSchemeUrl(w,r), g.ACCESS_LOG_CTR)
						w.Write(accessLogText)
					} else {
						fmt.Fprintf(w, "<div class=\"warning2\"><h1>Current Hour Notifications Logs for %v</h1>Site: %v<br>Hits: %v</div>", DATE, getSchemeUrl(w,r), g.ACCESS_LOG_CTR)
						w.Write(accessLogText)
						fmt.Fprintf(w, "<div id=\"log00\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('00');return false;\">View Hour(00)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log01\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('01');return false;\">View Hour(01)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log02\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('02');return false;\">View Hour(02)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log03\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('03');return false;\">View Hour(03)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log04\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('04');return false;\">View Hour(04)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log05\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('05');return false;\">View Hour(05)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log06\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('06');return false;\">View Hour(06)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log07\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('07');return false;\">View Hour(07)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log08\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('08');return false;\">View Hour(08)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log09\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('09');return false;\">View Hour(09)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log10\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('10');return false;\">View Hour(10)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log11\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('11');return false;\">View Hour(11)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log12\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('12');return false;\">View Hour(12)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log13\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('13');return false;\">View Hour(13)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log14\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('14');return false;\">View Hour(14)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log15\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('15');return false;\">View Hour(15)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log16\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('16');return false;\">View Hour(16)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log17\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('17');return false;\">View Hour(17)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log18\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('18');return false;\">View Hour(18)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log19\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('19');return false;\">View Hour(19)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log20\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('20');return false;\">View Hour(20)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log21\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('21');return false;\">View Hour(21)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log22\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('22');return false;\">View Hour(22)</a></h1></div>")
						fmt.Fprintf(w, "<div id=\"log23\" class=\"warning2\"><h1><a href=\"#\" onclick=\"ULAPPH_DISP_LOG('23');return false;\">View Hour(23)</a></h1></div>")
					}
					
					if err := outputFooterTemplate.Execute(w, ""); err != nil {
						 panic(err)
					}
				}
			} else {
				fmt.Fprintf(w, "<h3>No logs found for %v.</h3>", DATE)
			}
			return
	
		case "ULAPPH-NOTIFICATIONS-MAP":
			
			SP_FUNC := r.FormValue("SP_FUNC")
			DATE := r.FormValue("DATE")
			DATE_SEQ2 := r.FormValue("SEQ")
			SID := r.FormValue("SID")
			if DATE_SEQ2 == "" {
				DATE_SEQ2 = "999"
			}
			DATE_SEQ := str2int(DATE_SEQ2)
			
			if DATE == "" || DATE == "TODAY" {
				//get TDSLOGS key
				currenttime := time.Now().Local()
				DATE = currenttime.Format("2006-01-02")
			}
			
			if DATE_SEQ < 0 || DATE_SEQ > 24 {
				currenttime := time.Now().Local()
				DATE_SEQ = currenttime.Hour()	
			}
			
			accessLogKey := ""
			thisData := ""
			SPL := strings.Split(SID,"-")
			if len(SPL) > 1 {
				TARGET := SPL[0]
				DOC_nn := SPL[1]
				DOC_ID := str2int(DOC_nn)
				if (TARGET == "TDSSLIDE" || TARGET == "TDSARTL" || TARGET == "TDSMEDIA") && DOC_ID > 0 {
					accessLogKey = fmt.Sprintf("%v", SID)
					thisData = "I"
				} else {
					accessLogKey = fmt.Sprintf("%v.%v", DATE, DATE_SEQ)
					thisData = "D"
				}
			}
			if SID == "FAM_TRACKER" {
				accessLogKey = fmt.Sprintf("%v", SID)
				thisData = "I"
			}
			//accessLogKey := fmt.Sprintf("%v.%v", DATE, DATE_SEQ)
			accessMapText := []byte("")
			ctr := 0
			if SP_FUNC == "MAP_TODAY_ALL" {
				q := datastore.NewQuery("TDSLOGS").Filter("ACCESS_LOG_DATE =", DATE)
				//log.Panicf("[S0175]")
				logs := make([]TDSLOGS, 0, 24)
				if _, err := datastoreClient.GetAll(c,q, &logs); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [27955]")
				var buf bytes.Buffer
				for _, p := range logs {
					ctr = p.ACCESS_LOG_CTR + 1
					buf.Write(p.ACCESS_MAP_TEXT)
				}
				accessMapText = buf.Bytes()
			} else {
                var g TDSLOGS
                //D0086
                datastoreClient := createClientDS()
				if err := datastoreClient.Get(c, getKeyAccess(c,accessLogKey), &g); err != nil {
 
				} else {
					accessMapText = g.ACCESS_MAP_TEXT
				}
			
			}
			
			if accessMapText != nil {
				//writeHTMLHeader(w, 200)
				//FL_CACHE_FOUND = true
				if err := htmlHeaderGoogleMaps.Execute(w, 600); err != nil {
				  panic(err)
				}
				
				fmt.Fprintf(w, "<div id=\"map23\" class=\"warning2\"><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=MAP_TODAY_ALL&DATE=%v\">View All Locs Today</a> | <a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">View All Logs Today</a> | <a href=\"https://ulapph-sites.appspot.com/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">View All Sites Log</a></div>", DATE)		
				fmt.Fprintf(w, "<script type=\"text/javascript\">//<![CDATA[\n")
				fmt.Fprintf(w, "$(window).load(function(){\n")
 
				if err := htmlHeaderGoogleMapsJSA.Execute(w, ""); err != nil {
					 panic(err)
				}
				
				
				w.Write(accessMapText)
								
				if err := htmlHeaderGoogleMapsJSB.Execute(w, ""); err != nil {
					 panic(err)
				}
				if thisData == "I" {
					fmt.Fprintf(w, "<div class=\"warning2\"><h1>Access Location Maps for %v</h1>Hits: %v</div>", SID, ctr)
				} else {
					fmt.Fprintf(w, "<div class=\"warning2\"><h1>User Location Maps for %v</h1>Hits: %v</div>", DATE, ctr)
					fmt.Fprintf(w, "<div id=\"map00\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=00\">View Hour(00)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map01\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=01\">View Hour(01)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map02\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=02\">View Hour(02)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map03\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=03\">View Hour(03)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map04\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=04\">View Hour(04)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map05\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=05\">View Hour(05)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map06\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=06\">View Hour(06)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map07\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=07\">View Hour(07)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map08\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=08\">View Hour(08)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map09\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=09\">View Hour(09)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map10\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=10\">View Hour(10)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map11\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=11\">View Hour(11)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map12\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=12\">View Hour(12)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map13\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=13\">View Hour(13)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map14\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=14\">View Hour(14)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map15\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=15\">View Hour(15)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map16\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=16\">View Hour(16)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map17\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=17\">View Hour(17)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map18\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=18\">View Hour(18)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map19\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=19\">View Hour(19)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map20\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=20\">View Hour(20)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map21\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=21\">View Hour(21)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map22\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=22\">View Hour(22)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map23\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=GET_MAP&DATE=TODAY&SEQ=23\">View Hour(23)</a></h1></div>")
					fmt.Fprintf(w, "<div id=\"map23\" class=\"warning2\"><h1><a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-MAP&SID=ULAPPH-NOTIFICATIONS-MAP&SP_FUNC=MAP_TODAY_ALL&DATE=%v\">View All Today</a></h1></div>", DATE)
				}
				if err := outputFooterTemplate.Execute(w, ""); err != nil {
					 panic(err)
				}
				
			} else {
				fmt.Fprintf(w, "<h3>No maps coordinates found.</h3>")
			}
			return
 
		case "ULAPPH-NEWS":
			TITLE := "ULAPPH News"			
			reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=%v&UID=%v&TITLE=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v", 8, uid, TITLE, DEFAULT_NEWS_DOC_ID, DEFAULT_NEWS_DOC_ID, "NEWSTODAY")
			http.Redirect(w, r, reqStr, http.StatusFound)
			return
 
		case "ULAPPH-NEWS-ARCHIVE":
			TITLE := "ULAPPH News Archive"			
			reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=%v&UID=%v&TITLE=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v", 8, uid, TITLE, DEFAULT_NEWS_ARCHIVE_DOC_ID, DEFAULT_NEWS_ARCHIVE_DOC_ID, "NEWSARCHIVE")
			http.Redirect(w, r, reqStr, http.StatusFound)
			return					
 
		
		case "ULAPPH-BIBLE":
		
			FL_SLIDABLE := checkSlidable(w,r)
			cKey := ""
			ULAPPH_BIBLE := []byte("")
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", bibleKey)
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", bibleKey)	
			
			}
            //ULAPPH_BIBLE := []byte("")
            ULAPPH_BIBLE = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_BIBLE != nil {
                //display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_BIBLE)
				return
				
			}
				
			if string(ULAPPH_BIBLE) == "" {
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-BIBLE&SID=UlapphBibleVerses")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Bible Verses",bibleKey,reqStr)
			}
			
		
		case "ULAPPH-JOKES":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_JOKES := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", jokeKey)
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", jokeKey)
			}
			
            //ULAPPH_JOKES := []byte("")
            ULAPPH_JOKES = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_JOKES != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_JOKES)
				return
				
			}
				
			if string(ULAPPH_JOKES) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-JOKES&SID=UlapphJokes")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Jokes",jokeKey,reqStr)
			}
			
		
		case "ULAPPH-SAVING":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_SAVINGS := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", savingKey)
				
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", savingKey)
			}
            ULAPPH_SAVINGS = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_SAVINGS != nil {
            	//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_SAVINGS)
				return
				
			}	
				
			if string(ULAPPH_SAVINGS) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-SAVING&SID=UlapphSavings")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Saving Tips",savingKey,reqStr)
			}
			
		
		case "ULAPPH-BLOG":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_BLOG := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", blogKey)
				
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", blogKey)	
			}
			ULAPPH_BLOG = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_BLOG != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_BLOG)
				return
				
			}
			
			if string(ULAPPH_BLOG) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-BLOG&SID=UlapphBlog")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Blogs Tips",blogKey,reqStr)	
			}
			
		
		case "ULAPPH-HEALTH":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_HEALTH := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", healthKey)
 
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", healthKey)
			
			}
			ULAPPH_HEALTH = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_HEALTH != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_HEALTH)
				return
				
			}
				
			if string(ULAPPH_HEALTH) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-HEALTH&SID=UlapphHealth")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Health Tips",healthKey,reqStr)
 
			}
			
		
		case "ULAPPH-FITNESS":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_FITNESS := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", fitnessKey)
 
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", fitnessKey)
 
			
			}
            //ULAPPH_FITNESS := []byte("")
            ULAPPH_FITNESS = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_FITNESS != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_FITNESS)
				return
				
			}
				
			
			if string(ULAPPH_FITNESS) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-FITNESS&SID=UlapphFitness")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Fitness Tips",fitnessKey,reqStr)
			}
			
		
		case "ULAPPH-INTERVIEW":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_INTERVIEW := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", interviewKey)
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", interviewKey)
			
			}
			
            //ULAPPH_INTERVIEW := []byte("")
            ULAPPH_INTERVIEW = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_INTERVIEW != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_INTERVIEW)
				return
				
			}
				
			if string(ULAPPH_INTERVIEW) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-INTERVIEW&SID=UlapphInterview")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Interview Tips",interviewKey,reqStr)
			}
 
		
		case "ULAPPH-BUSINESS":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_BUSINESS := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", businessKey)
 
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", businessKey)
			
			}
			ULAPPH_BUSINESS = getBytMemcacheValueByKey(w,r,cKey)
			//ULAPPH_BUSINESS := []byte("")
            if ULAPPH_BUSINESS != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_BUSINESS)
				return
				
			}
			
			if string(ULAPPH_BUSINESS) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-BUSINESS&SID=UlapphBusiness")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Business Tips",businessKey,reqStr)
			}
			
		
		case "ULAPPH-LIFE":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_LIFE := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", lifeKey)
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", lifeKey)	
			}
			
            //ULAPPH_LIFE := []byte("")
            ULAPPH_LIFE = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_LIFE != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_LIFE)
				return
				
			}
				
			if string(ULAPPH_LIFE) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-LIFE&SID=UlapphLife")
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Life Tips",lifeKey,reqStr)
			}
 
		
		case "ULAPPH-TABLE-TOPICS":
			FL_SLIDABLE := checkSlidable(w,r)
			ULAPPH_TABLE_TOPICS := []byte("")
			cKey := ""
			
			if FL_SLIDABLE == true {
			
				cKey = fmt.Sprintf("ULAPPH_MOTD_%v", ttopicsKey)
 
			} else {
				cKey = fmt.Sprintf("ULAPPH_MOTD2_%v", ttopicsKey)	
			}
			
            //ULAPPH_TABLE_TOPICS := []byte("")
            ULAPPH_TABLE_TOPICS = getBytMemcacheValueByKey(w,r,cKey)
            if ULAPPH_TABLE_TOPICS != nil {
				//display slides
				writeHTMLHeader(w, 200)
				w.Write(ULAPPH_TABLE_TOPICS)
				return
				
			}
			
			if string(ULAPPH_TABLE_TOPICS) == "" {
				
				reqStr := fmt.Sprintf("/infodb?DB_FUNC=ULAPPH-TABLE-TOPICS&SID=UlapphTableTopics")
				TASK_MEMCACHER_motd(w,r,"","ULAPPH Table Topics",ttopicsKey,reqStr)
			}
	case "MEDIA-LOCAL":
		if SYS_STATELESS_SERVER == false {
			//log.Printf("MEDIA-LOCAL is for local only")
			return
		}
		SID := r.FormValue("SID")
		if SID == "" {
			SID = "GEN"
		}
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
		if FL_PROC_OK == false {return}
		switch {
			case SID == "GEN":
				//log.Printf("MEDIA-LOCAL: GEN")
				//show timelinejs form
				keyword := r.FormValue("KEY")
				thisCats := getCategoriesBytes(w,r,uid)
				renderTimelineForm(w,r,".timelinejs-media", keyword, thisCats)
				return
			case SID == "GEN2":
				renderStaticTemplatesMedia(w,r)
				return
		}
		return	
		case "MEDIA":
			updateUserActiveData(w, r, c, "", "contentIndex")
			if SYS_SITE_PRIVATE == true {
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
				if FL_PROC_OK == false {return}
			}
			//if mobile
			FL_DESKTOP := checkDesktop(w,r)
			CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
			YEAR := r.FormValue("YEAR")
			if GROUP_ID == "GRP_ADMIN" {
				if err := iconsSettingsTemplateHeaderMDAdmin.Execute(w, ""); err != nil {
					 panic(err)
				}
				getCategories(w,r,uid)
				if err := rootTemplateMediaCategoryC.Execute(w, ""); err != nil {
					 panic(err)
				}
			} else {
				if err := iconsSettingsTemplateHeaderMD.Execute(w, ""); err != nil {
					 panic(err)
				}
				getCategories(w,r,uid)
				if err := rootTemplateMediaCategoryC.Execute(w, ""); err != nil {
					 panic(err)
				}
			}
			uploadURL2 := "/upload-media"
			//w.Header().Set("Content-Type", "text/html")
			err := rootTemplateMediaA.Execute(w, uploadURL2)
			if err != nil {
					////log.Panicf("%v", err)
			}
			getCategories(w,r,uid)
			err = rootTemplateMediaA2.Execute(w, CATEGORY)
			if err != nil {
					////log.Panicf("%v", err)
			}
			uploadURL3 := "/upload-media"
			err = rootTemplateMediaB.Execute(w, uploadURL3)
			if err != nil {
					////log.Panicf("%v", err)
			}
			getCategories(w,r,uid)
			err = rootTemplateMediaB2.Execute(w, CATEGORY)
			if err != nil {
					////log.Panicf("%v", err)
			}
			//display media
			switch {
				case YEAR != "":
					q := datastore.NewQuery("TDSMEDIA").Filter("YEAR =", YEAR)
					//log.Panicf("[S0176]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
                    }
					media = filterMedia(w,r,media,recCount,uid)
                    //log.Printf("datastoreClient.Get()  [28422]")
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs2.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs2Mobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				case CATEGORY == "ALL":
					q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID")
					//log.Panicf("[S0177]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs2.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs2Mobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				case CATEGORY == "ALL_MUSIC":
					q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "music")
					//log.Panicf("[S0178]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
                    }
					media = filterMedia(w,r,media,recCount,uid)
                    //log.Printf("datastoreClient.Get()  [28469]")
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				case CATEGORY == "ALL_MIDI":
					q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "midi")
					//log.Panicf("[S0179]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				case CATEGORY == "ALL_VIDEO":
					q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "video")
					//log.Panicf("[S0180]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					//log.Printf("datastoreClient.Get()  [28516]")
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				case CATEGORY == "ALL_TEXT":
					q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "text")
					//log.Panicf("[S0181]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				case CATEGORY == "ALL_IMG":
					q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "image")
					//log.Panicf("[S0182]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					//log.Printf("datastoreClient.Get()  [28564]")
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				case CATEGORY == "ALL_RECENT":
				
					LAST := r.FormValue("LAST")
					LIMIT := 0
					if LAST == "" {
						LIMIT = 2000
					} else {
						LIMIT = str2int(LAST)
					}
					
					q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID").Limit(LIMIT)
					//log.Panicf("[S0183]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}

				case CATEGORY == "ALL_WALLPAPERS":

					q := datastore.NewQuery("TDSMEDIA").Filter("PROP =", "big_wp").
														Filter("AUTHOR =", uid)
					//log.Panicf("[S0183]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					//log.Printf("datastoreClient.Get()  [28624]")
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
					
				case CATEGORY == "ALL_TEXTS":
					q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "text")
					//log.Panicf("[S0184]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				
				case CATEGORY == "desktop0":
					q := datastore.NewQuery("TDSMEDIA").Filter("AUTHOR =", uid)
					//log.Panicf("[S0185]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
                    }
					media = filterMedia(w,r,media,recCount,uid)
                    //log.Printf("datastoreClient.Get()  [28674]")
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecsMobile.Execute(w, media); err != nil {
							 panic(err)
						}
					}
				
				case CATEGORY != "desktop0":
					q := datastore.NewQuery("TDSMEDIA").Filter("CATEGORY =", CATEGORY)
					//log.Panicf("[S0186]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					}
					media = filterMedia(w,r,media,recCount,uid)
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs2.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs2Mobile.Execute(w, media); err != nil {
							 panic(err)
						}
					
					}
				default:
					q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID").Limit(2000)
					//log.Panicf("[S0187]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
                    }
					media = filterMedia(w,r,media,recCount,uid)
                    //log.Printf("datastoreClient.Get()  [28723]")
					if FL_DESKTOP == true {
						if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs2.Execute(w, media); err != nil {
							 panic(err)
						}
					} else {
						if err := mediaDispTemplateAdminHdrMobile.Execute(w, media); err != nil {
							 panic(err)
						}
						if err := mediaDispTemplateAdminRecs2Mobile.Execute(w, media); err != nil {
							 panic(err)
						}
					
					}
			}
			if err := mediaSettingsTemplateTableFooter9.Execute(w, ""); err != nil {
				 panic(err)
			}		
					
		default:
			redURL := fmt.Sprintf("/infodb?DB_FUNC=VIEWER-SLIDES-ALL")
			http.Redirect(w, r, redURL, http.StatusFound)	
			return
			
		
	}
 
}

//converts desktop number into desktop name 
func deskNum2Name(w http.ResponseWriter, r *http.Request, uid, catName string) (catDesc string) {
	if SYS_STATELESS_SERVER == true {
		return ""
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//edv 08/10/2015
	DESKNUM2NAME := ""
	cKey := fmt.Sprintf("DESKNUM2NAME_%v", catName)
	DESKNUM2NAME = getStrMemcacheValueByKey(w,r,cKey)
	
	if DESKNUM2NAME == "" {
	
		desktopKey := fmt.Sprintf("%v", catName)
		q := datastore.NewQuery("TDSCATS").Filter("__key__ =", getKeyDesktop(c,desktopKey))
		//log.Panicf("[S0188]")
		cats := make([]TDSCATS, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &cats); err != nil {
			//panic(err)
		}
		for _, x := range cats {
			catDesc = x.CAT_DESC
			break
		}
 
		putStrToMemcacheWithoutExp(w,r,cKey,catDesc)
	} else {
		catDesc = DESKNUM2NAME
	}
	
	if catDesc == "" {
		catDesc = "unknown"
	}
	return catDesc
}
//list all destktops given the category list 
func listDesktops(w http.ResponseWriter, r *http.Request, uid string) string {
	//c := appengine.NewContext(r)
	cKey2 := "DESKTOPS_LIST"
	DESKTOPS_LIST := getStrMemcacheValueByKey(w,r,cKey2)
	if DESKTOPS_LIST == "" {
		docID := 0
		cfgName := "SYSTEM_Category_List_Media_ID"
		_, docID = getTDSCNFG(w,r,1,cfgName)
		bData := []byte("")
		var buf2 bytes.Buffer
		if docID > 0 {
			BLOB_KEY := ""
			BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
            bData, _ = readGcsObject(BLOB_KEY)
            //if err != nil {
            //    panic(err)
            //}
		} else if SYS_DESKTOP_CATEGORY_TEMPLATE == true {
			//D0102
			bData = readDesktopCategories(w,r,"ulapph-categories.txt")
		}
		s := bufio.NewScanner(bytes.NewReader(bData))
		buf2.WriteString(fmt.Sprintf("<li>\n"))
		buf2.WriteString(fmt.Sprintf("	<a href=\"#page\" onmouseenter=\"playAudio();\">Desktops</a>\n"))
		buf2.WriteString(fmt.Sprintf("		<ul class=\"sublist\">\n"))
		for s.Scan() {
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					SPL := strings.Split(s.Text(),">")
					SPL2 := strings.Split(SPL[1],"<")
					SPL3 := strings.Split(SPL2[0],":")
					if len(SPL3) > 1 {
						thisNum := str2int(SPL3[0])
						thisDesc := SPL3[1]
						if thisNum == 0 {
							buf2.WriteString(fmt.Sprintf("		<li onmouseenter=\"playAudio();\">%v(%v)\n", thisDesc, thisNum))
							buf2.WriteString(fmt.Sprintf("			<span class=\"arrow\"></span>\n"))
							buf2.WriteString(fmt.Sprintf("			<ul class=\"sublist-menu\">\n"))
							
							//buf2.WriteString(fmt.Sprintf("				<li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/desktop0','_blank'); return false\">%v(D%v)</a>", thisDesc, thisNum))
							//buf2.WriteString(fmt.Sprintf("				</li>\n"))

							buf2.WriteString(fmt.Sprintf("				<li>\n"))
							buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" class=\"deskcat\" onmouseenter=\"playAudio();\" onclick=\"funcSetTopicFromCats('%v'); return false\">Show News</a>", thisDesc))
							buf2.WriteString(fmt.Sprintf("				</li>\n"))
							
							//
							//buf2.WriteString(fmt.Sprintf("				<li class=\"divider\"></li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/settings?q=desktop0','_blank'); return false\">Settings(D%v)</a>", thisNum))
							//buf2.WriteString(fmt.Sprintf("				</li>\n"))
							//
							//buf2.WriteString(fmt.Sprintf("				<li class=\"divider\"></li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/uwm?u=0','_blank'); return false\">%v(U%v)</a>", thisDesc, thisNum))
							//buf2.WriteString(fmt.Sprintf("				</li>\n"))
							//
							//buf2.WriteString(fmt.Sprintf("				<li class=\"divider\"></li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/people-edit?EditPeopleFunc=EDIT_WINDOWS_SUBUWM&u=0','_blank'); return false\">Settings(U%v)</a>", thisNum))
							//buf2.WriteString(fmt.Sprintf("				</li>\n"))
							//
							//buf2.WriteString(fmt.Sprintf("				<li class=\"divider\"></li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/people-edit?EditPeopleFunc=EDIT_TOPICS_SUBUWM&u=0','_blank'); return false\">Topics(U%v)</a>", thisNum))
							//buf2.WriteString(fmt.Sprintf("				</li>\n"))
							
							buf2.WriteString(fmt.Sprintf("			</ul>\n"))
							buf2.WriteString(fmt.Sprintf("		</li>\n"))
							buf2.WriteString(fmt.Sprintf("<li class=\"divider\"></li>\n"))								
						} else {
							buf2.WriteString(fmt.Sprintf("		<li onmouseenter=\"playAudio();\">%v(%v)\n", thisDesc, thisNum))
							buf2.WriteString(fmt.Sprintf("			<span class=\"arrow\"></span>\n"))
							buf2.WriteString(fmt.Sprintf("			<ul class=\"sublist-menu\">\n"))
							
							//buf2.WriteString(fmt.Sprintf("			<li>\n"))	
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/desktop?d=%v','_blank'); return false\">%v(D%v)</a>", thisNum, thisDesc, thisNum))
							//buf2.WriteString(fmt.Sprintf("			</li>\n"))
							//
							//buf2.WriteString(fmt.Sprintf("				<li class=\"divider\"></li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/settings?q=desktop%v','_blank'); return false\">Settings(D%v)</a>", thisNum, thisNum))
							//buf2.WriteString(fmt.Sprintf("				</li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<li class=\"divider\"></li>\n"))
							
							buf2.WriteString(fmt.Sprintf("				<li>\n"))
							buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" class=\"deskcat\" onmouseenter=\"playAudio();\" onclick=\"funcSetTopicFromCats('%v'); return false\">Show News</a>", thisDesc))
							buf2.WriteString(fmt.Sprintf("				</li>\n"))
							//
							//buf2.WriteString(fmt.Sprintf("			<li class=\"divider\"></li>\n"))
							//buf2.WriteString(fmt.Sprintf("			<li>\n"))	
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/uwm?u=%v','_blank'); return false\">%v(U%v)</a>", thisNum, thisDesc, thisNum))
							//buf2.WriteString(fmt.Sprintf("			</li>\n"))
							//
							//buf2.WriteString(fmt.Sprintf("				<li class=\"divider\"></li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/people-edit?EditPeopleFunc=EDIT_WINDOWS_SUBUWM&u=%v','_blank'); return false\">Settings(U%v)</a>", thisNum, thisNum))
							//buf2.WriteString(fmt.Sprintf("				</li>\n"))
							//
							//buf2.WriteString(fmt.Sprintf("				<li class=\"divider\"></li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<li>\n"))
							//buf2.WriteString(fmt.Sprintf("				<a href=\"#page\" onmouseenter=\"playAudio();\" onclick=\"window.open('/people-edit?EditPeopleFunc=EDIT_TOPICS_SUBUWM&u=%v','_blank'); return false\">Topics(U%v)</a>", thisNum, thisNum))
							//buf2.WriteString(fmt.Sprintf("				</li>\n"))
							//
							buf2.WriteString(fmt.Sprintf("			</ul>\n"))
							buf2.WriteString(fmt.Sprintf("		</li>\n"))
							buf2.WriteString(fmt.Sprintf("<li class=\"divider\"></li>\n"))
						}
					
					}
				}
			} else {
				buf2.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
			
		}
		buf2.WriteString(fmt.Sprintf("</ul>\n"))
		buf2.WriteString(fmt.Sprintf("</li>\n"))
		putBytesToMemcacheWithoutExp(w,r,cKey2,buf2.Bytes())
		DESKTOPS_LIST = buf2.String()
	}
	return DESKTOPS_LIST
}
//return a random topic from list all destktops given the category list 
func getRandomDesktop(w http.ResponseWriter, r *http.Request, uid string) string {
	//c := appengine.NewContext(r)
	cKey2 := "DESKTOPS_LIST_NAMES"
	DESKTOPS_LIST_NAMES := getBytMemcacheValueByKey(w,r,cKey2)
	var buf2 bytes.Buffer
	if DESKTOPS_LIST_NAMES == nil || string(DESKTOPS_LIST_NAMES) == "" {
		//log.Println("no cache")
		docID := 0
		cfgName := "SYSTEM_Category_List_Media_ID"
		_, docID = getTDSCNFG(w,r,1,cfgName)
		bData := []byte("")
		if docID > 0 {
			BLOB_KEY := ""
			BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
			bData, _ = readGcsObject(BLOB_KEY)
		} else if SYS_DESKTOP_CATEGORY_TEMPLATE == true {
			//D0102
			bData = readDesktopCategories(w,r,"ulapph-categories.txt")
		}
		s := bufio.NewScanner(bytes.NewReader(bData))
		for s.Scan() {
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					SPL := strings.Split(s.Text(),">")
					SPL2 := strings.Split(SPL[1],"<")
					SPL3 := strings.Split(SPL2[0],":")
					if len(SPL3) > 1 {
						thisNum := str2int(SPL3[0])
						thisDesc := SPL3[1]
						if thisNum == 0 {
							buf2.WriteString(fmt.Sprintf("%v@888@", thisDesc))
								
						} else {
							buf2.WriteString(fmt.Sprintf("%v@888@", thisDesc))
						}
					
					}
				}
			}
			
		}
		putBytesToMemcacheWithoutExp(w,r,cKey2,buf2.Bytes())
		DESKTOPS_LIST_NAMES = buf2.Bytes()
		//log.Printf("DESKTOPS_LIST_NAMES: %v",string(DESKTOPS_LIST_NAMES))
	}
	
	SPL := strings.Split(string(DESKTOPS_LIST_NAMES),"@888@")
	totLen := len(SPL)
	myRanDesk := ""
	myrand := randNum(1, totLen)
	if myrand > 1 {
		myrand = myrand - 1	
	}
	for i := 0; i < len(SPL); i++ {
		if i == myrand {
			myRanDesk = SPL[i]
			break
		}
	}
	//log.Printf("myRanDesk: %v", myRanDesk)
	return myRanDesk
}
//lists all sticky notes 
//returns results in json
func listAllNotes(w http.ResponseWriter, r *http.Request, uid string) []Notes {
	//c := appengine.NewContext(r)
	var dks []Notes
	aln := new(NotesAll)
	SID := r.FormValue("SID")
	if SID == "" {
		//get from media
		nMediaID := 0
		//query TDSCNFG			
		cfgName := fmt.Sprintf("PERSONAL_Local_Notes_Media_ID_%v", uid)
		_, nMediaID = getTDSCNFG(w,r,1,cfgName)
		if nMediaID == 0 {
			//fmt.Fprintf(w, "NOTES NOT FOUND!")
			return dks
		} else {
			SID = fmt.Sprintf("TDSMEDIA-%v", nMediaID)
		}		
	}
	BLOB_KEY := contentCheckSid(w,r,SID)
	//log.Printf("SID: %v", SID)
	//log.Printf("BLOB_KEY: %v", BLOB_KEY)
	var buf bytes.Buffer
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
	for s.Scan() {
		buf.WriteString(fmt.Sprintf("%v", s.Text()))
	}
	json.Unmarshal(buf.Bytes(), &aln)
	for _, p := range aln.AllNotes {
		dks = append(dks, p)
	}
	//log.Printf("DKS: %v", dks)
	
	return dks
	
}

//list all desktop buttons
func listDesktopsButs(w http.ResponseWriter, r *http.Request, uid string) []Desktops {
	//c := appengine.NewContext(r)
	var dks []Desktops
	cKey2 := "DESKTOPS_LIST_JSON"
	DESKTOPS_LIST := getBytMemcacheValueByKey(w,r,cKey2)
	if DESKTOPS_LIST == nil || string(DESKTOPS_LIST) == "" {
		//log.Printf("DESKTOPS_LIST = blank")
		docID := 0
		cfgName := "SYSTEM_Category_List_Media_ID"
		_, docID = getTDSCNFG(w,r,1,cfgName)
		bData := []byte("")
		if docID > 0 {
			BLOB_KEY := ""
			BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
			bData, _ = readGcsObject(BLOB_KEY)
			//if err != nil {
			//	panic(err)
			//}
		} else if SYS_DESKTOP_CATEGORY_TEMPLATE == true {
			//D0102
			bData = readDesktopCategories(w,r,"ulapph-categories.txt")
		}
		s := bufio.NewScanner(bytes.NewReader(bData))
		//buf2.WriteString(fmt.Sprintf("<center>\n"))
		//D0067
		thisGrp := ""
		for s.Scan() {
			if len(s.Text()) > 0 {
				//log.Printf("%v", s.Text())
				thisStr := fmt.Sprintf("%v", s.Text())
				//D0067
				//log.Printf("len: %v", len(thisStr))
				if len(thisStr) > 3 { 
				if string(thisStr[0]) == "#" && string(thisStr[1]) == "<" && string(thisStr[2]) != "/" && thisGrp == "" {
					//start group
					//#<Basic Desktops>
					//log.Printf("start")
					thisStr := fmt.Sprintf("%v", strings.TrimSpace(s.Text()))
					thisGrp = thisStr[2:len(thisStr)-1]
				}
				if string(thisStr[0]) == "#" && string(thisStr[1]) == "<" && string(thisStr[2]) == "/" {
					//close group
					//log.Printf("end")
					thisGrp = ""
				}
				}
				if string(thisStr[0]) != "#" {
					SPL := strings.Split(s.Text(),">")
					SPL2 := strings.Split(SPL[1],"<")
					SPL3 := strings.Split(SPL2[0],":")
					if len(SPL3) > 1 {
						thisNum := str2int(SPL3[0])
						thisDesc := SPL3[1]
						if thisNum == 0 {
							p := Desktops {
								IconLink:		"/static/img/jswm-desktop.png",
								ID:				"D0/UWM0",
								Name:			thisDesc,
								DLink:			"/desktop0",
								DSLink: 		"/settings?q=desktop0",
								ULink: 			"/uwm?u=0",
								USLink: 		"/people-edit?EditPeopleFunc=EDIT_WINDOWS_SUBUWM&u=0",
								//TSource:		tImage,
								//IsShared:		isShared,
								//TLink: 			fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_TOPICS_SUBUWM&u=0&TOPIC=%v", topicsource),
								TLink: 			fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_TOPICS_SUBUWM&u=0"),
								RLink: 			"/stream?STR_FUNC=RUN_TOPICS&u=0",
								//D0066
								BLink: 			"/bot?bFunc=bchat&u=0",
								CLink: 			fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_BOT_SUBUWM&u=0"),
								SLink: 			fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_SHARING_SUBUWM&u=0"),
								//D0067
								DGrp: 			thisGrp,
								SQLink: 		fmt.Sprintf("/social?SO_FUNC=get-tot-slides&cat=desktop%v&catname=%v", "0",thisDesc),
								AQLink: 		fmt.Sprintf("/social?SO_FUNC=get-tot-articles&cat=desktop%v&catname=%v", "0",thisDesc),
								MQLink: 		fmt.Sprintf("/social?SO_FUNC=get-tot-media&cat=desktop%v&catname=%v", "0",thisDesc),
							}
							dks = append(dks, p)
						} else {
							p := Desktops {
								IconLink:		"/static/img/jswm-desktop.png",
								ID:				fmt.Sprintf("D%v/UWM%v", thisNum, thisNum),
								Name:			thisDesc,
								DLink:			fmt.Sprintf("/desktop?d=%v",thisNum),
								DSLink: 		fmt.Sprintf("/settings?q=desktop%v", thisNum),
								ULink: 			fmt.Sprintf("/uwm?u=%v", thisNum),
								USLink: 		fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_WINDOWS_SUBUWM&u=%v", thisNum),
								//TSource:		tImage,
								//IsShared:		isShared,
								//TLink: 			fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_TOPICS_SUBUWM&u=%v&TOPIC=%v", thisNum, topicsource),
								TLink: 			fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_TOPICS_SUBUWM&u=%v", thisNum),
								RLink: 			fmt.Sprintf("/stream?STR_FUNC=RUN_TOPICS&u=%v", thisNum),
								//D0066
								BLink: 			fmt.Sprintf("/bot?bFunc=bchat&u=%v", thisNum),
								CLink: 			fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_BOT_SUBUWM&u=%v", thisNum),
								SLink: 			fmt.Sprintf("/people-edit?EditPeopleFunc=EDIT_SHARING_SUBUWM&u=%v", thisNum),
								//D0067
								DGrp: 			thisGrp,
								SQLink: 		fmt.Sprintf("/social?SO_FUNC=get-tot-slides&cat=desktop%v&catname=%v", thisNum,thisDesc),
								AQLink: 		fmt.Sprintf("/social?SO_FUNC=get-tot-articles&cat=desktop%v&catname=%v", thisNum,thisDesc),
								MQLink: 		fmt.Sprintf("/social?SO_FUNC=get-tot-media&cat=desktop%v&catname=%v", thisNum,thisDesc),
							}
							dks = append(dks, p)
						}
					}
				}
			}
		}
		var buf bytes.Buffer
		binary.Write(&buf, binary.BigEndian, dks)
		putBytesToMemcacheWithoutExp(w,r,cKey2,buf.Bytes())
	} else {
		//convert again to json
		json.Unmarshal(DESKTOPS_LIST, &dks)
		//log.Printf("%v", dks)
	}
	return dks
}

//list all desktop icons
func listDesktopsIcons(w http.ResponseWriter, r *http.Request, uid string) []Icons {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	var dks []Icons
	
	cKey2 := "ICONS_LIST_JSON"
	ICONS_LIST := getBytMemcacheValueByKey(w,r,cKey2)
	
	if ICONS_LIST == nil || string(ICONS_LIST) == "" {
		//log.Printf("ICONS_LIST = blank")
		//------------
		q := datastore.NewQuery("TDSCATS").Limit(1000)
		recCount, _  := datastoreClient.Count(c,q)
		if recCount > 0 {
			//ok
		} else {
			fmt.Fprintf(w,"No icons found!")
			return nil
		}
		cats := make([]TDSCATS, 0, recCount)
		if _, err := datastoreClient.GetAll(c,q, &cats); err != nil {
			//panic(err)
			return nil
        }
        //log.Printf("datastoreClient.Get()  [29082]")
		for _, x := range cats {

			if x.CAT_NUM == 0 {
				//get icons for this cat
				q := datastore.NewQuery("TDSICONS").Filter("DESKTOP =", x.CAT_NAME).Limit(100)
				recCount, _  := datastoreClient.Count(c,q)
				icons := make([]TDSICONS, 0, recCount)
				if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
					 panic(err)
					//return nil
				}
				
				for _, y := range icons{
					p := Icons {
						IconLink:		"/static/img/top-icon.png",
						ID:				fmt.Sprintf("D0/UWM0(%v)", y.ICON_ID),
						Name:			x.CAT_DESC,
						IName:			y.ICON_NAME,
						ILogo: 			y.IMG_SRC,
						IURL: 			y.URL_ADD,
					}
					dks = append(dks, p)
				}
				
			} else {
				//get icons for this cat
				q := datastore.NewQuery("TDSICONS").Filter("DESKTOP =", x.CAT_NAME).Limit(100)
				recCount, _  := datastoreClient.Count(c,q)
				icons := make([]TDSICONS, 0, recCount)
				if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
					 panic(err)
					//return nil
				}
				//log.Printf("datastoreClient.Get()  [29116]")
				for _, y := range icons{
					p := Icons {
						IconLink:		"/static/img/top-icon.png",
						ID:				fmt.Sprintf("D%v/UWM%v(%v)", x.CAT_NUM, x.CAT_NUM, y.ICON_ID),
						Name:			x.CAT_DESC,
						IName:			y.ICON_NAME,
						ILogo: 			y.IMG_SRC,
						IURL: 			y.URL_ADD,
					}
					dks = append(dks, p)
				}
				
				
			}
 
		}
		//uncategorized
		q = datastore.NewQuery("TDSICONS").Filter("DESKTOP= ", "all")
		recCount,_ = datastoreClient.Count(c,q)
		icons := make([]TDSICONS, 0, recCount)
		if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
			 panic(err)
			//return nil
		}
		for _, y := range icons{
			p := Icons {
				IconLink:		"/static/img/top-icon.png",
				ID:				fmt.Sprintf("D%v/UWM%v(%v)", "0", "0", y.ICON_ID),
				Name:			"all",
				IName:			y.ICON_NAME,
				ILogo: 			y.IMG_SRC,
				IURL: 			y.URL_ADD,
			}
			dks = append(dks, p)
		}

		q = datastore.NewQuery("TDSICONS").Filter("DESKTOP= ", uid)
		recCount,_ = datastoreClient.Count(c,q)
		icons = make([]TDSICONS, 0, recCount)
		if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
			 panic(err)
			//return nil
        }
        //log.Printf("datastoreClient.Get()  [29160]")
		for _, y := range icons{
			p := Icons {
				IconLink:		"/static/img/top-icon.png",
				ID:				fmt.Sprintf("D%v/UWM%v(%v)", "0", "0", y.ICON_ID),
				Name:			"uid",
				IName:			y.ICON_NAME,
				ILogo: 			y.IMG_SRC,
				IURL: 			y.URL_ADD,
			}
			dks = append(dks, p)
		}
		//------------
		var buf bytes.Buffer
		binary.Write(&buf, binary.BigEndian, dks)
		putBytesToMemcacheWithoutExp(w,r,cKey2,buf.Bytes())

	} else {
		//convert again to json
		json.Unmarshal(ICONS_LIST, &dks)
		//log.Printf("%v", dks)
	}
	return dks
}
func stmpHumanizeGcs(tStr string) (fTime string) {
    //2020-01-26 13:43:19.536 +0000 UTC
    t2, err := time.Parse("2006-01-02 15:04:05 +0000 UTC", tStr)
    if err != nil {
            //log.Println("parse error", err.Error())
    }
    fTime = fmt.Sprintf("%s", humanize.Time(t2))
    return fTime
}
//Display humanized form of timestamp like 20150316022627 
func stmpHumanize(nStr int) (fTime string) {
	tStr := strconv.Itoa(nStr)
	if tStr != "" {
		//tStr := "20150316022627"
		t := strings.Split(tStr,"")
		if len(t) != 14 {
			return tStr 
		}
		date := fmt.Sprintf("%s%s%s%s-%s%s-%s%s %s%s:%s%s:%s%s +0000 UTC", t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13])
		//log.Printf("%v\n", date)
		t2, err := time.Parse("2006-01-02 15:04:05 +0000 UTC", date)
		if err != nil {
				fmt.Println("parse error", err.Error())
		}
		fTime = fmt.Sprintf("%s", humanize.Time(t2))
	} else {
		fTime = "unknown"
	}
	return fTime
}
func stmpHumanizeStr(tStr string) (fTime string) {
	nStr, _ := strconv.Atoi(tStr)
	return stmpHumanize(nStr)
}
//validations for access
//it determines if the current user is a valid or registered user
func validateAccess(w http.ResponseWriter, r *http.Request, FUNC_CODE, lref string) (FL_PROCEED_OK bool) {
    ulapphDebug(w,r,"info", fmt.Sprintf("validateAccess() %v", ""))
	if SYS_NOREG_FIXED_USER != "" {
		return true
	}
	if SYS_STATELESS_SERVER == true {
		return true
	}
    //return true
	//c := appengine.NewContext(r)
    //u := user.Current(c)
    //log.Printf("validateAccess()")
	uid := ""
	if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
		if lref == "" {
			promptLogin(w,r,uid,"ULAPPH")
		} else {
			redURL := fmt.Sprintf("/login?continue=%v", url.QueryEscape(lref))
			http.Redirect(w, r, redURL, http.StatusFound)
		}
		//return
	} else {
		uid = r.Header.Get("X-Goog-Authenticated-User-Email")
	}
	if uid == "" {
		if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
			uid = r.Header.Get("X-Goog-Authenticated-User-Email")
		}
	}
    if uid != "" {
        return true
    } else {
        return false
    }
    //bypassed logic
    //FL_PROCEED_OK = false
	//return FL_PROCEED_OK
}
//checks if it is a valid API call 
func isValidApiCall(w http.ResponseWriter, r *http.Request) (FL_PROCEED_OK bool) {
	API_KEY_R := r.Header["Authorization"]
	API_KEY := ""
	FL_PROCEED_OK = false
	if len(API_KEY_R) > 0 {
		if API_KEY_R[0] == "" {
			API_KEY = r.FormValue("API_KEY")
		} else {
			API_KEY = API_KEY_R[0]
		}
	} else {
		API_KEY = r.FormValue("API_KEY")
	}
	if THINGS_API_KEY == API_KEY {
		FL_PROCEED_OK = true
	}
	return FL_PROCEED_OK
}
 
//validations for access for oauth users
func validateAccessOauth2(w http.ResponseWriter, r *http.Request, FUNC_CODE, uid, provider, avatar, email string) (FL_PROCEED_OK bool) {
	
	FL_PROCEED_OK = false
	
	switch FUNC_CODE {
	
		case "IS_VALID_USER":
		
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "o2", uid, FUNC_CODE)
			//FL_VALID_USER := false
			
			if FL_VALID_USER == true {
			
				FL_PROCEED_OK = true
 
			} else {
				
				//c := appengine.NewContext(r)
				h := r.Header
				xCountry := h.Get("X-AppEngine-Country")
				
				//prompt registration
				promptRegister(w,r,uid,xCountry,provider,avatar,email)
				return
			}
	
	}
	
	return FL_PROCEED_OK
}
 
//validations for token
func validateToken(w http.ResponseWriter, r *http.Request, FUNC_CODE string, ChanID string, tok string) (FL_PROCEED_OK bool) {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	FL_PROCEED_OK = false
	
	switch FUNC_CODE {
	
		case "IS_VALID_USER":
		
			FL_CHAN_EXIST := false
			
			if ChanID != "" && tok != "" {
				
              var e Channelstore
              //D0086
              datastoreClient := createClientDS()
			  if err := datastoreClient.Get(c, getKeyChannel(c,ChanID), &e); err != nil {
				  //fmt.Fprintf(w, "FL_CHAN_EXIST = false")
				  FL_CHAN_EXIST = false
			  } else {
				if tok == e.TokenID {
					//fmt.Fprintf(w, "FL_CHAN_EXIST = true")
					FL_CHAN_EXIST = true
				}
			  }
			
			
			  if FL_CHAN_EXIST == false || tok != e.TokenID{
					msgDtl := fmt.Sprintf("<font color=red>[U00152] ERROR: Authentication error. Token ID (%v) or channel (%v) does not exist.", tok, ChanID)
					fmt.Fprintf(w, "%v", msgDtl)
					return
			  }
			}
			
			if FL_CHAN_EXIST == true {
			
				FL_PROCEED_OK = true
 
			} else {
				msgDtl := fmt.Sprintf("[U00154] ERROR: Channel (%v) does not exist. <a href=\"/\">Go to Home</a>", ChanID)
				msgTyp := "error"
				action := "U00154"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
	
	}
	
	return FL_PROCEED_OK
}
 
//display memcache for top websites 
func disp_MEMCACHE_TopWebsites(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
	TOP_WEBSITES := ""
    cKey := "MEMCACHE_TopWebsites"
    TOP_WEBSITES = getStrMemcacheValueByKey(w,r,cKey)
    if TOP_WEBSITES != "" {   
		fmt.Fprintf(w, "%v", TOP_WEBSITES)
	}
}

//gets guestbook key 
func getGuestbookKey(uid string) string {
	rt := time.Now().Local()
	timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
	dsKey := fmt.Sprintf("%v-%v-%v", uid, timestamp, randSeq2(16))
	return dsKey
}
//puts a string in a memcache 
func putStrToMemcacheWithExp(w http.ResponseWriter, r *http.Request,cKey,sValue string, tExp time.Duration) {
    if SYS_MEM_CACHE_ENABLE == true {
        //gocache := cache.New(tExp, 10*time.Minute)
        //gocache.Set(cKey, sValue, cache.DefaultExpiration)
		gocache.Set(cKey, sValue, tExp*time.Second)
    }
    if SYS_REDISLABS_CACHE_ENABLE == true {
        redisclient.Set(cKey, sValue, tExp*time.Second)
        //log.Printf("redisClient.Set()")
    }
    if SYS_FILE_CACHE_ENABLE == true {
        //save a backup in GCS
        ctx := context.Background()
        //_, uid := checkSession(w,r)
        //log.Printf("File cache set()")
		cKey = fmt.Sprintf("FACHE/%v", cKey)
        _, _, err := uploadGcsObject(ctx, strings.NewReader(sValue), cKey, false)
        if err != nil {
            switch err {
            case storage.ErrBucketNotExist:
                //log.Printf("FATAL ERROR: uploadGcsObject() Please create the bucket first e.g. with `gsutil mb`")
            default:
                //log.Printf("ERROR: uploadGcsObject() %v", err)
            }
        }
    }
	return
}
//puts string to memcache w/o expiry 
func putStrToMemcacheWithoutExp(w http.ResponseWriter, r *http.Request,cKey,sValue string) {
    //log.Printf("putStrToMemcacheWithoutExp()")
    if SYS_MEM_CACHE_ENABLE == true {
        //memory cache
        // Create a cache with a default expiration time of 5 minutes, and which
        // purges expired items every 10 minutes
        //gocache := cache.New(5*time.Minute, 10*time.Minute)
        gocache.Set(cKey, sValue, cache.NoExpiration)
    }
    if SYS_REDISLABS_CACHE_ENABLE == true {
        redisclient.Set(cKey, sValue, 0)
        //log.Printf("redisClient.Set()")
    }
    if SYS_FILE_CACHE_ENABLE == true {
        //save a backup in GCS
        ctx := context.Background()
        //_, uid := checkSession(w,r)
		cKey = fmt.Sprintf("FACHE/%v", cKey)
        _, _, err := uploadGcsObject(ctx, strings.NewReader(sValue), cKey, false)
        if err != nil {
            switch err {
            case storage.ErrBucketNotExist:
                //log.Printf("FATAL ERROR: uploadGcsObject() Please create the bucket first e.g. with `gsutil mb`")
            default:
                //log.Printf("ERROR: uploadGcsObject() %v", err)
            }
        }
    }
	return
}
//puts bytes to memcache w/ expiry 
func putBytesToMemcacheWithExp(w http.ResponseWriter, r *http.Request,cKey string,sBytes []byte,tExp time.Duration) {
    if SYS_MEM_CACHE_ENABLE == true {
        // Create a cache with a default expiration time of 5 minutes, and which
        // purges expired items every 10 minutes
        //gocache := cache.New(5*time.Minute, 10*time.Minute)
        //gocache.Set(cKey, sBytes, cache.DefaultExpiration)
		gocache.Set(cKey, sBytes, tExp*time.Second)
    }
    if SYS_REDISLABS_CACHE_ENABLE == true {
        redisclient.Set(cKey, string(sBytes), tExp*time.Second)
        //log.Printf("redisClient.Set()")
    }
    if SYS_FILE_CACHE_ENABLE == true {
        //save a backup in GCS
        ctx := context.Background()
        //_, uid := checkSession(w,r)
		cKey = fmt.Sprintf("FACHE/%v", cKey)
        _, _, err := uploadGcsObject(ctx, bytes.NewReader(sBytes), cKey, false)
        if err != nil {
            switch err {
            case storage.ErrBucketNotExist:
                //log.Printf("FATAL ERROR: uploadGcsObject() Please create the bucket first e.g. with `gsutil mb`")
            default:
                //log.Printf("ERROR: uploadGcsObject() %v", err)
            }
        }
    }
	return
	
}
//puts bytes to memcache w/o expiry 
func putBytesToMemcacheWithoutExp(w http.ResponseWriter, r *http.Request,cKey string,sBytes []byte) {
    if SYS_MEM_CACHE_ENABLE == true {
        //gocache := cache.New(5*time.Minute, 10*time.Minute)
        gocache.Set(cKey, sBytes, cache.NoExpiration)
    }
    if SYS_REDISLABS_CACHE_ENABLE == true {
        redisclient.Set(cKey, string(sBytes), 0)
        //log.Printf("redisClient.Set()")
    }
    if SYS_FILE_CACHE_ENABLE == true {
        //save a backup in GCS
        ctx := context.Background()
        //_, uid := checkSession(w,r)
		cKey = fmt.Sprintf("FACHE/%v", cKey)
        _, _, err := uploadGcsObject(ctx, bytes.NewReader(sBytes), cKey, false)
        if err != nil {
            switch err {
            case storage.ErrBucketNotExist:
                //log.Printf("FATAL ERROR: uploadGcsObject() Please create the bucket first e.g. with `gsutil mb`")
            default:
                //log.Printf("ERROR: uploadGcsObject() %v", err)
            }
        }
    }
	return
}
//gets string from a memcache 
func getStrMemcacheValueByKey(w http.ResponseWriter, r *http.Request,cKey string) (string) {
    if SYS_MEM_CACHE_ENABLE == true {
        //gocache := cache.New(5*time.Minute, 10*time.Minute)
        foo, found := gocache.Get(cKey)
        if found {
            //log.Printf("getStrMemcacheValueByKey: Found > %v", cKey)
            //return foo.(string)
            defer func() {
                if err := recover(); err != nil {
                    //fmt.Println(err)
                    // Do something else
                    //log.Printf("getStrMemcacheValueByKey: ERROR > %v > %v", cKey, err)
                    memcacheDelete(w,r,cKey)
                    return
                }
            }()
            return foo.(string)
        } else {
            return ""
        }
    }
    if SYS_REDISLABS_CACHE_ENABLE == true {
        val, err := redisclient.Get(cKey).Result()
        if err != nil {
            //log.Printf("ERROR: redisclient.Get() %v", err)
        }
        return val
    }
    if SYS_FILE_CACHE_ENABLE == true {
        //get from GCS backup
        //_, uid := checkSession(w,r)
        cKey = fmt.Sprintf("FACHE/%v", cKey)
        bData, err := readGcsObject(cKey)
        if err != nil {
            //panic(err)
            //log.Printf("FACHE: getStrMemcacheValueByKey: ERROR > %v > %v", cKey, err)
        }
        return string(bData)
    }      
    return ""
}
//gets byte from a memcache 
func getBytMemcacheValueByKey(w http.ResponseWriter, r *http.Request,cKey string) ([]byte) {
    if SYS_MEM_CACHE_ENABLE == true {
        //gocache := cache.New(5*time.Minute, 10*time.Minute)
        foo, found := gocache.Get(cKey)
        if found {
            //log.Printf("getBytMemcacheValueByKey: Found > %v", cKey)
            //return foo.(string)
            defer func() {
                if err := recover(); err != nil {
                    //fmt.Println(err)
                    // Do something else
                    //log.Printf("getBytMemcacheValueByKey: ERROR > %v > %v", cKey, err)
                    memcacheDelete(w,r,cKey)
                    return
                }
            }()
            return foo.([]byte)
        } else {
            return []byte("")
        }
    }
    if SYS_REDISLABS_CACHE_ENABLE == true {
        val, err := redisclient.Get(cKey).Result()
        if err != nil {
            //log.Printf("ERROR: redisclient.Get() %v", err)
        }
        return []byte(val)
    }
    if SYS_FILE_CACHE_ENABLE == true {
        //get from GCS backup
        //_, uid := checkSession(w,r)
        cKey = fmt.Sprintf("FACHE/%v", cKey)
        bData, err := readGcsObject(cKey)
        if err != nil {
            //log.Printf("FACHE: getStrMemcacheValueByKey: ERROR > %v > %v", cKey, err)
        }
        return bData   
    } 
    return nil
}
//D0089
//delete a cache item
func memcacheDelete(w http.ResponseWriter, r *http.Request,cKey string) {
    if SYS_MEM_CACHE_ENABLE == true {
        //gocache := cache.New(5*time.Minute, 10*time.Minute)
        gocache.Delete(cKey)
        //delete from GCS
    }
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    if SYS_STATELESS_SERVER == false {
        if SYS_FILE_CACHE_ENABLE == true {
            //_, uid := checkSession(w,r)
            cKey = fmt.Sprintf("FACHE/%v", cKey)
            err := deleteGcsObject(c, cKey)
            if err != nil {
                //log.Fatalf("ERROR: deleteGcsObject() %v", err)
                //log.Printf("FACHE: deleteGcsObject: ERROR > %v > %v", cKey, err)
            }
        }
    }
    if SYS_REDISLABS_CACHE_ENABLE == true {
        _, err := redisclient.Del(cKey).Result()
        if err != nil {
            //log.Printf("ERROR: redisclient.Del() %v", err)
        }
    }
    //fmt.Fprintf(w, "Deleted: %v", cKey)
    return
}
//delete all cache items
func memcacheDeleteAll(w http.ResponseWriter, r *http.Request) {
    if SYS_MEM_CACHE_ENABLE == true {
        //gocache := cache.New(5*time.Minute, 10*time.Minute)
        gocache.Flush()
        //delete from GCS
		fmt.Fprintf(w, "Gocache flushed and cleared!")
    }
    if SYS_STATELESS_SERVER == false {
		fmt.Fprintf(w, "Not yet supported")
    }
    if SYS_REDISLABS_CACHE_ENABLE == true {
		fmt.Fprintf(w, "Not yet supported")
    }
    //fmt.Fprintf(w, "Deleted: %v", cKey)
    return
}
//handles /guestbook processing
//users can send messages via guestbook 
func guestbook(w http.ResponseWriter, r *http.Request) {
	//checkReferrer(w,r)
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	UID := fmt.Sprintf("%v",r.FormValue("UID"))
    GB_FUNC := r.FormValue("GB_FUNC")
    //D0086
    datastoreClient := createClientDS()
	if GB_FUNC == "KNOCK" {
		if strings.Index(UID, "|") != -1 && strings.Index(UID, "http") != -1 {
			//send to remote
			SPL := strings.Split(UID,"|")
			getDataStr := fmt.Sprintf("%v/guestbook?GB_FUNC=KNOCK&UID=%v", SPL[1], SPL[0])
			http.Redirect(w, r, getDataStr, http.StatusFound)
			return
		}
		_, uid := checkSession(w,r)
		if uid == "" {
			uid = getGeoString(w,r)
		}
		PROFILE_PIC_URLME := getProfilePic(w, r, uid)
		COUNTRY_PIC_URL := getCountryPic(w, r, uid)
		kmsg := fmt.Sprintf("Knock, knock, knock!!! from user: %v <br><a href=\"#\" onclick=\"knock('%v');return false;\"><img src=\"%v\" height=150 width=150><img src=\"%v\" width=48 height=30><img src=\"/static/img/knock.png\" width=50 height=50/></img></a>",uid, uid, PROFILE_PIC_URLME, COUNTRY_PIC_URL)
		//when knock knock
		sendChannelMessage(w,r,UID,kmsg)
		cKey := fmt.Sprintf("KNOCK_MSG_%s", UID)
		sValue := kmsg
		putStrToMemcacheWithExp(w,r,cKey,sValue,30)
		return
	}
 
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	IS_FEEDBACK := r.FormValue("IS_FEEDBACK")
	//edv 09/29/2015
	SID := r.FormValue("SID")
	if SID == "" {
		SID = "Generic Feedback"
	}
	r.ParseForm()
	if GB_FUNC == "" {
		if uid == UID {
			GB_FUNC = "GB_OWNER"
		} else {
			GB_FUNC = "GB_NOT_OWNER"
		}
	}
	switch GB_FUNC {
		case "GB_OWNER":
			q := datastore.NewQuery("Greeting").Order("-Date").Limit(100)
			//log.Panicf("[S0191]")
			greetings := make([]Greeting, 0, 100)
			if _, err := datastoreClient.GetAll(c,q, &greetings); err != nil {
				panic(err)
            }
            //log.Printf("datastoreClient.Get()  [29705]")
			if UID == "" {
				UID = uid
			}
			//sort.Sort(ByDate(greetings))
			RINGTONE_URL := getRingtone(w, r, uid)
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: uid,
				STR_FILLER2: RINGTONE_URL,
			}
			if err := htmlHeaderGBChannel.Execute(w, &TEMPDATA); err != nil {
			 panic(err)
			}
			GUESTBOOK_CONTL := ""
			cKey := fmt.Sprintf("GUESTBOOK_CONT_%s", UID)
			GUESTBOOK_CONTL = getStrMemcacheValueByKey(w,r,cKey)
			PROFILE_PIC_URLME := getProfilePic(w, r, uid)
			soundPrefChan := make(chan string)
			soundPrefChanDone := make(chan bool)
			go getSoundPrefs(w,r,soundPrefChan,soundPrefChanDone,uid)
			soundPref := <-soundPrefChan
			<-soundPrefChanDone
			fmt.Fprintf(w, "<div class=\"success2\"><input type=\"hidden\" id=\"soundStat\" value=\"%v\"><img src=\"%v\" width=50 height=50 title=\"%s\"></img>%v</div>", soundPref, PROFILE_PIC_URLME, uid, GUESTBOOK_CONTL)
			//fmt.Fprintf(w, "[ <a href=\"/\">Home</a> ] [ <a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE&o=tiles\">People</a> ] [<a href=\"https://ulapph-sites.appspot.com/directory?DIR_FUNC=people\">All People</a>] [<a href=\"https://ulapph-sites.appspot.com/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\">Presence</a>] [<a href=\"https://ulapph-sites.appspot.com/directory?DIR_FUNC=sites\">List Sites</a>] [ <a href=\"/chat\">Chat</a> ] [<a href=\"/tools?FUNC=WIDGET&t=WallMessage\">WallMessage</a>] [<a href=\"/admin-setup?ADMIN_FUNC=SEND_MSG_ALL\">Broadcast Message</a>] [ <a href=\"/logout\">Logout</a> ] [ <a href=\"/guestbook?GB_FUNC=GB_OWNER\">Refresh</a> ]")
			fmt.Fprintf(w, "[ <a href=\"/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE\">People</a> ] [ <a href=\"/guestbook?GB_FUNC=GB_OWNER\">Refresh</a> ]")
			contHTML := ""
			for _, p := range greetings {
				//if p.Flow == "IN" {
				  if p.Flow == "IN" && p.Author == uid {
					fmt.Fprintf(w, "<div class=\"info2\" align=left>")
					PROFILE_PIC_URL := getProfilePic(w, r, p.OutTo)
					COUNTRY_PIC_URL := getCountryPic(w, r, p.OutTo)
					//check contact list cache
					i := strings.Index(contHTML, PROFILE_PIC_URL)
					if i <= 0 {
						contHTML = fmt.Sprintf("%v <a href=\"/guestbook?UID=%v&GB_FUNC=FILTER\"><img src=\"%v\" width=50 height=50 title=\"%s\"></img></a>", contHTML, p.OutTo, PROFILE_PIC_URL, p.OutTo)
					}
					fmt.Fprintf(w, "<b>%s</b><br>", humanize.Time(p.Date))
					fmt.Fprintf(w, " <b>FROM: </b><a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\">%v</a></b> :: <a href=\"/guestbook?UID=%v&GB_FUNC=FILTER\">Filter</a> :: <a href=\"/guestbook?UID=%v&GB_FUNC=KNOCK\">Knock</a></p>", p.OutTo, p.OutTo, p.OutTo, p.OutTo, p.OutTo)
						if p.Status == "" {
							p.Status = "Unread"
						}
						if p.Status == "Unread" {
							fmt.Fprintf(w, "<a href=\"#\" onclick=\"seenMessage('%v');return false;\"><img id=\"%vs\" src=\"/static/img/seen.png\" width=50 height=50></img></a><a href=\"#\" onclick=\"deleteMessage('%v');return false;\"><img id=\"%v\" src=\"/static/img/delete.png\" width=50 height=50></img></a><img src=\"/static/img/incoming.png\" width=50 height=50>", p.MsgID, p.MsgID, p.MsgID, p.MsgID)
						} else {
							fmt.Fprintf(w, "<a href=\"#\" onclick=\"seenMessage('%v');return false;\"><img id=\"%vs\" src=\"/static/img/seen2.png\" width=50 height=50></a><a href=\"#\" onclick=\"deleteMessage('%v');return false;\"><img id=\"%v\" src=\"/static/img/delete.png\" width=50 height=50></img></a><img src=\"/static/img/incoming.png\" width=50 height=50>", p.MsgID, p.MsgID, p.MsgID, p.MsgID)
						}
					fmt.Fprintf(w, "<a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=\"70\" height=\"70\"></a><img src=\"%v\" width=48 height=30>", p.OutTo, p.OutTo, PROFILE_PIC_URL, COUNTRY_PIC_URL)
					fmt.Fprintf(w, "<div class=\"%v\"><blockquote><pre>%v</pre></blockquote></div>", p.Status, html.EscapeString(p.Content))
					fmt.Fprintf(w, "<form action=\"/guestbook\" method=\"post\">")
					fmt.Fprintf(w, "  <input type=\"hidden\" name=\"UID\" value=\"%v\"></textarea>", p.OutTo)
					fmt.Fprintf(w, "  <input type=\"hidden\" name=\"GB_FUNC\" value=\"SIGN\"></textarea>")
					fmt.Fprintf(w, "  <textarea name=\"content\" rows=\"4\" cols=\"40\" maxlength=\"300\"></textarea>")
					fmt.Fprintf(w, "  <br><input type=\"image\" name=\"submit\" src=\"/static/img/sendmsg.png\" with=100 height=40>")
					fmt.Fprintf(w, "</form>")
					fmt.Fprintf(w, "</div>")
				  }
				//} else {
					if p.Flow == "" && p.Author == uid && p.OutTo != "" {
					fmt.Fprintf(w, "<div class=\"warning2\" align=left>")
					fmt.Fprintf(w, "<b>%s</b><br>", humanize.Time(p.Date))
					fmt.Fprintf(w, " <b>You > TO: </b><a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\">%v</a></b> :: <a href=\"/guestbook?UID=%v\">Re-send</a>  :: <a href=\"/guestbook?UID=%v&GB_FUNC=FILTER\">Filter</a> :: <a href=\"/guestbook?UID=%v&GB_FUNC=KNOCK\">Knock</a></p>", p.OutTo, p.OutTo, p.OutTo, p.OutTo, p.OutTo, p.OutTo)
					PROFILE_PIC_URL := getProfilePic(w, r, uid)
					COUNTRY_PIC_URL := getCountryPic(w, r, uid)
						if p.Status == "" {
							p.Status = "Unread"
						}
						if p.Status == "Unread" {
							fmt.Fprintf(w, "<a href=\"#\" onclick=\"seenMessage('%v');return false;\"><img id=\"%vs\" src=\"/static/img/seen.png\" width=50 height=50></img></a><a href=\"#\" onclick=\"deleteMessage('%v');return false;\"><img id=\"%v\" src=\"/static/img/delete.png\" width=50 height=50></img></a><img src=\"/static/img/incoming.png\" width=50 height=50>", p.MsgID, p.MsgID, p.MsgID, p.MsgID)
						} else {
							fmt.Fprintf(w, "<a href=\"#\" onclick=\"seenMessage('%v');return false;\"><img id=\"%vs\" src=\"/static/img/seen2.png\" width=50 height=50></a><a href=\"#\" onclick=\"deleteMessage('%v');return false;\"><img id=\"%v\" src=\"/static/img/delete.png\" width=50 height=50></img></a><img src=\"/static/img/incoming.png\" width=50 height=50>", p.MsgID, p.MsgID, p.MsgID, p.MsgID)
						}
					fmt.Fprintf(w, "<a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=\"70\" height=\"70\"></a><img src=\"%v\" width=48 height=30>", uid, uid, PROFILE_PIC_URL, COUNTRY_PIC_URL)
					fmt.Fprintf(w, "<div class=\"%v\"><blockquote><pre>%v</pre></blockquote></div>", p.Status, html.EscapeString(p.Content))
					fmt.Fprintf(w, "</div>")
					}
				//}
			}
			if err := outputFooterTemplateChannel.Execute(w, "test"); err != nil {
				panic(err)
			}
			UID = uid
			//clear notification memcache
			gbHTML := ""
			cKey = fmt.Sprintf("GUESTBOOK_MSGS_%s", UID)
			putStrToMemcacheWithoutExp(w,r,cKey,gbHTML)
			GUESTBOOK_NUM_MSG := "0"
			cKey = fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", UID)
			putStrToMemcacheWithoutExp(w,r,cKey,GUESTBOOK_NUM_MSG)
			contHTML = ""
			cKey = fmt.Sprintf("GUESTBOOK_CONT_%s", UID)
			putStrToMemcacheWithoutExp(w,r,cKey,contHTML)
			cKey = fmt.Sprintf("GUESTBOOK_NEWM_%s", UID)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//refresh channel message
			sendMessage(w, r, UID, "CH_MSG_NOTIFY", "", "", "","")
		case "GB_NOT_OWNER":
			if err := htmlHeaderGB.Execute(w, ""); err != nil {
			  panic(err)
			}
			PROFILE_PIC_URLOTH := getProfilePic(w, r, UID)
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: UID,
				STR_FILLER2: PROFILE_PIC_URLOTH,
			}
			if err := guestbookTemplateSign.Execute(w, &TEMPDATA); err != nil {
					 panic(err)
			}
			if err := outputFooterTemplate.Execute(w, "test"); err != nil {
				 panic(err)
			}
		
		case "FEEDBACK":
			if err := htmlHeaderGB.Execute(w, ""); err != nil {
			  panic(err)
			}
			//edv 29/09/2015
			
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: FDBKMAIL,
				STR_FILLER2: SID,
			}
			//if err := guestbookTemplateFeedback.Execute(w, FDBKMAIL); err != nil {
			if err := guestbookTemplateFeedback.Execute(w, &TEMPDATA); err != nil {
					 panic(err)
			}
			if err := outputFooterTemplate.Execute(w, "test"); err != nil {
				 panic(err)
			}
 
		case "SIGN_ALL":
			METHOD := r.FormValue("METHOD")
			user := r.FormValue("uid")
			if user != "" {
				uid = user
			}
			q := datastore.NewQuery("TDSUSERS").Order("USER")
			//log.Panicf("[S0192]")
			recCount,_ := datastoreClient.Count(c,q)
			users := make([]TDSUSERS, 0, recCount)
			if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
				 panic(err)
			}
			//log.Printf("datastoreClient.Get()  [29848]")
			//FL_CH_SEND := false
			for _, p := range users{
				//if p.USER != ADMMAIL && p.USER != "" {
				if p.USER != "" {
					switch {
						case METHOD == "CH":
							//notify all users of this event via channels
							msgDtl3 := fmt.Sprintf("UID:%v has sent a broadcast message: <hr>%v<hr> %v", ADMMAIL, r.FormValue("content"), getAccessString(w,r,""))
							sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,ADMMAIL,"/guestbook",""),"")
							break
						
						//default:
						case METHOD == "GB":
							msg := r.FormValue("content")
							if msg == "" {
								return
							}
							timeFormat := "20060102150405"
							then, err := time.Parse(timeFormat, p.LAST_LOGIN)
							if err != nil {
								 panic(err)
							}
							duration := time.Since(then)
							fmt.Fprintf(w, "DURATION(hrs): %v<br>", duration.Hours())
							//if duration.Hours() < 8 { //allow 8 hours inactive
							if duration.Hours() < 3 { //allow 3 hours inactive
								contentMsg := fmt.Sprintf("[BROADCAST] %v", msg)
								time.AfterFunc(5*time.Second, func() {
                                    laterNotifyGB(c, "autoNotifyPeopleGB", p.USER, contentMsg, uid)
                                })
                                sendChannelMessage(w,r,p.USER, contentMsg)
							}
					}
				}
			}
 
			if METHOD == "CH2" {
				msg := r.FormValue("content")
				if msg == "" {
					return
				}
				uag := r.UserAgent()
				ua := user_agent.New(uag)
				//uaPlatform := ua.Platform()
				os := ua.OS()	
				browser, _ := ua.Browser()
				//host := getSchemeUrl(w,r)
				host := domRefMatchS
				pic := getProfilePic(w, r, uid)
				geo := r.FormValue("geo")
				if geo == "" {
					geo = getGeoString(w,r)
				}
				
				ipStr := getIpAdd(w,r)
				time.AfterFunc(5*time.Second, func() {
                    laterBroadcastMessageAll(c, url.QueryEscape(msg), fmt.Sprintf("%v|%v", uid, domRefMatchS), os, browser, host, pic, geo, ipStr)
                })
			}
			fmt.Fprintf(w, "[%v] Message has been sent to all users!", METHOD)
		//guestbook	
		case "SIGN":
			if r.FormValue("content") != "" {
				contentMsg := r.FormValue("content")
				//if wall message recipient
				if strings.Index(UID, "|") != -1 && strings.Index(UID, "http") != -1 {
					//save out record
					dsKey := getGuestbookKey(uid)
					g := Greeting{
							MsgID: dsKey,
							//MsgType: "Wall",
							Content: contentMsg,
							Date:    time.Now(),
							Flow: "",
							OwnerPic: "/static/img/self.png",
							SenderPic: "/static/img/sender.png",
							Status: "Unread",
							OutTo: UID,
					}
					if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
							//g.Author = uid					
							g.Author = uid
					}
					key := datastore.NameKey("Greeting", dsKey, nil)
                    _, err := datastoreClient.Put(c, key, &g)
                    //log.Printf("datastoreClient.Put()  [29934]")
					if err != nil {
							 panic(err)
					}
					//log.Panicf("[S0193]")
					//send to remote
					//encode msg before sending
					encMessage := base64.StdEncoding.EncodeToString([]byte(contentMsg))
					SPL := strings.Split(UID,"|")
					getDataStr := fmt.Sprintf("%v/wall?WALL_FUNC=SEND_MSG2&remHost=%v&srcHost=%v&fromUser=%v&toUser=%v&wm=%v&wall_key=%v", getSchemeNewUrl(w,r,SPL[1]), getSchemeNewUrl(w,r,SPL[1]), getSchemeUrl(w,r), uid, SPL[0], encMessage, CMD_GEN_KEY)
					http.Redirect(w, r, getDataStr, http.StatusFound)
					return	
				}
			
				dsKey := getGuestbookKey(uid)
				g := Greeting{
						MsgID: dsKey,
						//MsgType: "Msg",
						Content: contentMsg,
						Date:    time.Now(),
						Flow: "",
						OwnerPic: "/static/img/self.png",
						SenderPic: "/static/img/sender.png",
						Status: "Unread",
						OutTo: UID,
				}
				if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
						//g.Author = uid					
						g.Author = uid
				}
				if IS_FEEDBACK == "YES" {
						g.Flow = "FEEDBACK"
				}	
				key := datastore.NameKey("Greeting", dsKey, nil)
                _, err := datastoreClient.Put(c, key, &g)
                //log.Printf("datastoreClient.Put()  [29969]")
				//log.Panicf("[S0194]")
				if err != nil {
						 panic(err)
				}
 
				GUESTBOOK_MSGS := ""
				cKey := fmt.Sprintf("GUESTBOOK_MSGS_%s", UID)
				GUESTBOOK_MSGS = getStrMemcacheValueByKey(w,r,cKey)
 
 
				GUESTBOOK_NUM_MSG := ""
				thisGBNum := 0
                cKey = fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", UID)
                GUESTBOOK_NUM_MSG = getStrMemcacheValueByKey(w,r,cKey)
                if GUESTBOOK_NUM_MSG != "" {
					thisGBNum = str2int(GUESTBOOK_NUM_MSG)
					thisGBNum = thisGBNum + 1
					GUESTBOOK_NUM_MSG = fmt.Sprintf("%d", thisGBNum)
					
					//save snippet
					cKey := fmt.Sprintf("GBM_MSG_SNIPPET_%s", UID)
					//putStrToMemcacheWithExp(w,r,cKey,contentMsg,30)
					putStrToMemcacheWithExp(w,r,cKey,contentMsg,20)
					
					
				}
 
				contHTMLNew := ""
				cKey = fmt.Sprintf("GUESTBOOK_NEWM_%s",UID)
				contHTMLNew = getStrMemcacheValueByKey(w,r,cKey)
				
				PROFILE_PIC_URL := getProfilePic(w, r, uid)
				//check contact list cache
				i := strings.Index(contHTMLNew, PROFILE_PIC_URL)
				if i <= 0 {
					//CONST_STR = fmt.Fprintf(w, "#%v", PROFILE_PIC_URL)
					contHTMLNew = fmt.Sprintf("%v <a href=\"/guestbook?UID=%v&GB_FUNC=FILTER\"><img src=\"%v\" width=\"70\" height=\"70\" title=\"%s\"></img></a>", contHTMLNew, uid, PROFILE_PIC_URL, uid)
				}
				
				var buffer3 bytes.Buffer
				
				//if GUESTBOOK_MSGS != "" {
				buffer3.WriteString(fmt.Sprintf("        <li>"))
				buffer3.WriteString(fmt.Sprintf("            <a href=\"#\" class=\"icon-user\">%s</a>", uid))
				buffer3.WriteString(fmt.Sprintf("        </li>"))
				buffer3.WriteString(fmt.Sprintf("%v", GUESTBOOK_MSGS))
				gbHTML := buffer3.String()
				cKey = fmt.Sprintf("GUESTBOOK_MSGS_%s", UID)
				putStrToMemcacheWithoutExp(w,r,cKey,gbHTML)
 
				cKey = fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", UID)
				putStrToMemcacheWithoutExp(w,r,cKey,GUESTBOOK_NUM_MSG)
 
				cKey = fmt.Sprintf("GUESTBOOK_NEWM_%s", UID)
				putStrToMemcacheWithoutExp(w,r,cKey,contHTMLNew)
 
				//save this message to owners guestbook
				dsKey = getGuestbookKey(uid)
				g = Greeting{
						MsgID: dsKey,
						//MsgType: "Msg",
						Content: r.FormValue("content"),
						Date:    time.Now(),
						Flow: "IN",
						OwnerPic: "/static/img/self.png",
						SenderPic: "/static/img/sender.png",
						Status: "Unread",
						OutTo: uid,
				}
				g.Author = UID						
				key = datastore.NameKey("Greeting", dsKey, nil)
                _, err = datastoreClient.Put(c, key, &g)
                //log.Printf("datastoreClient.Put()  [30042]")
				//log.Panicf("[S0195]")
				if err != nil {
						 panic(err)
				}
 
				subject := fmt.Sprintf("[%v] New Guestbook message", uid)
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": UID, "FROM": uid, "MESSAGE": r.FormValue("content")})
                })
 
				//send message to channel
				//sendMessage(w, r, UID)
				sendMessage(w, r, UID, "CH_MSG_NOTIFY", "", uid, "","")
				msgURL := fmt.Sprintf("/guestbook?GB_FUNC=GB_OWNER&UID=%s", uid)
				http.Redirect(w, r, msgURL, http.StatusFound)
				return
				
			} else {
				msgDtl := "[U00036] ERROR: EMPTY MESSAGE"
				msgTyp := "error"
				msgURL :=  fmt.Sprintf("/guestbook?UID=%s&GB_FUNC=REFRESH", UID)
				action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to go back to your messages.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
			
		case "REFRESH":
			GUESTBOOK_NUM_MSG := ""
			thisGBNum := 0
			cKey := ""
			//if UID == "" {
			cKey = fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", uid)
			FL_GB_OK := false
            redURL := fmt.Sprintf("/guestbook?UID=%s", uid)
            GUESTBOOK_NUM_MSG = getStrMemcacheValueByKey(w,r,cKey)
            if GUESTBOOK_NUM_MSG != "" {
				thisGBNum = str2int(GUESTBOOK_NUM_MSG)
				//thisGBNum = thisGBNum + 1
				if thisGBNum > 0 {
					if err := htmlHeaderModalBlinkColor.Execute(w, 60); err != nil {
					  panic(err)
					}
					fmt.Fprintf(w, "<img src=\"/static/img/ulapph-logo.png\" title=\"ULAPPH Logo\"></img><br><span class=\"blink_me\"><h1><a href=\"%s\">(%d)</a></h1></span>", redURL, thisGBNum)
					fmt.Fprintf(w, "<a href=\"%s\"><img src=\"/static/img/newmessage.gif\" width=80 height=40></img></h1></a>", redURL)
					contHTMLNew := ""
                    cKey = fmt.Sprintf("GUESTBOOK_NEWM_%s",UID)
                    contHTMLNew = getStrMemcacheValueByKey(w,r,cKey)
                    if contHTMLNew != "" {
						//fmt.Fprintf(w, "<h2>Message Senders:</h2>")
						fmt.Fprintf(w, "<h2>From:</h2>")
						//contHTMLNew = fmt.Sprintf("%s", item.Value)
						fmt.Fprintf(w, "<br>%v", contHTMLNew)
						fmt.Fprintf(w, "<p>NOTE: Click on each sender to read messages. Click on new message image to refresh status once you have read all messages.")
					}
					fmt.Fprintf(w, "<br>[ <a href=\"/people\">Back to People</a> ]")
					FL_GB_OK = true
	
				} else {
					if err := htmlHeaderModalBlink.Execute(w, 5); err != nil {
					  panic(err)
					}
					fmt.Fprintf(w, "<img src=\"/static/img/ulapph-logo.png\" title=\"ULAPPH Logo\"></img><br><span class=\"blink_me\"><h1><a href=\"%s\"></img>Checking ULAPPH Messages...</h1></span><img src=\"/static/img/loading.gif\"><br>[ <a href=\"/people\">Back to People</a> ]", redURL)
					FL_GB_OK = true
				}
				if err := outputFooterTemplate.Execute(w, "test"); err != nil {
					 panic(err)
				}
			}
			if FL_GB_OK == false {
				if err := htmlHeaderModalBlink.Execute(w, 5); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<img src=\"/static/img/ulapph-logo.png\" title=\"ULAPPH Logo\"></img><br><span class=\"blink_me\"><h1><a href=\"%s\"></img>Checking ULAPPH Messages...</h1></span><img src=\"/static/img/loading.gif\"><br>[ <a href=\"/people\">Back to People</a> ]", redURL)
				if err := outputFooterTemplate.Execute(w, "test"); err != nil {
					 panic(err)
				}
			}
		//guestbook
		case "FILTER":
			q := datastore.NewQuery("Greeting").Order("-Date").Limit(100)
			//log.Panicf("[S0196]")
			greetings := make([]Greeting, 0, 100)
			if _, err := datastoreClient.GetAll(c,q, &greetings); err != nil {
					 panic(err)
            }
            //log.Printf("datastoreClient.Get()  [30129]")
			if err := htmlHeaderGB.Execute(w, ""); err != nil {
			  panic(err)
			}	
			PROFILE_PIC_URLME := getProfilePic(w, r, uid)
			PROFILE_PIC_URLOTH := getProfilePic(w, r, UID)
			fmt.Fprintf(w, "<div class=\"success2\"><h1><a href=\"/guestbook?GB_FUNC=REFRESH\">Conversations</h1></a>( <b>%v</b> )<br><img src=\"%v\" width=50 height=50 title=\"%s\"></img><a href=\"/guestbook?UID=%v&GB_FUNC=FILTER\"><img src=\"%v\" width=50 height=50 title=\"%s\"></img></a></div>", UID, PROFILE_PIC_URLME, uid, UID, PROFILE_PIC_URLOTH, UID)
			for _, p := range greetings {
				//if p.Flow == "IN" {
					//if UID is the author; IN to UID and from me
					if p.Author == UID && p.Flow == "IN" && p.OutTo == uid {
						fmt.Fprintf(w, "<div class=\"info2\" align=left>")
						PROFILE_PIC_URL := getProfilePic(w, r, p.OutTo)
						COUNTRY_PIC_URL := getCountryPic(w, r, p.OutTo)
						fmt.Fprintf(w, "<b>%s</b><br>", humanize.Time(p.Date))
						//fmt.Fprintf(w, "<img src=\"/static/img/incoming.png\" width=50 height=50>")
						if p.Status == "" {
							p.Status = "Unread"
						}
						if p.Status == "Unread" {
							fmt.Fprintf(w, "<a href=\"#\" onclick=\"seenMessage('%v');return false;\"><img id=\"%vs\" src=\"/static/img/seen.png\" width=50 height=50></img></a><a href=\"#\" onclick=\"deleteMessage('%v');return false;\"><img id=\"%v\" src=\"/static/img/delete.png\" width=50 height=50></img></a><img src=\"/static/img/incoming.png\" width=50 height=50>", p.MsgID, p.MsgID, p.MsgID, p.MsgID)
						} else {
							fmt.Fprintf(w, "<a href=\"#\" onclick=\"seenMessage('%v');return false;\"><img id=\"%vs\" src=\"/static/img/seen2.png\" width=50 height=50></a><a href=\"#\" onclick=\"deleteMessage('%v');return false;\"><img id=\"%v\" src=\"/static/img/delete.png\" width=50 height=50></img></a><img src=\"/static/img/incoming.png\" width=50 height=50>", p.MsgID, p.MsgID, p.MsgID, p.MsgID)
						}
						fmt.Fprintf(w, "<a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=\"70\" height=\"70\"></a><img src=\"%v\" width=48 height=30>", p.OutTo, p.OutTo, PROFILE_PIC_URL, COUNTRY_PIC_URL)
						fmt.Fprintf(w, "<div class=\"%v\"><blockquote><pre>%v</pre></blockquote></div>", p.Status, html.EscapeString(p.Content))
						fmt.Fprintf(w, "</div>")
					}
				//} else {
					if p.Author == uid && p.OutTo == UID {
						fmt.Fprintf(w, "<div class=\"warning2\" align=left>")
						PROFILE_PIC_URL := getProfilePic(w, r, UID)
						COUNTRY_PIC_URL := getCountryPic(w, r, UID)
						fmt.Fprintf(w, "<b>%s</b><br>", humanize.Time(p.Date))
						if p.Status == "" {
							p.Status = "Unread"
						}
						if p.Status == "Unread" {
							fmt.Fprintf(w, "<a href=\"#\" onclick=\"seenMessage('%v');return false;\"><img id=\"%vs\" src=\"/static/img/seen.png\" width=50 height=50></img></a><a href=\"#\" onclick=\"deleteMessage('%v');return false;\"><img id=\"%v\" src=\"/static/img/delete.png\" width=50 height=50></img></a><img src=\"/static/img/incoming.png\" width=50 height=50>", p.MsgID, p.MsgID, p.MsgID, p.MsgID)
						} else {
							fmt.Fprintf(w, "<a href=\"#\" onclick=\"seenMessage('%v');return false;\"><img id=\"%vs\" src=\"/static/img/seen2.png\" width=50 height=50></a><a href=\"#\" onclick=\"deleteMessage('%v');return false;\"><img id=\"%v\" src=\"/static/img/delete.png\" width=50 height=50></img></a><img src=\"/static/img/incoming.png\" width=50 height=50>", p.MsgID, p.MsgID, p.MsgID, p.MsgID)
						}
						fmt.Fprintf(w, "<a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=\"70\" height=\"70\"></a><img src=\"%v\" width=48 height=30>", UID, UID, PROFILE_PIC_URL, COUNTRY_PIC_URL)
						fmt.Fprintf(w, "<div class=\"%v\"><blockquote><pre>%v</pre></blockquote></div>", p.Status, html.EscapeString(p.Content))
						fmt.Fprintf(w, "<form action=\"/guestbook\" method=\"post\">")
						fmt.Fprintf(w, "  <input type=\"hidden\" name=\"UID\" value=\"%v\"></textarea>", UID)
						fmt.Fprintf(w, "  <input type=\"hidden\" name=\"GB_FUNC\" value=\"SIGN\"></textarea>")	
						fmt.Fprintf(w, "  <textarea name=\"content\" rows=\"4\" cols=\"40\" maxlength=\"300\"></textarea>")
						fmt.Fprintf(w, "  <br><input type=\"image\" name=\"submit\" src=\"/static/img/sendmsg.png\" with=100 height=40>")
						fmt.Fprintf(w, "</form>")
						//fmt.Fprintf(w, "</textarea>")
						fmt.Fprintf(w, "</div>")
					}
				//}
			}
 
			fmt.Fprintf(w, "<br>Send Message to: %s <form action=\"/guestbook\" method=\"post\">", UID)
			fmt.Fprintf(w, "  <input type=\"hidden\" name=\"UID\" value=\"%v\"></textarea>", UID)
			fmt.Fprintf(w, "  <input type=\"hidden\" name=\"GB_FUNC\" value=\"SIGN\"></textarea>")	
			fmt.Fprintf(w, "  <textarea name=\"content\" rows=\"4\" cols=\"40\" maxlength=\"300\"></textarea>")
			fmt.Fprintf(w, "  <br><input type=\"image\" name=\"submit\" src=\"/static/img/sendmsg.png\" with=100 height=40>")
			fmt.Fprintf(w, "</form>")
 
			if err := outputFooterTemplate.Execute(w, "test"); err != nil {
				 panic(err)
			}
			
		case "FEEDBACK_VIEW":
			q := datastore.NewQuery("Greeting").Filter("Flow =", "FEEDBACK").Limit(200)
			//log.Panicf("[S0197]")
			greetings := make([]Greeting, 0, 200)
			if _, err := datastoreClient.GetAll(c,q, &greetings); err != nil {
					 panic(err)
			}
			if err := htmlHeaderGB.Execute(w, ""); err != nil {
			  panic(err)
			}
			fmt.Fprintf(w, "<div class=\"warning2\"><h3>Users Feedback (<a href=\"/guestbook?GB_FUNC=FEEDBACK\">Give Feedback</a>)</b></h3></div>") 			
			recCtr := 0
			for _, p := range greetings {
				recCtr++
				//if p.Flow == "IN" {
				if recCtr%2 == 0 {
					fmt.Fprintf(w, "<div class=\"info2\" align=left>")
					PROFILE_PIC_URL := getProfilePic(w, r, p.Author)
					COUNTRY_PIC_URL := getCountryPic(w, r, p.Author)
					//fmt.Fprintf(w, "%v<br>", p.Date)
					fmt.Fprintf(w, "<b>%s</b><br>", humanize.Time(p.Date))
					//fmt.Fprintf(w, "<img src=\"/static/img/incoming.png\" width=50 height=50>")	
					fmt.Fprintf(w, "<a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=50 height=50></a><img src=\"%v\" width=48 height=30>", p.Author, p.Author, PROFILE_PIC_URL, COUNTRY_PIC_URL)
					fmt.Fprintf(w, "<div class=\"%v\"><blockquote><pre>%v</pre></blockquote></div>", p.Status, html.EscapeString(p.Content))
					fmt.Fprintf(w, "</div>")
				} else {
					fmt.Fprintf(w, "<div class=\"warning2\" align=left>")
					PROFILE_PIC_URL := getProfilePic(w, r, p.Author)
					COUNTRY_PIC_URL := getCountryPic(w, r, p.Author)
					fmt.Fprintf(w, "<b>%s</b><br>", humanize.Time(p.Date))
					fmt.Fprintf(w, "<a href=\"/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v\"><img src=\"%v\" width=50 height=50></a><img src=\"%v\" width=48 height=30>", uid, uid, PROFILE_PIC_URL, COUNTRY_PIC_URL)
					fmt.Fprintf(w, "<div class=\"%v\"><blockquote><pre>%v</pre></blockquote></div>", p.Status, html.EscapeString(p.Content))
					//fmt.Fprintf(w, "</textarea>")
					fmt.Fprintf(w, "</div>")
				}
			}
			//edv 29/09/2015
			
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: FDBKMAIL,
				STR_FILLER2: SID,
			}

			if err := guestbookTemplateFeedback.Execute(w, &TEMPDATA); err != nil {
					 panic(err)
			}
			if err := outputFooterTemplate.Execute(w, "test"); err != nil {
				 panic(err)
			}
			
		case "DELETE":
			MID := r.FormValue("MID")
			_, uid := checkSession(w,r)
			SPL := strings.Split(MID, "-")
			if len(SPL) <= 0 {
				return
			} else {
				if uid != SPL[0] {
					return
				}
			}
			if uid == "" || MID == "" {
				return
			}
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			key := datastore.NameKey("Greeting", MID, nil)
			datastoreClient.Delete(c, key)
			writeHTMLHeader(w, 200)
			w.Write([]byte("ok"))
			return
			
		case "SEEN":
 
			MID := r.FormValue("MID")
			_, uid := checkSession(w,r)
			if uid == "" || MID == "" {
				return
			}
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			_ = markMsgRead(w,r,MID)
 
			writeHTMLHeader(w, 200)
			w.Write([]byte("ok"))
			return
 
		case "DELETE_ALL":
			_, uid := checkSession(w,r)
			if uid == "" {
				return
			}
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
 
			ctr := 0
			q := datastore.NewQuery("Greeting").Filter("Author =", uid).KeysOnly()
			//log.Panicf("[S0198]")
			recCount,_ := datastoreClient.Count(c,q)
			if recCount > 0 {
				keys, err := datastoreClient.GetAll(c,q, nil)
				if err != nil {
					panic(err)
                }
                //log.Printf("datastoreClient.Get()  [30301]")
				for _, key := range keys{
					SPL := strings.Split(fmt.Sprintf("%v", key),",")
					ok := markMsgDelete(w,r,uid,SPL[1])
					if ok == true {
						ctr++
						if ctr >= 500 {
							break
						}
					}
				}
			}
			fmt.Fprintf(w, "DELETED ALL %v/%v MESSAGES!<br>", ctr, recCount)
			return
		case "READ_ALL":
			_, uid := checkSession(w,r)
			if uid == "" {
				return
			}
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
 
			q := datastore.NewQuery("Greeting").Filter("Author =", uid).KeysOnly()
			//log.Panicf("[S0199]")
			recCount,_ := datastoreClient.Count(c,q)
			//ctr:=0
			if recCount > 0 {
				keys, err := datastoreClient.GetAll(c,q, nil)
				if err != nil {
					panic(err)
				}
				for _, key := range keys{
					SPL := strings.Split(fmt.Sprintf("%v", key),",")
					_ = markMsgRead(w,r,SPL[1])
				}
			}
			fmt.Fprintf(w, "READ ALL MESSAGES!<br>")
			return
			
	}
 
}
 
//marks guestbook messages as read
func markMsgRead(w http.ResponseWriter, r *http.Request,mid string) (ctr int) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	key := datastore.NameKey("Greeting", mid, nil)
	q := datastore.NewQuery("Greeting").Filter("__key__ =", key).Limit(1)
	//log.Panicf("[S0200]")
	gbk := make([]Greeting, 0, 1)
	if _, err := datastoreClient.GetAll(c,q, &gbk); err != nil {
		 panic(err)
      }
      //log.Printf("datastoreClient.Get()  [30358]")
	for _, p := range gbk{
		if p.Status == "Unread" || p.Status == "" {
			ctr++
			p.Status = "Read"
            _, err := datastoreClient.Put(c, key, &p)
            //log.Printf("datastoreClient.Put()  [30364]")
			//log.Panicf("[S0201]")
			if err != nil {
					 panic(err)
			}
		}
	}
	return ctr
}

//marks guestbook messages as deleted 
func markMsgDelete(w http.ResponseWriter, r *http.Request,uid,mid string) (ok bool) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//i := strings.Index(mid, uid)
	//if i == -1 {
	//	return
	//}
	key := datastore.NameKey("Greeting", mid, nil)
	datastoreClient.Delete(c, key)
	return true
}

//handles sharing of contents 
func share(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	_, uid := checkSession(w,r)
	updateUserActiveData(w, r, c, uid, "social-sharing")
	//fmt.Fprintf(w, "Welcome to ULAPPH Share!<br>")
	SH_FUNC := r.FormValue("SH_FUNC")
	url := r.FormValue("url")
	title := r.FormValue("title")
	switch SH_FUNC {
		case "content":
			SID := r.FormValue("SID")
			_ = contentCheckSid(w,r,SID)
			TARGET := ""
			DOC_ID := ""
			docID := 0
			SPL := strings.Split(SID,"-")
			if len(SPL) > 1 {
				TARGET = SPL[0]
				DOC_ID = SPL[1]
				docID = str2int(DOC_ID)
			}
			redir := ""
			switch TARGET {
				case "TDSSLIDE":
					_, _, _, _, _, TITLE, _, _, MUSIC_ID, GET_NEXT := getTDSSLIDEBlobKey(w, r, docID)
					reqStr := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&DOC_ID=%v&SID=%v&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=ON", DOC_ID, SID, TITLE, MUSIC_ID, GET_NEXT)
					redir = fmt.Sprintf("https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v", TITLE, ShortenUrl(w,r,reqStr))
				case "TDSARTL":
					_, _, _, _, _, TITLE, _, _, MUSIC_ID := getTDSARTLBlobKey(w, r, docID)
					reqStr := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%v&SID=%v&TITLE=%v&MUSIC_ID=%v", DOC_ID, SID, TITLE, MUSIC_ID)
					redir = fmt.Sprintf("https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v", TITLE, ShortenUrl(w,r,reqStr))
				default:
					fmt.Fprintf(w, "Sorry, slide & article only shared using this method.<br>")
					return
			}
			http.Redirect(w, r, redir, http.StatusFound)	
			return
		case "all":
			if url == "" {
				fmt.Fprintf(w, "Invalid parameters<br>")
				return
			}
			renderSocialSharing(w,r,title,url)
		case "custom":
			renderSocialSharing(w,r,title,url)
		default:
			fmt.Fprintf(w, "Sorry, API request not yet supported.<br>")
	}
}

//D0040
//handles commenting system using commento.js
func ulapphComments(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)

	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	C_FUNC := r.FormValue("C_FUNC")
	//D0040
	CC_KEY, _ := getCCKey(w,r,r.PostFormValue("url"))
	if CC_KEY != SYS_RECAPTCHA_KEY && isLoggedIn(w,r) != true {
		//log.Printf("Error: Access to this page requires captch verification!")
		fmt.Fprintf(w, "Error: Access to this page requires captch verification!")
		return
	}
	//_, uid := checkSession(w,r)
	switch C_FUNC {

		case "get":
			comments := []Comment{}
			var err error
			//D0040
			//add caching
			url := r.PostFormValue("url")
			SID, sidOk := getRefDoc(w,r,url)
			if sidOk == false {
				return
			}
			result := &resultContainer{Success: true}
			//lets serve some cache
			cKeyC := fmt.Sprintf("JSON_COMMENTS_%v", SID)
			JLIST := getBytMemcacheValueByKey(w,r,cKeyC)
			//log.Printf("JLIST: %v", string(JLIST))	
			//if JLIST != nil {
			if string(JLIST) != "" {
				//log.Printf("Serve map cached!")
				if err := json.Unmarshal(JLIST, &comments); err != nil {
					panic(err)
				}
				//log.Printf("comments: %v", comments)
				result.Comments = comments
				result.render(w)
				return
			}
			comments, err = getComments(w,r,SID,url)
			//log.Printf("comments: %v", comments)
			if err != nil {
				//log.Printf("getComments() Error: %v", err)
				//Emit(err)
			}
			//cache it first
			data, err := json.Marshal(comments)
			if err != nil {
				//log.Printf("json.Marshal() Error: %v", err)
			}
			putBytesToMemcacheWithoutExp(w,r,cKeyC,data)
			//log.Printf("comments cached: %v", string(data))
			result.Comments = comments
			result.render(w)
			return
		case "create":
			result := &resultContainer{}
			if r.Method != "POST" {
				//log.Printf("This request must be a POST request: %v", r.Method)
				result.Status = http.StatusMethodNotAllowed
				result.Message = "This request must be a POST request."
				result.render(w)
				return
			}

			parent, err := strconv.Atoi(r.PostFormValue("parent"))
			//log.Printf("parent: %v", parent)
			if err != nil {
				//Emit(err)
				//log.Printf("getComments() Error: %v", err)
				result.Status = http.StatusBadRequest
				result.Message = "Invalid parent ID."
				result.render(w)
				return
			}

			name := template.HTMLEscapeString(r.PostFormValue("name"))
			comment := template.HTMLEscapeString(r.PostFormValue("comment"))
			latlon := r.PostFormValue("latlon")
			if r.PostFormValue("gotcha") != "" {
				result.render(w)
				return
			}

			_, uid := checkSession(w,r)
			if uid == "" {
				uid = getGeoString(w,r)
			}
			//D0061
			err = createComment(w,r,r.PostFormValue("url"), name, "", uid, comment, latlon, parent)
			if err != nil {
				//Emit(err)
				result.Status = http.StatusInternalServerError
				result.Message = "Some internal error occurred."
				result.render(w)
				return
			}
			result.Success = true
			result.Message = "Comment successfully created"
			result.render(w)
			return

		case "create2":
			result := &resultContainer{}
			if r.Method != "POST" {
				//log.Printf("This request must be a POST request: %v", r.Method)
				result.Status = http.StatusMethodNotAllowed
				result.Message = "This request must be a POST request."
				result.render(w)
				return
			}

			parent, err := strconv.Atoi(r.FormValue("parent"))
			//log.Printf("parent: %v", parent)
			if err != nil {
				//Emit(err)
				//log.Printf("getComments() Error: %v", err)
				result.Status = http.StatusBadRequest
				result.Message = "Invalid parent ID."
				result.render(w)
				return
			}

			name := template.HTMLEscapeString(r.FormValue("name"))
			comment := template.HTMLEscapeString(r.FormValue("comment"))
			latlon := r.FormValue("latlon")
			//D0061
			res := r.FormValue("res")
			if r.FormValue("gotcha") != "" {
				result.render(w)
				return
			}
			uid := name
			//D0061
			err = createComment(w,r,r.FormValue("url"), name, res, uid, comment, latlon, parent)
			if err != nil {
				//Emit(err)
				//log.Printf("getComments() Error: %v", err)
				result.Status = http.StatusInternalServerError
				result.Message = "Some internal error occurred."
				result.render(w)
				return
			}
			result.Success = true
			result.Message = "Comment successfully created"
			result.render(w)
			return
		//D0061
		case "export_comments":
			SID := r.FormValue("SID")
			TITLE := r.FormValue("TITLE")
			//log.Printf("SID: %v", SID)
			//log.Printf("TITLE: %v", TITLE)
			err := extractComments(w,r,SID,TITLE)
			if err != nil {
				fmt.Fprintf(w,"Error extracting comments: %v", err)
			}
			return


		default:
			//log.Printf("/comments index!")
			return
	}
}
//handles /social handler 
func social(w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	//log.Printf("social()")
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //u := user.Current(c)
	//h := r.Header
	SO_FUNC := r.FormValue("SO_FUNC")
    _, uid := checkSession(w,r)
    //D0086
    datastoreClient := createClientDS()
	switch SO_FUNC {
		case "NEWSAPI":
			//D0078
			//log.Printf("NEWSAPI...")
			//if SYS_RUNTIME_PLATFORM == "local" {
			//	return
			//}
			ulapphDebug(w,r, "info", fmt.Sprintf("NEWSAPI... %v", ""))
			urlt := r.FormValue("url")
			cmd := r.FormValue("cmd")
			if (cmd == "listc") {
				ulapphDebug(w,r, "info", fmt.Sprintf("list countries... %v", ""))
				//give list of countries
				var ns []NewsSources
				w.WriteHeader(200)
				for k, v := range xNewsCountry2Name{
					p := NewsSources {
						ID: k,
						Country: v,
					}
					ns = append(ns, p)
				}
				data,_ := json.MarshalIndent(ns, "", "  ")
				w.Write(data)
				return
			} else {
				if urlt == "" {
					h := r.Header
					country := h.Get("X-AppEngine-Country")
					if strings.TrimSpace(country) == "" {
						//country = getRandomCountry()
						country = NEWSAPI_DEF_COUNTRY
					}
					urlt = fmt.Sprintf("https://newsapi.org/v2/top-headlines?country=%v", strings.ToLower(country))
				} else {
					z, err := url.Parse(urlt)
					if err != nil {
						panic(err)
					}
					//path := z.Path
					m, _ := url.ParseQuery(z.RawQuery)	
					//document := ""
					mCountry := ""
					if _, ok := m["country"]; ok {
						//urlt = fmt.Sprintf("https://newsapi.org/v2/top-headlines?country=%v", m["country"][0])
						mCountry = m["country"][0]
						urlt = fmt.Sprintf("https://newsapi.org/v2/top-headlines?country=%v", mCountry)
					} else {
						//urlt = fmt.Sprintf("https://newsapi.org/v2/top-headlines?country=%v", getRandomCountry())
						//mCountry =  getRandomCountry()
						if _, ok := m["q"]; ok {
							//proceed as everything
						} else {
							mCountry = NEWSAPI_DEF_COUNTRY
							urlt = fmt.Sprintf("https://newsapi.org/v2/top-headlines?country=%v", mCountry)
						}
					}
				}
			}
			ulapphDebug(w,r, "info", fmt.Sprintf("urlt: %v", urlt))
			//log.Printf("url: %v", urlt)
			apiKey := NEWSAPI_API_KEY
			turl := fmt.Sprintf("%v", urlt)
			req, _ := http.NewRequest("GET", turl, nil)
			req.Header.Set("Authorization", "Bearer "+apiKey)
            //client := urlfetch.Client(c)
            client := &http.Client{}
			res, err := client.Do(req)
			if err != nil {
				log.Panicf("err: %v", err)
				return
			}
			bodyBytes, _ := ioutil.ReadAll(res.Body)
			ulapphDebug(w,r, "info", fmt.Sprintf("res.StatusCode: %v", res.StatusCode))
			//ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
			if res.StatusCode == 200 {
				//log.Printf("bodyBytes: %v", string(bodyBytes))
				w.WriteHeader(200)
				w.Write(bodyBytes)
				//D0080
				//putBytesToMemcacheWithExp(w,r,cKey,bodyBytes,MC_PEOPLE_EXPIRES_10_MIN)
			} else {
				w.WriteHeader(400)
			}
			return
		case "NEWSAPI-SOURCES":
			//D0078
			//log.Printf("NEWSAPI-SOURCES...")
			url := r.FormValue("url")
			//log.Printf("url: %v", url)
			apiKey := NEWSAPI_API_KEY 
			turl := fmt.Sprintf("%v", url)
			req, _ := http.NewRequest("GET", turl, nil)
			req.Header.Set("Authorization", "Bearer "+apiKey)
            //client := urlfetch.Client(c)
            client := &http.Client{}
			res, err := client.Do(req)
			if err != nil {
				log.Panicf("err: %v", err)
				return
			}
			bodyBytes, _ := ioutil.ReadAll(res.Body)
			if res.StatusCode == 200 {
				//log.Printf("bodyBytes: %v", string(bodyBytes))
				w.WriteHeader(200)
				renderStaticNewsSources(w,r,bodyBytes)
			} else {
				w.WriteHeader(400)
			}
			return
		case "NEWSAPI-COUNTRIES":
			//D0078
			//log.Printf("NEWSAPI-COUNTRIES...")
			w.WriteHeader(200)
			var buffer3 bytes.Buffer
			for k, v := range xNewsCountry2Name{
				ctry := k
				cname := v
				buffer3.WriteString(fmt.Sprintf("[ <a href=\"#\" onclick=\"setCountry('%v');return false;\"><b>%v</b></a> ]", strings.ToLower(ctry), cname))
			}
			w.Write(buffer3.Bytes())
			return
		case "AUTO-LIKE":
			checkReferrer(w,r)
			//when user finishes all slides
			SID := r.FormValue("SID")
			if SID == "" {
				return
			}
			DOC_ID := r.FormValue("DOC_ID")
			//UID := r.FormValue("UID")
			//_, uid := checkSession(w,r)
			if uid == "" {
				uid = getGeoString(w,r)
			}
			reqStr := fmt.Sprintf("/slides?TYPE=SLIDE&DOC_ID=%v&SID=%v", DOC_ID, SID)
			msgDtl3 := fmt.Sprintf("UID:%v has browsed all slides of SID(%v).", uid, SID)
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,reqStr,SID),SID)
			time.AfterFunc(5*time.Second, func() {
                laterIncNumLikesSocial(c, uid, SID, "SO_INC_NUM_LIKES", "A")
            })
            return
		//D0080
		case "get-favicon":
			w.WriteHeader(200)
			w.Write([]byte(DEFAULT_FAVICON))
			return
		case "proc-broadcast-contents":
			procBroadcastContentsWorldwide(w,r)
			return
		//D0084
		case "get-agents":
			procShowAgents(w,r)
			return
		case "get-trending":
			procTrending(w,r)
			return
		case "show-trending":
			showOverallTrending(w,r)
			return
		case "get-whats-new":
			procWhatsNew(w,r)
			return
		//D0042
		case "get-discussions":
			procDiscussions(w,r)
			return
		case "get-people-directory":
			procPeopleDir(w,r)
			return
		case "show-whats-new":
			showOverallWhatsNew(w,r)
			return
		case "show-discussions":
			showOverallDiscussions(w,r)
			return
		//D0042
		case "flag-recent-refresh":
			putStrToMemcacheWithoutExp(w,r,"OVERALL_DISCUSSIONS_REFRESH","Y")
			return
		case "proc-broadcast-message-all":
			procBroadcastMessage2(w,r)
			return
		case "proc-broadcast-presence":
			procBroadcastPresence2(w,r)
			return
		case "proc-broadcast-location":
			//log.Printf("proc-broadcast-location...")
			xcus := r.FormValue("custom")
			xuid := r.FormValue("uid")
			xll := r.FormValue("xll")
			xhost := r.FormValue("xhost")
			xpic := r.FormValue("xpic")
			if xcus != "" {
				//log.Printf("updateMyULAPPHLoc")
				//this is manually set
				xll = xcus
				//update the users host list
				updateMyULAPPHLoc(w,r,xuid,xcus)
			}
			//save entries in a memcache
			//get old first		
			cKey := fmt.Sprintf("PROC_BROADCAST_LOCATION")
			LOCS := getStrMemcacheValueByKey(w,r,cKey)
			//log.Printf("LOCS: %v", LOCS)
			//D0082
			var buffer3 bytes.Buffer
			FL_OK := false
			if LOCS == "" {
				//get from blobstore
				MAPS_BLOB := ""
				//get from cache first
				cKey := fmt.Sprintf("MAPS_BROADCAST_LOCATIONS_BLOB")
				MAPS_BLOB = getStrMemcacheValueByKey(w,r,cKey)
				//log.Printf("MAPS_BLOB: %v", MAPS_BLOB)
				if MAPS_BLOB == "" {
					//log.Printf("MAPS_BLOB EMPTY")
					FL_EN := false
					var g TDSCNFG
					thisKey := fmt.Sprintf("MAPS_BROADCAST_LOCATIONS")
					//log.Printf("thisKey: %v", thisKey)
					//--check student record
                    key := datastore.NameKey("TDSCNFG", thisKey, nil)
                    //D0086
                    datastoreClient := createClientDS()
					if err := datastoreClient.Get(c, key, &g); err != nil {
						//panic(err)
						//return
                    }
                    //log.Printf("datastoreClient.Get()  [30866]")
					if g.TXT_VAL != "" {
						//log.Printf("g.TXT_VAL: %v", g.TXT_VAL)
						MAPS_BLOB = g.TXT_VAL 
						FL_EN = true
					}
					if FL_EN == false {
						//log.Printf("Insert TDSCNFG")
						g := TDSCNFG{
								SYS_VER: 1,
								USER: uid,
								CFG_ID: thisKey,
								DAT_TYP: "TXT",
								NUM_VAL: 0,
								TXT_VAL: "",
								CFG_DESC: "Set via code",
						}
						key := datastore.NameKey("TDSCNFG", thisKey, nil)
						if _, err := datastoreClient.Put(c, key, &g); err != nil {
								panic(err)
								//return
                        }
                        //log.Printf("datastoreClient.Put()  [30888]")
					}
				}
				//D0082
				//reader := blobstore.NewReader(c, appengine.BlobKey(MAPS_BLOB))
				ctx := context.Background()
				client, err := storage.NewClient(ctx)
				if err != nil {
					log.Fatalf("ERROR: %v", err)
				}
				BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
				rc, err := client.Bucket(BUCKET_NAME).Object(MAPS_BLOB).NewReader(ctx)
				if err != nil {
					panic(err)
					//return nil, err
					//log.Fatalf("social() ERROR: client.Bucket() read error: %v", err)
				}
				defer rc.Close()
				scanner := bufio.NewScanner(rc)
				for scanner.Scan() {
					SPL := strings.Split(scanner.Text(), "|")
					if len(SPL) > 0 {
						if xuid == SPL[0] && xhost == SPL[1] {
						//replace
							buffer3.WriteString(fmt.Sprintf("%v|%v|%v|%v|%v\n", xuid, xhost, xll, getTimestamp(),xpic))
							FL_OK = true
						} else {
							buffer3.WriteString(fmt.Sprintf("%v\n", scanner.Text()))
						}
					}
				}
			} else {
				//D0082
				//FL_OK := false
				//log.Printf("LOCS")
				scanner := bufio.NewScanner(strings.NewReader(LOCS))
				for scanner.Scan() {
					SPL := strings.Split(scanner.Text(), "|")
					if len(SPL) > 0 {
						if xuid == SPL[0] && xhost == SPL[1] {
						//replace
							buffer3.WriteString(fmt.Sprintf("%v|%v|%v|%v|%v\n", xuid, xhost, xll, getTimestamp(),xpic))
							FL_OK = true
						} else {
							buffer3.WriteString(fmt.Sprintf("%v\n", scanner.Text()))
						}
					}
				}

			}
			if FL_OK == false {
				buffer3.WriteString(fmt.Sprintf("%v|%v|%v|%v|%v\n", xuid, xhost, xll, getTimestamp(), xpic))
			}
			//log.Printf("MAP_DATA: %v", buffer3.String())
			putStrToMemcacheWithoutExp(w,r,cKey,buffer3.String())
			//save backup to blobstore
			if buffer3.String() != "" {
                //log.Printf("laterSaveLocations()")
                time.AfterFunc(5*time.Second, func() {
                    laterSaveLocations(c, buffer3.String())
                })
				//saveLocations(w,r,buffer3.Bytes())
			}
			//save latest long/lat per host
			cKeyLL := fmt.Sprintf("%v-tracker-%v", xhost, xuid)
			//log.Printf("cKeyLL: %v", cKeyLL)
			//log.Printf("xll: %v", xll)
			putStrToMemcacheWithoutExp(w,r,cKeyLL,xll)
			return
		//re-broadcast coming from sites server
		case "proc-broadcast-all":
			procBroadcastPresence4(w,r)
			return
		case "proc-broadcast-all-msg":
			procBroadcastMessage4(w,r)
			return
		case "get-profile-pic":
			uid := r.FormValue("uid")
			PROF_PIC := cacheProfilePic(w,r,uid)
			writeHTMLHeader(w, 200)
			w.Write([]byte(PROF_PIC))
			return
		case "get-version":
			writeHTMLHeader(w, 200)
			w.Write([]byte(UCD_BUILD_STR))
			return
		case "get-health":
			writeHTMLHeader(w, 200)
			w.Write([]byte("ok"))
			return
		//D0073
		case "get-tot-slides":
			//D0073
			cat := r.FormValue("cat")
			if cat != "" {
				//show stats
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())	
				if FL_PROC_OK == false {return}
				showDesktopStats(w,r,"TDSSLIDE",cat,r.FormValue("catname"))
				return
			}
			q := datastore.NewQuery("TDSSLIDE")
			//log.Panicf("[S0202]")
			recCount,_ := datastoreClient.Count(c,q)
			count := fmt.Sprintf("%v", recCount)
			writeHTMLHeader(w, 200)
			w.Write([]byte(count))
			return
		case "get-tot-articles":
			//D0073
			cat := r.FormValue("cat")
			if cat != "" {
				//show stats
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())	
				if FL_PROC_OK == false {return}
				showDesktopStats(w,r,"TDSARTL",cat,r.FormValue("catname"))
				return
			}
			q := datastore.NewQuery("TDSARTL")
			//log.Panicf("[S0203]")
			recCount,_ := datastoreClient.Count(c,q)
			count := fmt.Sprintf("%v", recCount)
			writeHTMLHeader(w, 200)
			w.Write([]byte(count))
			return
		//D0074
		case "webrtc-call":
			cat := r.FormValue("cat")
			if cat == "" {
				fmt.Fprintf(w, "Invalid operation!")
				return
			}
			//send command to cctv channel
			roomName := getTimestamp()
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_STRUWM_CALL@888@%v@888@%v@888@%v", SYS_SERVER_NAME,cat,roomName)
			sendChannelMessage(w,r,"cctv",data)
			//log.Printf("webrtc-call channel sent!")
			//open the link as well to the page
			redURL := fmt.Sprintf("https://appr.tc/r/ulapph-cctv-%v-%v-%v?stereo=false&hd=false", SYS_SERVER_NAME, cat, roomName)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
		case "get-tot-media":
			//D0073
			cat := r.FormValue("cat")
			if cat != "" {
				//show stats
				FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())	
				if FL_PROC_OK == false {return}
				showDesktopStats(w,r,"TDSMEDIA",cat,r.FormValue("catname"))
				return
			}
			q := datastore.NewQuery("TDSMEDIA")
			//log.Panicf("[S0204]")
			recCount,_ := datastoreClient.Count(c,q)
			count := fmt.Sprintf("%v", recCount)
			writeHTMLHeader(w, 200)
			w.Write([]byte(count))
			return
		case "get-tot-users":
			q := datastore.NewQuery("TDSUSERS")
			//log.Panicf("[S0205]")
			recCount,_ := datastoreClient.Count(c,q)
			count := fmt.Sprintf("%v", recCount)
			writeHTMLHeader(w, 200)
			w.Write([]byte(count))
			return
		case "get-privacy":
			writeHTMLHeader(w, 200)
			cont := fmt.Sprintf("%v", SYS_SITE_PRIVATE)
			w.Write([]byte(cont))
			return
		case "get-logo":
			writeHTMLHeader(w, 200)
			cont := fmt.Sprintf("%v", SYS_DISP_LOGO)
			w.Write([]byte(cont))
			return
		case "get-searchable":
			writeHTMLHeader(w, 200)
			cont := fmt.Sprintf("%v", SYS_SEARCHABLE)
			w.Write([]byte(cont))
			return
		case "get-contact":
			writeHTMLHeader(w, 200)
			w.Write([]byte(FDBKMAIL))
			return
		case "get-log-hits":
			procLogHits(w,r)
			return
		case "CHK_SHR":
			SID := r.FormValue("SID")
			passcode := r.FormValue("passcode")
			auth := r.FormValue("auth")
			toURL := r.FormValue("URL")

			SPL := strings.Split(SID,"-")
			DOC_ID2 := 0
			TARGET := ""
			if len(SPL) > 1 {
				TARGET = SPL[0]
				DOC_ID := SPL[1]
				DOC_ID2 = str2int(DOC_ID)
			}
			
			PUB_STAT := ""
			FL_SHARED := ""
			SHARED_TO := ""
			TITLE := ""
			MUSIC_ID := ""
			BLOB_KEY := ""
			MIME_TYPE := ""
			//AUTHOR := ""
			//i := strings.Index(SID, "TDSSLIDE")
			switch TARGET {
				case "TDSARTL":
				_, PUB_STAT, FL_SHARED, _, _, _, SHARED_TO, _, MUSIC_ID = getTDSARTLBlobKey(w, r, DOC_ID2)
				
				case "TDSSLIDE":
				_, PUB_STAT, FL_SHARED, _, _, TITLE, _, SHARED_TO, MUSIC_ID, _ = getTDSSLIDEBlobKey(w, r, DOC_ID2)
				
				case "TDSMEDIA":
				BLOB_KEY, _, TITLE, _, PUB_STAT, FL_SHARED, _, _, MIME_TYPE, _, SHARED_TO = getTDSMEDIABlobKey(w, r, DOC_ID2)
				
			}
 
			if (PUB_STAT == "Personal" || PUB_STAT == "ULAPPH Only" || PUB_STAT == "Premium") && FL_SHARED == "Y"  {
				if auth == "p" && validatePasscode(w,r,"CHK_SHR",SHARED_TO, passcode) != true {
					msgDtl := fmt.Sprintf("[U00186] ERROR: This document (%s) is accessible only to select individuals. Kindly request access from author.", SID)
					msgTyp := "error"
					msgURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=")
					action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?SID=%v&msgTyp=%v&message=%v&msgURL=%v&action=%v", SID, msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)	
					return
				} else {
					if toURL != "" {
						redURL := fmt.Sprintf("%v&auth=p&passcode=%v", toURL, passcode)
						http.Redirect(w, r, redURL, http.StatusFound)	
						return						
					}
				
					USER := getGeoString(w,r)
					msgDtl3 := ""
					reqStr := ""
					
					switch TARGET {
						case "TDSSLIDE":
							reqStr = fmt.Sprintf("/slides?TYPE=SLIDE&DOC_ID=%v&SID=TDSSLIDE-%v", DOC_ID2, DOC_ID2)
							msgDtl3 = fmt.Sprintf("UID:%v has accessed a personal slide SID(%v) using passcode.", USER, SID)
							redURL := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=%v&TITLE=%v&MUSIC_ID=%v&auth=p&passcode=%v", DOC_ID2, SID, TITLE, MUSIC_ID, passcode)
							http.Redirect(w, r, redURL, http.StatusFound)	
							return	
						
						case "TDSARTL":
							reqStr = fmt.Sprintf("/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&MUSIC_ID=%v", DOC_ID2, DOC_ID2, MUSIC_ID)
							msgDtl3 = fmt.Sprintf("UID:%v has accessed a personal article SID(%v) using passcode.", USER, SID)
							redURL := fmt.Sprintf("/articles?TYPE=ARTICLE&DOC_ID=%v&SID=%v&auth=p&passcode=%v&MUSIC_ID=%v", DOC_ID2, SID, passcode, MUSIC_ID)
							http.Redirect(w, r, redURL, http.StatusFound)	
							return
							
						case "TDSMEDIA":
							reqStr = fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d", DOC_ID2)
							msgDtl3 = fmt.Sprintf("UID:%v has accessed a personal media SID(%v) using passcode.", USER, SID)
							if MIME_TYPE != "" {
								w.Header().Set("Content-Type",  MIME_TYPE)
                            }
                            //blobstore.Send(w, appengine.BlobKey(BLOB_KEY))
                            bData, err := readGcsObject(BLOB_KEY)
                            if err != nil {
                                panic(err)
                            }
                            w.Write(bData)								
							return						
						
					}
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,USER,reqStr,SID),SID)
				}
			}
			
		case "FB_LIKE":
			DOC_ID := r.FormValue("DOC_ID")
			
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: getSchemeUrl(w,r),
				STR_FILLER2: DOC_ID,
			}
			if err := htmlHeaderFB.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := htmlFacebookLikes.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			return
			
		case "FB_COMS":
			DOC_ID := r.FormValue("DOC_ID")
			
			TEMPDATA := TEMPSTRUCT{
				STR_FILLER1: getSchemeUrl(w,r),
				STR_FILLER2: DOC_ID,
			}
			if err := htmlHeaderFB.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := htmlFacebookComments.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			return
			
		case "ADVERTS":
			if GA_AD_SERVE == true {
				if err := googleAdsenseBanner.Execute(w, template.HTML(GA_AD_CODE_RESP)); err != nil {
				  panic(err)
				}
			}
			return
			
		case "ViewPeople":
			//get Profile details from DS
			//fmt.Fprintf(w, "UID: %s", UID)
			UID := r.FormValue("UID")
			//_, uid := checkSession(w,r)
			if uid == "" {
				uid = getGeoString(w,r)
			}
			if UID == "" {
				return
			}
			//FL_PROFILE_FOUND := false
			updateUserActiveData(w, r, c, uid, "/view-profile@"+UID)
			viewProfile(w,r,UID,uid)
			return
		//automated quiz checking
		case "QUIZ":
			SID := r.FormValue("SID")
			ANS := r.FormValue("ANS")
			mode := r.FormValue("mode")
			user := r.FormValue("name")
			uid := ""
			if user == "" {
				_, uid = checkSession(w,r)
				if uid == "" {
					uid = getGeoString(w,r)
				}
			} else {
				uid = user
			}

			//send to email
			nameOk := false
			fromOk := false
			msgOk := false
			name := ""
			from := ""
			msg := ""
			SPD := strings.Split(ANS,"$")
			for i:=0; i < len(SPD); i++ {
				//is item found
				//$id:answer
				if SPD[i] != "" {
					if strings.Index(SPD[i], "inputName:") != -1 {

						SPL := strings.Split(SPD[i], ":")
						if len(SPL) == 2 {
							name = SPL[1]
							if name != "" {
								nameOk = true
							}
						}
					}
					if strings.Index(SPD[i], "inputEmail:") != -1 {

						SPL := strings.Split(SPD[i], ":")
						if len(SPL) == 2 {
							from = SPL[1]
							if from != "" {
								fromOk = true
							}
						}
					}
					if strings.Index(SPD[i], "inputMessage:") != -1 {

						SPL := strings.Split(SPD[i], ":")
						if len(SPL) == 2 {
							msg = SPL[1]
							if msg != "" {
								msgOk = true
							}
						}
					}
				}

			}
			switch mode {
				case "email":
					if nameOk == true && fromOk == true && msgOk == true {
						subj := fmt.Sprintf("[URGENT] [%v] [%v] New Contact from [%v][%v]", name, from, SID, SYS_SERVER_NAME)
						geoStr := getGeoString(w,r)
						geoAcc := getAccessString(w,r,"")
						msg = fmt.Sprintf("%v \n--sent by [%v] [%v] \n--no-reply \n--geo [%v] \n--via [%v]", msg, name, from, geoStr, geoAcc)
						to := FDBKMAIL
						SENDGENEMAIL(c, subj, to, from, msg)
						fmt.Fprintf(w, "SUCCESS: Message sent!")
					} else {
						w.WriteHeader(200)
						fmt.Fprintf(w, "[ERROR] Empty email or message!")
					}
					return
				case "default":
					//get percentage
					res, _, title, cAns, myTot, qTot, rmwTot, err := getBlobTextQuiz(w,r,SID,ANS)
					if err == nil {
						content := ""
						if nameOk == true && fromOk == true {
							content = fmt.Sprintf("%v (%v) got a score of %v", name, from, res)
						} else {
							content = fmt.Sprintf("%v got a score of %v", uid, res)
						}
						rh := r.Header
						oLatLong := rh.Get("X-AppEngine-CityLatLong")
						//D0061
						comUrl  := fmt.Sprintf("%v/comments?C_FUNC=create2&SID=%v&res=%v&parent=-1&name=%v&comment=%v&latlon=%v&url=&cc_key=%v", "https://www.ulapph.com", SID, res, uid, content, oLatLong, SYS_RECAPTCHA_KEY)
						//Post data to server
						//URL := fmt.Sprintf("%v/social?SO_FUNC=proc-broadcast-contents&encMsg=%v", SEARCH_SERVER, encMsg)
						req, err := http.NewRequest("POST", comUrl, nil)
                        //client := urlfetch.Client(c)
                        client := &http.Client{}
						_, err = client.Do(req)
						if err != nil {
							panic(err)
						}
						//fmt.Fprintf(w, "Thank you for your feedback!")
						//http.Redirect(w, r, comUrl, http.StatusFound)
						if nameOk == true && fromOk == true {
							subj := fmt.Sprintf("[QUIZ][%v][%v][%v][%v]", SID, name, from, res)
							var buf bytes.Buffer
							for i:=0; i < len(SPD); i++ {
								buf.WriteString(fmt.Sprintf("%v<br>\n", SPD[i]))
							}
							geoStr := getGeoString(w,r)
							geoAcc := getAccessString(w,r,"")
							msg := fmt.Sprintf("[%v] %v<br>%v <br>*****results*****<br>Your score: %v<br>Total Items: %v<br>RMW Deductions: %v<br>************<br>%v<br>****correct answers****<br>%v<br><br>--submitted by [%v] [%v] <br>--no-reply <br>--geo [%v] <br>--via [%v]",SID, title, content, myTot, qTot, rmwTot, buf.String(), cAns, name, from, geoStr, geoAcc)
							to := FDBKMAIL
							SENDGENEMAIL(c, subj, to, from, msg)
							//fmt.Fprintf(w, "SUCCESS: Message sent!")	
							redURL := fmt.Sprintf("/captcha?CC_FUNC=DISP&R=COMMENT&SID=%v&TITLE=%v", SID, title)
							http.Redirect(w, r, redURL, http.StatusFound)
						}
						return
					} else {
						w.WriteHeader(200)
						fmt.Fprintf(w, "[ERROR] %v", err)
					}
					return
			}
			return
		//D0040 -- remove???
		//social
		case "SIGN":
			checkReferrer(w,r)
			SID := r.FormValue("SID")
			REC_TYP := r.FormValue("REC_TYP")
			//TITLE := r.FormValue("TITLE")
			//check captcha
			CC_KEY := r.FormValue("cc_key")
			if CC_KEY != SYS_RECAPTCHA_KEY && isLoggedIn(w,r) != true {
				fmt.Fprintf(w, "Social comments needs to undergo captcha!")
				return				
			}
            if r.FormValue("content") != "" && SID != "" && REC_TYP != "" {	
			
				//validate content
				if strings.Index(r.FormValue("content"), ".image ") != -1 ||
					strings.Index(r.FormValue("content"), ".link ") != -1 ||
					strings.Index(r.FormValue("content"), ".code ") != -1 ||
					strings.Index(r.FormValue("content"), ".iframe ") != -1 ||
					strings.Index(r.FormValue("content"), ".checkbox ") != -1 ||
					strings.Index(r.FormValue("content"), ".radio ") != -1 ||
					strings.Index(r.FormValue("content"), ".input ") != -1 ||
					strings.Index(r.FormValue("content"), ".submit ") != -1 ||
					strings.Index(r.FormValue("content"), ".blockquote ") != -1 ||
					strings.Index(r.FormValue("content"), ".caption ") != -1 {
						fmt.Fprintf(w, "Message cant contain special keywords!")
						return
				}
				
				if len(r.FormValue("content")) > 500 {
					fmt.Fprintf(w, "Message cant exceed 500 characters!")
					return					
				}
				
				if isBot(w,r) == true {
					fmt.Fprintf(w, "Robots are not allowed to comment!")
					return					
				}
				
				//limit comments to a certain number
				q := datastore.NewQuery("Social").Filter("SID =", SID)
				//log.Panicf("[S0213]")
				recCount,_ := datastoreClient.Count(c,q)
				if recCount > SYS_MAX_SOC_COMMENTS {
					fmt.Fprintf(w, "Maximum number comments has been reached!")
					return						
				}
				thisCon := r.FormValue("content")
				//thisCon := html.UnescapeString(r.FormValue("content"))
				
				dsKey := getGuestbookKey(uid)
				g := Social{
						MsgID: dsKey,
						Content: thisCon,
						Date:    time.Now(),
						SID: SID,
				}
				if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
						g.Author = uid
						//g.Author = SID						
 
				}
				if uid == "" {
					uid = getGeoString(w,r)
					g.Author = uid
				}
				
				if REC_TYP == "PositiveComment" {
						g.RecTyp = "P"
				} else {
						g.RecTyp = "N"
				}
				key := datastore.NameKey("Social", dsKey, nil)
                _, err := datastoreClient.Put(c, key, &g)
                //log.Printf("datastoreClient.Put()  [31418]")
				//log.Panicf("[S0214]")
				if err != nil {
						 panic(err)
				}
 
				SOCIAL_MSGS := ""
				cKey := fmt.Sprintf("SOCIAL_MSGS_%s", SID)
				SOCIAL_MSGS = getStrMemcacheValueByKey(w,r,cKey)
 
				SOCIAL_NUM_MSG := ""
				thisGBNum := 0
                cKey = fmt.Sprintf("SOCIAL_NUM_MSG_%s", SID)
                SOCIAL_NUM_MSG = getStrMemcacheValueByKey(w,r,cKey)
                if SOCIAL_NUM_MSG != "" {
					//SOCIAL_NUM_MSG = fmt.Sprintf("%s", item.Value)
					thisGBNum = str2int(SOCIAL_NUM_MSG)
					thisGBNum = thisGBNum + 1
					SOCIAL_NUM_MSG = fmt.Sprintf("%d", thisGBNum)
				}
 
				contHTMLNew := ""
				cKey = fmt.Sprintf("SOCIAL_NEWM_%s",SID)
				contHTMLNew = getStrMemcacheValueByKey(w,r,cKey)
				
				PROFILE_PIC_URL := getProfilePic(w, r, uid)
				//check contact list cache
				i := strings.Index(contHTMLNew, PROFILE_PIC_URL)
				if i <= 0 {
					//CONST_STR = fmt.Fprintf(w, "#%v", PROFILE_PIC_URL)
					contHTMLNew = fmt.Sprintf("%v <a href=\"/social?SID=%v&SO_FUNC=FILTER\"><img src=\"%v\" width=\"70\" height=\"70\" title=\"%s\"></img></a>", contHTMLNew, uid, PROFILE_PIC_URL, uid)
				}
				
				var buffer3 bytes.Buffer
				
				//if SOCIAL_MSGS != "" {
				buffer3.WriteString(fmt.Sprintf("        <li>"))
				buffer3.WriteString(fmt.Sprintf("            <a href=\"#\" class=\"icon-user\">%s</a>", uid))
				buffer3.WriteString(fmt.Sprintf("        </li>"))
				buffer3.WriteString(fmt.Sprintf("%v", SOCIAL_MSGS))
				gbHTML := buffer3.String()
				cKey = fmt.Sprintf("SOCIAL_MSGS_%s", SID)
				putStrToMemcacheWithoutExp(w,r,cKey,gbHTML)
 
				cKey = fmt.Sprintf("SOCIAL_NUM_MSG_%s", SID)
				putStrToMemcacheWithoutExp(w,r,cKey,SOCIAL_NUM_MSG)
 
				cKey = fmt.Sprintf("SOCIAL_NEWM_%s", SID)
				putStrToMemcacheWithoutExp(w,r,cKey,contHTMLNew)
				
				UID := ""
				if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
					UID = uid
				} else {
					UID = getGeoString(w,r)
				}
				if REC_TYP == "PositiveComment" {
                    time.AfterFunc(5*time.Second, func() {
                        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-social", map[string]string{"UID": UID, "SID": SID, "SOC_FUNC": "SIGN", "FL_INC_LIKES": "Yes", "FL_INC_DISLIKES": "No", "MODE": "", "COMMENTS_BY": "",})
                    })
				} else {
                    time.AfterFunc(5*time.Second, func() {
                        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-social", map[string]string{"UID": UID, "SID": SID, "SOC_FUNC": "SIGN", "FL_INC_LIKES": "No", "FL_INC_DISLIKES": "Yes", "MODE": "", "COMMENTS_BY": "",})
                    })
				}
				subject := ""
				if REC_TYP == "PositiveComment" {
					subject = fmt.Sprintf("[%v] [%v] New Positive Comment", uid, SID)
				} else {
					subject = fmt.Sprintf("[%v] [%v] New Negative Comment", uid, SID)
				}
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": uid, "MESSAGE": thisCon})
                })
				
				TARGET := ""
				docID := 0
				if SID != "" {
					SPL := strings.Split(SID,"-")
					TARGET = SPL[0]
					if len(SPL) > 1 {
						DOC_ID := SPL[1]
						docID = str2int(DOC_ID)
					}
				} else {
					return
				}
				//clear slide cache
				switch TARGET {
					case "TDSSLIDE":
						blobkey, _, _, _, _, _, _, _, _, _  := getTDSSLIDEBlobKey(w, r, docID)
						
						SLIDES_CACHE_KEY := fmt.Sprintf("SLIDES_CACHE_%v", blobkey)
						putStrToMemcacheWithoutExp(w,r,SLIDES_CACHE_KEY,"")
					case "TDSARTL":
						blobkey, _, _, _, _, _, _, _, _ := getTDSARTLBlobKey(w, r, docID)
 
						ARTICLES_CACHE_KEY := fmt.Sprintf("ARTICLES_CACHE_%v", blobkey)
						putStrToMemcacheWithoutExp(w,r,ARTICLES_CACHE_KEY,"")
				}
				fmt.Fprintf(w, "Thank you for your feedback!")
				return
				
			} else {
				msgDtl := "[U00038] ERROR: EMPTY MESSAGE"
				msgTyp := "error"
				msgURL := "/?q=home&ERROR=emptyMessage"
				action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
			}

		//D0040
		case "SO_VIEW":
			CC_KEY := r.FormValue("cc_key")
			SID := r.FormValue("SID")
			TITLE := r.FormValue("TITLE")
			DESKTOP := r.FormValue("CATEGORY")
			SO_TITLE  := fmt.Sprintf("SID(%s) TITLE(%v)", SID, TITLE)
			if CC_KEY != SYS_RECAPTCHA_KEY && isLoggedIn(w,r) != true {
				fmt.Fprintf(w, "Error: Access to this page requires captcha verification!")
				//redURL := fmt.Sprintf("/captcha?CC_FUNC=DISP&R=COMMENT&SID=%v&TITLE=%v", SID, TITLE)
				//http.Redirect(w, r, redURL, http.StatusFound)
				return			
			}		

			_ = contentCheckSid(w,r,SID)
 
			TARGET := ""
			DOC_ID := ""
			if SID != "" {
				SPL := strings.Split(SID,"-")
				TARGET = SPL[0]
				if len(SPL) > 1 {
					DOC_ID = SPL[1]
				}
			} else {
				return
			}
			reqStr := ""
			switch TARGET {
			case "TDSSLIDE":
				reqStr = fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&CATEGORY=%v", getSchemeUrl(w,r), DOC_ID, DOC_ID, SO_TITLE, DESKTOP)
			case "TDSARTL":
				reqStr = fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&TITLE=%v&CATEGORY=%v", getSchemeUrl(w,r), DOC_ID, DOC_ID, SO_TITLE, DESKTOP)
			case "TDSMEDIA":
				//D0040
				//reqStr = r.Referer()
				reqStr = fmt.Sprintf("%vmedia?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", domRefMatchS, DOC_ID, DOC_ID)
				
			}
			
			_, uid := checkSession(w,r)
			if uid == "" {
				uid = getGeoString(w,r)
			}
			
			TEMPDATA := TEMPSTRUCT2{
				STR_FILLER1: uid,
				STR_FILLER2: reqStr,
				STR_FILLER3: SID,
				STR_FILLER4: TITLE,
				//D0040
				STR_FILLER5: getGaeLatLon(w,r),
			}
				
			if err := htmlHeaderGBSocial.Execute(w, &TEMPDATA); err != nil {
			  panic(err)
			}
			return
		
	}
	checkReferrer(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())	
	if FL_PROC_OK == false {return}
	SID := r.FormValue("SID")
	//docID := str2int(DOC_ID)
	r.ParseForm()
	if SID == "" {
		return
	}
	if SO_FUNC == "" {
		//SO_FUNC = "SO_VIEW"
		return
	}
	switch SO_FUNC {
		case "QRGEN":
			QRDAT := r.FormValue("QRDAT")
			QR_GET_URL  := fmt.Sprintf("https://chart.googleapis.com/chart?cht=qr&chs=256x256&chl=%v&choe=UTF-8", QRDAT)
			http.Redirect(w, r, QR_GET_URL, http.StatusFound)
			return
		case "DELETE":
			MID := r.FormValue("MID")
			//_, uid := checkSession(w,r)
			if uid != FDBKMAIL {
				SPL := strings.Split(MID, "-")
				if len(SPL) <= 0 {
					return
				} else {
					if uid != SPL[0] {
						return
					}
				}
				if uid == "" || MID == "" {
					return
				}
			}
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			key := datastore.NameKey("Social", MID, nil)
			datastoreClient.Delete(c, key)
			writeHTMLHeader(w, 200)
			w.Write([]byte("ok"))
			return
	}
}

//D0073
//views user profiles 
func showDesktopStats(w http.ResponseWriter, r *http.Request, cType, dCat, dDesc string) {
	//c := appengine.NewContext(r)
	checkReferrer(w,r)
	//log.Printf("Displaying desktop stats")
	//show timelinejs form
	//get last timestamp
	timestamp := ""
	switch cType {
		case "TDSSLIDE":
			cKey := fmt.Sprintf("TDSSLIDE_CAT_LAST_UPLOAD_%v", dCat)
			catLastUpload := getStrMemcacheValueByKey(w,r,cKey)
			//log.Printf("catLastUpload: %v", catLastUpload)
			timestamp = stmpHumanizeStr(catLastUpload)
		case "TDSARTL":
			cKey := fmt.Sprintf("TDSARTL_CAT_LAST_UPLOAD_%v", dCat)
			catLastUpload := getStrMemcacheValueByKey(w,r,cKey)
			//log.Printf("catLastUpload: %v", catLastUpload)
			timestamp = stmpHumanizeStr(catLastUpload)
		case "TDSMEDIA":
			cKey := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", dCat)
			catLastUpload := getStrMemcacheValueByKey(w,r,cKey)
			//log.Printf("catLastUpload: %v", catLastUpload)
			timestamp = stmpHumanizeStr(catLastUpload)
	}
	renderReportForm(w,r,".timelinejs-rep", cType, dCat, dDesc, timestamp)
	return
}
//D0073
//this template handles how we generate reports 
func renderReportForm(w http.ResponseWriter, r *http.Request, name, cType, dCat, dDesc, latestStamp string) {
	//c := appengine.NewContext(r)
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT2)
	tc := time.Now()
	doc.STR_FILLER1 = fmt.Sprintf("%v", tc.Format("Mon Jan _2 15:04:05 2006")) 
	doc.STR_FILLER2 = cType
	doc.STR_FILLER3 = dCat
	doc.STR_FILLER4 = dDesc
	doc.STR_FILLER5 = latestStamp
	data := struct {
		*TEMPSTRUCT2
		Template    *template.Template
	}{
		doc,
		t,
	}
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}

//views user profiles 
func viewProfile(w http.ResponseWriter, r *http.Request, UID, uid string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()

	FL_PROFILE_FOUND := false
	q := datastore.NewQuery("TDSPROF").Filter("UID =", UID).Limit(1)
	//log.Panicf("[S0217]")
	profile := make([]TDSPROF, 0, 1)
	
	if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
		 panic(err)
	}
	//log.Printf("datastoreClient.Get()  [31719]")
	for _, p := range profile{
		FL_PROFILE_FOUND = true
		//display profile as slides
		cKey := fmt.Sprintf("SLIDES_PROFILE_VIEW_%s", UID)
        SLIDES_PROFILE_VIEW_CACHE := []byte("")
        SLIDES_PROFILE_VIEW_CACHE = getBytMemcacheValueByKey(w,r,cKey)
        if SLIDES_PROFILE_VIEW_CACHE != nil {
			//display slides
			writeHTMLHeader(w, 200)
			w.Write(SLIDES_PROFILE_VIEW_CACHE)
			return
			
		}
 
		if string(SLIDES_PROFILE_VIEW_CACHE) == "" {
			var lines []string
			lines = append(lines, fmt.Sprintf("People Profile"))
			lines = append(lines, fmt.Sprintf("UID: %v", p.UID))
			const layout = "2 Jan 2006"
			t := time.Now().Local()
			lines = append(lines, fmt.Sprintf("%v", t.Format(layout)))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("%v", p.UID))
			lines = append(lines, fmt.Sprintf(""))
			
			if SYS_DISP_ADS_CONTENT == true {
				//put ads
				for i := 1; i < 4; i++ {
					//append ads
					lines = append(lines, " ")
					//thisAd := fmt.Sprintf("* ")
					thisAd := fmt.Sprintf("* Advertisement")
					lines = append(lines, thisAd)
					thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
					lines = append(lines, fmt.Sprintf("%v", thisFrame))
					lines = append(lines, " ")
					lines = append(lines, " ")
				
				}
			}
			
			lines = append(lines, fmt.Sprintf("%v", p.UID))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* My Picture"))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf(".image %v 400 500", p.PICTURE))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* Location"))
			lines = append(lines, fmt.Sprintf("COUNTRY: %v", p.COUNTRY))
			lines = append(lines, fmt.Sprintf("REGION: %v", p.REGION))
			lines = append(lines, fmt.Sprintf("CITY: %v", p.CITY))
			lines = append(lines, fmt.Sprintf("MUNICIPALITY: %v", p.MUNICIPALITY))
			lines = append(lines, fmt.Sprintf("BARANGAY: %v", p.BARANGAY))
			lines = append(lines, fmt.Sprintf("SUBDIVISION: %v", p.SUBDIVISION))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* Personal Info"))
			lines = append(lines, fmt.Sprintf("BIRTH_DAY: %v", p.BIRTH_DAY))
			lines = append(lines, fmt.Sprintf("ELEM_SCHOOL: %v", p.ELEM_SCHOOL))
			lines = append(lines, fmt.Sprintf("HIGH_SCHOOL: %v", p.HIGH_SCHOOL))
			lines = append(lines, fmt.Sprintf("COLLEGE: %v", p.COLLEGE))
			lines = append(lines, fmt.Sprintf("POST_GRAD: %v", p.POST_GRAD))
			lines = append(lines, fmt.Sprintf("PROFESSION: %v", p.PROFESSION))
			lines = append(lines, fmt.Sprintf("COMPANY: %v", p.COMPANY))
			lines = append(lines, fmt.Sprintf("CONTACT_NUM: %v", p.CONTACT_NUM))
			lines = append(lines, fmt.Sprintf("FACEBOOK LINK: %v", p.SOCIAL_1))
			lines = append(lines, fmt.Sprintf("GOOGLE+ LINK: %v", p.SOCIAL_2))
			lines = append(lines, fmt.Sprintf("OTHER SOCIAL SITE LINK: %v", p.SOCIAL_3))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* Citizenship"))
			lines = append(lines, fmt.Sprintf("GOVT ID: %v", p.REG_VOTER))
			lines = append(lines, fmt.Sprintf("ID NUMBER: %v", p.ID_NUMBER))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* Buy & Sell"))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* FS/Selling/Offering/I Have..."))
			//lines = append(lines, fmt.Sprintf("%v",p.I_HAVE_TEXT))
			//split into separate lines
			FL_FS_IMG_URL := ""
			temp := strings.Split(p.I_HAVE_TEXT,"\n")
			if len(temp) > 0 {
				for j := 0; j < len(temp); j++ {
					lines = append(lines, fmt.Sprintf("%v",temp[j]))
					if FL_FS_IMG_URL == "" {
					//get image url
						i := strings.Index(temp[j], ".image ")
						if i != -1 {
							args := strings.Fields(temp[j])
							FL_FS_IMG_URL = args[1]
						}
					}
				}
			}
			lines = append(lines, fmt.Sprintf(""))
			
			//insert for sale item into search idx
			if FL_FS_IMG_URL == "" {
				FL_FS_IMG_URL = p.PICTURE
			}
			thisIdxKey := fmt.Sprintf("TDSPROF-FS-%v", UID)
			//fsTitle := fmt.Sprintf("Items For Sale by: %v", UID)
			fsTitle := fmt.Sprintf("Items For Sale: %v", strings.TrimSpace(p.I_HAVE_TEXT))
			if len(p.I_HAVE_TEXT) > 200 {
				fsTitle = fsTitle[0:200]
			} else {
				fsTitle = fsTitle[0:len(p.I_HAVE_TEXT)]
			}
			fsDesc := fmt.Sprintf("Items For Sale by: %v (%v)", UID, strings.TrimSpace(p.I_HAVE_TEXT))
			thisIdxURL := fmt.Sprintf("%vpeople-edit?EditPeopleFunc=ViewPeople&UID=%s&SID=%s", getSchemeUrl(w,r), UID, UID)
			tstamp := getTimestamp()
			searchIdx := &IDX_FORSALE{
				DOC_KEY: 			thisIdxKey,
				SEARCH_TYPE: 		"FORSALE",
				SOURCE_TYPE: 		"ULAPPH",	
				SOURCE_TBL:  		"TDSPROF",	
				DESKTOP: 			"FORSALE",
				FL_SHARED:			"Y",
				DOC_STAT:			"Worldwide",
				DOC_SCOPE_OVERALL:	"",
				DOC_SCOPE_COUNTRY:  "",
				DOC_SCOPE_REGION:  	"",
				DOC_SCOPE_CITY: 	"",
				DOC_SCOPE_BARANGAY: "",
				DOC_TITLE: 			fsTitle,	
				//DOC_DESC: 			"View Profile to see items for sale by user",
				DOC_DESC: 			fsDesc,
				DOC_AUTHOR:         UID,
				DOC_CONTENT_TEXT: 	p.I_HAVE_TEXT,
				//DOC_CONTENT_TEXT:   "",
				DOC_CONTENT_HTML: 	"",	
				DOC_CONTENT_ATOM: 	"",	
				CONTENT_URL: 		thisIdxURL,
				IMG_URL: 			FL_FS_IMG_URL,
				DATE_ADDED: 		tstamp,
				DATE_UPDATED: 		tstamp,
			}
            
			putSearchIndexF(w,r,"IDX_FORSALE",thisIdxKey,searchIdx)
			
			lines = append(lines, fmt.Sprintf("* WTB/Buying/Wanted/I Need..."))
			FL_FS_IMG_URL = ""
			temp = strings.Split(p.I_NEED_TEXT,"\n")
			if len(temp) > 0 {
				for j := 0; j < len(temp); j++ {
					lines = append(lines, fmt.Sprintf("%v",temp[j]))
					if FL_FS_IMG_URL == "" {
					//get image url
						i := strings.Index(temp[j], ".image ")
						if i != -1 {
							args := strings.Fields(temp[j])
							FL_FS_IMG_URL = args[1]
						}
					}
				}
			}
			lines = append(lines, fmt.Sprintf(""))
			
			if FL_FS_IMG_URL == "" {
				FL_FS_IMG_URL = p.PICTURE
			}
			thisIdxKey = fmt.Sprintf("TDSPROF-WTB-%v", UID)
			//fsTitle = fmt.Sprintf("Items Want To Buy by: %v", UID)
			fsTitle = fmt.Sprintf("Items Want To Buy: %v", strings.TrimSpace(p.I_NEED_TEXT))
			if len(p.I_NEED_TEXT) > 200 {
				fsTitle = fsTitle[0:200]
			} else {
				fsTitle = fsTitle[0:len(p.I_NEED_TEXT)]
			}
			fsDesc = fmt.Sprintf("Items Want To Buy by: %v (%v)", UID, strings.TrimSpace(p.I_NEED_TEXT))
			thisIdxURL = fmt.Sprintf("%vpeople-edit?EditPeopleFunc=ViewPeople&UID=%s&SID=%s", getSchemeUrl(w,r), UID, UID)
			//thisCusText := fmt.Sprintf("%v, %v, %v, %v, %v, %v", COUNTRY, REGION, CITY, MUNICIPALITY, BARANGAY, SUBDIVISION)
			t = time.Now().Local()
			tstamp = t.Format("20060102150405")
			searchIdx2 := &IDX_WTBUY{
				DOC_KEY: 			thisIdxKey,
				SEARCH_TYPE: 		"WANTOBUY",
				SOURCE_TYPE: 		"ULAPPH",	
				SOURCE_TBL:  		"TDSPROF",	
				DESKTOP: 			"WANTOBUY",
				FL_SHARED:			"Y",
				DOC_STAT:			"Worldwide",
				DOC_SCOPE_OVERALL:	"",
				DOC_SCOPE_COUNTRY:  "",
				DOC_SCOPE_REGION:  	"",
				DOC_SCOPE_CITY: 	"",
				DOC_SCOPE_BARANGAY: "",
				DOC_TITLE: 			fsTitle,	
				//DOC_DESC: 			"View Profile to see items wanted by user",
				DOC_DESC:           fsDesc,
				DOC_AUTHOR:         UID,
				DOC_CONTENT_TEXT: 	p.I_NEED_TEXT,
				//DOC_CONTENT_TEXT:   "",
				DOC_CONTENT_HTML: 	"",	
				DOC_CONTENT_ATOM: 	"",	
				CONTENT_URL: 		thisIdxURL,
				IMG_URL: 			FL_FS_IMG_URL,
				DATE_ADDED: 		tstamp,
				DATE_UPDATED: 		tstamp,
			}
            
			putSearchIndexB(w,r,"IDX_WTBUY",thisIdxKey,searchIdx2)
			
			lines = append(lines, fmt.Sprintf("* Gallery"))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* Gallery 1"))
			lines = append(lines, fmt.Sprintf("%v", p.FILLER_1))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* Gallery 2"))
			lines = append(lines, fmt.Sprintf("%v", p.FILLER_2))
			lines = append(lines, fmt.Sprintf(""))	
			lines = append(lines, fmt.Sprintf("* Gallery 3"))
			lines = append(lines, fmt.Sprintf("%v", p.FILLER_3))
			lines = append(lines, fmt.Sprintf(""))	
			lines = append(lines, fmt.Sprintf("* Feedbacks"))
			lines = append(lines, fmt.Sprintf("* Positive/Smile Rating"))
			lines = append(lines, fmt.Sprintf(".link /people-edit?EditPeopleFunc=RatePeople&RATING=PLUS&UID=%v [+1]", UID))
			lines = append(lines, fmt.Sprintf(".image /static/img/emoticon-happy.png 400 400"))
			lines = append(lines, fmt.Sprintf("( %v ) positive ratings", p.POS_VOTES))
			lines = append(lines, fmt.Sprintf(""))
			lines = append(lines, fmt.Sprintf("* Negative/Sad Rating"))
			lines = append(lines, fmt.Sprintf(".link /people-edit?EditPeopleFunc=RatePeople&RATING=NEG&UID=%v [-1]", UID))
			lines = append(lines, fmt.Sprintf(".image /static/img/emoticon-sad.png 400 400"))
			lines = append(lines, fmt.Sprintf("( %v ) negative ratings", p.NEG_VOTES))
			lines = append(lines, fmt.Sprintf(""))
			
			lines = append(lines, fmt.Sprintf("* Ratings"))
			lines = append(lines, fmt.Sprintf("BADGE: %v", p.BADGE))
			lines = append(lines, fmt.Sprintf(" "))
			lines = append(lines, fmt.Sprintf("CRED_PTS: %v", p.CRED_PTS))
			lines = append(lines, fmt.Sprintf("POS_VOTES: %v", p.POS_VOTES))
			lines = append(lines, fmt.Sprintf("NEG_VOTES: %v", p.NEG_VOTES))
			//lines = append(lines, fmt.Sprintf("LIFE_RATING: %v", p.LIFE_RATING))
			lifeR := 0
			if p.POS_VOTES >= 1 {
				lifeR = 100 * (p.POS_VOTES) / (p.POS_VOTES + p.NEG_VOTES)
			}
			lines = append(lines, fmt.Sprintf("LIFE_RATING: %v", lifeR))
			lines = append(lines, fmt.Sprintf(""))
			//display slides
			
			//fmt.Fprintf(w, "cKey: %v<br>", cKey)
			doc, err := Parse4(w, r, &Lines{0, lines}, UID, 0)
			if err != nil {
				panic(err)
			}
			//fmt.Fprintf(w, "doc: %v<br>", doc)
			var buf bytes.Buffer
			title2 := fmt.Sprintf("%v.slide", UID)
			SL_TMP := "S"
			//renderPresentation(&buf, title2, doc)
			if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
				panic(err)
			}		
		
			putBytesToMemcacheWithExp(w,r,cKey,buf.Bytes(),MC_ADS_EXPIRES_30_MIN)
 
			//notify user that profile has been viewed
			geoStr := getGeoString(w,r)
			geoAcc := getAccessString(w,r,"")
			MESSAGE := fmt.Sprintf("Your profile was viewed. BY: %s >>> [%v] [%v]", uid, geoStr, geoAcc)
			time.AfterFunc(5*time.Second, func() {
                laterNotifyGB(c, "autoNotifyPeopleGB", UID, MESSAGE, uid)
            })
            w.Write(buf.Bytes())
			return
		}
 
		break
	}
	if FL_PROFILE_FOUND == false {
		msgDtl := "[U00047]ERROR: Profile for this user does not exist yet."
		msgTyp := "error"
		msgURL := "/people"
		action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to People.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
}

//handles guestbook notifications	
func notifyGuestbook(w http.ResponseWriter, r *http.Request, NGB_FUNC string, UID string, contentMsg string, FROM string) {
    //c := appengine.NewContext(r)
	//log.Printf("notifyGuestbook()")
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	FL_UPDATE_GB_CACHE := false
    //D0086
    datastoreClient := createClientDS()
	//uid := UID
	switch NGB_FUNC {
	
		case "autoNotifyPeopleGB":
			//log.Printf("case autoNotifyPeopleGB")
			dsKey := getGuestbookKey(UID)
			g := Greeting{
					MsgID: dsKey,
					//MsgType:
					Author: UID,
					Content: contentMsg,
					Date:    time.Now(),
					Flow: "IN",
					OwnerPic: "/static/img/self.png",
					SenderPic: "/static/img/sender.png",
					Status: "Unread",
					//OutTo: "",
					OutTo: FROM,
			}	
			key := datastore.NameKey("Greeting", dsKey, nil)
            _, err := datastoreClient.Put(c, key, &g)
            //log.Printf("datastoreClient.Put()  [32027]")
			//log.Panicf("[S0218]")
			if err != nil {
					//panic(err)
			}
			
			STRMSG := fmt.Sprintf("<img src=\"/static/img/guestbook.png\" width=50 height=50> %v", contentMsg)
			//sendEvent(w,r, UID, STRMSG)
			//when GB notify
			sendChannelMessage(w,r,UID, STRMSG)
 
			FL_UPDATE_GB_CACHE = true
	}
	
	if FL_UPDATE_GB_CACHE == true {
		
		UID2 := FROM
		//UID2 := UID
		//update messages
		GUESTBOOK_MSGS := ""
		cKey := fmt.Sprintf("GUESTBOOK_MSGS_%s", UID)
		GUESTBOOK_MSGS = getStrMemcacheValueByKey(w,r,cKey)
 
		GUESTBOOK_NUM_MSG := ""
		thisGBNum := 0
        cKey = fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", UID)
        GUESTBOOK_NUM_MSG = getStrMemcacheValueByKey(w,r,cKey)
        if GUESTBOOK_NUM_MSG != "" {
			//GUESTBOOK_NUM_MSG = fmt.Sprintf("%s", item.Value)
			thisGBNum = str2int(GUESTBOOK_NUM_MSG)
			thisGBNum = thisGBNum + 1
			GUESTBOOK_NUM_MSG = fmt.Sprintf("%d", thisGBNum)
			
			//save snippet
			cKey := fmt.Sprintf("GBM_MSG_SNIPPET_%s", UID)
			//putStrToMemcacheWithExp(w,r,cKey,contentMsg,30)
			putStrToMemcacheWithExp(w,r,cKey,contentMsg,20)
		}
 
		contHTMLNew := ""
		cKey = fmt.Sprintf("GUESTBOOK_NEWM_%s",UID)
		contHTMLNew = getStrMemcacheValueByKey(w,r,cKey)
		
		PROFILE_PIC_URL := getProfilePic(w, r, UID2)
		//check contact list cache
		i := strings.Index(contHTMLNew, PROFILE_PIC_URL)
		if i <= 0 {
			contHTMLNew = fmt.Sprintf("%v <a href=\"/guestbook?UID=%v&GB_FUNC=FILTER\"><img src=\"%v\" width=\"70\" height=\"70\" title=\"%s\"></img></a>", contHTMLNew, UID2, PROFILE_PIC_URL, UID2)
		}
		
		var buffer3 bytes.Buffer
		
		buffer3.WriteString(fmt.Sprintf("        <li>"))
		//buffer3.WriteString(fmt.Sprintf("            <a href=\"#\" class=\"icon-user\">%s</a>", uid))
		buffer3.WriteString(fmt.Sprintf("            <a href=\"#\" class=\"icon-user\">%s</a>", UID2))
		buffer3.WriteString(fmt.Sprintf("        </li>"))
		buffer3.WriteString(fmt.Sprintf("%v", GUESTBOOK_MSGS))
 
		gbHTML := buffer3.String()
		cKey = fmt.Sprintf("GUESTBOOK_MSGS_%s", UID)
		putStrToMemcacheWithoutExp(w,r,cKey,gbHTML)
 
		cKey = fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", UID)
		putStrToMemcacheWithoutExp(w,r,cKey,GUESTBOOK_NUM_MSG)
 
		cKey = fmt.Sprintf("GUESTBOOK_NEWM_%s", UID)
		putStrToMemcacheWithoutExp(w,r,cKey,contHTMLNew)
	}
	return
}

//gets message of the day 
//used to display quotations, tips and tricks
func getMOTD(w http.ResponseWriter, r *http.Request, uid, deskName string) (ranMsgTitle, RAN_MSG, ranMsgSlidesURL string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    if SYS_DISP_MOTD == false {
        return
    }
	motd := ""
	sRand2 := randNum(0, 15)
	
	switch sRand2 {
		case 0:
			motd = MOTD_1_name
		case 1:
			motd = MOTD_2_name
		case 2:			
			motd = MOTD_1_name
		case 3:
			motd = MOTD_3_name
		case 4:
			motd = MOTD_4_name
		case 5:
			motd = MOTD_5_name
		case 6:
			motd = MOTD_6_name
		case 7:
			motd = MOTD_7_name
		case 8:
			motd = MOTD_8_name
		case 9:
			motd = MOTD_9_name
		case 10:
			motd = MOTD_10_name
		case 11:
			motd = MOTD_11_name
		case 12:
			motd = MOTD_12_name
		case 13:
			motd = MOTD_13_name
		case 14:
			motd = MOTD_14_name
		case 15:
			motd = MOTD_15_name
		default:
			motd = MOTD_1_name
	}
 
	CON_CACHE := ""
	
	switch motd {
	
		case MOTD_1_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_1_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_1_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_1_name)
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
			
		case MOTD_2_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_2_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_2_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_2_name)
			//ranMsgSlidesURL = bibleSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
 
		case MOTD_3_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_3_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_3_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_3_name)
			//ranMsgSlidesURL = jokeSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_4_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_4_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_4_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_4_name)
			//ranMsgSlidesURL = savingSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_5_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_5_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_5_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_5_name)
			//ranMsgSlidesURL = blogSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
 
		case MOTD_6_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_6_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_6_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_6_name)
			//ranMsgSlidesURL = healthSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_7_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_7_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_7_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_7_name)
			//ranMsgSlidesURL = fitnessSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_8_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_8_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_8_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_8_name)
			//ranMsgSlidesURL = interviewSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_9_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_9_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_9_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_9_name)
			//ranMsgSlidesURL = businessSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_10_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_10_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_10_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_10_name)
			//ranMsgSlidesURL = lifeSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_11_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_11_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_11_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_11_name)
			//ranMsgSlidesURL = ttopicsSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_12_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_12_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_12_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_12_name)
			//ranMsgSlidesURL = bibleSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_13_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_13_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_13_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_13_name)
			//ranMsgSlidesURL = bibleSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
 
		case MOTD_14_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_14_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_14_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_14_name)
			//ranMsgSlidesURL = bibleSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_15_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_15_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_15_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_15_name)
			//ranMsgSlidesURL = bibleSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		case MOTD_16_name:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_16_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_16_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_16_name)
			//ranMsgSlidesURL = bibleSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
			
		default:
			//cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_%s", MOTD_1_name)
			cKeyText := fmt.Sprintf("ULAPPH_MOTD_CACHE_MOTD_1_name")
			CON_CACHE = getStrMemcacheValueByKey(w,r,cKeyText)
			if CON_CACHE == "" {
				CON_CACHE = cacheMOTDFile(w,r,uid,cKeyText)
			}
			//get randomText
			RAN_MSG = getRanText(w,r,CON_CACHE)
			ranMsgTitle = fmt.Sprintf("MOTD: %v Tips", MOTD_1_name)
			//ranMsgSlidesURL = bibleSlidesURL
			ranMsgSlidesURL = fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=pv", cKeyText)
		
	}
 
 
 
	if RAN_MSG != "" {
 
	}
 
 
	return ranMsgTitle, RAN_MSG, ranMsgSlidesURL
}

//gest random text from a cache of contents 
func getRanText(w http.ResponseWriter, r *http.Request, CON_CACHE string) (RAN_MSG string) {
	temp := strings.Split(CON_CACHE, "\n")
	totCount := len(temp)
	if totCount > 1 {
		myrand := randNum(1, totCount)
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
				if j == 1 {
					RAN_MSG =  temp[j]
				}
				//if (j+1 == myrand && strings.TrimSpace(temp[j]) != "") {
				if (j+1 == myrand && len(strings.TrimSpace(temp[j])) > 10) {
					RAN_MSG =  temp[j]
					break
				}
			}
		}
	}	
 
	return RAN_MSG
}

//caches a given MOTD media file 
func cacheMOTDFile(w http.ResponseWriter, r *http.Request, uid, CACHE_TARGET string) (CONCACHE string) {
	//c := appengine.NewContext(r)
	targetMediaID := 0
	
	switch CACHE_TARGET {
		
	case "ULAPPH_MOTD_CACHE_MOTD_1_name":
		targetMediaID = MOTD_1_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_2_name":
		targetMediaID = MOTD_2_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_3_name":
		targetMediaID = MOTD_3_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_4_name":
		targetMediaID = MOTD_4_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_5_name":
		targetMediaID = MOTD_5_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_6_name":
		targetMediaID = MOTD_6_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_7_name":
		targetMediaID = MOTD_7_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_8_name":
		targetMediaID = MOTD_8_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_9_name":
		targetMediaID = MOTD_9_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_10_name":
		targetMediaID = MOTD_10_mediaID
	
	case "ULAPPH_MOTD_CACHE_MOTD_11_name":
		targetMediaID = MOTD_11_mediaID
		
	case "ULAPPH_MOTD_CACHE_MOTD_12_name":
		targetMediaID = MOTD_12_mediaID
 
	case "ULAPPH_MOTD_CACHE_MOTD_13_name":
		targetMediaID = MOTD_13_mediaID
 
	case "ULAPPH_MOTD_CACHE_MOTD_14_name":
		targetMediaID = MOTD_14_mediaID
 
	case "ULAPPH_MOTD_CACHE_MOTD_15_name":
		targetMediaID = MOTD_15_mediaID
 
	case "ULAPPH_MOTD_CACHE_MOTD_16_name":
		targetMediaID = MOTD_16_mediaID		
	
	}
	
	FL_SKIP_SAVE := false
	if targetMediaID == 0 {
		FL_SKIP_SAVE = true
		targetMediaID = MOTD_2_mediaID
	}
	
	//read blob
	BLOB_KEY, _, _, _, _, _, _, _, _, _, _ := getTDSMEDIABlobKey(w, r, targetMediaID)	
    
    if BLOB_KEY == "" {
        return ""
    }
	var buf bytes.Buffer
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
	for s.Scan() {
		buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
	}
	
	if FL_SKIP_SAVE == false {
		//cKey := fmt.Sprintf("URLFETCH_LIST")
		putBytesToMemcacheWithoutExp(w,r,CACHE_TARGET,buf.Bytes())
	}
	CONCACHE = buf.String()
 
	return CONCACHE
}

//gets profile pic of a user				
func getProfilePic(w http.ResponseWriter, r *http.Request, UID string) (PROFILE_PIC string) {
	if SYS_STATELESS_SERVER == true {
		return "/static/img/no-profile.png"
	}
	j := strings.Index(UID, "|")
	if j != -1 {
		//get profile from remote site
		temp := strings.Split(UID, "|")
		if len(temp) > 0 {
			tUrl := fmt.Sprintf("%vsocial?SO_FUNC=get-profile-pic&uid=%v", temp[1], temp[0])
			PROFILE_PIC = fetchURL(w,r,tUrl)
			if len(PROFILE_PIC) > 500 {
				PROFILE_PIC = ""
			}
		}
	} else {
		//PROFILE_PIC := ""
		cKey := fmt.Sprintf("PROFILE_PIC_%v", UID)
		PROFILE_PIC = getStrMemcacheValueByKey(w,r,cKey)
	}
	if PROFILE_PIC == "" {
		PROFILE_PIC = cacheProfilePic(w,r,UID)
		if PROFILE_PIC == "" {
			i := strings.Index(UID, "guest-")
			if i != -1 {
				PROFILE_PIC = "/static/img/visitor.png"
			} else {
				PROFILE_PIC = "/static/img/no-profile.png"
			}
		}
	}
	return PROFILE_PIC
}
//gets country pic of a user 
func getCountryPic(w http.ResponseWriter, r *http.Request, UID string) (COUNTRY_PIC string) {
	
    //if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //D0086
    datastoreClient := createClientDS()

	v := strings.Index(UID, "@")
	z := strings.Index(UID, ".")
	if UID == "" || (v == -1 && z == -1) {
		//return ""
		//return fmt.Sprintf("%v/static/img/flags/ZZ.gif", getSchemeUrl(w,r))
		h := r.Header
		country := h.Get("X-AppEngine-Country")
		if country != "" {
			return fmt.Sprintf("%v/static/img/flags/%s.gif", getSchemeUrl(w,r), country)	
		} else {
			return fmt.Sprintf("%v/static/img/flags/ZZ.gif", getSchemeUrl(w,r))
		}
	}
	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	
	cKey := fmt.Sprintf("COUNTRY_PIC_%v", UID)
	COUNTRY_PIC = getStrMemcacheValueByKey(w,r,cKey)
 
	if COUNTRY_PIC == "" {
 
		dsKey := fmt.Sprintf("%s", UID)
		key := datastore.NameKey("TDSPROF", dsKey, nil)
		q := datastore.NewQuery("TDSPROF").Filter("__key__ =", key)
		//log.Panicf("[S0219]")
		profile := make([]TDSPROF, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Get()  [32566]")
		for _, p := range profile{
			//cache profile pic
			//uid := p.UID
			cKey := fmt.Sprintf("PROFILE_PIC_%v", p.UID)
			putStrToMemcacheWithoutExp(w,r,cKey,p.PICTURE)
			
			//cache country pic
			countryPic := fmt.Sprintf("%v/static/img/flags/%v.gif", getSchemeUrl(w,r), p.COUNTRY)
			cKey = fmt.Sprintf("COUNTRY_PIC_%v", p.UID)
			
			putStrToMemcacheWithoutExp(w,r,cKey,countryPic)
			COUNTRY_PIC = countryPic
			
			//cache ringtone
			ringtoneURL := fmt.Sprintf("%v", p.RINGTONE)
			cKey = fmt.Sprintf("RINGTONE_URL_%v", p.UID)
			putStrToMemcacheWithoutExp(w,r,cKey,ringtoneURL)
			
		}
	}
	
	j := strings.Index(UID, "@")
	if COUNTRY_PIC == "" && UID != "" && j == -1 {
		temp := strings.Split(UID, ".")
		if len(temp) > 0 {
			COUNTRY_PIC = fmt.Sprintf("%v/static/img/flags/%v.gif", getSchemeUrl(w,r), temp[0])
		}
	}
	
	if COUNTRY_PIC == "" {
		COUNTRY_PIC = fmt.Sprintf("%v/static/img/flags/ZZ.gif", getSchemeUrl(w,r))
	}
	return COUNTRY_PIC
}

//gets ringtone for the given user
func getRingtone(w http.ResponseWriter, r *http.Request, UID string) (RINGTONE_URL string) {
	cKey := fmt.Sprintf("RINGTONE_URL_%v", UID)
	RINGTONE_URL = getStrMemcacheValueByKey(w,r,cKey)
 
	if RINGTONE_URL == "" {
		RINGTONE_URL = fmt.Sprintf("%v%v", getSchemeUrl(w,r), DEFAULT_RING_TONE)
	}
	return RINGTONE_URL
}
 
//gets the sound preferences of the user
func getSoundPrefs(w http.ResponseWriter, r *http.Request, thisChan chan string, chanDone chan bool, UID string) {
	//c := appengine.NewContext(r)
	SOUND_PREF := ""
	
	cKey := fmt.Sprintf("SOUND_PREF_%v", UID)
	SOUND_PREF = getStrMemcacheValueByKey(w,r,cKey)
	//uid := UID
	if SOUND_PREF == "" {		
		cfgName := fmt.Sprintf("PERSONAL_JSWM_Sound_Enabled_%v", UID)
		SOUND_PREF, _ = getTDSCNFG(w,r,0,cfgName)
		putStrToMemcacheWithoutExp(w,r,cKey,SOUND_PREF)
	}
	
	if SOUND_PREF == "" {
		SOUND_PREF = "on"
	}
	//return SOUND_PREF
	thisChan <- SOUND_PREF
	chanDone <- true
}
//checks if there are new guestbook messages		
func checkNewMessages(w http.ResponseWriter, r *http.Request, UID string) (GUESTBOOK_NEWM string) {
	cKey := fmt.Sprintf("GUESTBOOK_NEWM_%s", UID)
	GUESTBOOK_NEWM = getStrMemcacheValueByKey(w,r,cKey)
				
	return GUESTBOOK_NEWM
}

//checks the number of guestbook messages 
func checkNumMessages(w http.ResponseWriter, r *http.Request, UID string) (GUESTBOOK_NUM_MSGS int) {
	//c := appengine.NewContext(r)
	//c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
	//GUESTBOOK_MSGS := ""
    cKey := fmt.Sprintf("GUESTBOOK_NUM_MSG_%s", UID)
    GUESTBOOK_NUM_MSG := getStrMemcacheValueByKey(w,r,cKey)
    //if GUESTBOOK_NUM_MSG != "" {
		//GUESTBOOK_NUM_MSG := fmt.Sprintf("%s", item.Value)
		if GUESTBOOK_NUM_MSG != "" {
			GUESTBOOK_NUM_MSGS = str2int(GUESTBOOK_NUM_MSG)
		} else {
			GUESTBOOK_NUM_MSGS = 0
		}
	//}
				
	return GUESTBOOK_NUM_MSGS
}
//handles the /admin-icons handler	
func adminIcons(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	
	updateUserActiveData(w, r, c, uid, "/admin-icons")
	
	uReferer := r.Referer()
	sl := strings.Split(uReferer, "/")
	currDesktop:= sl[len(sl)-1]
	
	if currDesktop == "" {
		currDesktop = "desktopN"
	}
	
	EDIT_ICON_FUNC := r.FormValue("EditIconFunc")
	//fmt.Fprintf(w, "EDIT_ICON_FUNC %s<br>", EDIT_ICON_FUNC)
	myIcon := r.FormValue("myIcon")
	r.ParseForm()
	
	switch EDIT_ICON_FUNC {
	
	case "EditIcon":
		//get Icon details from DS
		thisIconNum := str2int(myIcon)
		
		dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
		key := datastore.NameKey("TDSICONS", dsKey, nil)
		q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
		//log.Panicf("[S0221]")
		icons := make([]TDSICONS, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Get()  [32700]")
		for _, _ = range icons{
			if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
			  panic(err)
			}
			if err := iconEditTemplateA.Execute(w, icons); err != nil {
			  panic(err)
			}
			getCategories(w,r,uid)
			if err := iconEditTemplateB.Execute(w, icons); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			break
		}	
 
	case "SaveIcon":
		//fmt.Fprintf(w, "SaveIcon<br>")
		cSYS_VER := r.FormValue("SYS_VER")
		SYS_VER := str2int(cSYS_VER)
		//fmt.Fprintf(w, "SYS_VER %d<br>", SYS_VER)
		cICON_ID := r.FormValue("ICON_ID")
		ICON_ID := str2int(cICON_ID)
		//fmt.Fprintf(w, "ICON_ID %d<br>", ICON_ID)
		cURL_ID := r.FormValue("URL_ID")
		URL_ID := str2int(cURL_ID)
		//fmt.Fprintf(w, "URL_ID %d<br>", URL_ID)
		URL_ADD := r.FormValue("URL_ADD")
		//fmt.Fprintf(w, "URL_ADD %s<br>", URL_ADD)
		ICON_NAME := r.FormValue("ICON_NAME")
		//fmt.Fprintf(w, "ICON_NAME %s<br>", ICON_NAME)
		IMG_SRC := r.FormValue("IMG_SRC")
		//fmt.Fprintf(w, "IMG_SRC %s<br>", IMG_SRC)
		DESKTOP := r.FormValue("DESKTOP")
		//fmt.Fprintf(w, "DESKTOP %s<br>", DESKTOP)
		BLOB_KEY := r.FormValue("BLOB_KEY")
		//fmt.Fprintf(w, "BLOB_KEY %s<br>", BLOB_KEY)
		//check if to create a new icon id
		FL_NEW_ICON_ID := r.FormValue("addNewIconID")
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
		
			if (GROUP_ID == "GRP_ADMIN") || (DESKTOP == uid) {
				dsKey := fmt.Sprintf("ICON[%d]", ICON_ID)
				key := datastore.NameKey("TDSICONS", dsKey, nil)
				q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
				//log.Panicf("[S0222]")
				icons := make([]TDSICONS, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [32756]")
				for _, p := range icons{
				//share ICONS
	
					p.SYS_VER = SYS_VER
					if FL_NEW_ICON_ID == "on" {
						q = datastore.NewQuery("TDSICONS").Order("-ICON_ID").Limit(1)
						//log.Panicf("[S0223]")
						icons2 := make([]TDSICONS, 0, 1)
						if _, err := datastoreClient.GetAll(c,q, &icons2); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [32768]")
						for _, x := range icons2{
							ICON_ID = x.ICON_ID + 1
						}
					}
					p.ICON_ID = ICON_ID
					p.URL_ID = URL_ID
					p.URL_ADD = URL_ADD
					p.ICON_NAME = ICON_NAME
					p.IMG_SRC = IMG_SRC
					p.DESKTOP = DESKTOP
					p.BLOB_KEY = BLOB_KEY
					//fmt.Fprintf(w, "Put datastore %s<br>", ICON_ID)
					thisKey := fmt.Sprintf("ICON[%d]", ICON_ID)
					//fmt.Fprintf(w, "DEBUG28>> .<br>")
					key := datastore.NameKey("TDSICONS", thisKey, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [32787]")
					//log.Panicf("[S0224]")
					
					//insert/update icon into search idx
					thisIdxKey := fmt.Sprintf("TDSICONS-%d", ICON_ID)
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					tstamp := getTimestamp()
					//if err != nil {
					//	panic(err)
					slideIdx := &IDX_TDSICONS{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"ICONS",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSICONS",	
						//DESKTOP: 			uid,
						DESKTOP: 			DESKTOP,
						FL_SHARED:			"Y",
						DOC_STAT:			"ULAPPH Only",
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			ICON_NAME,	
						DOC_DESC: 			ICON_NAME,
						DOC_AUTHOR:         uid,
						DOC_CONTENT_TEXT: 	ICON_NAME,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						CONTENT_URL: 		URL_ADD,
						IMG_URL: 			IMG_SRC,
						DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
					}
                    
					putSearchIndexI(w,r,"IDX_TDSICONS",thisIdxKey,slideIdx)
					
					cKey := fmt.Sprintf("DOCKS_LIST_%v_%s", "desktop0", uid)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					//request update of cache
					time.AfterFunc(5*time.Second, func() {
                        laterSettingsIcons(c, "")
                    })
					//clear icons cache
					memcacheDelete(w,r, "ALL_ICONS")
	
					msgDtl := "[U00050] SUCCESS: Icon details have been saved"
					msgTyp := "success"
					msgURL := "/"
					action := fmt.Sprintf("You may now close this tab & go back to previous tab.")
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					break
				}
				
			} else {	
				msgDtl := "[U00051] ERROR: Icon(s) cannot be edited because of your account type."
				msgTyp := "error"
				msgURL := "/"
				action := fmt.Sprintf("You may now close this tab & go back to previous tab.")
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		
		}
	
	
	default:
	
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
		
			if GROUP_ID == "GRP_ADMIN" {
				
				RINGTONE_URL := getRingtone(w, r, uid)
				
				TEMPDATA := TEMPSTRUCT{
					STR_FILLER1: uid,
					STR_FILLER2: RINGTONE_URL,
					STR_FILLER3: "Admin Icons",
				}
				
				if err := genericTableDispHdrNC.Execute(w, &TEMPDATA); err != nil {
					 panic(err)
				}
 
				//display icons
				if err := iconsSettingsTemplateHeader2ICONS.Execute(w, uid); err != nil {
					 panic(err)
				}
				
				q := datastore.NewQuery("TDSICONS").Order("ICON_ID")
				//log.Panicf("[S0225]")
				recCount,_ := datastoreClient.Count(c,q)
				icons := make([]TDSICONS, 0, recCount)
				if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [32891]")
				if err := iconsSettingsTemplateTableEdit.Execute(w, icons); err != nil {
					 panic(err)
				}
 
				if err := iconsSettingsTemplateTableFooter.Execute(w, icons); err != nil {
					 panic(err)
				}
 
				if err := iconsSettingsTemplateHeader2ICONS.Execute(w, uid); err != nil {
					 panic(err)
				}
				//blobstore - upload custom icons
				uploadURL := "/upload"
				//w.Header().Set("Content-Type", "text/html")
				err := rootTemplate.Execute(w, uploadURL)
				if err != nil {
						////log.Panicf("%v", err)
				}
				getCategories(w,r,uid)
				err = rootTemplate2.Execute(w, currDesktop)
				if err != nil {
						////log.Panicf("%v", err)
				}
				//blobstore end
				if err := infoDBTemplateTableFooter.Execute(w, icons); err != nil {
					 panic(err)
				}
				
			} else {
				//if err := changeSettingsNotAllowed.Execute(w, ""); err != nil {
				//	 panic(err)
				//}
				msgDtl := "[U00040] ERROR: ADMIN-ICONS IS NOT ALLOWED FOR YOUR ACCOUNT TYPE"
				msgTyp := "error"
				msgURL := "/?q=home"
				action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		
		}
		
	}
 
}
//handles caching of desktop icons 
func TASK_MEMCACHER_settingsAllIcons(w http.ResponseWriter, r *http.Request) {
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}
	//uid := ""
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	var buffer3 bytes.Buffer
	q := datastore.NewQuery("TDSICONS").Order("ICON_ID")
	//log.Panicf("[S0226]")
	recCount,_ := datastoreClient.Count(c,q)
 
	icons := make([]TDSICONS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
		//check overquota error
		//checkError(w,r,"",err,"CHK_OQ")
		 panic(err)
	}
	//log.Printf("datastoreClient.Get()  [32962]")
	ictr :=0
	for _, p := range icons {
		//if (strings.HasPrefix(p.DESKTOP, "desktop")) || p.DESKTOP == "all"  {	
			ictr++
			//fmt.Fprintf(w, "loop: %d", ictr)
			buffer3.WriteString(fmt.Sprintf("<tr>"))
			buffer3.WriteString(fmt.Sprintf("<td class=\"cbc\">"))
			//buffer3.WriteString(fmt.Sprintf("<a href=\"/admin-icons?EditIconFunc=EditIcon&myIcon=%d\">Edit</a>", p.ICON_ID))
			iconID := fmt.Sprintf("icon%d", p.ICON_ID)
			buffer3.WriteString(fmt.Sprintf("<input type=\"checkbox\" name=\"icons\" id=\"%s\"/>", iconID))
			buffer3.WriteString(fmt.Sprintf("</td>"))
			buffer3.WriteString(fmt.Sprintf("<td class=\"id\">"))
			buffer3.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=D\" target=%v> ", p.URL_ADD, p.ICON_NAME, p.ICON_ID, p.ICON_ID))
			buffer3.WriteString(fmt.Sprintf("<img id=\"icon%vsrc\" src=\"%s\" title=\"%s\" width=35 height=35/>", p.ICON_ID, p.IMG_SRC, p.ICON_NAME))
			buffer3.WriteString(fmt.Sprintf("</a>"))
			buffer3.WriteString(fmt.Sprintf("</td>"))
			buffer3.WriteString(fmt.Sprintf("<td data-order=\"%d\">", p.ICON_ID))
			buffer3.WriteString(fmt.Sprintf("%d", p.ICON_ID))
			buffer3.WriteString(fmt.Sprintf("</td>"))
			buffer3.WriteString(fmt.Sprintf("<td data-order=\"%s\">", p.ICON_NAME))
			buffer3.WriteString(fmt.Sprintf("%s", p.ICON_NAME))
            buffer3.WriteString(fmt.Sprintf("<br><a href=\"/admin-icons?EditIconFunc=EditIcon&myIcon=%v\">Edit</a> | <a href=\"/wall?WALL_FUNC=ICON_COPY&ICON_ID=%v&wall_key=%v\">Wall</a>", p.ICON_ID, p.ICON_ID, CMD_GEN_KEY))
			buffer3.WriteString(fmt.Sprintf("</td>"))
			buffer3.WriteString(fmt.Sprintf("<td data-search=\"%s\">", p.URL_ADD))
			buffer3.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=D\" target=%v> ", p.URL_ADD, p.ICON_NAME, p.ICON_ID, p.ICON_ID))
			buffer3.WriteString(fmt.Sprintf("%s", p.URL_ADD))
			buffer3.WriteString(fmt.Sprintf("</a>"))
			buffer3.WriteString(fmt.Sprintf("</td>"))
			buffer3.WriteString(fmt.Sprintf("<td data-order=\"%d\">", p.URL_ID))
			buffer3.WriteString(fmt.Sprintf("%d", p.URL_ID))
			buffer3.WriteString(fmt.Sprintf("</td>"))
			buffer3.WriteString(fmt.Sprintf("<td data-order=\"%s\">", p.DESKTOP))
			buffer3.WriteString(fmt.Sprintf("%s", p.DESKTOP))
			buffer3.WriteString(fmt.Sprintf("</td>"))
			buffer3.WriteString(fmt.Sprintf("<td>"))
			buffer3.WriteString(fmt.Sprintf("%s", p.IMG_SRC))
			buffer3.WriteString(fmt.Sprintf("</td>"))
			buffer3.WriteString(fmt.Sprintf("</tr>"))
		//}
	}
	iconsHTML := buffer3.String()
	cKey := fmt.Sprintf("TASK_MEMCACHER_SettingsAllIcons")
	putStrToMemcacheWithoutExp(w,r,cKey,iconsHTML)
	//fmt.Fprintf(w, "TASK_MEMCACHER_SettingsAllIcons:<br> %s<br>", iconsHTML)
	fmt.Fprintf(w, "%v", iconsHTML)
}

//handles caching of contents and icons 
func TASK_MEMCACHER_contentsAll_Icons(w http.ResponseWriter, r *http.Request, TARGET string) {
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	var buffer3 bytes.Buffer
    //D0086
	//uid := ""
    datastoreClient := createClientDS()
	switch TARGET {
	
		case "":
			cKey := fmt.Sprintf("CACHE_TDSICONS_CONTENTS_ALL_TILES_%v", "desktop0")
			q := datastore.NewQuery("TDSICONS").Limit(100)
			//log.Panicf("[S0227]")
			icons := make([]TDSICONS, 0, 100)
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				//check overquota error
				//checkError(w,r,"",err,"CHK_OQ")
				 panic(err)
			}
			//log.Printf("datastoreClient.Get()  [33031]")
			for _, p := range icons{
				//if p.FL_SHARED == "Y" {
					buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"contsall\">"))
					buffer3.WriteString(fmt.Sprintf(""))
					buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
					buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-website.png\" class=\"item_image_home\" title=\"all1\" width=\"16\">"))
					buffer3.WriteString(fmt.Sprintf("		<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=T\" class=\"creator_name\">%v</a>", p.URL_ADD, p.ICON_NAME, p.ICON_ID, p.ICON_NAME))
					buffer3.WriteString(fmt.Sprintf("			  </div>"))
					buffer3.WriteString(fmt.Sprintf(""))
					buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
					buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
					buffer3.WriteString(fmt.Sprintf("	  </ul>"))
					buffer3.WriteString(fmt.Sprintf("	</div>"))
					buffer3.WriteString(fmt.Sprintf("	<article>"))
					buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.IMG_SRC))
					buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
					buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
					buffer3.WriteString(fmt.Sprintf("		  WEBSITE - %v </h3>", p.ICON_NAME))
					buffer3.WriteString(fmt.Sprintf("	  </div>"))
					buffer3.WriteString(fmt.Sprintf(""))
					buffer3.WriteString(fmt.Sprintf("		<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=T\" class=\"creator_name\">%v</a>", p.URL_ADD, p.ICON_NAME, p.ICON_ID, p.ICON_NAME))
					buffer3.WriteString(fmt.Sprintf("	</article>"))
					buffer3.WriteString(fmt.Sprintf("</div>"))
				//}
			}
 
			contentsHTML := buffer3.String()
			//cache contentsAll
			//cKey := fmt.Sprintf("CACHE_TDSICONS_CONTENTS_ALL_TILES")
			putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
			//fmt.Fprintf(w, "%v: %v<br>", cKey, contentsHTML)
			fmt.Fprintf(w, "%v<br>", contentsHTML)
	default:
			q := datastore.NewQuery("TDSICONS").Filter("DESKTOP =", TARGET).Limit(100)
			//log.Panicf("[S0228]")
			icons := make([]TDSICONS, 0, 100)
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				 panic(err)
			}
			//log.Printf("datastoreClient.Get()  [33071]")
			for _, p := range icons{
				//if p.FL_SHARED == "Y" {
				buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"contsdesk\">"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
				buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/icon-website.png\" class=\"item_image_home\" title=\"all2\" width=\"16\">"))
				buffer3.WriteString(fmt.Sprintf("		<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=T\" class=\"creator_name\">%v</a>", p.URL_ADD, p.ICON_NAME, p.ICON_ID, p.ICON_NAME))
				buffer3.WriteString(fmt.Sprintf("			  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
				buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
				buffer3.WriteString(fmt.Sprintf("	  </ul>"))
				buffer3.WriteString(fmt.Sprintf("	</div>"))
				buffer3.WriteString(fmt.Sprintf("	<article>"))
				buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.IMG_SRC))
				buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
				buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
				buffer3.WriteString(fmt.Sprintf("		  WEBSITE - %v </h3>", p.ICON_NAME))
				buffer3.WriteString(fmt.Sprintf("	  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("		<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=T\" class=\"creator_name\">%v</a>", p.URL_ADD, p.ICON_NAME, p.ICON_ID, p.ICON_NAME))
				buffer3.WriteString(fmt.Sprintf("	</article>"))
				buffer3.WriteString(fmt.Sprintf("</div>"))
				//}
			}
 
			contentsHTML := buffer3.String()
			//cache contentsAll
			cKey := fmt.Sprintf("CACHE_TDSICONS_CONTENTS_ALL_TILES_%v", TARGET)
			putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
			//fmt.Fprintf(w, "%v: %v<br>", cKey, contentsHTML)	
			fmt.Fprintf(w, "%v<br>", contentsHTML)
	}
}
 
//trim string (given a string length)
func trimString (s string, n int) (s2 string) {
 
	if len(s) > n {
		s2 = s[0:n]
	} else {
		s2 = s[0:len(s)]
	}
	return s2
}
//cached fetch url
//after executing URLFetcher it will save the results into memcache
func exec_FetchUrl(w http.ResponseWriter, r *http.Request , uid, fURL string) {
    //c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
	cKeyL := fmt.Sprintf("EXEC_FETCH_URL_%v", fURL)
    bodyBytes := []byte("")
    bodyBytes = getBytMemcacheValueByKey(w,r,cKeyL)
	if bodyBytes == nil || len(bodyBytes) < 50 {
		//client := urlfetch.Client(c)
		if err := r.ParseForm(); err != nil {
			panic(err)
		}
		resp, err := http.Get(fURL)
		if err != nil {
			//panic(err)
		} else {
			bodyBytes, _ = ioutil.ReadAll(resp.Body)
			putBytesToMemcacheWithExp(w,r,cKeyL,bodyBytes,GEN_CONTENT_EXPIRES)
		}
	}
	bodyString := string(bodyBytes)
	fmt.Fprintf(w, "%v", bodyString)
}
//cached fetch url and output to channel
//after executing URLFetch it will send result to a go channel
func exec_FetchUrlChan(w http.ResponseWriter, r *http.Request , thisChan chan []byte, fURL string) {
    //c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
	cKeyL := fmt.Sprintf("EXEC_FETCH_URL_%v", fURL)
    bodyBytes := []byte("")
    bodyBytes = getBytMemcacheValueByKey(w,r,cKeyL)
	//uid := ""
	if bodyBytes == nil || len(bodyBytes) < 50 {
		//client := urlfetch.Client(c)
		if err := r.ParseForm(); err != nil {
			panic(err)
		}
		resp, err := http.Get(fURL)
		if err != nil {
			//panic(err)
		} else {
			bodyBytes, _ = ioutil.ReadAll(resp.Body)
			putBytesToMemcacheWithExp(w,r,cKeyL,bodyBytes,GEN_CONTENT_EXPIRES)
		}
	}
	
	//bodyString := string(bodyBytes)
	//fmt.Fprintf(w, "%v", bodyString)
	thisChan <- bodyBytes
	return
}
//executes URL Fetch and then returns the results as string 
func fetchURL(w http.ResponseWriter, r *http.Request , fURL string) string {
    //log.Printf("fetchURL()")
    if fURL == "" {
        return ""
    }
    //log.Printf("fetchURL()")
    //log.Printf("fURL: %v", fURL)
    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
    req, err := http.NewRequest("GET", fURL, nil)
    if err != nil {
        //log.Printf("ERROR: Request error: %v", err)
    }
    //log.Printf("req: %v", req)
    values := url.Values{"test":{"1"},}
    thisLength := strconv.Itoa(len(values))
    req.Header.Set("Content-Length", thisLength)
    req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
    response, err := http.DefaultClient.Do(req.WithContext(ctx))
    if err != nil {
            log.Fatalf("HTTP request failed: %v", err)
    }
    defer response.Body.Close()
    //log.Printf("response: %v", response)
    bodyBytes, err := ioutil.ReadAll(response.Body)
    bodyString := string(bodyBytes)
    //log.Printf("len(bodyString): %v", len(bodyString))
    //log.Printf("bodyString: %v", bodyString)
    return bodyString
}

//executes URL Fetch and then returns the results as bytes
func fetchURLB(w http.ResponseWriter, r *http.Request , fURL string) (bodyBytes []byte, err error) {
    //log.Printf("fetchURLB()")
    if fURL == "" {
        return nil, fmt.Errorf("empty url")
    }
    //log.Printf("fetchURLB()")
    //log.Printf("fURL: %v", fURL)
    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
    req, err := http.NewRequest("GET", fURL, nil)
    if err != nil {
        //log.Printf("ERROR: Request error: %v", err)
    }
    //log.Printf("req: %v", req)
    values := url.Values{"test":{"1"},}
    thisLength := strconv.Itoa(len(values))
    req.Header.Set("Content-Length", thisLength)
    req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
    //response, err := client.Do(req)
    response, err := http.DefaultClient.Do(req.WithContext(ctx))
    if err != nil {
            log.Fatalf("HTTP request failed: %v", err)
    }
    defer response.Body.Close()
    //log.Printf("response: %v", response)
    bodyBytes, err = ioutil.ReadAll(response.Body)
    bodyString := string(bodyBytes)
    //log.Printf("len(bodyString): %v", len(bodyString))
    //log.Printf("bodyString: %v", bodyString)
	ulapphDebug(w,r, "info", fmt.Sprintf("len(bodyString): %v", len(bodyString)))
	return bodyBytes, err
}
//executes URL Fetch from ULAPPH Cloud Desktops built-in cron
//Every defined cron will be executed and perform the actions based on the configuration 
func TASK_URL_FETCHER(w http.ResponseWriter, r *http.Request , tURL, UID, FREQ string) {
	//log.Printf("TASK_URL_FETCHER()")
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	otURL := tURL
	SPL := strings.Split(tURL, "|")
	FL_CRON := false
	if len(SPL) < 3 {
		if strings.Index(SPL[0], "EVERY_") != -1 || strings.Index(SPL[0], "NOW") != -1 {
			//log.Printf("FL_CRON = true")
			FL_CRON = true
		} else {
			//log.Printf("return: not cron")
			return
		}
	}
	//if len(SPL) == 3 {
	if strings.TrimSpace(FREQ) == "NOW" && strings.Index(SPL[0], "NOW") != -1 {
		switch {
			case SPL[2] == "OPEN_WINDOW":
				//log.Printf("case OPEN_WINDOW")
				data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_WINDOW@888@%v", SPL[1])
				sendChannelMessage(w,r,UID,data)	
				dummyCmd(w,r,UID)
				return
		}
	}
	//EXACTLY timeslot
	//Being triggered by "EVERY_5_MINUTES" cron
	//D0108
	if strings.TrimSpace(FREQ) == "EVERY_5_MINUTES" && strings.Index(SPL[0], "EXACTLY_") != -1 {
		//log.Printf("Processing EXACTLY timeslot...")
		//EXACTLY_3:15_Asia/Manila|https://www.ulapph.com/editor?EDIT_FUNC=TEXT-CSS&CSS-TYPE=.3d&CSS-ALIGN=center&EDIT_MODE=NEW-CSS&TEXT=Hello%20Cron2!|OPEN_WINDOW||
		//Parse time/zone
		//log.Printf("time: %v", SPL[0])
		SPT := strings.Split(SPL[0], "_");
		cTime := SPT[1] //3:15
		cZone := SPT[2] //Asia/Manila
		//If the time has elapsed by at >=5mins
		loc, _ := time.LoadLocation(cZone)
		//fmt.Printf("Current Time: %s\n", now.In(loc))
		now := time.Now()
		cTimeNow := now.In(loc)
		//2021-04-12 20:28:03.514986523 +0800 PST
		//log.Printf("cTimeNow: %v", cTimeNow)
		SPN := strings.Split(fmt.Sprintf("%v",cTimeNow), " ")
		cTimeCron := fmt.Sprintf("%v %v:00.999999 %v %v", SPN[0], cTime, SPN[2], SPN[3])
		//2021-04-12 20:30:00.999999 +0800 PST
		//log.Printf("cTimeCron: %v", cTimeCron)
		//2021-04-12 03:25:41.705858 +0400 +04
		//2006-01-02 15:04:05.999999 +0700 +00
		//rt1, _ := time.Parse("2006-01-02 15:04:05.999999 +0700 +00", cTimeNow)
		rt1 := cTimeNow
		//a_rt1 := fmt.Sprintf("%v", rt1.Format("20060102150405"))
		////log.Printf("a_rt1: %v", a_rt1)
		//log.Printf("rt1: %v", rt1)
		//desired time
		//2021-04-12 20:30:00.999999 +0800 PST
		//gct, _ := time.Parse("2006-01-02 15:04:05 +0000 UTC", fmt.Sprintf("%v",p.Updated))
		rt2, _ := time.Parse("2006-01-02 15:04:05.999999 -0700 MST", cTimeCron)
		//b_rt2 := fmt.Sprintf("%v", rt2.Format("20060102150405"))
		////log.Printf("b_rt2: %v", b_rt2)
		//log.Printf("rt2: %v", rt2)
		//diffSecs := subtractTime(a_rt1, b_rt2)
		diffSecs := subtractTime(rt1, rt2)
		//log.Printf("diffSecs: %v secs", diffSecs)
		//5mins is 300s
		if diffSecs <= float64(300) && diffSecs > float64(0) {
			//log.Printf("Time to execute now...")
			switch {
				case SPL[2] == "OPEN_WINDOW":
					////log.Printf("case OPEN_WINDOW")
					data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_WINDOW@888@%v", SPL[1])
					//log.Printf("data: %v", data)
					sendChannelMessage(w,r,UID,data)	
					dummyCmd(w,r,UID)
					return
			}
		}
	}	
	//}
	//sample line
	//freq | url | logic | value | message
	tFREQ := SPL[0]
	//log.Printf("tFREQ: %v", tFREQ)
	//log.Printf("FREQ: %v", FREQ)
	if strings.TrimSpace(tFREQ) != strings.TrimSpace(FREQ) {
		//log.Printf("return: not frequency")
		return
	}
	tURL = SPL[1]
	//log.Printf("tURL: %v", tURL)
	if FL_CRON == true {
        //queue first
        time.AfterFunc(5*time.Second, func() {
			//log.Printf("calling laterUrlFetch()")
		    laterUrlFetch(c, tURL)
        })
        return
	}
		
	tLogic := SPL[2]
	tValue := SPL[3]
	tMsg := SPL[4]
	//log.Printf("tLogic: %v", tLogic)
	//log.Printf("tValue: %v", tValue)
	//log.Printf("tMsg: %v", tMsg)
    u, err := url.Parse(tURL)
    if err != nil {
		msgDtl3 := fmt.Sprintf("ERROR: URL Fetch failed >>> ERROR (url.Parse): %v <a href=\"%v\">%s</a> ENTRY: %v ", err, tURL, tURL, otURL)
		//log.Printf("msgDtl3: %v", msgDtl3)
		time.AfterFunc(5*time.Second, func() {
            laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
        })
        return		
    }
	URL_FETCH_CHG_THRES := 100
    path := u.Path
    uriSegments := strings.Split(path, "/")
	thisStr := u.Host
	for i := 0; i < len(uriSegments); i++ {
		thisStr = fmt.Sprintf("%v%v", thisStr, uriSegments[i])
	}
	//client := urlfetch.Client(c)
	if err := r.ParseForm(); err != nil {
		//panic(err)
		msgDtl3 := fmt.Sprintf("ERROR: URL Fetch failed >>> ERROR (urlfetch.Client): %v <a href=\"%v\">%s</a> ENTRY: %v ", err, tURL, tURL, otURL)
		//log.Printf("msgDtl3: %v", msgDtl3)
		time.AfterFunc(5*time.Second, func() {
            laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
        })
        return	
	}
	cKeyL := fmt.Sprintf("LEN_URLFETCH_%s", thisStr)
	//log.Printf("cKeyL: %v", cKeyL)
	resp, err := http.Get(tURL)
	if err != nil {
		msgDtl3 := fmt.Sprintf("ERROR: URL Fetch failed >>> ERROR (client.Get): %v <a href=\"%v\">%s</a> ENTRY: %v ", err, tURL, tURL, otURL)
		//log.Printf("msgDtl3: %v", msgDtl3)
		time.AfterFunc(5*time.Second, func() {
            laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
        })
        return
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	bodyString := string(bodyBytes)
	//log.Printf("bodyString: %v", bodyString)
	respStatus := resp.Status
	//get old bodyBytes
	URLFETCH_CACHE_LEN := ""
	LEN_UF_CACHE := 0
	URLFETCH_CACHE_LEN = getStrMemcacheValueByKey(w,r,cKeyL)
	if URLFETCH_CACHE_LEN != "" {
		LEN_UF_CACHE = str2int(URLFETCH_CACHE_LEN)
	}
	//log.Printf("tLogic: %v", tLogic)
	switch tLogic {
		
		case "POST_RESP_BODY":
			//get url response
			//respstr := fetchURL(w,r,tURL)
			respstr := bodyString
			data, _ := json.Marshal("")
			if tValue != "true" {
				payload := thingPayload{
					Data:  respstr,
				}
				data, _ = json.Marshal(payload)
			} else {
				//data, _ = json.Marshal(respstr)
				data = bodyBytes
			}
			//post resp to url
			body := bytes.NewBuffer(data)
			r, _ := http.NewRequest("POST", tMsg, body)
			thisLength := strconv.Itoa(len(data))
			r.Header.Set("Content-Length", thisLength)
			r.Header.Set("Content-Type", "application/json")
            r.Header.Set("Authorization", "")
            client := &http.Client{}
			_, _ = client.Do(r)
			//return
		case "POST_RESP_STAT":
			//get url response status
			payload := thingPayload{
				Data:  respStatus,
			}
			data, _ := json.Marshal(payload)
			
			//post resp status to url
			body := bytes.NewBuffer(data)
			r, _ := http.NewRequest("POST", tMsg, body)
			thisLength := strconv.Itoa(len(data))
			r.Header.Set("Content-Length", thisLength)
			r.Header.Set("Content-Type", "application/json")
            r.Header.Set("Authorization", "")
            client := &http.Client{}
			_, _ = client.Do(r)
			//return
		case "NOTIF_RESP_BODY":
			if len(bodyString) > 0 && len(bodyString) < 500 {
				msgDtl3 := fmt.Sprintf("Website response received! %v! %s [%v]", tMsg, tURL, bodyString)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
                })
            }
		case "NOTIF_ON_CHANGE":
			URL_FETCH_CHG_THRES2 := str2int(tValue)
			if URL_FETCH_CHG_THRES2 <= 0 {
				URL_FETCH_CHG_THRES2 = URL_FETCH_CHG_THRES
			}
			//compare
			diffVal := len(bodyString) - LEN_UF_CACHE
			if LEN_UF_CACHE > 0 && (diffVal > URL_FETCH_CHG_THRES2 || diffVal < -URL_FETCH_CHG_THRES2) {
				msgDtl3 := fmt.Sprintf("Website updates! %v! %s", tMsg, tURL)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
                })
            }
		case "NOTIF_ON_NO_CHANGE":
			//compare
			//diffVal := len(bodyString) - len(URLFETCH_CACHE)
			diffVal := len(bodyString) - LEN_UF_CACHE
			if diffVal == 0 {
				msgDtl3 := fmt.Sprintf("Website stopped updates! %v %s", tMsg, tURL)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
                })
			}
		case "NOTIF_ON_RESP_NOT_EQUAL_TO":
			//compare
			bodyString = strings.Replace(bodyString, "\"", "", -1)
			tValue = strings.Replace(tValue, "\"", "", -1)
			if strings.TrimSpace(bodyString) != strings.TrimSpace(tValue) {
				msgDtl3 := fmt.Sprintf("Response not equal for %v %s CURR: %v EXP: %v", tMsg, tURL, bodyString, tValue)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
                })
			}
		case "NOTIF_ON_RESP_IS_EQUAL_TO":
			//compare
			bodyString = strings.Replace(bodyString, "\"", "", -1)
			tValue = strings.Replace(tValue, "\"", "", -1)
			if strings.TrimSpace(bodyString) == strings.TrimSpace(tValue) {
				msgDtl3 := fmt.Sprintf("Response is now equal for %v %s CURR: %v EXP: %v", tMsg, tURL, bodyString, tValue)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
                })
			}
		//scraper logic follows
		case "NOTIF_ON_CHANGE&&ALERTIFY_ON_GREP_CONTAINS":
			FL_CONT_CHANGED := false
			//diffVal := len(bodyString) - len(URLFETCH_CACHE)
			diffVal := len(bodyString) - LEN_UF_CACHE
			URL_FETCH_CHG_THRES2 := str2int(tValue)
			if URL_FETCH_CHG_THRES2 <= 0 {
				URL_FETCH_CHG_THRES2 = URL_FETCH_CHG_THRES
			}
			if diffVal > URL_FETCH_CHG_THRES2 || diffVal < -URL_FETCH_CHG_THRES2 {
				FL_CONT_CHANGED = true
			}
			if FL_CONT_CHANGED == true {
				//html2text
				text, err := html2text.FromString(bodyString)
				if err != nil {
					panic(err)
				}
				//scan text & return only lines with text being searched
				gt := grepText(w,r,text,tValue)
				if gt != "" {
					first500 := gt[0:500]
					msgDtl3 := fmt.Sprintf("%v, FROM: Website changed with specific topic! %v LINK: %s RESULTS: %v", first500, tMsg, tURL, gt)
					time.AfterFunc(5*time.Second, func() {
                        laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
                    })
				}
			}
			
		//#URL|NOTIF_ON_CHANGE&&BROADCAST_SITE_ONLY|100|New updates!  >>>
		case "NOTIF_ON_CHANGE&&BROADCAST_SITE_ONLY":
			URL_FETCH_CHG_THRES2 := str2int(tValue)
			if URL_FETCH_CHG_THRES2 <= 0 {
				URL_FETCH_CHG_THRES2 = URL_FETCH_CHG_THRES
			}
			//compare
			diffVal := len(bodyString) - LEN_UF_CACHE
			if LEN_UF_CACHE > 0 && (diffVal > URL_FETCH_CHG_THRES2 || diffVal < -URL_FETCH_CHG_THRES2) {
				msgDtl3 := fmt.Sprintf("Website updates! %v! %s", tMsg, tURL)
				sysReq := fmt.Sprintf("/guestbook?GB_FUNC=SIGN_ALL&METHOD=GB&content=%v&uid=%v", msgDtl3, ADMMAIL)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return		
			}
			
		//#URL|NOTIF_ON_CHANGE&&BROADCAST_ALL_SITES|100|New updates!  >>>
		case "NOTIF_ON_CHANGE&&BROADCAST_ALL_SITES":
			URL_FETCH_CHG_THRES2 := str2int(tValue)
			if URL_FETCH_CHG_THRES2 <= 0 {
				URL_FETCH_CHG_THRES2 = URL_FETCH_CHG_THRES
			}
			//compare
			diffVal := len(bodyString) - LEN_UF_CACHE
			if LEN_UF_CACHE > 0 && (diffVal > URL_FETCH_CHG_THRES2 || diffVal < -URL_FETCH_CHG_THRES2) {
				msgDtl3 := fmt.Sprintf("Website updates! %v! %s", tMsg, tURL)
				sysReq := fmt.Sprintf("/guestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v", msgDtl3, ADMMAIL)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return	
			}
 
		case "ALERTIFY_ON_GREP_CONTAINS":
			text, err := html2text.FromString(bodyString)
			if err != nil {
				panic(err)
			}
			gt := grepText(w,r,text,tValue)
			if gt != "" {
				first500 := gt[0:500]
				msgDtl3 := fmt.Sprintf("%v, FROM: Website has topic you are looking for! %v LINK: %s RESULTS: %v", first500, tMsg, tURL, gt)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", UID, msgDtl3, ADMMAIL)
                })
			}
		case "OPEN_WINDOW":
			//log.Printf("case OPEN_WINDOW")
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_WINDOW@888@%v", tURL)
			sendChannelMessage(w,r,UID,data)	
			dummyCmd(w,r,UID)
			return
			
		default:
			//log.Printf("case default...")
	}
	
	//store length only
	//uid := UID
	putStrToMemcacheWithoutExp(w,r,cKeyL,fmt.Sprintf("%v", len(bodyString)))
	fmt.Fprintf(w, "URL Fetching completed for... %v<br> Status: %v<br>", tURL, tLogic)
	//log.Printf("URL Fetching completed for... %v<br> Status: %v<br>", tURL, tLogic)
 
	return
	
}
 
//broadcast content updates
//if there are updates on the slides, it will be broadcasted
func sendBroadcastsUpdSlide(w http.ResponseWriter, r *http.Request, uid, DOC_STAT, SID, TITLE, DESC, TAGS, CATEGORY string) {
	
	msgDtl3 := ""
 
	SPL := strings.Split(SID,"-")
	//TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	
	reqStr := fmt.Sprintf("%vslides?TYPE=SLIDE&DOC_ID=%v&SID=TDSSLIDE-%v", domRefMatchS, DOC_ID, DOC_ID)
	reqStr = ShortenUrl(w,r,reqStr)
	msgDtl3 = fmt.Sprintf("Check out an updated slide about %v >>> <br><a href=\"%v\" target=\"%v\">%v <br><img src=\"%v\" with=100 height=60></a> [%v] in %v %v.", TITLE, reqStr, SID, TITLE, TAGS, DESC, CATEGORY, reqStr)
	msgDtl3 = url.QueryEscape(msgDtl3)
	
	switch DOC_STAT {
		case "ULAPPH Only":
			sysReq := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=GB&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, uid, getGeoString(w,r))
			//http.Redirect(w, r, sysReq, http.StatusFound)
			_ = fetchURL(w,r,sysReq)
			return
		
		case "Worldwide":
			sysReq := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, uid, getGeoString(w,r))
			//http.Redirect(w, r, sysReq, http.StatusFound)
			_ = fetchURL(w,r,sysReq)
			return			
		
	}
 
}

//broadcast content updates
//if there are updates on the articles, it will be broadcasted 
func sendBroadcastsUpdArticle(w http.ResponseWriter, r *http.Request, uid, DOC_STAT, SID, TITLE, DESC, TAGS, CATEGORY string) {
	
	msgDtl3 := ""
 
	SPL := strings.Split(SID,"-")
	//TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
 
	reqStr := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v", domRefMatchS, DOC_ID, DOC_ID)
	reqStr = ShortenUrl(w,r,reqStr)
	msgDtl3 = fmt.Sprintf("Check out an updated article about %v >>> <br><a href=\"%v\" target=\"%v\">%v <br><img src=\"%v\" with=100 height=60></a> [%v] in %v %v.", TITLE, reqStr, SID, TITLE, TAGS, DESC, CATEGORY, reqStr)
	msgDtl3 = url.QueryEscape(msgDtl3)
	
	switch DOC_STAT {
		case "ULAPPH Only":
			sysReq := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=GB&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, uid, getGeoString(w,r))
			//http.Redirect(w, r, sysReq, http.StatusFound)
			_ = fetchURL(w,r,sysReq)
			return
		
		case "Worldwide":
			sysReq := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, uid, getGeoString(w,r))
			//http.Redirect(w, r, sysReq, http.StatusFound)
			_ = fetchURL(w,r,sysReq)
			return			
		
	}
 
}

//performs a grep-like operation on a string of text 
func grepText(w http.ResponseWriter, r *http.Request, text, keyword string) string {
	scanner := bufio.NewScanner(strings.NewReader(text))
	var buf bytes.Buffer
	for scanner.Scan() {
		if keyword != "" {
			if strings.Index(scanner.Text(), keyword) != -1 || strings.Index(strings.ToLower(scanner.Text()), strings.ToLower(keyword)) != -1 {
				buf.WriteString(fmt.Sprintf("%v", scanner.Text()))
			}
		} else {
			buf.WriteString(fmt.Sprintf("%v", scanner.Text()))
		}
	}
	return buf.String()
}

//handles the /ulapph-router handler which does a lot of routing
//used usually for routing taskqueues and other special system operations 
func ulapphRouter (w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	RTR_FUNC := r.FormValue("RTR_FUNC")
	_, uid := checkSession(w,r)
	switch RTR_FUNC {
		case "NEW_INSTALL":
			//newconfigtemplate
			//u := user.Current(c)
			//_, uid := checkSession(w,r)
			if uid != ADMMAIL {
				fmt.Fprintf(w, "Unauthorized operation! uid (%v) not equal to admin mail (%v)", uid, ADMMAIL)
				return
			}

			confirm := r.FormValue("CONFIRM")
			if confirm == "Y" {
				urlStr := fmt.Sprintf("%vcreate-channel?func_code=NEW_INSTALL", getSchemeUrl(w,r))
				//client = urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
                //resp, err := client.Get(urlStr)
                resp, err := http.Get(urlStr)
                if err != nil {
                    panic(err)
                }
				bodyBytes, _ := ioutil.ReadAll(resp.Body)
				RESPONSE := string(bodyBytes)
				if RESPONSE != "" {
					//fmt.Fprintf(w, "<h3><font color=blue>Ok</font></h3>")
					//fmt.Fprintf(w, "<pre>%v</pre>", RESPONSE)
				}
				adhocWebLoadTDSUSERS(w,r)
				adhocWebLoadTDSRULES(w,r)
				adhocWebLoadTDSSTATS(w,r)
				adhocWebLoadTDSCNFG(w,r)
				adhocWebLoadTDSICONS(w,r)
				adhocWebLoadTDSADS(w,r)
				adhocWebLoadTDSADTS(w,r)
				adhocWebLoadTDSSLIDE(w,r)
				adhocWebLoadTDSARTL(w,r)
				adhocWebLoadTDSMEDIA(w,r)
				sysReq := fmt.Sprintf("/uwm")
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			} else {
				fmt.Fprintf(w, "<title>Install ULAPPH Cloud Desktop</title>")
				fmt.Fprintf(w, "<center><a href=\"/ulapph-router?RTR_FUNC=NEW_INSTALL&CONFIRM=Y\" title=\"Click to install\"><img src=\"/static/img/install.png\" height=100 width=100></a>")
				fmt.Fprintf(w, "<center><font color=green><h2>ULAPPH Cloud Desktop</h2>Kindly click button above to setup ULAPPH Cloud Desktop!</font>")	
				fmt.Fprintf(w, "<h3><font color=green>%v</font></h3>", getSchemeUrl(w,r))
				fmt.Fprintf(w, "<h3><font color=green>%v</font></h3>", UCD_BUILD_STR)
				fmt.Fprintf(w, "<h3><font color=green>%v</font></h3>", r.Header.Get("X-Goog-Authenticated-User-Email"))
            }
        case "UNINSTALL":
            //delete ulapph installation
            _, uid := checkSession(w,r)
            if uid == "" && r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
                uid = r.Header.Get("X-Goog-Authenticated-User-Email")
            }
			uKey := r.FormValue("q")
			if uKey == SYS_UNINSTALL_KEY {
				adhocDeleteTDSUSERS(w,r)
				adhocDeleteTDSRULES(w,r)
				adhocDeleteTDSSTATS(w,r)
				adhocDeleteTDSCNFG(w,r)
				adhocDeleteTDSICONS(w,r)
				adhocDeleteTDSADS(w,r)
				adhocDeleteTDSADTS(w,r)
				adhocDeleteTDSSLIDE(w,r)
				adhocDeleteTDSARTL(w,r)
				adhocDeleteTDSMEDIA(w,r)
				adhocDeleteTDSLOGS(w,r)
				adhocDeleteChannel(w,r)
				adhocDeleteGreeting(w,r)
                //memcache.Flush(c)
				//sysReq := fmt.Sprintf("/uwm")
				//http.Redirect(w, r, sysReq, http.StatusFound)
				fmt.Fprintf(w, "Uninstall successful!")
				return
            }
        case "queue-social":
            //ctok
			queueSocial(w,r)
        case "queue-ratings":
            //ctok
			queueRatings(w,r)
        case "queue-add-to-default-sid":
            //ctok
			queueAddToSid(w,r)
		//case "queue-stream-mirror-uwm":
		//	queueStreamMirrorToUwm(w,r)
		//D0071
		//case "queue-struwm-previous-compare":
		//	queueStruwmPreviousCompare(w,r)
        //D0074
        case "queue-update-cctv-list":
            //ctok
			//log.Printf("queue-update-cctv-list...")
			struwmUpdateCCTVList(w,r)
		//D0076
        case "queue-automl-proc":
            //ctok
            queueAutoMLProc(w,r)
		//D0082
        case "queue-save-locations":
            //ctok
			saveLocations(w,r)
		//D0084
        case "queue-send-live-agents":
            //ctok
			procGetAgents(w,r)
		//D0085
        case "queue-routing-bot":
            //ctok
			procRoutingBot(w,r)
        case "queue-notify-gb":
            //ctok
			queueNotifyGB(w,r)
        case "queue-notify-ch":
            //ctok
			queueNotifyCH(w,r)
        case "queue-stats-inc-logged-in":
            //ctok
			queueStatsIncLoggedIn(w,r)
		case "queue-stats-user-active":
			//if SYS_REALTIME_NOTIFS == false {
			//	return
            //}
            //ctok
			queueStatsUserActive(w,r)
		case "queue-broadcast-presence":
			if SYS_REALTIME_NOTIFS == false {
				return
            }
            //ctok
			queueBroadcastPresence(w,r)
		case "proc-broadcast-message":
			if SYS_REALTIME_NOTIFS == false {
				return
            }
            //ctok
			procBroadcastMessage(w,r)
		case "queue-broadcast-presence2":
			if SYS_REALTIME_NOTIFS == false {
				return
            }
            //ctok
			procBroadcastPresence(w,r)
		//distribute to each site
		case "queue-broadcast-presence-all":
			if SYS_REALTIME_NOTIFS == false {
				return
            }
            //ctok
			procBroadcastAll(w,r)
		case "queue-broadcast-contents-all":
			if SYS_REALTIME_NOTIFS == false {
				return
            }
            //ctok
			procBroadcastContentsAll(w,r)
		case "queue-broadcast-message-all":
			if SYS_REALTIME_NOTIFS == false {
				return
            }
            //ctok
			procMessageAll(w,r)
        case "queue-stats-dec-logged-in":
            //ctok
			queueStatsDecLoggedIn(w,r)
        case "queue-counter-increment":
            //ctok
			queueCounterIncrement(w,r)
        case "queue-stats-update-most-recent":
            //ctok
			queueStatsUpdateMostRecent(w,r)
        case "queue-ads-log-views":
            //ctok
			queueAdsLogViews(w,r)
        case "queue-invite-send-email":
            //ctok
			queueInviteEmail(w,r)
        case "queue-advertise-send-email":
            //ctok
			queueAdvertiseEmail(w,r)
        case "queue-contact-us-send-feedback":
            //ctok
			queueFeedbackEmail(w,r)
        case "queue-generic-send-email":
            //ctok
			queueGenericEmail(w,r)
        case "queue-cache-desktop0-icons":
            //ctok
			TASK_MEMCACHER_desktopIcons(w,r)
        case "queue-cache-desktop0-css":
            //ctok
            TASK_MEMCACHER_desktopCss(w,r)
        case "queue-insert-unknown-rule":
            //ctok
            queueInsertUnknownRule(w,r)
        //D0096
		case "VIEW_MC":
			key := r.FormValue("q")
            kVal := getStrMemcacheValueByKey(w,r,key)
            fmt.Fprintf(w, "KEY: %v", key)
            fmt.Fprintf(w, "VALUE: %v", kVal)
            return
		case "VIEW_MC2":
			key := r.FormValue("q")
            kVal := getBytMemcacheValueByKey(w,r,key)
            fmt.Fprintf(w, "KEY: %v", key)
            fmt.Fprintf(w, "VALUE: %v", string(kVal))
            return
		case "CLR_MC":
			key := r.FormValue("q")
			//context := appengine.NewContext(r)
			memcacheDelete(w,r,key)
			return
		case "CLR_MC_ALL":
            //Clear system top list menu
            memcacheDelete(w,r,"TOP_LIST_MENU_CACHE")
            fmt.Fprintf(w, "Deleted: %v", "TOP_LIST_MENU_CACHE")
			//Clear all items
			memcacheDeleteAll(w,r)
			//}
			return
		case "PRT_IDX":
			idx := r.FormValue("idx")
			doc := r.FormValue("doc")
			printIndex(w,r,idx,doc)
			return
		case "DISPLAY":
				if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
				TABLE := r.FormValue("TABLE")
				switch TABLE {
					case "TDSADS":
					case "TDSADVL":
					case "TDSADTS":
					case "TDSICONS":
					case "TDSUSERS":
					case "TDSPROF":			
                }
            //ctok
		case "TASK_UPDATE_ACCESS":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				//donothing
				return
			} else {
				taskUpdateStatsAccess(w, r)
			}
		case "TASK_UPDATE_DESKTOP":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				//donothing
				return
			} else {
				taskUpdateStatsDesktop(w, r)
			}
		case "TASK_UPDATE_OSBR":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				//donothing
				return
			} else {
				taskUpdateStatsOsBr(w, r)
			}
		//D0063
		case "TASK_UPDATE_INDEX":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				//donothing
				return
			} else {
				taskUpdateSearchIndex(w, r)
			}
		case "TASK_CLEAN_UP_INACT_USERS":
			taskCleanupInactiveUsers(w, r)
 
		case "TASK_MEMCACHER_ALL_ICONS":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				//donothing
				return
			} else {
                //ctok
				TASK_MEMCACHER_desktopIcons(w, r)
				TASK_MEMCACHER_settingsAllIcons(w, r)
			}
		case "TASK_ADS_SLOTS":
			TASK_MEMCACHER_adslotsProcessor(w,r)
		case "TASK_USER_PROC":
			TASK_MEMCACHER_usersProcessor(w,r)
			//D0042 -- force refresh of discussions
			cKey := fmt.Sprintf("OVERALL_DISCUSSIONS")
			OVERALL_DISCUSSIONS := getStrMemcacheValueByKey(w,r,cKey)
			FL_REFRESH := getStrMemcacheValueByKey(w,r,"OVERALL_DISCUSSIONS_REFRESH")
			if OVERALL_DISCUSSIONS == "" || FL_REFRESH == "Y" {
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=CACHE_TOP_STATS", map[string]string{"TARGET": "OVERALL_DISCUSSIONS"})
                })    
			}
		case "TASK_RULE_PROC":
			TASK_MEMCACHER_rulesProcessor(w,r)
        case "CACHE_TOP_STATS":
            //ctok
            _, _, val := cloudTaskHandler(w,r)
            //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
            target := val["TARGET"].(string)
			//target := r.FormValue("TARGET")
			if target != "" {
				switch target {
					case "OVERALL_TRENDING":
						getTrendingContents(w,r)
						return
					case "OVERALL_PEOPLE":
						getPeopleDirectory(w,r)
						return
					case "OVERALL_SITES": 
						getDesktopsDirectory(w,r)
						return
					case "OVERALL_WHATS_NEW":
						getWhatsNewContents(w,r)
						return
					//D0042
					case "OVERALL_DISCUSSIONS":
						getNewDiscussions(w,r)
						//remove flag
						putStrToMemcacheWithoutExp(w,r,"OVERALL_DISCUSSIONS_REFRESH","N")
						return
					default:
						return
				}
			}
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				//donothing
				return
			} else {
				TASK_MEMCACHER_general(w,r)
			}
		case "CACHE_DESKTOP_CSS":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_All_desktopCss(w,r)
			}
		//case 1:
		case "CACHE_SPREADSHEETS_Bible":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Bible Verses",bibleKey,"")
			}
		//case 2:
		case "CACHE_SPREADSHEETS_Jokes":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Jokes",jokeKey,"")
			}
			
		//case 3:	
		case "CACHE_SPREADSHEETS_Saving":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Saving Tips",savingKey,"")
			}
		
		//case 4:
		case "CACHE_SPREADSHEETS_Blogs":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Blogs Tips",blogKey,"")
			}
		
		//case 5:
		case "CACHE_SPREADSHEETS_Quotations":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Quotations",quotesKey,"")
			}	
			
		//case 6:
		case "CACHE_SPREADSHEETS_Health":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Health Tips",healthKey,"")
			}	
		
		//case 7:
		case "CACHE_SPREADSHEETS_Fitness":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Fitness Tips",fitnessKey,"")
			}	
		
		//case 8:
		case "CACHE_SPREADSHEETS_Interview":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Interview Tips",interviewKey,"")
			}
		
		//case 9:
		case "CACHE_SPREADSHEETS_Business":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Business Tips",businessKey,"")
			}	
		
		//case 10:
		case "CACHE_SPREADSHEETS_Life":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Life Tips",lifeKey,"")
			}
		
		//case 11:
		case "CACHE_SPREADSHEETS_Table":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_motd(w,r,"A","ULAPPH Table Topics",ttopicsKey,"")
			}
		
		case "CACHE_DESKTOP0_ICONS":
			uid := fmt.Sprintf("%v",r.FormValue("uid"))
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				if uid == "" {
				TASK_MEMCACHER_desktop0_homeIcons(w,r)
				} else {
				TASK_MEMCACHER_desktop0_homeIcons_Single(w,r,uid)
				}
			}
			
		case "CACHE_DESKTOP0_WALLPAPERS":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_desktop0_wallpapers(w,r)
			}
			
		case "CACHE_DESKTOPN_WALLPAPERS":
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_desktopN_wallpapers(w,r)
			}
		//D0042
		//URLFECTH TASKS
		case "CACHE_URL_FETCH_01":
			//log.Printf("case CACHE_URL_FETCH_01")
			ulapphDebug(w,r, "info", fmt.Sprintf("case: %v", "CACHE_URL_FETCH_01"))
			ulapphDebug(w,r, "info", fmt.Sprintf("Calling TASK_MEMCACHER_URLFETCH_philvolcs_EQ()..."))
			TASK_MEMCACHER_URLFETCH_philvolcs_EQ(w,r)
			/*
			//use this to check or run the following
			cKey := fmt.Sprintf("OVERALL_TRENDING")
			OVERALL_TRENDING := getStrMemcacheValueByKey(w,r,cKey)
			if OVERALL_TRENDING == "" {
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=CACHE_TOP_STATS", map[string]string{"TARGET": "OVERALL_TRENDING"})
                })
			}
			//
			cKey = fmt.Sprintf("OVERALL_PEOPLE")
			OVERALL_PEOPLE := getStrMemcacheValueByKey(w,r,cKey)
			if OVERALL_PEOPLE == "" {
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=CACHE_TOP_STATS", map[string]string{"TARGET": "OVERALL_PEOPLE"})
                })
			}
			//
			cKey = fmt.Sprintf("OVERALL_SITES")
			OVERALL_SITES := getStrMemcacheValueByKey(w,r,cKey)
			if OVERALL_SITES == "" {
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=CACHE_TOP_STATS", map[string]string{"TARGET": "OVERALL_SITES"})
                })
			}
			//
			cKey = fmt.Sprintf("OVERALL_WHATS_NEW")
			OVERALL_WHATS_NEW := getStrMemcacheValueByKey(w,r,cKey)
			if OVERALL_WHATS_NEW == "" {
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=CACHE_TOP_STATS", map[string]string{"TARGET": "OVERALL_WHATS_NEW"})
                })
			}
			//D0042
			//
			cKey = fmt.Sprintf("OVERALL_DISCUSSIONS")
			OVERALL_DISCUSSIONS := getStrMemcacheValueByKey(w,r,cKey)
			FL_REFRESH := getStrMemcacheValueByKey(w,r,"OVERALL_DISCUSSIONS_REFRESH")
			if OVERALL_DISCUSSIONS == "" || FL_REFRESH == "Y" {
                time.AfterFunc(5*time.Second, func() {
                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=CACHE_TOP_STATS", map[string]string{"TARGET": "OVERALL_DISCUSSIONS"})
                })
			}
			*/
		//later urlfetcherlus
		case "URL_FETCH_NOTIFS_IND":
			//log.Printf("case URL_FETCH_NOTIFS_IND")
            //earthquake monitoring
            _, _, val := cloudTaskHandler(w,r)
            //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
            //UID := r.FormValue("UID")
            UID := val["UID"].(string)
            //FREQ := r.FormValue("FREQ")
            FREQ := val["FREQ"].(string)
			//IS_ACTIVE := getActiveStatus(w,r,UID)
			//if IS_ACTIVE == "Y" {
				//log.Printf("Calling TASK_MEMCACHER_URLFETCH_NOTIFS_IND()")
				TASK_MEMCACHER_URLFETCH_NOTIFS_IND(w,r,UID,FREQ)
			//}
		case "URL_FETCH_LINK":
            //just execute a link
            _, _, val := cloudTaskHandler(w,r)
            //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
            URL := val["URL"].(string)
			//URL := r.FormValue("URL")
			client := createClient(c, time.Second*600)
			if err := r.ParseForm(); err != nil {
				panic(err)
			}
			_, _ = client.Get(URL)
		case "URL_FETCH_NOTIFS":
			//frequently check url fetch cron tasks
			FREQ := r.FormValue("f")
			TASK_MEMCACHER_URL_FETCH_NOTIFS(w,r,FREQ)
		case "SESSION_ONLINE":
			//also update users online
			TASK_MEMCACHER_frequent(w,r)
		case "TASK_DWEETIO":
			//runtime
			TASK_Dweetio(w,r)
		case "API_GOOGLE_PLUS_IND":
            //UID := r.FormValue("UID")
            _, _, val := cloudTaskHandler(w,r)
            //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
            UID := val["UID"].(string)
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_API_GOOGLE_PLUS_UID(w,r,UID,"C")
			}
			
        case "RUN_TOPIC_STREAM":
            _, _, val := cloudTaskHandler(w,r)
            //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
            //UID := r.FormValue("UID")
            UID := val["UID"].(string)
            //UWM := r.FormValue("UWM")
            UWM := val["UWM"].(string)
			IS_OK_TO_RUN := checkIfOkToRun(w, r)
			if IS_OK_TO_RUN == false {
				//donothing
				fmt.Fprintf(w, "IS_OK_TO_RUN == false")
				return
			} else {
				TASK_MEMCACHER_RUN_TOPIC_STREAM_UID(w,r,UID,UWM,"D")
			}
	}
}
//POSTs a JSON data to dweet.io
//an integration to dweet.io 
func TASK_Dweetio (w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	uri := fmt.Sprintf("https://dweet.io/dweet/for/%v", fmt.Sprintf("ULAPPH-%v", SYS_SERVER_NAME))
	p, err := getSystemStats(w,r)
	if err != nil {
		panic(err)
	}
	values := url.Values{
	 "CPU-MEGA-CYCLES": {p.STR_FILLER1},
	 "RAM-MEGABYTES": {p.STR_FILLER2},
	 "TASKQUEUE": {p.STR_FILLER3},
	 "TASKQUEUE-1M": {p.STR_FILLER4},
	 "CACHE-HITS": {p.STR_FILLER5},
	 "CACHE-MISS": {p.STR_FILLER6},
	 "CACHE-ITEMS": {p.STR_FILLER7},
	 "CACHE-BYTES": {p.STR_FILLER8},
	 "USERS-ONLINE": {p.STR_FILLER9},
	 "ACCESS-HITS": {p.STR_FILLER10},
	 "ERROR-HITS": {p.STR_FILLER11},
	 "LAST-MEDIA": {p.STR_FILLER12},
	 "LAST-SLIDE": {p.STR_FILLER13},
	 "LAST-ARTICLE": {p.STR_FILLER14},
	 "TIME": {p.STR_FILLER15},
	 "MOST_POPULAR_1": {p.STR_FILLER16},
	 "MOST_POPULAR_2": {p.STR_FILLER17},
	 "MOST_POPULAR_3": {p.STR_FILLER18},
	 "MOST_OS_1": {p.STR_FILLER19}, 	
	 "MOST_OS_2": {p.STR_FILLER20}, 	
	 "MOST_OS_3": {p.STR_FILLER21}, 	
	 "MOST_BROWSER_1": {p.STR_FILLER22},
	 "MOST_BROWSER_2": {p.STR_FILLER23},
	 "MOST_BROWSER_3": {p.STR_FILLER24},	
	}
	
	req, err := http.NewRequest("POST", uri, strings.NewReader(values.Encode()))
 
    //client := urlfetch.Client(c)
    client := &http.Client{}
	_, err = client.Do(req)
	if err != nil {
		panic(err)
	}
}

//gets system status details	
//returns a data struct
func getSystemStats(w http.ResponseWriter, r *http.Request) (p TEMPSTRUCT3, err error) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()	
	//vars
	CPU := "0"
	RAM := "0"
	TASKQUEUE := "0"
	TASKQUEUE1M := "0"
	CACHEHITS := "0"
	CACHEMISS := "0"
	CACHEITEMS := "0"
	CACHEBYTES := "0"
	//runtime
	stats, err := runtime.Stats(c)
	if err == nil {
	    CPU = fmt.Sprintf("%v", stats.CPU.Total)
	    RAM = fmt.Sprintf("%v", stats.RAM.Current)
	}
	
	//taskqueue
    TASKQUEUE = ""
    TASKQUEUE1M = ""	    
	//memcache
    CACHEHITS = ""
    CACHEMISS = ""
    CACHEITEMS = ""
    CACHEBYTES = ""
	//users online
	usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
	usersOnline_CACHE := getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
	fuCtr := 0
	if usersOnline_CACHE != "" {
		SPL := strings.Split(usersOnline_CACHE,",")
		for i := 0; i < len(SPL); i++ {
			if SPL[i] != "" {
				fuCtr++
			}
		}
	}
	COUNTER := fmt.Sprintf("%v", fuCtr)
	//access/error hits
	ERROR_HITS := getStrMemcacheValueByKey(w,r,"ERROR_HITS")
	ACCESS_HITS := getStrMemcacheValueByKey(w,r,"ACCESS_HITS")
	LAST_MEDIA := getStrMemcacheValueByKey(w,r,"LAST_TDSMEDIA")
	LAST_SLIDE := getStrMemcacheValueByKey(w,r,"LAST_TDSSLIDE")
	LAST_ARTICLE := getStrMemcacheValueByKey(w,r,"LAST_TDSARTL")
	
	//time
	now := time.Now()
	hr, min, sec := now.Clock()
	TIME := fmt.Sprintf("%d:%d:%d UTC", hr, min, sec)	
 
	p.STR_FILLER1          = CPU
	p.STR_FILLER2          = RAM
	p.STR_FILLER3    = TASKQUEUE
	p.STR_FILLER4  = TASKQUEUE1M
	p.STR_FILLER5    = CACHEHITS
	p.STR_FILLER6    = CACHEMISS
	p.STR_FILLER7   = CACHEITEMS
	p.STR_FILLER8   = CACHEBYTES
	p.STR_FILLER9      = COUNTER
	p.STR_FILLER10  = ACCESS_HITS
	p.STR_FILLER11   = ERROR_HITS
	p.STR_FILLER12   = LAST_MEDIA
	p.STR_FILLER13   = LAST_SLIDE
	p.STR_FILLER14 = LAST_ARTICLE
	p.STR_FILLER15         = TIME
	
	//get desktop stats
	_,
	_,
	_,
	_,
	_,
	_,
	_,
	MOST_POPULAR_1,
	MOST_POPULAR_2,
	MOST_POPULAR_3, 		
	MOST_OS_1,
	MOST_OS_2,
	MOST_OS_3,
	MOST_BROWSER_1,
	MOST_BROWSER_2,
	MOST_BROWSER_3 := getHomeStats(w, r)
 
	p.STR_FILLER16 = MOST_POPULAR_1
	p.STR_FILLER17 = MOST_POPULAR_2
	p.STR_FILLER18 = MOST_POPULAR_3
	p.STR_FILLER19 	 = MOST_OS_1 	
	p.STR_FILLER20 	 = MOST_OS_2 	
	p.STR_FILLER21 	 = MOST_OS_3 	
	p.STR_FILLER22 = MOST_BROWSER_1
	p.STR_FILLER23 = MOST_BROWSER_2
	p.STR_FILLER24 = MOST_BROWSER_3
	return p, err
 
}

//caches a given MOTD file and generates a slide or article
//user gets redirected to the slide or article link
func TASK_MEMCACHER_motd(w http.ResponseWriter, r *http.Request, DISP_MODE, TITLE, generalKey, redURL string) {
	//c := appengine.NewContext(r)
	var lines []string
	lines = append(lines, fmt.Sprintf("%v", TITLE))
	lines = append(lines, fmt.Sprintf("Famous %v", TITLE))
	const layout = "2 Jan 2006"
	t := time.Now().Local()
	lines = append(lines, fmt.Sprintf("%v", t.Format(layout)))
	lines = append(lines, fmt.Sprintf(""))
	lines = append(lines, fmt.Sprintf(""))
	lines = append(lines, fmt.Sprintf("%v", APP_DESC))
	lines = append(lines, fmt.Sprintf("%v", getSchemeUrl(w,r)))
	lines = append(lines, fmt.Sprintf(""))
	
	
	if SYS_DISP_ADS_CONTENT == true {
		//put ads
		for i := 1; i < 4; i++ {
			//append ads
			lines = append(lines, " ")
			//thisAd := fmt.Sprintf("* ")
			thisAd := fmt.Sprintf("* Advertisement")
			lines = append(lines, thisAd)
			thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
			lines = append(lines, fmt.Sprintf("%v", thisFrame))
			lines = append(lines, " ")
			lines = append(lines, " ")
		
		}
	}
			
	//client := urlfetch.Client(c)
	if err := r.ParseForm(); err != nil {
		panic(err)
	}
	SSlink := fmt.Sprintf("https://docs.google.com/spreadsheet/pub?key=%v&output=csv", generalKey)
	cKey := fmt.Sprintf("ULAPPH_MOTD_%s", generalKey)
	cKey2 := fmt.Sprintf("ULAPPH_MOTD2_%s", generalKey)
	//resp, err := client.Get(SSlink)
	//if err != nil {
		//eturn err
    //}
    resp, err := http.Get(SSlink)
    if err != nil {
        panic(err)
    }

	thisCtr := 0
	//first count total records
	//also cache a text version of this s/s to memcache
	var buffer bytes.Buffer
	
	//lineCtr := 0
	//rowCount = 0
	s := bufio.NewScanner(resp.Body)
	s.Scan()
	for s.Scan() {
		SPL := strings.Split(s.Text(),"More...,")
		SPM := strings.Split(s.Text(),".image")
		//lineCtr++
		
		if len(SPL) > 1 {
			if SPL[1] != "" {
				thisCtr++
				if len(SPM) > 1 {
					lines = append(lines, fmt.Sprintf("* "))
					lines = append(lines, fmt.Sprintf(""))
					lines = append(lines, fmt.Sprintf("%v", SPL[1]))
					lines = append(lines, fmt.Sprintf(""))	
				} else {
					lines = append(lines, fmt.Sprintf("* %v %d", TITLE, thisCtr))
					lines = append(lines, fmt.Sprintf(""))
					lines = append(lines, fmt.Sprintf("%v", SPL[1]))
					lines = append(lines, fmt.Sprintf(""))
					buffer.WriteString(fmt.Sprintf("%v<br>", SPL[1]))
					//store random text
				}
			}
		}
	}
 
	if err := s.Err(); err != nil {
		//fmt.Fprintf(w, "s.Err() : %v<br>", err)
		panic(err)
	}
	doc, err := Parse4(w, r, &Lines{0, lines}, "MOTD", 0)
	if err != nil {
		panic(err)
	}
	
	FL_SLIDABLE := checkSlidable(w,r)
	//uid := ""
	if FL_SLIDABLE == true {
		//fmt.Fprintf(w, "doc: %v<br>", doc)
		var buf bytes.Buffer
		title2 := fmt.Sprintf("%v.slide-quote", "MOTD")
		SL_TMP := ""
		if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
			panic(err)
		}		
		//fmt.Fprintf(w, "lines:<br> %v<br>", buf.Bytes())
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
	} else {
		//fmt.Fprintf(w, "doc: %v<br>", doc)
		var buf bytes.Buffer
		title2 := fmt.Sprintf("%v.article", "MOTD")
		SL_TMP := "A"
		if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
			panic(err)
		}		
		putBytesToMemcacheWithoutExp(w,r,cKey2,buf.Bytes())
	
	}
	if redURL != "" {
		fmt.Fprintf(w, "<h3>Please <a href=\"%v\">click here</a> to proceed.</h3>", redURL)
	}
	
}

//runs a list of topics for a given desktop; each UWM desktop can have lists of particular topics
//then it opens windows on the main desktop displaying the Google latest results for that topic
func TASK_MEMCACHER_RUN_TOPIC_STREAM_UID(w http.ResponseWriter, r *http.Request, UID, UWM, MODE string) {
	//c := appengine.NewContext(r)
	//log.Printf("TASK_MEMCACHER_RUN_TOPIC_STREAM_UID")	
	if UID == "" {
		return
	}
	SPL := strings.Split(UID, "---")
	if len(SPL) <= 0 {
		return
	}
	if SPL[0] == "" || SPL[1] == "" {
		return
	}
	//D0065
	//uid := SPL[0]
	uid := UID 
	if UWM != "" {
		uid = UWM
	}
	topicsource := getTopicsSource(w,r,SPL[0],SPL[1])
	//log.Printf("topicsource: %v", topicsource)	
	if len(topicsource) <= 0 {
		//when no topic source
		catDesc := deskNum2Name(w,r,uid,fmt.Sprintf("desktop%v", SPL[1]))
		//log.Printf("catDesc : %v", catDesc)	
		f := func(c rune) bool {
			return !unicode.IsLetter(c) && !unicode.IsNumber(c)
		}
		words := strings.FieldsFunc(catDesc, f)
		for i:=0; i<len(words); i++ {
			//log.Printf("%v\n", words[i])
			SEARCH_KEY := words[i]
			data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_GOOGLE_SEARCH@888@%v@888@%v", SEARCH_KEY, UID)
			sendChannelMessage(w,r,uid,data)
			dummyCmd(w,r,uid)
		}
		//send the whole word
		words2 := strings.Replace(catDesc, "-", "+", -1)
		data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_GOOGLE_SEARCH@888@%v@888@%v", words2, UID)
		sendChannelMessage(w,r,uid,data)
		dummyCmd(w,r,uid)
		return
	}
	SPX := strings.Split(topicsource, "-")
	docID := str2int(SPX[1])
	BLOB_KEY, _, _, _, _, _, _, _, _, _, _ := getTDSMEDIABlobKey(w, r, docID)

	autoCtr := 0
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
    for s.Scan() {
        if len(s.Text()) > 0 {
            thisStr := fmt.Sprintf("%v", s.Text())
            if string(thisStr[0]) != "#" {
                autoCtr++
                SEARCH_KEY := s.Text()
                data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_GOOGLE_SEARCH@888@%v@888@%v", SEARCH_KEY, UID)
                sendChannelMessage(w,r,uid,data)
                dummyCmd(w,r,uid)
            }
        }
    }
}

//searches Google Plus given the profile needs/wants of a user
//an integration to Google Plus API 
//currently disabled due to high billing costs
func TASK_MEMCACHER_API_GOOGLE_PLUS_UID(w http.ResponseWriter, r *http.Request, UID, MODE string) {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	if UID == "" {
		return
    }
    //D0086
    datastoreClient := createClientDS()
	
	//get IHAVE and INEED details from cache
	cKey := fmt.Sprintf("I_HAVE_TEXT_%v", UID)
	I_HAVE_TEXT := ""
	I_HAVE_TEXT = getStrMemcacheValueByKey(w,r,cKey)
	
	cKey2 := fmt.Sprintf("I_NEED_TEXT_%v", UID)
	I_NEED_TEXT := ""
	I_NEED_TEXT = getStrMemcacheValueByKey(w,r,cKey2)
	
	if I_HAVE_TEXT != "@888@" {
 
		temp := strings.Split(I_HAVE_TEXT,"\n")
		if len(temp) > 0 {
			
			for j := 0; j < len(temp); j++ {
 
				//SEARCH_KEY := strings.TrimSpace(temp[j])
				SEARCH_KEY := temp[j]
				//search now
				if SEARCH_KEY != "" && string(SEARCH_KEY[0]) != "#"{
 
					//laterGooglePlus(c, "SEARCH-ACTS", UID, SEARCH_KEY, MODE)
					//laterGoogleSearch(c, "SEARCH-ACTS", UID, SEARCH_KEY, MODE)
					//laterGoogleImages(c, "SEARCH-ACTS-IMG", UID, SEARCH_KEY, MODE)
				}
			}
		}		
	
	}
	
	if I_NEED_TEXT != "@888@" {
 
		temp := strings.Split(I_NEED_TEXT,"\n")
		if len(temp) > 0 {
			
			for j := 0; j < len(temp); j++ {
 
				//SEARCH_KEY := strings.TrimSpace(temp[j])
				SEARCH_KEY := temp[j]
				//search now
				if SEARCH_KEY != "" && string(SEARCH_KEY[0]) != "#" {
 
					//laterGooglePlus(c, "SEARCH-ACTS", UID, SEARCH_KEY, MODE)
					//laterGoogleSearch(c, "SEARCH-ACTS", UID, SEARCH_KEY, MODE)
					//laterGoogleImages(c, "SEARCH-ACTS-IMG", UID, SEARCH_KEY, MODE)
				}
			}
		}	
 
	}
			
	if I_HAVE_TEXT == "" || I_NEED_TEXT == "" {
		//uid := UID
		//get the wtb list for this user
		q := datastore.NewQuery("TDSPROF").Filter("UID =", UID).Limit(1)
		//log.Panicf("[S0229]")
		profile := make([]TDSPROF, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
			//check overquota error
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		}
		//log.Printf("datastoreClient.Get()  [34628]")
		C_NEED_TEXT := "@888@"
		C_HAVE_TEXT := "@888@"
		
		for _, p := range profile{
			if p.I_NEED_TEXT != "" {
				C_NEED_TEXT = p.I_NEED_TEXT
				//search ifs items & notify users
 
				temp := strings.Split(p.I_NEED_TEXT,"\n")
				if len(temp) > 0 {
					
					for j := 0; j < len(temp); j++ {
 
						//SEARCH_KEY := strings.TrimSpace(temp[j])
						SEARCH_KEY := temp[j]
						//search now
						if SEARCH_KEY != "" && string(SEARCH_KEY[0]) != "#" {
 
							//laterGooglePlus(c, "SEARCH-ACTS", UID, SEARCH_KEY, MODE)
							//laterGoogleSearch(c, "SEARCH-ACTS", UID, SEARCH_KEY, MODE)
							//laterGoogleImages(c, "SEARCH-ACTS-IMG", UID, SEARCH_KEY, MODE)
						}
					}
				}	
			}
			if p.I_HAVE_TEXT != "" {
				C_HAVE_TEXT = p.I_HAVE_TEXT
				//search ifs items & notify users
 
				temp := strings.Split(p.I_HAVE_TEXT,"\n")
				if len(temp) > 0 {
					
					for j := 0; j < len(temp); j++ {
 
						//SEARCH_KEY := strings.TrimSpace(temp[j])
						SEARCH_KEY := temp[j]
						//search now
						if SEARCH_KEY != "" && string(SEARCH_KEY[0]) != "#"{
 
							//laterGooglePlus(c, "SEARCH-ACTS", UID, SEARCH_KEY, MODE)
							//laterGoogleSearch(c, "SEARCH-ACTS", UID, SEARCH_KEY, MODE)
							//laterGoogleImages(c, "SEARCH-ACTS-IMG", UID, SEARCH_KEY, MODE)
						}
					}
				}	
			}
			putStrToMemcacheWithoutExp(w,r,cKey,C_NEED_TEXT)
			putStrToMemcacheWithoutExp(w,r,cKey2,C_HAVE_TEXT)
		}
	}			
}

//for each user online, it will execute urlfetch crons
//users must be online so their crons will be executed
func TASK_MEMCACHER_URL_FETCH_NOTIFS(w http.ResponseWriter, r *http.Request, freq string) {
	//c := appengine.NewContext(r)
	//log.Printf("TASK_MEMCACHER_URL_FETCH_NOTIFS()")
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
 
	//get online users
	usersOnline_CACHE := ""
	usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
	usersOnline_CACHE = getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
	
	procCtr := 0
	if strings.TrimSpace(usersOnline_CACHE) != "" {
		//log.Printf("Using cache usersOnline_CACHE")
		SPL := strings.Split(usersOnline_CACHE,",")
		//fuCtr := 0
		for i := 0; i < len(SPL); i++ {
			if strings.TrimSpace(SPL[i]) != "" {
				e := strings.Index(SPL[i], "@")
				if e != -1 {
                    //time.AfterFunc(5*time.Second, func() {
						procCtr++
						//log.Printf("Calling laterUrlFetchInd()...[TASK_MEMCACHER_URL_FETCH_NOTIFS]: %v %v", SPL[i], freq)
                        laterUrlFetchInd(c, "URL_FETCH_NOTIFS_IND", SPL[i], freq)
                    //})
				}
			}
		}
	}
	
	//log.Printf("procCtr=0")
	if procCtr == 0 {
		//check from DB
		//display record as slides
		//log.Printf("Checking users db...")
		datastoreClient := createClientDS()
		q := datastore.NewQuery("TDSUSERS").Order("-LOGGED_IN")
		//log.Panicf("[S0157]")
		recCount, _  := datastoreClient.Count(c,q)
		users := make([]TDSUSERS, 0, recCount)
		//log.Printf("datastoreClient.Get()  [26782]")
		//log.Printf("datastoreClient.Get()")
		if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
			 panic(err)
		 }
		
		for _, p := range users {
			if p.LOGGED_IN == 1 {
				//log.Printf("[%v] is logged in. Ok to run cron jobs.", p.USER)
				timeFormat := "20060102150405"
				then, err := time.Parse(timeFormat, p.LAST_ACTIVE)
				if err != nil {
					panic(err)
				}
				duration := time.Since(then)
				if duration.Hours() <= 6 {
					//log.Printf("[%v] is active. Ok to run cron jobs.", p.USER)
					//time.AfterFunc(5*time.Second, func() {
						procCtr++
						//log.Printf("Calling laterUrlFetchInd()...[TASK_MEMCACHER_URL_FETCH_NOTIFS]: %v %v", p.USER, freq)
						laterUrlFetchInd(c, "URL_FETCH_NOTIFS_IND", p.USER, freq)
					//})
				}
			}
		}
	}
	//log.Printf("[Processed=%v] Done. TASK_MEMCACHER_URL_FETCH_NOTIFS()", procCtr)
	fmt.Fprintf(w, "UrlFetch has been completed: <br>")
	
}

//gets the urlfetch list or crons for the user
//then calls the URL fetcher logic to execute it 
func TASK_MEMCACHER_URLFETCH_NOTIFS_IND (w http.ResponseWriter, r *http.Request, UID, FREQ string) {
	//c := appengine.NewContext(r)
	//log.Printf("TASK_MEMCACHER_URLFETCH_NOTIFS_IND()")
	cKey := fmt.Sprintf("URLFETCH_LIST_%v", UID)
	URL_LIST := ""
	URL_LIST = getStrMemcacheValueByKey(w,r,cKey)
	//uid := UID
	//log.Printf("cKey: %v", cKey)
	if strings.TrimSpace(URL_LIST) == "" {
		//log.Printf("Empty: %v", cKey)
		docID := 0
		cfgName := fmt.Sprintf("SYSTEM_URLFETCH_Media_ID_%v", UID)
		_, docID = getTDSCNFG(w,r,1,cfgName)
		
		//billing fix
		if docID > 0 {
			BLOB_KEY := ""
			BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
			
			var buf bytes.Buffer
			//log.Printf("BLOB_KEY: %v", BLOB_KEY)
            bData, err := readGcsObject(BLOB_KEY)
            if err != nil {
                panic(err)
            }
            s := bufio.NewScanner(bytes.NewReader(bData))
			for s.Scan() {
				buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
			
			//cKey := fmt.Sprintf("URLFETCH_LIST")
			cKey := fmt.Sprintf("URLFETCH_LIST_%v", UID)
			putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
			
			//fmt.Fprintf(w, "Got list from cache...<br><br>.")
			//fmt.Fprintf(w, "%v", buf.String())
			URL_LIST = buf.String()			
		}
	}
	temp := strings.Split(URL_LIST,"\n")
	if len(temp) > 0 {
		for j := 0; j < len(temp); j++ {
			tURL := strings.TrimSpace(temp[j])
			//log.Printf("tURL: %v", tURL)
			if tURL != "" && string(tURL[0]) != "#"  {
				//log.Printf("Calling TASK_URL_FETCHER(): %v %v %v", tURL,UID,FREQ)
				TASK_URL_FETCHER(w,r,tURL,UID,FREQ)
			}
		}
	}
}
//executes earthquake monitoring in the Philippines
//an integration with the DOST-PHILVOLCS
//it parses the Philvolcs data and notifies users online about the earthquake events
func TASK_MEMCACHER_URLFETCH_philvolcs_EQ (w http.ResponseWriter, r *http.Request) {
	//log.Printf("TASK_MEMCACHER_URLFETCH_philvolcs_EQ()")
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	if SYS_EARTHQUAKE_MON != true {
		return
	}
	//dummy
	FL_DUMMY := false
	//get hourly logs
	currenttime := time.Now().Local()
	DATE_YEAR := currenttime.Year()
	fmt.Fprintf(w, "<h1>Earthquake-PH</h1>")
	//UFLink := "http://www.phivolcs.dost.gov.ph/html/update_SOEPD/EQLatest.html"
	//ARLink := "https://www.ulapph.com/infodb?DB_FUNC=ULAPPH-EQ-PH&SID=ULAPPH-EQ-PH"
	UFLink := "https://earthquake.phivolcs.dost.gov.ph/"
	ulapphDebug(w,r, "info", fmt.Sprintf("UFLink: %v", UFLink))
	//cKey := fmt.Sprintf("ULAPPH_EQ_%s", "PH")
	cKeyP := fmt.Sprintf("ULAPPH_EQ_%s_PREV", "PH")
	ulapphDebug(w,r, "info", fmt.Sprintf("cKeyP: %v", cKeyP))
	cKeyValue := ""
	//client := urlfetch.Client(c)
	if err := r.ParseForm(); err != nil {
		panic(err)
	}
	//log.Printf("UFLink: %v", UFLink)
	ulapphDebug(w,r, "info", fmt.Sprintf("http.Get(): %v", UFLink))
	tr := &http.Transport{
        TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
    }
    client := &http.Client{Transport: tr}	
	//response, err := http.Get(UFLink)
	response, err := client.Get(UFLink)
	if err != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: http.Get(): %v", err))
		//eturn err
	}
	//////////////////////////////
	//FL_EQ := false
	msgDtl3 := ""
	if err != nil {
		//log.Printf("%s", err)
	} else {
		var buf bytes.Buffer
		y := bufio.NewWriter(&buf)
		ufdoc, _ := html.Parse(response.Body)
		//ulapphDebug(w,r, "info", fmt.Sprintf("html.Parse(): %v", string(response.Body)))
		parse_html(w, r, y, ufdoc)
		//parse links
		//-------------------------------
		//mainPath := "http://www.phivolcs.dost.gov.ph/html/update_SOEPD"
		mainPath := "https://earthquake.phivolcs.dost.gov.ph/"
		ulapphDebug(w,r, "info", fmt.Sprintf("mainPath: %v", mainPath))
		y.Flush()
		s := bufio.NewScanner(&buf)
		SLctr := 1
		for s.Scan() {
			//lines = append(lines, s.Text())
			if SLctr <= 100 {
				fmt.Fprintf(w, "%v<br>", s.Text())
				ulapphDebug(w,r, "info", fmt.Sprintf("s.Text(): %v", s.Text()))
				//http://www.phivolcs.dost.gov.ph/html/update_SOEPD/2017_Earthquake_Information/February/2017_0211_1259_B1F.html
				//https://earthquake.phivolcs.dost.gov.ph/2019_Earthquake_Information/September/2019_0920_0714_B1.html
				mtch := fmt.Sprintf("LINK:%v_Earthquake_Information", DATE_YEAR)
				ulapphDebug(w,r, "info", fmt.Sprintf("mtch: %v", mtch))
				//log.Printf("mtch: %v", mtch)
				i := strings.Index(s.Text(), mtch)
				if i != -1 {
					SPL := strings.Split(s.Text(), "LINK:")
					//lines = append(lines, "* ")
					//thisFrame := fmt.Sprintf(".iframe %v/%v 600 900", mainPath, SPL[1])
					//thisFrame := fmt.Sprintf(".link %v/%v", mainPath, SPL[1])
					if SLctr == 1 {
						thisFrame2 := fmt.Sprintf("%v/%v", mainPath, SPL[1])
						ulapphDebug(w,r, "info", fmt.Sprintf("thisFrame2: %v", thisFrame2))
						//if SPL[1] <> previous SPL, send notifications
                        trimValue := strings.TrimSpace(SPL[1])
                        cKeyValue = getStrMemcacheValueByKey(w,r,cKeyP)
						ulapphDebug(w,r, "info", fmt.Sprintf("trimValue: %v cKeyValue: %v", trimValue, cKeyValue))
						//if cKeyValue != "" {
						if cKeyValue != trimValue {
							if SYS_EQ_MON_MSG == true {
								//log.Printf("thisFrame2: %v", thisFrame2)
								ulapphDebug(w,r, "info", fmt.Sprintf("SYS_EQ_MON_MSG == true"))
								thisFrame2 = strings.Replace(thisFrame2, "\\", "/", -1)
								urlResp, err := client.Get(thisFrame2)
								if err != nil {
									ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: http.Get(): %v", err))
									//eturn err
								}
								//goq, err := goquery.NewDocument(r,thisFrame2)
								//p := strings.NewReader(urlResp)
								defer urlResp.Body.Close()
								bodyBytes, _ := ioutil.ReadAll(urlResp.Body)
								p := bytes.NewReader(bodyBytes)
								goq, err := goquery.NewDocumentFromReader(p)
								if err != nil {
									ulapphDebug(w,r, "info", fmt.Sprintf("ERROR: goquery: no document for thisFrame2: %v", thisFrame2))
									return
								}
								location := ""
								mag := ""
								iLink := ""
								  goq.Find("body > div > table > tbody > tr:nth-child(2) > td > table > tbody > tr:nth-child(1) > td:nth-child(2)").Each(func(i int, s *goquery.Selection) {    
									//log.Printf("%v\n", s.Text())
									//log.Printf("%v\n", s.Text())
									SPL := strings.Split(s.Text(), " of ")
									if len(SPL) > 0 {
										location = SPL[1]
									}
								  })
								  goq.Find("body > div > table > tbody > tr:nth-child(2) > td > table > tbody > tr:nth-child(1) > td:nth-child(2)").Each(func(i int, s *goquery.Selection) {
									//log.Printf("%v\n", s.Text())
									//log.Printf("%v\n", s.Text())
									SPL := strings.Split(s.Text(), "Ms ")
									if len(SPL) > 0 {
										mag = SPL[1]
									}
								  })
								  goq.Find("body > div > table > tbody > tr:nth-child(3) > td > p").Each(func(i int, s *goquery.Selection) {
									//log.Printf("%v\n", s.Text())
									imgTag := s.Find("img")
									imgLink, _ := imgTag.Attr("imgsrc")
									if imgLink == "" {
										imgTag := s.Find("img")
										imgLink, _ = imgTag.Attr("src")
										if imgLink != "" {
											dir, _:= filepath.Split(thisFrame2)
											//iLink = fmt.Sprintf("%v%v.jpg", dir, imgLink)
											iLink = fmt.Sprintf("%v%v", dir, strings.TrimSpace(imgLink))
										}
									}
								})
								msgDtl3 = fmt.Sprintf("<img src=\"/static/img/earthquake.png\" width=60 height=60></img> DANGER!!!<hr> New earthquake detected! [<a href=\"%v\" target=\"eq\">View Latest</a>] <br>[%v] [%v]<br><img src=\"%v\" width=100%% height=250><hr>Source: PHIVOLCS", thisFrame2, mag, location, iLink)
								msgDtl3c := fmt.Sprintf("Alarm, new earthquake detected a while ago in %v with magnitude %v >>> <br><img src=\"/static/img/earthquake.png\" width=60 height=60></img> DANGER!!! %v latest earthquake! <a href=\"%v\" target=\"eq\">View Latest</a> %v (Ref: Recent Earthquakes: %v)", location, mag, ShortenUrl(w,r,SPL[1]), ShortenUrl(w,r,thisFrame2), ShortenUrl(w,r,thisFrame2), ShortenUrl(w,r,UFLink))
								putStrToMemcacheWithExp(w,r,"ALARM_EQ_MSG",msgDtl3c,30)
								sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,"philvolcs","",""),"")
								data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "EARTHQUAKE", msgDtl3c)
								ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
								ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
								ulapphDebug(w,r, "info", fmt.Sprintf("msgDtl3: %v", msgDtl3))
							}
						}
						//save current value to cache
						//log.Printf("cKeyP (trimValue): %v", trimValue)
						putStrToMemcacheWithoutExp(w,r,cKeyP,trimValue)
						//}
					}
					//lines = append(lines, fmt.Sprintf("%v", thisFrame))
					//lines = append(lines, " ")
					SLctr++
				}
			}
		}
	}
	if FL_DUMMY == true {
		msgDtl3 := fmt.Sprintf("DANGER!!! Earthquake DUMMY run!")
		sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,"philvolcs","/dummy",""),"")
		data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH", msgDtl3)
		ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
		time.AfterFunc(5*time.Second, func() {
            laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, msgDtl3, ADMMAIL)
        })
	}
 
}

//parses an html 
func parse_html(w http.ResponseWriter, r *http.Request, y io.Writer, n *html.Node) {
		
	if n.Type == html.ElementNode && n.Data == "a" {
		for _, element := range n.Attr {
			if element.Key == "href" {
				fmt.Fprintf(y, "LINK:%v\n",  element.Val)
			}
		}
	}
	for c := n.FirstChild; c != nil; c = c.NextSibling {
		parse_html(w, r, y, c)
	}
}

//gets people directory
//applicable only for sites server which then calls all connected desktops under this server
func getPeopleDirectory (w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	//People Directory
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		var buffer3 bytes.Buffer
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
				tURL := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
				}
				i := strings.Index(getSchemeUrl(w,r), tURL)
				if tURL != "" && i == -1 {
					URL := fmt.Sprintf("%v/social?SO_FUNC=get-people-directory", tURL)
					//client := urlfetch.Client(c)
					if err := r.ParseForm(); err != nil {
						panic(err)
					}
					FL_RESP_OK := true
					//resp, err := client.Get(URL)
					//if err != nil {
					//	//panic(err)
					//	FL_RESP_OK = false
                    //}
                    resp, err := http.Get(URL)
                    if err != nil {
                        FL_RESP_OK = false
                    }
					if FL_RESP_OK == true {
						bodyBytes, _ := ioutil.ReadAll(resp.Body)
						//if response is overquota
						j := strings.Index(string(bodyBytes), "[U00000] OVER QUOTA ERROR:")
						if j == -1 {
							buffer3.Write(bodyBytes)
						}
					}
				}
			}
		}
		//cache all replies
		putBytesToMemcacheWithoutExp(w,r,"OVERALL_PEOPLE",buffer3.Bytes())
	}
}

//update overall cached pages such as people directory
//applicable only to sites server which calls member desktops under it
func TASK_MEMCACHER_frequent (w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	getPeopleDirectory(w,r)
	//uid := ""
//Monitor usage of each site for sparkline
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		//var buffer3 bytes.Buffer
				
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
 
				tURL := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
				}
				i := strings.Index(getSchemeUrl(w,r), tURL)
				if tURL != "" && i == -1 {
					
					URL := fmt.Sprintf("%v/social?SO_FUNC=get-log-hits", tURL)
					//client := urlfetch.Client(c)
					if err := r.ParseForm(); err != nil {
						panic(err)
					}
					
                    FL_RESP_OK := true
					resp, err := http.Get(URL)
					if err != nil {
						//panic(err)
						FL_RESP_OK = false
					}
					
					if FL_RESP_OK == true {
						bodyBytes, _ := ioutil.ReadAll(resp.Body)
						//if response is overquota
						j := strings.Index(string(bodyBytes), "[U00000] OVER QUOTA ERROR:")
						if j == -1 {
							//buffer3.Write(bodyBytes)
							//cache individual reply
							sName := getServerNameFromURL(w,r,tURL)
							cKey := fmt.Sprintf("OVERALL_HITS_IND_%v", sName)
							putBytesToMemcacheWithExp(w,r,cKey,bodyBytes,GEN_CONTENT_EXPIRES)
						}
					}
				}
			}
		}
	}
}

//gets all trending contents from all member desktops under the site server
//applicable for sites server only
func getTrendingContents(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	//D0083
	//toggle between html/json
	//uid := ""
	cKey := "GT_TOGGLE_STATUS"
	GT_TARGET := ""
	GT_TOGGLE_STATUS := getStrMemcacheValueByKey(w,r,cKey)
	if GT_TOGGLE_STATUS == "" {
		GT_TARGET = "html"
	} else {
		switch GT_TOGGLE_STATUS {
			case "html":
				GT_TARGET = "json"
			case "json":
				GT_TARGET = "html"
		}
	}
	putStrToMemcacheWithoutExp(w,r,cKey,GT_TARGET)
	//Trending Contents
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		var buffer3 bytes.Buffer
		var us []UlapphSources
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
				tURL := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
				}
				i := strings.Index(getSchemeUrl(w,r), tURL)
				thisStr := fmt.Sprintf("%v", temp[j])
				if tURL != "" && i == -1 && string(thisStr[0]) != "#" {
					URL := fmt.Sprintf("%v/social?SO_FUNC=get-trending&t=%v", tURL, GT_TARGET)
					//log.Printf("URL: %v", URL)
					//client := urlfetch.Client(c)
					if err := r.ParseForm(); err != nil {
						panic(err)
					}
					FL_RESP_OK := true
					resp, err := http.Get(URL)
					if err != nil {
						//panic(err)
						FL_RESP_OK = false
					}
					if FL_RESP_OK == true {
						bodyBytes, _ := ioutil.ReadAll(resp.Body)
						//HOST_LIST = string(bodyBytes)
						//fmt.Fprintf(w, "%v", string(bodyBytes))
						//log.Printf("bodyBytes: %v", string(bodyBytes))
						j := strings.Index(string(bodyBytes), "[U00000] OVER QUOTA ERROR:")
						if j == -1 {
							//D0083
							if GT_TARGET != "json" {
								buffer3.Write(bodyBytes)
							} else {
								var td []UlapphSources
								err := json.Unmarshal(bodyBytes, &td)
								if err != nil {
									log.Panicf("%v", err)
								} else {
									us = append(us, td...)
								}
							}
						}
					}
				}
			}
		}
		//cache all replies
		//D0083
		switch GT_TARGET {
			case "json":
				//log.Printf("saved json")
				data, err := json.Marshal(us)
				if err != nil {
					log.Panicf("json.Marshal() Error: %v", err)
				} else {
					putBytesToMemcacheWithoutExp(w,r,"OVERALL_TRENDING_JSON",data)
				}
			default:
				//log.Printf("saved html")
				putBytesToMemcacheWithoutExp(w,r,"OVERALL_TRENDING",buffer3.Bytes())
		}
	}
}
//gets whats new contents from all desktops who are member of a sites server
//applicable for sites server only
func getWhatsNewContents(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	//D0083
	//toggle between html/json
	//uid := ""
	cKey := "GT_TOGGLE_STATUS"
	GT_TARGET := ""
	GT_TOGGLE_STATUS := getStrMemcacheValueByKey(w,r,cKey)
	if GT_TOGGLE_STATUS == "" {
		GT_TARGET = "html"
	} else {
		switch GT_TOGGLE_STATUS {
			case "html":
				GT_TARGET = "json"
			case "json":
				GT_TARGET = "html"
		}
	}
	putStrToMemcacheWithoutExp(w,r,cKey,GT_TARGET)
	//WhatsNew Contents
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		var buffer3 bytes.Buffer
		var us []UlapphSources
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
				tURL := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
				}
				i := strings.Index(getSchemeUrl(w,r), tURL)
				thisStr := fmt.Sprintf("%v", temp[j])
				if tURL != "" && i == -1 && string(thisStr[0]) != "#" {
					//D0083
					URL := fmt.Sprintf("%v/social?SO_FUNC=get-whats-new&t=%v", tURL, GT_TARGET)
					//log.Printf("URL: %v", URL)
					//client := urlfetch.Client(c)
					if err := r.ParseForm(); err != nil {
						panic(err)
					}
					FL_RESP_OK := true
					resp, err := http.Get(URL)
					if err != nil {
						//panic(err)
						FL_RESP_OK = false
					}
					if FL_RESP_OK == true {
						bodyBytes, _ := ioutil.ReadAll(resp.Body)
						//if response is overquota
						j := strings.Index(string(bodyBytes), "[U00000] OVER QUOTA ERROR:")
						if j == -1 {
							//buffer3.Write(bodyBytes)
							//D0083
							if GT_TARGET != "json" {
								buffer3.Write(bodyBytes)
							} else {
								var td []UlapphSources
								err := json.Unmarshal(bodyBytes, &td)
								if err != nil {
									log.Panicf("%v", err)
								} else {
									us = append(us, td...)
								}
							}
						}
					}
				}
			}
		}
		//cache all replies
		//D0083
		switch GT_TARGET {
			case "json":
				//log.Printf("saved json")
				data, err := json.Marshal(us)
				if err != nil {
					log.Panicf("json.Marshal() Error: %v", err)
				} else {
					putBytesToMemcacheWithoutExp(w,r,"OVERALL_WHATS_NEW_JSON",data)
				}
			default:
				//log.Printf("saved html")
				putBytesToMemcacheWithoutExp(w,r,"OVERALL_WHATS_NEW",buffer3.Bytes())
		}
	}
}

//D0042
//gets new comments from all member desktops under a sites server
//applicable to a sites server only
func getNewDiscussions(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
//Newly Discussed Contents
	//uid := ""
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		var buffer3 bytes.Buffer
				
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
 
				tURL := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
				}
				i := strings.Index(getSchemeUrl(w,r), tURL)
				thisStr := fmt.Sprintf("%v", temp[j])
				if tURL != "" && i == -1 && string(thisStr[0]) != "#" {
					
					URL := fmt.Sprintf("%v/social?SO_FUNC=get-discussions", tURL)
					//client := urlfetch.Client(c)
					if err := r.ParseForm(); err != nil {
						panic(err)
					}
					
					FL_RESP_OK := true
					resp, err := http.Get(URL)
					if err != nil {
						//panic(err)
						FL_RESP_OK = false
					}
					
					if FL_RESP_OK == true {
						bodyBytes, _ := ioutil.ReadAll(resp.Body)
						//if response is overquota
						j := strings.Index(string(bodyBytes), "[U00000] OVER QUOTA ERROR:")
						if j == -1 {
							buffer3.Write(bodyBytes)
						}
					}
				}
			}
		}
		//cache all replies
		putBytesToMemcacheWithoutExp(w,r,"OVERALL_DISCUSSIONS",buffer3.Bytes())
	}	
}

//gets a directory of all desktops
//applicable only for sites server
func getDesktopsDirectory(w http.ResponseWriter, r *http.Request) {
//ULAPPH Desktops Directory
	//c := appengine.NewContext(r)
	//uid := ""
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		//log.Printf("LEN: %v", len(temp))
		var buffer3 bytes.Buffer
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
				tURL := ""
				tags := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
					tags = SPL[1]
				}
				i := strings.Index(getSchemeUrl(w,r), tURL)
				thisStr := fmt.Sprintf("%v", temp[j])
				//log.Printf("tURL: %v", tURL)
				if tURL != "" && i == -1 && string(thisStr[0]) != "#" {
					buffer3.WriteString(fmt.Sprintf("<tr>"))
						STR_FILLER1 := fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-logo", tURL))
						//log.Printf("T: %v", STR_FILLER1)
							j := strings.Index(STR_FILLER1, "[U00000] OVER QUOTA ERROR:")
							k := strings.Index(STR_FILLER1, "ERROR:")
							if j == -1 && k == -1 {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\"><a href=\"%v\"><img src=\"%v\" width=60 height=60 class=\"img-circle\"></a></td>", STR_FILLER1, string(tURL), STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\"><a href=\"%v\"><img src=\"%v\" width=60 height=60 class=\"img-circle\"></a></td>", "/static/img/error.png", string(tURL), "/static/img/error.png"))
							}
						STR_FILLER1 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-privacy", tURL))
						STR_FILLER2 := fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-searchable", tURL))
 
							if j == -1 && k == -1 {
								if STR_FILLER1 == "false" {
									if STR_FILLER2 == "true" {
										buffer3.WriteString(fmt.Sprintf("<td data-order=\"Public - Searchable\">Public & Searchable</td>"))
									} else {
										buffer3.WriteString(fmt.Sprintf("<td data-order=\"Public - Unsearchable\">Public & Unsearchable</td>"))
									}
								} else {
									if STR_FILLER2 == "true" {
										buffer3.WriteString(fmt.Sprintf("<td data-order=\"Private - Searchable\">Private & Searchable</td>"))
									} else {
										buffer3.WriteString(fmt.Sprintf("<td data-order=\"Private - Unsearchable\">Private & Unsearchable</td>"))
									}
								}	
							} else {
								buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
							}
						STR_FILLER1 =  string(tURL)
 
							if j == -1 && k == -1 {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\"><a href=\"%v\">%v</a></td>", STR_FILLER1, STR_FILLER1, STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
							}
						STR_FILLER1 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-health", tURL))
 
							m, _ := url.Parse(tURL)
							SPL := strings.Split(m.Host, ".")
							dwurl := fmt.Sprintf("https://dweet.io/follow/ULAPPH-%v", SPL[0])
							if j == -1 && STR_FILLER1 == "ok" && k == -1 {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\"><a href=\"%v\"><img src=\"/static/img/%v.png\" width=40 height=40></a></td>", STR_FILLER1, dwurl, STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"notok\"><a href=\"%v\"><img src=\"/static/img/notok.png\" width=40 height=40></a></td>", dwurl))
							}
						STR_FILLER1 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-version", tURL))
							//BUILD_2016-09-07-03-22-09
 
							if j == -1 && k == -1 {
								SPL := strings.Split(STR_FILLER1,"_")
								TS := ""
								if len(SPL) > 0 {
									TS = strings.Replace(SPL[1], "-", "", -1)
								}
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\">%v</td>", stmpHumanizeStr(TS), stmpHumanizeStr(TS)))
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\">%v</td>", STR_FILLER1, STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
							}
						STR_FILLER1 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-tot-slides", tURL))
							if j == -1 && k == -1 {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\">%v</td>", STR_FILLER1, STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
							}
						STR_FILLER1 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-tot-articles", tURL))
							if j == -1 && k == -1 {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\">%v</td>", STR_FILLER1, STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
							}
						STR_FILLER1 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-tot-media", tURL))
							if j == -1 && k == -1 {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\">%v</td>", STR_FILLER1, STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
							}
						STR_FILLER1 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-tot-users", tURL))
							if j == -1 && k == -1 {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\">%v</td>", STR_FILLER1, STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
							}
						STR_FILLER1 = fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-contact", tURL))
							if j == -1 && k == -1 {
								buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\">%v</td>", STR_FILLER1, STR_FILLER1))
							} else {
								buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
							}
						if j == -1 && k == -1 {
						buffer3.WriteString(fmt.Sprintf("<td data-order=\"%v\">%v</td>", tags, tags))
						} else {
						buffer3.WriteString(fmt.Sprintf("<td>...</td>"))
						}
					buffer3.WriteString(fmt.Sprintf("</tr>"))
				}
			}
		}
		//cache all replies
		putBytesToMemcacheWithoutExp(w,r,"OVERALL_SITES",buffer3.Bytes())
	}
}

//a taskqueue cacheing logic for getting trending contents, whats new etc
func TASK_MEMCACHER_general (w http.ResponseWriter, r *http.Request) {
	getTrendingContents(w,r)
	getWhatsNewContents(w,r)
	getDesktopsDirectory(w,r)
	putStrToMemcacheWithExp(w,r,"CACHE_TOP_STATS","",60)
	fmt.Fprintf(w, "Task completed")
}

//caches profile pic for a user 
func cacheProfilePic(w http.ResponseWriter, r *http.Request, uid string) string {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //var buffer3 bytes.Buffer
    //D0086
    datastoreClient := createClientDS()
	PROFILE_PIC := ""
    cKey := fmt.Sprintf("PROFILE_PIC_%v", uid)
    PROFILE_PIC = getStrMemcacheValueByKey(w,r,cKey)
	if PROFILE_PIC == "" {
		q := datastore.NewQuery("TDSPROF").Filter("UID =", uid).Limit(1)
		//log.Panicf("[S0232]")
		profile := make([]TDSPROF, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
			 panic(err)
			//return ""
        }
        //log.Printf("datastoreClient.Get()  [35444]")
		for _, p := range profile{
			//cache profile pic
			cKey := fmt.Sprintf("PROFILE_PIC_%v", p.UID)
			putStrToMemcacheWithoutExp(w,r,cKey,p.PICTURE)
			PROFILE_PIC = p.PICTURE
 
			//cache country pic
			countryPic := fmt.Sprintf("%v/static/img/flags/%v.gif", getSchemeUrl(w,r), p.COUNTRY)
			cKey = fmt.Sprintf("COUNTRY_PIC_%v", p.UID)
			putStrToMemcacheWithoutExp(w,r,cKey,countryPic)
			
			//cache ringtone
			ringtoneURL := fmt.Sprintf("%v", p.RINGTONE)
			cKey = fmt.Sprintf("RINGTONE_URL_%v", p.UID)
			putStrToMemcacheWithoutExp(w,r,cKey,ringtoneURL)
			
			
		}
	}
	return PROFILE_PIC
}

//caches index of contents of all slides 
//when the website is accessed, it serves the cached pages
func TASK_MEMCACHER_contentsAll_Slides(w http.ResponseWriter, r *http.Request, TARGET string) {
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()

	var buffer3 bytes.Buffer
	//uid := ""
	switch TARGET {
	
		case "":
			q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(100)
			//log.Panicf("[S0233]")
			slides := make([]TDSSLIDE, 0, 100)
			if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
				//check overquota error
				checkError(w,r,"",err,"CHK_OQ")
				 //panic(err)
			}
			
			iCtr:=0
			for _, p := range slides{
				if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
				iCtr++
				buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"docs%v\">", iCtr))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
				buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all3\" width=\"16\">"))
				buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&SOUND=%v\" class=\"creator_name\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, SLIDE_SOUND_SET, p.DOC_STAT))
				buffer3.WriteString(fmt.Sprintf("			  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
				buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("	  </ul>"))
				buffer3.WriteString(fmt.Sprintf("	</div>"))
				buffer3.WriteString(fmt.Sprintf("	<article>"))
				buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
				buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
				buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
				//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
				buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
				buffer3.WriteString(fmt.Sprintf("	  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&SOUND=%v\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, SLIDE_SOUND_SET))
				buffer3.WriteString(fmt.Sprintf("	</article>"))
				buffer3.WriteString(fmt.Sprintf("</div>"))
				}
			}
 
			contentsHTML := buffer3.String()
			//cache contentsAll
			cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES")
			putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
			//fmt.Fprintf(w, "%v: %v<br>", cKey, contentsHTML)
			fmt.Fprintf(w, "%v<br>", contentsHTML)
			
		default:
			q := datastore.NewQuery("TDSSLIDE").Filter("CATEGORY =", TARGET).Limit(100)
			//log.Panicf("[S0234]")
			slides := make([]TDSSLIDE, 0, 100)
			if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
				 panic(err)
			}
			//log.Printf("datastoreClient.Get()  [35546]")
			iCtr:=0
			for _, p := range slides{
				if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
				iCtr++
				buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"docs%v\">", iCtr))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
				buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all4\" width=\"16\">"))
				buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&SOUND=%v\" class=\"creator_name\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, SLIDE_SOUND_SET, p.DOC_STAT))
				buffer3.WriteString(fmt.Sprintf("			  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
				buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("	  </ul>"))
				buffer3.WriteString(fmt.Sprintf("	</div>"))
				buffer3.WriteString(fmt.Sprintf("	<article>"))
				buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
				buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
				buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
				//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
				buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
				buffer3.WriteString(fmt.Sprintf("	  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&SOUND=%v\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, SLIDE_SOUND_SET))
				buffer3.WriteString(fmt.Sprintf("	</article>"))
				buffer3.WriteString(fmt.Sprintf("</div>"))
				}
			}
 
			contentsHTML := buffer3.String()
			//cache contentsAll
			cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v", TARGET)
			putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
			fmt.Fprintf(w, "%v<br>", contentsHTML)
	}
	
		
}

//caches index of contents of all articles 
//when the website is accessed, it serves the cached pages 
func TASK_MEMCACHER_contentsAll_Articles(w http.ResponseWriter, r *http.Request, TARGET string) {
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	var buffer3 bytes.Buffer
	//uid := ""
	switch TARGET {
	
		case "":
			q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(100)
			//log.Panicf("[S0235]")
			articles := make([]TDSARTL, 0, 100)
			if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
				//check overquota error
				checkError(w,r,"",err,"CHK_OQ")
				 //panic(err)
            }
            //log.Printf("datastoreClient.Get()  [35620]")
			iCtr:=0
			for _, p := range articles{
				if p.FL_SHARED == "Y" {
				iCtr++
				buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"adocs%v\">", iCtr))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
				buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all5\" width=\"16\">"))
				buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
				buffer3.WriteString(fmt.Sprintf("			  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
				buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("	  </ul>"))
				buffer3.WriteString(fmt.Sprintf("	</div>"))
				buffer3.WriteString(fmt.Sprintf("	<article>"))
				buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
				buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
				buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
				//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
				buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
				buffer3.WriteString(fmt.Sprintf("	  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&TITLE==%v&DOC_ID=%v&BLOB_KEY=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v\"></a>", p.TITLE, p.DOC_ID, p.BLOB_URL, p.DOC_ID, p.MUSIC_ID))
				buffer3.WriteString(fmt.Sprintf("	</article>"))
				buffer3.WriteString(fmt.Sprintf("</div>"))
				}
			}
 
			contentsHTML := buffer3.String()
			//cache contentsAll
			cKey := "CACHE_ARTICLES_CONTENTS_ALL_TILES"
			putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
			//fmt.Fprintf(w, "%v: %v<br>", cKey, contentsHTML)
			fmt.Fprintf(w, "%v<br>", contentsHTML)
	default:
			q := datastore.NewQuery("TDSARTL").Filter("CATEGORY =", TARGET).Limit(100)
			//log.Panicf("[S0236]")
			articles := make([]TDSARTL, 0, 100)
			if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
				 panic(err)
            }
            //log.Printf("datastoreClient.Get()  [35675]")
			iCtr:=0
			for _, p := range articles{
				if p.FL_SHARED == "Y" {
				iCtr++
				buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"adocs%v\">", iCtr))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
				buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all6\" width=\"16\">"))
				buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v\" class=\"creator_name\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY,p.DOC_STAT))
				buffer3.WriteString(fmt.Sprintf("			  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
				buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("		<li>"))
				buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
				buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
				buffer3.WriteString(fmt.Sprintf("		</li>"))
				buffer3.WriteString(fmt.Sprintf("	  </ul>"))
				buffer3.WriteString(fmt.Sprintf("	</div>"))
				buffer3.WriteString(fmt.Sprintf("	<article>"))
				buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
				buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
				buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
				//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
				buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
				buffer3.WriteString(fmt.Sprintf("	  </div>"))
				buffer3.WriteString(fmt.Sprintf(""))
				buffer3.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&TITLE==%v&DOC_ID=%v&BLOB_KEY=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v\"></a>", p.TITLE, p.DOC_ID, p.BLOB_URL, p.DOC_ID, p.CATEGORY, p.MUSIC_ID))
				buffer3.WriteString(fmt.Sprintf("	</article>"))
				buffer3.WriteString(fmt.Sprintf("</div>"))
				}
			}
 
			contentsHTML := buffer3.String()
			//cache contentsAll
			cKey := fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v", TARGET)
			putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
			fmt.Fprintf(w, "%v<br>", contentsHTML)
	}
}

//edits user profile and other user specific operations 
func peopleEdit(w http.ResponseWriter, r *http.Request) {
	
	checkReferrer(w,r)
    //D0086
    datastoreClient := createClientDS()

	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//u := user.Current(c)
	h := r.Header
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())	
	if FL_PROC_OK == false {return}
	if uid == "" {
		if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
			uid = r.Header.Get("X-Goog-Authenticated-User-Email")
		}
	}
	updateUserActiveData(w, r, c, uid, "/people-edit")  	
	EDIT_PEOPLE_FUNC := r.FormValue("EditPeopleFunc")
	IS_NEW_PROFILE := r.FormValue("NewProfile")
	UID := fmt.Sprintf("%v",r.FormValue("UID"))
	RATING := r.FormValue("RATING")
	country := r.FormValue("COUNTRY")
	if country == "" {
		country = h.Get("X-AppEngine-Country")
	}
	
	r.ParseForm()
	switch EDIT_PEOPLE_FUNC {
 
	case "TutorialEnable": 	
			IS_NEW_USER_MEM_FLAG := fmt.Sprintf("IS_NEW_USER_MEM_FLAG_%s", UID)
			//disable
			putStrToMemcacheWithoutExp(w,r,IS_NEW_USER_MEM_FLAG,"Y")
 
			msgDtl := "[U00041] SUCCESS: Tutorials have been enabled."
			msgTyp := "success"
			msgURL := "/desktop0#page"
			action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go to your desktop.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
 
	case "TutorialDisable": 	
			IS_NEW_USER_MEM_FLAG := fmt.Sprintf("IS_NEW_USER_MEM_FLAG_%s", UID)
 
			putStrToMemcacheWithoutExp(w,r,IS_NEW_USER_MEM_FLAG,"")
 
			msgDtl := "[U00042] SUCCESS: Tutorials have been disabled. To re-enable, go to Help section."
			msgTyp := "success"
			msgURL := "/desktop0"
			action := "U00042"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
			
	case "HideUser":
 
		USER := fmt.Sprintf("%v",r.FormValue("UID"))
		if strings.TrimSpace(USER) == "" {
			return
		}
 
		q := datastore.NewQuery("TDSUSERS").Filter("USER =", USER).Limit(1)
		//log.Panicf("[S0237]")
		users := make([]TDSUSERS, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
			 panic(err)
         }
         //log.Printf("datastoreClient.Get()  [35798]")
		for _, p := range users{
			if p.USER == uid {
				p.USER_ACC_OPT = "Invisible"
				key := datastore.NameKey("TDSUSERS", USER, nil)
				if _, err := datastoreClient.Put(c, key, &p); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Put()  [35806]")
				//log.Panicf("[S0238]")
				//update user cache
				usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER)
				var buffer3 bytes.Buffer
				buffer3.WriteString(fmt.Sprintf("%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER,	p.USER,	p.COMPANY_ID,	p.CLOUD_NAME,	p.GROUP_ID,	p.LOGGED_IN,	p.LAST_LOGIN,	p.USER_ACC_OPT,	p.FL_QUOTA,	p.FL_BILLED,	p.FL_WORK,	p.FL_WF_ID, p.USER_ACC_TYP))
				TDSUSER_CACHE := buffer3.String()
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,TDSUSER_CACHE)
 
				//clear memcache
				putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW","")
				
				msgDtl := "[U00043] SUCCESS: USER HAS BEEN MADE INVISIBLE!"
				msgTyp := "success"
				msgURL := "/"
				action := fmt.Sprintf("Congratulations! You may now close this tab.")
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				break
				//return
				
			}
		}
 
	case "UnhideUser":
						
		USER := fmt.Sprintf("%v",r.FormValue("UID"))
		if strings.TrimSpace(USER) == "" {
			return
		}
 
		q := datastore.NewQuery("TDSUSERS").Filter("USER =", USER).Limit(1)
		//log.Panicf("[S0239]")
		users := make([]TDSUSERS, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
			 panic(err)
         }
         //log.Printf("datastoreClient.Get()  [35843]")
		for _, p := range users{
			if p.USER == uid {
				p.USER_ACC_OPT = "Normal"
				key := datastore.NameKey("TDSUSERS", USER, nil)
				if _, err := datastoreClient.Put(c, key, &p); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Put()  [35851]")
				//log.Panicf("[S0240]")
				//update user cache
				usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER)
				var buffer3 bytes.Buffer
				buffer3.WriteString(fmt.Sprintf("%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER,	p.USER,	p.COMPANY_ID,	p.CLOUD_NAME,	p.GROUP_ID,	p.LOGGED_IN,	p.LAST_LOGIN,	p.USER_ACC_OPT,	p.FL_QUOTA,	p.FL_BILLED,	p.FL_WORK,	p.FL_WF_ID, p.USER_ACC_TYP))
				TDSUSER_CACHE := buffer3.String()
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,TDSUSER_CACHE)
 
				//clear memcache
				putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW","")
				
				msgDtl := "[U00044] SUCCESS: USER HAS BEEN MADE VISIBLE!"
				msgTyp := "success"
				msgURL := "/"
				action := fmt.Sprintf("Congratulations! You may now close this tab.")
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				break
				//return
				
			}
		}
			
	case "RatePeople":
	    if (RATING == "" || UID == "" || UID == uid) {
			msgDtl := "[U00045] ERROR: Invalid operation."
			msgTyp := "error"
			msgURL := "/?q=home"
			action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Carousel homepage.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		q := datastore.NewQuery("TDSPROF").Filter("UID =", UID).Limit(1)
		//log.Panicf("[S0241]")
		profile := make([]TDSPROF, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Get()  [35891]")
		for _, p := range profile{
			msgDtl3 := ""
			if RATING == "PLUS" {
                time.AfterFunc(5*time.Second, func() {
                    laterQueueRatings(c, "RatePeople-PLUS", p.UID, uid)
                })
				//notify all users of this event via channels
				msgDtl3 = fmt.Sprintf("UID:%v has received positive rating", p.UID, )
				
			} else {
                time.AfterFunc(5*time.Second, func() {
                    laterQueueRatings(c, "RatePeople-NEG", p.UID, uid)
                })
				//notify all users of this event via channels
				msgDtl3 = fmt.Sprintf("UID:%v has received negative rating.", p.UID)
			}
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,p.UID,"/people",""),"")
			//queue feedback
			
			msgDtl := "[U00046] SUCCESS: Rating request has been queued. User will be notified once it has been executed."
			msgTyp := "success"
			msgURL := "/"
			action := fmt.Sprintf("Congratulations! You may now close this tab.")
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			break
			//return
		}
	case "EditPeople":
		//get Profile details from DS
		FL_PROFILE_FOUND := false
		if UID == "" {
			UID = uid
		}
		q := datastore.NewQuery("TDSPROF").Filter("UID =", UID).Limit(1)
		//log.Panicf("[S0242]")
		profile := make([]TDSPROF, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Get()  [35932]")
		for _, p := range profile{
			FL_PROFILE_FOUND = true
			if err := htmlHeaderModalProfile.Execute(w, ""); err != nil {
			  panic(err)
			}
			p.COUNTRY = country
			if err := profileEditTemplate.Execute(w, profile); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			//break
			return
		}
		if FL_PROFILE_FOUND == false {
			if err := htmlHeaderModalProfile.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := profileEditTemplateNew.Execute(w, uid); err != nil {
			  panic(err)
			}
			if err := profileEditTemplateNew1.Execute(w, country); err != nil {
			  panic(err)
			}
			if err := profileEditTemplateNew2.Execute(w, ""); err != nil {
			  panic(err)
			}
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
		}
		return
 
	case "ViewPeople":
		//get Profile details from DS
		
		if UID == "" || UID != uid{
			UID = uid
		}
		
		updateUserActiveData(w, r, c, uid, "/view-profile@"+UID)
		viewProfile(w,r,UID,uid)
		return
		
	case "EditPic":
			//blobstore - upload picture
			//------------------------------
			uploadURL := "/upload-people"
			err := rootTemplatePic.Execute(w, uploadURL)
			if err != nil {
					////log.Panicf("%v", err)
			}
			err = rootTemplate2Pic.Execute(w, UID)
			if err != nil {
					////log.Panicf("%v", err)
			}
			//blobstore end
					
	case "deleteMyAccount":
	
		///people-edit?EditPeopleFunc=deleteMyAccount&UID=%v
		USER := fmt.Sprintf("%v",r.FormValue("UID"))
		confirmed := r.FormValue("confirmed")
 
		if confirmed != "yes" || USER == "" {
			fmt.Fprintf(w, "<h1><a href=\"people-edit?EditPeopleFunc=deleteMyAccount&UID=%v&confirmed=yes\">Confirm Account Deletion!</a></h1>", uid)
			return			
		}
		
		if isExceptionAccount[USER] == true {
			msgDtl := "[U00016]ERROR: USER CAN ONLY BE MAINTAINED MANUALLY."
			msgTyp := "error"
			msgURL := "/"
			action := fmt.Sprintf("Apologies for this access issue! Please contact administrator.")
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
 
 		if USER != uid {
			msgDtl := "[U00016b]ERROR: USER OPERATION INVALID DUE TO INPUT PARAMETERS."
			msgTyp := "error"
			msgURL := "/"
			action := fmt.Sprintf("Apologies for this access issue! Please contact administrator.")
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}		
		
		//USER = uid
		
		key := datastore.NameKey("TDSUSERS", USER, nil)
		//fmt.Fprintf(w, "DEBUG8>> .<br>")
		datastoreClient.Delete(c, key)	
 
		//fmt.Fprintf(w, "DEBUG9>> .<br>")
		key = datastore.NameKey("TDSPROF", USER, nil)
		datastoreClient.Delete(c, key)
 
		usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER)
		putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"")
		
		putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE","")
		
		putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE-TILES","")
		
		putStrToMemcacheWithoutExp(w,r,"LAST_LOGIN_TIMESTAMP","")
		
		//notify channel
		msgDtl3 := fmt.Sprintf("UID:%v has deleted his/her account and profile.", USER)
		sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,USER,"/people-edit",""),"")
		fmt.Fprintf(w, "Profile has been deleted. You may now logout.")
		
		return
		
	case "SetMyLocalNotesMediaID":
		MEDIA_ID2 := r.FormValue("MEDIA_ID")
		MEDIA_ID := str2int(MEDIA_ID2)
		cfgName := fmt.Sprintf("PERSONAL_Local_Notes_Media_ID_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: MEDIA_ID,
				TXT_VAL: "",
				CFG_DESC: "Set via Media Gallery",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36067]")
		//log.Panicf("[S0243]")
		//update cache
		cKey := fmt.Sprintf("LOCAL_NOTES_CACHE_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,MEDIA_ID2)
		fmt.Fprintf(w, "Local Notes Media ID has been set<br>.")
		
	case "SetMyDefaultSlideID":
		MEDIA_ID2 := r.FormValue("MEDIA_ID")
		MEDIA_ID := str2int(MEDIA_ID2)
		cfgName := fmt.Sprintf("PERSONAL_Default_Slide_Media_ID_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: MEDIA_ID,
				TXT_VAL: "",
				CFG_DESC: "Set via Slides",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36092]")
		//log.Panicf("[S0244]")
		cKey := fmt.Sprintf("DEFAULT_SLIDE_CACHE_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,MEDIA_ID2)
		redURL := "/tools?FUNC=WIDGET&t=MyDefaultSlide"
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	case "SetMyLocation":
		LATLON := strings.TrimSpace(r.FormValue("LATLON"))
		if LATLON == "" {
			fmt.Fprintf(w, "ERROR: missing input<br>.")
			return
		}
		cfgName := fmt.Sprintf("PERSONAL_Default_Location_%v", uid)
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: LATLON,
				CFG_DESC: "Current latitude and longitude",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
		//post this to site server
		procBroadcastCustomLoc(w,r,uid,LATLON)
		fmt.Fprintf(w, "Your current latitude and longitude has been set<br>.")
		return
	case "SetGithubUser":
		guser := r.FormValue("guser")
		cfgName := fmt.Sprintf("PERSONAL_Github_User_%v", uid)
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: "guser",
				CFG_DESC: "Github account",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36143]")
		//log.Panicf("[S0245]")
		cKey := fmt.Sprintf("DEFAULT_GITHUB_USER_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,guser)
		fmt.Fprintf(w, "Github account has been set<br>.")

	case "SET_UWM_SHARE":
		uwm := r.FormValue("u")
		shared := r.FormValue("VAL")
		pass := r.FormValue("KEY")
		desktopKey := fmt.Sprintf("desktop%v", uwm)
		q := datastore.NewQuery("TDSCATS").Filter("__key__ =", getKeyDesktop(c,desktopKey))
		recCount,_ := datastoreClient.Count(c,q)
		if recCount > 0 {
			//exists
			//log.Printf("exists")
			cats := make([]TDSCATS, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &cats); err != nil {
				//panic(err)
            }
            //log.Printf("datastoreClient.Get()  [36163]")
			for _, x := range cats {
				//catDesc = x.CAT_DESC
				if shared == x.CAT_SHARED && pass == x.CAT_PASS {
					break
				}
				g := TDSCATS{
						CAT_NUM: x.CAT_NUM,
						CAT_NAME: x.CAT_NAME,
						CAT_DESC: x.CAT_DESC,
						CAT_SHARED: shared,
						CAT_PASS: pass,
						//D0067x
						CAT_GRP: x.CAT_GRP,
				}
                _, err := datastoreClient.Put(c, getKeyDesktop(c,desktopKey), &g)
                //log.Printf("datastoreClient.Put()  [36179]")
				//log.Panicf("[S0021]")
				if err != nil {
						panic(err)
						//return
				}
				//log.Printf("updated")
				break
			}
		}
		fmt.Fprintf(w, "UWM sharing settings have been saved!")
		return
	case "SetStartMenuTheme":
		color := r.FormValue("COLOR1")
		if len(color) != 6 {
			fmt.Fprintf(w, "Invalid color value.")
			return
		}
		color = fmt.Sprintf("#%v", color)
		cfgName := fmt.Sprintf("PERSONAL_StartMenu_Color_%v", uid)
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: color,
				CFG_DESC: "Set color of Start Menu",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36212]")
		//log.Panicf("[S0246]")
		//update cache
		cKey := fmt.Sprintf("START_MENU_COLOR_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,color)
		fmt.Fprintf(w, "Start Menu Color has been set<br>.")
	case "SetActiveWindowsTheme":
		color := r.FormValue("COLOR2")
		if len(color) != 6 {
			fmt.Fprintf(w, "Invalid color value.")
			return
		}
		color = fmt.Sprintf("#%v", color)
		cfgName := fmt.Sprintf("PERSONAL_ActiveWindows_Color_%v", uid)
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: color,
				CFG_DESC: "Set color of Active Windows",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36239]")
		//log.Panicf("[S0247]")
 
		//update cache
		cKey := fmt.Sprintf("ACT_WIN_COLOR_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,color)
 
		fmt.Fprintf(w, "Active Windows Color has been set<br>.")
		
	case "SetInActiveWindowsTheme":
		color := r.FormValue("COLOR3")
		if len(color) != 6 {
			fmt.Fprintf(w, "Invalid color value.")
			return
		}
		color = fmt.Sprintf("#%v", color)
		cfgName := fmt.Sprintf("PERSONAL_InActiveWindows_Color_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: color,
				CFG_DESC: "Set color of Inactive Window",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36270]")
		//log.Panicf("[S0248]")
 
		//update cache
		cKey := fmt.Sprintf("INACT_WIN_COLOR_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,color)
 
		fmt.Fprintf(w, "In-Active Windows Color has been set<br>.")
 
	case "SetAppsProvider":
		val := r.FormValue("PROV")
		cfgName := fmt.Sprintf("PERSONAL_Apps_Provider_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: val,
				CFG_DESC: "Set apps provider",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36296]")
		//log.Panicf("[S0249]")
 
		//update cache
		cKey := fmt.Sprintf("APPS_PROVIDER_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,val)
		
		cKey = "TOP_LIST_MENU_CACHE"
		putStrToMemcacheWithoutExp(w,r,cKey,"")
		
		cKey = fmt.Sprintf("PROVIDER_APPS_DB")
		putStrToMemcacheWithoutExp(w,r,cKey,"")
		
		cKey = fmt.Sprintf("PROVIDER_APPS_MSFT")
		putStrToMemcacheWithoutExp(w,r,cKey,"")
		
		cKey = fmt.Sprintf("PROVIDER_APPS_GOGL")
		putStrToMemcacheWithoutExp(w,r,cKey,"")
		
		fmt.Fprintf(w, "Apps provider has been set<br>.")

	case "SetSpeechVoice":
		val := r.FormValue("VOICE")
		cfgName := fmt.Sprintf("PERSONAL_SpeechVoice_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: val,
				CFG_DESC: "Set speech voice",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
 
		//update cache
		cKey := fmt.Sprintf("SPEECH_VOICE_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,val)
		
		//cKey = "TOP_LIST_MENU_CACHE"
		//putStrToMemcacheWithoutExp(w,r,cKey,"")
		
		fmt.Fprintf(w, "Speech voice has been set<br>.")
		
	case "SetPrivacy":
		val := r.FormValue("PRIV")
		cfgName := fmt.Sprintf("PERSONAL_Privacy_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: val,
				CFG_DESC: "Set privacy",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36334]")
		//log.Panicf("[S0250]")
 
		//update cache
		cKey := fmt.Sprintf("PERSONAL_PRIVACY_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,val)
		
		fmt.Fprintf(w, "Your privacy has been set to %v!", val)
		
	case "EDIT_TOP_LIST_MENU_MINE":
	//SPC_OPT to /people-edit?EditPeopleFunc=SET_TOP_LIST_MENU_MINE_SOURCE&MEDIA_ID=787
		//get config id
		cfgName := fmt.Sprintf("PERSONAL_Top_List_Menu_Media_ID_%v", uid)
		docID := 0
		_, docID = getTDSCNFG(w,r,1,cfgName)
		if docID > 0 {
			redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_TOP_LIST_MENU_MINE", docID, docID)
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
			http.Redirect(w, r, redURL, http.StatusFound)
		}
		return
 
	case "EDIT_CONTACTS_LIST":
		cfgName := fmt.Sprintf("PERSONAL_Contacts_Media_ID_%v", uid)
		docID := 0
		_, docID = getTDSCNFG(w,r,1,cfgName)
		if docID > 0 {
			redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_CONTACTS_LIST", docID, docID)
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
			http.Redirect(w, r, redURL, http.StatusFound)
		}
		return
	case "EDIT_WINDOWS_MINE":
		//SPC_OPT to /people-edit?EditPeopleFunc=SET_WINDOWS_MINE_SOURCE&MEDIA_ID=787
		//get config id
		cfgName := fmt.Sprintf("PERSONAL_Windows_Media_ID_%v", uid)
		docID := 0
		_, docID = getTDSCNFG(w,r,1,cfgName)
		if docID > 0 {
			redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_WINDOWS_MINE", docID, docID)
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
			http.Redirect(w, r, redURL, http.StatusFound)
		}
		return
	//D0113
	case "EDIT_CUSTOM_SEARCH_MINE":
		//SPC_OPT to /people-edit?EditPeopleFunc=EDIT_CUSTOM_SEARCH_MINE&MEDIA_ID=787
		//get config id
		cfgName := fmt.Sprintf("PERSONAL_Search_Media_ID_%v", uid)
		docID := 0
		_, docID = getTDSCNFG(w,r,1,cfgName)
		if docID > 0 {
			redURL := fmt.Sprintf("/editor?MEDIA_ID=%d&SID=TDSMEDIA-%d&SPC_OPT=EDIT_CUSTOM_SEARCH_MINE", docID, docID)
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0")
			http.Redirect(w, r, redURL, http.StatusFound)
		}
		return
		
		
	case "EDIT_WINDOWS_SUBUWM":
		uwmsource := ""
		docID := 0
		if r.FormValue("u") == "" {
			uwmsource = ""
		} else {
			uwmsource = getUWMSource(w,r,uid,r.FormValue("u"))
			if uwmsource != "" {
				SPL := strings.Split(uwmsource,"-")
				DOC_ID := "0"
				if len(SPL) > 1 {
					DOC_ID = SPL[1]
				}
				docID = str2int(DOC_ID)
			}
		}
		
		if uwmsource != "" {
			//redURL := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v", docID)
			redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=%v&SID=TDSMEDIA-%v", docID, docID)
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			fmt.Fprintf(w, "<html>Hi %v! No UWM source has been set for UWM%v. Please check documentation on how to set the UWM source. But here is how to set it up: <li>You may <a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0\">Create Initial Text File</a>. You can set it as blank for now. <li>Then get the SID and enter ULAPPH command in start menu: <b>setuwm TDSMEDIA-ID</b> in order to set the UWM for this desktop.</html>", uid, r.FormValue("u"))
		}
		return
		
		
	case "EDIT_TOPICS_SUBUWM":
		topicsource := ""
		docID := 0
		if r.FormValue("u") == "" {
			topicsource = ""
		} else {
			topicsource = getTopicsSource(w,r,uid,r.FormValue("u"))
			if topicsource != "" {
				SPL := strings.Split(topicsource,"-")
				DOC_ID := "0"
				if len(SPL) > 1 {
					DOC_ID = SPL[1]
				}
				docID = str2int(DOC_ID)
			}
		}
		
		if topicsource != "" {
			//redURL := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v", docID)
			redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=%v&SID=TDSMEDIA-%v", docID, docID)
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			fmt.Fprintf(w, "No topic source has been set for UWM%v. Please check documentation on how to set the topic source. You may <a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0\">Create Initial Text File</a>.", r.FormValue("u"))
		}
		return
	//D0066
	case "EDIT_BOT_SUBUWM":
		botsource := ""
		docID := 0
		if r.FormValue("u") == "" {
			botsource = ""
		} else {
			botsource = getBotSource(w,r,uid,r.FormValue("u"))
			if botsource != "" {
				SPL := strings.Split(botsource,"-")
				DOC_ID := "0"
				if len(SPL) > 1 {
					DOC_ID = SPL[1]
				}
				docID = str2int(DOC_ID)
			}
		}
		
		if botsource != "" {
			redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=%v&SID=TDSMEDIA-%v", docID, docID)
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			fmt.Fprintf(w, "No bot source has been set for UWM%v. Please check documentation on how to set the bot source. You may <a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0\">Create Initial Text File</a>.", r.FormValue("u"))
		}
		return

	case "EDIT_SHARING_SUBUWM":
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		if FL_VALID_USER == true {
			if GROUP_ID != "GRP_ADMIN" {
				fmt.Fprintf(w, "ERROR: Only ADMINs can change UWM sharing settings.")
				return
			}
		}
		//fmt.Fprintf(w, "Setting UWM sharing settings.")
		uwm := r.FormValue("u")
		//check share status
		status := "N"
		ran := "xxxxxxxxxxx"
		desktopKey := fmt.Sprintf("desktop%v", uwm)
		q := datastore.NewQuery("TDSCATS").Filter("__key__ =", getKeyDesktop(c,desktopKey))
		recCount,_ := datastoreClient.Count(c,q)
		if recCount > 0 {
			//exists
			cats := make([]TDSCATS, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &cats); err != nil {
				//panic(err)
            }
            //log.Printf("datastoreClient.Get()  [36488]")
			for _, x := range cats {
				//catDesc = x.CAT_DESC
				status = x.CAT_SHARED
				ran = x.CAT_PASS
				break
			}	
		}
		TEMPDATA := TEMPSTRUCT2{
			STR_FILLER1: uwm,
			STR_FILLER2: status,
			STR_FILLER3: ran,
			STR_FILLER4: uid,
		}
		if err := htmlUwmSharing.Execute(w, &TEMPDATA); err != nil {
		  panic(err)
		}
		if err := htmlFooterBasic.Execute(w, ""); err != nil {
			 panic(err)
		}
		return
		
		
	case "SET_TOP_LIST_MENU_MINE_SOURCE":
		MEDIA_ID2 := r.FormValue("MEDIA_ID")
		MEDIA_ID := str2int(MEDIA_ID2)
		cfgName := fmt.Sprintf("PERSONAL_Top_List_Menu_Media_ID_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: MEDIA_ID,
				TXT_VAL: "",
				CFG_DESC: "Set via Media Gallery",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36529]")
		//log.Panicf("[S0256]")
 
		//update cache
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
		
 
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		//secCtr := 0
		for s.Scan() {
			//fmt.Fprintf(w, "%v", s.Text())
			if len(s.Text()) > 0 {			
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			} else {
				buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		}
		
		//cKey := ""
		cKey := fmt.Sprintf("TOP_LIST_MENU_PERSONAL_CACHE_%v", uid)
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		//reset autocomp cache
		cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKeyAll,"")
	
		fmt.Fprintf(w, "Top List Personal Menu has been set<br><br>.")
		fmt.Fprintf(w, "%v", buf.String())	
		
	case "SET_WINDOWS_MINE_SOURCE":
		MEDIA_ID2 := r.FormValue("MEDIA_ID")
		MEDIA_ID := str2int(MEDIA_ID2)
		cfgName := fmt.Sprintf("PERSONAL_Windows_Media_ID_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: MEDIA_ID,
				TXT_VAL: "",
				CFG_DESC: "Set via Media Gallery",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36584]")
		//log.Panicf("[S0257]")
 
		//update cache
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
		
 
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		//secCtr := 0
		for s.Scan() {
			//fmt.Fprintf(w, "%v", s.Text())
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			} else {
				buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		}
		defuwms := getDefUwms(w,r)
		buf.WriteString(fmt.Sprintf("%v", defuwms))
		
		//cKey := ""
		cKey := fmt.Sprintf("WINDOWS_PERSONAL_CACHE_%v", uid)
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		fmt.Fprintf(w, "UWM Windows auto-load config has been set. Please reload.<br><br>")
		//fmt.Fprintf(w, "%v", buf.String())
	//D0113
	case "SET_CUSTOM_SEARCH_MINE_SOURCE":
		MEDIA_ID2 := r.FormValue("MEDIA_ID")
		MEDIA_ID := str2int(MEDIA_ID2)
		cfgName := fmt.Sprintf("PERSONAL_Search_Media_ID_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: MEDIA_ID,
				TXT_VAL: "",
				CFG_DESC: "Set via Media Gallery",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36584]")
		//log.Panicf("[S0257]")
 
		//update cache
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
		
 
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		//secCtr := 0
		for s.Scan() {
			//fmt.Fprintf(w, "%v", s.Text())
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			} else {
				buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		}
		defuwms := getDefUwms(w,r)
		buf.WriteString(fmt.Sprintf("%v", defuwms))
		
		//cKey := ""
		//cKey := fmt.Sprintf("CUSTOM_SEARCH_CACHE_%v", uid)
		//putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		fmt.Fprintf(w, "UWM Custom Search config has been set. Please reload.<br><br>")
		//fmt.Fprintf(w, "%v", buf.String())		
 
	case "SET_CONTACTS_LIST":
		MEDIA_ID2 := r.FormValue("MEDIA_ID")
		MEDIA_ID := str2int(MEDIA_ID2)
		cfgName := fmt.Sprintf("PERSONAL_Contacts_Media_ID_%v", uid)
		
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: cfgName,
				DAT_TYP: "TXT",
				NUM_VAL: MEDIA_ID,
				TXT_VAL: "",
				CFG_DESC: "Set via Media Gallery",
		}
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36637]")
		//log.Panicf("[S0258]")
 
		//update cache
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
		
 
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		//secCtr := 0
		for s.Scan() {
			//fmt.Fprintf(w, "%v", s.Text())
			if len(s.Text()) > 0 {
				thisStr := fmt.Sprintf("%v", s.Text())
				if string(thisStr[0]) != "#" {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			} else {
				buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		}
		
		//cKey := ""
		cKey := fmt.Sprintf("CONTACTS_PERSONAL_CACHE_%v", uid)
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		fmt.Fprintf(w, "Contacts list config has been set.<br><br>")
		//fmt.Fprintf(w, "%v", buf.String())
 
	case "SET_CACHE_CONFIG":
		//for config texts
		config := r.FormValue("CNFG")
		value := r.FormValue("VAL")
		cKey := fmt.Sprintf("%v_%v", config, uid)		
		putStrToMemcacheWithoutExp(w,r,cKey,value)
 
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				//CFG_ID: "SYSTEM_URLFETCH_Media_ID",
				CFG_ID: cKey,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: value,
				CFG_DESC: "Set via UWM Switch",
		}
		key := datastore.NameKey("TDSCNFG", cKey, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
        }
        //log.Printf("datastoreClient.Put()  [36691]")
		fmt.Fprintf(w, "[OK] SET_CACHE_CONFIG: %v = %v<br><br>", config, value)
		
	case "SaveProfile":
		UID := fmt.Sprintf("%v",r.FormValue("UID"))
		//UID := uid
		COUNTRY := r.FormValue("COUNTRY")
		if COUNTRY == "" {
			COUNTRY = h.Get("X-AppEngine-Country")
		}
		REGION := r.FormValue("REGION")
		if REGION == "" {
			REGION = h.Get("X-AppEngine-Region")
		}
		CITY := r.FormValue("CITY")
		if CITY == "" {
			CITY = h.Get("X-AppEngine-City")
		}
		MUNICIPALITY := r.FormValue("MUNICIPALITY")
		BARANGAY := r.FormValue("BARANGAY")
		SUBDIVISION := r.FormValue("SUBDIVISION")
		BIRTH_DAY := r.FormValue("BIRTH_DAY")
		ELEM_SCHOOL := r.FormValue("ELEM_SCHOOL")
		HIGH_SCHOOL := r.FormValue("HIGH_SCHOOL")
		COLLEGE := r.FormValue("COLLEGE")
		POST_GRAD := r.FormValue("POST_GRAD")
		PROFESSION := r.FormValue("PROFESSION")
		COMPANY := r.FormValue("COMPANY")
		CONTACT_NUM := r.FormValue("CONTACT_NUM")
		SOCIAL_1 := r.FormValue("SOCIAL_1")
		SOCIAL_2 := r.FormValue("SOCIAL_2")
		SOCIAL_3 := r.FormValue("SOCIAL_3")
		REG_VOTER := r.FormValue("REG_VOTER")
		ID_NUMBER := r.FormValue("ID_NUMBER")
		I_HAVE_TEXT := r.FormValue("I_HAVE_TEXT")
		I_NEED_TEXT := r.FormValue("I_NEED_TEXT")
		BADGE	:= r.FormValue("BADGE")
		PICTURE	:= r.FormValue("PICTURE")
		iCRED_PTS := getCreditPoints(w, r, UID)
		POS_VOTES := r.FormValue("POS_VOTES")	
		iPOS_VOTES := str2int(POS_VOTES)
		NEG_VOTES := r.FormValue("NEG_VOTES")
		iNEG_VOTES := str2int(NEG_VOTES)
		iLIFE_RATING := 0
		if iPOS_VOTES >= 1 {
			iLIFE_RATING = 100 * (iPOS_VOTES) / (iPOS_VOTES + iNEG_VOTES)
		}
		FILLER_1 := r.FormValue("FILLER_1")	
		FILLER_2 := r.FormValue("FILLER_2")	
		FILLER_3 := r.FormValue("FILLER_3")
		RINGTONE := r.FormValue("RINGTONE")
		//thisPicture := ""
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
		
			if (GROUP_ID == "GRP_ADMIN") || (GROUP_ID == "GRP_USER") {
				q := datastore.NewQuery("TDSPROF").Filter("UID =", UID).Limit(1)
				//D0039
				recCount,_ := datastoreClient.Count(c,q)
				//log.Panicf("[S0259]")
				if IS_NEW_PROFILE == "YES" && recCount <=0 {
					q = datastore.NewQuery("TDSPROF").Limit(1)
					//log.Panicf("[S0260]")
					rt := time.Now().Local()
					BADGE = fmt.Sprintf("%v", rt.Format("20060102150405"))
					iCRED_PTS = 20
					f := TDSPROF {
						SYS_VER: 1,	
						UID: uid,
						PICTURE: "/static/img/no-profile.png",
						BIRTH_DAY: BIRTH_DAY,	
						ELEM_SCHOOL: ELEM_SCHOOL,
						HIGH_SCHOOL: HIGH_SCHOOL,
						COLLEGE: COLLEGE,
						POST_GRAD: POST_GRAD,
						PROFESSION: PROFESSION,
						COMPANY: COMPANY,
						CONTACT_NUM: CONTACT_NUM,
						SOCIAL_1: SOCIAL_1,	
						SOCIAL_2: SOCIAL_2,	
						SOCIAL_3: SOCIAL_3,
						COUNTRY: COUNTRY,
						REGION: REGION,
						CITY: CITY,
						MUNICIPALITY: MUNICIPALITY,	
						BARANGAY: BARANGAY,
						SUBDIVISION: SUBDIVISION,
						REG_VOTER: REG_VOTER,
						ID_NUMBER: ID_NUMBER,
						I_HAVE_TEXT: I_HAVE_TEXT,
						I_NEED_TEXT: I_NEED_TEXT,
						BADGE: BADGE,
						CRED_PTS: 20 ,
						POS_VOTES: 0,
						NEG_VOTES: 0,
						LIFE_RATING: 100,
						FILLER_1: FILLER_1,
						FILLER_2: FILLER_2,
						FILLER_3: FILLER_3,
						RINGTONE: RINGTONE,
					}
			 
					dsKey := fmt.Sprintf("%s", uid)
					key2 := datastore.NameKey("TDSPROF", dsKey, nil)
			 
					if _, err := datastoreClient.Put(c, key2, &f); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [36802]")
					return
				}
				profile := make([]TDSPROF, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [36809]")
				for _, p := range profile{
					p.SYS_VER = 1
					p.COUNTRY = COUNTRY
					p.REGION = REGION
					p.CITY = CITY
					p.MUNICIPALITY = MUNICIPALITY
					p.BARANGAY = BARANGAY
					p.SUBDIVISION = SUBDIVISION
					p.BIRTH_DAY = BIRTH_DAY
					p.ELEM_SCHOOL = ELEM_SCHOOL
					p.HIGH_SCHOOL = HIGH_SCHOOL
					p.COLLEGE = COLLEGE
					p.POST_GRAD = POST_GRAD
					p.PROFESSION = PROFESSION
					p.COMPANY = COMPANY
					p.CONTACT_NUM = CONTACT_NUM
					p.SOCIAL_1 = SOCIAL_1
					p.SOCIAL_2 = SOCIAL_2
					p.SOCIAL_3 = SOCIAL_3
					p.REG_VOTER = REG_VOTER
					p.ID_NUMBER = ID_NUMBER
					p.I_HAVE_TEXT = I_HAVE_TEXT
					p.I_NEED_TEXT = I_NEED_TEXT
					p.BADGE = BADGE
					p.CRED_PTS = iCRED_PTS
					p.POS_VOTES	 = iPOS_VOTES
					p.NEG_VOTES	 = iNEG_VOTES
					p.LIFE_RATING = iLIFE_RATING
					p.FILLER_1 = FILLER_1	
					p.FILLER_2 = FILLER_2
					p.FILLER_3 = FILLER_3
					if IS_NEW_PROFILE == "YES" {
						p.UID = uid
						p.PICTURE = "/static/img/emoticon-happy.png"
						//thisPicture = p.PICTURE
					}
					p.RINGTONE = RINGTONE
					dsKey := fmt.Sprintf("%s", p.UID)
					//fmt.Fprintf(w, "DEBUG27>> .<br>")
					key := datastore.NameKey("TDSPROF", dsKey, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 //panic(err)
						 fmt.Fprintf(w, "ERROR: %v", err)
						return
                    }
                    //log.Printf("datastoreClient.Put()  [36855]")
					//log.Panicf("[S0261]")
 
					cKey := fmt.Sprintf("SLIDES_PROFILE_VIEW_%s", p.UID)
						//save slides text in memcache
						var lines []string
						lines = append(lines, fmt.Sprintf("People Profile"))
						lines = append(lines, fmt.Sprintf("UID: %v", p.UID))
						const layout = "2 Jan 2006"
						t := time.Now().Local()
						lines = append(lines, fmt.Sprintf("%v", t.Format(layout)))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("%v", p.UID))
						lines = append(lines, fmt.Sprintf(""))
 
						if SYS_DISP_ADS_CONTENT == true {
							//put ads
							for i := 1; i < 4; i++ {
								//append ads
								lines = append(lines, " ")
								//thisAd := fmt.Sprintf("* ")
								thisAd := fmt.Sprintf("* Advertisement")
								lines = append(lines, thisAd)
								thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
								lines = append(lines, fmt.Sprintf("%v", thisFrame))
								lines = append(lines, " ")
								lines = append(lines, " ")
							
							}
						}
 
						lines = append(lines, fmt.Sprintf("%v", p.UID))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("* Picture"))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf(".image %v", p.PICTURE))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("* Location"))
						lines = append(lines, fmt.Sprintf("COUNTRY: %v", p.COUNTRY))
						lines = append(lines, fmt.Sprintf("REGION: %v", p.REGION))
						lines = append(lines, fmt.Sprintf("CITY: %v", p.CITY))
						lines = append(lines, fmt.Sprintf("MUNICIPALITY: %v", p.MUNICIPALITY))
						lines = append(lines, fmt.Sprintf("BARANGAY: %v", p.BARANGAY))
						lines = append(lines, fmt.Sprintf("SUBDIVISION: %v", p.SUBDIVISION))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("* Personal Info"))
						lines = append(lines, fmt.Sprintf("BIRTH_DAY: %v", p.BIRTH_DAY))
						lines = append(lines, fmt.Sprintf("ELEM_SCHOOL: %v", p.ELEM_SCHOOL))
						lines = append(lines, fmt.Sprintf("HIGH_SCHOOL: %v", p.HIGH_SCHOOL))
						lines = append(lines, fmt.Sprintf("COLLEGE: %v", p.COLLEGE))
						lines = append(lines, fmt.Sprintf("POST_GRAD: %v", p.POST_GRAD))
						lines = append(lines, fmt.Sprintf("PROFESSION: %v", p.PROFESSION))
						lines = append(lines, fmt.Sprintf("COMPANY: %v", p.COMPANY))
						lines = append(lines, fmt.Sprintf("CONTACT_NUM: %v", p.CONTACT_NUM))
						lines = append(lines, fmt.Sprintf("FACEBOOK LINK: %v", p.SOCIAL_1))
						lines = append(lines, fmt.Sprintf("GOOGLE+ LINK: %v", p.SOCIAL_2))
						lines = append(lines, fmt.Sprintf("OTHER SOCIAL SITE LINK: %v", p.SOCIAL_3))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("* Citizenship"))
						lines = append(lines, fmt.Sprintf("GOVT ID: %v", p.REG_VOTER))
						lines = append(lines, fmt.Sprintf("ID NUMBER: %v", p.ID_NUMBER))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("* Buy & Sell"))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("* FS/Selling/Offering/I Have..."))
						//split into separate lines
						FL_FS_IMG_URL := ""
						temp := strings.Split(p.I_HAVE_TEXT,"\n")
						if len(temp) > 0 {
							for j := 0; j < len(temp); j++ {
								lines = append(lines, fmt.Sprintf("%v",temp[j]))
								if FL_FS_IMG_URL == "" {
								//get image url
									i := strings.Index(temp[j], ".image ")
									if i != -1 {
										args := strings.Fields(temp[j])
										FL_FS_IMG_URL = args[1]
									}
								}
							}
						}
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("* WTB/Buying/Wanted/I Need..."))
						
						//save FS to search index
						//insert for sale item into search idx
						if FL_FS_IMG_URL == "" {
							FL_FS_IMG_URL = p.PICTURE
						}
						thisIdxKey := fmt.Sprintf("TDSPROF-FS-%v", UID)
						//fsTitle := fmt.Sprintf("Items For Sale by: %v", UID)
						fsTitle := fmt.Sprintf("Items For Sale: %v", strings.TrimSpace(p.I_HAVE_TEXT))
						if len(p.I_HAVE_TEXT) > 200 {
							fsTitle = fsTitle[0:200]
						} else {
							fsTitle = fsTitle[0:len(p.I_HAVE_TEXT)]
						}
						fsDesc := fmt.Sprintf("Items For Sale by: %v (%v)", UID, strings.TrimSpace(p.I_HAVE_TEXT))
						thisIdxURL := fmt.Sprintf("%vpeople-edit?EditPeopleFunc=ViewPeople&UID=%s&SID=%s", getSchemeUrl(w,r), UID, UID)
						tstamp := getTimestamp()
			
						searchIdx := &IDX_FORSALE{
							DOC_KEY: 			thisIdxKey,
							SEARCH_TYPE: 		"FORSALE",
							SOURCE_TYPE: 		"ULAPPH",	
							SOURCE_TBL:  		"TDSPROF",	
							DESKTOP: 			"FORSALE",
							FL_SHARED:			"Y",
							DOC_STAT:			"Worldwide",
							DOC_SCOPE_OVERALL:	"",
							DOC_SCOPE_COUNTRY:  "",
							DOC_SCOPE_REGION:  	"",
							DOC_SCOPE_CITY: 	"",
							DOC_SCOPE_BARANGAY: "",
							DOC_TITLE: 			fsTitle,	
							//DOC_DESC: 			"View Profile to see items for sale by user",
							DOC_DESC: 			fsDesc,
							DOC_AUTHOR:         UID,
							DOC_CONTENT_TEXT: 	p.I_HAVE_TEXT,
							//DOC_CONTENT_TEXT:   "",
							DOC_CONTENT_HTML: 	"",	
							DOC_CONTENT_ATOM: 	"",	
							CONTENT_URL: 		thisIdxURL,
							IMG_URL: 			FL_FS_IMG_URL,
							DATE_ADDED: 		tstamp,
							DATE_UPDATED: 		tstamp,
						}
                        
						putSearchIndexF(w,r,"IDX_FORSALE",thisIdxKey,searchIdx)
						
						//lines = append(lines, fmt.Sprintf("%v",p.I_NEED_TEXT))
						//split into separate lines
						FL_FS_IMG_URL = ""
						temp = strings.Split(p.I_NEED_TEXT,"\n")
						if len(temp) > 0 {
							for j := 0; j < len(temp); j++ {
								lines = append(lines, fmt.Sprintf("%v",temp[j]))
								if FL_FS_IMG_URL == "" {
								//get image url
									i := strings.Index(temp[j], ".image ")
									if i != -1 {
										args := strings.Fields(temp[j])
										FL_FS_IMG_URL = args[1]
									}
								}
							}
						}
						
						//save WTB to search index
						//insert wtb item into search idx
						if FL_FS_IMG_URL == "" {
							FL_FS_IMG_URL = p.PICTURE
						}
						thisIdxKey = fmt.Sprintf("TDSPROF-WTB-%v", UID)
						//fsTitle = fmt.Sprintf("Items Want To Buy by: %v", UID)
						fsTitle = fmt.Sprintf("Items Want To Buy: %v", strings.TrimSpace(p.I_NEED_TEXT))
						if len(p.I_NEED_TEXT) > 200 {
							fsTitle = fsTitle[0:200]
						} else {
							fsTitle = fsTitle[0:len(p.I_NEED_TEXT)]
						}
						fsDesc = fmt.Sprintf("Items Want To Buy by: %v (%v)", UID, strings.TrimSpace(p.I_NEED_TEXT))
						thisIdxURL = fmt.Sprintf("%vpeople-edit?EditPeopleFunc=ViewPeople&UID=%s&SID=%s", getSchemeUrl(w,r), UID, UID)
						t = time.Now().Local()
						tstamp = t.Format("20060102150405")
			
						searchIdx2 := &IDX_WTBUY{
							DOC_KEY: 			thisIdxKey,
							SEARCH_TYPE: 		"WANTOBUY",
							SOURCE_TYPE: 		"ULAPPH",	
							SOURCE_TBL:  		"TDSPROF",	
							DESKTOP: 			"WANTOBUY",
							FL_SHARED:			"Y",
							DOC_STAT:			"Worldwide",
							DOC_SCOPE_OVERALL:	"",
							DOC_SCOPE_COUNTRY:  "",
							DOC_SCOPE_REGION:  	"",
							DOC_SCOPE_CITY: 	"",
							DOC_SCOPE_BARANGAY: "",
							DOC_TITLE: 			fsTitle,	
							//DOC_DESC: 			"View Profile to see items wanted by user",
							DOC_DESC: 			fsDesc,
							DOC_AUTHOR:         UID,
							DOC_CONTENT_TEXT: 	p.I_NEED_TEXT,
							//DOC_CONTENT_TEXT:   "",
							DOC_CONTENT_HTML: 	"",	
							DOC_CONTENT_ATOM: 	"",	
							CONTENT_URL: 		thisIdxURL,
							IMG_URL: 			FL_FS_IMG_URL,
							DATE_ADDED: 		tstamp,
							DATE_UPDATED: 		tstamp,
						}
						index, err := search.Open("IDX_WTBUY")
						if err != nil {
							 panic(err)
						}
						_, err = index.Put(c, thisIdxKey, searchIdx2)
						if err != nil {
							 panic(err)
						}
						
						lines = append(lines, fmt.Sprintf(""))
						
						lines = append(lines, fmt.Sprintf("* Gallery"))
						lines = append(lines, fmt.Sprintf("* Gallery 1"))
						lines = append(lines, fmt.Sprintf("%v", p.FILLER_1))
						lines = append(lines, fmt.Sprintf("* Gallery 2"))
						lines = append(lines, fmt.Sprintf("%v", p.FILLER_2))	
						lines = append(lines, fmt.Sprintf("* Gallery 3"))
						lines = append(lines, fmt.Sprintf("%v", p.FILLER_3))
						
						lines = append(lines, fmt.Sprintf("* Feedbacks"))
						lines = append(lines, fmt.Sprintf("* Positive/Smile Rating"))
						lines = append(lines, fmt.Sprintf(".link /people-edit?EditPeopleFunc=RatePeople&RATING=PLUS&UID=%v [+1]", UID))
						lines = append(lines, fmt.Sprintf(".image /static/img/emoticon-happy.png 400 400"))
						lines = append(lines, fmt.Sprintf("( %v ) positive ratings", p.POS_VOTES))
						lines = append(lines, fmt.Sprintf(""))
						lines = append(lines, fmt.Sprintf("* Negative/Sad Rating"))
						lines = append(lines, fmt.Sprintf(".link /people-edit?EditPeopleFunc=RatePeople&RATING=NEG&UID=%v [-1]", UID))
						lines = append(lines, fmt.Sprintf(".image /static/img/emoticon-sad.png 400 400"))
						lines = append(lines, fmt.Sprintf("( %v ) negative ratings", p.NEG_VOTES))
						lines = append(lines, fmt.Sprintf(""))
						
						lines = append(lines, fmt.Sprintf("* Ratings"))
						lines = append(lines, fmt.Sprintf("BADGE: %v", p.BADGE))
						lines = append(lines, fmt.Sprintf("CRED_PTS: %v", p.CRED_PTS))
						lines = append(lines, fmt.Sprintf("POS_VOTES: %v", p.POS_VOTES))
						lines = append(lines, fmt.Sprintf("NEG_VOTES: %v", p.NEG_VOTES))
						//lines = append(lines, fmt.Sprintf("LIFE_RATING: %v", p.LIFE_RATING))
						lifeR := 0
						if p.POS_VOTES >= 1 {
							lifeR = 100 * (p.POS_VOTES) / (p.POS_VOTES + p.NEG_VOTES)
						}
						lines = append(lines, fmt.Sprintf("LIFE_RATING: %v", lifeR))
						lines = append(lines, fmt.Sprintf(""))
 
						//display slides
						
						//fmt.Fprintf(w, "cKey: %v<br>", cKey)
						
						doc, err := Parse4(w, r, &Lines{0, lines}, UID, 0)
						if err != nil {
 
							panic(err)
						}
						//fmt.Fprintf(w, "doc: %v<br>", doc)
						var buf bytes.Buffer
						title2 := fmt.Sprintf("%v.slide", UID)
						SL_TMP := "S"
						//renderPresentation(&buf, title2, doc)
						if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
							panic(err)
						}		
					
						putBytesToMemcacheWithExp(w,r,cKey,buf.Bytes(),MC_ADS_EXPIRES_30_MIN)
						
					cKey = fmt.Sprintf("PROFILE_PIC_%v", UID)
					putStrToMemcacheWithoutExp(w,r,cKey,p.PICTURE)
					
					//update ringtone cache
					cKey = fmt.Sprintf("RINGTONE_URL_%v", UID)
					putStrToMemcacheWithoutExp(w,r,cKey,p.RINGTONE)
					
					//clear IHAVE/INEED TEXT
					cKey = fmt.Sprintf("I_HAVE_TEXT_%v", UID)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
 
					cKey = fmt.Sprintf("I_NEED_TEXT_%v", UID)
					putStrToMemcacheWithoutExp(w,r,cKey,"")					
					
					//clear QUICK-VIEW
					putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW","")	
					
					putStrToMemcacheWithoutExp(w,r,"ULAPPH-PEOPLE-QUICK-VIEW-ONLINE","")
					
					//insert profile into search idx
					thisIdxKey = fmt.Sprintf("TDSPROF-%v", UID)
					thisIdxURL = fmt.Sprintf("%vpeople-edit?EditPeopleFunc=ViewPeople&UID=%s&SID=%s", getSchemeUrl(w,r), UID, UID)
					thisCusText := fmt.Sprintf("%v, %v, %v, %v, %v, %v", COUNTRY, REGION, CITY, MUNICIPALITY, BARANGAY, SUBDIVISION)
					t = time.Now().Local()
					tstamp = t.Format("20060102150405")
					searchIdxp := &IDX_TDSPROF{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"PEOPLE",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSPROF",	
						DESKTOP: 			"PEOPLE",
						FL_SHARED:			"Y",
						DOC_STAT:			"ULAPPH Only",
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			UID,	
						DOC_DESC: 			COUNTRY,
						DOC_AUTHOR:         uid,
						DOC_CONTENT_TEXT: 	thisCusText,
						//DOC_CONTENT_TEXT:   "",
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			PICTURE,
						DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
                    }
                    
					putSearchIndexP(w,r,"IDX_TDSPROF",thisIdxKey,searchIdxp)
					
					//notify all users of this event via channels
					reqStr := fmt.Sprintf("/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v", UID, UID)
					msgDtl3 := fmt.Sprintf("UID:%v has updated his/her <a href=\"%v\">profile</a>. https://www.ulapph.com/people-edit?EditPeopleFunc=EditPeople&UID=%v&SID=%v", UID, reqStr, UID, UID)
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,UID,reqStr,""),"")
					
					USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
					putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")	
										
					msgDtl := "[U00048]SUCCESS: ULAPPH Profile details have been saved."
					msgTyp := "success"
					msgURL := "/?q=home"
					action := "U00048"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					//break
				}
				
			} else {	
				msgDtl := "[U00049]ERROR: Profile(s) cannot be edited because of your account type."
				msgTyp := "error"
				msgURL := "/?q=home"
				action := fmt.Sprintf("Really sorry for this inconvenience! <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		
		}
	
	
	}
 
}

//gets the default UWM windows
//these are the windows that opens by default such as clock, calendar, etc
func getDefUwms(w http.ResponseWriter, r *http.Request) string {
	
	TARGET_UWM := r.FormValue("u")
	
	var buf bytes.Buffer
	if TARGET_UWM == "" {
		//display default on main uwm only
		
		buf.WriteString(fmt.Sprintf("<input type=\"hidden\" value=\"'/tools?FUNC=WIDGET&t=AnalogClockWidget', 800, 500, 'left', 'bottom', {title: 'Clock & Calendar', icon: '/static/img/jswm-web.png'}\" size=\"60\" id=\"clockcal777\" />"))
		buf.WriteString(fmt.Sprintf("<script type=\"text/javascript\">"))
		buf.WriteString(fmt.Sprintf("	"))
		buf.WriteString(fmt.Sprintf("	if (localStorage['mylocation-input'] != 'N' && document.getElementById('desktop').value == 'uwm') { eval('windowManager.openURI(' + $('clockcal777').value + ');'); }"))
		buf.WriteString(fmt.Sprintf("</script>"))

		buf.WriteString(fmt.Sprintf("<input type=\"hidden\" value=\"'%v', 800, 500, 'middle', 'middle', {title: 'Our Belief', icon: '/static/img/jswm-web.png'}\" size=\"60\" id=\"bible777\" />", SYS_DISP_URL_BELIEF))
		buf.WriteString(fmt.Sprintf("<script type=\"text/javascript\">"))
		buf.WriteString(fmt.Sprintf("	if (localStorage['mylocation-input'] != 'N' && document.getElementById('desktop').value == 'uwm') { eval('windowManager.openURI(' + $('bible777').value + ');'); }"))
		buf.WriteString(fmt.Sprintf("</script>"))
	
		buf.WriteString(fmt.Sprintf("<input type=\"hidden\" value=\"'%v', 800, 500, 'middle', 'middle', {title: 'Government', icon: '/static/img/jswm-web.png'}\" size=\"60\" id=\"weather777\" />", "https://www.gov.ph/"))
		buf.WriteString(fmt.Sprintf("<script type=\"text/javascript\">"))
		buf.WriteString(fmt.Sprintf("	if (localStorage['mylocation-input'] != 'N' && document.getElementById('desktop').value == 'uwm') { eval('windowManager.openURI(' + $('weather777').value + ');'); }"))
		buf.WriteString(fmt.Sprintf("</script>"))

		buf.WriteString(fmt.Sprintf("<input type=\"hidden\" value=\"'%v', 800, 500, 'middle', 'middle', {title: 'Weather Monitoring', icon: '/static/img/jswm-web.png'}\" size=\"60\" id=\"pagasa777\" />", "https://www.cyclocane.com/"))
		buf.WriteString(fmt.Sprintf("<script type=\"text/javascript\">"))
		buf.WriteString(fmt.Sprintf("	if (localStorage['mylocation-input'] != 'N' && document.getElementById('desktop').value == 'uwm') { eval('windowManager.openURI(' + $('pagasa777').value + ');'); }"))
		buf.WriteString(fmt.Sprintf("</script>"))
	}
	
	buf.WriteString(fmt.Sprintf("<script>"))
	buf.WriteString(fmt.Sprintf("	if (document.getElementById('rearrange') == null) { uwmArrWin();}"))
	buf.WriteString(fmt.Sprintf("</script>"))

	if SYS_UWM_EXPANDED == false {
		buf.WriteString(fmt.Sprintf("<script>"))
		buf.WriteString(fmt.Sprintf("	if (document.getElementById('expanded') == null) { uwmOnOff(); uwmOnOff(); }"))
		buf.WriteString(fmt.Sprintf("</script>"))	
	}
	
	return buf.String()
}

//gets the credit points for the user 
func getCreditPoints(w http.ResponseWriter, r *http.Request, UID string) (credPts int) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	ncNameStatsAccess := fmt.Sprintf("STATS.ACCESS.%s", UID)
 
	cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", ncNameStatsAccess)
	TASK_MEMCACHER_CounterIncrement_CACHE := ""
	TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
 
	if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
	//increment existing
		thisCtrNum := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
		credPts = thisCtrNum
		
	} else {
		
		key := datastore.NameKey("TDSSTATS", ncNameStatsAccess, nil)
		q := datastore.NewQuery("TDSSTATS").Filter("__key__ =", key)
		//log.Panicf("[S0262]")
		stats := make([]TDSSTATS, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
			 panic(err)
		  }
		//log.Printf("datastoreClient.Get()  [37335]")
		for _, p := range stats{
			credPts = p.VAL_NUM
		}
	}
	
	return credPts
}

//handles ads admininstration
//ulapph cloud desktop can serve ads 
func adminAds(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
    //D0086
    datastoreClient := createClientDS()
	uReferer := r.Referer()
	
	//get user privilege
	FUNC_CODE := "GET_GRP_ID"
	FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	
	if FL_VALID_USER == true {
	
		if GROUP_ID == "GRP_ADMIN" {
 
			ADS_FUNC := r.FormValue("ADS_FUNC")
		
			switch ADS_FUNC {
				
 
				case "TASK_ADS_SLOTS":
					TASK_MEMCACHER_adslotsProcessor(w,r)
					return
			
				case "CheckCatAdSlots":
					
					//make sure cats and ads slots are in memcache
					
					cKey := fmt.Sprintf("ADS_TS_LIST_RECS")
					ADS_TS_LIST_RECS := ""
					ADS_TS_LIST_RECS = getStrMemcacheValueByKey(w,r,cKey)
					if ADS_TS_LIST_RECS == "" {
						fmt.Fprintf(w, "<font color=red>ERROR: Make sure ADS_TS_LIST_RECS is populated in memcache. Just set the ads slots template records again via Media Gallery.</font><br>")
					}
			
					//if ADS_TS_LIST_RECS == "" || CATEGORY_LIST == "" {
					if ADS_TS_LIST_RECS == "" {
						return
					} else {
						//check ads slots records per category
						fmt.Fprintf(w, "SUCCESS: Checking ads slots vs category list.<br>")
						fmt.Fprintf(w, "ADS_TS_LIST_RECS: %v <br>", ADS_TS_LIST_RECS)
						adslist := strings.Split(ADS_TS_LIST_RECS,"\n")
						//if len(catlist) > 0 {
							for k := 0; k < len(adslist); k++ {
 
								aItem := strings.TrimSpace(adslist[k])
								if aItem != "" {
									SPK := strings.Split(aItem,",")
									SPK2 := strings.Split(aItem,"-")
 
									if len(SPK) > 1 {
										ADS_TIME_SLOT := SPK[0]
										ADS_TIME_SLOT2 := SPK2[2]
										dsKey := fmt.Sprintf("%s-%s", "", ADS_TIME_SLOT)
										key := datastore.NameKey("TDSADTS", dsKey, nil)
										q := datastore.NewQuery("TDSADTS").Filter("__key__ =", key)
										//log.Panicf("[S0263]")
										recCount,_ := datastoreClient.Count(c,q)
										if recCount <= 0 {
											p := TDSADTS{ 		
												SYS_VER: 1,	
												ADS_TIME_SLOT: 	ADS_TIME_SLOT,
												ADS_TIME_SLOT2: ADS_TIME_SLOT2,	
												ADS_RAND_0: "1,1,1",
												ADS_RAND_1: "1,1,1",
												ADS_RAND_2: "1,1,1",
												ADS_RAND_3: "1,1,1",	
												ADS_RAND_4: "1,1,1",	
												ADS_RAND_5: "1,1,1",
												ADS_RAND_6: "1,1,1",
												ADS_RAND_7: "1,1,1",
												ADS_RAND_8: "1,1,1",	
												ADS_RAND_9: "1,1,1",	
												CATEGORY: "",
											}
											_, err := datastoreClient.Put(c, key, &p)
											//log.Panicf("[S0264]")
                                            //log.Printf("datastoreClient.Put()  [37429]")
											if err != nil {
												 panic(err)
											}
											fmt.Fprintf(w, "ADS TS SLOT: %v --> INSERTED OK<br>", ADS_TIME_SLOT)
										}
									}
								}
							}
						
					}
					
			
				case "PUSH-AD":
					ADS_TITLE := r.FormValue("ADS_TITLE")
					ADS_ID := r.FormValue("ADS_ID")
					ADS_IMG := r.FormValue("ADS_IMG")
					ADS_URL := r.FormValue("ADS_URL")
					ADS_LINK := fmt.Sprintf("/click-ads/?uid=\"\"&ADS_TITLE=%v&URL_ADD=%v&ADS_ID=%v&REFERER=%v", ADS_TITLE, html.EscapeString(ADS_URL), ADS_ID, html.EscapeString(uReferer))
					msgDtl3 := fmt.Sprintf("<a href=\"%v\" target=ads><img src=\"%v\" width=200 height=150> %v</a> [ADVERTISEMENT]", ADS_LINK, ADS_IMG, ADS_TITLE)
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,ADMMAIL,"/admin-ads?ADS_FUNC=PUSH-AD",""),"")
					
					fmt.Fprintf(w, "SUCCESS: Successfully pushed advertisement. <hr>%v", msgDtl3)
			
				case "DelAd":
					ADS_ID := r.FormValue("ADS_ID")
					ADS_PUB_ID := r.FormValue("ADS_PUB_ID")
					adKey := fmt.Sprintf("%v.%v", ADS_PUB_ID, ADS_ID)
					key := datastore.NameKey("TDSADS", adKey, nil)
					datastoreClient.Delete(c, key)
					
					//clear ads id cache
					ADS_ID_CACHE_KEY := fmt.Sprintf("ADS_ID_CACHE_%v", ADS_ID)
					putStrToMemcacheWithoutExp(w,r,ADS_ID_CACHE_KEY,"")
					
					fmt.Fprintf(w, "SUCCESS: Successfully deleted advertisement. ADS_ID: %v ADS_PUB_ID: %v<br>", ADS_ID, ADS_PUB_ID)
			
				case "UPLOAD":
					if err := iconsSettingsTemplateHeaderADS.Execute(w, ""); err != nil {
						 panic(err)
					}
					if err := adtsDispTemplateAdminHdr.Execute(w, "Upload"); err != nil {
						 panic(err)
					}
					getCategories(w,r,uid)
					if err := adtsDispTemplateAdminHdr2.Execute(w, ""); err != nil {
						 panic(err)
					}
					if err := iconsSettingsTemplateTableFooter1.Execute(w, ""); err != nil {
						 panic(err)
					}		
					uploadURL2 := "/upload-ads"
					//w.Header().Set("Content-Type", "text/html")
					err := rootTemplateAds.Execute(w, uploadURL2)
					if err != nil {
							////log.Panicf("%v", err)
					}
					err = rootTemplate2Ads.Execute(w, "")
					if err != nil {
							////log.Panicf("%v", err)
					}
					//blobstore end
				
					if err := iconsSettingsTemplateTableFooter9.Execute(w, ""); err != nil {
						 panic(err)
					}
			
				case "SHOW_CUST_PLCMT":
					ADS_CUST_FUNC := r.FormValue("ADS_CUST_FUNC")
					ADS_CUST_FUNC2 := r.FormValue("ADS_CUST_FUNC2")
					ADS_ID := r.FormValue("ADS_ID")
					TIMESLOT := fmt.Sprintf("%v",r.FormValue("TIMESLOT"))
					CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
					RAN_SLOT := r.FormValue("RAN_SLOT")
					
					if (ADS_CUST_FUNC == "SELECT VALUE" && ADS_CUST_FUNC2 == "SELECT VALUE")  {
						msgDtl := fmt.Sprintf("[U00144] ERROR: Invalid custom functions selected. ADS_CUST_FUNC: %v ADS_CUST_FUNC2: %v", ADS_CUST_FUNC, ADS_CUST_FUNC2)
						msgTyp := "error"
						//msgURL := fmt.Sprintf("/%v#page", currDesktop)
						action := "U00144"
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
					
					switch ADS_CUST_FUNC {
						
						case "SHOW_SELD_ALLP":
							if CATEGORY == "" {
								msgDtl := fmt.Sprintf("[U00136] ERROR: Category has not been selected.")
								msgTyp := "error"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00136"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
							
							//read all TDSADTS; for each record, update the timeslots from 0 to 9
							newAds := fmt.Sprintf("%v,%v,%v", ADS_ID, ADS_ID, ADS_ID)
 
							q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
							//log.Panicf("[S0265]")
							recCount,_ := datastoreClient.Count(c,q)
							
							adts := make([]TDSADTS, 0, recCount)
							if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [37538]")
							FL_PROCESS_OK := false
							recCtr := 0
							for _, p := range adts{
								if p.CATEGORY == CATEGORY {
								FL_PROCESS_OK = true
									p.ADS_RAND_0 = newAds
									p.ADS_RAND_1 = newAds
									p.ADS_RAND_2 = newAds
									p.ADS_RAND_3 = newAds
									p.ADS_RAND_4 = newAds
									p.ADS_RAND_5 = newAds
									p.ADS_RAND_6 = newAds
									p.ADS_RAND_7 = newAds
									p.ADS_RAND_8 = newAds
									p.ADS_RAND_9 = newAds
									
									adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT) 	
									//fmt.Fprintf(w, "DEBUG29>> .<br>")
									key := datastore.NameKey("TDSADTS", adKey, nil)
                                    _, err := datastoreClient.Put(c, key, &p)
                                    //log.Printf("datastoreClient.Put()  [37559]")
									//log.Panicf("[S0266]")
									if err != nil {
										 panic(err)
									}	
 
									recCtr++
								}
							}
							
							
							if FL_PROCESS_OK == true {
								msgDtl := fmt.Sprintf("[U00128] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00128"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
						
						case "SHOW_SELD_POS1":
							if CATEGORY == "" {
								msgDtl := fmt.Sprintf("[U00137] ERROR: Category has not been selected.")
								msgTyp := "error"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00137"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}		
							q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
							//log.Panicf("[S0267]")
							recCount,_ := datastoreClient.Count(c,q)
							adts := make([]TDSADTS, 0, recCount)
							if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [37597]")
							FL_PROCESS_OK := false
							recCtr := 0
							for _, p := range adts{
								if p.CATEGORY == CATEGORY {
								FL_PROCESS_OK = true
								
									adsList := p.ADS_RAND_0
									p.ADS_RAND_0 = newAdsPos1(adsList, ADS_ID)
									
									adsList = p.ADS_RAND_1
									p.ADS_RAND_1 = newAdsPos1(adsList, ADS_ID)
									
									adsList = p.ADS_RAND_2
									p.ADS_RAND_2 = newAdsPos1(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_3
									p.ADS_RAND_3 = newAdsPos1(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_4
									p.ADS_RAND_4 = newAdsPos1(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_5
									p.ADS_RAND_5 = newAdsPos1(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_6
									p.ADS_RAND_6 = newAdsPos1(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_7
									p.ADS_RAND_7 = newAdsPos1(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_8
									p.ADS_RAND_8 = newAdsPos1(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_9
									p.ADS_RAND_9 = newAdsPos1(adsList, ADS_ID)
									
									adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT)
									//fmt.Fprintf(w, "DEBUG30>> .<br>")
									key := datastore.NameKey("TDSADTS", adKey, nil)
                                    _, err := datastoreClient.Put(c, key, &p)
                                    //log.Printf("datastoreClient.Put()  [37638]")
									//log.Panicf("[S0268]")
									if err != nil {
										 panic(err)
									}	
 
									recCtr++
								}
							}
							
							if FL_PROCESS_OK == true {
								msgDtl := fmt.Sprintf("[U00129] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00129"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
					
						
						case "SHOW_SELD_POS2":
							if CATEGORY == "" {
								msgDtl := fmt.Sprintf("[U00138] ERROR: Category has not been selected.")
								msgTyp := "error"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00138"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}	
 
							q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
							//log.Panicf("[S0269]")
							recCount,_ := datastoreClient.Count(c,q)
							adts := make([]TDSADTS, 0, recCount)
							if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [37677]")
							FL_PROCESS_OK := false
							recCtr := 0
							for _, p := range adts{
								if p.CATEGORY == CATEGORY {
								FL_PROCESS_OK = true
								
									adsList := p.ADS_RAND_0
									p.ADS_RAND_0 = newAdsPos2(adsList, ADS_ID)
									
									adsList = p.ADS_RAND_1
									p.ADS_RAND_1 = newAdsPos2(adsList, ADS_ID)
									
									adsList = p.ADS_RAND_2
									p.ADS_RAND_2 = newAdsPos2(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_3
									p.ADS_RAND_3 = newAdsPos2(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_4
									p.ADS_RAND_4 = newAdsPos2(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_5
									p.ADS_RAND_5 = newAdsPos2(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_6
									p.ADS_RAND_6 = newAdsPos2(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_7
									p.ADS_RAND_7 = newAdsPos2(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_8
									p.ADS_RAND_8 = newAdsPos2(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_9
									p.ADS_RAND_9 = newAdsPos2(adsList, ADS_ID)
									
									adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT)
									//fmt.Fprintf(w, "DEBUG30>> .<br>")
									key := datastore.NameKey("TDSADTS", adKey, nil)
                                    _, err := datastoreClient.Put(c, key, &p)
                                    //log.Printf("datastoreClient.Put()  [37718]")
									//log.Panicf("[S0270]")
									if err != nil {
										 panic(err)
									}	
 
									recCtr++
								}
							}
							
							if FL_PROCESS_OK == true {
								//notify all users of this event via channels
								msgDtl := fmt.Sprintf("[U00130] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00130"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
						
						case "SHOW_SELD_POS3":
							if CATEGORY == "" {
								msgDtl := fmt.Sprintf("[U00139] ERROR: Category has not been selected.")
								msgTyp := "error"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00139"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}	
							q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
							//log.Panicf("[S0271]")
							recCount,_ := datastoreClient.Count(c,q)
							adts := make([]TDSADTS, 0, recCount)
							if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [37756]")
							FL_PROCESS_OK := false
							recCtr := 0
							for _, p := range adts{
								if p.CATEGORY == CATEGORY {
								FL_PROCESS_OK = true
								
									adsList := p.ADS_RAND_0
									p.ADS_RAND_0 = newAdsPos3(adsList, ADS_ID)
									
									adsList = p.ADS_RAND_1
									p.ADS_RAND_1 = newAdsPos3(adsList, ADS_ID)
									
									adsList = p.ADS_RAND_2
									p.ADS_RAND_2 = newAdsPos3(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_3
									p.ADS_RAND_3 = newAdsPos3(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_4
									p.ADS_RAND_4 = newAdsPos3(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_5
									p.ADS_RAND_5 = newAdsPos3(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_6
									p.ADS_RAND_6 = newAdsPos3(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_7
									p.ADS_RAND_7 = newAdsPos3(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_8
									p.ADS_RAND_8 = newAdsPos3(adsList, ADS_ID)
 
									adsList = p.ADS_RAND_9
									p.ADS_RAND_9 = newAdsPos3(adsList, ADS_ID)
									
									adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT)
									//fmt.Fprintf(w, "DEBUG31>> .<br>")
									key := datastore.NameKey("TDSADTS", adKey, nil)
                                    _, err := datastoreClient.Put(c, key, &p)
                                    //log.Printf("datastoreClient.Put()  [37797]")
									//log.Panicf("[S0272]")
									if err != nil {
										 panic(err)
									}	
 
									recCtr++
								}
							}
							
							if FL_PROCESS_OK == true {
								msgDtl := fmt.Sprintf("[U00131] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00131"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}	
					}
 
					switch ADS_CUST_FUNC2 {
					
						case "SHOW_SELD_SELT_ALLP":
							if CATEGORY == "" || TIMESLOT == "" {
								msgDtl := fmt.Sprintf("[U00140] ERROR: Category or timeslot needs to be selected.")
								msgTyp := "error"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00140"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
							newAds := fmt.Sprintf("%v,%v,%v", ADS_ID, ADS_ID, ADS_ID)
							q := datastore.NewQuery("TDSADTS").Filter("ADS_TIME_SLOT =", TIMESLOT)
							//log.Panicf("[S0273]")
							ROW_COUNT, _ := datastoreClient.Count(c,q)	
							if ROW_COUNT <= 0 {							
								q = datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")		
								//log.Panicf("[S0274]")
								ROW_COUNT, _ = datastoreClient.Count(c,q)
							}
							adts := make([]TDSADTS, 0, ROW_COUNT)
							if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [37843]")
							FL_PROCESS_OK := false
							recCtr := 0
							for _, p := range adts{
								if p.CATEGORY == CATEGORY {
								FL_PROCESS_OK = true
									p.ADS_RAND_0 = newAds
									p.ADS_RAND_1 = newAds
									p.ADS_RAND_2 = newAds
									p.ADS_RAND_3 = newAds
									p.ADS_RAND_4 = newAds
									p.ADS_RAND_5 = newAds
									p.ADS_RAND_6 = newAds
									p.ADS_RAND_7 = newAds
									p.ADS_RAND_8 = newAds
									p.ADS_RAND_9 = newAds
									
									p.ADS_TIME_SLOT = TIMESLOT
									
									adKey := fmt.Sprintf("%s-%s", p.CATEGORY, TIMESLOT)
									//fmt.Fprintf(w, "DEBUG32>> .<br>")
									key := datastore.NameKey("TDSADTS", adKey, nil)
                                    _, err := datastoreClient.Put(c, key, &p)
                                    //log.Printf("datastoreClient.Put()  [37866]")
									//log.Panicf("[S0275]")
									if err != nil {
										 panic(err)
									}	
 
									recCtr++
								}
							}
							
							if FL_PROCESS_OK == true {
								msgDtl := fmt.Sprintf("[U00132] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00132"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}		
						case "SHOW_SELD_SELT_POS1":
							if CATEGORY == "" || TIMESLOT == "" {
								msgDtl := fmt.Sprintf("[U00141] ERROR: Category or timeslot needs to be selected.")
								msgTyp := "error"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00141"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
							q := datastore.NewQuery("TDSADTS").Filter("ADS_TIME_SLOT =", TIMESLOT)
							//log.Panicf("[S0276]")
							ROW_COUNT, _ := datastoreClient.Count(c,q)	
							if ROW_COUNT <= 0 {
								fmt.Fprintf(w, "[U00141] ERROR: Please check Ads Timeslots configurations.")
								return
							}
							adts := make([]TDSADTS, 0, ROW_COUNT)
							if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [37906]")
							FL_PROCESS_OK := false
							recCtr := 0
							//newAds := ""
							//adsList := ""
							//SPL := strings.Split(adsList, ",")
							for _, p := range adts{
								//if p.CATEGORY == CATEGORY {
								FL_PROCESS_OK = true
								
									if RAN_SLOT == "SELECT VALUE" {
									
										adsList := p.ADS_RAND_0
										p.ADS_RAND_0 = newAdsPos1(adsList, ADS_ID)
										
										adsList = p.ADS_RAND_1
										p.ADS_RAND_1 = newAdsPos1(adsList, ADS_ID)
										
										adsList = p.ADS_RAND_2
										p.ADS_RAND_2 = newAdsPos1(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_3
										p.ADS_RAND_3 = newAdsPos1(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_4
										p.ADS_RAND_4 = newAdsPos1(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_5
										p.ADS_RAND_5 = newAdsPos1(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_6
										p.ADS_RAND_6 = newAdsPos1(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_7
										p.ADS_RAND_7 = newAdsPos1(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_8
										p.ADS_RAND_8 = newAdsPos1(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_9
										p.ADS_RAND_9 = newAdsPos1(adsList, ADS_ID)
									} else {
										switch RAN_SLOT {
										
											case "ADS_RAND_0":
											adsList := p.ADS_RAND_0
											p.ADS_RAND_0 = newAdsPos1(adsList, ADS_ID)
											
											case "ADS_RAND_1":
											adsList := p.ADS_RAND_1
											p.ADS_RAND_1 = newAdsPos1(adsList, ADS_ID)
											
											case "ADS_RAND_2":
											adsList := p.ADS_RAND_2
											p.ADS_RAND_2 = newAdsPos1(adsList, ADS_ID)
 
											case "ADS_RAND_3":
											adsList := p.ADS_RAND_3
											p.ADS_RAND_3 = newAdsPos1(adsList, ADS_ID)
 
											case "ADS_RAND_4":
											adsList := p.ADS_RAND_4
											p.ADS_RAND_4 = newAdsPos1(adsList, ADS_ID)
 
											case "ADS_RAND_5":
											adsList := p.ADS_RAND_5
											p.ADS_RAND_5 = newAdsPos1(adsList, ADS_ID)
 
											case "ADS_RAND_6":
											adsList := p.ADS_RAND_6
											p.ADS_RAND_6 = newAdsPos1(adsList, ADS_ID)
 
											case "ADS_RAND_7":
											adsList := p.ADS_RAND_7
											p.ADS_RAND_7 = newAdsPos1(adsList, ADS_ID)
 
											case "ADS_RAND_8":
											adsList := p.ADS_RAND_8
											p.ADS_RAND_8 = newAdsPos1(adsList, ADS_ID)
 
											case "ADS_RAND_9":
											adsList := p.ADS_RAND_9
											p.ADS_RAND_9 = newAdsPos1(adsList, ADS_ID)
										}
									
									}
									
									p.ADS_TIME_SLOT = TIMESLOT
									
									adKey := fmt.Sprintf("%s-%s", p.CATEGORY, TIMESLOT)
									//fmt.Fprintf(w, "DEBUG33>> .<br>")
									key := datastore.NameKey("TDSADTS", adKey, nil)
                                    _, err := datastoreClient.Put(c, key, &p)
                                    //log.Printf("datastoreClient.Put()  [37999]")
									//log.Panicf("[S0277]")
									if err != nil {
										 panic(err)
									}	
 
									recCtr++
								//}
							}
							
							if FL_PROCESS_OK == true {
								msgDtl := fmt.Sprintf("[U00133] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00133"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
						
						case "SHOW_SELD_SELT_POS2":
							if CATEGORY == "" || TIMESLOT == "" {
								msgDtl := fmt.Sprintf("[U00142] ERROR: Category or timeslot needs to be selected.")
								msgTyp := "error"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00142"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
							q := datastore.NewQuery("TDSADTS").Filter("ADS_TIME_SLOT =", TIMESLOT)
							//log.Panicf("[S0278]")
							ROW_COUNT, _ := datastoreClient.Count(c,q)	
							if ROW_COUNT <= 0 {	
								//log.Panicf("[S0279]")
								fmt.Fprintf(w, "[U00142] ERROR: Please check Ads Timeslots configurations.")
								return
							}
							adts := make([]TDSADTS, 0, ROW_COUNT)
							if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [38041]")
							FL_PROCESS_OK := false
							recCtr := 0
							for _, p := range adts{
								//if p.CATEGORY == CATEGORY  {
								FL_PROCESS_OK = true
									
									if RAN_SLOT == "SELECT VALUE" {
									
										adsList := p.ADS_RAND_0
										p.ADS_RAND_0 = newAdsPos2(adsList, ADS_ID)
										
										adsList = p.ADS_RAND_1
										p.ADS_RAND_1 = newAdsPos2(adsList, ADS_ID)
										
										adsList = p.ADS_RAND_2
										p.ADS_RAND_2 = newAdsPos2(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_3
										p.ADS_RAND_3 = newAdsPos2(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_4
										p.ADS_RAND_4 = newAdsPos2(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_5
										p.ADS_RAND_5 = newAdsPos2(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_6
										p.ADS_RAND_6 = newAdsPos2(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_7
										p.ADS_RAND_7 = newAdsPos2(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_8
										p.ADS_RAND_8 = newAdsPos2(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_9
										p.ADS_RAND_9 = newAdsPos2(adsList, ADS_ID)
									} else {
										switch RAN_SLOT {
										
											case "ADS_RAND_0":
											adsList := p.ADS_RAND_0
											p.ADS_RAND_0 = newAdsPos2(adsList, ADS_ID)
											
											case "ADS_RAND_1":
											adsList := p.ADS_RAND_1
											p.ADS_RAND_1 = newAdsPos2(adsList, ADS_ID)
											
											case "ADS_RAND_2":
											adsList := p.ADS_RAND_2
											p.ADS_RAND_2 = newAdsPos2(adsList, ADS_ID)
 
											case "ADS_RAND_3":
											adsList := p.ADS_RAND_3
											p.ADS_RAND_3 = newAdsPos2(adsList, ADS_ID)
 
											case "ADS_RAND_4":
											adsList := p.ADS_RAND_4
											p.ADS_RAND_4 = newAdsPos2(adsList, ADS_ID)
 
											case "ADS_RAND_5":
											adsList := p.ADS_RAND_5
											p.ADS_RAND_5 = newAdsPos2(adsList, ADS_ID)
 
											case "ADS_RAND_6":
											adsList := p.ADS_RAND_6
											p.ADS_RAND_6 = newAdsPos2(adsList, ADS_ID)
 
											case "ADS_RAND_7":
											adsList := p.ADS_RAND_7
											p.ADS_RAND_7 = newAdsPos2(adsList, ADS_ID)
 
											case "ADS_RAND_8":
											adsList := p.ADS_RAND_8
											p.ADS_RAND_8 = newAdsPos2(adsList, ADS_ID)
 
											case "ADS_RAND_9":
											adsList := p.ADS_RAND_9
											p.ADS_RAND_9 = newAdsPos2(adsList, ADS_ID)
										}
									
									}
									
									p.ADS_TIME_SLOT = TIMESLOT
									
									adKey := fmt.Sprintf("%s-%s", p.CATEGORY, TIMESLOT) 		
									key := datastore.NameKey("TDSADTS", adKey, nil)
                                    _, err := datastoreClient.Put(c, key, &p)
                                    //log.Printf("datastoreClient.Put()  [38130]")
									//log.Panicf("[S0280]")
									if err != nil {
										 panic(err)
									}	
 
									recCtr++
								}
							//}
							
							if FL_PROCESS_OK == true {
								msgDtl := fmt.Sprintf("[U00134] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00134"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
							
						case "SHOW_SELD_SELT_POS3":
							if CATEGORY == "" || TIMESLOT == "" {
								msgDtl := fmt.Sprintf("[U00143] ERROR: Category or timeslot needs to be selected.")
								msgTyp := "error"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00143"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
 
							q := datastore.NewQuery("TDSADTS").Filter("ADS_TIME_SLOT =", TIMESLOT)
							//log.Panicf("[S0281]")
															
							ROW_COUNT, _ := datastoreClient.Count(c,q)	
							if ROW_COUNT <= 0 {
								fmt.Fprintf(w, "[U00143] ERROR: Please check Ads Timeslots configurations.")
								return
							}
							adts := make([]TDSADTS, 0, ROW_COUNT)
							if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [38173]")
							FL_PROCESS_OK := false
							recCtr := 0
							for _, p := range adts{
								//if p.CATEGORY == CATEGORY {
								FL_PROCESS_OK = true
																	
									if RAN_SLOT == "SELECT VALUE" {
									
										adsList := p.ADS_RAND_0
										p.ADS_RAND_0 = newAdsPos3(adsList, ADS_ID)
										
										adsList = p.ADS_RAND_1
										p.ADS_RAND_1 = newAdsPos3(adsList, ADS_ID)
										
										adsList = p.ADS_RAND_2
										p.ADS_RAND_2 = newAdsPos3(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_3
										p.ADS_RAND_3 = newAdsPos3(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_4
										p.ADS_RAND_4 = newAdsPos3(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_5
										p.ADS_RAND_5 = newAdsPos3(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_6
										p.ADS_RAND_6 = newAdsPos3(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_7
										p.ADS_RAND_7 = newAdsPos3(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_8
										p.ADS_RAND_8 = newAdsPos3(adsList, ADS_ID)
 
										adsList = p.ADS_RAND_9
										p.ADS_RAND_9 = newAdsPos3(adsList, ADS_ID)
									} else {
										switch RAN_SLOT {
										
											case "ADS_RAND_0":
											adsList := p.ADS_RAND_0
											p.ADS_RAND_0 = newAdsPos3(adsList, ADS_ID)
											
											case "ADS_RAND_1":
											adsList := p.ADS_RAND_1
											p.ADS_RAND_1 = newAdsPos3(adsList, ADS_ID)
											
											case "ADS_RAND_2":
											adsList := p.ADS_RAND_2
											p.ADS_RAND_2 = newAdsPos3(adsList, ADS_ID)
 
											case "ADS_RAND_3":
											adsList := p.ADS_RAND_3
											p.ADS_RAND_3 = newAdsPos3(adsList, ADS_ID)
 
											case "ADS_RAND_4":
											adsList := p.ADS_RAND_4
											p.ADS_RAND_4 = newAdsPos3(adsList, ADS_ID)
 
											case "ADS_RAND_5":
											adsList := p.ADS_RAND_5
											p.ADS_RAND_5 = newAdsPos3(adsList, ADS_ID)
 
											case "ADS_RAND_6":
											adsList := p.ADS_RAND_6
											p.ADS_RAND_6 = newAdsPos3(adsList, ADS_ID)
 
											case "ADS_RAND_7":
											adsList := p.ADS_RAND_7
											p.ADS_RAND_7 = newAdsPos3(adsList, ADS_ID)
 
											case "ADS_RAND_8":
											adsList := p.ADS_RAND_8
											p.ADS_RAND_8 = newAdsPos3(adsList, ADS_ID)
 
											case "ADS_RAND_9":
											adsList := p.ADS_RAND_9
											p.ADS_RAND_9 = newAdsPos3(adsList, ADS_ID)
										}
									
									}
									
									p.ADS_TIME_SLOT = TIMESLOT
									
									adKey := fmt.Sprintf("%s-%s", p.CATEGORY, TIMESLOT) 		
									key := datastore.NameKey("TDSADTS", adKey, nil)
                                    _, err := datastoreClient.Put(c, key, &p)
                                    //log.Printf("datastoreClient.Put()  [38262]")
									//log.Panicf("[S0282]")
									if err != nil {
										 panic(err)
									}	
 
									recCtr++
								}
							//}
							
							if FL_PROCESS_OK == true {
								msgDtl := fmt.Sprintf("[U00135] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								action := "U00135"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}	
						
					}
				
			
				case "SHOW_ALLD_ALLP":
					ADS_ID := r.FormValue("ADS_ID")
					//read all TDSADTS; for each record, update the timeslots from 0 to 9
					newAds := fmt.Sprintf("%v,%v,%v", ADS_ID, ADS_ID, ADS_ID)
					q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
					//log.Panicf("[S0283]")
					 recCount,_ := datastoreClient.Count(c,q)
					adts := make([]TDSADTS, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [38296]")
					FL_PROCESS_OK := false
					recCtr := 0
					for _, p := range adts{
						FL_PROCESS_OK = true
						p.ADS_RAND_0 = newAds
						p.ADS_RAND_1 = newAds
						p.ADS_RAND_2 = newAds
						p.ADS_RAND_3 = newAds
						p.ADS_RAND_4 = newAds
						p.ADS_RAND_5 = newAds
						p.ADS_RAND_6 = newAds
						p.ADS_RAND_7 = newAds
						p.ADS_RAND_8 = newAds
						p.ADS_RAND_9 = newAds
						
						adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT) 		
						key := datastore.NameKey("TDSADTS", adKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [38315]")
						//log.Panicf("[S0284]")
						if err != nil {
							 panic(err)
						}	
 
						recCtr++
					}
					
					if FL_PROCESS_OK == true {
						msgDtl := fmt.Sprintf("[U00125] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
						msgTyp := "success"
						//msgURL := fmt.Sprintf("/%v#page", currDesktop)
						action := "U00125"
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
				
				case "SHOW_ALLD_POS1":
					ADS_ID := r.FormValue("ADS_ID")
					RAN_SLOT := r.FormValue("RAN_SLOT")
					q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
					//log.Panicf("[S0285]")
					recCount,_ := datastoreClient.Count(c,q)
					adts := make([]TDSADTS, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [38344]")
					FL_PROCESS_OK := false
					recCtr := 0
					for _, p := range adts{
						FL_PROCESS_OK = true
						
						switch RAN_SLOT {
						
						case "ADS_RAND_0":
							adsList := p.ADS_RAND_0
							p.ADS_RAND_0 = newAdsPos1(adsList, ADS_ID)
						
						case "ADS_RAND_1":
							adsList := p.ADS_RAND_1
							p.ADS_RAND_1 = newAdsPos1(adsList, ADS_ID)
						
						case "ADS_RAND_2":
							adsList := p.ADS_RAND_2
							p.ADS_RAND_2 = newAdsPos1(adsList, ADS_ID)
							
						case "ADS_RAND_3":
							adsList := p.ADS_RAND_3
							p.ADS_RAND_3 = newAdsPos1(adsList, ADS_ID)
						
						case "ADS_RAND_4":
							adsList := p.ADS_RAND_4
							p.ADS_RAND_4 = newAdsPos1(adsList, ADS_ID)
						
						case "ADS_RAND_5":
							adsList := p.ADS_RAND_5
							p.ADS_RAND_5 = newAdsPos1(adsList, ADS_ID)
						
						case "ADS_RAND_6":
							adsList := p.ADS_RAND_6
							p.ADS_RAND_6 = newAdsPos1(adsList, ADS_ID)
						
						case "ADS_RAND_7":
							adsList := p.ADS_RAND_7
							p.ADS_RAND_7 = newAdsPos1(adsList, ADS_ID)
							
						case "ADS_RAND_8":
							adsList := p.ADS_RAND_8
							p.ADS_RAND_8 = newAdsPos1(adsList, ADS_ID)
						
						case "ADS_RAND_9":
							adsList := p.ADS_RAND_9
							p.ADS_RAND_9 = newAdsPos1(adsList, ADS_ID)
							
						default:
							adsList := p.ADS_RAND_0
							p.ADS_RAND_0 = newAdsPos1(adsList, ADS_ID)
							
							adsList = p.ADS_RAND_1
							p.ADS_RAND_1 = newAdsPos1(adsList, ADS_ID)
							
							adsList = p.ADS_RAND_2
							p.ADS_RAND_2 = newAdsPos1(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_3
							p.ADS_RAND_3 = newAdsPos1(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_4
							p.ADS_RAND_4 = newAdsPos1(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_5
							p.ADS_RAND_5 = newAdsPos1(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_6
							p.ADS_RAND_6 = newAdsPos1(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_7
							p.ADS_RAND_7 = newAdsPos1(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_8
							p.ADS_RAND_8 = newAdsPos1(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_9
							p.ADS_RAND_9 = newAdsPos1(adsList, ADS_ID)
						}
						
						adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT) 		
						key := datastore.NameKey("TDSADTS", adKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [38427]")
						//log.Panicf("[S0286]")
						if err != nil {
							 panic(err)
						}	
 
						recCtr++
					}
					
					if FL_PROCESS_OK == true {
						msgDtl := fmt.Sprintf("[U00126] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
						msgTyp := "success"
						//msgURL := fmt.Sprintf("/%v#page", currDesktop)
						action := "U00126"
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
					
				case "SHOW_ALLD_POS2":
					ADS_ID := r.FormValue("ADS_ID")
					RAN_SLOT := r.FormValue("RAN_SLOT")
					q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
					//log.Panicf("[S0287]")
					recCount,_ := datastoreClient.Count(c,q)
					adts := make([]TDSADTS, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [38456]")
					FL_PROCESS_OK := false
					recCtr := 0
					for _, p := range adts{
						FL_PROCESS_OK = true
						
						switch RAN_SLOT {
						
						case "ADS_RAND_0":
							adsList := p.ADS_RAND_0
							p.ADS_RAND_0 = newAdsPos2(adsList, ADS_ID)
						
						case "ADS_RAND_1":
							adsList := p.ADS_RAND_1
							p.ADS_RAND_1 = newAdsPos2(adsList, ADS_ID)
						
						case "ADS_RAND_2":
							adsList := p.ADS_RAND_2
							p.ADS_RAND_2 = newAdsPos2(adsList, ADS_ID)
							
						case "ADS_RAND_3":
							adsList := p.ADS_RAND_3
							p.ADS_RAND_3 = newAdsPos2(adsList, ADS_ID)
						
						case "ADS_RAND_4":
							adsList := p.ADS_RAND_4
							p.ADS_RAND_4 = newAdsPos2(adsList, ADS_ID)
						
						case "ADS_RAND_5":
							adsList := p.ADS_RAND_5
							p.ADS_RAND_5 = newAdsPos2(adsList, ADS_ID)
						
						case "ADS_RAND_6":
							adsList := p.ADS_RAND_6
							p.ADS_RAND_6 = newAdsPos2(adsList, ADS_ID)
						
						case "ADS_RAND_7":
							adsList := p.ADS_RAND_7
							p.ADS_RAND_7 = newAdsPos2(adsList, ADS_ID)
							
						case "ADS_RAND_8":
							adsList := p.ADS_RAND_8
							p.ADS_RAND_8 = newAdsPos2(adsList, ADS_ID)
						
						case "ADS_RAND_9":
							adsList := p.ADS_RAND_9
							p.ADS_RAND_9 = newAdsPos2(adsList, ADS_ID)
							
						default:
							adsList := p.ADS_RAND_0
							p.ADS_RAND_0 = newAdsPos2(adsList, ADS_ID)
							
							adsList = p.ADS_RAND_1
							p.ADS_RAND_1 = newAdsPos2(adsList, ADS_ID)
							
							adsList = p.ADS_RAND_2
							p.ADS_RAND_2 = newAdsPos2(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_3
							p.ADS_RAND_3 = newAdsPos2(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_4
							p.ADS_RAND_4 = newAdsPos2(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_5
							p.ADS_RAND_5 = newAdsPos2(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_6
							p.ADS_RAND_6 = newAdsPos2(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_7
							p.ADS_RAND_7 = newAdsPos2(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_8
							p.ADS_RAND_8 = newAdsPos2(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_9
							p.ADS_RAND_9 = newAdsPos2(adsList, ADS_ID)
						}
						
						adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT) 		
						key := datastore.NameKey("TDSADTS", adKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [38539]")
						//log.Panicf("[S0288]")
						if err != nil {
							 panic(err)
						}	
 
						recCtr++
					}
					
					if FL_PROCESS_OK == true {
						msgDtl := fmt.Sprintf("[U00126] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
						msgTyp := "success"
						//msgURL := fmt.Sprintf("/%v#page", currDesktop)
						action := "U00126"
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
					
				case "SHOW_ALLD_POS3":
					ADS_ID := r.FormValue("ADS_ID")
					RAN_SLOT := r.FormValue("RAN_SLOT")
					q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
					//log.Panicf("[S0289]")
					recCount,_ := datastoreClient.Count(c,q)
					adts := make([]TDSADTS, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [38568]")
					FL_PROCESS_OK := false
					recCtr := 0
					for _, p := range adts{
						FL_PROCESS_OK = true
						
						switch RAN_SLOT {
						
						case "ADS_RAND_0":
							adsList := p.ADS_RAND_0
							p.ADS_RAND_0 = newAdsPos3(adsList, ADS_ID)
						
						case "ADS_RAND_1":
							adsList := p.ADS_RAND_1
							p.ADS_RAND_1 = newAdsPos3(adsList, ADS_ID)
						
						case "ADS_RAND_2":
							adsList := p.ADS_RAND_2
							p.ADS_RAND_2 = newAdsPos3(adsList, ADS_ID)
							
						case "ADS_RAND_3":
							adsList := p.ADS_RAND_3
							p.ADS_RAND_3 = newAdsPos3(adsList, ADS_ID)
						
						case "ADS_RAND_4":
							adsList := p.ADS_RAND_4
							p.ADS_RAND_4 = newAdsPos3(adsList, ADS_ID)
						
						case "ADS_RAND_5":
							adsList := p.ADS_RAND_5
							p.ADS_RAND_5 = newAdsPos3(adsList, ADS_ID)
						
						case "ADS_RAND_6":
							adsList := p.ADS_RAND_6
							p.ADS_RAND_6 = newAdsPos3(adsList, ADS_ID)
						
						case "ADS_RAND_7":
							adsList := p.ADS_RAND_7
							p.ADS_RAND_7 = newAdsPos3(adsList, ADS_ID)
							
						case "ADS_RAND_8":
							adsList := p.ADS_RAND_8
							p.ADS_RAND_8 = newAdsPos3(adsList, ADS_ID)
						
						case "ADS_RAND_9":
							adsList := p.ADS_RAND_9
							p.ADS_RAND_9 = newAdsPos3(adsList, ADS_ID)
							
						default:
							adsList := p.ADS_RAND_0
							p.ADS_RAND_0 = newAdsPos3(adsList, ADS_ID)
							
							adsList = p.ADS_RAND_1
							p.ADS_RAND_1 = newAdsPos3(adsList, ADS_ID)
							
							adsList = p.ADS_RAND_2
							p.ADS_RAND_2 = newAdsPos3(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_3
							p.ADS_RAND_3 = newAdsPos3(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_4
							p.ADS_RAND_4 = newAdsPos3(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_5
							p.ADS_RAND_5 = newAdsPos3(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_6
							p.ADS_RAND_6 = newAdsPos3(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_7
							p.ADS_RAND_7 = newAdsPos3(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_8
							p.ADS_RAND_8 = newAdsPos3(adsList, ADS_ID)
	
							adsList = p.ADS_RAND_9
							p.ADS_RAND_9 = newAdsPos3(adsList, ADS_ID)
						}
						
						adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT) 		
						key := datastore.NameKey("TDSADTS", adKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [38651]")
						//log.Panicf("[S0290]")
						if err != nil {
							 panic(err)
						}	
 
						recCtr++
					}
					
					if FL_PROCESS_OK == true {
						msgDtl := fmt.Sprintf("[U00127] SUCCESS: Ads slots has been processed. COUNT= %v", recCtr)
						msgTyp := "success"
						action := "U00127"
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
					
				case "SELECT_DESKTOP_POSITION":
					ADS_ID := r.FormValue("ADS_ID")
					ADS_IMG := r.FormValue("ADS_IMG")
					//read all TDSADTS; for each record, update the timeslots for every position 2
					if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
					  panic(err)
					}
					
					
					TEMPDATA := TEMPSTRUCT{
						STR_FILLER1: ADS_ID,
						STR_FILLER2: ADS_IMG,
					}
					if err := adEditCustomTemplate.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
					getCategories(w,r,uid)
					if err := adEditCustomTemplate2.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}
					if err := adTimeSlots.Execute(w, ""); err != nil {
					  panic(err)
					}
					if err := adEditCustomTemplate2b.Execute(w, &TEMPDATA); err != nil {
					  panic(err)
					}	
					if err := htmlFooterModal.Execute(w, ""); err != nil {
					  panic(err)
					}	
			
				case "EditAd":
					//get Ads details from DS
					ADS_ID := r.FormValue("ADS_ID")
					thisAdNum := str2int(ADS_ID)
					
					dsKey := fmt.Sprintf("%s.%d", CLOUD_NAME, thisAdNum)
					key := datastore.NameKey("TDSADS", dsKey, nil)
					q := datastore.NewQuery("TDSADS").Filter("__key__ =", key)
					//log.Panicf("[S0291]")
					ads := make([]TDSADS, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &ads); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [38712]")
					for _, _ = range ads{
						if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
						  panic(err)
						}		
						if err := adEditTemplate.Execute(w, ads); err != nil {
						  panic(err)
						}
						getCategories(w,r,uid)
						if err := adEditTemplate2.Execute(w, ads); err != nil {
						  panic(err)
						}
						if err := htmlFooterModal.Execute(w, ""); err != nil {
						  panic(err)
						}
						break
					}	
 
				case "SaveAd":
 
					cADS_ID := r.FormValue("ADS_ID")
					ADS_ID := str2int(cADS_ID)
 
					ADS_PUB_ID := r.FormValue("ADS_PUB_ID")
 
					ADS_TITLE := r.FormValue("ADS_TITLE")
 
					ADS_URL := r.FormValue("ADS_URL")
					validateURL(w,r,ADS_URL)
					ADS_URL = strings.Replace(ADS_URL, "&", "@888@", -1)
 
					UPLOAD_DATE := r.FormValue("UPLOAD_DATE")
 
					CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
 
					ADS_IMG := r.FormValue("ADS_IMG")
	
					dsKey := fmt.Sprintf("%s.%d", CLOUD_NAME, ADS_ID)
					key := datastore.NameKey("TDSADS", dsKey, nil)
					q := datastore.NewQuery("TDSADS").Filter("__key__ =", key)
					//log.Panicf("[S0292]")
					ads := make([]TDSADS, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &ads); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [38757]")
					for _, p := range ads{
		
						p.ADS_PUB_ID = ADS_PUB_ID
						p.ADS_TITLE = ADS_TITLE
						p.ADS_URL = ADS_URL
						p.UPLOAD_DATE = UPLOAD_DATE
						p.CATEGORY = CATEGORY
						p.ADS_IMG = ADS_IMG
 
						adKey := fmt.Sprintf("%s.%d", p.ADS_PUB_ID, p.ADS_ID)
						key := datastore.NameKey("TDSADS", adKey, nil)
						
						if _, err := datastoreClient.Put(c, key, &p); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Put()  [38773]")
						//log.Panicf("[S0293]")
						
						//clear ads id cache
						ADS_ID_CACHE_KEY := fmt.Sprintf("ADS_ID_CACHE_%v", p.ADS_ID)
						putStrToMemcacheWithoutExp(w,r,ADS_ID_CACHE_KEY,"")
						
						msgDtl := "[U00052] SUCCESS: Ads details have been saved"
						msgTyp := "success"
						msgURL := "/admin-ads?ADS_FUNC=ListAds"
						action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to list ads.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						break
						//return
					}
				
				case "EditSlot":
				
					//get Ads details from DS
					ADS_TIME_SLOT := fmt.Sprintf("%v",r.FormValue("ADS_TIME_SLOT"))
					ADS_TIME_SLOT2 := fmt.Sprintf("%v",r.FormValue("ADS_TIME_SLOT2"))
					CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
					if err := htmlHeaderModalAds.Execute(w, ""); err != nil {
					  panic(err)
					}	
					q := datastore.NewQuery("TDSADTS").Filter("ADS_TIME_SLOT =", ADS_TIME_SLOT).
					                                  Filter("ADS_TIME_SLOT2 =", ADS_TIME_SLOT2).
													  Limit(1)
					//log.Panicf("[S0294]")
 
					ROW_COUNT, _ := datastoreClient.Count(c,q)	
					if ROW_COUNT <= 0 {
						q = datastore.NewQuery("TDSADTS").Filter("ADS_TIME_SLOT =", ADS_TIME_SLOT).
														  Filter("ADS_TIME_SLOT2 =", ADS_TIME_SLOT2).
														  Limit(1)
						//log.Panicf("[S0295]")
 
					}
													
					adts := make([]TDSADTS, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [38817]")
					for _, p := range adts{
						if p.CATEGORY == CATEGORY {						
							if err := adSlotEditTemplate.Execute(w, adts); err != nil {
							  panic(err)
							}
							getCategories(w,r,uid)
							if err := adSlotEditTemplate2.Execute(w, adts); err != nil {
							  panic(err)
							}
							if err := adTimeSlots.Execute(w, ""); err != nil {
							  panic(err)
							}
							if err := adSlotEditTemplate2b.Execute(w, adts); err != nil {
							  panic(err)
							}
							if err := adTimeSlots.Execute(w, ""); err != nil {
							  panic(err)
							}
							if err := adSlotEditTemplate2c.Execute(w, adts); err != nil {
							  panic(err)
							}
							break
						}
					}
					if err := htmlFooterModal.Execute(w, ""); err != nil {
					  panic(err)
					}
 
				case "SaveSlot":
 
					ADS_TIME_SLOT := fmt.Sprintf("%v",r.FormValue("ADS_TIME_SLOT"))
					//fmt.Fprintf(w, "ADS_TIME_SLOT: %v<br>", ADS_TIME_SLOT)
					ADS_TIME_SLOT2 := fmt.Sprintf("%v",r.FormValue("ADS_TIME_SLOT2"))
					//fmt.Fprintf(w, "ADS_TIME_SLOT2: %v<br>", ADS_TIME_SLOT2)
					ADS_RAND_0 := r.FormValue("ADS_RAND_0")
					//fmt.Fprintf(w, "ADS_RAND_0: %v<br>", ADS_RAND_0)
					ADS_RAND_1 := r.FormValue("ADS_RAND_1")
					//fmt.Fprintf(w, "ADS_RAND_1: %v<br>", ADS_RAND_1)
					ADS_RAND_2 := r.FormValue("ADS_RAND_2")
					//fmt.Fprintf(w, "ADS_RAND_2: %v<br>", ADS_RAND_2)
					ADS_RAND_3 := r.FormValue("ADS_RAND_3")
					//fmt.Fprintf(w, "ADS_RAND_3: %v<br>", ADS_RAND_3)
					ADS_RAND_4 := r.FormValue("ADS_RAND_4")
					//fmt.Fprintf(w, "ADS_RAND_4: %v<br>", ADS_RAND_4)
					ADS_RAND_5 := r.FormValue("ADS_RAND_5")
					//fmt.Fprintf(w, "ADS_RAND_5: %v<br>", ADS_RAND_5)
					ADS_RAND_6 := r.FormValue("ADS_RAND_6")
					//fmt.Fprintf(w, "ADS_RAND_6: %v<br>", ADS_RAND_6)
					ADS_RAND_7 := r.FormValue("ADS_RAND_7")
					//fmt.Fprintf(w, "ADS_RAND_7: %v<br>", ADS_RAND_7)
					ADS_RAND_8 := r.FormValue("ADS_RAND_8")
					//fmt.Fprintf(w, "ADS_RAND_8: %v<br>", ADS_RAND_8)
					ADS_RAND_9 := r.FormValue("ADS_RAND_9")
					//fmt.Fprintf(w, "ADS_RAND_9: %v<br>", ADS_RAND_9)
					CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
						
						p := TDSADTS{ 		
							SYS_VER: 1,	
							ADS_TIME_SLOT: 	ADS_TIME_SLOT,
							ADS_TIME_SLOT2: ADS_TIME_SLOT2,	
							ADS_RAND_0: ADS_RAND_0,
							ADS_RAND_1: ADS_RAND_1,
							ADS_RAND_2: ADS_RAND_2,
							ADS_RAND_3: ADS_RAND_3,	
							ADS_RAND_4: ADS_RAND_4,	
							ADS_RAND_5: ADS_RAND_5,
							ADS_RAND_6: ADS_RAND_6,
							ADS_RAND_7: ADS_RAND_7,
							ADS_RAND_8: ADS_RAND_8,	
							ADS_RAND_9: ADS_RAND_9,	
							CATEGORY: CATEGORY,
						}
						adKey := fmt.Sprintf("%s-%s", CATEGORY, ADS_TIME_SLOT) 		
						key := datastore.NameKey("TDSADTS", adKey, nil)
						
						if _, err := datastoreClient.Put(c, key, &p); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Put()  [38896]")
						//log.Panicf("[S0296]")
						
						msgDtl := "[U00053] SUCCESS: Ads slot details have been saved"
						msgTyp := "success"
						msgURL := "/admin-ads?ADS_FUNC=ListSlots"
						action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to list ads timeslots.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					//}
 
				case "ListSlots":
					
					CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
					SHOW_IMAGES := r.FormValue("SHOW_IMAGES")
					
					if err := iconsSettingsTemplateHeaderADS.Execute(w, ""); err != nil {
						 panic(err)
					}
					if err := adtsDispTemplateAdminHdr.Execute(w, CATEGORY); err != nil {
						 panic(err)
					}
					getCategories(w,r,uid)
					if err := adtsDispTemplateAdminHdr2.Execute(w, ""); err != nil {
						 panic(err)
					}
					//display ads timeslots
					if CATEGORY == "" {
						q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
						//log.Panicf("[S0297]")
						recCount,_ := datastoreClient.Count(c,q)	
						adts := make([]TDSADTS, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [38932]")
						if err := adtsDispTemplateAdminRecs.Execute(w, adts); err != nil {
							 panic(err)
						}
					} else {
						q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
						//log.Panicf("[S0298]")
						recCount,_ := datastoreClient.Count(c,q)
 
						adts := make([]TDSADTS, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [38945]")
						if SHOW_IMAGES == "Y" {
							if err := adtsDispTemplateAdminRecsShowImages.Execute(w, adts); err != nil {
								 panic(err)
							}
						} else {
							if err := adtsDispTemplateAdminRecs.Execute(w, adts); err != nil {
								 panic(err)
							}
						}
					}
					uploadURL2 := "/upload-ads"
					//w.Header().Set("Content-Type", "text/html")
					err := rootTemplateAds.Execute(w, uploadURL2)
					if err != nil {
							////log.Panicf("%v", err)
					}
					err = rootTemplate2Ads.Execute(w, "")
					if err != nil {
							////log.Panicf("%v", err)
					}
					//blobstore end
					if err := mediaSettingsTemplateTableFooter9.Execute(w, ""); err != nil {
						 panic(err)
					}
 
				case "ListAds":
					//display ads
					if err := iconsSettingsTemplateHeaderADS.Execute(w, ""); err != nil {
						 panic(err)
					}
					if err := iconsSettingsTemplateHeader2ADS.Execute(w, uid); err != nil {
						 panic(err)
					}
					q := datastore.NewQuery("TDSADS").Order("ADS_ID")
					//log.Panicf("[S0299]")
					recCount,_ := datastoreClient.Count(c,q)
 
					ads := make([]TDSADS, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &ads); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [38987]")
					if err := iconsSettingsTemplateTableADS.Execute(w, ads); err != nil {
						 panic(err)
					}
					uploadURL2 := "/upload-ads"
					//w.Header().Set("Content-Type", "text/html")
					err := rootTemplateAds.Execute(w, uploadURL2)
					if err != nil {
							////log.Panicf("%v", err)
					}
					err = rootTemplate2Ads.Execute(w, "")
					if err != nil {
							////log.Panicf("%v", err)
					}
					//blobstore end
				
					if err := mediaSettingsTemplateTableFooter9.Execute(w, ads); err != nil {
						 panic(err)
					}
					
				default:
					
					if err := iconsSettingsTemplateHeaderADS.Execute(w, ""); err != nil {
						 panic(err)
					}
					uploadURL2 := "/upload-ads"
					//w.Header().Set("Content-Type", "text/html")
					err := rootTemplateAds.Execute(w, uploadURL2)
					if err != nil {
							////log.Panicf("%v", err)
					}
					err = rootTemplate2Ads.Execute(w, "")
					if err != nil {
							////log.Panicf("%v", err)
					}
					//blobstore end
				
					if err := iconsSettingsTemplateTableFooter9.Execute(w, ""); err != nil {
						 panic(err)
					}
			}
			
		} else {
			msgDtl := "[U00054] ERROR: ADMIN-ADS NOT ALLOWED FOR YOUR ACCOUNT TYPE"
			msgTyp := "error"
			msgURL := "/admin-ads"
			action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Admin Ads page.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
 
			return
		}
	
	}
 
}

//new ads position 1
//there are 3 possible ads slots/frames for every slide or article 
func newAdsPos1(adsList, ADS_ID string) (newAds string) {
	SPL := strings.Split(adsList, ",")
	newAds = fmt.Sprintf("%v,%v,%v", ADS_ID, SPL[1], SPL[2])
	return
}

//new ads position 2 
func newAdsPos2(adsList, ADS_ID string) (newAds string) {
	SPL := strings.Split(adsList, ",")
	newAds = fmt.Sprintf("%v,%v,%v", SPL[0], ADS_ID, SPL[2])
	return
}

//new ads position 3 
func newAdsPos3(adsList, ADS_ID string) (newAds string) {
	SPL := strings.Split(adsList, ",")
	newAds = fmt.Sprintf("%v,%v,%v", SPL[0], SPL[1], ADS_ID)
	return
}

//validates if a given string is a valid url 
func validateURL(w http.ResponseWriter, r *http.Request, tURL string) {
	i := strings.Index(tURL, "http://")
	j := strings.Index(tURL, "https://")
	if i < 0 && j < 0 {
		msgDtl := fmt.Sprintf("[U00171] ERROR: URL (%v) is not valid. Should start with http:// or https://", tURL)
		msgTyp := "error"
		msgURL := fmt.Sprintf("/validation")
		action := fmt.Sprintf("Please correct the URL details first.")
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
}
//check if url is valid
func isValidUrl(w http.ResponseWriter, r *http.Request, tURL string) string {
	i := strings.Index(tURL, "http://")
	j := strings.Index(tURL, "https://")
	a := strings.Index(tURL, "ai://")
	switch {
		case a >= 0:
			return "FILE"
		case i >= 0 || j >= 0:
			return "URL"
		case i < 0 && j < 0:
			return "SID"
	}
	return "INVALID"
}

//handles /admin-slides handler
//does all things related to slides processing especially those specific to owner of slides or admin					
func adminSlides(w http.ResponseWriter, r *http.Request) {
	checkReferrer(w,r)
    //D0086
    datastoreClient := createClientDS()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	updateUserActiveData(w, r, c, uid, "/admin-slides")
	uReferer := r.Referer()
	sl := strings.Split(uReferer, "/")
	currDesktop:= sl[len(sl)-1]
	//get user privilege
	FUNC_CODE := "GET_GRP_ID"
	FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	if FL_VALID_USER == true {
		if (GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
			FUNC_CODE2 := r.FormValue("FUNC_CODE")
			switch FUNC_CODE2 {
                //slides
				case "UPDATE2":
					TITLE := r.FormValue("TITLE")
					TITLE = strings.Replace(TITLE, "_", " ", -1)
					DESC := r.FormValue("DESC")
					DESC = strings.Replace(DESC, "_", " ", -1)
					DOC_ID2 := r.FormValue("DOC_ID")
					DOC_ID := str2int(DOC_ID2)
					MUSIC_ID2 := strings.TrimSpace(r.FormValue("MUSIC_ID"))
					MUSIC_ID := str2int(MUSIC_ID2)
					GET_NEXT := strings.TrimSpace(r.FormValue("GET_NEXT"))
					GET_NEXT = strings.Replace(GET_NEXT, "_", " ", -1)
					GET_NEXT2 := str2int(GET_NEXT)
					//disallow linked docs
					BLOB_KEY, _, _, _, _, _, _, _, _, _  := getTDSSLIDEBlobKey(w, r, GET_NEXT2)
					//validate authority
					//check if GET_WALL is found; means linked content
					i := strings.Index(BLOB_KEY, "GET_WALL:")
					if i != -1 {
						msgDtl := fmt.Sprintf("[U00187] ERROR: Get next not allowed for linked docs.")
						msgTyp := "error"
						msgURL := "/slides"
						action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH Slides.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
					CATEGORY := r.FormValue("CATEGORY")
					TAGS := r.FormValue("TAGS")
					if TAGS == "" {
						TAGS = "/static/img/NoImageAvailable.png"
					}
					AUTHOR := r.FormValue("AUTHOR")
					DOC_STAT := r.FormValue("DOC_STAT")
					FL_SHARED := r.FormValue("FL_SHARED")
					FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSSLIDE", dsKey, nil)
					q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
					//log.Panicf("[S0300]")
					slide := make([]TDSSLIDE, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						 panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [39164]")
					thisID := 0
					thisAuthor := ""
					blobkey := ""
					//SYS_VER := 0
					NUM_LIKES := float64(0)	
					NUM_COMMENTS := float64(0)
					NUM_VIEWS := float64(0)
					for _, p := range slide{
						//oldBlob := p.BLOB_URL
						p.TITLE	= TITLE
						p.DESC	= DESC
						p.CATEGORY	= CATEGORY
						p.FL_SHARED	= FL_SHARED
						p.DOC_STAT	= DOC_STAT
						p.TAGS	= TAGS
						if AUTHOR != "" {
							p.AUTHOR = AUTHOR
						}
						//p.BLOB_URL = blobkey
						p.MUSIC_ID = MUSIC_ID
						p.GET_NEXT = GET_NEXT
						blobkey = p.BLOB_URL
						p.FL_COUNTRY_SPECIFIC = FL_COUNTRY_SPECIFIC
						NUM_LIKES = float64(p.NUM_LIKES)
						NUM_COMMENTS = float64(p.NUM_COMMENTS)
						NUM_VIEWS = float64(p.NUM_VIEWS)
						//SYS_VER = p.SYS_VER
						thisID = p.DOC_ID
						thisAuthor = p.AUTHOR
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [39197]")
						//log.Panicf("[S0301]")
						if err != nil {
							 panic(err)
                        }
                        //D0089
                        //update object permission
                        err = updateGcsObjPermission(p.BLOB_URL, FL_SHARED, DOC_STAT)
                        if err != nil {
                            panic(err)
                        }
						TDSSLIDE_Cacher(w,r,uid,thisID,blobkey,DOC_STAT,FL_SHARED,p.AUTHOR,FL_COUNTRY_SPECIFIC,TITLE,TAGS,p.SHARED_TO,p.MUSIC_ID, p.GET_NEXT)
						break
					}
					if CATEGORY == "ULAPPH" {
						cKey := fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ULAPPH_HELP")
						putStrToMemcacheWithoutExp(w,r,cKey,"")
					}
					cKey := fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ALL")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear cache contentsAll
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v", CATEGORY)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					putStrToMemcacheWithoutExp(w,r,"CACHE_TDSSLIDE_NUM_LIKES","")
					putStrToMemcacheWithoutExp(w,r,"CACHE_TDSARTL_NUM_LIKES","")
					putStrToMemcacheWithoutExp(w,r,"CACHE_TDSSLIDE_LATEST","")
					putStrToMemcacheWithoutExp(w,r,"CACHE_TDSARTL_LATEST","")
					putStrToMemcacheWithoutExp(w,r,"CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT","")
					putStrToMemcacheWithoutExp(w,r,"CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT","")
					//cache contentsAll home
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//cache contentsAll desktop0
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v_%v", "desktop0", uid)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear slides count for desktop
					cKey = fmt.Sprintf("TDSSLIDE_TOTAL_%v", CATEGORY)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear slides count for overall
					cKey = fmt.Sprintf("TDSSLIDE_TOTAL")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear push left
					cKey = fmt.Sprintf("CACHE_PUSH_LEFT_DATA")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear pinned cache
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					tstamp := getTimestamp()
					thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", thisID)
					thisIdxURL := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", getSchemeUrl(w,r), thisID, thisIdxKey, CATEGORY, MUSIC_ID)
					TITLE2 := strings.Replace(TITLE, "_", " ", -1)
					DESC2 := strings.Replace(DESC, "_", " ", -1)
					slideIdx := &IDX_TDSSLIDE{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"SLIDES",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSSLIDE",	
						DESKTOP: 			CATEGORY,
						FL_SHARED:			FL_SHARED,
						DOC_STAT:			DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE2,	
						DOC_DESC: 			DESC2,
						DOC_AUTHOR:         thisAuthor,					
						//DOC_CONTENT_TEXT: 	blobText,
                        DOC_CONTENT_TEXT: 	"",
                        DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		NUM_LIKES,		
						DOC_NUM_COMMENTS:	NUM_COMMENTS,
						DOC_NUM_VIEWS:		NUM_VIEWS,
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			TAGS,
						//DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
					}
                    
					putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
					sysReq := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, TITLE, blobkey, CATEGORY)	
					//sysReq := fmt.Sprintf("/media")	
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				//slides
				case "UPDATE3":
					SHARED_TO := r.FormValue("SHARED_TO")
					DOC_ID2 := r.FormValue("DOC_ID")
					DOC_ID := str2int(DOC_ID2)
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSSLIDE", dsKey, nil)
					q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
					//log.Panicf("[S0302]")
					slide := make([]TDSSLIDE, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [39296]")
					thisID := 0
					thisAuthor := ""
					blobkey := ""
					//SYS_VER := 0
					for _, p := range slide{
						blobkey = p.BLOB_URL
						thisID = p.DOC_ID
						thisAuthor = p.AUTHOR
						//SYS_VER = p.SYS_VER
						p.DOC_STAT = "Personal"
						p.FL_SHARED = "Y"
						p.SHARED_TO = SHARED_TO
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [39312]")
						//log.Panicf("[S0303]")
						if err != nil {
							panic(err)
						}
						//update cached details
						TDSSLIDE_Cacher(w,r,uid,thisID,blobkey,p.DOC_STAT,p.FL_SHARED,uid,p.FL_COUNTRY_SPECIFIC,p.TITLE,p.TAGS,p.SHARED_TO,p.MUSIC_ID, p.GET_NEXT)
						if p.CATEGORY == "ULAPPH" {
							cKey := fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ULAPPH_HELP")
							putStrToMemcacheWithoutExp(w,r,cKey,"")
						}
						cKey := fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ALL")
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						//clear cache contentsAll
						cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v", p.CATEGORY)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						//cache contentsAll home
						cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES")
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						//cache contentsAll desktop0
						cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v_%v", "desktop0", uid)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						//clear slides count for desktop
						cKey = fmt.Sprintf("TDSSLIDE_TOTAL_%v", p.CATEGORY)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						//clear slides count for overall
						cKey = fmt.Sprintf("TDSSLIDE_TOTAL")
						putStrToMemcacheWithoutExp(w,r,cKey,"")

						tstamp := getTimestamp()
						thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", thisID)
						thisIdxURL := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", getSchemeUrl(w,r), thisID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
						TITLE := strings.Replace(p.TITLE, "_", " ", -1)
						DESC := strings.Replace(p.DESC, "_", " ", -1)
						slideIdx := &IDX_TDSSLIDE{
							DOC_KEY: 			thisIdxKey,
							SEARCH_TYPE: 		"SLIDES",
							SOURCE_TYPE: 		"ULAPPH",	
							SOURCE_TBL:  		"TDSSLIDE",	
							DESKTOP: 			p.CATEGORY,
							FL_SHARED:			p.FL_SHARED,
							DOC_STAT:			p.DOC_STAT,
							DOC_SCOPE_OVERALL:	"",
							DOC_SCOPE_COUNTRY:  "",
							DOC_SCOPE_REGION:  	"",
							DOC_SCOPE_CITY: 	"",
							DOC_SCOPE_BARANGAY: "",
							DOC_TITLE: 			TITLE,	
							DOC_DESC: 			DESC,
							DOC_AUTHOR:         thisAuthor,					
							//DOC_CONTENT_TEXT: 	blobText,
                            DOC_CONTENT_TEXT: 	"",
                            DOC_CONTENT_HTML: 	"",	
							DOC_CONTENT_ATOM: 	"",	
							DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
							DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
							DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),	
							CONTENT_URL: 		thisIdxURL,
							IMG_URL: 			p.TAGS,
							//DATE_ADDED: 		tstamp,
							DATE_UPDATED: 		tstamp,
						}
                        
						putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
						sysReq := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, p.TITLE, blobkey, p.CATEGORY)	
						//sysReq := fmt.Sprintf("/media")	
						http.Redirect(w, r, sysReq, http.StatusFound)
						//return
						break
                    }
                case "ENC_SLIDE":
                    //log.Printf("ENC_SLIDE")
					DOC_ID2 := r.FormValue("DOC_ID")
					SYS_VER2 := r.FormValue("P")
					DOC_ID := str2int(DOC_ID2)
					SYS_VER := str2int(SYS_VER2)
					TITLE := ""
					blobkey := ""
					CATEGORY := ""			
 
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSSLIDE", dsKey, nil)
					q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
					//log.Panicf("[S0304]")
					slide := make([]TDSSLIDE, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						 panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [39400]")
					
					for _, p := range slide{
						p.SYS_VER = SYS_VER
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [39407]")
						//log.Panicf("[S0305]")
						if err != nil {
							 panic(err)
						}		
 
						break
					}
					//call encryptor here	
					//dispStr := []byte("")
					if SYS_VER > 0 {
						if SYS_VER == 777 {
                            SID := fmt.Sprintf("TDSSLIDE-%v", DOC_ID)
                            //log.Printf("encrypter")
							_ = encrypter(w,r,SID,ENCRYPTION_KEY)
						} else {
                            //log.Printf("decrypter")
							SID := fmt.Sprintf("TDSSLIDE-%v", DOC_ID)
							_ = decrypter(w,r,SID,ENCRYPTION_KEY)
						}		
					}
					sysReq := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, TITLE, blobkey, CATEGORY)		
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case "PINNED_SLIDE":
 
					DOC_ID2 := r.FormValue("DOC_ID")
					SYS_VER2 := r.FormValue("P")
					DOC_ID := str2int(DOC_ID2)
					SYS_VER := str2int(SYS_VER2)
					TITLE := ""
					blobkey := ""
					CATEGORY := ""
					
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSSLIDE", dsKey, nil)
					q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
					//log.Panicf("[S0306]")
					slide := make([]TDSSLIDE, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						 panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [39450]")
					
					for _, p := range slide{
 
						p.SYS_VER = SYS_VER
						
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [39459]")
						//log.Panicf("[S0307]")
						if err != nil {
							 panic(err)
						
						}		
 
						break
					}
					//clear pinned cache
					cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
							
					sysReq := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, TITLE, blobkey, CATEGORY)		
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				
				case "CLEAR-CACHE":
					blobkey := r.FormValue("BLOB_URL")
 
					SLIDES_CACHE_KEY := fmt.Sprintf("SLIDES_CACHE_%v", blobkey)
					putStrToMemcacheWithoutExp(w,r,SLIDES_CACHE_KEY,"")
					
					ARTICLES_CACHE_KEY := fmt.Sprintf("ARTICLES_CACHE_%v", blobkey)
					putStrToMemcacheWithoutExp(w,r,ARTICLES_CACHE_KEY,"")

					//D0064
					TURNJS_CACHE_KEY := fmt.Sprintf("SLIDES_TURNJS_%v", blobkey)
					putStrToMemcacheWithoutExp(w,r,TURNJS_CACHE_KEY,"")
					
					msgDtl := "[U00120] SUCCESS: Cache has been cleared."
					msgTyp := "success"
					msgURL := fmt.Sprintf("/%v#page", currDesktop)
					action := "U00120"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case "DELETE":
					//delete slides
					DOC_ID := r.FormValue("DOC_ID")
					docID := str2int(DOC_ID)
					BLOB_URL := r.FormValue("BLOB_URL")
					CATEGORY := ""
					//TITLE := ""
					if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
						//delete from tiedot 
						err := tiedotDeleteSlide(w,r,docID)
						if err != nil {
							ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotDeleteSlide(): %v", err))
							return
						}
						ulapphDebug(w,r, "info", fmt.Sprintf("DELETED TIEDOT: docID: %v tiedotDeleteSlide: %#v", docID, BLOB_URL))

						//delete from SWFS
						err = deleteSeaweedStorage(w,r,BLOB_URL)
						if err != nil {
							ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: deleteSeaweedStorage(): %v", err))
							return
						}
						ulapphDebug(w,r, "info", fmt.Sprintf("DELETED SWFS: docID: %v deleteSeaweedStorage: %v", docID, BLOB_URL))

					} else {

					//slides
					dsKey := fmt.Sprintf("%d", docID)
					key := datastore.NameKey("TDSSLIDE", dsKey, nil)
					q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
					//log.Panicf("[S0308]")
					slide := make([]TDSSLIDE, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [39514]")
					
					for _, p := range slide{
							if p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" {	
								//TITLE = p.TITLE
								if p.BLOB_URL == BLOB_URL {
									//blobstore.Delete(c, appengine.BlobKey(p.BLOB_URL))	
									err := deleteGcsObject(c, p.BLOB_URL)
									if err != nil {
										//log.Fatalf("ERROR: deleteGcsObject() %v", err)
										ulapphDebug(w,r, "info", fmt.Sprintf("ERROR: deleteGcsObject() %v", err))
									}
								}
								thisKey := fmt.Sprintf("%d", docID)
								key := datastore.NameKey("TDSSLIDE", thisKey, nil)
								datastoreClient.Delete(c, key)
								CATEGORY = p.CATEGORY
								break
							} else {
								//validate authority
								if GROUP_ID == "GRP_USER" && p.AUTHOR != uid {
									_, _, _, AUTHOR, _, _, _, _, _  := getTDSARTLBlobKey(w, r, docID)
									if SYS_NOREG_FIXED_USER != "" {
										//allow
									} else {
										if uid != AUTHOR {
										msgDtl := "[U00055] ERROR: You have no authority to access this function."
										msgTyp := "error"
										msgURL := "/admin-slides"
										action := fmt.Sprintf("Sorry for this error! Please contact administrator.")
										sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
										http.Redirect(w, r, sysReq, http.StatusFound)
										return
										}
									}
								}
 
							}
					}

					}
					
					//remove html cache
					SLIDES_CACHE_KEY := fmt.Sprintf("SLIDES_CACHE_%v", BLOB_URL)
					putStrToMemcacheWithoutExp(w,r,SLIDES_CACHE_KEY,"")
					
					//remove cacher
					SLIDES_CACHER_KEY := fmt.Sprintf("TDSSLIDE_DOCID_CACHE_%v", docID)
					putStrToMemcacheWithoutExp(w,r,SLIDES_CACHER_KEY,"")
					
					//delete slide from search idx
					thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", docID)
					index, err := search.Open("IDX_TDSSLIDE")
					if err != nil {
						 panic(err)
					}
					_ = index.Delete(c, thisIdxKey)
					
					//clear slides count for desktop
					cKey := fmt.Sprintf("TDSSLIDE_TOTAL_%v", CATEGORY)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear slides count overall
					cKey = fmt.Sprintf("TDSSLIDE_TOTAL")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					//clear cache contentsAll
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v", CATEGORY)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					//clear content cache
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
 
					putStrToMemcacheWithoutExp(w,r,"CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT","")
					
					putStrToMemcacheWithoutExp(w,r,"CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT","")					
					
					cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					//clear push left
					cKey = fmt.Sprintf("CACHE_PUSH_LEFT_DATA")
					putStrToMemcacheWithoutExp(w,r,cKey,"")					
					
					msgDtl := "[U00056] SUCCESS: Slide file has been deleted."
					msgTyp := "success"
					msgURL := fmt.Sprintf("/%v#page", currDesktop)
					action := "U00056"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case "VIEW":
					//slides
					ulapphDebug(w,r, "info", fmt.Sprintf("VIEW: %v", ""))
					DOC_ID := r.FormValue("DOC_ID")
					docID := str2int(DOC_ID)
					if SYS_STATELESS_SERVER == true {
						BLOB_KEY := r.FormValue("BLOB_KEY")
						ulapphDebug(w,r, "info", fmt.Sprintf("BLOB_KEY: %v", BLOB_KEY))
						if BLOB_KEY != "" {
							//http://127.0.0.1:7070/27,1123b0f25dcc
							//SID := r.FormValue("SID")
							SID := "SWFSBLOB"
							SID2 := fmt.Sprintf("TDSSLIDE-%v", docID)
							uid := r.FormValue("uid")
							UID := r.FormValue("UID")
							url := fmt.Sprintf("/editor?EDIT_FUNC=ACE-LOCAL&SID=%v&DOC_ID=%v&UID=%v&uid=%v&BLOB_KEY=%v&SID2=%v", SID, DOC_ID, UID, uid, BLOB_KEY, SID2)
							ulapphDebug(w,r, "info", fmt.Sprintf("url: %v", url))
							http.Redirect(w, r, url, http.StatusFound)
							return
						}	
					}
					
					BLOB_KEY, _, _, _, _, _, _, _, _, _  := getTDSSLIDEBlobKey(w, r, docID)
					//validate authority
					if SYS_NOREG_FIXED_USER != "" {
						//allow
					} else {
						if GROUP_ID != "GRP_USER" && GROUP_ID != "GRP_ADMIN" {
						msgDtl := "[U00057] ERROR: You have no authority to access this function."
						msgTyp := "error"
						msgURL := "/slides"
						action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Slides.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
						}
					}
				
					//check if GET_WALL is found; means linked content
					i := strings.Index(BLOB_KEY, "GET_WALL:")
					if i != -1 {
						//retrieve slide
						
						SPL := strings.Split(BLOB_KEY,"GET_WALL:")
						if len(SPL) > 1 {
							linkedUrl := SPL[1]
							linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
							if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
							  panic(err)
							}
							
							fmt.Fprintf(w, "<img src=\"/static/img/ucopy.png\" width=100 height=100>")
							fmt.Fprintf(w, "<h3>Note: This is a linked document.</h3><hr>")
							fmt.Fprintf(w, "<br><b>URL:</b> %v", linkedUrl)
							fmt.Fprintf(w, "<br><b>View:</b> <a href=\"%v\">Click here to view</a>", linkedUrl)
							fmt.Fprintf(w, "<br><b>Doc ID:</b> %v", docID)
							fmt.Fprintf(w, "<br><b>Update:</b> <a href=\"#update-slides\">Update Details</a>")
							fmt.Fprintf(w, "<br><b>Delete:</b> <a href=\"/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v#delete-slides\">Click to Delete</a><hr>", docID)
							
							//display media
							dsKey := fmt.Sprintf("%d", docID)
							key := datastore.NameKey("TDSSLIDE", dsKey, nil)
							q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
							//log.Panicf("[S0309]")
							recCount,_ := datastoreClient.Count(c,q)
							if recCount <= 0 {
								fmt.Fprintf(w, "<h3><font color=red>This is a linked document but it is no longer found in this site.</font></h3>")
							}
							slide := make([]TDSSLIDE, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [39665]")
 
							for _, p := range slide{
								//linked slide doc
								fmt.Fprintf(w, "<br><b>Title: </b> [TDSSLIDE-%v] %v<br>", docID, p.TITLE)
								fmt.Fprintf(w, "<br><b>Description: </b> %v<br>", p.DESC)
								fmt.Fprintf(w, "<br><b>Category: </b> %v<br>", p.CATEGORY)
								fmt.Fprintf(w, "<br><b>Doc Status: </b> %v<br>", p.DOC_STAT)
								fmt.Fprintf(w, "<br><b>Author: </b> %v<br>", p.AUTHOR)
								fmt.Fprintf(w, "<br><b>Shared Status: </b> %v<br>", p.FL_SHARED)
								
								err := rootTemplateSlideU1Del.Execute(w, slide)
								if err != nil {
										////log.Panicf("%v", err)
								}
 
								err = rootTemplateSlideU1.Execute(w, "")
								if err != nil {
										////log.Panicf("%v", err)
								}
 
								err = rootTemplateSlideU2.Execute(w, slide)
								if err != nil {
										////log.Panicf("%v", err)
								}
								getCategories(w,r,uid)
								err = rootTemplateSlideU3.Execute(w, slide)
								if err != nil {
										////log.Panicf("%v", err)
								}
								
							}
						}
						
					} else {
								
						if err := iconsSettingsTemplateHeaderSLU.Execute(w, docID); err != nil {
							 panic(err)
						}
						//display media
						dsKey := fmt.Sprintf("%d", docID)
						key := datastore.NameKey("TDSSLIDE", dsKey, nil)
						q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
						//log.Panicf("[S0310]")
 
						slide := make([]TDSSLIDE, 0, 1)
						if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
							 panic(err)
						}
                        //log.Printf("datastoreClient.Get()  [39714]")
						for _, p := range slide{
								fmt.Fprintf(w, "<b>Title:</b> [TDSSLIDE-%v] %v - %v<br>", p.DOC_ID, p.TITLE, p.DESC)
								if p.SYS_VER == 777 {
									fmt.Fprintf(w, "<b>Encrypted:</b> <img src=\"/static/img/encrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-slides?FUNC_CODE=ENC_SLIDE&P=666&DOC_ID=%v\">Decrypt</a>] [ <a download=\"TDSSLIDE-%v-%v.txt\" href=\"/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-%v\">Backup Encrypted File</a> ]<br>", p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID)		
								} else {
									
									if p.SYS_VER == 666 {
										fmt.Fprintf(w, "<b>Not Encrypted:</b> <img src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-slides?FUNC_CODE=ENC_SLIDE&P=777&DOC_ID=%v\">Encrypt</a>] (Encryption Enabled - <a href=\"/admin-slides?FUNC_CODE=ENC_SLIDE&P=0&DOC_ID=%v\">Turn Off</a>)<br>", p.DOC_ID, p.DOC_ID)
									} else {
										fmt.Fprintf(w, "<b>Not Encrypted:</b> <img src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-slides?FUNC_CODE=ENC_SLIDE&P=777&DOC_ID=%v\">Encrypt</a>] [ <a download=\"TDSSLIDE-%v-%v.txt\" href=\"/editor?EDIT_FUNC=CRYPTO&EDIT_MODE=NEW-CRYPTO&sid=TDSSLIDE-%v&ct=e&cv=d\">Backup Encrypted File</a> ]<br>", p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID)
									}									
								}
								fmt.Fprintf(w, "<b>Edit:</b> [ <a href=\"/editor?DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v\">Text Editor1</a> ] [ <a href=\"/editor?EDIT_FUNC=READER&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v\">Text Editor2</a> ] [ <a href=\"/media?FUNC_CODE=RAWTEXT&DOC_ID=%v&SID=TDSSLIDE-%v\">View Raw Text</a> ] [ <a href=\"/media?FUNC_CODE=PLAY&DOC_ID=%v&SID=TDSSLIDE-%v\">View Original Text</a> ] [ <a download=\"TDSSLIDE-%v-%v.doc\" href=\"/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-%v\">Download Doc File</a> ] [ <a download=\"TDSSLIDE-%v-%v.slide\" href=\"/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-%v\">Download Text File</a> ] [ <a href=\"/media?FUNC_CODE=RAWJSON&DOC_ID=%v&SID=TDSSLIDE-%v\">View Raw JSON</a> ]<br>", p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_ID, p.DOC_ID, p.DOC_ID, p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID, p.DOC_ID, p.DOC_ID)		
								reqStr := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.FL_COUNTRY_SPECIFIC)
								fmt.Fprintf(w, "<b>Slide URL:</b> <a href=\"%v\">%v</a><br>", reqStr, reqStr)
								reqStr2 := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v&GET_NEXT=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.GET_NEXT, p.FL_COUNTRY_SPECIFIC)
								fmt.Fprintf(w, "<b>Article URL:</b> <a href=\"%v\">%v</a><br>", reqStr2, reqStr2)
								fmt.Fprintf(w, "<b>ShortURL:</b> <a href=\"%v\">%v</a><br>", ShortenUrl(w,r,reqStr), ShortenUrl(w,r,reqStr))
								admURL := fmt.Sprintf("%vadmin-slides?FUNC_CODE=VIEW&DOC_ID=%v&SID=TDSSLIDE-%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID)
								fmt.Fprintf(w, "<b>AdminURL:</b> <a href=\"%v\">%v</a><br>", admURL, admURL)
								fmt.Fprintf(w, "<b>TurnJS URL:</b> <a href=\"%v&APP=turnjs\">%v&APP=turnjs</a><br>", reqStr, reqStr)
								fmt.Fprintf(w, "<b>Doc ID:</b> %v<br>", p.DOC_ID)
								fmt.Fprintf(w, "<b>SID:</b> TDSSLIDE-%v<br>", p.DOC_ID)
								fmt.Fprintf(w, "<b>Publish Status:</b> %v<br>", p.DOC_STAT)
								fmt.Fprintf(w, "<b>Category:</b> %v<br>", p.CATEGORY)
								URL_DIS := fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSSLIDE-%v&TITLE=%v", p.DOC_ID, p.TITLE)
								fmt.Fprintf(w, "<b>Discussion:</b> <a href=\"%v\">View Comments</a><br>", URL_DIS)
								fmt.Fprintf(w, "<b>Author: </b> %v<br>", p.AUTHOR)
								fmt.Fprintf(w, "<b>Shared Status:</b> %v<br>", p.FL_SHARED)
								fmt.Fprintf(w, "<b>Title:</b> %v<br>", p.TITLE)
								fmt.Fprintf(w, "<b>Description:</b> %v<br>", p.DESC)
								fmt.Fprintf(w, "<b>Desktop:</b> %v<br>", p.CATEGORY)
								fmt.Fprintf(w, "<b>Image Src:</b> <img src=\"%v\" height=100 width=100></img><a href=\"/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD\"><img src=\"/static/img/uploader.png\" title=\"Multiple Upload\" height=\"40\" width=\"40\"/></a><br>", p.TAGS)
								
								fmt.Fprintf(w, "<b>Blob Key:</b> %v<br>", p.BLOB_URL)
								fmt.Fprintf(w, "<b>Background Music ID:</b> %v<br>", p.MUSIC_ID)
								fmt.Fprintf(w, "<b>Get Next Content:</b> %v<br>", p.GET_NEXT)
								if SYS_DISP_HOMEPAGE_CFG == true {
								fmt.Fprintf(w, "<b>Set as Homepage:</b><a href=\"/admin-setup?ADMIN_FUNC=SET_AS_HOMEPAGE&URL=%v\"><img src=\"/static/img/www.png\" width=\"50\" height=\"40\"></img></a><br>", ShortenUrl(w,r,reqStr))
								}
								fmt.Fprintf(w, "<b>Set Advertisement:</b><a href=\"/admin-setup?ADMIN_FUNC=SET_AS_AD&TYPE=SLIDE&TITLE=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&IMG_URL=%v&MUSIC_ID=%v\"><img src=\"/static/img/ad-icon.png\" width=\"50\" height=\"40\"></img></a><br>", p.TITLE, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.TAGS, p.MUSIC_ID)
								fmt.Fprintf(w, "<b>Play Endless Loop:</b><a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&DOC_ID=%v&BLOB_KEY=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"><img src=\"/static/img/infinite.png\" width=\"50\" height=\"40\"></img></a><br>", p.TITLE, p.DOC_ID, p.BLOB_URL, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, "SELF", SLIDE_SOUND_SET)
								fmt.Fprintf(w, "<b>Presenter:</b><a href=\"/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&TITLE=%v&DOC_ID=%v&BLOB_KEY=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v&FL_COUNTRY_SPECIFIC=%v\"><img src=\"/static/img/presenter.png\" width=\"40\" height=\"40\"></img></a><br>", p.TITLE, p.DOC_ID, p.BLOB_URL, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.FL_COUNTRY_SPECIFIC)
								fmt.Fprintf(w, "<b>Save to Local Storage:</b><a href=\"/uloc?LS_FUNC=SLIDE_COPY&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&IMG_SRC=%v\"><img src=\"/static/img/uloc.png\" width=\"40\" height=\"40\"></img></a><br>", p.DOC_ID, p.DOC_ID, p.TITLE, p.TAGS)
								fmt.Fprintf(w, "<b>Share to Social Media:</b><a href=\"/share?SH_FUNC=all&title=%v&url=%v\"><img src=\"/static/img/sharethis.png\" width=\"40\" height=\"40\"></img></a><br>", p.TITLE, reqStr)
								fmt.Fprintf(w, "<b>Download Slide:</b><a download=\"TDSSLIDE-%v-%v.html\" href=\"/uloc?LS_FUNC=SLIDE_COPY2&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&IMG_SRC=%v\"><img src=\"/static/img/download.png\" width=\"40\" height=\"40\"></img></a><br>", p.DOC_ID, p.TITLE, p.DOC_ID, p.DOC_ID, p.TITLE, p.TAGS)
								//slide
								fmt.Fprintf(w, "<b>Wall Copy:</b> <a href=\"/wall?WALL_FUNC=SLIDE_COPY&DOC_ID=%v&SID=TDSSLIDE-%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" width=\"40\" height=\"40\"></img></a><br>", p.DOC_ID, p.DOC_ID, p.TITLE, CMD_GEN_KEY)
					
								if p.SYS_VER == 888 {
									fmt.Fprintf(w, "<b>Pinned:</b> <img src=\"/static/img/pinned.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-slides?FUNC_CODE=PINNED_SLIDE&P=1&DOC_ID=%v\">Unpin</a>]<br>", p.DOC_ID)		
								} else {
									fmt.Fprintf(w, "<b>Not Pinned:</b> <img src=\"/static/img/pinned2.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-slides?FUNC_CODE=PINNED_SLIDE&P=888&DOC_ID=%v\">Pin</a>]<br>", p.DOC_ID)										
								}
								//fmt.Fprintf(w, "<b>Download:</b> [ <a href=\"/media?FUNC_CODE=DL&SID=TDSSLIDE-%v&BLOB_KEY=%v\">Download File</a> ]<br>", p.DOC_ID, p.BLOB_URL)
								fmt.Fprintf(w, "<hr>")
								fmt.Fprintf(w, "<h1>%v<h1>", p.TITLE)
								fmt.Fprintf(w, "<div class=\"CodeBox\">")
								_, _, err := readLines4(w, r, p.BLOB_URL)
								if err != nil {
									//panic(err)
									fmt.Fprintf(w, "<font color=red>blobstore: ERROR: %v</font>", err)
								}
								fmt.Fprintf(w, "</div>")
								
								err = rootTemplateSlideU1.Execute(w, "")
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateSlideU2.Execute(w, slide)
								if err != nil {
										////log.Panicf("%v", err)
								}
								getCategories(w,r,uid)
								err = rootTemplateSlideU3.Execute(w, slide)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateSlideU1Del.Execute(w, slide)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateSlideU1ClearCache.Execute(w, slide)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateSlideU1SharedTo.Execute(w, slide)
								if err != nil {
										////log.Panicf("%v", err)
								}
								break
						}
					}
 
				default:
					
					CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
					
					if err := iconsSettingsTemplateHeaderSL.Execute(w, deskNum2Name(w,r,uid,CATEGORY)); err != nil {
						 panic(err)
					}
					if err := rootTemplateSlidesCategory.Execute(w, ""); err != nil {
						 panic(err)
					}
					getCategories(w,r,uid)
					if err := rootTemplateSlidesCategoryB.Execute(w, CATEGORY); err != nil {
						 panic(err)
					}
					csn2 := getUpUrlString(w,r,"/upload-slides")
					uploadURL2 := csn2
					err := rootTemplateSlidesA.Execute(w, uploadURL2)
					if err != nil {
							////log.Panicf("%v", err)
					}
					getCategories(w,r,uid)
					err = rootTemplateSlidesB.Execute(w, currDesktop)
					if err != nil {
							////log.Panicf("%v", err)
					}
					//display slides
					
					if CATEGORY == "" {
						q := datastore.NewQuery("TDSSLIDE").Order("DOC_ID")
						//log.Panicf("[S0311]")
						recCount,_ := datastoreClient.Count(c,q)
						slides := make([]TDSSLIDE, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
						}
						//log.Printf("datastoreClient.Get()  [39844]")
						if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
							 panic(err)
						}
						if err := slidesDispTemplateAdminRecs2.Execute(w, slides); err != nil {
							 panic(err)
						}
					} else {
						q := datastore.NewQuery("TDSSLIDE").Filter("CATEGORY =", CATEGORY).Limit(1000)
						//log.Panicf("[S0312]")
 
						slides := make([]TDSSLIDE, 0, 1000)
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [39859]")
						if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
							 panic(err)
						}
						if err := slidesDispTemplateAdminRecs2.Execute(w, slides); err != nil {
							 panic(err)
						}
					}
 
					if err := slidesSettingsTemplateTableFooter9.Execute(w, ""); err != nil {
						 panic(err)
					}
		
			}
			
		} else {
			msgDtl := "[U00057] ERROR: ADMIN-SLIDES NOT ALLOWED FOR YOUR ACCOUNT TYPE"
			msgTyp := "error"
			msgURL := "/?q=home"
			action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to ULAPPH Carousel homepage.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
 
		}
	
	}
 
}

//on the website homepage, it display Top contents based on views, comments, etc
func dispTopContents(w http.ResponseWriter, r *http.Request, deskName, DISP_CODE, cursor, tbl_src string, thisChan chan string, isChanDone chan bool) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//uid := uid
	_, uid := checkSession(w,r)
    //D0086
    datastoreClient := createClientDS()
	switch DISP_CODE {
	
	case "AJAX":
		
		var buffer3 bytes.Buffer
		//writeHTMLHeader(w, 200)
 
		switch deskName {
 
		case "desktop0":
			
			if tbl_src == "TDSSLIDE" {
 
				switch cursor {
 
					case "1":
						//order by likes desc
						if SYS_CONTENTS_HDR_ON == "Y" {
							if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Most Liked Slides"); err != nil {
							  panic(err)
							}
						}
						q := datastore.NewQuery("TDSSLIDE").Order("-NUM_LIKES")
						//log.Panicf("[S0313]")
						recCount,_ := datastoreClient.Count(c,q)
 
						slides := make([]TDSSLIDE, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [39928]")
						
						iCtr := 0
						for _, p := range slides{
							//if p.FL_SHARED == "Y" {
							if p.AUTHOR == uid && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP{
							iCtr++
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"likes%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all7\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\" target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"180px\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
 
						contentsHTML := buffer3.String()
						
						fmt.Fprintf(w, "%v", contentsHTML)
						
					case "2":
						//order by doc id desc
						if SYS_CONTENTS_HDR_ON == "Y" {
							if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Latest Slides"); err != nil {
							  panic(err)
							}
						}
 
						q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID")
						//log.Panicf("[S0314]")
						recCount,_ := datastoreClient.Count(c,q)
 
						slides := make([]TDSSLIDE, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [39989]")
						iCtr := 0
						for _, p := range slides{
							
							if p.AUTHOR == uid && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP{
							iCtr++
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"docs%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all8\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"180px\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
 
						contentsHTML := buffer3.String()
						
						fmt.Fprintf(w, "%v", contentsHTML)
					
				}
			
			} else {
 
				switch cursor {
 
					case "1":
						if SYS_CONTENTS_HDR_ON == "Y" {
							
							if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Most Liked Articles"); err != nil {
							  panic(err)
							}	
						}
 
						q := datastore.NewQuery("TDSARTL").Order("-NUM_LIKES")
						//log.Panicf("[S0315]")
						recCount,_ := datastoreClient.Count(c,q)
 
						articles := make([]TDSARTL, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [40055]")
						
						iCtr := 0
						for _, p := range articles{
							if p.AUTHOR == uid && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP{
							iCtr++							
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"alikes%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all9\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"180px\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
 
						contentsHTML := buffer3.String()
						
						fmt.Fprintf(w, "%v", contentsHTML)
						
					case "2":
						if SYS_CONTENTS_HDR_ON == "Y" {
							if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Latest Articles"); err != nil {
							  panic(err)
							}
						}
 
						q := datastore.NewQuery("TDSARTL").Order("-DOC_ID")
						//log.Panicf("[S0316]")
						recCount,_ := datastoreClient.Count(c,q)
 
						articles := make([]TDSARTL, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [40114]")
						iCtr := 0
						for _, p := range articles{
							if p.AUTHOR == uid && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP{
							iCtr++								
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"adocs%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all10\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"180px\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
 
						contentsHTML := buffer3.String()
						
						fmt.Fprintf(w, "%v", contentsHTML)
					
				}
			}
			
			
		case "desktop1", "desktop2", "desktop3", "desktop4", "desktop5", "desktop6", "desktop7", "desktop8", "desktop9", "desktop10", "desktop11", "desktop12", "desktop13", "desktop14", "desktop15", "desktop16", "desktop17", "desktop18", "desktop19", "desktop20":
			//load tiles from cache
 
 
			if tbl_src == "TDSSLIDE" {
 
				switch cursor {
 
					case "1":
						if SYS_CONTENTS_HDR_ON == "Y" {
							if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Most Liked Slides"); err != nil {
							  panic(err)
							}	
						}
 
						q := datastore.NewQuery("TDSSLIDE").Order("-NUM_LIKES")
						//log.Panicf("[S0317]")
						recCount,_ := datastoreClient.Count(c,q)
 
						slides := make([]TDSSLIDE, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [40184]")
						
						iCtr := 0
						for _, p := range slides{
							
							if p.CATEGORY == deskName && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP{
							iCtr++
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"likes%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all11\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"180px\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
 
						contentsHTML := buffer3.String()
						
						fmt.Fprintf(w, "%v", contentsHTML)
						
					case "2":
						if SYS_CONTENTS_HDR_ON == "Y" {
							if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Latest Slides"); err != nil {
							  panic(err)
							}
						}
 
						q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID")
						//log.Panicf("[S0318]")
						recCount,_ := datastoreClient.Count(c,q)
 
						slides := make([]TDSSLIDE, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [40244]")
						iCtr := 0
						for _, p := range slides{
							
							if p.CATEGORY == deskName && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP{
							iCtr++
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"docs%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all12\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"180px\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
 
						contentsHTML := buffer3.String()
						
						fmt.Fprintf(w, "%v", contentsHTML)
					
				}
			} else {
 
				switch cursor {
 
					case "1":
						if SYS_CONTENTS_HDR_ON == "Y" {
							if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Most Liked Articles"); err != nil {
							  panic(err)
							}	
						}
 
						q := datastore.NewQuery("TDSARTL").Order("-NUM_LIKES")
						//log.Panicf("[S0319]")
						recCount,_ := datastoreClient.Count(c,q)
 
						articles := make([]TDSARTL, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [40308]")
						
						iCtr := 0
						for _, p := range articles{
							if p.CATEGORY == deskName && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP{
							iCtr++							
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"alikes%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all13\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"180px\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
 
						contentsHTML := buffer3.String()
						
						fmt.Fprintf(w, "%v", contentsHTML)
						
					case "2":
						if SYS_CONTENTS_HDR_ON == "Y" {
							if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Latest Articles"); err != nil {
							  panic(err)
							}
						}
 
						q := datastore.NewQuery("TDSARTL").Order("-DOC_ID")
						//log.Panicf("[S0320]")
						recCount,_ := datastoreClient.Count(c,q)
 
						articles := make([]TDSARTL, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [40367]")
						iCtr := 0
						for _, p := range articles{
							if p.CATEGORY == deskName && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP{
							iCtr++								
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"adocs%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all14\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"180px\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
 
						contentsHTML := buffer3.String()
						
						fmt.Fprintf(w, "%v", contentsHTML)
					
				}
			}
			
		case "root":
		
			if tbl_src == "TDSSLIDE" {
 
				switch cursor {
 
					case "1":
					if SYS_CONTENTS_HDR_ON == "Y" {
						if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Most Liked Slides"); err != nil {
						  panic(err)
						}	
					}
 
					cKey := fmt.Sprintf("CACHE_TDSSLIDE_NUM_LIKES")
                    CACHE_TDSSLIDE_NUM_LIKES := ""
                    CACHE_TDSSLIDE_NUM_LIKES = getStrMemcacheValueByKey(w,r,cKey)
                    if CACHE_TDSSLIDE_NUM_LIKES != "" {
						//CACHE_TDSSLIDE_NUM_LIKES = fmt.Sprintf("%s", item.Value)
						fmt.Fprintf(w, "%v", CACHE_TDSSLIDE_NUM_LIKES)
						
					}
					
					if CACHE_TDSSLIDE_NUM_LIKES == "" {
 
						q := datastore.NewQuery("TDSSLIDE").Order("-NUM_LIKES").Limit(DEFAULT_NUM_TILES_TOP)
						//log.Panicf("[S0321]")
						slides := make([]TDSSLIDE, 0, DEFAULT_NUM_TILES_TOP)
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [40443]")
						
						if err := mobileBodyTemplateContentLoaderSingleItemS2.Execute(w, slides); err != nil {
						  panic(err)
						}
						
						//cache this
						var buffer3 bytes.Buffer
						iCtr:=0
						for _, p := range slides{
							if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
							iCtr++
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"likes%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all15\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
						
						putBytesToMemcacheWithExp(w,r,cKey,buffer3.Bytes(),GEN_CONTENT_EXPIRES)	
										
					}
 
					case "2":
					if SYS_CONTENTS_HDR_ON == "Y" {
						if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Latest Slides"); err != nil {
						  panic(err)
						}	
					}	
 
					cKey := fmt.Sprintf("CACHE_TDSSLIDE_LATEST")
                    CACHE_TDSSLIDE_LATEST := ""
                    CACHE_TDSSLIDE_LATEST = getStrMemcacheValueByKey(w,r,cKey)
                    if CACHE_TDSSLIDE_LATEST != "" {
						//CACHE_TDSSLIDE_LATEST = fmt.Sprintf("%s", item.Value)
						fmt.Fprintf(w, "%v", CACHE_TDSSLIDE_LATEST)
						
					}
					
					if CACHE_TDSSLIDE_LATEST == "" {
					
						q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(DEFAULT_NUM_TILES_TOP)
						//log.Panicf("[S0322]")
						slides := make([]TDSSLIDE, 0, DEFAULT_NUM_TILES_TOP)
						if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
							 panic(err)
						}
						//log.Printf("datastoreClient.Get()  [40517]")
						if err := mobileBodyTemplateContentLoaderSingleItemS2.Execute(w, slides); err != nil {
						  panic(err)
						}
						
						//cache this
						var buffer3 bytes.Buffer
						iCtr:=0
						for _, p := range slides{
							if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
							iCtr++
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"docs%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all16\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
						
						putBytesToMemcacheWithExp(w,r,cKey,buffer3.Bytes(),GEN_CONTENT_EXPIRES)
					}
 
					
				}
				
			} else {
 
				switch cursor {
 
					case "1":
					if SYS_CONTENTS_HDR_ON == "Y" {
						if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Most Liked Articles"); err != nil {
						  panic(err)
						}	
					}	
 
					cKey := fmt.Sprintf("CACHE_TDSARTL_NUM_LIKES")
                    CACHE_TDSARTL_NUM_LIKES := ""
                    CACHE_TDSARTL_NUM_LIKES = getStrMemcacheValueByKey(w,r,cKey)
                    if CACHE_TDSARTL_NUM_LIKES != "" {
						//CACHE_TDSARTL_NUM_LIKES = fmt.Sprintf("%s", item.Value)
						fmt.Fprintf(w, "%v", CACHE_TDSARTL_NUM_LIKES)
						
					}
					
					if CACHE_TDSARTL_NUM_LIKES == "" {
						
						q := datastore.NewQuery("TDSARTL").Order("-NUM_LIKES").Limit(DEFAULT_NUM_TILES_TOP)
						//log.Panicf("[S0323]")
						articles := make([]TDSARTL, 0, DEFAULT_NUM_TILES_TOP)
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
						}
                        //log.Printf("datastoreClient.Get()  [40596]")
						if err := mobileBodyTemplateContentLoaderSingleItemA2.Execute(w, articles); err != nil {
						  panic(err)
						}
						
						//cache this
						var buffer3 bytes.Buffer
						iCtr:=0
						for _, p := range articles{
							if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
							iCtr++
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"alikes%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all17\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
						
						putBytesToMemcacheWithExp(w,r,cKey,buffer3.Bytes(),GEN_CONTENT_EXPIRES)	
						
					}
					
					case "2":
					if SYS_CONTENTS_HDR_ON == "Y" {
						if err := mobileBodyTemplateContentLoaderSingleItemBanner.Execute(w, "Latest Articles"); err != nil {
						  panic(err)
						}	
					}
					
					cKey := fmt.Sprintf("CACHE_TDSARTL_LATEST")
                    CACHE_TDSARTL_LATEST := ""
                    CACHE_TDSARTL_LATEST = getStrMemcacheValueByKey(w,r,cKey)
                    if CACHE_TDSARTL_LATEST != "" {
						//CACHE_TDSARTL_LATEST = fmt.Sprintf("%s", item.Value)
						fmt.Fprintf(w, "%v", CACHE_TDSARTL_LATEST)
						
					}
					
					if CACHE_TDSARTL_LATEST == "" {
 
						q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(DEFAULT_NUM_TILES_TOP)
						//log.Panicf("[S0324]")
						articles := make([]TDSARTL, 0, DEFAULT_NUM_TILES_TOP)
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [40669]")

						if err := mobileBodyTemplateContentLoaderSingleItemA2.Execute(w, articles); err != nil {
						  panic(err)
						}
						
						//cache this
						var buffer3 bytes.Buffer
						iCtr:=0
						for _, p := range articles{
							if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
							iCtr++
							buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"adocs%v\">", iCtr))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
							buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all18\" width=\"16\">"))
							buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("			  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
							buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
							buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
							buffer3.WriteString(fmt.Sprintf("	  </ul>"))
							buffer3.WriteString(fmt.Sprintf("	</div>"))
							buffer3.WriteString(fmt.Sprintf("	<article>"))
							buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
							buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
							buffer3.WriteString(fmt.Sprintf("	  </div>"))
							buffer3.WriteString(fmt.Sprintf(""))
							buffer3.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID))
							buffer3.WriteString(fmt.Sprintf("	</article>"))
							buffer3.WriteString(fmt.Sprintf("</div>"))
							}
						}
						
						putBytesToMemcacheWithExp(w,r,cKey,buffer3.Bytes(),GEN_CONTENT_EXPIRES)
					}
				}
			}
		}
 
 
	case "WHATS-NEW":
			
			var buffer3 bytes.Buffer
			
			cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT")
            CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT := ""
            CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT != "" {
				//CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT = fmt.Sprintf("%s", item.Value)
				buffer3.WriteString(CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT)
				
			}
				
			if CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT == "" {
				q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(500)
				slides := make([]TDSSLIDE, 0, 500)
				if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
					 panic(err)
				}
				//log.Printf("datastoreClient.Get()  [40741]")
				iCtr:=0
				for _, p := range slides{
					//if p.AUTHOR == uid {
						if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP {
						iCtr++
						buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"whats%v\">", iCtr))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
						
						} else {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, "Premium"))							
						}
						buffer3.WriteString(fmt.Sprintf("			  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("	  </ul>"))
						buffer3.WriteString(fmt.Sprintf("	</div>"))
						buffer3.WriteString(fmt.Sprintf("	<article>"))
						buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer3.WriteString(fmt.Sprintf("	  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
						buffer3.WriteString(fmt.Sprintf("	</article>"))
						buffer3.WriteString(fmt.Sprintf("</div>"))
						}
					//}
				}
 
				contentsHTML := buffer3.String()
				putStrToMemcacheWithExp(w,r,cKey,contentsHTML,GEN_CONTENT_EXPIRES)
				
				//fmt.Fprintf(w, "%v", contentsHTML)
						
			}
 
			var buffer4 bytes.Buffer
			
			cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT")
            CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT := ""
            CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT != "" {
				//CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT = fmt.Sprintf("%s", item.Value)
				//fmt.Fprintf(w, "%v", CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT)
				buffer4.WriteString(CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT)
				
			}
				
			if CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT == "" {
				//var buffer4 bytes.Buffer
				q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(DEFAULT_NUM_TILES_TOP)
				//log.Panicf("[S0326]")
				articles := make([]TDSARTL, 0, DEFAULT_NUM_TILES_TOP)
				if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [40822]")
				
				iCtr:=0
				for _, p := range articles{
					
					//if p.AUTHOR == uid {
						if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
						iCtr++
						buffer4.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"awhats%v\">", iCtr))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer4.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all20\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer4.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.DOC_STAT))
						
						} else {
						buffer4.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, "Premium"))
						
						}
						buffer4.WriteString(fmt.Sprintf("			  </div>"))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer4.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer4.WriteString(fmt.Sprintf("		<li>"))
							buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer4.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("	  </ul>"))
						buffer4.WriteString(fmt.Sprintf("	</div>"))
						buffer4.WriteString(fmt.Sprintf("	<article>"))
						buffer4.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer4.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer4.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer4.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer4.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer4.WriteString(fmt.Sprintf("	  </div>"))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY))
						buffer4.WriteString(fmt.Sprintf("	</article>"))
						buffer4.WriteString(fmt.Sprintf("</div>"))
						}
					//}
				}
 
				contentsHTML := buffer4.String()
				putStrToMemcacheWithExp(w,r,cKey,contentsHTML,GEN_CONTENT_EXPIRES)
				
				//fmt.Fprintf(w, "%v", contentsHTML)
			}
			//send to gochannel
			combinedStr := fmt.Sprintf("%v %v", buffer3.String(), buffer4.String())
			thisChan <- combinedStr
			isChanDone <- true
			return
 
	case "PINNED":
			
			var buffer3 bytes.Buffer
			cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_PINNED")
            CACHE_SLIDES_CONTENTS_PINNED := ""
            CACHE_SLIDES_CONTENTS_PINNED = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_SLIDES_CONTENTS_PINNED != "" {
				//CACHE_SLIDES_CONTENTS_PINNED = fmt.Sprintf("%s", item.Value)
				//fmt.Fprintf(w, "%v", CACHE_SLIDES_CONTENTS_PINNED)
				buffer3.WriteString(CACHE_SLIDES_CONTENTS_PINNED)
				
			}
				
			if CACHE_SLIDES_CONTENTS_PINNED == "" {
				q := datastore.NewQuery("TDSSLIDE").Filter("SYS_VER =", 888).Limit(500)
				slides := make([]TDSSLIDE, 0, 500)
				if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
					 panic(err)
				}
				//log.Printf("datastoreClient.Get()  [40909]")
				iCtr:=0
				for _, p := range slides{
					//if p.AUTHOR == uid {
						if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP {
						iCtr++
						buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"pinned%v\">", iCtr))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all21\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
						
						} else {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, "Premium"))							
						}
						buffer3.WriteString(fmt.Sprintf("			  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("	  </ul>"))
						buffer3.WriteString(fmt.Sprintf("	</div>"))
						buffer3.WriteString(fmt.Sprintf("	<article>"))
						buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer3.WriteString(fmt.Sprintf("	  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
						buffer3.WriteString(fmt.Sprintf("	</article>"))
						buffer3.WriteString(fmt.Sprintf("</div>"))
						}
					//}
				}
 
				contentsHTML := buffer3.String()
				putStrToMemcacheWithExp(w,r,cKey,contentsHTML,GEN_CONTENT_EXPIRES)
				
				//fmt.Fprintf(w, "%v", contentsHTML)
						
			}
 
			var buffer4 bytes.Buffer
			
			cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_PINNED")
            CACHE_ARTICLES_CONTENTS_PINNED := ""
            CACHE_ARTICLES_CONTENTS_PINNED = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_ARTICLES_CONTENTS_PINNED != "" {
				//CACHE_ARTICLES_CONTENTS_PINNED = fmt.Sprintf("%s", item.Value)
				buffer4.WriteString(CACHE_ARTICLES_CONTENTS_PINNED)
				
			}
				
			if CACHE_ARTICLES_CONTENTS_PINNED == "" {
				//var buffer4 bytes.Buffer
				q := datastore.NewQuery("TDSARTL").Filter("SYS_VER =", 888).Limit(DEFAULT_NUM_TILES_TOP)
				//log.Panicf("[S0328]")
				articles := make([]TDSARTL, 0, DEFAULT_NUM_TILES_TOP)
				if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [40989]")
				iCtr:=0
				for _, p := range articles{
					
					//if p.AUTHOR == uid {
						if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
						iCtr++
						buffer4.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"apinned%v\">", iCtr))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer4.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all22\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer4.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
						
						} else {
						buffer4.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, "Premium", p.MUSIC_ID))		
						
						}
						buffer4.WriteString(fmt.Sprintf("			  </div>"))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer4.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer4.WriteString(fmt.Sprintf("		<li>"))
							buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer4.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("	  </ul>"))
						buffer4.WriteString(fmt.Sprintf("	</div>"))
						buffer4.WriteString(fmt.Sprintf("	<article>"))
						buffer4.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer4.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer4.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer4.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer4.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer4.WriteString(fmt.Sprintf("	  </div>"))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID))
						buffer4.WriteString(fmt.Sprintf("	</article>"))
						buffer4.WriteString(fmt.Sprintf("</div>"))
						}
					//}
				}
 
				contentsHTML := buffer4.String()
				putStrToMemcacheWithExp(w,r,cKey,contentsHTML,GEN_CONTENT_EXPIRES)
				
				//fmt.Fprintf(w, "%v", contentsHTML)
			}
			
			var buffer5 bytes.Buffer
			
			cKey = fmt.Sprintf("CACHE_MEDIA_CONTENTS_PINNED")
            CACHE_MEDIA_CONTENTS_PINNED := ""
            CACHE_MEDIA_CONTENTS_PINNED = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_MEDIA_CONTENTS_PINNED != "" {
				//CACHE_MEDIA_CONTENTS_PINNED = fmt.Sprintf("%s", item.Value)
				//fmt.Fprintf(w, "%v", CACHE_MEDIA_CONTENTS_PINNED)
				buffer5.WriteString(CACHE_MEDIA_CONTENTS_PINNED)
				
			}
				
			if CACHE_MEDIA_CONTENTS_PINNED == "" {
				//var buffer5 bytes.Buffer
				q := datastore.NewQuery("TDSMEDIA").Filter("SYS_VER =", 888).Limit(DEFAULT_NUM_TILES_TOP)
				//log.Panicf("[S0329]")
				media := make([]TDSMEDIA, 0, DEFAULT_NUM_TILES_TOP)
				if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [41071]")
				
				iCtr:=0
				for _, p := range media{
					
					//if p.AUTHOR == uid {
						if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
						iCtr++
						buffer5.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"mpinned%v\">", iCtr))
						buffer5.WriteString(fmt.Sprintf(""))
						buffer5.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer5.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-media.png\" class=\"item_image_home\" title=\"all23\" width=\"16\">"))
						switch {
							case p.DATA_TYPE == "image" || p.DATA_TYPE == "music" || p.DATA_TYPE == "video":
								buffer5.WriteString(fmt.Sprintf("		<a href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.MEDIA_ID, p.MEDIA_ID, p.DOC_STAT))
 
							case p.IMG_URL == "/static/img/golang.png":
								buffer5.WriteString(fmt.Sprintf("		<a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=%v&SID=TDSMEDIA-%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.MEDIA_ID, p.MEDIA_ID, p.DOC_STAT))
												
							default:
								buffer5.WriteString(fmt.Sprintf("		<a href=\"/media?FUNC_CODE=GET_MEDIA&MEDIA_ID=%v&SID=TDSMEDIA-%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.MEDIA_ID, p.MEDIA_ID, p.DOC_STAT))
						}
						buffer5.WriteString(fmt.Sprintf("			  </div>"))
						buffer5.WriteString(fmt.Sprintf(""))
						buffer5.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer5.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						buffer5.WriteString(fmt.Sprintf("		<li>"))
						buffer5.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer5.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer5.WriteString(fmt.Sprintf("		</li>"))
						buffer5.WriteString(fmt.Sprintf("		<li>"))
						buffer5.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer5.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer5.WriteString(fmt.Sprintf("		</li>"))
						buffer5.WriteString(fmt.Sprintf("		<li>"))
						buffer5.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer5.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer5.WriteString(fmt.Sprintf("		</li>"))
						buffer5.WriteString(fmt.Sprintf("	  </ul>"))
						buffer5.WriteString(fmt.Sprintf("	</div>"))
						buffer5.WriteString(fmt.Sprintf("	<article>"))
						buffer5.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.IMG_URL))
						
						buffer5.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer5.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer5.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer5.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer5.WriteString(fmt.Sprintf("	  </div>"))
						buffer5.WriteString(fmt.Sprintf(""))
						switch {
							case p.DATA_TYPE == "image" || p.DATA_TYPE == "music" || p.DATA_TYPE == "video":
								buffer5.WriteString(fmt.Sprintf("		<a href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\"  target=\"view\">%v</a>", p.MEDIA_ID, p.MEDIA_ID, p.TITLE))
 
							default:
								buffer5.WriteString(fmt.Sprintf("		<a href=\"/media?FUNC_CODE=GET_MEDIA&MEDIA_ID=%v&SID=TDSMEDIA-%v\"  target=\"view\">%v</a>", p.MEDIA_ID, p.MEDIA_ID, p.TITLE))
						}
						buffer5.WriteString(fmt.Sprintf("	</article>"))
						buffer5.WriteString(fmt.Sprintf("</div>"))
						}
					//}
				}
 
				contentsHTML := buffer5.String()
				putStrToMemcacheWithExp(w,r,cKey,contentsHTML,GEN_CONTENT_EXPIRES)
				
				//fmt.Fprintf(w, "%v", contentsHTML)
			}
			//send to gochannel
			combinedStr := fmt.Sprintf("%v %v %v", buffer3.String(), buffer4.String(), buffer5.String())
			thisChan <- combinedStr
			isChanDone <- true
			return
			
	//Case TOP
	case "TOP":
		switch deskName {
 
		case "desktop0":
		
			//var buffer3 bytes.Buffer
			
			//uid := uid
			_, uid := checkSession(w,r)
			cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v_%v", deskName, uid)
            CACHE_SLIDES_CONTENTS_ALL_TILES := ""
            CACHE_SLIDES_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_SLIDES_CONTENTS_ALL_TILES != "" {
				//CACHE_SLIDES_CONTENTS_ALL_TILES = fmt.Sprintf("%s", item.Value)
				fmt.Fprintf(w, "%v", CACHE_SLIDES_CONTENTS_ALL_TILES)
				
			}
				
			if CACHE_SLIDES_CONTENTS_ALL_TILES == "" {
				var buffer3 bytes.Buffer
				q := datastore.NewQuery("TDSSLIDE").Order("-NUM_VIEWS").Limit(500)
				//log.Panicf("[S0330]")
 
				//slides := make([]TDSSLIDE, 0, DEFAULT_NUM_TILES_TOP)
				slides := make([]TDSSLIDE, 0, 500)
				if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [41173]")
				
				iCtr:=0
				for _, p := range slides{
					if p.AUTHOR == uid && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP {
						iCtr++
						buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"tops%v\">", iCtr))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all24\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
						
						} else {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, "Premium"))							
						}
						buffer3.WriteString(fmt.Sprintf("			  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("	  </ul>"))
						buffer3.WriteString(fmt.Sprintf("	</div>"))
						buffer3.WriteString(fmt.Sprintf("	<article>"))
						buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer3.WriteString(fmt.Sprintf("	  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
						buffer3.WriteString(fmt.Sprintf("	</article>"))
						buffer3.WriteString(fmt.Sprintf("</div>"))
					}
				}
 
				contentsHTML := buffer3.String()
				//cache contentsAll
				putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
				
				fmt.Fprintf(w, "%v", contentsHTML)
						
			}
			
			//var buffer4 bytes.Buffer
			
			cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v_%v", deskName, uid)
            CACHE_ARTICLES_CONTENTS_ALL_TILES := ""
            CACHE_ARTICLES_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_ARTICLES_CONTENTS_ALL_TILES != "" {
				//CACHE_ARTICLES_CONTENTS_ALL_TILES = fmt.Sprintf("%s", item.Value)
				fmt.Fprintf(w, "%v", CACHE_ARTICLES_CONTENTS_ALL_TILES)
				
			}
				
			if CACHE_ARTICLES_CONTENTS_ALL_TILES == "" {
				var buffer3 bytes.Buffer
				q := datastore.NewQuery("TDSARTL").Order("-NUM_VIEWS").Limit(500)
				//log.Panicf("[S0331]")
				articles := make([]TDSARTL, 0, 500)
				if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [41253]")
				
				iCtr:=0
				for _, p := range articles{
					
					if p.AUTHOR == uid && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP {
						iCtr++
						buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"atops%v\">", iCtr))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all25\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
						
						} else {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, "Premium", p.MUSIC_ID))	
						
						}
						buffer3.WriteString(fmt.Sprintf("			  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("	  </ul>"))
						buffer3.WriteString(fmt.Sprintf("	</div>"))
						buffer3.WriteString(fmt.Sprintf("	<article>"))
						buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer3.WriteString(fmt.Sprintf("	  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID))
						buffer3.WriteString(fmt.Sprintf("	</article>"))
						buffer3.WriteString(fmt.Sprintf("</div>"))
					}
				}
 
				contentsHTML := buffer3.String()
 
				putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
				
				fmt.Fprintf(w, "%v", contentsHTML)
				
				//notify all users of this event via channels
				viaStr := getAccessString(w,r,"")
				msgDtl3 := fmt.Sprintf("UID:%v accessed all contents for https://www.ulapph.com/desktop0 %v.", uid, viaStr)
				reqStr := fmt.Sprintf("/desktop0") 			
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,reqStr,""),"")
			}		
			
			
		case "root":
		
			//uid := ""
			_, uid := checkSession(w,r)
			if uid == "" {
				uid = getGeoString(w,r)
			}
			//notify all users of this event via channels
			viaStr := getAccessString(w,r,"")
			msgDtl3 := fmt.Sprintf("UID:%v accessed all contents index https://www.ulapph.com/website?q=home %v.", uid, viaStr)
			reqStr := fmt.Sprintf("/website?q=home")
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,reqStr,""),"")
			
			var buffer3 bytes.Buffer
			
			cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES")
            CACHE_SLIDES_CONTENTS_ALL_TILES := ""
            CACHE_SLIDES_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_SLIDES_CONTENTS_ALL_TILES != "" {
				//CACHE_SLIDES_CONTENTS_ALL_TILES = fmt.Sprintf("%s", item.Value)
				buffer3.WriteString(CACHE_SLIDES_CONTENTS_ALL_TILES)
				
			}
				
			if CACHE_SLIDES_CONTENTS_ALL_TILES == "" {
				q := datastore.NewQuery("TDSSLIDE").Order("-NUM_VIEWS").Limit(500)
				//log.Panicf("[S0332]")
				slides := make([]TDSSLIDE, 0, 500)
				if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [41353]")
 
				iCtr:=0
				for _, p := range slides{
					//if p.AUTHOR == uid {
						if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP {
						iCtr++
						buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"whats%v\">", iCtr))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all19\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
						
						} else {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, "Premium"))							
						}
						buffer3.WriteString(fmt.Sprintf("			  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("	  </ul>"))
						buffer3.WriteString(fmt.Sprintf("	</div>"))
						buffer3.WriteString(fmt.Sprintf("	<article>"))
						buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer3.WriteString(fmt.Sprintf("	  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
						buffer3.WriteString(fmt.Sprintf("	</article>"))
						buffer3.WriteString(fmt.Sprintf("</div>"))
						}
					//}
				}
 
				contentsHTML := buffer3.String()
				putStrToMemcacheWithExp(w,r,cKey,contentsHTML,GEN_CONTENT_EXPIRES)
						
			}
 
			var buffer4 bytes.Buffer
			
			cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES")
            CACHE_ARTICLES_CONTENTS_ALL_TILES := ""
            CACHE_ARTICLES_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_ARTICLES_CONTENTS_ALL_TILES != "" {
				//CACHE_ARTICLES_CONTENTS_ALL_TILES = fmt.Sprintf("%s", item.Value)
				//fmt.Fprintf(w, "%v", CACHE_ARTICLES_CONTENTS_ALL_TILES)
				buffer4.WriteString(CACHE_ARTICLES_CONTENTS_ALL_TILES)
			}
				
			if CACHE_ARTICLES_CONTENTS_ALL_TILES == "" {
				q := datastore.NewQuery("TDSARTL").Order("-NUM_VIEWS").Limit(500)
				articles := make([]TDSARTL, 0, 500)
				if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [41430]")
				
				iCtr:=0
				for _, p := range articles{
					
					//if p.AUTHOR == uid {
						if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP {
						iCtr++
						buffer4.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"awhats%v\">", iCtr))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer4.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all20\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer4.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.DOC_STAT))
						
						} else {
						buffer4.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, "Premium"))
						
						}
						buffer4.WriteString(fmt.Sprintf("			  </div>"))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer4.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer4.WriteString(fmt.Sprintf("		<li>"))
							buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer4.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("		<li>"))
						buffer4.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer4.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer4.WriteString(fmt.Sprintf("		</li>"))
						buffer4.WriteString(fmt.Sprintf("	  </ul>"))
						buffer4.WriteString(fmt.Sprintf("	</div>"))
						buffer4.WriteString(fmt.Sprintf("	<article>"))
						buffer4.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer4.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer4.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						buffer4.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer4.WriteString(fmt.Sprintf("	  </div>"))
						buffer4.WriteString(fmt.Sprintf(""))
						buffer4.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY))
						buffer4.WriteString(fmt.Sprintf("	</article>"))
						buffer4.WriteString(fmt.Sprintf("</div>"))
						}
					//}
				}
 
				contentsHTML := buffer4.String()
				putStrToMemcacheWithExp(w,r,cKey,contentsHTML,GEN_CONTENT_EXPIRES)
			}
			//send to gochannel
			combinedStr := fmt.Sprintf("%v %v", buffer3.String(), buffer4.String())
			thisChan <- combinedStr
			isChanDone <- true
			return
 
		default:
			//load tiles from cache
 
			_, uid := checkSession(w,r)
			if uid == "" {
				uid = getGeoString(w,r)
			}
			
			//notify all users of this event via channels
			viaStr := getAccessString(w,r,"")
			msgDtl3 := fmt.Sprintf("UID:%v accessed all contents for https://www.ulapph.com/website?q=%v %v.", uid, deskName, viaStr)
			reqStr := fmt.Sprintf("/website?q=%v",deskName)
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,reqStr,""),"")
			
			cKey := fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v", deskName)
            CACHE_SLIDES_CONTENTS_ALL_TILES := ""
            CACHE_SLIDES_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_SLIDES_CONTENTS_ALL_TILES != "" {
				fmt.Fprintf(w, "%v", CACHE_SLIDES_CONTENTS_ALL_TILES)
				
			}
			
			if CACHE_SLIDES_CONTENTS_ALL_TILES == "" {
				var buffer3 bytes.Buffer
				q := datastore.NewQuery("TDSSLIDE").Order("-NUM_VIEWS").Limit(500)
				//log.Panicf("[S0334]")
				slides := make([]TDSSLIDE, 0, 500)
				if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [41525]")
				iCtr := 0
				for _, p := range slides{
					if p.CATEGORY == deskName && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP {
						iCtr++
						buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"perso\">"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-slides.png\" class=\"item_image_home\" title=\"all26\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.DOC_STAT))
						
						} else {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, "Premium"))							
						}
						buffer3.WriteString(fmt.Sprintf("			  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("	  </ul>"))
						buffer3.WriteString(fmt.Sprintf("	</div>"))
						buffer3.WriteString(fmt.Sprintf("	<article>"))
						buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						//buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, p.DESC)))
						buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer3.WriteString(fmt.Sprintf("	  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	  <a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET))
						buffer3.WriteString(fmt.Sprintf("	</article>"))
						buffer3.WriteString(fmt.Sprintf("</div>"))
					}
				}
 
				contentsHTML := buffer3.String()
				//cache contentsAll
				putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
				
				fmt.Fprintf(w, "%v", contentsHTML)
			}
 
			cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v", deskName)
            CACHE_ARTICLES_CONTENTS_ALL_TILES := ""
            CACHE_ARTICLES_CONTENTS_ALL_TILES = getStrMemcacheValueByKey(w,r,cKey)
            if CACHE_ARTICLES_CONTENTS_ALL_TILES != "" {
				fmt.Fprintf(w, "%v", CACHE_ARTICLES_CONTENTS_ALL_TILES)
				
			}
			
			if CACHE_ARTICLES_CONTENTS_ALL_TILES == "" {
				var buffer3 bytes.Buffer
				q := datastore.NewQuery("TDSARTL").Order("-NUM_VIEWS").Limit(500)
				//log.Panicf("[S0335]")
				articles := make([]TDSARTL, 0, 500)
				if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [41600]")
				
				iCtr := 0
				for _, p := range articles{
					
					if p.CATEGORY == deskName && p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" && iCtr <= DEFAULT_NUM_TILES_TOP {
						iCtr++
						buffer3.WriteString(fmt.Sprintf("  <div class=\"single_item\" id=\"perso2\">"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"left\">"))
						buffer3.WriteString(fmt.Sprintf("				  <img src=\"/static/img/ulapph-icons-articles.png\" class=\"item_image_home\" title=\"all27\" width=\"16\">"))
						if p.DOC_STAT != "Premium" {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_STAT, p.MUSIC_ID))
						
						} else {
						buffer3.WriteString(fmt.Sprintf("		<a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"creator_name\"  target=\"view\">%v</a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, "Premium", p.MUSIC_ID))		
						
						}
						buffer3.WriteString(fmt.Sprintf("			  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	<div class=\"right\">"))
						buffer3.WriteString(fmt.Sprintf("	  <ul class=\"item_stats\">"))
						if p.DOC_STAT == "Premium" {
							buffer3.WriteString(fmt.Sprintf("		<li>"))
							buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/premium-dollar.png\" width=\"16\" height=\"16\" title=\"Premium\">"))
							buffer3.WriteString(fmt.Sprintf("		</li>"))
						}
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/comment-icon.png\" width=16 height=16 title=\"Comments\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_COMMENTS))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/like-icon.png\" width=16 height=16 title=\"Likes\">"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", p.NUM_LIKES))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("		<li>"))
						buffer3.WriteString(fmt.Sprintf("		  <img src=\"/static/img/views-icon.png\" width=16 height=16 title=\"Views\" >"))
						buffer3.WriteString(fmt.Sprintf("		  <span>%v</span>", humanize.Comma(int64(p.NUM_VIEWS))))
						buffer3.WriteString(fmt.Sprintf("		</li>"))
						buffer3.WriteString(fmt.Sprintf("	  </ul>"))
						buffer3.WriteString(fmt.Sprintf("	</div>"))
						buffer3.WriteString(fmt.Sprintf("	<article>"))
						buffer3.WriteString(fmt.Sprintf("	  <img src=\"%v\" width=\"100%%\" height=\"100%%\">", p.TAGS))
						buffer3.WriteString(fmt.Sprintf("	  <div class=\"item_overlay\">"))
						buffer3.WriteString(fmt.Sprintf("		<h3 class=\"title\">"))
						buffer3.WriteString(fmt.Sprintf("		  %v </h3>", fmt.Sprintf("%v - %v", p.TITLE, stmpHumanize(p.DT_UPLOAD))))
						buffer3.WriteString(fmt.Sprintf("	  </div>"))
						buffer3.WriteString(fmt.Sprintf(""))
						buffer3.WriteString(fmt.Sprintf("	  <a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v\"  target=\"view\"></a>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID))
						buffer3.WriteString(fmt.Sprintf("	</article>"))
						buffer3.WriteString(fmt.Sprintf("</div>"))
					}
				}
				
				contentsHTML := buffer3.String()
				//cache contentsAll
				putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
				
				fmt.Fprintf(w, "%v", contentsHTML)
			}
			
		}
 
	}
	
}

//handles /admin-articles handler
//only accessible to owner or admin which manages the articles and contents 
func adminArticles(w http.ResponseWriter, r *http.Request) {
	checkReferrer(w,r)
    //D0086
    datastoreClient := createClientDS()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	_, uid := checkSession(w,r)
	FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
	if FL_PROC_OK == false {return}
	
	updateUserActiveData(w, r, c, uid, "/admin-articles")
	
	uReferer := r.Referer()
	sl := strings.Split(uReferer, "/")
	currDesktop:= sl[len(sl)-1]
	//get user privilege
	FUNC_CODE := "GET_GRP_ID"
	FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
 
	//check if this is really an article
	i := strings.Index(r.FormValue("SID"), "TDSSLIDE-")
	if i != -1 {
		redURL := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v&SID=%v", r.FormValue("DOC_ID"), r.FormValue("SID"))
		http.Redirect(w, r, redURL, http.StatusFound)
		return		
	}
	
	if FL_VALID_USER == true {
	
		if (GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
		
			FUNC_CODE2 := r.FormValue("FUNC_CODE")
				
			switch FUNC_CODE2 {
				//articles
				case "UPDATE2":
					
					TITLE := r.FormValue("TITLE")
					TITLE = strings.Replace(TITLE, "_", " ", -1)
					
					DESC := r.FormValue("DESC")
					DESC = strings.Replace(DESC, "_", " ", -1)
 
					DOC_ID2 := r.FormValue("DOC_ID")
					DOC_ID := str2int(DOC_ID2)
 
					MUSIC_ID2 := strings.TrimSpace(r.FormValue("MUSIC_ID"))
					MUSIC_ID := str2int(MUSIC_ID2)
 
					CATEGORY := r.FormValue("CATEGORY")
					
					SHARED_TO := ""
 
					TAGS := r.FormValue("TAGS")
					if TAGS == "" {
						TAGS = "/static/img/NoImageAvailable.png"
					}
 
					AUTHOR := r.FormValue("AUTHOR")
					
					DOC_STAT := r.FormValue("DOC_STAT")
					
					FL_SHARED := r.FormValue("FL_SHARED")
					
					FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
						
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSARTL", dsKey, nil)
					q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
					//log.Panicf("[S0336]")
					article := make([]TDSARTL, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
						 panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [41745]")
					
					thisAuthor := ""
					blobkey := ""
					SYS_VER := 0
					NUM_LIKES := float64(0)
					NUM_COMMENTS := float64(0)
					NUM_VIEWS := float64(0)
 
					for _, p := range article{
 
						//oldBlob := p.BLOB_URL
						p.TITLE	= TITLE
						p.DESC	= DESC
						p.CATEGORY	= CATEGORY	
						p.FL_SHARED	= FL_SHARED
						p.DOC_STAT	= DOC_STAT
						p.TAGS	= TAGS
						SHARED_TO = p.SHARED_TO
						//p.BLOB_URL = blobkey
						if AUTHOR != "" {
							p.AUTHOR = AUTHOR
						}
						blobkey = p.BLOB_URL
						p.FL_COUNTRY_SPECIFIC = FL_COUNTRY_SPECIFIC
						p.MUSIC_ID = MUSIC_ID
						NUM_LIKES = float64(p.NUM_LIKES)
						NUM_COMMENTS = float64(p.NUM_COMMENTS)
						NUM_VIEWS = float64(p.NUM_VIEWS)
			
						thisAuthor = p.AUTHOR
						SYS_VER = p.SYS_VER
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSARTL", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [41780]")
						//log.Panicf("[S0337]")
						if err != nil {
							 panic(err)
						}
						break
					}
					
					if CATEGORY == "ULAPPH" {
						cKey := fmt.Sprintf("IDB_SLEEP_VIEW_ARTICLES_ULAPPH_HELP")
						putStrToMemcacheWithoutExp(w,r,cKey,"")
					}
					cKey := fmt.Sprintf("IDB_SLEEP_VIEW_ARTICLES_ALL")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					cKey = fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ALL")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
                    
                    //D0089
                    //update object permission
                    err := updateGcsObjPermission(blobkey, FL_SHARED, DOC_STAT)
                    if err != nil {
                        panic(err)
                    }
					//update article cache
					TDSARTL_Cacher(w,r,uid,DOC_ID, blobkey, DOC_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, TAGS, SHARED_TO, MUSIC_ID)
					
					//clear cache contentsAll
					cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v", CATEGORY)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					putStrToMemcacheWithoutExp(w,r,"CACHE_TDSARTL_NUM_LIKES","")
					putStrToMemcacheWithoutExp(w,r,"CACHE_TDSARTL_LATEST","")
					putStrToMemcacheWithoutExp(w,r,"CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT","")
					
					//cache contentsAll home
					cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
 
					//cache contentsAll desktop0
					cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v_%v", "desktop0", uid)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
 
					//clear push right
					cKey = fmt.Sprintf("CACHE_PUSH_RIGHT_DATA")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					//clear pinned cache
					cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					tstamp := getTimestamp()
					thisIdxKey := fmt.Sprintf("TDSARTL-%d", DOC_ID)
					thisIdxURL := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v", getSchemeUrl(w,r), DOC_ID, thisIdxKey, CATEGORY)
					blobChan := make(chan string)
					go getBlobTextChan(w, r,blobChan, blobkey)
					blobText := <- blobChan
					if SYS_VER == 777 && strings.Index(blobkey, "GET_WALL:") == -1 {
						cStr := encrypter2(w,r,blobText,ENCRYPTION_KEY)
						blobText = string(cStr)
					}
					TITLE2 := strings.Replace(TITLE, "_", " ", -1)
					DESC2 := strings.Replace(DESC, "_", " ", -1)
					articleIdx := &IDX_TDSARTL{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"ARTICLES",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSARTL",	
						DESKTOP: 			CATEGORY,
						FL_SHARED:			FL_SHARED,
						DOC_STAT:			DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE2,	
						DOC_DESC: 			DESC2,
						DOC_AUTHOR:         thisAuthor,
						DOC_CONTENT_TEXT: 	blobText,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		NUM_LIKES,		
						DOC_NUM_COMMENTS:	NUM_COMMENTS,
						DOC_NUM_VIEWS:		NUM_VIEWS,
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			TAGS,
						//DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
					}
                    
					putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
						
					
					sysReq := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, TITLE, blobkey, CATEGORY)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
			
				//article
				case "UPDATE3":
						
					SHARED_TO := r.FormValue("SHARED_TO")
					DOC_ID2 := r.FormValue("DOC_ID")
					DOC_ID := str2int(DOC_ID2)
								
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSARTL", dsKey, nil)
					q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
					//log.Panicf("[S0338]")
					article := make([]TDSARTL, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
						panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [41893]")
					
					thisAuthor := ""
					blobkey := ""
					SYS_VER := 0
					for _, p := range article{
 
						p.DOC_STAT = "Personal"
						p.FL_SHARED = "Y"
						p.SHARED_TO = SHARED_TO
						blobkey = p.BLOB_URL
						thisAuthor = p.AUTHOR
						SYS_VER = p.SYS_VER
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSARTL", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [41909]")
						//log.Panicf("[S0339]")
						if err != nil {
							panic(err)
						}
 
						if p.CATEGORY == "ULAPPH" {
							cKey := fmt.Sprintf("IDB_SLEEP_VIEW_ARTICLES_ULAPPH_HELP")
							putStrToMemcacheWithoutExp(w,r,cKey,"")
						}
						
						cKey := fmt.Sprintf("IDB_SLEEP_VIEW_ARTICLES_ALL")
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						
						//update article cache
						TDSARTL_Cacher(w,r,uid,DOC_ID, blobkey, p.DOC_STAT, p.FL_SHARED, uid, p.FL_COUNTRY_SPECIFIC, p.TITLE, p.TAGS, p.SHARED_TO, p.MUSIC_ID)
						
						//clear cache contentsAll
						cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v", p.CATEGORY)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						
						//cache contentsAll home
						cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES")
						putStrToMemcacheWithoutExp(w,r,cKey,"")
 
						//cache contentsAll desktop0
						cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v_%v", "desktop0", uid)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						
						tstamp := getTimestamp()
						thisIdxKey := fmt.Sprintf("TDSARTL-%d", DOC_ID)
						thisIdxURL := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v", getSchemeUrl(w,r), DOC_ID, thisIdxKey, p.CATEGORY)
						blobChan := make(chan string)
						go getBlobTextChan(w, r,blobChan, blobkey)
						blobText := <- blobChan
						//if SYS_VER == 666 {
						if SYS_VER == 777 {
							cStr := encrypter2(w,r,blobText,ENCRYPTION_KEY)
							blobText = string(cStr)
						}
						TITLE := strings.Replace(p.TITLE, "_", " ", -1)
						DESC := strings.Replace(p.DESC, "_", " ", -1)
						articleIdx := &IDX_TDSARTL{
							DOC_KEY: 			thisIdxKey,
							SEARCH_TYPE: 		"ARTICLES",
							SOURCE_TYPE: 		"ULAPPH",	
							SOURCE_TBL:  		"TDSARTL",	
							DESKTOP: 			p.CATEGORY,
							FL_SHARED:			p.FL_SHARED,
							DOC_STAT:			p.DOC_STAT,
							DOC_SCOPE_OVERALL:	"",
							DOC_SCOPE_COUNTRY:  "",
							DOC_SCOPE_REGION:  	"",
							DOC_SCOPE_CITY: 	"",
							DOC_SCOPE_BARANGAY: "",
							DOC_TITLE: 			TITLE,	
							DOC_DESC: 			DESC,
							DOC_AUTHOR:         thisAuthor,
							DOC_CONTENT_TEXT: 	blobText,
							DOC_CONTENT_HTML: 	"",	
							DOC_CONTENT_ATOM: 	"",	
							DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
							DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
							DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
							CONTENT_URL: 		thisIdxURL,
							IMG_URL: 			p.TAGS,
							//DATE_ADDED: 		tstamp,
							DATE_UPDATED: 		tstamp,
						}
                        
						putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
							
						//}
						sysReq := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, p.TITLE, blobkey, p.CATEGORY)		
						http.Redirect(w, r, sysReq, http.StatusFound)	
						//return
						break
					}
 
				case "ENC_ARTICLE":
 
					DOC_ID2 := r.FormValue("DOC_ID")
					SYS_VER2 := r.FormValue("P")
					DOC_ID := str2int(DOC_ID2)
					SYS_VER := str2int(SYS_VER2)
					TITLE := ""
					blobkey := ""
					CATEGORY := ""			
 
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSARTL", dsKey, nil)
					q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
					//log.Panicf("[S0340]")
					slide := make([]TDSARTL, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						 panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [42006]")
					
					for _, p := range slide{
 
						p.SYS_VER = SYS_VER
						
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSARTL", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [42015]")
						//log.Panicf("[S0341]")
						if err != nil {
							 panic(err)
						
						}		
 
						break
					}
 
					//call encryptor here
					//dispStr := []byte("")
					if SYS_VER > 0 {
						if SYS_VER == 777 {
							SID := fmt.Sprintf("TDSARTL-%v", DOC_ID)
							_ = encrypter(w,r,SID,ENCRYPTION_KEY)
						} else {
							SID := fmt.Sprintf("TDSARTL-%v", DOC_ID)
							_ = decrypter(w,r,SID,ENCRYPTION_KEY)
						}
					}
					
					sysReq := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, TITLE, blobkey, CATEGORY)	
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case "PINNED_ARTICLE":
 
					DOC_ID2 := r.FormValue("DOC_ID")
					SYS_VER2 := r.FormValue("P")
					DOC_ID := str2int(DOC_ID2)
					SYS_VER := str2int(SYS_VER2)
					TITLE := ""
					blobkey := ""
					CATEGORY := ""
					
					dsKey := fmt.Sprintf("%d", DOC_ID)
					key := datastore.NameKey("TDSARTL", dsKey, nil)
					q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
					//log.Panicf("[S0342]")
					slide := make([]TDSARTL, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
						 panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [42059]")
					
					for _, p := range slide{
 
						p.SYS_VER = SYS_VER
						
						thisKey := fmt.Sprintf("%d", p.DOC_ID)
						key := datastore.NameKey("TDSARTL", thisKey, nil)
                        _, err := datastoreClient.Put(c, key, &p)
                        //log.Printf("datastoreClient.Put()  [42068]")
						//log.Panicf("[S0343]")
						if err != nil {
							 panic(err)
						
						}		
 
						break
					}
					
					//clear pinned cache
					cKey := fmt.Sprintf("CACHE_ARTICLES_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")					
						
					sysReq := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, TITLE, blobkey, CATEGORY)	
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
 
 
				case "CLEAR-CACHE":
					blobkey := r.FormValue("BLOB_URL")
 
					SLIDES_CACHE_KEY := fmt.Sprintf("SLIDES_CACHE_%v", blobkey)
					putStrToMemcacheWithoutExp(w,r,SLIDES_CACHE_KEY,"")
					
					ARTICLES_CACHE_KEY := fmt.Sprintf("ARTICLES_CACHE_%v", blobkey)
					putStrToMemcacheWithoutExp(w,r,ARTICLES_CACHE_KEY,"")

					//D0064
					TURNJS_CACHE_KEY := fmt.Sprintf("ARTICLES_TURNJS_%v", blobkey)
					putStrToMemcacheWithoutExp(w,r,TURNJS_CACHE_KEY,"")
					
					msgDtl := "[U00121] SUCCESS: Cache has been cleared."
					msgTyp := "success"
					msgURL := fmt.Sprintf("/%v#page", currDesktop)
					action := "U00121"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case "DELETE":
					//delete articles
					DOC_ID := r.FormValue("DOC_ID")
					docID := str2int(DOC_ID)
					BLOB_URL := r.FormValue("BLOB_URL")
					//TITLE := ""
					//validate authority
					if GROUP_ID == "GRP_USER" {
						if SYS_NOREG_FIXED_USER != "" {
							//allow
						} else {
							_, _, _, AUTHOR, _, _, _, _, _  := getTDSARTLBlobKey(w, r, docID)
							if uid != AUTHOR {
							msgDtl := "[U00059] ERROR: You have no authority to access this function."
							msgTyp := "error"
							msgURL := "/articles"
							action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Articles.", msgURL)
							sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
							http.Redirect(w, r, sysReq, http.StatusFound)
							return
							}
						}
					}
					if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
						//delete from tiedot 
						err := tiedotDeleteArticle(w,r,docID)
						if err != nil {
							ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotDeleteArticle(): %v", err))
							return
						}
						ulapphDebug(w,r, "info", fmt.Sprintf("DELETED TIEDOT: docID: %v tiedotDeleteArticle: %#v", docID, BLOB_URL))

						//delete from SWFS
						err = deleteSeaweedStorage(w,r,BLOB_URL)
						if err != nil {
							ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: deleteSeaweedStorage(): %v", err))
							return
						}
						ulapphDebug(w,r, "info", fmt.Sprintf("DELETED SWFS: docID: %v deleteSeaweedStorage: %v", docID, BLOB_URL))

					} else {
					
					//display media
					dsKey := fmt.Sprintf("%d", docID)
					key := datastore.NameKey("TDSARTL", dsKey, nil)
					q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
					//log.Panicf("[S0344]")
					article := make([]TDSARTL, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
						 panic(err)
                    			}
                    			//log.Printf("datastoreClient.Get()  [42137]")
 
					for _, p := range article{
							if p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" {
								if p.BLOB_URL == BLOB_URL {
									//blobstore.Delete(c, appengine.BlobKey(p.BLOB_URL))	
									err := deleteGcsObject(c, p.BLOB_URL)
									if err != nil {
										//log.Fatalf("ERROR: deleteGcsObject() %v", err)
										ulapphDebug(w,r, "info", fmt.Sprintf("ERROR: deleteGcsObject() %v", err))
									}
								}
								thisKey := fmt.Sprintf("%d", docID)
								key := datastore.NameKey("TDSARTL", thisKey, nil)
								datastoreClient.Delete(c, key)
								break
							}
					}
					}
					
					//delete article from search idx
					thisIdxKey := fmt.Sprintf("TDSARTL-%d", docID)
					index, err := search.Open("IDX_TDSARTL")
					if err != nil {
						 panic(err)
					}
					_ = index.Delete(c, thisIdxKey)
					
					//remove html cache
					ARTICLES_CACHE_KEY := fmt.Sprintf("ARTICLES_CACHE_%v", BLOB_URL)
					putStrToMemcacheWithoutExp(w,r,ARTICLES_CACHE_KEY,"")
					
					//remove cacher
					ARTICLES_CACHER_KEY := fmt.Sprintf("TDSARTL_DOCID_CACHE_%v", docID)
					putStrToMemcacheWithoutExp(w,r,ARTICLES_CACHER_KEY,"")
					
					//clear content cache
					cKey := fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
 
					cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					
					putStrToMemcacheWithoutExp(w,r,"CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT","")
					
					putStrToMemcacheWithoutExp(w,r,"CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT","")	
					
					//clear push right
					cKey = fmt.Sprintf("CACHE_PUSH_RIGHT_DATA")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
 
					msgDtl := "[U00060] SUCCESS: Article file has been deleted."
					msgTyp := "success"
					msgURL := fmt.Sprintf("/%v#page", currDesktop)
					action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go back to desktop.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case "VIEW":
					DOC_ID := r.FormValue("DOC_ID")
					docID := str2int(DOC_ID)
				
					//validate authority
					BLOB_KEY, _, _, _, _, _, _, _, _  := getTDSARTLBlobKey(w, r, docID)
					if SYS_NOREG_FIXED_USER != "" {
						//allow
					} else {
						if GROUP_ID != "GRP_USER" && GROUP_ID != "GRP_ADMIN"{
						msgDtl := "[U00061] ERROR: You have no authority to access this function."
						msgTyp := "error"
						msgURL := "/articles"
						action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Articles.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
						}
 					}
					//check if GET_WALL is found; means linked content					
					i := strings.Index(BLOB_KEY, "GET_WALL:")
					if i != -1 {
						//retrieve article
						SPL := strings.Split(BLOB_KEY,"GET_WALL:")
						if len(SPL) > 1 {
							linkedUrl := SPL[1]
							linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
 
							if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
							  panic(err)
							}	
							fmt.Fprintf(w, "<img src=\"/static/img/ucopy.png\" width=100 height=100>")
							fmt.Fprintf(w, "<h3>Note: This is a linked document.</h3><hr>")
							fmt.Fprintf(w, "<br><b>URL:</b> %v", linkedUrl)
							fmt.Fprintf(w, "<br><b>View:</b> <a href=\"%v\">Click here to view</a>", linkedUrl)
							fmt.Fprintf(w, "<br><b>Doc ID:</b> %v", docID)
							fmt.Fprintf(w, "<br><b>Update:</b> <a href=\"#update-articles\">Update Details</a>")
							fmt.Fprintf(w, "<br><b>Delete:</b> <a href=\"/admin-articles?FUNC_CODE=VIEW&DOC_ID=%v#delete-articles\">Click to Delete</a><hr>", docID)
							
							//display media
							dsKey := fmt.Sprintf("%d", docID)
							key := datastore.NameKey("TDSARTL", dsKey, nil)
							q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
							//log.Panicf("[S0345]")
							recCount,_ := datastoreClient.Count(c,q)
							if recCount <= 0 {
								fmt.Fprintf(w, "<h3><font color=red>This is a linked document but it is no longer found in this site.</font></h3>")
							}
							article := make([]TDSARTL, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [42244]")
 
							for _, p := range article{
								
								fmt.Fprintf(w, "<br><b>Title: </b> [TDSARTL-%v] %v<br>", p.DOC_ID, p.TITLE)
								fmt.Fprintf(w, "<br><b>Description: </b> %v<br>", p.DESC)
								fmt.Fprintf(w, "<br><b>Category: </b> %v<br>", p.CATEGORY)
								fmt.Fprintf(w, "<br><b>Doc Status: </b> %v<br>", p.DOC_STAT)
								fmt.Fprintf(w, "<br><b>Author: </b> %v<br>", p.AUTHOR)
								fmt.Fprintf(w, "<br><b>Shared Status: </b> %v<br>", p.FL_SHARED)
								
								err := rootTemplateArticleU1.Execute(w, "")
								if err != nil {
										////log.Panicf("%v", err)
								}
 
								err = rootTemplateArticleU2.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								getCategories(w,r,uid)
								err = rootTemplateArticleU3.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateArticleU1Del.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateArticleU1ClearCache.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateArticleU1SharedTo.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								
							}
						}
						
					} else {
					
						if err := iconsSettingsTemplateHeaderSLA.Execute(w, DOC_ID); err != nil {
							 panic(err)
						}
						//display media
						dsKey := fmt.Sprintf("%d", docID)
						key := datastore.NameKey("TDSARTL", dsKey, nil)
						q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
						//log.Panicf("[S0346]")
 
						article := make([]TDSARTL, 0, 1)
						if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [42300]")
 
						for _, p := range article{
								fmt.Fprintf(w, "<b>Title:</b> [TDSARTL-%v] %v - %v<br>", p.DOC_ID, p.TITLE, p.DESC)
								if p.SYS_VER == 777 {
									fmt.Fprintf(w, "<b>Encrypted:</b> <img src=\"/static/img/encrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-articles?FUNC_CODE=ENC_ARTICLE&P=666&DOC_ID=%v\">Decrypt</a>] [ <a download=\"TDSARTL-%v-%v.txt\" href=\"/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSARTL-%v\">Backup Encrypted File</a> ]<br>", p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID)		
								} else {
									
									if p.SYS_VER == 666 {
										fmt.Fprintf(w, "<b>Not Encrypted:</b> <img src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-articles?FUNC_CODE=ENC_ARTICLE&P=777&DOC_ID=%v\">Encrypt</a>] (Encryption Enabled - <a href=\"/admin-articles?FUNC_CODE=ENC_ARTICLE&P=0&DOC_ID=%v\">Turn Off</a>)<br>", p.DOC_ID, p.DOC_ID)
									} else {
										fmt.Fprintf(w, "<b>Not Encrypted:</b> <img src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-articles?FUNC_CODE=ENC_ARTICLE&P=777&DOC_ID=%v\">Encrypt</a>] [ <a download=\"TDSARTL-%v-%v.txt\" href=\"/editor?EDIT_FUNC=CRYPTO&EDIT_MODE=NEW-CRYPTO&sid=TDSARTL-%v&ct=e&cv=d\">Backup Encrypted File</a> ]<br>", p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID)
									}
																									
								}
								fmt.Fprintf(w, "<b>Edit:</b> [ <a href=\"/editor?DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v\">Text Editor1</a> ] [ <a href=\"/editor?EDIT_FUNC=READER&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v\">Text Editor2</a> ] [ <a href=\"/media?FUNC_CODE=RAWTEXT&DOC_ID=%v&SID=TDSARTL-%v\">View Raw Text</a> ] [ <a href=\"/media?FUNC_CODE=PLAY&DOC_ID=%v&SID=TDSARTL-%v\">View Original Text</a> ] [ <a download=\"TDSARTL-%v-%v.doc\" href=\"/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSARTL-%v\">Download Doc File</a> ] [ <a download=\"TDSARTL-%v-%v.article\" href=\"/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSARTL-%v\">Download Text File</a> ] [ <a href=\"/media?FUNC_CODE=RAWJSON&DOC_ID=%v&SID=TDSARTL-%v\">View Raw JSON</a> ]<br>", p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.DOC_ID, p.DOC_ID, p.DOC_ID, p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID, p.DOC_ID, p.DOC_ID)
								reqStr := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&MUSIC_ID=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.FL_COUNTRY_SPECIFIC)
								fmt.Fprintf(w, "<b>Article URL:</b> <a href=\"%v\">%v</a><br>", reqStr, reqStr)
								reqStr2 := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSARTL-%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.FL_COUNTRY_SPECIFIC)
								fmt.Fprintf(w, "<b>Slide URL:</b> <a href=\"%v\">%v</a><br>", reqStr2, reqStr2)
								fmt.Fprintf(w, "<b>ShortURL:</b> <a href=\"%v\">%v</a><br>", ShortenUrl(w,r,reqStr), ShortenUrl(w,r,reqStr))
								admURL := fmt.Sprintf("%vadmin-articles?FUNC_CODE=VIEW&DOC_ID=%v&SID=TDSARTL-%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID)
								fmt.Fprintf(w, "<b>AdminURL:</b> <a href=\"%v\">%v</a><br>", admURL, admURL)
								fmt.Fprintf(w, "<b>TurnJS URL:</b> <a href=\"%v&APP=turnjs\">%v&APP=turnjs</a><br>", reqStr, reqStr)
								fmt.Fprintf(w, "<b>Doc ID:</b> %v<br>", p.DOC_ID)
								fmt.Fprintf(w, "<b>SID:</b> TDSARTL-%v<br>", p.DOC_ID)
								fmt.Fprintf(w, "<b>Publish Status:</b> %v<br>", p.DOC_STAT)
								fmt.Fprintf(w, "<b>Category:</b> %v<br>", p.CATEGORY)
								URL_DIS := fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSARTL-%v&TITLE=%v", p.DOC_ID, p.TITLE)
								fmt.Fprintf(w, "<b>Discussion:</b> <a href=\"%v\">View Comments</a><br>", URL_DIS)
								fmt.Fprintf(w, "<b>Author: </b> %v<br>", p.AUTHOR)
								fmt.Fprintf(w, "<b>Shared Status:</b> %v<br>", p.FL_SHARED)
								fmt.Fprintf(w, "<b>Title:</b> %v<br>", p.TITLE)
								fmt.Fprintf(w, "<b>Description:</b> %v<br>", p.DESC)
								fmt.Fprintf(w, "<b>Desktop:</b> %v<br>", p.CATEGORY)
								fmt.Fprintf(w, "<b>Image Src:</b> <img src=\"%v\" height=100 width=100></img><a href=\"/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD\"><img src=\"/static/img/uploader.png\" title=\"Multiple Upload\" height=\"40\" width=\"40\"/></a><br>", p.TAGS)
								fmt.Fprintf(w, "<b>Blob Key:</b> %v<br>", p.BLOB_URL)
								fmt.Fprintf(w, "<b>Background Music ID:</b> %v<br>", p.MUSIC_ID)
								if SYS_DISP_HOMEPAGE_CFG == true {
								fmt.Fprintf(w, "<b>Set as Homepage:</b><a href=\"/admin-setup?ADMIN_FUNC=SET_AS_HOMEPAGE&URL=%v\"><img src=\"/static/img/www.png\" width=\"50\" height=\"40\"></img></a><br>", ShortenUrl(w,r,reqStr))
								}
								fmt.Fprintf(w, "<b>Set Advertisement:</b><a href=\"/admin-setup?ADMIN_FUNC=SET_AS_AD&TYPE=ARTICLE&TITLE=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&IMG_URL=%v\"><img src=\"/static/img/ad-icon.png\" width=\"50\" height=\"40\"></img></a><br>", p.TITLE, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.TAGS)
								fmt.Fprintf(w, "<b>Save to Local Storage:</b><a href=\"/uloc?LS_FUNC=ARTICLE_COPY&DOC_ID=%v&SID=TDSARTL-%v&TITLE=%v&IMG_SRC=%v\"><img src=\"/static/img/uloc.png\" width=\"40\" height=\"40\"></img></a><br>", p.DOC_ID, p.DOC_ID, p.TITLE, p.TAGS)
								fmt.Fprintf(w, "<b>Share to Social Media:</b><a href=\"/share?SH_FUNC=all&title=%v&url=%v\"><img src=\"/static/img/sharethis.png\" width=\"40\" height=\"40\"></img></a><br>", p.TITLE, reqStr)
								fmt.Fprintf(w, "<b>Donwload Article:</b><a download=\"TDSARTL-%v-%v.html\" href=\"/uloc?LS_FUNC=ARTICLE_COPY2&DOC_ID=%v&SID=TDSARTL-%v&TITLE=%v&IMG_SRC=%v\"><img src=\"/static/img/download.png\" width=\"40\" height=\"40\"></img></a><br>", p.DOC_ID, p.TITLE, p.DOC_ID, p.DOC_ID, p.TITLE, p.TAGS)
								//articles
								fmt.Fprintf(w, "<b>Wall Copy: <a href=\"/wall?WALL_FUNC=ARTICLE_COPY&DOC_ID=%v&SID=TDSARTL-%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" width=\"40\" height=\"40\"></img></a><br>", p.DOC_ID, p.DOC_ID, p.TITLE, CMD_GEN_KEY)
							
								if p.SYS_VER == 888 {
									fmt.Fprintf(w, "<b>Pinned:</b> <img src=\"/static/img/pinned.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-articles?FUNC_CODE=PINNED_ARTICLE&P=1&DOC_ID=%v\">Unpin</a>]<br>", p.DOC_ID)		
								} else {
									fmt.Fprintf(w, "<b>Not Pinned:</b> <img src=\"/static/img/pinned2.png\" width=\"40\" height=\"40\"></img> [<a href=\"/admin-articles?FUNC_CODE=PINNED_ARTICLE&P=888&DOC_ID=%v\">Pin</a>]<br>", p.DOC_ID)										
								}
								fmt.Fprintf(w, "<hr>")
								fmt.Fprintf(w, "<h1>%v<h1>", p.TITLE)
								fmt.Fprintf(w, "<div class=\"CodeBox\">")
								_, _, err := readLines4(w, r, p.BLOB_URL)
								if err != nil {
									//panic(err)
									fmt.Fprintf(w, "<font color=red>blobstore: ERROR: %v</font>", err)
								}
								fmt.Fprintf(w, "</div>")
							
								//p.BLOB_KEY = fmt.Sprintf("%v", uploadURL3)
								err = rootTemplateArticleU1.Execute(w, "")
								if err != nil {
										////log.Panicf("%v", err)
								}
 
								err = rootTemplateArticleU2.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								getCategories(w,r,uid)
								err = rootTemplateArticleU3.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateArticleU1Del.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateArticleU1ClearCache.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								err = rootTemplateArticleU1SharedTo.Execute(w, article)
								if err != nil {
										////log.Panicf("%v", err)
								}
								break
						}
					}
 
				default:
				
					CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
				
					if err := iconsSettingsTemplateHeaderAL.Execute(w, ""); err != nil {
						 panic(err)
					}
					if err := rootTemplateArticlesCategory.Execute(w, ""); err != nil {
						 panic(err)
					}
					getCategories(w,r,uid)
					if err := rootTemplateArticlesCategoryB.Execute(w, CATEGORY); err != nil {
						 panic(err)
					}
					csn2 := getUpUrlString(w,r,"/upload-articles")
					uploadURL2 := csn2
					err := rootTemplateArticlesA.Execute(w, uploadURL2)
					if err != nil {
							////log.Panicf("%v", err)
					}
					getCategories(w,r,uid)
					err = rootTemplateArticlesB.Execute(w, currDesktop)
					if err != nil {
							////log.Panicf("%v", err)
					}
					//display articles
					if CATEGORY == "" {
						q := datastore.NewQuery("TDSARTL").Order("DOC_ID")
						//log.Panicf("[S0347]")
						recCount,_ := datastoreClient.Count(c,q)
						articles := make([]TDSARTL, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [42428]")
						
						if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
							 panic(err)
						}
						if err := articlesDispTemplateAdminRecs2.Execute(w, articles); err != nil {
							 panic(err)
						}
					} else {
 
						q := datastore.NewQuery("TDSARTL").Filter("CATEGORY =", CATEGORY)
						//log.Panicf("[S0348]")
						recCount, _  := datastoreClient.Count(c,q)
						articles := make([]TDSARTL, 0, recCount)
 
						if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [42446]")
						
						if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
							 panic(err)
						}
						if err := articlesDispTemplateAdminRecs2.Execute(w, articles); err != nil {
							 panic(err)
						}
					
					}	
			}
			
		} else {
			msgDtl := "[U00062] ERROR: ADMIN-ARTICLES NOT ALLOWED FOR YOUR ACCOUNT TYPE"
			msgTyp := "error"
			msgURL := "/articles"
			action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Articles.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
	
	}
 
}
 
//gets push contents for the gallery homepage
func getPushContents(w http.ResponseWriter, r *http.Request, target string) string {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	CACHE_DATA := ""
    //D0086
    datastoreClient := createClientDS()
	//uid := ""
	switch target {
		
		case "PUSH_LEFT_DATA":
			cKey := fmt.Sprintf("CACHE_PUSH_LEFT_DATA")
			CACHE_PUSH_LEFT_DATA := ""
			CACHE_PUSH_LEFT_DATA = getStrMemcacheValueByKey(w,r,cKey)
				
			if CACHE_PUSH_LEFT_DATA == "" {
				var buffer3 bytes.Buffer
				q := datastore.NewQuery("TDSSLIDE").Order("-NUM_VIEWS").Limit(20)
				//log.Panicf("[S0349]")
				
				recCount,_ := datastoreClient.Count(c,q)
				slides := make([]TDSSLIDE, 0, recCount)
				if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
					 //panic(err)
					return CACHE_PUSH_LEFT_DATA
                }
                //log.Printf("datastoreClient.Get()  [42499]")
				
				for _, p := range slides{
					if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
						buffer3.WriteString(fmt.Sprintf("<li class=\"c-menu__item\"><a href=\"/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSSLIDE-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"c-menu__link\" title=\"%v\" target=\"TDSSLIDE-%v\"><img src=\"%v\" width=40 height=40 align=\"left\" class=\"img-circle\">%v</a></li>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.DOC_STAT, p.DOC_ID, p.TAGS, p.TITLE))
					}
				}
 
				contentsHTML := buffer3.String()
				//cache contentsAll
				putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
				
				//fmt.Fprintf(w, "%v", contentsHTML)
				return contentsHTML
						
			}
			return CACHE_PUSH_LEFT_DATA
 
		case "PUSH_RIGHT_DATA":
		
			cKey := fmt.Sprintf("CACHE_PUSH_RIGHT_DATA")
			CACHE_PUSH_RIGHT_DATA := ""
			CACHE_PUSH_RIGHT_DATA = getStrMemcacheValueByKey(w,r,cKey)
				
			if CACHE_PUSH_RIGHT_DATA == "" {
				var buffer3 bytes.Buffer
 
				q := datastore.NewQuery("TDSARTL").Order("-NUM_VIEWS").Limit(20)
				//log.Panicf("[S0350]")
				recCount,_ := datastoreClient.Count(c,q)
				articles := make([]TDSARTL, 0, recCount)
				if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
					 //panic(err)
					return CACHE_PUSH_RIGHT_DATA
                }
                //log.Printf("datastoreClient.Get()  [42534]")
				
				for _, p := range articles{
					
					if p.FL_SHARED == "Y" && p.DOC_STAT != "Personal" {
						buffer3.WriteString(fmt.Sprintf("<li class=\"c-menu__item\"><a href=\"/articles?TYPE=ARTICLE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE=%v&BLOB_KEY=%v&DOC_ID=%v&SID=TDSARTL-%v&CATEGORY=%v&MUSIC_ID=%v\" class=\"c-menu__link\" title=\"%v\" target=\"TDSARTL-%v\"><img src=\"%v\" width=40 height=40 align=\"left\" class=\"img-circle\">%v</a></li>", p.TITLE, p.BLOB_URL, p.DOC_ID, p.DOC_ID, p.CATEGORY, p.MUSIC_ID, p.DOC_STAT, p.DOC_ID, p.TAGS, p.TITLE))
					}
				}
 
				contentsHTML := buffer3.String()
 
				putStrToMemcacheWithoutExp(w,r,cKey,contentsHTML)
				
				//fmt.Fprintf(w, "%v", contentsHTML)
				return contentsHTML
			}
			return CACHE_PUSH_RIGHT_DATA
	}
	return CACHE_DATA
}

//D0082
func nlpDebug(w http.ResponseWriter, r *http.Request, FL_DEBUG, mType, mValue string) {
	//c := appengine.NewContext(r)
	if FL_DEBUG != "Y" {
		return
	}
	switch mType {
		case "info":
			//log.Printf("NLPINFO: %v", mValue)
		case "error":
			log.Panicf("NLPERROR: %v", mValue)
		default:
			//log.Printf("NLPDEBUG: %v", mValue)
	}
}
func ulapphDebug(w http.ResponseWriter, r *http.Request, mType, mValue string) {
	if SYS_DEBUGGER_MODE == false {
		return
	}
	switch mType {
		case "info":
			log.Printf("ULAPPH_INFO: %v", mValue)
		case "error":
			log.Printf("ULAPPH_ERROR: %v", mValue)
		case "critical":
			log.Panicf("ULAPPH_ERROR: %v", mValue)
		default:
			log.Printf("ULAPPH_DEBUG: %v", mValue)
	}
}
func ulapphDebug2(mType, mValue string) {
	if SYS_DEBUGGER_MODE == false {
		return
	}
	switch mType {
		case "info":
			log.Printf("ULAPPH_INFO: %v", mValue)
		case "error":
			log.Printf("ULAPPH_ERROR: %v", mValue)
		case "critical":
			log.Panicf("ULAPPH_ERROR: %v", mValue)
		default:
			log.Printf("ULAPPH_DEBUG: %v", mValue)
	}
}
//D0100
//D0094
func orchestrator(w http.ResponseWriter, r *http.Request) {
    //log.Printf("orchestrator()")
	ulapphDebug(w,r, "info", fmt.Sprintf("orchestrator() %v", ""))
    oFunc := r.FormValue("oFunc")
    oMsg := r.FormValue("oMsg")
    oUser := r.FormValue("oUser")
    oUI := r.FormValue("oUI")
	oTS := r.FormValue("oTS")
    oWA := r.FormValue("oWA")
	//uid := oUser
    //oLoc := r.FormValue("oLoc")
    //log.Printf("oFunc: %v", oFunc)
    //log.Printf("oMsg: %v", oMsg)
    //log.Printf("oUser: %v", oUser)
    //log.Printf("oUI: %v", oUI)
    //log.Printf("oWA: %v", oWA)
    //log.Printf("oLoc: %v", oLoc)
	if oUI == "isGoogleHome" || oUI == "isDialogFlow" {
		//D0103
		defer r.Body.Close()
		bodyBytes, _ := ioutil.ReadAll(r.Body)
		ulapphDebug(w,r, "info", fmt.Sprintf("body: %v", string(bodyBytes)))
		rdata := map[string]interface{}{}
		dec := json.NewDecoder(bytes.NewReader(bodyBytes))
		dec.Decode(&rdata)
		jq := jsonq.NewQuery(rdata)
		//get message
		jqVal2, err := jq.String("queryResult", "queryText")
		if err != nil {
			log.Panicf("ERROR: %v", err)
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("jqVal2: %v", jqVal2))
		oMsg = jqVal2
	}
    switch oFunc {
	case "disco":
		//D0110
		ibmWatsonDiscovery(w,r)
		return
    case "iwa":
        //log.Printf("iwa")
		ulapphDebug(w,r, "info", fmt.Sprintf("orch func: %v", "iwa"))
        //current ibm watson assistant for this user
        botWaKey := fmt.Sprintf("Bot_Assistant_Current_WA_%s", oUser)
        thisWaName := getStrMemcacheValueByKey(w,r,botWaKey)
        tWID := xAssistantWorkspace[thisWaName]
		tAva := xAssistantAvatar[thisWaName]
        //ottojs current for this user
        //log.Printf("oWA::tWIDmapped: %v", tWID)
        botOttoKey := fmt.Sprintf("Bot_Assistant_Otto_ID_%s", oUser)
        oLoc := getStrMemcacheValueByKey(w,r,botOttoKey)
		ibmWatsonAssistant(w,r,tWID,tAva,oMsg,oLoc,oUser,oUI,"",oTS)
    case "swa":
        //log.Printf("swa")
		ulapphDebug(w,r, "info", fmt.Sprintf("orch func: %v", "swa"))
        //current ibm watson assistant for this user
        botWaKey := fmt.Sprintf("Bot_Assistant_Current_WA_%s", oUser)
		ulapphDebug(w,r, "info", fmt.Sprintf("botWaKey: %v", botWaKey))
		putStrToMemcacheWithoutExp(w,r,botWaKey,oWA)
		//putStrToMemcacheWithoutExp(w,r,botWaKey,"")
		resMsg := fmt.Sprintf("Switched to bot %v", oWA)
		ores := OrchResp{
			OrchData: resMsg,
			OrchWA: oWA,
			OrchLoc: "",
			OrchVoice: "Google español de Estados Unidos",
			OrchIcon: "/static/img/bots/custom-bot.png",
		}
		//log.Printf("ores: %#v", ores)
		ulapphDebug(w,r, "info", fmt.Sprintf("ores: %#v", ores))
		resp, err := json.Marshal(ores)
		if err != nil {
			//log.Printf("ERROR: json.Marshal() %v",err)
		}
		w.Write(resp)
		return
	case "motd":
		ulapphDebug(w,r, "info", fmt.Sprintf("orch func: %v", "motd"))
		resMsg := ""
		if SYS_APPENGINE_STANDARD == true {
			resMsg = getGcsMotd(w,r,"motd")
		} else {
			resMsg = getLocalMotd(w,r,"motd")
		}
		ores := OrchResp{
			OrchData: resMsg,
			OrchWA: "",
			OrchLoc: "",
			OrchVoice: "Google español de Estados Unidos",
			OrchIcon: "/static/img/bots/custom-bot.png",
		}
		//log.Printf("ores: %#v", ores)
		ulapphDebug(w,r, "info", fmt.Sprintf("ores: %#v", ores))
		resp, err := json.Marshal(ores)
		if err != nil {
			//log.Printf("ERROR: json.Marshal() %v",err)
		}
		w.Write(resp)
		return
	case "story":
		ulapphDebug(w,r, "info", fmt.Sprintf("orch func: %v", "story"))
		resMsg := ""
		if SYS_APPENGINE_STANDARD == true {
			resMsg = getGcsMotd(w,r,"story")
		} else {
			resMsg = getLocalMotd(w,r,"story")
		}
		ores := OrchResp{
			OrchData: resMsg,
			OrchWA: "",
			OrchLoc: "",
			OrchVoice: "Google español de Estados Unidos",
			OrchIcon: "/static/img/bots/custom-bot.png",
		}
		//log.Printf("ores: %#v", ores)
		ulapphDebug(w,r, "info", fmt.Sprintf("ores: %#v", ores))
		resp, err := json.Marshal(ores)
		if err != nil {
			//log.Printf("ERROR: json.Marshal() %v",err)
		}
		w.Write(resp)
		return
	
    default:
        //log.Printf("Invalid orch func")
		ulapphDebug(w,r, "info", fmt.Sprintf("Invalid orch func: %v", ""))
    }
}
//local motd
func getLocalMotd(w http.ResponseWriter, r *http.Request, mode string) string {
	ulapphDebug(w,r, "info", fmt.Sprintf("getLocalMotd() %v", ""))
	resMsg := ""
	folder := ""
	if SYS_CONTAINER_ENV == true {
		folder = "/ai/" + "motd"
	} else {
		folder = "../ULAPPH-Cloud-Desktop-AI/" + "motd"
	}
	//select a random file
	var files []string
	err := filepath.Walk(folder, visit(&files))
	if err != nil {
		panic(err)
	}
	myRun := randNum(1, len(files))
	fctr := 0
	for _, file := range files {
		fctr++
		//fmt.Println(file)
		ulapphDebug(w,r, "info", fmt.Sprintf("motd file: %v", file))
		if fctr == myRun {
			filePath := file
			ulapphDebug(w,r, "info", fmt.Sprintf("filePath: %v", filePath))
			b, err := ioutil.ReadFile(filePath)
			if err != nil {
				ulapphDebug(w,r, "error", fmt.Sprintf("ERROR ioutil.ReadFile(): %v", filePath))
				resMsg = "No data found!"
			}
			resMsg = getRanText(w,r,string(b))
			break
		}
	}
	return resMsg
}
//get MOTD from GCS
func getGcsMotd(w http.ResponseWriter, r *http.Request, mode string) string {
	ulapphDebug(w,r, "info", fmt.Sprintf("getGcsMotd() %v", ""))
	resMsg := ""
	switch mode {
		case "story":
			BLOB_KEY := "ULAPPH-Cloud-Desktop-AI/motd/TDSMEDIA-777-AesopFables.txt"
			ulapphDebug(w,r, "info", fmt.Sprintf("BLOB_KEY: %v", BLOB_KEY))
			b, err := readBytesFromGcsFileText(w,r,BLOB_KEY)
			if err != nil {
				log.Fatalf("ERROR: readBytesFromGcsFileText(): %v", err)
			}
			if err != nil {
				ulapphDebug(w,r, "error", fmt.Sprintf("ERROR readBytesFromGcsFileText(): %v", BLOB_KEY))
				resMsg = "No data found!"
			}
			resMsg = getRanText(w,r,string(b))
		default:
			prefix := "ULAPPH-Cloud-Desktop-AI/motd"
			delim := ""
			it, err := listGcsObject(prefix, delim)
			if err != nil {
				//log.Printf("ERROR: listGcsObject() %v", err)
			}
			//log.Printf("it: %v", it)
			var names []string
			for {
				attrs, err := it.Next()
				if err == iterator.Done {
						break
				}
				if err != nil {
						//return err
						//log.Printf("iterator error: %v", err)
				}
				names = append(names, attrs.Name)		
			}
			//log.Printf("names: %#v", names)
			myRun := randNum(1, len(names))
			fctr := 0
			for i:=0;i<len(names);i++ {
				fctr++
				if fctr == myRun {
					BLOB_KEY := names[i]
					ulapphDebug(w,r, "info", fmt.Sprintf("BLOB_KEY: %v", BLOB_KEY))
					b, err := readBytesFromGcsFileText(w,r,BLOB_KEY)
					if err != nil {
						log.Fatalf("ERROR: readBytesFromGcsFileText(): %v", err)
					}
					if err != nil {
						ulapphDebug(w,r, "error", fmt.Sprintf("ERROR readBytesFromGcsFileText(): %v", BLOB_KEY))
						resMsg = "No data found!"
					}
					resMsg = getRanText(w,r,string(b))
					break
				}
			}
	}
	return resMsg
}
//motd
func visit(files *[]string) filepath.WalkFunc {
    return func(path string, info os.FileInfo, err error) error {
        if err != nil {
            log.Fatal(err)
        }
        *files = append(*files, path)
        return nil
    }
}
//D0091
//func ibmWatsonDiscovery(w http.ResponseWriter, r *http.Request, wID, wAva, oMsg, oLoc, oUser, oUI, oSession, oTS string) {
func ibmWatsonDiscovery(w http.ResponseWriter, r *http.Request) {
    //log.Printf("ibmWatsonDiscovery()")
	ulapphDebug(w,r, "info", fmt.Sprintf("ibmWatsonDiscovery() %v", ""))
	
}
//D0091
func ibmWatsonAssistant(w http.ResponseWriter, r *http.Request, wID, wAva, oMsg, oLoc, oUser, oUI, oSession, oTS string) {
    //log.Printf("ibmWatsonAssistant()")
	ulapphDebug(w,r, "info", fmt.Sprintf("ibmWatsonAssistant() %v", ""))
    h := r.Header
	//uid := oUser
	// Instantiate the Watson AssistantV2 service
	authenticator := &core.IamAuthenticator{
		ApiKey: IBM_WATSON_ASS_API_KEY,
	}
	service, serviceErr := assistantv2.
		NewAssistantV2(&assistantv2.AssistantV2Options{
			//https://api.jp-tok.assistant.watson.cloud.ibm.com/instances/31cb4fd7-c951-46c9-81d7-68bf955d0dd2
			//URL:           "https://api.jp-tok.assistant.watson.cloud.ibm.com/instances/31cb4fd7-c951-46c9-81d7-68bf955d0dd2",
			URL:           "https://api.jp-tok.assistant.watson.cloud.ibm.com",
			Version:       "2020-04-01",
			Authenticator: authenticator,
		})

	// Check successful instantiation
	if serviceErr != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("serviceErr: %v", serviceErr))
		panic(serviceErr)
	}

	/* CREATE SESSION */
    assistantID := ""
    if wID == "" || wID == "undefined" {
        assistantID = IBM_WATSON_ASS_DEF_WK_ID
    } else {
        assistantID = wID
    }
    //log.Printf("assistantID: %v", assistantID)
	ulapphDebug(w,r, "info", fmt.Sprintf("assistantID: %v", assistantID))
    // Call the assistant CreateSession method
    createSessionResult, _, responseErr := service.
        CreateSession(&assistantv2.CreateSessionOptions{
            AssistantID: core.StringPtr(assistantID),
        })

    if responseErr != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("responseErr: %v", responseErr))
        panic(responseErr)
    }
    sessionID := createSessionResult.SessionID
    //log.Printf("sessionID: %v", sessionID)

    // Call the assistant Message method
    //log.Printf("Call the watson assistant api...")
	ulapphDebug(w,r, "info", fmt.Sprintf("Call the watson assistant api... %v", ""))
	_, response, responseErr := service.
		Message(&assistantv2.MessageOptions{
			AssistantID: core.StringPtr(assistantID),
			SessionID:   sessionID,
			Input: &assistantv2.MessageInput{
                //Text: core.StringPtr("My internet is slow"),
                Text: core.StringPtr(oMsg),
			},
			Context: &assistantv2.MessageContext{
				Global: &assistantv2.MessageContextGlobal{
					System: &assistantv2.MessageContextGlobalSystem{
                        //UserID: core.StringPtr("dummy"),
                        UserID: core.StringPtr(oUser),
					},
                },
				Skills: &assistantv2.MessageContextSkills{
					"main_skill": map[string]interface{}{
						"user_defined": map[string]string{
                            "oLoc": oLoc,
                            "oUI": oUI,
                            "wID": wID,
                            "country":  h.Get("X-AppEngine-Country"),
                            "region":   h.Get("X-AppEngine-Region"),
                            "city":     h.Get("X-AppEngine-City"),
                            "latlon": h.Get("X-AppEngine-CityLatLong"),
						},
					},
				},
			},
		})

	// Check successful call
	if responseErr != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("responseErr2: %v", responseErr))
		panic(responseErr)
	}
    result := response.GetResult()
    //log.Printf("result: %v", result)
	ulapphDebug(w,r, "info", fmt.Sprintf("result: %v", result))
    output, err := json.MarshalIndent(result, "", "    ")
	if SYS_DEBUGGER_MODE == true {
		core.PrettyPrint(result, "Message")
	}

    data := map[string]interface{}{}
    //dec := json.NewDecoder(bytes.NewReader(bodyBytes))
    dec := json.NewDecoder(strings.NewReader(string(output)))
    dec.Decode(&data)
    jq := jsonq.NewQuery(data)
    jqResType, err := jq.String("output", "generic", "0", "response_type")
    if err != nil {
        log.Panicf("ERROR: %v", err)
    }
    if jqResType == "suggestion" {
		ulapphDebug(w,r, "info", fmt.Sprintf("suggestion: %v", ""))
		//var gSearch = fmt.Sprintf("UWM_ACTION::OPENWINDOW::https://www.google.com?q=%v::", oMsg)
        //var gSearch = fmt.Sprintf("UWM_ACTION::OPENWINDOW::/tools?FUNC=WIDGET&t=MiniBrowserPost&url=%v::", oMsg)
        botWaKey := fmt.Sprintf("Bot_Assistant_Current_WA_%s", oUser)
        thisWaName := getStrMemcacheValueByKey(w,r,botWaKey)
		ores := OrchResp{
            //OrchData: fmt.Sprintf("Apologies, your intent is quite vague. Let me open google for you. %v", gSearch),
            //OrchData: fmt.Sprintf("Invalid AI intent. Let me check documents for you. %v", gSearch),
			OrchData: fmt.Sprintf("Apologies, that's an invalid AI intent. You're connected to \"%v\" bot. Say clear if you want to disconnect from this bot.", thisWaName),
			OrchWA: wID,
            OrchLoc: oLoc,
			OrchVoice: "Google italiano",
			OrchIcon: wAva,
        }
        //log.Printf("ores: %#v", ores)
		ulapphDebug(w,r, "info", fmt.Sprintf("ores: %#v", ores))
        resp, err := json.Marshal(ores)
        if err != nil {
            //log.Printf("ERROR: json.Marshal() %v",err)
        }
        w.Write(resp)
		//save to cache
		//oMsgCache := fmt.Sprintf("Message_Cached_Response_%v_%v", oUser, oMsg)
		//putBytesToMemcacheWithExp(w,r,oMsgCache,resp,60)
        return        
    }
    //log.Printf("jqResType: %v", jqResType)
    jqResMsg, err := jq.String("output", "generic", "0", "text")
    if err != nil {
        log.Panicf("ERROR: %v", err)
    }
	//VOICE_NAME := ""
    finText  := ""
    if jqResMsg != "" {
        //parse orch tag parameters from watson
        oAction, oService, oMessage, oLocation, oSession := htmlTagParser(w,r,jqResMsg)
        //log.Printf("oAction: %v | oService: %v | oMessage: %v | oLocation: %v", oAction, oService, oMessage, oLocation)
		ulapphDebug(w,r, "info", fmt.Sprintf("oAction: %v | oService: %v | oMessage: %v | oLocation: %v", oAction, oService, oMessage, oLocation))
        //remove orch tags
        finText = htmlTagRemover(w,r,jqResMsg,"orch")
		ulapphDebug(w,r, "info", fmt.Sprintf("finText: %v", finText))
        //add any action info
        wtxt, err := actionInterpreter(w,r, output, oAction, oService, oMessage, oLocation, oUser, oUI, oSession, oTS)
        if err != nil {
            finText = "Apologies, I cannot respond to you with the right information."
        } else {
            finText = fmt.Sprintf("%v %v", finText, wtxt)
        }
        //log.Printf("finText: %v", finText)
		//ulapphDebug(w,r, "info", fmt.Sprintf("finText: %v", finText))
		ulapphDebug(w,r, "info", fmt.Sprintf("finText: %v", len(finText)))
		//set voice
		//VOICE_NAME = fmt.Sprintf("VOICE_NAME_%v", html.EscapeString(oLocation))
		
    }
    //Fix mobile speech issue (cant speak <silence msec='5000'/>)
    //log.Printf("oUI: %v", oUI)
	ulapphDebug(w,r, "info", fmt.Sprintf("oUI: %v", oUI))
	ulapphDebug(w,r, "info", fmt.Sprintf("finText: %v", finText))
	switch {
		case oUI == "isMobiletrue":
			ulapphDebug(w,r, "info", fmt.Sprintf("oUI: %v", oUI))
			//finText = htmlTagRemover(w,r,finText,"silence")
			//finText = strings.Replace(finText, "<silence msec='5000'/>", "", -1)
			//finText = strings.Replace(finText, "<silence msec='3000'/>", "", -1)
			//finText = strings.Replace(finText, "<silence msec='1000'/>", "", -1)
			finText = htmlTagRemover(w,r,finText,"silence")
		case oUI == "isChatWindow":
			ulapphDebug(w,r, "info", fmt.Sprintf("oUI: %v", oUI))
			finText = strings.Replace(finText, "<silence msec='1000'/>","<li>",-1)
		case oUI == "isGoogleHome" || oUI == "isDialogFlow":
			//D0103
			ulapphDebug(w,r, "info", fmt.Sprintf("oUI: %v", oUI))
			ulapphDebug(w,r, "info", fmt.Sprintf("finText: %v", finText))
			finText = strings.Replace(finText, "<silence msec='1000'/>"," ",-1)
			//return now with specific format
			ulapphDebug(w,r, "info", fmt.Sprintf("finText no silence: %v", finText))
			//remove UWM commands
			SPL := strings.Split(finText, "UWM_ACTION::")
			if len(SPL) > 0 {
				finText = SPL[0]
			}
			ulapphDebug(w,r, "info", fmt.Sprintf("finText no UWM: %v", finText))
		default:
			ulapphDebug(w,r, "info", fmt.Sprintf("oUI: %v", "default"))
			ulapphDebug(w,r, "info", fmt.Sprintf("finText: %v", finText))
			//do nothing
    }
    //w.WriteHeader(200)
    //return json
    if strings.TrimSpace(finText) != "" {
	switch oUI {
		case "isGoogleHome":
			//D0103
			expectUserResponse := false
			ores := ResponsePayload{
				Google: ResponseGoogle{
					ExpectUserResponse: expectUserResponse,
					RichResponse: RichResponse{
						Items: []Item{
							{
								SimpleResponse: SimpleResponse{
									TextToSpeech: finText,
								},
							},
						},
					},
				},
			}
			ulapphDebug(w,r, "info", fmt.Sprintf("ores: %#v", ores))
			resp, err := json.Marshal(ores)
			if err != nil {
				//log.Printf("ERROR: json.Marshal() %v",err)
			}
			w.Write(resp)
			//save to cache
			//oMsgCache := fmt.Sprintf("Message_Cached_Response_%v_%v", oUser, oMsg)
			//putBytesToMemcacheWithExp(w,r,oMsgCache,resp,60)
			return
		case "isDialogFlow":
			//D0103
			ores := DialogflowResponse{
				FulfillmentMessages: []message{
					{
						Text: textdf{
							Text: []string{finText},
						},
					},
				},
			}
			ulapphDebug(w,r, "info", fmt.Sprintf("ores: %#v", ores))
			resp, err := json.Marshal(ores)
			if err != nil {
				//log.Printf("ERROR: json.Marshal() %v",err)
			}
			w.Write(resp)
			//save to cache
			//oMsgCache := fmt.Sprintf("Message_Cached_Response_%v_%v", oUser, oMsg)
			//putBytesToMemcacheWithExp(w,r,oMsgCache,resp,60)
			return
		default:
			ores := OrchResp{
				OrchData: finText,
				OrchWA: wID,
				OrchLoc: oLoc,
				//OrchVoice: getVoiceSpeakerName(w,r,VOICE_NAME),
				OrchVoice: getVoiceSpeakerName(w,r,oUser),
				OrchIcon: wAva,
			}
			//log.Printf("ores: %#v", ores)
			ulapphDebug(w,r, "info", fmt.Sprintf("ores: %#v", ores))
			resp, err := json.Marshal(ores)
			if err != nil {
				//log.Printf("ERROR: json.Marshal() %v",err)
			}
			w.Write(resp)
			//save to cache
			//oMsgCache := fmt.Sprintf("Message_Cached_Response_%v_%v", oUser, oMsg)
			//putBytesToMemcacheWithExp(w,r,oMsgCache,resp,60)
			return
		}
    }
}
//func getVoiceSpeakerName(w http.ResponseWriter, r *http.Request, cKey string) string {
	func getVoiceSpeakerName(w http.ResponseWriter, r *http.Request, uid string) string {
	cKey := fmt.Sprintf("SPEECH_VOICE_%v", uid)
	vName := getStrMemcacheValueByKey(w,r,cKey)
	if vName == "" {
		vName = "Microsoft David Desktop - English (United States)"
	}
	return vName
}
//D0092
//interprets orchestration actions based on tags passed from watson dialogs
func actionInterpreter(w http.ResponseWriter, r *http.Request, nlpOut []byte, oAction, oService, oMessage, oLocation, oUser, oUI, oSession,oTS string) (string, error) {
    //log.Printf("actionInterpreter")
	ulapphDebug(w,r, "info", fmt.Sprintf("actionInterpreter() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("oUser: %v", oUser))
	//uid := oUser
    switch oAction {
        case "changeWA":
            //log.Printf("Changing to workspace...")
			ulapphDebug(w,r, "info", fmt.Sprintf("Changing to workspace: %v", oService))
            //log.Printf("oService: %v", oService)
            tWID := xAssistantWorkspace[oService]
            //log.Printf("tWID: %v oService: %v", tWID, oService)
			if tWID == "" {
				ulapphDebug(w,r, "error", fmt.Sprintf("Workspace: Error accessing AI workspace: %v", oService))
                return "Sorry I can't process your request right now. Please check if you are allowed to access the AI workspace.", nil				
			}
            tAva := xAssistantAvatar[oService]
            //log.Printf("tWID: %v oService: %v", tWID, oService)
			ulapphDebug(w,r, "info", fmt.Sprintf("tWID: %v oService: %v", tWID, oService))
            ibmWatsonAssistant(w,r,tWID,tAva,oMessage,oLocation,oUser,oUI,oSession,oTS)
        case "getInput":
			ulapphDebug(w,r, "info", fmt.Sprintf("Getting input from user... %v", ""))
            //log.Printf("Getting input from user...")
            //log.Printf("oService: %v", oService)
            //record the watson assistant name so we can get back to it
            botWaKey := fmt.Sprintf("Bot_Assistant_Current_WA_%s", oUser)
			ulapphDebug(w,r, "info", fmt.Sprintf("botWaKey: %v", botWaKey))
            putStrToMemcacheWithoutExp(w,r,botWaKey,oService)
        case "userResponse":
			ulapphDebug(w,r, "info", fmt.Sprintf("Processing response from userResponse... %v", ""))
			botOttoKey := fmt.Sprintf("Bot_Assistant_Otto_ID_%s", oUser)
			ulapphDebug(w,r, "info", fmt.Sprintf("botOttoKey: %v", botOttoKey))
			botOtto := getStrMemcacheValueByKey(w,r,botOttoKey)
			ulapphDebug(w,r, "info", fmt.Sprintf("botOtto: %v", botOtto))	
			wtxt := ""
			if botOtto == "" {
				//get from kvo
				//log.Printf("getting SID from kvo")
				ulapphDebug(w,r, "info", fmt.Sprintf("getting SID from kvo: %v", ""))
				cKeyA := fmt.Sprintf("ULAPPH_NLP_KVO_%v_%v_%v", oUser, oService, oUI)
				//log.Printf("cKeyA: %v", cKeyA)
				ulapphDebug(w,r, "info", fmt.Sprintf("cKeyA: %v", cKeyA))
				thisOA := getBytMemcacheValueByKey(w,r,cKeyA)
				//log.Printf("thisOA: %v", string(thisOA))
				ulapphDebug(w,r, "info", fmt.Sprintf("thisOA: %v", string(thisOA)))
				var kvo OttoAwareness
				err := json.Unmarshal(thisOA, &kvo)
				if err != nil {
						ulapphDebug(w,r, "error", fmt.Sprintf("json.Unmarshal() %v", ""))
						wtxt = fmt.Sprintf("Sorry, an error has been encountered.")
						ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: cannot un-marshal data. %v", ""))
						return wtxt, nil
				} else {
					if kvo.OttoJS != "" {
						oLocation = kvo.OttoJS
					} else {
						wtxt = fmt.Sprintf("Sorry, I didn't know how to process your request due to missing location.")
						ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: cannot process due to missing location. %v", ""))
						//log.Printf("wtxt: %v", wtxt)
						return wtxt, nil
					}	
				}
			} else {
				oLocation = botOtto
			}
			putStrToMemcacheWithoutExp(w,r,botOttoKey,oLocation)
            bName := oService
            devID := oUI
            FL_DEBUG := "Y"
			ulapphDebug(w,r, "info", fmt.Sprintf("Calling execOtto() %v", ""))
            wtxt = execOtto(w,r, oUI, oUser, oUser, oLocation, oTS, bName, devID, FL_DEBUG, "input", oMessage)
            if wtxt == "" {
                //log.Printf("ERROR: Empty response: execOtto(%v) - %v", oLocation, oMessage)
                //return "Sorry, Otto JS has empty response!", nil
				return fmt.Sprintf("Sorry, I can't understand what you mean by %v. Kindly try again.", oMessage), nil
            }
            //log.Printf("wtxt: %v", wtxt)
			//ulapphDebug(w,r, "info", fmt.Sprintf("wtxt: %v", wtxt))
            return wtxt, nil			
        case "otto":
            //log.Printf("Otto: Executing script: %v", oLocation)
			ulapphDebug(w,r, "info", fmt.Sprintf("Otto: Executing script: %v", oLocation))
            //log.Printf("oMessage: %v", oMessage)
            if oMessage == "" {
				ulapphDebug(w,r, "error", fmt.Sprintf("Otto: Error Executing script: EMPTY MESSAGE: %v", oMessage))
                return "Sorry I can't process your request due to empty message.", nil
            }
            wtxt := ""
            if oLocation == "" {
                botOttoKey := fmt.Sprintf("Bot_Assistant_Otto_ID_%s", oUser)
				ulapphDebug(w,r, "info", fmt.Sprintf("botOttoKey: %v", botOttoKey))
                botOtto := getStrMemcacheValueByKey(w,r,botOttoKey)
				ulapphDebug(w,r, "info", fmt.Sprintf("botOtto: %v", botOtto))
                if botOtto == "" {
                    //get from kvo
                    //log.Printf("getting SID from kvo")
					ulapphDebug(w,r, "info", fmt.Sprintf("getting SID from kvo: %v", ""))
                    cKeyA := fmt.Sprintf("ULAPPH_NLP_KVO_%v_%v_%v", oUser, oService, oUI)
                    //log.Printf("cKeyA: %v", cKeyA)
					ulapphDebug(w,r, "info", fmt.Sprintf("cKeyA: %v", cKeyA))
                    thisOA := getBytMemcacheValueByKey(w,r,cKeyA)
                    //log.Printf("thisOA: %v", string(thisOA))
					ulapphDebug(w,r, "info", fmt.Sprintf("thisOA: %v", string(thisOA)))
                    var kvo OttoAwareness
                    err := json.Unmarshal(thisOA, &kvo)
					if err != nil {
							ulapphDebug(w,r, "error", fmt.Sprintf("json.Unmarshal() %v", ""))
							wtxt = fmt.Sprintf("Sorry, an error has been encountered.")
							ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: cannot un-marshal data. %v", ""))
							//log.Printf("wtxt: %v", wtxt)
							return wtxt, nil
					} else {
						if kvo.OttoJS != "" {
							oLocation = kvo.OttoJS
						} else {
							wtxt = fmt.Sprintf("Sorry, I didn't know how to process your request due to missing location.")
							ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: cannot process due to missing location. %v", ""))
							//log.Printf("wtxt: %v", wtxt)
							return wtxt, nil
						}
					}
                } else {
                    oLocation = botOtto
                }
				putStrToMemcacheWithoutExp(w,r,botOttoKey,oLocation)
            }
            bName := oService
            devID := oUI
            FL_DEBUG := "Y"
            //cType - channel
            //uid - user
            //uid_rx - otto receiver
            //SID - TDSMEDIA-x
            //bName - botName
            //devID - deviceID
            //FL_DEBUG - Y or N
            //key to be set
            //value of key
            //resp - raw response text
            //execOtto(w http.ResponseWriter, r *http.Request, cType, uid,uid_rx,SID, bName, devID, FL_DEBUG, key, val string) (resp string) {
            //execute the otto javascript inside ulapph
			ulapphDebug(w,r, "info", fmt.Sprintf("Calling execOtto() %v", ""))
            wtxt = execOtto(w,r, oUI, oUser, oUser, oLocation, oTS, bName, devID, FL_DEBUG, "input", oMessage)
            if wtxt == "" {
                //log.Printf("ERROR: Empty response: execOtto(%v) - %v", oLocation, oMessage)
                //return "Sorry, Otto JS has empty response!", nil
				return fmt.Sprintf("Sorry, I can't understand what you mean by %v. Kindly try again.", oMessage), nil
            }
            //log.Printf("wtxt: %v", wtxt)
			//ulapphDebug(w,r, "info", fmt.Sprintf("wtxt: %v", wtxt))
            return wtxt, nil
        case "remindme":
            //log.Printf("remindme")
			ulapphDebug(w,r, "info", fmt.Sprintf("remindme %v", ""))
			ulapphDebug(w,r, "info", fmt.Sprintf("nlpOut %v", string(nlpOut)))
			
            wtxt := ""
			wtxt = fmt.Sprintf("UWM_ACTION::OPENWINDOW::"+"/tools?FUNC=WIDGET&t=CountDownGet&title=%v&cmins=%v", "Demo", "5");
            return wtxt, nil
        case "weather_current":
            //log.Printf("weather_current")
            //get weather details
            wtxt := ""
            if oLocation == "" {
                h := r.Header
                xLatLong := h.Get("X-AppEngine-CityLatLong")
                wd, err := getCurrentWeather(xLatLong, "",  "C", "en")
                if err != nil {
                    //fmt.Fprint(w, http.StatusInternalServerError)
                    //log.Printf("ERROR: getCurrentWeather() - %v", err)
                    return "", err
                }
				if oUI == "isMobilefalse" {
					wtxt = fmt.Sprintf("In %v, there will be %v and the temperature is %v degree celcius. UWM_ACTION::OPENWINDOW::%v::", wd.Name, wd.Weather[0].Description, wd.Main.Temp, fmt.Sprintf("https://www.google.com/search?q=weather in %v", oLocation))
				} else {
					wtxt = fmt.Sprintf("In %v, there will be %v and the temperature is %v degree celcius.", wd.Name, wd.Weather[0].Description, wd.Main.Temp)
				}
                //log.Printf("wtxt: %v", wtxt)
            } else {
                wd, err := getCurrentWeather("", oLocation, "C", "en")
                if err != nil {
                    //fmt.Fprint(w, http.StatusInternalServerError)
                    //log.Printf("ERROR: getCurrentWeather() - %v", err)
                    return "", err
                }
				if oUI == "isMobilefalse" {
					wtxt = fmt.Sprintf("In %v, there will be %v and the temperature is %v degree celcius. UWM_ACTION::OPENWINDOW::%v::", wd.Name, wd.Weather[0].Description, wd.Main.Temp, fmt.Sprintf("https://www.google.com/search?q=weather in %v", oLocation))
				} else {
					wtxt = fmt.Sprintf("In %v, there will be %v and the temperature is %v degree celcius.", wd.Name, wd.Weather[0].Description, wd.Main.Temp)
				}
                //log.Printf("wtxt: %v", wtxt)
            }
            return wtxt, nil
        case "clear":
            cKeyA := fmt.Sprintf("ULAPPH_NLP_KVO_%v_%v_%v", oUser, oService, oUI)
            //log.Printf("cKeyA: %v", cKeyA)
            memcacheDelete(w,r,cKeyA)
            botOttoKey := fmt.Sprintf("Bot_Assistant_Otto_ID_%s", oUser)
            memcacheDelete(w,r,botOttoKey)
            botWaKey := fmt.Sprintf("Bot_Assistant_Current_WA_%s", oUser)
            memcacheDelete(w,r,botWaKey)
			//delete ai folder
            memcacheDelete(w,r,"ULAPPH_NLP_ai:")
			memcacheDelete(w,r,"VOICE_NAME_ai:")
			//log.Printf("ottoFunc: ottoFuncClearConversation")
			g := OttoAwareness {
				OttoJS: "",
				OttoChannel: oUI,
				OttoReceiver: oUser,
				OttoBotName: "",
				OttoUserStatus: "",
				OttoUserName: "",
				OttoUserEmail: oUser,
				OttoUserNick: "",
				OttoUserAge: "",
				OttoUserGender: "",
				OttoUserCountry: "",
				OttoUserCity: "",
				OttoUserDeviceType: "",
				OttoUserDeviceId: oUI,
				OttoLocalTimestamp: "",
				OttoUserContext: "",
				OttoFillerStr1: "",
				OttoFillerStr2: "",
				OttoFillerStr3: "",
				OttoFillerStr4: "",
				OttoFillerStr5: "",
				OttoFillerStr6: "",
				OttoFillerStr7: "",
				OttoFillerStr8: "",
				OttoFillerStr9: "",
				OttoFillerStr10: "",
				//counters
				OttoCounter1: "",
				OttoCounter2: "",
				OttoCounter3: "",
				//flags
				OttoFlag1: "",
				OttoFlag2: "",
				OttoFlag3: "",
			}
			data, err := json.Marshal(g)
			if err != nil {
				log.Panicf("json.Marshal() Error: %v", err)
			}
			putBytesToMemcacheWithExp(w,r,cKeyA,data,GEN_CONTENT_EXPIRES)
            return oMessage, nil
        case "respond":
            return oMessage, nil
        default:
            //log.Printf("No action found")
    }
    return "",nil
}
//D0091
func htmlTagRemover(w http.ResponseWriter, r *http.Request, s, t string) string {
  p := strings.NewReader(s)
  doc, _ := goquery.NewDocumentFromReader(p)
  doc.Find(t).Each(func(i int, el *goquery.Selection) {
      el.Remove()
  })
  //fmt.Println(doc.Text()) // Links:FooBarBazTEXT I WANT
  return doc.Text()
}
//D0091
//<orch func="changeWA" service="99 - General"  message="<? input.text ?>"/>
//<orch func="getInput"  location="" message="" service="10 - GoogleCloudPlatformAssistant"/>
//<orch func="otto"  location="TDSMEDIA-58" message="<? input.text ?>"/>
// oAction - func [changeWA, otto, getinput]
// oService - service
// oMessage - message
// oLocation - location
func htmlTagParser(w http.ResponseWriter, r *http.Request, s string) (oAction, oService, oMessage, oLocation, oSession string) {
    //s := `<p>Links:</p><ul><li><a href="foo">Foo</a><li><a href="/bar/baz">BarBaz</a></ul>`
    //<orch func="changeWA" service="02 - Wireless"  message="$firstRepairUtterance" />
    doc, err := html.Parse(strings.NewReader(s))
    if err != nil {
        log.Fatal(err)
    }
    var f func(*html.Node)
    f = func(n *html.Node) {
        if n.Type == html.ElementNode && n.Data == "orch" {
            for _, a := range n.Attr {
                if a.Key == "func" {
                    //fmt.Println(a.Val)
                    //log.Printf("Function: %v", a.Val)
                    oAction = a.Val
                    //break
                }
                if a.Key == "service" {
                    //fmt.Println(a.Val)
                    //log.Printf("Service: %v", a.Val)
                    oService = a.Val
                    //break
                }
                if a.Key == "message" {
                    //fmt.Println(a.Val)
                    //log.Printf("Message: %v", a.Val)
                    oMessage = a.Val
                    //break
                }
                if a.Key == "location" {
                    //fmt.Println(a.Val)
                    //log.Printf("Location: %v", a.Val)
                    oLocation = a.Val
                    //break
                }
                if a.Key == "session" {
                    //fmt.Println(a.Val)
                    //log.Printf("Session: %v", a.Val)
                    oSession = a.Val
                    //break
                }
            }
        }
        for c := n.FirstChild; c != nil; c = c.NextSibling {
            f(c)
        }
    }
    f(doc)
    return oAction, oService, oMessage, oLocation, oSession
}
//D0119
func ulapphSpeechToText(w http.ResponseWriter, r *http.Request) {
	ulapphDebug(w,r, "info", fmt.Sprintf("ulapphSpeechToText() %v", ""))

	FUNC_CODE := r.FormValue("FUNC_CODE")
	ulapphDebug(w,r, "info", fmt.Sprintf("FUNC_CODE: %v", FUNC_CODE))

	_, uid := checkSession(w,r)

	switch FUNC_CODE {
		case "upload-audio":
			ulapphDebug(w,r, "info", fmt.Sprintf("case \"upload-audio\": %v", ""))
			gcsObjectUrl := ""
			gcsMediaUrl := ""
			IS_FILE_OK := true
			r.ParseMultipartForm(32 << 20)
			file, _, err := r.FormFile("file")
			if err != nil {
				IS_FILE_OK = false
			}
			if IS_FILE_OK == true {
				defer file.Close()
				data, err := ioutil.ReadAll(file)
				if err != nil {
					IS_FILE_OK = false
				}
				if IS_FILE_OK == true {
					ctx := context.Background()
					inpData := strings.NewReader(string(data))
					public := false
					if SYS_NOREG_FIXED_USER != "" {
						public = true
					}
					UUID := fmt.Sprintf("%v/STT_AUDIO", uid) 
					ulapphDebug(w,r, "info", fmt.Sprintf("UUID: %v", UUID))
					_, _, err := uploadGcsObject(ctx, inpData, UUID, public)
					if err != nil {
						switch err {
						case storage.ErrBucketNotExist:
							//log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
							ulapphDebug(w,r, "error", fmt.Sprintf("Please create the bucket first e.g. with gsutil mb"))
							w.WriteHeader(200)
							w.Write([]byte("error"))
							return
						default:
							//log.Fatalf("ERROR: %v", err)
							ulapphDebug(w,r, "error", fmt.Sprintf("%v", err))
							w.WriteHeader(200)
							w.Write([]byte("error"))
							return
						}
					}

					gcsObjectUrl = UUID
					gcsMediaUrl = mediaURL(UUID)
					ulapphDebug(w,r, "info", fmt.Sprintf("gcsObjectUrl: %v", gcsObjectUrl))
					ulapphDebug(w,r, "info", fmt.Sprintf("gcsMediaUrl: %v", gcsMediaUrl))
					w.WriteHeader(200)
					w.Write([]byte(gcsObjectUrl))
					return
				}
			} 
		
		case "speech-to-text":
			ulapphDebug(w,r, "info", fmt.Sprintf("case \"speech-to-text\": %v", ""))
		    ctx := context.Background()

			// Creates a client.
			client, err := speech.NewClient(ctx)
			if err != nil {
					log.Fatalf("Failed to create client: %v", err)
			}
			defer client.Close()

			// The path to the remote audio file to transcribe.
			fileURI := r.FormValue("fileURI")
			ulapphDebug(w,r, "info", fmt.Sprintf("fileURI: %v", fileURI))
			//fileURI := "gs://cloud-samples-data/speech/brooklyn_bridge.raw"

			// Detects speech in the audio file.
			resp, err := client.Recognize(ctx, &speechpb.RecognizeRequest{
					Config: &speechpb.RecognitionConfig{
							Encoding:        speechpb.RecognitionConfig_LINEAR16,
							SampleRateHertz: 16000,
							LanguageCode:    "en-US",
					},
					Audio: &speechpb.RecognitionAudio{
							AudioSource: &speechpb.RecognitionAudio_Uri{Uri: fileURI},
					},
			})
			if err != nil {
					log.Fatalf("failed to recognize: %v", err)
			}

			// Prints the results.
			for _, result := range resp.Results {
					for _, alt := range result.Alternatives {
							resStr := fmt.Sprintf("\"%v\" (confidence=%3f)\n", alt.Transcript, alt.Confidence)
							ulapphDebug(w,r, "info", fmt.Sprintf("resStr: %v", resStr))
					}
			}
			
		default:
			ulapphDebug(w,r, "error", fmt.Sprintf("Function Code not supported"))
			w.WriteHeader(200)
			w.Write([]byte("func_code error"))
			return	
	}

}
//D0065
//D0075
/*func ulapphNlp(w http.ResponseWriter, r *http.Request) {
	//s := nl.P("hello sir can you pleeeeeease play King by Lauren Aquilina") 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //log.Printf("ulapphNlp...")
	//D0075
	nlpFunc := r.FormValue("nlpFunc")
	//log.Printf("nlpFunc: %v", nlpFunc)
	//inpStr := strings.ToLower(r.FormValue("p"))
	inpStr := r.FormValue("p")
	//log.Printf("inpStr: %v", inpStr)
	uid := r.FormValue("UID")
	//log.Printf("uid: %v", uid)
	bName := r.FormValue("BN")
	//log.Printf("BN: %v", bName)
	devID := r.FormValue("DID")
	oTS := r.FormValue("oTS")
	//log.Printf("devID: %v", devID)
	//D0085
	cType := r.FormValue("CH")
	//log.Printf("CH: %v", cType)
	uid_rx := ""
	if cType == "fb" {
		uid_rx = r.FormValue("UIDR")
	}
	//log.Printf("UIDR: %v", uid_rx)
	//log.Printf("cType: %v", cType)
	FL_DEBUG := r.FormValue("DEBUG")
	//log.Printf("FL_DEBUG: %v", FL_DEBUG)
	//Getting current user KVO data
	cKeyA := fmt.Sprintf("ULAPPH_NLP_KVO_%v_%v_%v", uid, bName, devID)
	nlpDebug(w,r,FL_DEBUG, "info", "KVO: "+cKeyA)
	//log.Printf("cKeyA: %v", cKeyA)
	thisOA := getStrMemcacheValueByKey(w,r,cKeyA)
	nlpDebug(w,r,FL_DEBUG, "info", "OA: "+thisOA)
	//log.Printf("thisOA: %v", thisOA)
	var kvo OttoAwareness
	err := json.Unmarshal([]byte(thisOA), &kvo)
	//log.Printf("kvo: %+v", kvo)

	switch nlpFunc {
	case "csTeachMe":
		//Crowdsource - append intent/response
		//for ulapph-sites central server only
		//log.Printf("nlpFunc = csTeachMe")
		SID := SYS_COMMON_CHAT_KB_CS
		//log.Printf("SID: %v", SID)
		intent := r.FormValue("intent")
		//log.Printf("intent: %v", intent)
		response := r.FormValue("response")
		//replace special chars
		response = strings.Replace(response, "\n","<br>",-1)
		//response = strings.Replace(response, "\"","&#34;",-1)
		response = strings.Replace(response, "\"","'",-1)
		response = strings.Replace(response, "=","&#61;",-1)
		//log.Printf("response: %v", response)
		UID := r.FormValue("UID")
		//log.Printf("UID: %v", UID)
		//copy existing data
		BLOB_KEY := contentCheckSid(w,r,SID)
		//log.Printf("BLOB_KEY: %v", BLOB_KEY)
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		for s.Scan() {
			buf.WriteString(s.Text())
			buf.WriteString("\n")
		}
		//append
		buf.WriteString("{\n")
		buf.WriteString(fmt.Sprintf("    \"text\": \"%v\",\n", intent))
		buf.WriteString(fmt.Sprintf("    \"answer\": \"%v\",\n", response))
		buf.WriteString(fmt.Sprintf("    \"help\": \"cs teacher: %v\",\n", UID))
		buf.WriteString("    \"isRegexp\": \"true\",\n")
		buf.WriteString("    \"isAnsOtto\": \"false\"\n")
		buf.WriteString("}\n")

		//log.Printf("DATA: %v", buf.String())
		err = blobFileSaver(w,r,SID,buf.Bytes())
		if err != nil {
			//log.Printf("ERROR: %v", err)
			return
		}
		//clear cache cs common
                cKey := fmt.Sprintf("ULAPPH_NLP_%v", SID)
		memcacheDelete(w,r,cKey)
		//clear cache overall common 
                cKey = fmt.Sprintf("ULAPPH_NLP_%v", "ULAPPH-COMMON-KB")
		memcacheDelete(w,r,cKey)
		//send email to admin about unknown intent 
		geoStr := getGeoString(w,r)
		geoAcc := getAccessString(w,r,"")
		subject := fmt.Sprintf("[ULAPPH] Crowdsourced intent [%v]", UID)
		MESSAGE := fmt.Sprintf("[ULAPPH] Crowdsourced intent [<b>%v</a>] [%v] [%v] [%v] [%v] [%v]", inpStr, SYS_SERVER_NAME, SID, UID, geoStr, geoAcc)
        time.AfterFunc(5*time.Second, func() {
            laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": UID, "MESSAGE": MESSAGE})
        })
		w.WriteHeader(200)
		fmt.Fprintf(w, "Saved data successfully! Please wait from 30mins to 1 hour in order for the new data to take effect!")
	case "csAppend":
		//log.Printf("nlpFunc = csAppend")
		SID := r.FormValue("SID")
		//log.Printf("SID: %v", SID)
		illness := r.FormValue("illness")
		//log.Printf("illness: %v", illness)
		remedy := r.FormValue("remedy")
		//remove newlines
		remedy = strings.Replace(remedy, "\n","<br>",-1)
		//replace double quotes
		remedy = strings.Replace(remedy, "\"","&#34;",-1)
		//log.Printf("remedy: %v", remedy)
		//copy existing data
		BLOB_KEY := contentCheckSid(w,r,SID)
		//log.Printf("BLOB_KEY: %v", BLOB_KEY)
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		for s.Scan() {
			buf.WriteString(s.Text())
			buf.WriteString("\n")
		}
		//append
		buf.WriteString("{\n")
		buf.WriteString(fmt.Sprintf("    \"text\": \"%v\",\n", illness))
		buf.WriteString(fmt.Sprintf("    \"answer\": \"%v\",\n", remedy))
		buf.WriteString("    \"help\": \"home remedy\",\n")
		buf.WriteString("    \"isRegexp\": \"false\",\n")
		buf.WriteString("    \"isAnsOtto\": \"false\"\n")
		buf.WriteString("}\n")

		//log.Printf("DATA: %v", buf.String())
		err = blobFileSaver(w,r,SID,buf.Bytes())
		if err != nil {
			//log.Printf("ERROR: %v", err)
			return
		}
		//clear cache
                cKey := fmt.Sprintf("ULAPPH_NLP_%v", SID)
		memcacheDelete(w,r,cKey)
		w.WriteHeader(200)
		fmt.Fprintf(w, "Saved data successfully! Please wait from 30mins to 1 hour in order for the new data to take effect!")
		return
	case "nlpReset":
		uid := r.FormValue("UID")
		//log.Printf("uid: %v", uid)
		bName := r.FormValue("BN")
		//log.Printf("BN: %v", bName)
		devID := r.FormValue("DID")
		//log.Printf("devID: %v", devID)
		//clear main chatbot cache
                cKey := fmt.Sprintf("ULAPPH_NLP_%v", "ULAPPH-COMMON-KB")
		memcacheDelete(w,r,cKey)
		//clear default otto cache
                cKey = fmt.Sprintf("ULAPPH_NLP_DEF_OTTO_%v", uid)
		memcacheDelete(w,r,cKey)
		//clear specific bot/device cache 
		cKey = fmt.Sprintf("ULAPPH_NLP_KVO_%v_%v_%v", uid, bName, devID)
		memcacheDelete(w,r,cKey)
		w.WriteHeader(200)
		fmt.Fprintf(w, "NLP cache deleted!")
		return
	case "nlpLog":
		nlpDebug(w,r,FL_DEBUG, "info", "case: nlpLog")
		bodyBytes, _ := ioutil.ReadAll(r.Body)
		nlpDebug(w,r,FL_DEBUG, "info", "body: "+string(bodyBytes))
		saveConversations(w,r,string(bodyBytes),uid,bName,devID)
		return
	case "nlpLogShow":
		nlpDebug(w,r,FL_DEBUG, "info", "case: nlpLogShow")
		//UID=edwin.d.vinas@gmail.com&BN=ULAPPH%20Routing%20Bot&DID=8110be080c9e00b52aa0d408ae6bbb3b
		UID := r.FormValue("UID")
		BOT := r.FormValue("BN")
		DID := r.FormValue("DID")
		//cKeySR := fmt.Sprintf("CONVO_BLOB_%v_%v_%v", UID, BOT, DID)
		//nlpDebug(w,r,FL_DEBUG, "info", "key: "+cKeySR)
		SR_BLOB := ""
		var g TDSCNFG
		//SR_BLOB = getStrMemcacheValueByKey(w,r,cKeySR)
		//nlpDebug(w,r,FL_DEBUG, "info", "SR_BLOB: "+SR_BLOB)
		thisKey := fmt.Sprintf("CONVO_REC_%v_%v_%v", UID, BOT, DID)
		nlpDebug(w,r,FL_DEBUG, "info", "thisKey: "+thisKey)
		if SR_BLOB == "" {
            key := datastore.NameKey("TDSCNFG", thisKey, nil)
            //D0086
            datastoreClient := createClientDS()
			if err := datastoreClient.Get(c, key, &g); err != nil {
				//return
            }
            //log.Printf("datastoreClient.Get()  [43522]")
			SR_BLOB = g.TXT_VAL
			nlpDebug(w,r,FL_DEBUG, "info", "g.TXT_VAL: "+g.TXT_VAL)
			//putStrToMemcacheWithoutExp(w,r,cKeySR,SR_BLOB)
		}
		if SR_BLOB != "" {
			//display convo logs
			nlpDebug(w,r,FL_DEBUG, "info", "getBlobText: "+SR_BLOB)
			appText := getBlobText(w,r,SR_BLOB)
			TEMPDATA := TEMPSTRUCT2{
				HTM_FILLER1: template.HTML(appText),
			}
			renderStaticWithTEMPSTRUCT2(w,r,&TEMPDATA,".chat-logs")
		} else {
			w.Write([]byte("data not found"))
		}
		return
	case "nlpProse":
		nlpDebug(w,r,FL_DEBUG, "info", "case: nlpProse")
		if err == nil {
			switch {
			case kvo.OttoUserStatus != "":
				nlpDebug(w,r,FL_DEBUG, "info", "kvo.OttoUserStatus: "+kvo.OttoUserStatus)
				//execute Otto directly
				cKeyO := fmt.Sprintf("ULAPPH_NLP_DEF_OTTO_%v", uid)
				nlpDebug(w,r,FL_DEBUG, "info", "cKeyO: "+cKeyO)
				//log.Printf("cKeyO: %v", cKeyO)
				defOttoJS := getStrMemcacheValueByKey(w,r,cKeyO)
				nlpDebug(w,r,FL_DEBUG, "info", "defOttoJS: "+defOttoJS)
				//log.Printf("defOttoJS: %v", defOttoJS)
				if defOttoJS != "" {
					//log.Printf("Executing default OttoJS: %v", defOttoJS)
					nlpDebug(w,r,FL_DEBUG, "info", "Execute OttoJS: "+defOttoJS)
					resp := execOtto(w,r, cType, uid, uid_rx, defOttoJS, oTS, bName, devID, FL_DEBUG, "input", inpStr)
					nlpDebug(w,r,FL_DEBUG, "info", "OttoJS Response: "+resp)
					//log.Printf("resp: %v", resp)
					err := nlpProseFormatTemplateResponse(w,r,bName,resp,kvo)
					if err != nil {
						nlpDebug(w,r,FL_DEBUG, "error", "nlpProseFormatTemplateResponse: "+fmt.Sprintf("%v",err))
						//log.Printf("ERROR: %v", err)
					}
					//w.Write([]byte(resp))
					return
				}
			}
		} else {
			//log.Printf("kvo unmarshal error: %v", err)
			nlpDebug(w,r,FL_DEBUG, "error", "kvo unmarshal error: "+fmt.Sprintf("%v",err))
			//log.Printf("cKeyA: %v", cKeyA)
			g := OttoAwareness {
				OttoChannel: cType,
				OttoReceiver: uid_rx,
				OttoBotName: bName,
				OttoUserStatus: "",
				OttoUserName: "",
				OttoUserEmail: uid,
				OttoUserNick: "",
				OttoUserAge: "",
				OttoUserGender: "",
				OttoUserCountry: "",
				OttoUserCity: "",
				OttoUserDeviceType: "",
				OttoUserDeviceId: devID,
				OttoLocalTimestamp: "",
				OttoUserContext: "",
				OttoFillerStr1: "",
				OttoFillerStr2: "",
				OttoFillerStr3: "",
				OttoFillerStr4: "",
                OttoFillerStr5: "",
                OttoFillerStr6: "",
                OttoFillerStr7: "",
                OttoFillerStr8: "",
                OttoFillerStr9: "",
                OttoFillerStr10: "",
                //counters
                OttoCounter1: "",
                OttoCounter2: "",
                OttoCounter3: "",
                //flags
                OttoFlag1: "",
                OttoFlag2: "",
                OttoFlag3: "",
			}
			data, err := json.Marshal(g)
			if err != nil {
				//log.Printf("json.Marshal() Error: %v", err)
			}
			nlpDebug(w,r,FL_DEBUG, "info", "OttoAwareness: "+fmt.Sprintf("%v", g))
			putBytesToMemcacheWithExp(w,r,cKeyA,data,GEN_CONTENT_EXPIRES)
		}

		//D0075
		SID := r.FormValue("SID")
		nlpDebug(w,r,FL_DEBUG, "info", "SID: "+SID)
		//log.Printf("SID: %v", SID)
		//get from cache if available
		cKey := fmt.Sprintf("ULAPPH_NLP_%v", SID)
		nlpDebug(w,r,FL_DEBUG, "info", "cKey: "+cKey)
		//log.Printf("cKey: %v", cKey)
		thisCont := getStrMemcacheValueByKey(w,r,cKey)
		nlpDebug(w,r,FL_DEBUG, "info", "thisCont: "+thisCont)
		if thisCont == "" {
			nlpDebug(w,r,FL_DEBUG, "info", "thisCont: empty"+thisCont)
			if SID == "ULAPPH-COMMON-KB" {
				nlpDebug(w,r,FL_DEBUG, "info", "SID: ULAPPH-COMMON-KB")
				//SYS_COMMON_CHAT_KB
				thisCont = fetchURL(w,r,SYS_COMMON_CHAT_KB)
				if strings.Index(thisCont, "quota") != -1 {
					thisCont = ""
				}
			} else {
				nlpDebug(w,r,FL_DEBUG, "info", "SID: "+SID)
				BLOB_KEY := contentCheckSid(w,r,SID)
				nlpDebug(w,r,FL_DEBUG, "info", "BLOB_KEY: "+BLOB_KEY)
				//log.Printf("BLOB_KEY: %v", BLOB_KEY)
				//blobChan := make(chan []byte)
				//go getBlobByteChan(w, r,blobChan, BLOB_KEY)
				//thisCont = <- blobChan
				thisCont = getBlobTextNoComms(w, r, BLOB_KEY)
				nlpDebug(w,r,FL_DEBUG, "info", "thisCont: "+thisCont)
				//thisCont := getBlobText(w, r, BLOB_KEY)
				//log.Printf("thisCont: %v", thisCont)
			}
			//putStrToMemcacheWithoutExp(w,r,cKey,thisCont)
			nlpDebug(w,r,FL_DEBUG, "info", "thisCont: "+"cached")
			putStrToMemcacheWithExp(w,r,cKey,thisCont,MC_ADS_EXPIRES_30_MIN)
		}
		if thisCont == "" {
			nlpDebug(w,r,FL_DEBUG, "error", "KB data not found")
			w.Write([]byte("System error. KB data not found!"))
			return
		}

		dec := json.NewDecoder(strings.NewReader(thisCont))
		entries := []ProseDataNLP{}
		for {
			ent := ProseDataNLP{}
			err = dec.Decode(&ent)
			if err != nil {
				if err == io.EOF {
					break
				}
				panic(err)
			}
			entries = append(entries, ent)
		}
		//Get default Otto JS
		cKeyO := fmt.Sprintf("ULAPPH_NLP_DEF_OTTO_%v", uid)
		nlpDebug(w,r,FL_DEBUG, "info", "cKeyO: "+cKeyO)
		//log.Printf("cKeyO: %v", cKeyO)
		defOttoJS := getStrMemcacheValueByKey(w,r,cKeyO)
		nlpDebug(w,r,FL_DEBUG, "info", "defOttoJS: "+defOttoJS)
		//log.Printf("defOttoJS: %v", defOttoJS)
		if defOttoJS == "" {
			//log.Printf("Finding default ottoJS...")
			nlpDebug(w,r,FL_DEBUG, "info", "Finding defOttoJS: "+defOttoJS)
			for _, entry := range entries {
				if entry.Text == "" && entry.Help == "" && strings.Index(entry.Answer, "TDS") != -1 {
					defOttoJS = entry.Answer
					//cKey := fmt.Sprintf("ULAPPH_NLP_DEF_OTTO_%v", uid)
					nlpDebug(w,r,FL_DEBUG, "info", "defOttoJS: "+defOttoJS)
					putStrToMemcacheWithoutExp(w,r,cKeyO,defOttoJS)
					//log.Printf("defOttoJS: %v", defOttoJS)
					break
				}
			}
		}
		//log.Printf("entries: %v", entries)
		// Create a new document with the default configuration:
		doc, err := prose.NewDocument(inpStr)
		if err != nil {
		log.Fatalf("ERROR: %v", err)
		}
		// Iterate over the doc's tokens:
		var thisResp []string
		for _, tok := range doc.Tokens() {
			//log.Printf("****TOKENS****<br>")
			nlpDebug(w,r,FL_DEBUG, "info", "****TOKENS****")
			//log.Printf("TEXT: %v TAG: %v LABEL: %v<br>", tok.Text, tok.Tag, tok.Label)
			thisInfo := fmt.Sprintf("TEXT: %v TAG: %v LABEL: %v<br>", tok.Text, tok.Tag, tok.Label)
			nlpDebug(w,r,FL_DEBUG, "info", "thisInfo: "+thisInfo)
			// Go NNP B-GPE
			// is VBZ O
			// an DT O
			// ...
			//check the ProseData
			for _, entry := range entries {
				switch entry.IsRegexp {
				case "true":
					//unescStr := strings.Replace(entry.Text, "\\", "", -1)
					//regExpStr := fmt.Sprintf(`%v`, entry.Text)
					//log.Printf("regExpStr: %v", regExpStr)
					//var regIn = regexp.MustCompile(entry.Text)
					//var regIn = regexp.MustCompile(entry.Text)
					//if regIn.MatchString(tok.Text) == true {
					matched, err := regexp.MatchString(entry.Text, tok.Text)
					//log.Printf("entry.IsRegexp: true")
					//log.Printf("matched: %v [%v] [%v]", matched, entry.Text, tok.Text)
					if err != nil {
						panic(err)
					}
					if matched == true {
						//w.Write([]byte(entry.Answer))
						if entry.IsAnsOtto == "true" {
							//call Otto API
							nlpDebug(w,r,FL_DEBUG, "info", "entry.IsAnsOtto: "+entry.IsAnsOtto)
							nlpDebug(w,r,FL_DEBUG, "info", "call Otto API")
							resp := execOtto(w,r, cType, uid,uid_rx,entry.Answer, oTS, bName, devID, FL_DEBUG, "input", tok.Text)
							nlpDebug(w,r,FL_DEBUG, "info", "resp: "+resp)
							//w.Write([]byte(resp))
							err := nlpProseFormatTemplateResponse(w,r,bName,resp,kvo)
							if err != nil {
								//log.Printf("ERROR: %v", err)
							}
							//return
							break
						} else {
							//w.Write([]byte(entry.Answer))
							//return
							thisResp = append(thisResp, entry.Answer)
							break
						}
					} else {
						//when there are lower/uppercase letters
						matched, err := regexp.MatchString(entry.Text, strings.ToLower(tok.Text))
						if err != nil {
							panic(err)
						}
						if matched == true {
							//w.Write([]byte(entry.Answer))
							if entry.IsAnsOtto == "true" {
								//call Otto API
								nlpDebug(w,r,FL_DEBUG, "info", "entry.IsAnsOtto: "+entry.IsAnsOtto)
								nlpDebug(w,r,FL_DEBUG, "info", "call Otto API")
								resp := execOtto(w,r, cType, uid,uid_rx, entry.Answer, oTS, bName, devID, FL_DEBUG, "input", tok.Text)
								nlpDebug(w,r,FL_DEBUG, "info", "resp: "+resp)
								//w.Write([]byte(resp))
								err := nlpProseFormatTemplateResponse(w,r,bName,resp,kvo)
								if err != nil {
									//log.Printf("ERROR: %v", err)
								}
								//return
								break
							} else {
								//w.Write([]byte(entry.Answer))
								thisResp = append(thisResp, entry.Answer)
								//return
								break
							}
						}
					}
				default:
					//log.Printf("default")
					if entry.Text == tok.Text {
						//w.Write([]byte(entry.Answer))
						thisResp = append(thisResp, entry.Answer)
						//return
					}
				}
			}
		}

		// Iterate over the doc's named-entities:
		//for _, ent := range doc.Entities() {
			//log.Printf("****ENTITIES*****<br>")
			//log.Printf("TEXT: %v LABEL: %v<br>", ent.Text, ent.Label)
			// Go GPE
			// Google GPE
		//}
		if len(thisResp) <= 0 {
		// Iterate over the doc's sentences:
		for _, sent := range doc.Sentences() {
			//log.Printf("****SENTENCES****<br>")
			//log.Printf("SENTENCE: %v<br>", sent.Text)
			nlpDebug(w,r,FL_DEBUG, "info", "SENTENCE: "+sent.Text)
			// Go is an open-source programming language created at Google.
			//check the ProseData
			for _, entry := range entries {
				switch entry.IsRegexp {
				case "true":
					//unescStr := strings.Replace(entry.Text, "\\\\", "\\", -1)
					//regExpStr := fmt.Sprintf("`%v`", unescStr)
					//var regIn = regexp.MustCompile(regExpStr)
					//regExpStr := fmt.Sprintf(`%v`, entry.Text)
					//log.Printf("regExpStr: %v", regExpStr)
					//var regIn = regexp.MustCompile(regExpStr)
					//var regIn = regexp.MustCompile(entry.Text)
					matched, err := regexp.MatchString(entry.Text, sent.Text)
					//log.Printf("entry.IsRegexp: true")
					//log.Printf("matched: %v [%v] [%v]", matched, entry.Text, sent.Text)
					if err != nil {
						panic(err)
					}
					if matched == true {
					//if regIn.MatchString(sent.Text) == true {
						//w.Write([]byte(entry.Answer))
						if entry.IsAnsOtto == "true" {
							//call Otto API
							nlpDebug(w,r,FL_DEBUG, "info", "entry.IsAnsOtto: "+entry.IsAnsOtto)
							nlpDebug(w,r,FL_DEBUG, "info", "call Otto API")
							resp := execOtto(w,r, cType, uid,uid_rx,entry.Answer, oTS, bName, devID, FL_DEBUG, "input", sent.Text)
							//w.Write([]byte(resp))
							err := nlpProseFormatTemplateResponse(w,r,bName,resp,kvo)
							if err != nil {
								//log.Printf("ERROR: %v", err)
							}
							return
							//break
						} else {
							//w.Write([]byte(entry.Answer))
							thisResp = append(thisResp, entry.Answer)
							//return
							break
						}
					}else{
						matched, err := regexp.MatchString(entry.Text, strings.ToLower(sent.Text))
						if err != nil {
							panic(err)
						}
						if matched == true {
						//if regIn.MatchString(sent.Text) == true {
							//w.Write([]byte(entry.Answer))
							if entry.IsAnsOtto == "true" {
								//call Otto API
								nlpDebug(w,r,FL_DEBUG, "info", "entry.IsAnsOtto: "+entry.IsAnsOtto)
								nlpDebug(w,r,FL_DEBUG, "info", "call Otto API")
								resp := execOtto(w,r, cType, uid,uid_rx,entry.Answer, oTS, bName, devID, FL_DEBUG, "input", sent.Text)
								//w.Write([]byte(resp))
								err := nlpProseFormatTemplateResponse(w,r,bName,resp,kvo)
								if err != nil {
									//log.Printf("ERROR: %v", err)
								}
								return
								//break
							} else {
								//w.Write([]byte(entry.Answer))
								//return
								thisResp = append(thisResp, entry.Answer)
								break
							}
						}
					}
				default:
					//log.Printf("default")
					if entry.Text == sent.Text {
						//w.Write([]byte(entry.Answer))
						//return
						thisResp = append(thisResp, entry.Answer)
						break
					}
				}
			}
		}
		}
		//If first time to chat, attempt to start conversation
		if defOttoJS != "" {
			nlpDebug(w,r,FL_DEBUG, "info", "defOttoJS: "+defOttoJS)
			//log.Printf("Attemp conversation... Executing default OttoJS: %v", defOttoJS)
			nlpDebug(w,r,FL_DEBUG, "info", "If first time to chat: "+defOttoJS)
			resp := execOtto(w,r, cType, uid, uid_rx,defOttoJS, oTS, bName, devID, FL_DEBUG, "input", inpStr)
			nlpDebug(w,r,FL_DEBUG, "info", "resp: "+resp)
			thisResp = append(thisResp, resp)
			respString := ""
			if resp == "" {
				respString = strings.Join(thisResp,"")
			} else {
				if cType != "fb" {
				respString = strings.Join(thisResp,"@888@")
				} else {
				respString = strings.Join(thisResp," ")
				}
			}
			if respString != "" {
				//log.Printf("respString: %v", respString)
				//w.Write([]byte(respString))
				nlpDebug(w,r,FL_DEBUG, "info", "respString: "+respString)
				err := nlpProseFormatTemplateResponse(w,r,bName,respString,kvo)
				if err != nil {
					//log.Printf("ERROR: %v", err)
				}
				return
			}
		} else {
			respString := ""
			if len(thisResp) > 0 {
				if cType != "fb" {
				respString = strings.Join(thisResp,"@888@")
				} else {
				respString = strings.Join(thisResp," ")
				}
			} else {
				respString = strings.Join(thisResp,"")
			}
			if respString != "" {
				//log.Printf("Initial response: %v", respString)
				//w.Write([]byte(respString))
				nlpDebug(w,r,FL_DEBUG, "info", "respString: "+respString)
				err := nlpProseFormatTemplateResponse(w,r,bName,respString,kvo)
				if err != nil {
					//log.Printf("ERROR: %v", err)
				}
				return
			}
		}

		nlpDebug(w,r,FL_DEBUG, "error", "Sorry, I didn't get that")
		w.Write([]byte("Sorry, I didn't get that."))
		//send email to admin about unknown intent 
		geoStr := getGeoString(w,r)
		geoAcc := getAccessString(w,r,"")
		nlpDebug(w,r,FL_DEBUG, "error", "Send email about unknown intent: "+ADMMAIL)
		subject := fmt.Sprintf("[ULAPPH] Unknown intent [%v]", uid)
		MESSAGE := fmt.Sprintf("[ULAPPH] Unknown intent [<b>%v</a>] [%v] [%v] [%v] [%v] [%v]", inpStr, SYS_SERVER_NAME, SID, uid, geoStr, geoAcc)
        time.AfterFunc(5*time.Second, func() {
            laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": uid, "MESSAGE": MESSAGE})
        })
		//check the ProseData
		var buf bytes.Buffer
		tctr := 0
		for _, entry := range entries {
			i := strings.Index(entry.Text, inpStr)
			j := strings.Index(entry.Help, inpStr)
			if i != -1 || j != -1 {
				tctr++
				thisStr := fmt.Sprintf("<br>- %v", entry.Help)
				buf.WriteString(thisStr)
				//w.Write([]byte(thisStr))
			}
		}
		//w.Write([]byte("</ul>"))
		if tctr > 0 {
			nlpDebug(w,r,FL_DEBUG, "error", "You can try the following examples:: "+buf.String())
			w.Write([]byte("You can try the following related examples:"))
			w.Write(buf.Bytes())
		}
		return

	default:
		//log.Printf("inpStr: %v", inpStr)
		s := nl.P(inpStr)
		//log.Printf("s: %v", s)
		resp := ""
		if nr, ok := s.(*ulapphBotNlpRes); ok {
			//log.Printf("Success")
			//log.Printf("%#v\n", nr)
			//D0068
			SPL := strings.Split(inpStr, " ")
			switch {
				case strings.ToLower(nr.FuncType) == "motd":
					resp = nlpQuote(w,r,uid,nr)
				case strings.ToLower(nr.FuncType) == "view" && len(SPL) > 4:
					resp = nlpView(w,r,nr)
				case (strings.ToLower(nr.FuncType) == "update" || strings.ToLower(nr.FuncType) == "edit") && len(SPL) > 4:
					resp = nlpUpdate(w,r,nr)
				case strings.ToLower(nr.FuncType) == "open":
					resp = nlpOpen(w,r,nr.ContentType)
				case strings.ToLower(nr.FuncType) == "recent":
					resp = nlpRecent(w,r,nr.ContentType)
				case strings.ToLower(nr.FuncType) == "search":
					i := strings.Index(inpStr, "internal")
					if i != -1 {
						resp = nlpSearch(w,r,"i",nr.SearchKey)
					} else {
						resp = nlpSearch(w,r,"e",nr.SearchKey)
					}
				default:
					//D0068
					//search ACB blob
					resp = nlpAcbSearch(w,r,uid,inpStr) 
					if resp == "" {
						resp = "nlp-success-invalid-function"
					}
			}
		} else {
			//log.Printf("Failed")
			//resp = fmt.Sprintf("<i>%v</i> is an invalid talk...", inpStr)
			resp = "nlp-failed"
		}
		w.WriteHeader(200)
		w.Write([]byte(resp))
		return
	}
}*/

//reformat nlp response
/*func nlpProseFormatTemplateResponse(w http.ResponseWriter, r *http.Request, bName, resRaw string, p OttoAwareness) error {
    //c := appengine.NewContext(r)
    //log.Printf("nlpProseFormatTemplateResponse()")
    //log.Printf("resRaw: %v", resRaw)
    //log.Printf("kvo: %v", p)
    if p.OttoBotName == "" {
	p.OttoBotName = bName
    }

    tmpl := template.New("test")
    //parse some content and generate a template
    tmpl, err := tmpl.Parse(resRaw)
    if err != nil {
        //log.Fatalf("Error Parsing template: ", err)
        log.Panicf("Error Parsing template: %v", err)
        return fmt.Errorf("Error Parsing template: %v", err)
        //return
    }
    err1 := tmpl.Execute(w, p)
    if err1 != nil {
        //log.Fatalf("Error executing template: ", err1)
        log.Panicf("Error executing template: %v", err1)
        return fmt.Errorf("Error executing template: %v", err1)

    }
    return nil
}*/

//D0068
/*func nlpAcbSearch(w http.ResponseWriter, r *http.Request, uid, target string) (string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //log.Printf("nlpSearchAcb: %v", target)
	//log.Printf("uid: %v", uid)
	resp := ""

	cKeyACB := fmt.Sprintf("ACB_BLOB_%v", uid)
	ACB_BLOB := ""
	ACB_BLOB = getStrMemcacheValueByKey(w,r,cKeyACB)
	if ACB_BLOB == "" {
		//log.Printf("get from config blob")
		var g TDSCNFG
		thisKey := fmt.Sprintf("SYSTEM_ACB_%v", uid)
        key := datastore.NameKey("TDSCNFG", thisKey, nil)
        //D0086
        datastoreClient := createClientDS()
		if err := datastoreClient.Get(c, key, &g); err != nil {
			//return
        }
        //log.Printf("datastoreClient.Get()  [44058]")
		ACB_BLOB = g.TXT_VAL
		putStrToMemcacheWithoutExp(w,r,cKeyACB,ACB_BLOB)
	}
	//log.Printf("ACB_BLOB: %v", ACB_BLOB)
	if strings.Index(ACB_BLOB, "ERROR: ") != -1 || strings.Index(ACB_BLOB, "urlfetch: DEADLINE_EXCEEDED") != -1 {
		ACB_BLOB = ""
		putStrToMemcacheWithoutExp(w,r,cKeyACB,"")
	}
	if ACB_BLOB != "" {
		//log.Printf("get blob content")
		blobChan := make(chan []byte)
		go getBlobByteChan(w, r,blobChan, ACB_BLOB)
		thisCont := <- blobChan
		ctr := 0
		if thisCont != nil {
			//log.Printf("thisCont: %v", len(thisCont))
			//resp = "Found acb blob"
			SPL := strings.Split(string(thisCont), "},")
			for i:=0;i<len(SPL);i++ {
				if strings.Index(strings.ToUpper(SPL[i]), strings.ToUpper(target)) != -1 {
					SPL2 := strings.Split(SPL[i], "'")
					ctr++
					//if TDSMEDA- type
					if strings.Index(SPL2[3], "IMG_URL=") != -1 && strings.Index(SPL2[3], "MEDIA_ID=") != -1 {
						if ctr == 1 {
							resp = fmt.Sprintf("<img src=\"/static/img/divider-line.png\"><a href=\"%v\" target=\"%v\" title=\"%v\"><img src=\"%v\">%v</a>", SPL2[3], SPL2[1], SPL2[1], getImgFromUrl(w,r,SPL2[3]), SPL2[1])

						} else {
							resp = fmt.Sprintf("%v<img src=\"/static/img/divider-line.png\"><a href=\"%v\" target=\"%v\" title=\"%v\"><img src=\"%v\">%v</a>", resp, SPL2[3], SPL2[1], SPL2[1], getImgFromUrl(w,r,SPL2[3]), SPL2[1])
						}

					} else {
						if ctr == 1 {
							resp = fmt.Sprintf("<img src=\"/static/img/divider-line.png\"><a href=\"%v\" target=\"%v\" title=\"%v\">%v</a>", SPL2[3], SPL2[1], SPL2[1], SPL2[1])

						} else {
							resp = fmt.Sprintf("%v<img src=\"/static/img/divider-line.png\"><a href=\"%v\" target=\"%v\" title=\"%v\">%v</a>", resp, SPL2[3], SPL2[1], SPL2[1], SPL2[1])
						}
					}
					if ctr > 50 {
						break
					}
				}
			}
		}
	}
	return resp
}*/

//D0065
/*func nlpRecent(w http.ResponseWriter, r *http.Request, target string) (string) {
	//c := appengine.NewContext(r)
	//log.Printf("nlpShow: %v", target)
	switch strings.ToLower(target) {
	case "slides":
		rmsg := fmt.Sprintf("<a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=2\" target=\"recent\">Latest 2 slides</a>")
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=5\" target=\"recent\">Latest 5 slides</a>", rmsg)
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=10\" target=\"recent\">Latest 10 slides</a>", rmsg)
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=RECENT&LAST=50\" target=\"recent\">Latest 50 slides</a>", rmsg)
		return rmsg
	case "articles":
		rmsg := fmt.Sprintf("<a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=2\" target=\"recent\">Latest 2 articles</a>")
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=5\" target=\"recent\">Latest 5 articles</a>", rmsg)
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=10\" target=\"recent\">Latest 10 articles</a>", rmsg)
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=RECENT&LAST=5\" target=\"recent\">Latest 50 articles</a>", rmsg)
		return rmsg
	case "media":
		rmsg := fmt.Sprintf("<a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=2\" target=\"recent\">Latest 2 media</a>")
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=5\" target=\"recent\">Latest 5 media</a>", rmsg)
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=10\" target=\"recent\">Latest 10 media</a>", rmsg)
		rmsg = fmt.Sprintf("%v<br><a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=50\" target=\"recent\">Latest 50 media</a>", rmsg)
		return rmsg
	case "comments":
		rmsg := fmt.Sprintf("<a href=\"/tools?FUNC=ALL_COMMENTS\" target=\"comments\">Open Comments</a>")
		return rmsg
	}
	return "Sorry, we can't show the recent!"
}*/
//D0065
/*func nlpOpen(w http.ResponseWriter, r *http.Request, target string) (string) {
	switch strings.ToLower(target) {
	case "slides with music":
		return fmt.Sprintf("<a href=\"/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0&VIEW=WITH_MUSIC\" target=\"webapp\">Open Slides with Music</a>")
	case "articles with music":
		return fmt.Sprintf("<a href=\"/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0&VIEW=WITH_MUSIC\" target=\"webapp\">Open Articles with Music</a>")
	case "wallpapers":
		return fmt.Sprintf("<a href=\"/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_WALLPAPERS\" target=\"webapp\">List Wallpapers</a>")
	}
	return "Sorry, we can't perform the search!"
}*/

//D0065
/*func nlpSearch(w http.ResponseWriter, r *http.Request, mode, keyword string) (string) {
	switch strings.ToLower(mode) {
	case "i":
		return fmt.Sprintf("<a href=\"/search?s=%v&f=glow2&i=yes&t=In+ULAPPH\" target=\"searchi-%v\">Internal Search</a><br>", keyword, keyword)
	case "e":
		return fmt.Sprintf("<a href=\"/search?s=%v&f=glow2&i=yes&t=All+ULAPPH+Sites\" target=\"searche-%v\">Search All ULAPPH</a><br>", keyword, keyword)
	}
	return "Sorry, we can't perform the search!"
}*/

//D0065
/*func nlpQuote(w http.ResponseWriter, r *http.Request, uid string, nr *ulapphBotNlpRes) (string) {
	_, RAN_MSG, _ := getMOTD(w, r, uid, "")
	if RAN_MSG == "" {
		RAN_MSG = "Sorry, no quote found"
	}
	return fmt.Sprintf("<b>%v</a>", RAN_MSG)

}*/

//D0065
/*func nlpView(w http.ResponseWriter, r *http.Request, nr *ulapphBotNlpRes) (string) {
	//c := appengine.NewContext(r)
	//log.Printf("nlpView: %v", nr)
	switch strings.ToLower(nr.ContentType) {
	case "slide":
		return fmt.Sprintf("<a href=\"/search?f=TDSSLIDE&q=%v\" target=\"TDSSLIDE-%v\">View Slide</a><br>", nr.DocID, nr.DocID)
	case "article":
		return fmt.Sprintf("<a href=\"/search?f=TDSARTL&q=%v\" target=\"TDSARTL-%v\">View Article</a><br>", nr.DocID, nr.DocID)
	case "media":
		return fmt.Sprintf("<a href=\"/search?f=TDSMEDIA&q=%v\" target=\"TDSMEDIA-%v\">View Media</a><br>", nr.DocID, nr.DocID)
	}
	return "Sorry, we can't view the content!"
}*/
//D0065
/*func nlpUpdate(w http.ResponseWriter, r *http.Request, nr *ulapphBotNlpRes) (string) {
	//c := appengine.NewContext(r)
	//log.Printf("nlpView: %v", nr)
	switch (nr.ContentType) {
	case "slide":
		return fmt.Sprintf("<a href=\"/search?f=TDSSLIDE-UPD&q=%v\" target=\"TDSSLIDE-%v\">Update Slide</a><br>", nr.DocID, nr.DocID)
	case "article":
		return fmt.Sprintf("<a href=\"/search?f=TDSARTL-UPD&q=%v\" target=\"TDSARTL-%v\">Update Article</a><br>", nr.DocID, nr.DocID)
	case "media":
		return fmt.Sprintf("<a href=\"/search?f=TDSMEDIA-UPD&q=%v\" target=\"TDSMEDIA-%v\">Update Media</a><br>", nr.DocID, nr.DocID)
	}
	return "Sorry, we can't update the content!"
}*/
//D0085
func sendFacebook(w http.ResponseWriter, r *http.Request, mode, sender, recipient,  msg, img string) {
	//c := appengine.NewContext(r)
    //log.Printf("sendFacebook()")
	b := []byte("")
	switch mode {
	case "text":
		//log.Printf("mode: %v", mode)
		fbs := FbMessengerMsgSender{
			Id: sender,
		}
		fbr := FbMessengerMsgRecipient{
			Id: recipient,
		}
		fbm := FbMessengerMsgMessage{
			Mid: "",
			Seq: uint64(0),
			Text: msg,
		}
		reply := FbMessengerMessaging{
			Sender: fbs,
			Recipient: fbr,
			Timestamp: uint64(time.Now().Unix()),
			Message: fbm,
		}
		b, _ = json.Marshal(reply)
		//log.Printf("reply: %v", string(b))
	case "image":
		//log.Printf("mode: %v", mode)
		fbs := FbMessengerMsgSender{
			Id: sender,
		}
		fbr := FbMessengerMsgRecipient{
			Id: recipient,
		}
		fbp := FbMessengerMsgPayload{
			URL: img,
			IsReusable: false,
		}
		fba := FbMessengerMsgAttachment{
			Type: "image",
			Payload: fbp,
		}
		fbm := FbMessengerMsgMessageImage{
			Attachment: fba,
		}
		reply := FbMessengerMessagingImage{
			Sender: fbs,
			Recipient: fbr,
			Timestamp: uint64(time.Now().Unix()),
			Message: fbm,
		}
		b, _ = json.Marshal(reply)
		//log.Printf("reply: %v", string(b))
	}
	//client := urlfetch.Client(c)
	resp,err := http.Post(fmt.Sprintf("https://graph.facebook.com/v2.6/me/messages?access_token=%v", FACEBOOK_ACCESS_TOKEN),
		"application/json",
		bytes.NewReader(b))
	if err != nil {
		log.Panicf("ERROR: %v", err)
		panic(err)
	}
	defer resp.Body.Close()
	//log.Printf("response Status: %v", resp.Status)
	//log.Printf("response Headers: %v", resp.Header)
	//body, _ := ioutil.ReadAll(resp.Body)
	//log.Printf("response Body: %v", string(body))
}
//D0084
//D0066
//D0062
//Handles bot messaging via different integrations 
/*func ulapphBot(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//checkReferrer(w,r)
	//_ = validateAccess(w, r, "IS_VALID_USER",r.URL.String())
    _, uid := checkSession(w,r)
	//log.Printf("%v", r)
	//D0066
	//bodyBytes, _ := ioutil.ReadAll(r.Body)
	//w.Write(bodyBytes)
	//log.Printf("%v", string(bodyBytes))
	//data := map[string]interface{}{}
	//dec := json.NewDecoder(bytes.NewReader(bodyBytes))
	//dec.Decode(&data)
	//jq := jsonq.NewQuery(data)

	//get func
	//bFunc, err := jq.String("queryResult","parameters","func")
	//log.Printf("err: %v", err)
	//bFunc = strings.TrimSpace(bFunc)
	//D0066
	bFunc := r.FormValue("bFunc") 
	//log.Printf("bFunc: %v", bFunc)
	switch bFunc {
		//D0112
		case "session":
			if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
				lref := fmt.Sprintf("/login?continue=%v", "/bot?bFunc=session")
				w.Header().Set("Location", lref)
				w.WriteHeader(http.StatusFound)
			} else {
				uidSPL := strings.Split(r.Header.Get("X-Goog-Authenticated-User-Email"), ":")
				uid := uidSPL[1]
				thisSession := fmt.Sprintf("%v-session-P%v",uid,randNum(1, 100))
				lref := fmt.Sprintf("https://www.ulapph.com/chat-bubble/ulapphbot.html?UID=%v&uid=%v", thisSession, thisSession)
				w.Header().Set("Location", lref)
				w.WriteHeader(http.StatusFound)
			}
			return
		case "bchat":
		uwm := r.FormValue("u")
		//log.Printf("uwm: %v", uwm) 
		//D0066
		botsource := ""
		//docID := 0
		//SID := ""
		if uwm == "" {
			botsource = r.FormValue("SID")
		} else {
			botsource = getBotSource(w,r,uid,uwm)
		}
		if botsource != "" {
			//D0066
			//redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&MEDIA_ID=%v&SID=TDSMEDIA-%v", docID, docID)
			//http.Redirect(w, r, redURL, http.StatusFound)
			//get bot script
			BLOB_KEY := contentCheckSid(w,r,botsource)
			blobChan := make(chan string)
			go getBlobTextChan(w, r,blobChan, BLOB_KEY)
			thisCont := <- blobChan

			g := TEMPSTRUCT {
				STR_FILLER1: uid,
			}
			if err := htmlBotHdr.Execute(w, &g); err != nil {
			  panic(err)
			}

			fmt.Fprintf(w, "%v", thisCont)
			if err := htmlBotFtr.Execute(w, ""); err != nil {
			  panic(err)
			}
		} else {
			fmt.Fprintf(w, "No custom bot source has been set for UWM%v. Please check documentation on how to set the bot source. You may <a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0\">Create Initial Text File</a>. You may also proceed with the <a href=\"/chat-bubble/ulapphbot.html?u=%v\">default bot</a>.", r.FormValue("u"), r.FormValue("u"))
		}
		return
		//D0069
		case "school":
			sFunc := r.FormValue("sFunc")
			sLevel := r.FormValue("sLevel")
			//sMaster is the school/offering
			mSID := r.FormValue("sMaster")
			resp := ""
			switch sFunc {
				case "enroll":
					//log.Printf("enroll...")
					resp = educEnroll(w,r,mSID,uid,sLevel)
				case "enroll-check":
					//log.Printf("enroll-check...")
					resp = checkEnroll(w,r,mSID,uid)
				case "enroll-cancel":
					//log.Printf("enroll-cancel...")
					resp = cancelEnroll(w,r,mSID,uid,sLevel)
				case "score-update":
					//log.Printf("score-update...")
					resp = updateScores(w,r,mSID,uid)
				case "student":
					//resp = fmt.Sprintf("student: level %v", sLevel) 
					resp = getSchoolMasterRecord(w,r,mSID)
				case "course":
					//resp = fmt.Sprintf("course: level %v", sLevel) 
					BLOB_KEY := contentCheckSid(w,r,mSID)
					//log.Printf("BLOB_KEY: %v", BLOB_KEY)
					blobByte := getBlobByte(w, r, BLOB_KEY) 
					msyl := []MasterSyllabus{}
					err := json.Unmarshal(blobByte, &msyl)
					//log.Printf("ERROR: %v", err)
					if err != nil {
						panic(err)
					}
					data,_ := json.MarshalIndent(msyl, "", "  ")
					if data != nil {
						resp = fmt.Sprintf("%v", string(data))
					}

			}
			w.WriteHeader(200)
			w.Write([]byte(resp))
			return
		//D0085
		case "facebook":
			//log.Printf("facebook endpoint...")
			//log.Printf("r: %v", r)
			//bodyBytes, _ := ioutil.ReadAll(r.Body)
			//log.Printf("bodyBytes: %v", string(bodyBytes))
			//attempt verify token
			if r.Method == "GET" {
				if r.FormValue("hub.verify_token") == FACEBOOK_VERIFY_TOKEN {
					//log.Printf("Verifying FB token...OK")
					fmt.Fprintln(w, r.FormValue("hub.challenge"))
					return
				} else {
					log.Panicf("Verifying FB token...FAILED")
					fmt.Fprintln(w, "Incorrect verify token.")
				}
				return
			} else if r.Method == "POST" {
				defer r.Body.Close()
				input := new(FbMessengerInput)
				if err := json.NewDecoder(r.Body).Decode(input); err == nil {
					//log.Printf("Sender ID : %v", input.Entry[0].Messaging[0].Sender.Id)
					//log.Printf("Message : %v", input.Entry[0].Messaging[0].Message.Text)
					inpStr := input.Entry[0].Messaging[0].Message.Text
					//echo test mode
					reply := input.Entry[0].Messaging[0]
					//reply.Sender, reply.Recipient = reply.Recipient, reply.Sender
					rSender := reply.Recipient.Id
					rRecipient := reply.Sender.Id
					if input.Entry[0].Messaging[0].Message.Text == "echo" {
						//log.Printf("reply: %v", reply)
						//log.Printf("reply.Sender: %v", reply.Sender)
						//log.Printf("reply.Recipient: %v", reply.Recipient)
						msg := ""
						sID := fmt.Sprintf("%v", input.Entry[0].Messaging[0].Sender.Id)
						if sID == "2161009354004362" {
							//developMessegeCounter++
							//reply.Message.Text = "(DEV)" + input.Entry[0].Messaging[0].Message.Text
							msg = "(DEV)" + input.Entry[0].Messaging[0].Message.Text
							//log.Printf("reply.Message.Text: %v", reply.Message.Text)
						} else {
							//reply.Message.Text = input.Entry[0].Messaging[0].Message.Text
							msg = input.Entry[0].Messaging[0].Message.Text
							//log.Printf("reply.Message.Text: %v", reply.Message.Text)
						}
						//send to facebook
						sendFacebook(w,r,"text",rSender,rRecipient,msg,"")
					} else {
						//pass to chatbot
						FL_DEBUG := "N"
						//uid := input.Entry[0].Messaging[0].Sender.Id
						uid := rSender
						//uid_rx := input.Entry[0].Messaging[0].Recipient.Id
						uid_rx := rRecipient
						deviceID := uid
						BOT_NAME := "ULAPPH Routing Bot"
						KNOWLEDGE_BASE := "TDSMEDIA-24"
						CHANNEL := "fb"
						botUrl := fmt.Sprintf("%v/nlp?nlpFunc=nlpProse&p=%v&SID=%v&DEBUG=%v&UID=%v&BN=%v&DID=%v&CH=%v&UIDR=%v", getSchemeUrl(w,r), inpStr, KNOWLEDGE_BASE, FL_DEBUG, uid, BOT_NAME, deviceID, CHANNEL, uid_rx)
						//log.Printf("Bot Call: %v", botUrl)
                        //laterRoutingBot(c, rSender,rRecipient,botUrl)
                        time.AfterFunc(5*time.Second, func() { 
                            laterRoutingBot(c, rSender,rRecipient,botUrl) 
                        })

					}
					return
				}

			}
			return
	}
}*/

//D0069
/*func educEnroll(w http.ResponseWriter, r *http.Request, mSID, uid, level string) (string) {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //check if there is student record
    //log.Printf("educEnroll")
    //D0086
    datastoreClient := createClientDS()
	resp := ""
	EDUC_BLOB := ""
	FL_EN := false
	var g TDSCNFG
	//thisKey := fmt.Sprintf("STUDENT_REC_%v", uid)
	thisKey := fmt.Sprintf("STUDENT_REC_%v_%v", mSID, uid)
	//log.Printf("thisKey: %v", thisKey)
	//--check student record
    key := datastore.NameKey("TDSCNFG", thisKey, nil)
	if err := datastoreClient.Get(c, key, &g); err != nil {
		//panic(err)
		//return
    }
    //log.Printf("datastoreClient.Get()  [44645]")
	if g.TXT_VAL != "" {
		//log.Printf("g.TXT_VAL empty")
		EDUC_BLOB = g.TXT_VAL 
		FL_EN = true
	}
	if FL_EN == false {
		//log.Printf("Insert TDSCNFG")
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: thisKey,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: "",
				CFG_DESC: "Set via code",
		}
		key := datastore.NameKey("TDSCNFG", thisKey, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
				//return
        }
        //log.Printf("datastoreClient.Put()  [44667]")
	}
	educData := []byte("")
	if EDUC_BLOB == "" {
		//log.Printf("EDUC_BLOB = empty")
		//construct from initial data
		dks := StudentRecord{}
		dks.Student = uid
		dks.School = mSID
		ld := LevelsData{}
		ld.Level = level
		ld.Status = "ENROLLED"
		timestamp := getTimestamp()
		ld.EnrollDate = timestamp
		ld.SyllabusURL, ld.ExamURL = getSyllabus(w,r,mSID,level)
		dks.Levels = append(dks.Levels, ld)

		educData,_ = json.Marshal(dks)
		//log.Printf("educDate: %v", educData)
		saveStudentRecord(w,r,uid,educData,mSID)
		resp = "saved new student record"
		//add in master school record
		educSchoolMasterRecord(w,r,uid,"",mSID)
	} else {
		//read from blob
		blobByte := getBlobByte(w, r, EDUC_BLOB)
		//log.Printf("config: %v", string(blobByte ))
		dks := StudentRecord{}
		err := json.Unmarshal(blobByte, &dks)
		if err != nil {
			panic(err)
		}
		//make sure it doesn't exist
		for i:=0;i<len(dks.Levels);i++ {
			if dks.Levels[i].Level == level {
				resp = "update failed; record exists"
				return resp
				//break
			}
		}
		ld := LevelsData{}
		ld.Level = level
		ld.Status = "ENROLLED"
		timestamp := getTimestamp()
		ld.EnrollDate = timestamp
		ld.SyllabusURL, ld.ExamURL = getSyllabus(w,r,mSID,level)
		dks.Levels = append(dks.Levels, ld)

		educData,_ = json.Marshal(dks)
		//log.Printf("educDate: %v", educData)
		saveStudentRecord(w,r,uid,educData,mSID)
		resp = "updated existing student record"
	}
	//log.Printf("resp: %v", resp)
	return resp

}*/
//D0069
/*func getSchoolMasterRecord(w http.ResponseWriter, r *http.Request, mSID string) (string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //check if student is in the school master record 
	//log.Printf("getSchoolMasterRecord")
	resp := ""
	EDUC_BLOB := ""
	var g TDSCNFG
	thisKey := fmt.Sprintf("SCHOOL_REC_%v", mSID)
	//log.Printf("thisKey: %v", thisKey)
	//--check school record
    key := datastore.NameKey("TDSCNFG", thisKey, nil)
    //D0086
    datastoreClient := createClientDS()
	if err := datastoreClient.Get(c, key, &g); err != nil {
		//panic(err)
		//return
    }
    //log.Printf("datastoreClient.Get()  [44744]")
	if g.TXT_VAL != "" {
		//log.Printf("g.TXT_VAL empty")
		EDUC_BLOB = g.TXT_VAL 
	}
	if EDUC_BLOB == "" {
		resp = "No master school record yet. Someone has to enroll first."
	} else {
		//read from blob
		blobByte := getBlobByte(w, r, EDUC_BLOB)
		dkm := SchoolRecord{}
		err := json.Unmarshal(blobByte, &dkm)
		if err != nil {
			panic(err)
		}
		data,_ := json.MarshalIndent(dkm.Students, "", "  ")
		if data != nil {
			resp = fmt.Sprintf("%v", string(data))
		}
	}
	//log.Printf("resp: %v", resp)
	return resp
}*/

//D0069
/*func educSchoolMasterRecord(w http.ResponseWriter, r *http.Request, uid, score, mSID string) (string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //check if student is in the school master record 
	//log.Printf("educSchoolMasterRecord")
	//log.Printf("score: %v", score)
	FL_AVE_MODE := false
	if score != "" {
		FL_AVE_MODE = true
	}
	resp := ""
	EDUC_BLOB := ""
	FL_EN := false
	var g TDSCNFG
	thisKey := fmt.Sprintf("SCHOOL_REC_%v", mSID)
	//log.Printf("thisKey: %v", thisKey)
	//--check school record
    key := datastore.NameKey("TDSCNFG", thisKey, nil)
    //D0086
    datastoreClient := createClientDS()
	if err := datastoreClient.Get(c, key, &g); err != nil {
		//panic(err)
		//return
    }
    //log.Printf("datastoreClient.Get()  [44794]")
	if g.TXT_VAL != "" {
		//log.Printf("g.TXT_VAL empty")
		EDUC_BLOB = g.TXT_VAL 
		FL_EN = true
	}
	if FL_EN == false {
		//log.Printf("Insert TDSCNFG")
		g := TDSCNFG{
				SYS_VER: 1,
				USER: ADMMAIL,
				CFG_ID: thisKey,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: "",
				CFG_DESC: "Set via code",
		}
		key := datastore.NameKey("TDSCNFG", thisKey, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
				//return
        }
        //log.Printf("datastoreClient.Put()  [44816]")
	}
	educData := []byte("")
	if EDUC_BLOB == "" {
		//log.Printf("EDUC_BLOB = empty")
		//construct from initial data
		dkm := SchoolRecord{}
		dks := StudentRecord{}
		dks.Student = uid
		dks.School = mSID
		dks.OverallGrade = ""
		dks.Levels = nil
		dkm.Students = append(dkm.Students, dks)

		educData,_ = json.Marshal(dkm)
		//log.Printf("educDate: %v", educData)
		saveMasterRecord(w,r,uid,educData,mSID)
		resp = "saved new school record"
	} else {
		//read from blob
		blobByte := getBlobByte(w, r, EDUC_BLOB)
		//log.Printf("config: %v", string(blobByte ))
		dkm := SchoolRecord{}
		err := json.Unmarshal(blobByte, &dkm)
		if err != nil {
			panic(err)
		}
		//make sure it doesn't exist
		for i:=0;i<len(dkm.Students);i++ {
			if dkm.Students[i].Student == uid {
				if FL_AVE_MODE == true {
					//score update needed
					dkm.Students[i].OverallGrade = score
				} else {
					resp = "update failed; record exists"
					return resp
					//break
				}
			}
		}
		if FL_AVE_MODE == false {
			dks := StudentRecord{}
			dks.Student = uid
			dks.School = mSID
			dks.OverallGrade = ""
			dks.Levels = nil
			dkm.Students = append(dkm.Students, dks)
		}
		educData,_ = json.Marshal(dkm)
		//log.Printf("educDate: %v", educData)
		saveMasterRecord(w,r,uid,educData,mSID)
		resp = "updated existing master record"
	}
	//log.Printf("resp: %v", resp)
	return resp
}*/

//D0069
/*func getSyllabus(w http.ResponseWriter, r *http.Request, mSID, level string) (string, string) {
	//c := appengine.NewContext(r)
	//log.Printf("getSyllabus")
	//log.Printf("mSID: %v", mSID)

	BLOB_KEY := contentCheckSid(w,r,mSID)
	//log.Printf("BLOB_KEY: %v", BLOB_KEY)
	blobByte := getBlobByte(w, r, BLOB_KEY)	
	msyl := []MasterSyllabus{}
	err := json.Unmarshal(blobByte, &msyl)
	//log.Printf("ERROR: %v", err)
	if err != nil {
		panic(err)
	}
	//get level syllabus and exam
	for i:=0;i<len(msyl);i++ {
		if msyl[i].Level == level {
			 return msyl[i].LessonURL, msyl[i].ExamURL
			 //break
		}
	}
	return "", ""

}*/

//D0069
/*func checkEnroll(w http.ResponseWriter, r *http.Request, mSID, uid string) (string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //check if there is student record
	//log.Printf("checkEnroll")
	resp := ""
	EDUC_BLOB := ""
	FL_EN := false
	var g TDSCNFG
	thisKey := fmt.Sprintf("STUDENT_REC_%v_%v", mSID, uid)
	//log.Printf("thisKey: %v", thisKey)
    key := datastore.NameKey("TDSCNFG", thisKey, nil)
    //D0086
    datastoreClient := createClientDS()
	if err := datastoreClient.Get(c, key, &g); err != nil {
		//panic(err)
		//return
    }
    //log.Printf("datastoreClient.Get()  [44919]")
	if g.TXT_VAL != "" {
		//log.Printf("g.TXT_VAL empty")
		EDUC_BLOB = g.TXT_VAL 
		FL_EN = true
	}
	if FL_EN == false {
		//log.Printf("Insert TDSCNFG")
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: thisKey,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: "",
				CFG_DESC: "Set via code",
		}
		key := datastore.NameKey("TDSCNFG", thisKey, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
				//return
        }
        //log.Printf("datastoreClient.Put()  [44941]")
	}
	if EDUC_BLOB == "" {
		resp = "not enrolled yet"
	} else {
		//read from blob
		//resp = "updated existing student record"
		blobByte := getBlobByte(w, r, EDUC_BLOB)
		//log.Printf("config: %v", string(blobByte ))
		sturec := StudentRecord{}
		err := json.Unmarshal(blobByte, &sturec)
		if err != nil {
			panic(err)
		}
		data,_ := json.MarshalIndent(sturec.Levels, "", "  ")
		if data != nil {
			resp = fmt.Sprintf("%v", string(data))
		} else {
			resp = "no enrollments"
		}

	}
	//log.Printf("resp: %v", resp)
	return resp
}*/

//D0069
/*func cancelEnroll(w http.ResponseWriter, r *http.Request, mSID, uid, sLevel string) (string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //check if there is student record
	//log.Printf("cancelEnroll")
	resp := ""
	EDUC_BLOB := ""
	var g TDSCNFG
	thisKey := fmt.Sprintf("STUDENT_REC_%v_%v", mSID, uid)
	//log.Printf("thisKey: %v", thisKey)
    key := datastore.NameKey("TDSCNFG", thisKey, nil)
    //D0086
    datastoreClient := createClientDS()
	if err := datastoreClient.Get(c, key, &g); err != nil {
		//panic(err)
		//return
    }
    //log.Printf("datastoreClient.Get()  [44986]")
	if g.TXT_VAL != "" {
		//log.Printf("g.TXT_VAL empty")
		EDUC_BLOB = g.TXT_VAL
	}
	if EDUC_BLOB == "" {
		resp = "not enrolled yet"
	} else {
		//read from blob
		//resp = "updated existing student record"
		blobByte := getBlobByte(w, r, EDUC_BLOB)
		//log.Printf("config: %v", string(blobByte ))
		sturec := StudentRecord{}
		err := json.Unmarshal(blobByte, &sturec)
		if err != nil {
			panic(err)
		}
		//store to temp
		ld := []LevelsData{}
		for i:=0;i<len(sturec.Levels);i++ {
			if sturec.Levels[i].Level != sLevel {
				ld = append(ld, sturec.Levels[i])
			}
		}
		sturec.Levels = ld
		data,_ := json.MarshalIndent(sturec.Levels, "", "  ")
		resp = fmt.Sprintf("%v", string(data))
		//save it
		educData,_ := json.Marshal(sturec)
		saveStudentRecord(w,r,uid,educData,mSID)

	}
	//log.Printf("resp: %v", resp)
	return resp
}*/
//D0069
/*func updateScores(w http.ResponseWriter, r *http.Request, mSID, uid string) (string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //log.Printf("updateScores")
	resp := ""
	EDUC_BLOB := ""
	var g TDSCNFG
	thisKey := fmt.Sprintf("STUDENT_REC_%v_%v", mSID, uid)
	//log.Printf("thisKey: %v", thisKey)
    key := datastore.NameKey("TDSCNFG", thisKey, nil)
    //D0086
    datastoreClient := createClientDS()
	if err := datastoreClient.Get(c, key, &g); err != nil {
		//panic(err)
		//return
    }
    //log.Printf("datastoreClient.Get()  [45039]")
	if g.TXT_VAL != "" {
		//log.Printf("g.TXT_VAL empty")
		EDUC_BLOB = g.TXT_VAL
	}
	if EDUC_BLOB == "" {
		resp = "not enrolled yet"
	} else {
		//read from blob
		//resp = "updated existing student record"
		blobByte := getBlobByte(w, r, EDUC_BLOB)
		//log.Printf("config: %v", string(blobByte ))
		sturec := StudentRecord{}
		err := json.Unmarshal(blobByte, &sturec)
		if err != nil {
			panic(err)
		}
		//store to temp
		xs:=[]float64{}
		for i:=0;i<len(sturec.Levels);i++ {
			//log.Printf("examURL: %v", sturec.Levels[i].ExamURL)
			if sturec.Levels[i].LevelGrade == "" || sturec.Levels[i].LevelGrade == "0" && sturec.Levels[i].ExamURL != "" {
				//get SID from examURL
				SID, _ := getRefDoc(w,r,sturec.Levels[i].ExamURL)
				//log.Printf("SID: %v", SID)
				score, timestamp, err := getScoreFromComments(w,r,SID,uid)
				//log.Printf("score: %v", score)
				if err != nil {
					fmt.Fprintf(w,"Error extracting score from comments: %v", err)
				} else {
					sturec.Levels[i].LevelGrade = fmt.Sprintf("%v", score)
					sturec.Levels[i].CompletionDate = timestamp 
					xs = append(xs, score)
				}
			} else {
				fgrade, err := strconv.ParseFloat(sturec.Levels[i].LevelGrade, 64)
				if err == nil {
					xs = append(xs, fgrade)
				}
			}
		}
		data,_ := json.MarshalIndent(sturec.Levels, "", "  ")
		resp = fmt.Sprintf("%v", string(data))
		//save it
		educData,_ := json.Marshal(sturec)
		saveStudentRecord(w,r,uid,educData,mSID)
		//get average 
		//log.Printf("xs: %v", xs)
		aveGrade := fmt.Sprintf("%.2f", average(xs))
		//log.Printf("aveGrade: %v", aveGrade)
		//update school record
		educSchoolMasterRecord(w,r,uid,aveGrade,mSID)

	}
	//log.Printf("resp: %v", resp)
	return resp
}*/
//creates a new blob for conversation logs
/*func saveConversations(w http.ResponseWriter, r *http.Request, cdata, uid, bot, did string) {
	//c := appengine.NewContext(r)
	//log.Printf("saveConversations")
	csn2 := getUpUrlString(w,r,"/upload-media")
	u := csn2
	var m bytes.Buffer
	fw := multipart.NewWriter(&m)
	file, err := fw.CreateFormFile("file", "CONVO")
	if err != nil {
		return
	}
	if _, err = file.Write([]byte(cdata)); err != nil {
		return
	}
	_ = fw.WriteField("FUNC_CODE", "CONVO")
	_ = fw.WriteField("UID", uid)
	_ = fw.WriteField("BOT", bot)
	_ = fw.WriteField("DID", did)
	_ = fw.WriteField("API_KEY", CMD_GEN_KEY)
	fw.Close()
	req, err := http.NewRequest("POST", u, &m)
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", fw.FormDataContentType())
    //client := urlfetch.Client(c)
    client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		return
	}
	if res.StatusCode != http.StatusCreated {
		return
	}
	//log.Printf("saved locations")
}*/
//D0082
//creates a new blob for broadcast locations
func saveLocations(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    mapData := val["MDATA"].(string)
	//mapData := r.FormValue("MDATA")
	//upload to blobstore
	//log.Printf("saveLocations")
	//log.Printf("upload to blobstore")
	csn2 := getUpUrlString(w,r,"/upload-media")
	u := csn2
	var m bytes.Buffer
	fw := multipart.NewWriter(&m)
	file, err := fw.CreateFormFile("file", "MAP")
	if err != nil {
		return
	}
	if _, err = file.Write([]byte(mapData)); err != nil {
		return
	}
	_ = fw.WriteField("FUNC_CODE", "MAP")
	//D0068
	_ = fw.WriteField("API_KEY", CMD_GEN_KEY)
	fw.Close()
	req, err := http.NewRequest("POST", u, &m)
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", fw.FormDataContentType())
    //client := urlfetch.Client(c)
    client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		return
	}
	if res.StatusCode != http.StatusCreated {
		return
	}
	//log.Printf("saved locations")
}
//D0069
//creates a new blob
/*func saveStudentRecord(w http.ResponseWriter, r *http.Request, uid string, educData []byte, mSID string) {
	//c := appengine.NewContext(r)
	//upload to blobstore
	//log.Printf("saveStudentRecord")
	//log.Printf("upload to blobstore")
	csn2 := getUpUrlString(w,r,"/upload-media")
	u := csn2
	var m bytes.Buffer
	fw := multipart.NewWriter(&m)
	file, err := fw.CreateFormFile("file", "EDUC")
	if err != nil {
		return
	}
	if _, err = file.Write(educData); err != nil {
		return
	}
	_ = fw.WriteField("FUNC_CODE", "EDUC")
	//D0068
	_ = fw.WriteField("API_KEY", CMD_GEN_KEY)
	_ = fw.WriteField("UID", uid)
	_ = fw.WriteField("MSID", mSID)
	fw.Close()
	req, err := http.NewRequest("POST", u, &m)
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", fw.FormDataContentType())
    //client := urlfetch.Client(c)
    client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		return
	}
	if res.StatusCode != http.StatusCreated {
		return
	}

}*/

//D0069
//creates a new blob
/*func saveMasterRecord(w http.ResponseWriter, r *http.Request, uid string, educData []byte, mSID string) {
	//c := appengine.NewContext(r)
	//upload to blobstore
	//log.Printf("saveMasterRecord")
	//log.Printf("upload to blobstore")
	csn2 := getUpUrlString(w,r,"/upload-media")
	u := csn2
	var m bytes.Buffer
	fw := multipart.NewWriter(&m)
	file, err := fw.CreateFormFile("file", "EDUC2")
	if err != nil {
		return
	}
	if _, err = file.Write(educData); err != nil {
		return
	}
	_ = fw.WriteField("FUNC_CODE", "EDUC2")
	//D0068
	_ = fw.WriteField("API_KEY", CMD_GEN_KEY)
	_ = fw.WriteField("UID", uid)
	_ = fw.WriteField("MSID", mSID)
	fw.Close()
	req, err := http.NewRequest("POST", u, &m)
	if err != nil {
		return
	}
	req.Header.Set("Content-Type", fw.FormDataContentType())
    //client := urlfetch.Client(c)
    client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		return
	}
	if res.StatusCode != http.StatusCreated {
		return
	}
}*/

//D0069
func average(xs[]float64)float64 {
	total:=0.0
	for _,v:=range xs {
		total +=v
	}
	return total/float64(len(xs))
}

//D0028
//handles notifications specially for the things api
//it can trigger alarm on the user desktop
func ulapphNotifs(w http.ResponseWriter, r *http.Request) {
	N_FUNC := r.FormValue("N_FUNC")
	
	switch {
		case N_FUNC == "SEND_BATTERY_STATUS":
			N_ID := r.FormValue("N_ID")
			N_MSG := r.FormValue("N_MSG")
			if N_ID == "undefined" || N_ID == "" || N_MSG == "undefined" || N_MSG == "" {
				//dont send message
			} else {	
				data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_STRUWM_BATTERY_BCAST@888@%v@888@%v", N_ID, N_MSG)
				//log.Printf("%v", data)
				sendChannelMessage(w,r,"cctv",data)
			}
			return
		//D0109
		case N_FUNC == "motd":
			ulapphDebug(w,r, "info", fmt.Sprintf("ulapphNotifs %v", "motd"))
			resMsg := ""
			if SYS_APPENGINE_STANDARD == true {
				resMsg = getGcsMotd(w,r,"motd")
			} else {
				resMsg = getLocalMotd(w,r,"motd")
			}
			if len(strings.TrimSpace(resMsg)) <=0 {
				if SYS_APPENGINE_STANDARD == true {
					resMsg = getGcsMotd(w,r,"motd")
				} else {
					resMsg = getLocalMotd(w,r,"motd")
				}
			}
			if strings.TrimSpace(resMsg) != "" && len(strings.TrimSpace(resMsg)) > 10 {
				resMsgB64 := base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("[TIPS] %v", resMsg)))
				//resMsg = html.EscapeString(fmt.Sprintf("[TIPS]%v", resMsg))
				//redURL := fmt.Sprintf("/editor?EDIT_FUNC=TEXT-CSS&CSS-TYPE=.3d&CSS-ALIGN=center&EDIT_MODE=NEW-CSS&ACE=Y&TEXT=%v", resMsg)
				redURL := fmt.Sprintf("/editor?EDIT_FUNC=TEXT-CSS&CSS-TYPE=.3d&CSS-ALIGN=center&EDIT_MODE=NEW-CSS&ACE=Y&TEXT=%v&SPEAK=Y", resMsgB64)
				http.Redirect(w, r, redURL, http.StatusFound)
			}
			return
		//D0109
		case N_FUNC == "story":
			ulapphDebug(w,r, "info", fmt.Sprintf("ulapphNotifs %v", "story"))
			resMsg := ""
			if SYS_APPENGINE_STANDARD == true {
				resMsg = getGcsMotd(w,r,"story")
			} else {
				resMsg = getLocalMotd(w,r,"story")
			}
			if len(strings.TrimSpace(resMsg)) <=0 {
				if SYS_APPENGINE_STANDARD == true {
					resMsg = getGcsMotd(w,r,"story")
				} else {
					resMsg = getLocalMotd(w,r,"story")
				}
			}
			if strings.TrimSpace(resMsg) != "" && len(strings.TrimSpace(resMsg)) > 10 {
				//resMsg = html.EscapeString(fmt.Sprintf("[STORY]%v", resMsg))
				//redURL := fmt.Sprintf("/editor?EDIT_FUNC=TEXT-CSS&CSS-TYPE=.3d&CSS-ALIGN=center&EDIT_MODE=NEW-CSS&TEXT=%v", resMsg)
				resMsgB64 := base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("[STORY] %v", resMsg)))
				redURL := fmt.Sprintf("/editor?EDIT_FUNC=TEXT-CSS&CSS-TYPE=.3d&CSS-ALIGN=center&EDIT_MODE=NEW-CSS&ACE=Y&TEXT=%v&SPEAK=Y", resMsgB64)
				http.Redirect(w, r, redURL, http.StatusFound)
			}
			return
			
	}
	
	checkReferrer(w,r)
	
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	userName := r.FormValue("userName")
	msg := r.FormValue("message")
	API_KEY_R := r.Header["Authorization"]
	API_KEY := ""
	if len(API_KEY_R) <= 0 {
		API_KEY = r.FormValue("API_KEY")
	} else {
		API_KEY = API_KEY_R[0]
	}
	
	if THINGS_API_KEY != API_KEY {
		thingsError(w,r,fmt.Sprintf("ERROR: Unauthorized operation"))
		return
	}
	
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	
	switch N_FUNC {
		
		case "ALARM":
			if userName == "" || msg == "" {
				thingsError(w,r,fmt.Sprintf("ERROR: Blank inputs"))
				return				
			}
			putStrToMemcacheWithExp(w,r,fmt.Sprintf("ALARM_EQ_MSG_%v", userName),msg,30)
			w.Write([]byte("ok"))
	}
	
}
 
//D0028
//the internet of things api of ulapph cloud desktop
//it store payload, retrieve payload etc
func ulapphThings(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	T_FUNC := r.FormValue("T_FUNC")
	thingName := r.FormValue("thingName")
	API_KEY_R := r.Header["Authorization"]
	API_KEY := ""
	if len(API_KEY_R) <= 0 {
		API_KEY = r.FormValue("API_KEY")
	} else {
		API_KEY = API_KEY_R[0]
	}		
 
	payload, _ := ioutil.ReadAll(r.Body)
	
	if THINGS_API_KEY != API_KEY {
		thingsError(w,r,fmt.Sprintf("ERROR: Unauthorized operation"))
		return
	}
	
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	
	switch T_FUNC {
		
		case "LIST":
			q := datastore.NewQuery("TDSTHINGS")
			//log.Panicf("[S0351]")
			CURR_COUNT, _ := datastoreClient.Count(c,q)
			mythings := make([]TDSTHINGS, 0, CURR_COUNT)
			if _, err := datastoreClient.GetAll(c,q, &mythings); err != nil {
				thingsError(w,r,fmt.Sprintf("ERROR: %v", err))
				return
            }
            //log.Printf("datastoreClient.Get()  [45346]")
			var pl []TDSTHINGS
			if CURR_COUNT > 0 {
				for _, p := range mythings{
					pl = append(pl, p)
				}
				data,_ := json.MarshalIndent(pl, "", "  ")
				w.Write(data)
			} else {
				w.Write([]byte("0 things found!"))
			}
			return
 
		case "GET_PAYLOAD_ITEM":
			jsonQuery0 := r.FormValue("jsonQuery0")
			jsonQuery1 := r.FormValue("jsonQuery1")
			jsonQuery2 := r.FormValue("jsonQuery2")
			jsonQuery3 := r.FormValue("jsonQuery3")
			jsonQuery4 := r.FormValue("jsonQuery4")
			dataFormat := r.FormValue("dataFormat")
			//get stored payload
			recID := fmt.Sprintf("%v-dtc", thingName)
			q := datastore.NewQuery("TDSTHINGS").Filter("REC_ID =", recID)
			//log.Panicf("[S0352]")
			CURR_COUNT, _ := datastoreClient.Count(c,q)
			mythings := make([]TDSTHINGS, 0, CURR_COUNT)
			if _, err := datastoreClient.GetAll(c,q, &mythings); err != nil {
				thingsError(w,r,fmt.Sprintf("ERROR: %v", err))
				return
            }
            //log.Printf("datastoreClient.Get()  [45376]")
			FL_ERR := false
			msg1 := ""
			msg2 := ""
			tstmp := ""
			if CURR_COUNT > 0 {
				thisVal := ""
				for _, p := range mythings{	
				
					i := strings.Index(p.PAYLOAD, "TDSMEDIA-")
					jsonstring := ""
					if i != -1 {
						//get from SID
						BLOB_KEY := contentCheckSid(w,r,p.PAYLOAD)
						//thisCont := getBlobText(w, r, BLOB_KEY)
						blobChan := make(chan string)
						go getBlobTextChan(w, r,blobChan, BLOB_KEY)
						thisCont := <- blobChan
						jsonstring		= thisCont
					} else {
						jsonstring		= p.PAYLOAD
					}
					tstmp = p.TIMESTAMP
					data := map[string]interface{}{}
					dec := json.NewDecoder(strings.NewReader(jsonstring))
					dec.Decode(&data)
					jq := jsonq.NewQuery(data)
					switch dataFormat {
						case "Bool":
							jqVal, err := jq.Bool(jsonQuery0)
							if jsonQuery0 != "" {
								jqVal, err = jq.Bool(jsonQuery0)
							}
							if jsonQuery1 != "" {
								jqVal, err = jq.Bool(jsonQuery0,jsonQuery1)
							}
							if jsonQuery2 != "" {
								jqVal, err = jq.Bool(jsonQuery0,jsonQuery1,jsonQuery2)
							}
							if jsonQuery3 != "" {
								jqVal, err = jq.Bool(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3)
							}
							if jsonQuery4 != "" {
								jqVal, err = jq.Bool(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3,jsonQuery4)
							}
							if err != nil {
								FL_ERR = true
								msg1 = fmt.Sprintf("ERROR: %v\n", err)
								msg2 = fmt.Sprintf("JSON: %v\n", jsonstring)
							}
							thisVal = fmt.Sprintf("%v", jqVal)
						case "Float":
							jqVal, err := jq.Float(jsonQuery0)
							if jsonQuery0 != "" {
								jqVal, err = jq.Float(jsonQuery0)
							}
							if jsonQuery1 != "" {
								jqVal, err = jq.Float(jsonQuery0,jsonQuery1)
							}
							if jsonQuery2 != "" {
								jqVal, err = jq.Float(jsonQuery0,jsonQuery1,jsonQuery2)
							}
							if jsonQuery3 != "" {
								jqVal, err = jq.Float(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3)
							}
							if jsonQuery4 != "" {
								jqVal, err = jq.Float(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3,jsonQuery4)
							}
							if err != nil {	
								FL_ERR = true
								msg1 = fmt.Sprintf("ERROR: %v\n", err)
								msg2 = fmt.Sprintf("JSON: %v\n", jsonstring)
							}
							thisVal = fmt.Sprintf("%v", jqVal)						
						case "Int":
							jqVal, err := jq.Int(jsonQuery0)
							if jsonQuery0 != "" {
								jqVal, err = jq.Int(jsonQuery0)
							}
							if jsonQuery1 != "" {
								jqVal, err = jq.Int(jsonQuery0,jsonQuery1)
							}
							if jsonQuery2 != "" {
								jqVal, err = jq.Int(jsonQuery0,jsonQuery1,jsonQuery2)
							}
							if jsonQuery3 != "" {
								jqVal, err = jq.Int(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3)
							}
							if jsonQuery4 != "" {
								jqVal, err = jq.Int(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3,jsonQuery4)
							}
							if err != nil {
								FL_ERR = true
								msg1 = fmt.Sprintf("ERROR: %v\n", err)
								msg2 = fmt.Sprintf("JSON: %v\n", jsonstring)
							}
							thisVal = fmt.Sprintf("%v", jqVal)							
						case "String":
							jqVal, err := jq.String(jsonQuery0)
							if jsonQuery0 != "" {
								jqVal, err = jq.String(jsonQuery0)
							}
							if jsonQuery1 != "" {
								jqVal, err = jq.String(jsonQuery0,jsonQuery1)
							}
							if jsonQuery2 != "" {
								jqVal, err = jq.String(jsonQuery0,jsonQuery1,jsonQuery2)
							}
							if jsonQuery3 != "" {
								jqVal, err = jq.String(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3)
							}
							if jsonQuery4 != "" {
								jqVal, err = jq.String(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3,jsonQuery4)
							}
							if err != nil {
								FL_ERR = true
								msg1 = fmt.Sprintf("ERROR: %v\n", err)
								msg2 = fmt.Sprintf("JSON: %v\n", jsonstring)						
							}
							thisVal = fmt.Sprintf("%v", jqVal)
						case "Array":
							jqVal, err := jq.Array(jsonQuery0)
							if jsonQuery0 != "" {
								jqVal, err = jq.Array(jsonQuery0)
							}
							if jsonQuery1 != "" {
								jqVal, err = jq.Array(jsonQuery0,jsonQuery1)
							}
							if jsonQuery2 != "" {
								jqVal, err = jq.Array(jsonQuery0,jsonQuery1,jsonQuery2)
							}
							if jsonQuery3 != "" {
								jqVal, err = jq.Array(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3)
							}
							if jsonQuery4 != "" {
								jqVal, err = jq.Array(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3,jsonQuery4)
							}
							if err != nil {
								FL_ERR = true
								msg1 = fmt.Sprintf("ERROR: %v\n", err)
								msg2 = fmt.Sprintf("JSON: %v\n", jsonstring)							
							}
							thisVal = fmt.Sprintf("%v", jqVal)
						case "Object":
							jqVal, err := jq.Object(jsonQuery0)
							if jsonQuery0 != "" {
								jqVal, err = jq.Object(jsonQuery0)
							}
							if jsonQuery1 != "" {
								jqVal, err = jq.Object(jsonQuery0,jsonQuery1)
							}
							if jsonQuery2 != "" {
								jqVal, err = jq.Object(jsonQuery0,jsonQuery1,jsonQuery2)
							}
							if jsonQuery3 != "" {
								jqVal, err = jq.Object(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3)
							}
							if jsonQuery4 != "" {
								jqVal, err = jq.Object(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3,jsonQuery4)
							}
							if err != nil {
								FL_ERR = true
								msg1 = fmt.Sprintf("ERROR: %v\n", err)
								msg2 = fmt.Sprintf("JSON: %v\n", jsonstring)							
							}
							thisVal = fmt.Sprintf("%v", jqVal)
						case "Interface":
							jqVal, err := jq.Interface(jsonQuery0)
							if jsonQuery0 != "" {
								jqVal, err = jq.Interface(jsonQuery0)
							}
							if jsonQuery1 != "" {
								jqVal, err = jq.Interface(jsonQuery0,jsonQuery1)
							}
							if jsonQuery2 != "" {
								jqVal, err = jq.Interface(jsonQuery0,jsonQuery1,jsonQuery2)
							}
							if jsonQuery3 != "" {
								jqVal, err = jq.Interface(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3)
							}
							if jsonQuery4 != "" {
								jqVal, err = jq.Interface(jsonQuery0,jsonQuery1,jsonQuery2,jsonQuery3,jsonQuery4)
							}
							if err != nil {
								FL_ERR = true
								msg1 = fmt.Sprintf("ERROR: %v\n", err)
								msg2 = fmt.Sprintf("JSON: %v\n", jsonstring)
							}
							thisVal = fmt.Sprintf("%v", jqVal)
						default:
							FL_ERR = true
							msg1 = fmt.Sprintf("no value found for query \"%v, %v, %v, %v, %v\"\n", jsonQuery0, jsonQuery1, jsonQuery2, jsonQuery3, jsonQuery4)
							msg2 = fmt.Sprintf("JSON: %v\n", jsonstring)
					}
				}
				//check that payload is latest
				timeFormat := "20060102150405"
				then, _ := time.Parse(timeFormat, tstmp)
				duration := time.Since(then)
				if duration.Hours() > 1 { //1 hour
					thisVal = "DATA_NOT_UPDATED"
				}
				
				if FL_ERR == false {
					w.Write([]byte(thisVal))
					return
				} else {
					thingsError2(w,r,msg1, msg2)
					return
				}
			} else {
				w.Write([]byte("0 payload/item found!"))
			}
			return

		case "GET_PAYLOAD":
			recID := fmt.Sprintf("%v-dtc", thingName)
			showPayloadOnly := r.FormValue("showPayloadOnly")
			getLatestOnly := r.FormValue("getLatestOnly")
			q := datastore.NewQuery("TDSTHINGS").Filter("REC_ID =", recID)
			//log.Panicf("[S0353]")
			CURR_COUNT, _ := datastoreClient.Count(c,q)
			mythings := make([]TDSTHINGS, 0, CURR_COUNT)
			if _, err := datastoreClient.GetAll(c,q, &mythings); err != nil {
				thingsError(w,r,fmt.Sprintf("ERROR: %v", err))
				return
            }
            //log.Printf("datastoreClient.Get()  [45603]")
			if CURR_COUNT > 0 {
				pl := new(TDSTHINGS)
				for _, p := range mythings{
					if showPayloadOnly == "Y" || showPayloadOnly == "y" {
						if getLatestOnly == "Y" || getLatestOnly == "y" {
							//check timestamp
							timeFormat := "20060102150405"
							then, err := time.Parse(timeFormat, p.TIMESTAMP)
							if err != nil {
								panic(err)
							}
							duration := time.Since(then)
							
							if duration.Hours() < 0.5 {
								//30-minutes
								w.Write([]byte(p.PAYLOAD))
							} else {
								w.Write([]byte(""))
							}
						} else {
							w.Write([]byte(p.PAYLOAD))
						}
						return
					}
					pl.REC_ID		= p.REC_ID
					pl.THING_NAME	= p.THING_NAME
					i := strings.Index(p.PAYLOAD, "TDSMEDIA-")
					if i != -1 {
						//get from SID
						BLOB_KEY := contentCheckSid(w,r,p.PAYLOAD)
						//thisCont := getBlobText(w, r, BLOB_KEY)
						blobChan := make(chan string)
						go getBlobTextChan(w, r,blobChan, BLOB_KEY)
						thisCont := <- blobChan
						pl.PAYLOAD		= thisCont	
					} else {
						pl.PAYLOAD		= p.PAYLOAD	
					}	
							
					pl.DOC_STAT		= p.DOC_STAT			
					pl.FL_SHARED	= p.FL_SHARED		
					pl.TIMESTAMP	= p.TIMESTAMP		
				}
				data,_ := json.MarshalIndent(pl, "", "  ")
				w.Write(data)					
			} else {
				w.Write([]byte("0 payload found!"))
			}
			return
		case "NOTIFY-SEND-SMS":
			//log.Printf("NOTIFY-SEND-SMS")
			SMS_NUMBER := r.FormValue("SMS_NUM")
			MESSAGE := r.FormValue("SMS_MSG")
			time.AfterFunc(5*time.Second, func() { 
                laterSendSMS(c, SMS_NUMBER, MESSAGE)
			})
            return
		case "POST_PAYLOAD":
			SID := r.FormValue("SID")
			if SID != "" {
				err := blobFileSaver(w,r,SID,payload)
				if err != nil {
					thingsError(w,r,fmt.Sprintf("ERROR: cannot save to %v", SID))
					return
				}
				payload = []byte(SID)
			} else {
				if len(payload) > 1500 {
					thingsError(w,r,fmt.Sprintf("ERROR: payload exceeded length"))
					return
				}
			}
			recID := fmt.Sprintf("%v-dtc", thingName)
			timestamp := getTimestamp()
			g := TDSTHINGS{
					REC_ID:	recID,
					THING_NAME: thingName,
					PAYLOAD: string(payload),
					DOC_STAT: "Worldwide",
					FL_SHARED: "Y",
					TIMESTAMP: timestamp,
			}
			key := datastore.NameKey("TDSTHINGS", recID, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
				thingsError(w,r,fmt.Sprintf("ERROR: %v", err))
				return
            }
            //log.Printf("datastoreClient.Put()  [45691]")
			//log.Panicf("[S0354]")
			data,_ := json.MarshalIndent(g, "", "  ")
			w.Write(data)
			return
		case "SEND-CONTROL":
			recID := fmt.Sprintf("%v-ctd", thingName)
			timestamp := getTimestamp()
			g := TDSTHINGS{
					REC_ID:	recID,
					THING_NAME: thingName,
					PAYLOAD: string(payload),
					DOC_STAT: "Worldwide",
					FL_SHARED: "Y",
					TIMESTAMP: timestamp,
			}
 
			key := datastore.NameKey("TDSTHINGS", recID, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
				thingsError(w,r,fmt.Sprintf("ERROR: %v", err))
				return
            }
            //log.Printf("datastoreClient.Put()  [45713]")
			//log.Panicf("[S0355]")
			
			data,_ := json.MarshalIndent(g, "", "  ")
			//send data to firebase
			tokChan := make(chan Token)
			tokChanDone := make(chan bool)
			go createTokenChan(w,r,tokChan,tokChanDone,recID,"")
			tok := <-tokChan
			<-tokChanDone
			token := tok.Token
			
			topic := fmt.Sprintf("%v/%v/%v", SYS_SERVER_NAME, "things", token)
			sendChannelFirebase(w,r,topic,data)
			w.Write(data)
			return
			
		case "HEALTHZ":
			p, err := getSystemStats(w,r)
			if err != nil {
				thingsError(w,r,fmt.Sprintf("ERROR: %v", err))
				return
			}
			
			g := new(SystemStatus)
			
			g.CPU = p.STR_FILLER1
			g.RAM = p.STR_FILLER2
			g.TASKQUEUE = p.STR_FILLER3
			g.TASKQUEUE1M = p.STR_FILLER4
			g.CACHEHITS = p.STR_FILLER5
			g.CACHEMISS = p.STR_FILLER6
			g.CACHEITEMS = p.STR_FILLER7
			g.CACHEBYTES = p.STR_FILLER8
			g.COUNTER = p.STR_FILLER9
			g.ACCESS_HITS = p.STR_FILLER10
			g.ERROR_HITS = p.STR_FILLER11
			g.LAST_MEDIA = p.STR_FILLER12
			g.LAST_SLIDE = p.STR_FILLER13
			g.LAST_ARTICLE = p.STR_FILLER14
			g.TIME = p.STR_FILLER15
			g.MOST_POPULAR_1 = p.STR_FILLER16
			g.MOST_POPULAR_2 = p.STR_FILLER17
			g.MOST_POPULAR_3 = p.STR_FILLER18
			g.MOST_OS_1 	 = p.STR_FILLER19 	
			g.MOST_OS_2 	 = p.STR_FILLER20 	
			g.MOST_OS_3 	 = p.STR_FILLER21	
			g.MOST_BROWSER_1 = p.STR_FILLER22
			g.MOST_BROWSER_2 = p.STR_FILLER23
			g.MOST_BROWSER_3 = p.STR_FILLER24			
			
			data,_ := json.MarshalIndent(g, "", "  ")
			w.Write(data)
			return
		
		default:
			thingsError(w,r,fmt.Sprintf("ERROR: Invalid function"))
			return
	}
}
 
//common error messages for internet of things 
func thingsError(w http.ResponseWriter, r *http.Request, msg string) {
	w.WriteHeader(200)
	w.Write([]byte(msg))
	return	
}

//common error messages for internet of things  
func thingsError2(w http.ResponseWriter, r *http.Request, msg, msg2 string) {
	w.WriteHeader(200)
	w.Write([]byte(msg))
	w.Write([]byte(msg2))
	return	
}
//D0041
//handles /media handler either for public or private operations
//any calls to /media are handled by this such as display of TDSMEDIA files 
func media(w http.ResponseWriter, r *http.Request) {
	ulapphDebug(w,r, "info", fmt.Sprintf("media() %v", ""))
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
    //log.Printf("media()")
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //u := user.Current(c)
	//h := r.Header
	uReferer := r.Referer()
    //D0086
    //datastoreClient := createClientDS()

	FUNC_CODE := r.FormValue("FUNC_CODE")
    //log.Printf("checkSession()")
	_, uid := checkSession(w,r)
	switch {
	//D0041
	case FUNC_CODE == "GET_COMMENTS_COUNT":
		datastoreClient := createClientDS()
		API_KEY := r.FormValue("API_KEY")
		SID := r.FormValue("SID")
		if (CMD_API_KEY != API_KEY || SID == "") {
			w.WriteHeader(200)
			w.Write([]byte("ERROR: Unauthorized operation"))
			return
		}
		//must execute for humans only
		recCount := 0
		q := datastore.NewQuery("TDSCOMMENT").Filter("SID =", SID)
		recCount,_ = datastoreClient.Count(c,q)
		writeHTMLHeader(w, 200)
		w.Write([]byte(fmt.Sprintf("%v",recCount)))
        return
	case FUNC_CODE == "GET_RAN_MUSIC":
		datastoreClient := createClientDS()
		CURM := r.FormValue("CURM")
		if uid == "" {
			uid = "all"
		}
		cKey := fmt.Sprintf("MUSIC_LIST_%v", uid)
		cKey2 := fmt.Sprintf("MUSIC_TOTAL_%v", uid)
		MUSIC_LIST_ARRAY := ""
		MUSIC_LIST_TOTAL := ""
		MUSIC_LIST_ARRAY = getStrMemcacheValueByKey(w,r,cKey)
		MUSIC_LIST_TOTAL = getStrMemcacheValueByKey(w,r,cKey2)
		if MUSIC_LIST_ARRAY == "" || MUSIC_LIST_TOTAL == "" {
			recCtr := 0
			MUSIC_LIST_STR := ""		
			q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "music")
			//log.Panicf("[S0356]")
			recCount,_ := datastoreClient.Count(c,q)
			media := make([]TDSMEDIA, 0, recCount)
			if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
				panic(err)
            }
            //log.Printf("datastoreClient.Get()  [45852]")
			for _, p := range media{
				i := strings.Index(p.BLOB_KEY, "GET_WALL:")
				if uid == "all" {
					if (p.DATA_TYPE == "music" && p.FL_SHARED == "Y" && i == -1) {
						recCtr++
						MUSIC_LIST_STR = fmt.Sprintf("%v,%v", MUSIC_LIST_STR, p.MEDIA_ID)
					}
				} else if (p.DOC_STAT == "Worldwide" && p.DATA_TYPE == "music" && p.FL_SHARED == "Y" && i == -1) {
					recCtr++
					MUSIC_LIST_STR = fmt.Sprintf("%v,%v", MUSIC_LIST_STR, p.MEDIA_ID)
				} else if (p.DATA_TYPE == "music" && p.AUTHOR == uid && i == -1) {
					recCtr++
					MUSIC_LIST_STR = fmt.Sprintf("%v,%v", MUSIC_LIST_STR, p.MEDIA_ID)
				}
			}
			//store count
			MUSIC_TOTAL := fmt.Sprintf("%v", recCtr)
			//putStrToMemcacheWithoutExp(w,r,cKey2,MUSIC_TOTAL)
			putStrToMemcacheWithExp(w,r,cKey2,MUSIC_TOTAL,GEN_CONTENT_EXPIRES4)
			//store list
			//putStrToMemcacheWithoutExp(w,r,cKey,MUSIC_LIST_STR)
			putStrToMemcacheWithExp(w,r,cKey,MUSIC_LIST_STR,GEN_CONTENT_EXPIRES4)
			MUSIC_LIST_ARRAY = MUSIC_LIST_STR
			MUSIC_LIST_TOTAL = MUSIC_TOTAL
		}
		thisCurm := 0
		i := strings.Index(CURM, "TDSMEDIA-")
		if i != -1 {
			CPL := strings.Split(CURM,"-")
			if len(CPL) > 0 {
				if CPL[1] != "" {
				thisCurm = str2int(CPL[1])
				}
			}
		}
		medTotal := str2int(MUSIC_LIST_TOTAL)
		myrand := 0
		if medTotal > 1 {
			myrand = randNum(1, medTotal)
		}
		thisMediaID := ""
        SPL := strings.Split(MUSIC_LIST_ARRAY,",")
        _, uid := checkSession(w,r)
		if uid != "" {
			//validate user
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
			if FL_VALID_USER == true {
				//SPL := strings.Split(MUSIC_LIST_ARRAY,",")
				if thisCurm > 0 {
					for i := 0; i <= len(SPL[i]); i++ {
						//get next
						thisID := str2int(SPL[i])
						if thisID > thisCurm {
							thisMediaID = fmt.Sprintf("%v", thisID)
							break
						}
					}
				} else {
					if medTotal > 1 {
						myrand = randNum(1, medTotal)
					}
					if len(SPL) > 0 {
						if len(SPL) == 1 {
							thisMediaID = SPL[0]
						} else {
							thisMediaID = SPL[myrand]
						}
					}
				}
			}
		}
		if thisMediaID == "" {
			//for i := 1; i <= refNum + 1; i++ {
			for i := 1; i <= 10; i++ {
				//thisMediaID = 0
				if medTotal > 1 {
					myrand = randNum(1, medTotal)
				}
				if len(SPL) > 0 {
					if len(SPL) == 1 {
						thisMediaID = SPL[0]
					} else {
						thisMediaID = SPL[myrand]
					}
				}
				thisMediaID2 := str2int(thisMediaID)
				BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, _ := getTDSMEDIABlobKey(w, r, thisMediaID2)
				i := strings.Index(BLOB_KEY, "GET_WALL:")
				if DOC_STAT == "Worldwide" && FL_SHARED == "Y" && i == -1 {
					break
				} else if AUTHOR == uid {
                    break
                } else {
					thisMediaID = ""
				}
			}
		}
		writeHTMLHeader(w, 200)
		w.Write([]byte(thisMediaID))
		return
	case FUNC_CODE == "GET_MEDIA":
		MEDIA_ID := r.FormValue("MEDIA_ID")
		putStrToMemcacheWithoutExp(w,r,"LAST_TDSMEDIA",MEDIA_ID)
		mediaID := str2int(MEDIA_ID)
		BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, IMG_URL, DATA_TYPE, _, _, SHARED_TO := getTDSMEDIABlobKey(w, r, mediaID)
		FL_PROC_OK := false
		switch {
			case DOC_STAT == "Premium" && uid != AUTHOR:
				sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=TDSMEDIA-%v", mediaID)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			case (FL_SHARED == "N" || DOC_STAT == "Personal") && SHARED_TO == "":
				isOk := checkPersonalAuthor(w,r,AUTHOR,fmt.Sprintf("TDSMEDIA-%v", mediaID), mediaID)
				if isOk == true {
					FL_PROC_OK = true
				}
			case DOC_STAT == "Personal" && SHARED_TO != "":
				isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, fmt.Sprintf("TDSMEDIA-%v", mediaID), mediaID)
				if isAllowed == true {
					FL_PROC_OK = true
				}
			case DOC_STAT == "ULAPPH Only":
				FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
				if FL_PROC_OK == false {
					return
				}
			case DOC_STAT == "Worldwide":
				//media; GET_MEDIA; Worldwide
				FL_PROC_OK = true
		}
		if FL_PROC_OK == true {
			switch  {
				//case DATA_TYPE == "text" || strings.Index(DATA_TYPE, "text/") != -1:
				case DATA_TYPE == "text":
					//log num views
					time.AfterFunc(5*time.Second, func() {
                        laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID), "SO_INC_NUM_VIEWS")
                    })
                    var buf bytes.Buffer
                    bData, err := readGcsObject(BLOB_KEY)
                    if err != nil {
                        panic(err)
                    }
                    s := bufio.NewScanner(bytes.NewReader(bData))
					for s.Scan() {
						switch {
							case strings.HasPrefix(s.Text(), "#APPEND_URL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_URL_DATA: "):
								SPL := strings.Split(s.Text()," ")
								thisStr := fmt.Sprintf("%v", s.Text())
								if len(SPL) > 1 && string(thisStr[0]) == "#" {
									TARGET := SPL[1]
									validateURL(w,r,TARGET)
									//fetch contents of url and append
									urlData := fetchURL(w,r,TARGET)
									if urlData != "" {
										scanner := bufio.NewScanner(strings.NewReader(urlData))	
										for scanner.Scan() {
											msg := scanner.Text()
											buf.WriteString(fmt.Sprintf("%v\n", msg))
										}
									}
								} else {
									buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
								}
							case strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA: "):
								SPL := strings.Split(s.Text()," ")
								thisStr := fmt.Sprintf("%v", s.Text())
								if len(SPL) > 1 && string(thisStr[0]) == "#" {
									//append it now
									BLOB_KEY := contentCheckSid(w,r,SPL[1])
									appText := getBlobText(w, r, BLOB_KEY)
									buf.WriteString(fmt.Sprintf("%v\n", appText))
								} else {
									buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
								}
							default:
								buf.WriteString(fmt.Sprintf("%v", s.Text()))
						}
					}
					w.Header().Set("Content-Type", "text/plain; charset=utf-8")
					writeHTMLHeader(w, 200)
					w.Write(buf.Bytes())
				//case DATA_TYPE == "image" || strings.Index(DATA_TYPE, "image/") != -1:
				case DATA_TYPE == "image":
					w.Header().Set("Content-Type", "text/plain; charset=utf-8")
					writeHTMLHeader(w, 200)
					w.Write([]byte(IMG_URL))
			}
			return
		}
	case FUNC_CODE == "GET_MEDIA_NC":
		MEDIA_ID := r.FormValue("MEDIA_ID")
		putStrToMemcacheWithoutExp(w,r,"LAST_TDSMEDIA",MEDIA_ID)
		mediaID := str2int(MEDIA_ID)
		BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, IMG_URL, DATA_TYPE, _, _, SHARED_TO := getTDSMEDIABlobKey(w, r, mediaID)
		FL_PROC_OK := false
		switch {
			case DOC_STAT == "Premium" && uid != AUTHOR:
				sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=TDSMEDIA-%v", mediaID)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			case (FL_SHARED == "N" || DOC_STAT == "Personal") && SHARED_TO == "":
				isOk := checkPersonalAuthor(w,r,AUTHOR,fmt.Sprintf("TDSMEDIA-%v", mediaID), mediaID)
				if isOk == true {
					FL_PROC_OK = true
				}
			case DOC_STAT == "Personal" && SHARED_TO != "":
				isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, fmt.Sprintf("TDSMEDIA-%v", mediaID), mediaID)
				if isAllowed == true {
					FL_PROC_OK = true
				}
			case DOC_STAT == "ULAPPH Only":
				FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
				if FL_PROC_OK == false {
					return
				}
			case DOC_STAT == "Worldwide":
				//media; GET_MEDIA; Worldwide
				FL_PROC_OK = true
		}
		if FL_PROC_OK == true {
			switch  {
				//case DATA_TYPE == "text" || strings.Index(DATA_TYPE, "text/") != -1:
				case DATA_TYPE == "text":
					//log num views
					time.AfterFunc(5*time.Second, func() {
                        laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID), "SO_INC_NUM_VIEWS")
                    })
                    var buf bytes.Buffer
                    bData, err := readGcsObject(BLOB_KEY)
                    if err != nil {
                        panic(err)
                    }
                    s := bufio.NewScanner(bytes.NewReader(bData))
					for s.Scan() {
						switch {
							case strings.HasPrefix(s.Text(), "#APPEND_URL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_URL_DATA: "):
								SPL := strings.Split(s.Text()," ")
								thisStr := fmt.Sprintf("%v", s.Text())
								if len(SPL) > 1 && string(thisStr[0]) == "#" {
									TARGET := SPL[1]
									validateURL(w,r,TARGET)
									//fetch contents of url and append
									urlData := fetchURL(w,r,TARGET)
									if urlData != "" {
										scanner := bufio.NewScanner(strings.NewReader(urlData))	
										for scanner.Scan() {
											msg := scanner.Text()
											buf.WriteString(fmt.Sprintf("%v\n", msg))
										}
									}
								} else {
									buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
								}
							case strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA: "):
								SPL := strings.Split(s.Text()," ")
								thisStr := fmt.Sprintf("%v", s.Text())
								if len(SPL) > 1 && string(thisStr[0]) == "#" {
									//append it now
									BLOB_KEY := contentCheckSid(w,r,SPL[1])
									appText := getBlobTextNoComms(w, r, BLOB_KEY)
									buf.WriteString(fmt.Sprintf("%v\n", appText))
								} else {
									buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
								}
							default:
								//buf.WriteString(fmt.Sprintf("%v", s.Text()))
								thisStr := fmt.Sprintf("%v", s.Text())
								if len(thisStr) > 0 {
									if string(thisStr[0]) != "#" {
										buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
									}
								}
						}
					}
					w.Header().Set("Content-Type", "text/plain; charset=utf-8")
					writeHTMLHeader(w, 200)
					w.Write(buf.Bytes())
				//case DATA_TYPE == "image" || strings.Index(DATA_TYPE, "image/") != -1:
				case DATA_TYPE == "image":
					w.Header().Set("Content-Type", "text/plain; charset=utf-8")
					writeHTMLHeader(w, 200)
					w.Write([]byte(IMG_URL))
			}
		}
	case FUNC_CODE == "GET_MENU_TABZILLA":
		//skip
		writeHTMLHeader(w, 200)
		w.Write([]byte(""))		
        return
    case FUNC_CODE == "GET_RAN_DESK":
		myRanDesk := getRandomDesktop(w,r,uid)
		if myRanDesk != "" {
			w.Write([]byte(myRanDesk))
			return
		}		
		return
    case FUNC_CODE == "GET_RAN_WP":
        //log.Printf("uid: %v", uid)
		//if SYS_STATELESS_SERVER == true {
			myrand, thisWpTitle, thisRanWp := getRandomWp()
			if thisRanWp != "" {
				resp := fmt.Sprintf("%v@888@%v@888@%v@888@%v", myrand, thisRanWp, thisWpTitle, thisWpTitle)
				w.Write([]byte(resp))
				return
			}
		//}
		//send motd
		cKeyF := fmt.Sprintf("MOTD_WAIT_%s", uid)
		isWaitMotd := getStrMemcacheValueByKey(w,r,cKeyF)
		if isWaitMotd == "Y" {
			//do not motd
		} else {
			//send motd
			_, RAN_MSG, _ := getMOTD(w, r, uid,"desktop0")
			if RAN_MSG != "" {
				cKey := fmt.Sprintf("MOTD_MSG_%s", uid)
				putStrToMemcacheWithExp(w,r,cKey,RAN_MSG,20)
				//set wait marker
				putStrToMemcacheWithExp(w,r,cKeyF,"Y",1800)
			}
		}
		SEQ := r.FormValue("SEQ")
		mode := r.FormValue("mode")
		intSeq := str2int(SEQ)
		uwmwponly := r.FormValue("uwmwponly")
		uwmDesk := r.FormValue("desktop")
		uwmDesk = strings.Replace(uwmDesk, "uwm", "", -1)
		//log.Printf("uwmwponly: %v", uwmwponly)
		//log.Printf("uwmDesk: %v", uwmDesk)
		cKey := ""
		cKey2 := ""
		if SYS_WALLP_ADMIN_ONLY == false {
			cKey = fmt.Sprintf("WALLPAPERS_LIST_%v", uid)
			cKey2 = fmt.Sprintf("WALLPAPERS_TOTAL_%v", uid)
		} else {
			cKey = fmt.Sprintf("WALLPAPERS_LIST_%v", "admin")
			cKey2 = fmt.Sprintf("WALLPAPERS_TOTAL_%v", "admin")
		}
		if uwmwponly == "true" {
			cKey = fmt.Sprintf("WALLPAPERS_LIST_%v_%v", uwmDesk, uid)
			cKey2 = fmt.Sprintf("WALLPAPERS_TOTAL_%v_%v", uwmDesk, uid)
		}
		//log.Printf("cKey: %v", cKey)
		//log.Printf("cKey2: %v", cKey2)
		WALLPAPERS_LIST_ARRAY := ""
		WALLPAPERS_LIST_TOTAL := ""
		//validate user
		FUNC_CODE := "GET_GRP_ID"
        FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
        //log.Printf("FL_VALID_USER: %v", FL_VALID_USER)
        //log.Printf("uid: %v", uid)
		datastoreClient := createClientDS()
		if FL_VALID_USER == true {
			//if uwmWallpapers is not empty
			myrand, thisWpTitle, thisRanWp := getRandomWp()
			if thisRanWp != "" {
				resp := fmt.Sprintf("%v@888@%v@888@%v@888@%v", myrand, thisRanWp, thisWpTitle, thisWpTitle)
				w.Write([]byte(resp))
				return
			}
			WALLPAPERS_LIST_ARRAY = getStrMemcacheValueByKey(w,r,cKey)
			WALLPAPERS_LIST_TOTAL = getStrMemcacheValueByKey(w,r,cKey2)
			if WALLPAPERS_LIST_ARRAY == "" || WALLPAPERS_LIST_TOTAL == "" {
				//display media
				recCtr := 0
				WALLPAPERS_LIST_STR := ""
				if SYS_WALLP_ADMIN_ONLY == false {
					//log.Printf("uwmwponly: %v", uwmwponly )
					if uwmwponly == "true" {
						thisCat := fmt.Sprintf("desktop%v", uwmDesk)
						//log.Printf("thisCat: %v", thisCat )
						q := datastore.NewQuery("TDSMEDIA").Filter("CATEGORY =", thisCat).Limit(250)
						//log.Panicf("[S0359]")
						recCount,_ := datastoreClient.Count(c,q)
						//log.Printf("recCount: %v", uwmwponly )
						media := make([]TDSMEDIA, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [46263]")
						//randomize slice
						Shuffle(media)
						for _, p := range media{
								if p.DATA_TYPE == "image" {
									recCtr++
									WALLPAPERS_LIST_STR = fmt.Sprintf("%v@888@%v|%v|%v", WALLPAPERS_LIST_STR, p.IMG_URL, p.TITLE, p.DESC)
								}
						}
					} else {
						q := datastore.NewQuery("TDSMEDIA").Filter("PROP =", "big_wp").
										    Filter("AUTHOR =", uid)
						//log.Panicf("[S0358]")
						recCount,_ := datastoreClient.Count(c,q)
						media := make([]TDSMEDIA, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [46281]")
						//randomize slice
						Shuffle(media)
						//WALLPAPERS_LIST_STR := ""
						for _, p := range media{
								if p.DATA_TYPE == "image" && uid == p.AUTHOR {
									recCtr++
									WALLPAPERS_LIST_STR = fmt.Sprintf("%v@888@%v|%v|%v", WALLPAPERS_LIST_STR, p.IMG_URL, p.TITLE, p.DESC)
								}
						}
					}
				} else {
					q := datastore.NewQuery("TDSMEDIA").Filter("PROP =", "big_wp2")
					//log.Panicf("[S0359]")
					recCount,_ := datastoreClient.Count(c,q)
					media := make([]TDSMEDIA, 0, recCount)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [46300]")
					//randomize slice
					Shuffle(media)
					//WALLPAPERS_LIST_STR := ""
					for _, p := range media{
							if p.DATA_TYPE == "image" {
								recCtr++
								WALLPAPERS_LIST_STR = fmt.Sprintf("%v@888@%v|%v|%v", WALLPAPERS_LIST_STR, p.IMG_URL, p.TITLE, p.DESC)
							}
					}
				}
				//store count
				WALLPAPERS_TOTAL := fmt.Sprintf("%v", recCtr)
				putStrToMemcacheWithoutExp(w,r,cKey2,WALLPAPERS_TOTAL)
				//store list
				putStrToMemcacheWithoutExp(w,r,cKey,WALLPAPERS_LIST_STR)
				WALLPAPERS_LIST_ARRAY = WALLPAPERS_LIST_STR
				WALLPAPERS_LIST_TOTAL = WALLPAPERS_TOTAL
			}
		}
		if WALLPAPERS_LIST_TOTAL == "" || WALLPAPERS_LIST_TOTAL == "0" || mode == "guest" {
			//use default wallpapers
			PUB_WALLPAPERS_LIST_ARRAY := getPubWpList(w,r,uid)
			if PUB_WALLPAPERS_LIST_ARRAY != "" {
				SPL := strings.Split(PUB_WALLPAPERS_LIST_ARRAY,"@888@")
				WALLPAPERS_LIST_TOTAL = fmt.Sprintf("%v", len(SPL))
				WALLPAPERS_LIST_ARRAY = PUB_WALLPAPERS_LIST_ARRAY
			} else {
				WALLPAPERS_LIST_TOTAL = WALLPAPERS_LIST_DEF_TOT
				WALLPAPERS_LIST_ARRAY = fetchURL(w,r,WALLPAPERS_LIST_DEF_LST)
			}
		}
		wpTotal := str2int(WALLPAPERS_LIST_TOTAL)
		myrand = 0
		if SEQ != "" {
			//get sequential wp
			myrand = intSeq + 1
			if myrand > wpTotal {
				myrand = 0
			}
		} else {
			//get random wp
			if wpTotal > 1 {
				myrand = randNum(1, wpTotal)
			}
		}
		thisWpUrl := ""
		thisWpTitle = ""
		thisWpDesc := ""
		//get image based on array and random
		//https://www.ulapph.com/static/img/Andromeda-Galaxy.jpg|Title|Description@888@
		SPL := strings.Split(WALLPAPERS_LIST_ARRAY,"@888@")
		if len(SPL) > 0 {
			if len(SPL) == 1 {
				SPI := strings.Split(SPL[1],"|")
				if len(SPI) == 3 {
					thisWpUrl = SPI[0]
					thisWpTitle = SPI[1]
					thisWpDesc = SPI[2]
				} else {
					thisWpUrl = SPL[1]
				}
			} else {
				//thisWpUrl = SPL[myrand]
				SPI := strings.Split(SPL[myrand],"|")
				if len(SPI) == 3 {
					thisWpUrl = SPI[0]
					thisWpTitle = SPI[1]
					thisWpDesc = SPI[2]
				} else {
					thisWpUrl = SPL[myrand]
				}
			}
		}
		thisWpUrl = getSchemeNewUrl(w,r,thisWpUrl)
		resp := fmt.Sprintf("%v@888@%v@888@%v@888@%v", myrand, thisWpUrl, thisWpTitle, thisWpDesc)
		w.Write([]byte(resp))
		return
	case FUNC_CODE == "GET_RAN_MED":
		_, uid := checkSession(w,r)
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		if FL_VALID_USER != true {
			URL := fmt.Sprintf("%v/rag?f=slides&d=desktop0&n=1", SYS_DISP_ADS_HOST)
			//client := urlfetch.Client(c)
			if err := r.ParseForm(); err != nil {
				panic(err)
			}
			resp, err := http.Get(URL)
			if err != nil {
				panic(err)
			}
			bodyBytes, _ := ioutil.ReadAll(resp.Body)
			w.Write(bodyBytes)
		
			return
		}
 
		cKey := fmt.Sprintf("MEDIA_LIST_%v", uid)
		cKey2 := fmt.Sprintf("MEDIA_TOTAL_%v", uid)
		MEDIA_LIST_ARRAY := ""
		MEDIA_LIST_TOTAL := ""
		MEDIA_LIST_ARRAY = getStrMemcacheValueByKey(w,r,cKey)
		MEDIA_LIST_TOTAL = getStrMemcacheValueByKey(w,r,cKey2)
		datastoreClient := createClientDS()
		if MEDIA_LIST_ARRAY == "" || MEDIA_LIST_TOTAL == "" {
		
			recCtr := 0
			MEDIA_LIST_STR := ""		
			q := datastore.NewQuery("TDSMEDIA").Filter("AUTHOR =", uid)
			//log.Panicf("[S0360]")
			recCount,_ := datastoreClient.Count(c,q)
 
			media := make([]TDSMEDIA, 0, recCount)
			if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
				panic(err)
			}
            //log.Printf("datastoreClient.Get()  [46417]")
			for _, p := range media{
					if (p.DATA_TYPE == "image" || p.DATA_TYPE == "music" || p.DATA_TYPE == "video") && uid == p.AUTHOR {
						recCtr++
						MEDIA_LIST_STR = fmt.Sprintf("%v,%v", MEDIA_LIST_STR, p.MEDIA_ID)
					}
			}
				
			//store count
			MEDIA_TOTAL := fmt.Sprintf("%v", recCtr)
			putStrToMemcacheWithoutExp(w,r,cKey2,MEDIA_TOTAL)
			//store list
			putStrToMemcacheWithoutExp(w,r,cKey,MEDIA_LIST_STR)
			
			MEDIA_LIST_ARRAY = MEDIA_LIST_STR
			MEDIA_LIST_TOTAL = MEDIA_TOTAL
		}
			
		
		medTotal := str2int(MEDIA_LIST_TOTAL)
		myrand := 0
 
		if medTotal > 1 {
			myrand = randNum(1, medTotal)
		}
		
		thisMediaID := ""
		SPL := strings.Split(MEDIA_LIST_ARRAY,",")
		if len(SPL) > 0 {
			if len(SPL) == 1 {
				thisMediaID = SPL[1]
			} else {
				thisMediaID = SPL[myrand]
			}
		}
		
		MEDIA_ID := str2int(thisMediaID)
		BLOB_KEY, _, _, _, _, _, IMG_SRC, _, _, _, _ := getTDSMEDIABlobKey(w, r, MEDIA_ID)
 
		var bLine bytes.Buffer
		
		textEff, imgEff := getRanAnim()
		
		bLine.WriteString("<html><head><link rel=\"stylesheet\" href=\"/static/lib/css/animate/animate.css\">")
		bLine.WriteString("</head><body>")
		bLine.WriteString(fmt.Sprintf("<a href=\"/media?FUNC_CODE=PLAY&SID=TDSMEDIA-%v&BLOB_KEY=%v\" target=\"%v\"><img src=\"%v\" width=290 height=270 class=\"animated infinite %v\"><br><b class=\"animated infinite %v\">TDSMEDIA-%v</b></a>", MEDIA_ID, BLOB_KEY, BLOB_KEY, getSchemeNewUrl(w,r,IMG_SRC), imgEff, textEff, MEDIA_ID))
		bLine.WriteString("</head><body>")
		writeHTMLHeader(w, 200)
		w.Write([]byte(bLine.String()))
		return
		
	case FUNC_CODE == "GET_RAN_MUSIC": 	
		datastoreClient := createClientDS()
		uid := "all"
		cKey := fmt.Sprintf("MUSIC_LIST_%v", uid)
		cKey2 := fmt.Sprintf("MUSIC_TOTAL_%v", uid)
		MUSIC_LIST_ARRAY := ""
		MUSIC_LIST_TOTAL := ""
		MUSIC_LIST_ARRAY = getStrMemcacheValueByKey(w,r,cKey)
		MUSIC_LIST_TOTAL = getStrMemcacheValueByKey(w,r,cKey2)
		if MUSIC_LIST_ARRAY == "" || MUSIC_LIST_TOTAL == "" {
		
			recCtr := 0
			MUSIC_LIST_STR := ""		
 
			q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "music")
			//log.Panicf("[S0361]")
			recCount,_ := datastoreClient.Count(c,q)
 
			media := make([]TDSMEDIA, 0, recCount)
			if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
				panic(err)
			}
            //log.Printf("datastoreClient.Get()  [46490]")
			for _, p := range media{
					if (p.DATA_TYPE == "music") {
						recCtr++
						MUSIC_LIST_STR = fmt.Sprintf("%v,%v", MUSIC_LIST_STR, p.MEDIA_ID)
					}
			}
				
			//store count
			MUSIC_TOTAL := fmt.Sprintf("%v", recCtr)
			putStrToMemcacheWithoutExp(w,r,cKey2,MUSIC_TOTAL)
			//store list
			putStrToMemcacheWithoutExp(w,r,cKey,MUSIC_LIST_STR)
			
			MUSIC_LIST_ARRAY = MUSIC_LIST_STR
			MUSIC_LIST_TOTAL = MUSIC_TOTAL
		}
			
		
		medTotal := str2int(MUSIC_LIST_TOTAL)
		myrand := 0
 
		if medTotal > 1 {
			myrand = randNum(1, medTotal)
		}
		
		thisMediaID := ""
		SPL := strings.Split(MUSIC_LIST_ARRAY,",")
		if len(SPL) > 0 {
			if len(SPL) == 1 {
				thisMediaID = SPL[1]
			} else {
				thisMediaID = SPL[myrand]
			}
		}
		
		writeHTMLHeader(w, 200)
		w.Write([]byte(thisMediaID))
        return
	case FUNC_CODE == "PLAY":
		BLOB_KEY := r.FormValue("BLOB_KEY")
		SID := r.FormValue("SID")
		if BLOB_KEY != "" {
			i := strings.Index(BLOB_KEY, "GET_WALL:")
			if i != -1 {
				SPL := strings.Split(BLOB_KEY,"GET_WALL:")
				if len(SPL) > 1 {
					linkedUrl := SPL[1]
					linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
					http.Redirect(w, r, linkedUrl, http.StatusFound)
					//return
				}
				return
			}
			BLOB_KEY := contentCheckSid(w,r,SID)
            //blobstore.Send(w, appengine.BlobKey(BLOB_KEY))
            bData, err := readGcsObject(BLOB_KEY)
            if err != nil {
                panic(err)
            }
            w.Write(bData)
			return
		} else {
            SPL := strings.Split(SID,"-")
            TARGET := SPL[0]
            switch TARGET {
            case "TDSSLIDE":
                BLOB_KEY := contentCheckSid(w,r,SID)
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                w.Write(bData)
                return
            case "TDSARTL":
                BLOB_KEY := contentCheckSid(w,r,SID)
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                w.Write(bData)
                return
            case "TDSMEDIA":
                MEDIA_ID2 := r.FormValue("MEDIA_ID")
                putStrToMemcacheWithoutExp(w,r,"LAST_TDSMEDIA",MEDIA_ID2)
                MEDIA_ID := str2int(MEDIA_ID2)
                //log media views
                time.AfterFunc(5*time.Second, func() {
                    laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID), "SO_INC_NUM_VIEWS")
                })
                BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, _, DATA_TYPE, MIME_TYPE, _, SHARED_TO := getTDSMEDIABlobKey(w, r, MEDIA_ID)
                if BLOB_KEY == "" {
                    return
                }
                i := strings.Index(BLOB_KEY, "GET_WALL:")
                if i != -1 {
                    SPL := strings.Split(BLOB_KEY,"GET_WALL:")
                    if len(SPL) > 1 {
                        linkedUrl := SPL[1]
                        linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
                        http.Redirect(w, r, linkedUrl, http.StatusFound)
                        //return
                    }
                    return
                }
                FL_PROC_OK := false
                switch {
                    case DATA_TYPE == "music" || DATA_TYPE == "video":
                        //make music/video shared to registered users
                        FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
                        if FL_PROC_OK == false {return}
                        FL_PROC_OK = true
                    case AUTHOR == uid:
                        FL_PROC_OK = true
                    case DOC_STAT == "Premium" && uid != AUTHOR:
                        sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=TDSMEDIA-%v", MEDIA_ID)
                        http.Redirect(w, r, sysReq, http.StatusFound)
                        return
                    case FL_SHARED == "N" || DOC_STAT == "Personal" && SHARED_TO == "":
                        isOk := checkPersonalAuthor(w,r,AUTHOR,fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID), MEDIA_ID)
                        if isOk == true {
                            FL_PROC_OK = true
                        }
                    case DOC_STAT == "Personal" && SHARED_TO != "":
                        isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID), MEDIA_ID)
                        if isAllowed == true {
                            FL_PROC_OK = true
                        }
                    case DOC_STAT == "ULAPPH Only":
                        FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
                        if FL_PROC_OK == false {
                            return
                        }
                        //return
                    case DOC_STAT == "Worldwide":
                        FL_PROC_OK = true
                        //return
                }
                if FL_PROC_OK == true {
                    if MIME_TYPE != "" {
                        w.Header().Set("Content-Type",  MIME_TYPE)
                    }
                    //blobstore.Send(w, appengine.BlobKey(BLOB_KEY))
                    bData, err := readGcsObject(BLOB_KEY)
                    if err != nil {
                        panic(err)
                    }
                    w.Write(bData)
                }
            }
			return
		}
 
	case FUNC_CODE == "DL":
	
		BLOB_KEY := r.FormValue("BLOB_KEY")
		SID := r.FormValue("SID")
		MIME_TYPE := r.FormValue("MIME_TYPE")
 
		
		if BLOB_KEY != "" {
			i := strings.Index(BLOB_KEY, "GET_WALL:")
			if i != -1 {
 
				SPL := strings.Split(BLOB_KEY,"GET_WALL:")
				if len(SPL) > 1 {
					linkedUrl := SPL[1]
					linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
					http.Redirect(w, r, linkedUrl, http.StatusFound)
					//return
				}
				return
				
			}
			serveMediaContent(w,r,SID,MIME_TYPE)
			return
		} else {
 
			MEDIA_ID2 := r.FormValue("MEDIA_ID")
			putStrToMemcacheWithoutExp(w,r,"LAST_TDSMEDIA",MEDIA_ID2)
			MEDIA_ID := str2int(MEDIA_ID2)
			//log media views
			time.AfterFunc(5*time.Second, func() {
                laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID), "SO_INC_NUM_VIEWS")
            })
            BLOB_KEY, _, TITLE, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, DESC, SHARED_TO := getTDSMEDIABlobKey(w, r, MEDIA_ID)
			
			msg := ""
			msgDtl3 := ""
			if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
				msg = getGeoString(w,r)
				msgDtl3 = fmt.Sprintf("UID:%v has accessed media (<a href=\"/media?FUNC_CODE=PLAY&BLOB_KEY=%v&SID=TDSMEDIA-%v\">%v - %v</a>) %v!", msg, BLOB_KEY, MEDIA_ID, TITLE, DESC, getAccessString(w,r,""))
 
			}else{
				msg = uid
				msgDtl3 = fmt.Sprintf("UID:%v has accessed media (<a href=\"/media?FUNC_CODE=PLAY&BLOB_KEY=%v&SID=TDSMEDIA-%v\">%v - %v</a>) %v!", msg, BLOB_KEY, MEDIA_ID, TITLE, DESC, getAccessString(w,r,""))
			}
			if msgDtl3 != "" {
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/media",""),"")
			}
			
			if BLOB_KEY == "" {
 
				return
			}
			
			i := strings.Index(BLOB_KEY, "GET_WALL:")
			if i != -1 {
				SPL := strings.Split(BLOB_KEY,"GET_WALL:")
 
				if len(SPL) > 1 {
					linkedUrl := SPL[1]
					linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
					http.Redirect(w, r, linkedUrl, http.StatusFound)
					//return
				}
				return
				
			}
			
			FL_PROC_OK := false
			
			switch {
				case AUTHOR == uid:
					FL_PROC_OK = true
					
				case DOC_STAT == "Premium" && uid != AUTHOR:
					
					sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=TDSMEDIA-%v", MEDIA_ID)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case FL_SHARED == "N" || DOC_STAT == "Personal" && SHARED_TO == "":
					isOk := checkPersonalAuthor(w,r,AUTHOR,fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID), MEDIA_ID)
					if isOk == true {
						FL_PROC_OK = true
					}
 
				case DOC_STAT == "Personal" && SHARED_TO != "":
					isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID), MEDIA_ID)
					if isAllowed == true {
						FL_PROC_OK = true
					}
				case DOC_STAT == "ULAPPH Only":
					FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
					if FL_PROC_OK == false {
						return
					}
				case DOC_STAT == "Worldwide":
					//media; DL; Worldwide
					encMsg := url.QueryEscape(msgDtl3)
					time.AfterFunc(5*time.Second, func() {
                        laterBroadcastContentsAll(c, encMsg)
                    })
					FL_PROC_OK = true
					
			}
			
			if FL_PROC_OK == true {
				serveMediaContentNow(w,r,SID,MIME_TYPE)
			}
			
			return
		}
		case FUNC_CODE == "RAWTEXT":
			SID := r.FormValue("SID")
			//D0060
			D3_NODE_FILTER := r.FormValue("getNode")
			D3_NODE_LINK_FILTER := r.FormValue("getNodeLink")
			D3_TRIM := r.FormValue("trimNode")
		 	//log.Printf("D3_NODE_FILTER: %v", D3_NODE_FILTER)	
		 	//log.Printf("D3_TRIM: %v", D3_TRIM)	
			
			SPL := strings.Split(SID,"-")
			TARGET := SPL[0]
			DOC_ID := "0"
			if len(SPL) > 1 {
				DOC_ID = SPL[1]
			}
 
			mediaID := str2int(DOC_ID)
			BLOB_KEY := ""					
			DOC_STAT := ""
			FL_SHARED := ""
			AUTHOR := ""
			SHARED_TO := ""			
	
			switch TARGET {
				case "TDSSLIDE":
					time.AfterFunc(5*time.Second, func() {
                        laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSSLIDE-%v", DOC_ID), "SO_INC_NUM_VIEWS")
                    })
                    BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, _, SHARED_TO, _, _ = getTDSSLIDEBlobKey(w, r, mediaID)
					
				case "TDSARTL":
					time.AfterFunc(5*time.Second, func() {
                        laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSARTL-%v", DOC_ID), "SO_INC_NUM_VIEWS")
                    })
                    BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, SHARED_TO, _, _ = getTDSARTLBlobKey(w, r, mediaID)
				case "TDSMEDIA":
				
					//log media views
					time.AfterFunc(5*time.Second, func() {
                        laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSMEDIA-%v", DOC_ID), "SO_INC_NUM_VIEWS")	
                    })
                    BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, SHARED_TO = getTDSMEDIABlobKey(w, r, mediaID)
			}
 
			
			FL_PROC_OK := false
			
			switch {
	
				case DOC_STAT == "Premium" && uid != AUTHOR:
					sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=%v", SID)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
			
				case (FL_SHARED == "N" || DOC_STAT == "Personal") && SHARED_TO == "":
					isOk := checkPersonalAuthor(w,r,AUTHOR,SID, mediaID)
					if isOk == true {
						FL_PROC_OK = true
					}
					
				case DOC_STAT == "Personal" && SHARED_TO != "":
					isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, SID, mediaID)
					if isAllowed == true {
						FL_PROC_OK = true
					}
				case DOC_STAT == "ULAPPH Only":
					FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
					if FL_PROC_OK == false {
						return
					}
				case DOC_STAT == "Worldwide":
					FL_PROC_OK = true
			
			}
			if FL_PROC_OK == true {
				//log.Printf("FL_PROC_OK...")
 
				var buf bytes.Buffer
                bData, err := readGcsObject(BLOB_KEY)
                if err != nil {
                    panic(err)
                }
                s := bufio.NewScanner(bytes.NewReader(bData))
				for s.Scan() {
					if TARGET == "TDSSLIDE" || TARGET == "TDSARTL" || TARGET == "TDSMEDIA" {
						//D0060
						if strings.HasPrefix(s.Text(), "#APPEND_URL_DATA: ") || strings.HasPrefix(s.Text(), "#APPEND_URL_DATA ") {
							SPL := strings.Split(s.Text()," ")
							if len(SPL) > 1 {
								TARGET := SPL[1]
								validateURL(w,r,TARGET)
								//fetch contents of url and append
								urlData := fetchURL(w,r,TARGET)
								if urlData != "" {
									scanner := bufio.NewScanner(strings.NewReader(urlData))	
									for scanner.Scan() {
										msg := scanner.Text()
										buf.WriteString(fmt.Sprintf("%v\n", msg))
									}
								}
							}
						} else {
							buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
						}
					} else {
						buf.WriteString(fmt.Sprintf("%v", s.Text()))
					}
				}
				//D0060
				switch {
				case D3_NODE_FILTER != "" && D3_NODE_FILTER != "undefined" && D3_TRIM == "Y": 
					//log.Printf("D3_NODE_FILTER process...")
					//return target notes only
					s := bufio.NewScanner(bytes.NewReader(buf.Bytes()))
					var buf bytes.Buffer
					lCtr := 0
					//parse node filter and form possible matches
					SPL := strings.Split(D3_NODE_FILTER, ".")
					for s.Scan() {
						lCtr++
						//if lCtr == 1 || lCtr == 2 {

						if lCtr == 1 {
							buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
						} else {
							keyWord := ""
							for i:=len(SPL); i > 0; i-- {
								if i <  len(SPL) {
									keyWord = strings.Join(SPL[:i], ".")
									//log.Printf("keyWord: %v", keyWord)
									if strings.HasPrefix(s.Text(), fmt.Sprintf("%v,",keyWord)) {
										buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
									}
								} else {
									keyWord = strings.Join(SPL[:len(SPL)], ".")
									//log.Printf("keyWord: %v", keyWord)
									if strings.HasPrefix(s.Text(), keyWord) {
										buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
									}

								}
							}
						}
					}
					w.Header().Set("Content-Type", "text/plain; charset=utf-8")
					writeHTMLHeader(w, 200)
					//log.Printf(fmt.Sprintf("%v", buf.String()))
					w.Write(buf.Bytes())
				case D3_NODE_LINK_FILTER != "" && D3_NODE_LINK_FILTER != "undefined": 
					//log.Printf("D3_NODE_LINK_FILTER process...")
					//return target notes only
					s := bufio.NewScanner(bytes.NewReader(buf.Bytes()))
					for s.Scan() {
						SPL := strings.Split(s.Text(), "--D3JS--")
						if len(SPL) > 0 {
							//fmt.Println(s.Text())
							if SPL[0] == D3_NODE_LINK_FILTER {
								thisShort := SPL[1]
								thisDesc := SPL[2]
								thisUrl := SPL[3]
								g := TEMPSTRUCT {
									STR_FILLER1: thisShort,
									STR_FILLER2: thisDesc,
									STR_FILLER3: thisUrl,
								}
								if err := htmlD3PopPage.Execute(w, &g); err != nil {
								  panic(err)
								}
								//break
								return
							}
						}

					}
				default:
					w.Header().Set("Content-Type", "text/plain; charset=utf-8")
					//log.Printf(fmt.Sprintf("%v", buf.String()))
					writeHTMLHeader(w, 200)
					w.Write(buf.Bytes())
				}
			}
            return
    default:
        //log.Printf("default")
		//////////////////////
        _, uid := checkSession(w,r)
        //log.Printf("validateAccess")
        FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",uReferer)
        //log.Printf("FL_PROC_OK: %v", FL_PROC_OK)
		if FL_PROC_OK == false {return}
		//get user privilege
		FUNC_CODE2 := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE2)
		if FL_VALID_USER == true {
			CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
			switch FUNC_CODE {
				case "UPDATE":
					datastoreClient := createClientDS()
					updateUserActiveData(w, r, c, uid, "/media(update)")
					DATA_TYPE := strings.ToLower(r.FormValue("DATA_TYPE"))
					MIME_TYPE := strings.ToLower(r.FormValue("MIME_TYPE"))
					TITLE := r.FormValue("TITLE")
					DESC := r.FormValue("DESC")
					MEDIA_ID2 := r.FormValue("MEDIA_ID")
					MEDIA_ID := str2int(MEDIA_ID2)
					PROP := r.FormValue("PROP")
					AUTHOR := r.FormValue("AUTHOR")
					IMG_URL := r.FormValue("IMG_URL")
					CATEGORY := r.FormValue("CATEGORY")
					FL_SHARED := r.FormValue("FL_SHARED")
					DOC_STAT := r.FormValue("DOC_STAT")
					dsKey := fmt.Sprintf("%d", MEDIA_ID)
					key := datastore.NameKey("TDSMEDIA", dsKey, nil)
					q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
					//log.Panicf("[S0362]")
					media := make([]TDSMEDIA, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
                      }
                      //log.Printf("datastoreClient.Get()  [46973]")
					NUM_LIKES := float64(0)
					NUM_COMMENTS := float64(0)
					NUM_VIEWS := float64(0)
					for _, p := range media{
						p.DATA_TYPE	 = DATA_TYPE
						p.MIME_TYPE	 = MIME_TYPE
						p.PROP = PROP
						p.TITLE	= TITLE
						p.DESC	= DESC
						p.CATEGORY	= CATEGORY	
						p.FL_SHARED	= FL_SHARED
						p.DOC_STAT	= DOC_STAT
						NUM_LIKES = float64(p.NUM_LIKES)
						NUM_COMMENTS = float64(p.NUM_COMMENTS)
                        NUM_VIEWS = float64(p.NUM_VIEWS)
                        //D0089
                        //update object permission
                        err := updateGcsObjPermission(p.BLOB_KEY, FL_SHARED, DOC_STAT)
                        if err != nil {
                            panic(err)
                        }
						if p.IMG_URL == "/static/img/unknown.png" || (p.IMG_URL == "/static/img/image-icon.png" && DATA_TYPE == "image") {
							//get the correct file icon
							switch  {
								case DATA_TYPE == "image":
									//sURL, _ := imageApi.ServingURL(c, appengine.BlobKey(p.BLOB_KEY), nil)
									//thisURL := sURL.String()
                                    //thisURL = getSchemeNewUrl(w,r,thisURL)
                                    thisURL := mediaURL(p.BLOB_KEY)
									p.IMG_URL = thisURL
								case DATA_TYPE == "text":
									p.IMG_URL = "/static/img/text-icon.gif"
								case DATA_TYPE == "music":
									p.IMG_URL = "/static/img/music.png"
								case DATA_TYPE == "video":
									p.IMG_URL = "/static/img/video.png"
								case strings.Index(MIME_TYPE, "/") != -1 && DATA_TYPE != "":
									SPL := strings.Split(MIME_TYPE, "/")
									if len(SPL) > 0 {
										thisURL := fmt.Sprintf("/static/img/files/%v-icon-128x128.png", SPL[1])
										p.IMG_URL = thisURL
									}
							}
						} else {
							if IMG_URL == "" || IMG_URL == "/static/img/text-icon.gif" && strings.Index(MIME_TYPE, "/") != -1 && DATA_TYPE != "" {
								if DATA_TYPE == "text" {
									SPL := strings.Split(MIME_TYPE, "/")
									if len(SPL) > 0 {
										thisURL := fmt.Sprintf("/static/img/files/%v-icon-128x128.png", SPL[1])
										p.IMG_URL = thisURL
									}else {
										thisURL := fmt.Sprintf("/static/img/files/%v-icon-128x128.png", DATA_TYPE)
										p.IMG_URL = thisURL
									}
								} else {
									//D0074
									//thisURL := fmt.Sprintf("/static/img/files/%v-icon-128x128.png", DATA_TYPE)
									//p.IMG_URL = thisURL
								}
							} else {
								if IMG_URL != "" {
									p.IMG_URL = IMG_URL
								}
							}
						}
						if AUTHOR != "" {
							p.AUTHOR = AUTHOR
						}

						thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
						key := datastore.NameKey("TDSMEDIA", thisKey, nil)
						_, err = datastoreClient.Put(c, key, &p)
						if err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Put()  [47049]")
						//log.Panicf("[S0363]")
						//clear cache
						cKey := fmt.Sprintf("TDSMEDIA_MEDID_CACHE_%v", p.MEDIA_ID)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						//clear music array
						if DATA_TYPE == "music" {
							cKey := fmt.Sprintf("MUSIC_LIST_%v", "all")
							putStrToMemcacheWithoutExp(w,r,cKey,"")
						}
						//clear autocomps
						cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
						putStrToMemcacheWithoutExp(w,r,cKeyAll,"")
						tstamp := getTimestamp()
						//insert media into search idx
						thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", p.MEDIA_ID)
						thisIdxURL := fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%d&IMG_URL=%v", p.MEDIA_ID, p.IMG_URL)
						TITLE := strings.Replace(p.TITLE, "_", " ", -1)
						DESC := strings.Replace(p.DESC, "_", " ", -1)
						thisCont := ""
						if DATA_TYPE == "text" {
							blobChan := make(chan string)
							go getBlobTextChan(w, r,blobChan, p.BLOB_KEY)
							thisCont = <- blobChan
							//if p.SYS_VER == 666 {
							if p.SYS_VER == 777 {
								cStr := encrypter2(w,r,thisCont,ENCRYPTION_KEY)
								thisCont = string(cStr)
							}
						} else {
							thisCont = fmt.Sprintf("%v - %v", TITLE, DESC)
						}
						searchIdx := &IDX_TDSMEDIA{
							DOC_KEY: 			thisIdxKey,
							SEARCH_TYPE: 		"MEDIA",
							SOURCE_TYPE: 		DATA_TYPE,	
							SOURCE_TBL:  		"TDSMEDIA",	
							DESKTOP: 			CATEGORY,
							FL_SHARED:			FL_SHARED,
							DOC_STAT:			DOC_STAT,
							DOC_SCOPE_OVERALL:	"",
							DOC_SCOPE_COUNTRY:  "",
							DOC_SCOPE_REGION:  	"",
							DOC_SCOPE_CITY: 	"",
							DOC_SCOPE_BARANGAY: "",
							DOC_TITLE: 			TITLE,	
							DOC_DESC: 			DESC,
							DOC_AUTHOR:         uid,
							DOC_CONTENT_TEXT: 	thisCont,
							DOC_CONTENT_HTML: 	"",	
							DOC_CONTENT_ATOM: 	"",	
							DOC_NUM_LIKES:		NUM_LIKES,		
							DOC_NUM_COMMENTS:	NUM_COMMENTS,
							DOC_NUM_VIEWS:		NUM_VIEWS,
							CONTENT_URL: 		thisIdxURL,
							IMG_URL: 			p.IMG_URL,
							DATE_ADDED: 		tstamp,
							DATE_UPDATED: 		tstamp,
						}
                        
						putSearchIndexM(w,r,"IDX_TDSMEDIA",thisIdxKey,searchIdx)
						if DATA_TYPE == "music" {
							cKey := fmt.Sprintf("UMP_CACHE_MUSIC_%s", uid)
							putStrToMemcacheWithoutExp(w,r,cKey,"")
						}
 
						sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d&DATA_TYPE=%s&TITLE=%v&BLOB_KEY=%v&IMG_URL=%v", MEDIA_ID, DATA_TYPE, TITLE, p.BLOB_KEY, p.IMG_URL)
						//fmt.Fprintf(w, "%v", sysReq)
						http.Redirect(w, r, sysReq, http.StatusFound)
						//return
						break
					}
				
				case "PINNED_MEDIA":
					datastoreClient := createClientDS()
					MEDIA_ID2 := r.FormValue("MEDIA_ID")
					SYS_VER2 := r.FormValue("P")
					MEDIA_ID := str2int(MEDIA_ID2)
					SYS_VER := str2int(SYS_VER2)
					
					dsKey := fmt.Sprintf("%d", MEDIA_ID)
					key := datastore.NameKey("TDSMEDIA", dsKey, nil)
					q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
					//log.Panicf("[S0364]")
					media := make([]TDSMEDIA, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					  }
					//log.Printf("datastoreClient.Get()  [47133]")
					for _, p := range media{
 
						p.SYS_VER = SYS_VER
						thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
						key := datastore.NameKey("TDSMEDIA", thisKey, nil)
						_, err := datastoreClient.Put(c, key, &p)
						if err != nil {
							 panic(err)
						
                        }
                        //log.Printf("datastoreClient.Put()  [47144]")
						//log.Panicf("[S0365]")						
 
						break
					}
					//clear pinned cache
					cKey := fmt.Sprintf("CACHE_MEDIA_CONTENTS_PINNED")
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d", MEDIA_ID)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
 
				case "ENC_MEDIA":
					datastoreClient := createClientDS()
					MEDIA_ID2 := r.FormValue("MEDIA_ID")
					SYS_VER2 := r.FormValue("P")
					MEDIA_ID := str2int(MEDIA_ID2)
					SYS_VER := str2int(SYS_VER2)
					
					dsKey := fmt.Sprintf("%d", MEDIA_ID)
					key := datastore.NameKey("TDSMEDIA", dsKey, nil)
					q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
					//log.Panicf("[S0366]")
					media := make([]TDSMEDIA, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					  }
					//log.Printf("datastoreClient.Get()  [47171]")
					for _, p := range media{
 
						p.SYS_VER = SYS_VER
						thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
						key := datastore.NameKey("TDSMEDIA", thisKey, nil)
						_, err := datastoreClient.Put(c, key, &p)
						if err != nil {
							 panic(err)
						
                        }
                        //log.Printf("datastoreClient.Put()  [47182]")
						//log.Panicf("[S0367]")
						
						break
					}
 
					//call encryptor here
					//dispStr := []byte("")
					if SYS_VER > 0 {
						if SYS_VER == 777 {
							SID := fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID)
							_ = encrypter(w,r,SID,ENCRYPTION_KEY)
						} else {
							SID := fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID)
							_ = decrypter(w,r,SID,ENCRYPTION_KEY)
						}
					}
					//fmt.Fprintf(w, "%v", string(dispStr))
					sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d", MEDIA_ID)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				case "SET_URLFETCH_LIST":
					datastoreClient := createClientDS()
					MEDIA_ID2 := r.FormValue("MEDIA_ID")
					MEDIA_ID := str2int(MEDIA_ID2)
					cfgName := fmt.Sprintf("SYSTEM_URLFETCH_Media_ID_%v", uid)
							
					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							//CFG_ID: "SYSTEM_URLFETCH_Media_ID",
							CFG_ID: cfgName,
							DAT_TYP: "TXT",
							NUM_VAL: MEDIA_ID,
							TXT_VAL: "",
							CFG_DESC: "Set via Media Gallery",
					}
					key := datastore.NameKey("TDSCNFG", cfgName, nil)
 
					if _, err := datastoreClient.Put(c, key, &g); err != nil {
							panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [47225]")
					//log.Panicf("[S0368]")
					//update cache
					BLOB_KEY := ""
					BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
					
 
					var buf bytes.Buffer
                    bData, err := readGcsObject(BLOB_KEY)
                    if err != nil {
                        panic(err)
                    }
                    s := bufio.NewScanner(bytes.NewReader(bData))
					secCtr := 0
					for s.Scan() {
						secCtr++
						if secCtr <= MAX_URL_FETCH_LINES {
						//fmt.Fprintf(w, "%v", s.Text())
						buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
						} else {
							break
						}
					}
					
					//cKey := fmt.Sprintf("URLFETCH_LIST")
					cKey := fmt.Sprintf("URLFETCH_LIST_%v", uid)
					putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
					//run the url fetch now
                    time.AfterFunc(5*time.Second, func() {
						//log.Printf("Calling laterUrlFetchInd(): %v, %v", uid, "NOW")
                        laterUrlFetchInd(c, "URL_FETCH_NOTIFS_IND", uid, "NOW")
                    })
					fmt.Fprintf(w, "[TDSMEDIA-%v] URLFETCH List has been set. Note that there is a limit for MAX_URL_FETCH_LINES: %v<br><br>.", MEDIA_ID, MAX_URL_FETCH_LINES)
					fmt.Fprintf(w, "%v", buf.String())
					return
					
				case "REPLACE-MEDIA":
					MEDIA_ID := r.FormValue("MEDIA_ID")
					DATA_TYPE := r.FormValue("DATA_TYPE")
					//blobstore - upload picture
					//------------------------------
					csn2 := getUpUrlString(w,r,"/upload-media")
					uploadURL2 := csn2
					//w.Header().Set("Content-Type", "text/html")
					err := rootTemplateReplaceMedia.Execute(w, uploadURL2)
					if err != nil {
							////log.Panicf("%v", err)
					}
					
					TEMPDATA := TEMPSTRUCT{
						STR_FILLER1: MEDIA_ID,
						STR_FILLER2: DATA_TYPE,
						STR_FILLER3: uid,
					}
					
					err = rootTemplate2ReplaceMedia.Execute(w, &TEMPDATA)
					if err != nil {
							////log.Panicf("%v", err)
					}
					return
				case "VIEW":
                    			//log.Printf("media - VIEW")
					w.Header().Set("Access-Control-Allow-Origin", "*")
					w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
			
					updateUserActiveData(w, r, c, uid, "/media(view)")
					MEDIA_ID := r.FormValue("MEDIA_ID")
					mediaID := str2int(MEDIA_ID)
					DATA_TYPE := r.FormValue("DATA_TYPE")
					TITLE := r.FormValue("TITLE")
					IMG_URL := r.FormValue("IMG_URL")
					SID := fmt.Sprintf("TDSMEDIA-%d", mediaID)
					
					reqStr := fmt.Sprintf("%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v&IMG_URL=%v", domRefMatchS, mediaID, IMG_URL)
					
					//notify all users of this event via channels
					msg := ""
					msgDtl3 := ""
					if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
						msg = getGeoString(w,r)
						shareMe := fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"MEDIA-%v\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", TITLE, ShortenUrl(w,r,reqStr), TITLE)
						msgDtl3 = fmt.Sprintf("UID:%v has viewed MEDIA (<a href=\"%v\" target=\"preview\">%v <img src=\"%v\" width=100 height=70></a>) %v %v https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%v", msg, reqStr, TITLE, IMG_URL, shareMe, mediaID, mediaID)	
					}else{
						msg = uid
						shareMe := fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"MEDIA-%v\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", TITLE, ShortenUrl(w,r,reqStr), TITLE)
						msgDtl3 = fmt.Sprintf("UID:%v has viewed MEDIA (<a href=\"%v\" target=\"preview\">%v <img src=\"%v\" width=100 height=70></a>) %v %v https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%v", msg, reqStr, TITLE, IMG_URL, shareMe, mediaID, mediaID)
						reqStr = fmt.Sprintf("%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v", domRefMatchS, mediaID)
					}
					updateUserActiveData(w, r, c, msg, SID)
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,msg,reqStr,""),SID)
                    //log.Printf("Call getTDSMEDIABlobKey()")
					BLOB_KEY, _, _, AUTHOR, _, _, _, _, _, _, _ := getTDSMEDIABlobKey(w, r, mediaID)
					
					//validate authority
					if GROUP_ID == "GRP_USER" {
						if SYS_NOREG_FIXED_USER != "" {
							//allow
						} else if uid != AUTHOR {
							msgDtl := "[U00063] ERROR: You have no authority to access this function. Accessible only to author or Admin."
							msgTyp := "error"
							msgURL := "/media"
							action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to Media.", msgURL)
							sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
							http.Redirect(w, r, sysReq, http.StatusFound)
							return
						}
					}
						
					//check if GET_WALL is found; means linked content
					i := strings.Index(BLOB_KEY, "GET_WALL:")
					if i != -1 {
						//retrieve media
						
						SPL := strings.Split(BLOB_KEY,"GET_WALL:")
						if len(SPL) > 1 {
							linkedUrl := SPL[1]
							linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
 
 
							if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
							  panic(err)
							}
							
							fmt.Fprintf(w, "<img src=\"/static/img/ucopy.png\" width=100 height=100>")
							fmt.Fprintf(w, "<h3>Note: This is a linked document.</h3><hr>")
							fmt.Fprintf(w, "<br><b>URL:</b> %v", linkedUrl)
							fmt.Fprintf(w, "<br><b>View:</b> <a href=\"%v\">Click here to view</a>", linkedUrl)
							fmt.Fprintf(w, "<br><b>Doc ID:</b> %v", mediaID)
						}
						//return
						
					}
					//} else {
					
						if err := iconsSettingsTemplateHeaderMDUAdmin.Execute(w, ""); err != nil {
							 panic(err)
						}
                        uploadURL2 := getUpUrlString(w,r,"/upload-media")
						//w.Header().Set("Content-Type", "text/html")
						err := rootTemplateMediaA.Execute(w, uploadURL2)
						if err != nil {
								////log.Panicf("%v", err)
						}
						getCategories(w,r,uid)
						err = rootTemplateMediaA2.Execute(w, CATEGORY)
						if err != nil {
								////log.Panicf("%v", err)
						}
                        uploadURL3 := getUpUrlString(w,r,"/upload-media")
						
						err = rootTemplateMediaB.Execute(w, uploadURL3)
						if err != nil {
								////log.Panicf("%v", err)
						}
						getCategories(w,r,uid)
						err = rootTemplateMediaB2.Execute(w, CATEGORY)
						if err != nil {
								////log.Panicf("%v", err)
						}
						media := make([]TDSMEDIA, 0, 1)
						//display media
						if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
							//BLOB_KEY
							//http://192.168.1.51:7070/5,0fd38ff61a	
							//tmedia, err := tiedotMediaQueryByBlobKey(w,r)
							tmedia, err := tiedotMediaQueryByMediaId(w,r)
							if err != nil {
								//ulapphDebug(w,r, "critical", fmt.Sprintf("tiedotMediaQueryByBlobKey() ERROR: %v", err))
								ulapphDebug(w,r, "critical", fmt.Sprintf("tiedotMediaQueryByMediaId() ERROR: %v", err))
								return
							}
							for k, v := range tmedia {
								ulapphDebug(w,r, "info", fmt.Sprintf("k: %v", k))
								//ithisItem := v.(map[string]TDSMEDIA)
								thisItem := v
								ulapphDebug(w,r, "info", fmt.Sprintf("thisItem: %v", thisItem))
								//p := TDSMEDIA {
								//	TITLE: thisItem["TITLE"].(string),
								//	IMG_URL: thisItem["IMG_URL"].(string),
								//	DT_UPLOAD: thisItem["DT_UPLOAD"].(string),
								//}
								p := TDSMEDIA {
									//TITLE: thisItem["TITLE"].(string),
									//IMG_URL: thisItem["IMG_URL"].(string),
									//DT_UPLOAD: thisItem["DT_UPLOAD"].(string),
									SYS_VER: 0,	
									MEDIA_ID: 0,	
									//MEDIA_ID: time.Now().Unix(),
									DOC_ID: 0,	
									DATA_TYPE: thisItem.DATA_TYPE,
									PROP: thisItem.PROP,	
									//TITLE: TITLE,
									TITLE: thisItem.TITLE,
									DESC: thisItem.DESC,
									AUTHOR: thisItem.AUTHOR,			
									YEAR: thisItem.YEAR,	
									CATEGORY: thisItem.CATEGORY,	
									DOC_STAT: thisItem.DOC_STAT,
									FL_SHARED: thisItem.FL_SHARED,
									SHARED_TO: thisItem.SHARED_TO,
									IMG_URL: thisItem.IMG_URL,
									BLOB_KEY:  thisItem.BLOB_KEY,	
									DT_UPLOAD: thisItem.DT_UPLOAD,	
									NUM_LIKES: 0,	
									NUM_COMMENTS: 0,	
									LIKED_BY: "",	
									COMMENTS_BY: "",
									NUM_VIEWS: 0,
									MIME_TYPE: thisItem.MIME_TYPE,
								}
								media = append(media, p)
							}
						} else {
							datastoreClient := createClientDS()
							dsKey := fmt.Sprintf("%d", mediaID)
							key := datastore.NameKey("TDSMEDIA", dsKey, nil)
							q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
							//log.Panicf("[S0369]")
							if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 		panic(err)
							}
							//log.Printf("datastoreClient.Get()  [47393]")
						}
						for _, p := range media{
								
								switch {
								case p.DATA_TYPE == "image":
									fmt.Fprintf(w, "<b>Title:</b> [TDSMEDIA-%v] %v<br>", p.MEDIA_ID, p.TITLE)
									fmt.Fprintf(w, "<b>Media ID:</b> %v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>SID:</b> TDSMEDIA-%v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Admin URL:</b> <a href=\"/media?FUNC_CODE=VIEW&MEDIA_ID=%v\">%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v</a><br>", p.MEDIA_ID, getSchemeUrl(w,r), p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Shared Status:</b> %v<br>", p.FL_SHARED)
									fmt.Fprintf(w, "<b>Author: </b> %v<br>", p.AUTHOR)
									fmt.Fprintf(w, "<b>Publish Status:</b> %v<br>", p.DOC_STAT)
									fmt.Fprintf(w, "<b>Category:</b> %v<br>", p.CATEGORY)
									URL_DIS := fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSMEDIA-%v&TITLE=%v", p.MEDIA_ID, TITLE)
									fmt.Fprintf(w, "<b>Discussion:</b> <a href=\"%v\">View Comments</a><br>", URL_DIS)
									fmt.Fprintf(w, "<b>Media Type:</b> %v<br>", p.DATA_TYPE)
									fmt.Fprintf(w, "<b>Mime Type:</b> %v<br>", p.MIME_TYPE)
									fmt.Fprintf(w, "<b>Title:</b> %v<br>", p.TITLE)
									fmt.Fprintf(w, "<b>Desc:</b> %v<br>", p.DESC)
									fmt.Fprintf(w, "<b>Timestamp:</b> %v<br>", p.DT_UPLOAD)
									perURL := fmt.Sprintf("%vmedia?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", domRefMatchS, p.MEDIA_ID, p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Image URL (Permanent):</b><a href=\"%v\" id=\"murl\">%v</a><br>", getSchemeNewUrl(w,r,perURL), getSchemeNewUrl(w,r,perURL))
									fmt.Fprintf(w, "<b>Image URL (Permanent-Short):</b><a href=\"%v\" id=\"murl\">%v</a><br>", ShortenUrl(w,r,perURL), ShortenUrl(w,r,perURL))
									
									fmt.Fprintf(w, "<b>Upload & Replace:</b> <a href=\"/media?FUNC_CODE=REPLACE-MEDIA&DATA_TYPE=%v&MEDIA_ID=%v&SID=TDSMEDIA-%v\"><img src=\"/static/img/upload-icon.png\" width=\"40\" height=\"40\"></img></a><br>", p.DATA_TYPE, p.MEDIA_ID, p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Image URL (Temporary):</b><a href=\"%v\" id=\"murl\">%v</a><br>", getSchemeNewUrl(w,r,p.IMG_URL), getSchemeNewUrl(w,r,p.IMG_URL))
									fmt.Fprintf(w, "<b>View Sizes:</b>[<a href=\"%v=s300\">300</a>] [<a href=\"%v=s600\">600</a>] [<a href=\"%v=s800\">800</a>] [<a href=\"%v=s1000\">1000</a>] [<a href=\"%v=s1200\">1200</a>] [<a href=\"%v=s1500\">1500</a>] [<a href=\"%v=s2000\">2000</a>]<br>", getSchemeNewUrl(w,r,p.IMG_URL), getSchemeNewUrl(w,r,p.IMG_URL), getSchemeNewUrl(w,r,p.IMG_URL), getSchemeNewUrl(w,r,p.IMG_URL), getSchemeNewUrl(w,r,p.IMG_URL), getSchemeNewUrl(w,r,p.IMG_URL), getSchemeNewUrl(w,r,p.IMG_URL))
									fmt.Fprintf(w, "<b>Blob Key:</b> %v<br>", p.BLOB_KEY)
									fmt.Fprintf(w, "<b>Save to Local Storage:</b><a href=\"/uloc?LS_FUNC=MEDIA_IMAGE&MEDIA_ID=%v&SID=TDSMEDIA-%v&IMG_SRC=%v&TITLE=%v\"><img src=\"/static/img/uloc.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.IMG_URL, p.TITLE)
									fmt.Fprintf(w, "<b>Share to Social Media:</b><a href=\"/share?SH_FUNC=all&title=%v&url=%v\"><img src=\"/static/img/sharethis.png\" width=\"40\" height=\"40\"></img></a><br>", p.TITLE, p.IMG_URL)
									fmt.Fprintf(w, "<b>Download as Bytes:</b><a download=\"TDSMEDIA-%v-bytes\" href=\"/uloc?LS_FUNC=IMG2BYTE&imgUrl=%v\">Download Image Bytes</a><br>", p.MEDIA_ID, p.IMG_URL)
									//image
									fmt.Fprintf(w, "<b>Wall Copy:</b> <a href=\"/wall?WALL_FUNC=MEDIA_COPY&MEDIA_ID=%v&SID=TDSMEDIA-%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.TITLE, CMD_GEN_KEY)
									
									if p.SYS_VER == 888 {
										fmt.Fprintf(w, "<b>Pinned:</b> <img src=\"/static/img/pinned.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=1&MEDIA_ID=%v\">Unpin</a>]<br>", p.MEDIA_ID)		
									} else {
										fmt.Fprintf(w, "<b>Not Pinned:</b> <img src=\"/static/img/pinned2.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=888&MEDIA_ID=%v\">Pin</a>]<br>", p.MEDIA_ID)										
									}
									if GROUP_ID == "GRP_ADMIN" {
										if SYS_WALLP_ADMIN_ONLY == true {
											if p.PROP != "big_wp2" {
											fmt.Fprintf(w, "<b>Use as Wallpaper:</b> [ <a href=\"/media?FUNC_CODE=ADD_REM_RAN_WP&MEDIA_ID=%v&PROP=big_wp2\">Add Random Wallpaper</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=loginWP&imageURL=%v=s256\">Set D0 Small WP</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=bigWP&imageURL=%v=s2000\">Set D0 Big WP</a> ] [ <a href=\"#set-wp-other\">Set Other Desktops WP</a> ]", p.MEDIA_ID, p.IMG_URL, p.IMG_URL)
											} else {
											fmt.Fprintf(w, "<b>Use as Wallpaper:</b> [ <a href=\"/media?FUNC_CODE=ADD_REM_RAN_WP&MEDIA_ID=%v&PROP=\">Remove Random Wallpaper</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=loginWP&imageURL=%v=s256\">Set D0 Small WP</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=bigWP&imageURL=%v=s2000\">Set D0 Big WP</a> ] [ <a href=\"#set-wp-other\">Set Other Desktops WP</a> ]", p.MEDIA_ID, p.IMG_URL, p.IMG_URL)		
											}			
										} else {
											if p.PROP != "big_wp" {
											fmt.Fprintf(w, "<b>Use as Wallpaper:</b> [ <a href=\"/media?FUNC_CODE=ADD_REM_RAN_WP&MEDIA_ID=%v&PROP=big_wp\">Add Random Wallpaper</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=loginWP&imageURL=%v=s256\">Set D0 Small WP</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=bigWP&imageURL=%v=s2000\">Set D0 Big WP</a> ] [ <a href=\"#set-wp-other\">Set Other Desktops WP</a> ]", p.MEDIA_ID, p.IMG_URL, p.IMG_URL)
											} else {
											fmt.Fprintf(w, "<b>Use as Wallpaper:</b> [ <a href=\"/media?FUNC_CODE=ADD_REM_RAN_WP&MEDIA_ID=%v&PROP=\">Remove Random Wallpaper</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=loginWP&imageURL=%v=s256\">Set D0 Small WP</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=bigWP&imageURL=%v=s2000\">Set D0 Big WP</a> ] [ <a href=\"#set-wp-other\">Set Other Desktops WP</a> ]", p.MEDIA_ID, p.IMG_URL, p.IMG_URL)		
											}
										}
										fmt.Fprintf(w, "[ <a href=\"/admin-setup?ADMIN_FUNC=SET_AS_AD&TYPE=%v&MEDIA_ID=%v&IMG_URL=%v\">Set as Advertisement</a> ]", p.DATA_TYPE, p.MEDIA_ID, p.IMG_URL)
										
										err := rootSetDesktopNWP.Execute(w, p.IMG_URL)
										if err != nil {
												////log.Panicf("%v", err)
										}
										getCategories(w,r,uid)
										err = rootSetDesktopNWP2.Execute(w, p.IMG_URL)
										if err != nil {
												////log.Panicf("%v", err)
										}
									} else {
										if SYS_WALLP_ADMIN_ONLY == true {
											if p.PROP != "big_wp2" {
											fmt.Fprintf(w, "<b>Use as Wallpaper:</b> [ <a href=\"/media?FUNC_CODE=ADD_REM_RAN_WP&MEDIA_ID=%v&PROP=big_wp2\">Add Random Wallpaper</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=loginWP&imageURL=%v=s256\">Set D0 Small WP</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=bigWP&imageURL=%v=s2000\">Set D0 Big WP</a> ]", p.MEDIA_ID, p.IMG_URL, p.IMG_URL)	
											} else {
											fmt.Fprintf(w, "<b>Use as Wallpaper:</b> [ <a href=\"/media?FUNC_CODE=ADD_REM_RAN_WP&MEDIA_ID=%v&PROP=\">Remove Random Wallpaper</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=loginWP&imageURL=%v=s256\">Set D0 Small WP</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=bigWP&imageURL=%v=s2000\">Set D0 Big WP</a> ]", p.MEDIA_ID, p.IMG_URL, p.IMG_URL)									
											}			
										} else {
											if p.PROP != "big_wp" {
											fmt.Fprintf(w, "<b>Use as Wallpaper:</b>[ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=loginWP&imageURL=%v=s256\">Set D0 Small WP</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=bigWP&imageURL=%v=s2000\">Set D0 Big WP</a> ]", p.IMG_URL, p.IMG_URL)	
											} else {
											fmt.Fprintf(w, "<b>Use as Wallpaper:</b>[ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=loginWP&imageURL=%v=s256\">Set D0 Small WP</a> ] [ <a href=\"/settings-display-screen?setWallpaper=setD0WP&targetWP=bigWP&imageURL=%v=s2000\">Set D0 Big WP</a> ]", p.IMG_URL, p.IMG_URL)									
											}
										}
									}
									fmt.Fprintf(w, "<hr>")
									fmt.Fprintf(w, "<a href=\"%v\"><img src=\"%v\"></img></a>", getSchemeNewUrl(w,r,p.IMG_URL), getSchemeNewUrl(w,r,p.IMG_URL))
									fmt.Fprintf(w, "<button onclick=\"copyToClipboard('#murl')\">Copy IMG_URL</button> <button onclick=\"copyToSlides('#slime')\">Include Me!</button>")
                                    uploadURL2 := getUpUrlString(w,r,"/upload-media")
									
									err := rootTemplateMediaC1.Execute(w, uploadURL2)
									if err != nil {
											////log.Panicf("%v", err)
									}
									
									err = rootTemplateMediaC2.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									getCategories(w,r,uid)
									err = rootTemplateMediaC3.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									//delete form
									err = rootTemplateMediaU1Del.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}	
									err = rootTemplateMediaU1SharedTo.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}

								case p.DATA_TYPE == "text":
 
									fmt.Fprintf(w, "<b>Title:</b> [TDSMEDIA-%v] %v - %v<br>", p.MEDIA_ID, p.TITLE, p.DESC)
									if p.SYS_VER == 777 {
										fmt.Fprintf(w, "<b>Encrypted:</b> <img src=\"/static/img/encrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=ENC_MEDIA&P=666&MEDIA_ID=%v\">Decrypt</a>] [ <a download=\"TDSMEDIA-%v-%v.txt\" href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\">Backup Encrypted File</a> ]<br>", p.MEDIA_ID, p.MEDIA_ID, TITLE, p.MEDIA_ID, p.MEDIA_ID)		
									} else {
											
										if p.SYS_VER == 666 {
											fmt.Fprintf(w, "<b>Not Encrypted:</b> <img src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=ENC_MEDIA&P=777&MEDIA_ID=%v\">Encrypt</a>] (Encryption Enabled - <a href=\"/media?FUNC_CODE=ENC_MEDIA&P=0&MEDIA_ID=%v\">Turn Off</a>)<br>", p.MEDIA_ID, p.MEDIA_ID)
										} else {
											fmt.Fprintf(w, "<b>Not Encrypted:</b> <img src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=ENC_MEDIA&P=777&MEDIA_ID=%v\">Encrypt</a>] [ <a download=\"TDSMEDIA-%v-%v.txt\" href=\"/editor?EDIT_FUNC=CRYPTO&EDIT_MODE=NEW-CRYPTO&sid=TDSMEDIA-%v&ct=e&cv=d\">Backup Encrypted File</a> ]<br>", p.MEDIA_ID, p.MEDIA_ID, TITLE, p.MEDIA_ID)
										}
																									
									}
									fmt.Fprintf(w, "<b>Edit:</b> [ <a href=\"/editor?MEDIA_ID=%v&SID=TDSMEDIA-%v&CATEGORY=%v\">Text Editor1</a> ] [ <a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=%v&SID=TDSMEDIA-%v&CATEGORY=%v\">Text Editor2</a> ] [ <a href=\"/media?FUNC_CODE=RAWTEXT&MEDIA_ID=%v&SID=TDSMEDIA-%v\">View Raw Text</a> ] [ <a href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\">View Original Text</a> ] [ <a href=\"/media?FUNC_CODE=GET_MEDIA&MEDIA_ID=%v&SID=TDSMEDIA-%v\">View Hyperlink</a> ] [ <a download=\"TDSMEDIA-%v-%v.doc\" href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\">Download Doc File</a> ] [ <a download=\"TDSMEDIA-%v-%v.txt\" href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\">Download Text File</a> ] [ <a href=\"/media?FUNC_CODE=RAWJSON&MEDIA_ID=%v&SID=TDSMEDIA-%v\">View Raw JSON</a> ] [ <a href=\"/editor?EDIT_FUNC=TIMELINE&SID=TDSMEDIA-%v\">View Timeline</a> ] [ <a href=\"/mindmaps/?SID=TDSMEDIA-%v&UID=%v\">View Mindmap</a> ] [ <a href=\"/tree?SID=TDSMEDIA-%v&UID=%v\">View Tree</a> ] [ <a href=\"/editor?EDIT_FUNC=DRAW&SID=TDSMEDIA-%v\">View Drawing</a> ] [ <a href=\"/orgchart?SID=TDSMEDIA-%v\">View OrgChart</a>] [ <a href=\"/bot?bFunc=bchat&SID=TDSMEDIA-%v\">View Bot</a>]<br>", p.MEDIA_ID, p.MEDIA_ID, p.CATEGORY, p.MEDIA_ID, p.MEDIA_ID, p.CATEGORY, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, TITLE, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, TITLE, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, uid, p.MEDIA_ID, uid, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Media ID:</b> %v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>SID:</b> TDSMEDIA-%v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Set As UWM:</b> setuwm TDSMEDIA-%v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Set As Topics:</b> settopics TDSMEDIA-%v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Set As Bot:</b> setbot TDSMEDIA-%v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Admin URL:</b> <a href=\"/media?FUNC_CODE=VIEW&MEDIA_ID=%v\">%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v</a><br>", p.MEDIA_ID, getSchemeUrl(w,r), p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Shared Status:</b> %v<br>", p.FL_SHARED)
									fmt.Fprintf(w, "<b>Author: </b> %v<br>", p.AUTHOR)
									fmt.Fprintf(w, "<b>Publish Status:</b> %v<br>", p.DOC_STAT)
									fmt.Fprintf(w, "<b>Category:</b> %v<br>", p.CATEGORY)
									URL_DIS := fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSMEDIA-%v&TITLE=%v", p.MEDIA_ID, TITLE)
									fmt.Fprintf(w, "<b>Discussion:</b> <a href=\"%v\">View Comments</a><br>", URL_DIS)
									prevLink := fmt.Sprintf("https://www.ulapph.com/editor?EDIT_FUNC=READER_PREVIOUS&SID=TDSMEDIA-%v&CATEGORY=%v", p.MEDIA_ID, p.CATEGORY)
									ranLink := fmt.Sprintf("https://www.ulapph.com/editor?EDIT_FUNC=READER_RANDOM&SID=TDSMEDIA-%v&CATEGORY=%v", p.MEDIA_ID, p.CATEGORY)
									nextLink := fmt.Sprintf("https://www.ulapph.com/editor?EDIT_FUNC=READER_NEXT&SID=TDSMEDIA-%v&CATEGORY=%v", p.MEDIA_ID, p.CATEGORY)
									fmt.Fprintf(w, "<b>Explore:</b> [<a href=\"%v\" target=explore>Previous</a>] [<a href=\"%v\" target=explore>Random</a>] [<a href=\"%v\" target=explore>Next</a>]<br>", prevLink, ranLink, nextLink)
									fmt.Fprintf(w, "<b>Media Type:</b> %v<br>", DATA_TYPE)
									fmt.Fprintf(w, "<b>Mime Type:</b> %v<br>", p.MIME_TYPE)
									fmt.Fprintf(w, "<b>Title:</b> %v<br>", p.TITLE)
									fmt.Fprintf(w, "<b>Desc:</b> %v<br>", p.DESC)
									thisURL := getSchemeNewUrl(w,r,p.IMG_URL)
									fmt.Fprintf(w, "<b>Image URL:</b><img src=\"%v\" width=\"40\" height=\"40\"><a href=\"%v\" id=\"murl\">%v</a><br>", thisURL, thisURL, thisURL)
									fmt.Fprintf(w, "<b>Blob Key:</b> %v<br>", p.BLOB_KEY)
									if SYS_DISP_HOMEPAGE_CFG == true {
									reqStr := fmt.Sprintf("%vmedia?FUNC_CODE=RAWTEXT&MEDIA_ID=%v&SID=TDSMEDIA-%v", getSchemeUrl(w,r), p.MEDIA_ID, p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Set as Homepage:</b><a href=\"/admin-setup?ADMIN_FUNC=SET_AS_HOMEPAGE&URL=%v\"><img src=\"/static/img/www.png\" width=\"50\" height=\"40\"></img></a><br>", ShortenUrl(w,r,reqStr))
									}
									fmt.Fprintf(w, "<b>Save to Local Storage:</b><a href=\"/uloc?LS_FUNC=MEDIA_TEXT&MEDIA_ID=%v&SID=TDSMEDIA-%v&IMG_SRC=%v&TITLE=%v\"><img src=\"/static/img/uloc.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.IMG_URL, p.TITLE)
									fmt.Fprintf(w, "<b>Share to Social Media:</b><a href=\"/share?SH_FUNC=all&title=%v&url=%v\"><img src=\"/static/img/sharethis.png\" width=\"40\" height=\"40\"></img></a><br>", p.TITLE, reqStr)
									//text
									fmt.Fprintf(w, "<b>Wall Copy:</b> <a href=\"/wall?WALL_FUNC=MEDIA_COPY&MEDIA_ID=%v&SID=TDSMEDIA-%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.TITLE, CMD_GEN_KEY)
									
									if p.SYS_VER == 888 {
										fmt.Fprintf(w, "<b>Pinned:</b> <img src=\"/static/img/pinned.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=1&MEDIA_ID=%v\">Unpin</a>]<br>", p.MEDIA_ID)		
									} else {
										fmt.Fprintf(w, "<b>Not Pinned:</b> <img src=\"/static/img/pinned2.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=888&MEDIA_ID=%v\">Pin</a>]<br>", p.MEDIA_ID)										
									}
									uLink := fmt.Sprintf("%v?q=ushare&SID=TDSMEDIA-%v&TITLE=%v", getSchemeUrl(w,r), p.MEDIA_ID, p.TITLE)
									fmt.Fprintf(w, "<b>Ushare(if applicable):</b> <a href=\"%v\">%v</a><br>", uLink, uLink)
									if p.DOC_STAT != "Personal" && p.FL_SHARED == "Y" {
										fmt.Fprintf(w, "<b>Ushare(shortlink):</b> <a href=\"%v\">%v</a><br>", ShortenUrl(w,r,uLink), ShortenUrl(w,r,uLink))
									}
									
									//newconfigtemplate
									if GROUP_ID == "GRP_ADMIN" {
										//newconfigtemplate
										fmt.Fprintf(w, "<b>For Admins:</b> [ <a href=\"/admin-setup?ADMIN_FUNC=SET_TABZILLA_SOURCE&MEDIA_ID=%v\">Set as Tabzilla Menu</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_LEFT_MENU_SOURCE&MEDIA_ID=%v\">Set as Hidable Left Menu</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_TOP_LIST_MENU_SOURCE&MEDIA_ID=%v\">Set as SYSTEM Top List Menu</a> ] [ <a href=\"/people-edit?EditPeopleFunc=SET_TOP_LIST_MENU_MINE_SOURCE&MEDIA_ID=%v\">Set as PERSONAL Top List Menu</a> ] [ <a href=\"/people-edit?EditPeopleFunc=SET_WINDOWS_MINE_SOURCE&MEDIA_ID=%v\">Set as UWM Windows Source</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_CATEGORY_LIST&MEDIA_ID=%v\">Set as Categories List</a> ] [ <a href=\"/media?FUNC_CODE=SET_URLFETCH_LIST&MEDIA_ID=%v\">Set as URL Fetcher</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_PUBWP_LIST&MEDIA_ID=%v\">Set as Public Wallpaper List</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_PUB_UWM&MEDIA_ID=%v\">Set as Public UWM</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_HOST_LIST&MEDIA_ID=%v\">Set as SEARCH HOST List</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_HOST_LIST2&MEDIA_ID=%v\">Set as USERS HOST List</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_ADS_TS&MEDIA_ID=%v\">Set as Ads Slots Template</a> ] [ <a href=\"/admin-setup?ADMIN_FUNC=SET_AS_AD&TYPE=%v&MEDIA_ID=%v&IMG_URL=%v\">Set as Advertisement</a> ]<br>", p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.DATA_TYPE, p.MEDIA_ID, p.IMG_URL)
									}
									
									fmt.Fprintf(w, "<b>For Users:</b> [ <a href=\"/people-edit?EditPeopleFunc=SET_TOP_LIST_MENU_MINE_SOURCE&MEDIA_ID=%v\">Set as PERSONAL Top List Menu</a> ] [ <a href=\"/people-edit?EditPeopleFunc=SET_WINDOWS_MINE_SOURCE&MEDIA_ID=%v\">Set as UWM Windows Source</a> ] [ <a href=\"/media?FUNC_CODE=SET_URLFETCH_LIST&MEDIA_ID=%v\">Set as URL Fetcher</a> ] [ <a href=\"/people-edit?EditPeopleFunc=SET_CONTACTS_LIST&MEDIA_ID=%v\">Set as Contacts List</a> ] [ <a href=\"/people-edit?EditPeopleFunc=SetMyLocalNotesMediaID&MEDIA_ID=%v\">Set as Sticky Notes File</a> ] [ <a href=\"/people-edit?EditPeopleFunc=SET_CUSTOM_SEARCH_MINE_SOURCE&MEDIA_ID=%v\">Set as PERSONAL Custom Search</a> ]<br>", p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID)
									embLink := fmt.Sprintf("%vmedia?FUNC_CODE=RAWTEXT&MEDIA_ID=%v&SID=TDSMEDIA-%v", getSchemeUrl(w,r), p.MEDIA_ID, p.MEDIA_ID)
									fmt.Fprintf(w, "<b>IFRAME Embed Link:</b><br><textarea  name=\"embed\" rows=\"5\" cols=\"40\"/>%v</textarea><br>", embLink)
									if p.DOC_STAT != "Personal" && p.FL_SHARED == "Y" {
										fmt.Fprintf(w, "<b>IFRAME Embed Link(Short):</b><a href=\"%v\">%v</a><br>", ShortenUrl(w,r,embLink), ShortenUrl(w,r,embLink))
									}
									fmt.Fprintf(w, "<hr>")
									fmt.Fprintf(w, "<h1>%v<h1>", TITLE)
                                    fmt.Fprintf(w, "<div class=\"CodeBox\">")
									ct, _, err := readLines4(w, r, p.BLOB_KEY)
 
									if err != nil {
										//panic(err)
										fmt.Fprintf(w, "<font color=red>blobstore: ERROR: %v</font>", err)
									}
									fmt.Fprintf(w, "</div>")
									
									err = rootTemplateMediaD1.Execute(w, "")
									if err != nil {
											////log.Panicf("%v", err)
									}
									err = rootTemplateMediaD2.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									getCategories(w,r,uid)
									err = rootTemplateMediaD3.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									//delete form
									err = rootTemplateMediaU1Del.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									if ct == "golang" {
											//p.IMG_URL = "/static/img/golang.png"
											err = rootTemplateMediaU1Go.Execute(w, template.HTML("/static/img/golang.png"))
											if err != nil {
													////log.Panicf("%v", err)
											}
									}
									err = rootTemplateMediaU1SharedTo.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									
								case p.DATA_TYPE == "music":

									fmt.Fprintf(w, "<b>Media ID:</b> %v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>SID:</b> TDSMEDIA-%v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Admin URL:</b> <a href=\"/media?FUNC_CODE=VIEW&MEDIA_ID=%v\">%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v</a><br>", p.MEDIA_ID, getSchemeUrl(w,r), p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Shared Status:</b> %v<br>", p.FL_SHARED)
									fmt.Fprintf(w, "<b>Author: </b> %v<br>", p.AUTHOR)
									fmt.Fprintf(w, "<b>Publish Status:</b> %v<br>", p.DOC_STAT)
									fmt.Fprintf(w, "<b>Category:</b> %v<br>", p.CATEGORY)
									URL_DIS := fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSMEDIA-%v&TITLE=%v", p.MEDIA_ID, TITLE)
									fmt.Fprintf(w, "<b>Discussion:</b> <a href=\"%v\">View Comments</a><br>", URL_DIS)
									fmt.Fprintf(w, "<b>Media Type:</b> %v<br>", p.DATA_TYPE)
									fmt.Fprintf(w, "<b>Mime Type:</b> %v<br>", p.MIME_TYPE)
									fmt.Fprintf(w, "<b>Title:</b> %v<br>", p.TITLE)
									fmt.Fprintf(w, "<b>Desc:</b> %v<br>", p.DESC)
									thisURL := getSchemeNewUrl(w,r,p.IMG_URL)
									fmt.Fprintf(w, "<b>Image URL:</b><a href=\"%v\" id=\"murl\">%v</a><br>", thisURL, thisURL)
									fmt.Fprintf(w, "<b>Blob Key:</b> %v<br>", p.BLOB_KEY)
									//fmt.Fprintf(w, "<b>Save to Local Storage:</b><a href=\"/uloc?LS_FUNC=MEDIA_IMAGE&MEDIA_ID=%v&SID=TDSMEDIA-%v&IMG_SRC=%v&TITLE=%v\"><img src=\"/static/img/uloc.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.IMG_URL, p.TITLE)
									//music
									fmt.Fprintf(w, "<b>Wall Copy:</b> <a href=\"/wall?WALL_FUNC=MEDIA_COPY&MEDIA_ID=%v&SID=TDSMEDIA-%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.TITLE, CMD_GEN_KEY)
									
									if p.SYS_VER == 888 {
										fmt.Fprintf(w, "<b>Pinned:</b> <img src=\"/static/img/pinned.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=1&MEDIA_ID=%v\">Unpin</a>]<br>", p.MEDIA_ID)		
									} else {
										fmt.Fprintf(w, "<b>Not Pinned:</b> <img src=\"/static/img/pinned2.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=888&MEDIA_ID=%v\">Pin</a>]<br>", p.MEDIA_ID)										
									}
									fmt.Fprintf(w, "[ <a href=\"/admin-setup?ADMIN_FUNC=SET_AS_AD&TYPE=%v&MEDIA_ID=%v&IMG_URL=%v\">Set as Advertisement</a> ]", p.DATA_TYPE, p.MEDIA_ID, p.IMG_URL)
									fmt.Fprintf(w, "<hr>")
									fmt.Fprintf(w, "<img src=\"%v\" width=40 height=40></img><br>", p.IMG_URL)
									fmt.Fprintf(w, "<a href=\"/media?FUNC_CODE=PLAY&BLOB_KEY=%v&SID=TDSMEDIA-%v\">Play Music</a><br>", p.BLOB_KEY, p.MEDIA_ID)
									fmt.Fprintf(w, "    <audio id='blob_audio' controls preload='auto'>")
									fmt.Fprintf(w, "      <source id='blob_ogg_src' src='/media?FUNC_CODE=PLAY&BLOB_KEY=%v' type='audio/ogg'>", p.BLOB_KEY)
									fmt.Fprintf(w, "      <source id='blob_mp3_src' src='/media?FUNC_CODE=PLAY&BLOB_KEY=%v' type='audio/mp3'>", p.BLOB_KEY)
									fmt.Fprintf(w, "      <source id='blob_wav_src' src='/media?FUNC_CODE=PLAY&BLOB_KEY=%v' type='audio/wav'>", p.BLOB_KEY)
									fmt.Fprintf(w, "      No html5 audio for you.")
									fmt.Fprintf(w, "    </audio><br>")
									embLink := fmt.Sprintf("%vmedia?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", getSchemeUrl(w,r), p.MEDIA_ID, p.MEDIA_ID)
									fmt.Fprintf(w, "<b>IFRAME Embed Link:</b><br><textarea  name=\"embed\" rows=\"5\" cols=\"40\"/>%v</textarea><br>", embLink)
									if p.DOC_STAT != "Personal" && p.FL_SHARED == "Y" {
										fmt.Fprintf(w, "<b>IFRAME Embed Link(Short):</b><a href=\"%v\">%v</a><br>", ShortenUrl(w,r,embLink), ShortenUrl(w,r,embLink))
									}
									err = rootTemplateMediaGenUp1.Execute(w, "")
									if err != nil {
											////log.Panicf("%v", err)
									}
									
									err = rootTemplateMediaGenUp2.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									getCategories(w,r,uid)
									err = rootTemplateMediaGenUp3.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									//delete form
									err = rootTemplateMediaU1Del.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									err = rootTemplateMediaU1SharedTo.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}

								case p.DATA_TYPE == "video":
								
									fmt.Fprintf(w, "<b>Media ID:</b> %v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>SID:</b> TDSMEDIA-%v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Admin URL:</b> <a href=\"/media?FUNC_CODE=VIEW&MEDIA_ID=%v\">%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v</a><br>", p.MEDIA_ID, getSchemeUrl(w,r), p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Shared Status:</b> %v<br>", p.FL_SHARED)
									fmt.Fprintf(w, "<b>Author: </b> %v<br>", p.AUTHOR)
									fmt.Fprintf(w, "<b>Publish Status:</b> %v<br>", p.DOC_STAT)
									fmt.Fprintf(w, "<b>Category:</b> %v<br>", p.CATEGORY)
									URL_DIS := fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSMEDIA-%v&TITLE=%v", p.MEDIA_ID, TITLE)
									fmt.Fprintf(w, "<b>Discussion:</b> <a href=\"%v\">View Comments</a><br>", URL_DIS)
									fmt.Fprintf(w, "<b>Media Type:</b> %v<br>", p.DATA_TYPE)
									fmt.Fprintf(w, "<b>Mime Type:</b> %v<br>", p.MIME_TYPE)
									fmt.Fprintf(w, "<b>Title:</b> %v<br>", p.TITLE)
									fmt.Fprintf(w, "<b>Desc:</b> %v<br>", p.DESC)
									thisURL := getSchemeNewUrl(w,r,p.IMG_URL)
									fmt.Fprintf(w, "<b>Image URL:</b><a href=\"%v\" id=\"murl\">%v</a><br>", thisURL, thisURL)
									fmt.Fprintf(w, "<b>Blob Key:</b> %v<br>", p.BLOB_KEY)
									//video
									fmt.Fprintf(w, "<b>Wall Copy:</b> <a href=\"/wall?WALL_FUNC=MEDIA_COPY&MEDIA_ID=%v&SID=TDSMEDIA-%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.TITLE, CMD_GEN_KEY)
									
									if p.SYS_VER == 888 {
										fmt.Fprintf(w, "<b>Pinned:</b> <img src=\"/static/img/pinned.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=1&MEDIA_ID=%v\">Unpin</a>]<br>", p.MEDIA_ID)		
									} else {
										fmt.Fprintf(w, "<b>Not Pinned:</b> <img src=\"/static/img/pinned2.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=888&MEDIA_ID=%v\">Pin</a>]<br>", p.MEDIA_ID)										
									}
									fmt.Fprintf(w, "[ <a href=\"/admin-setup?ADMIN_FUNC=SET_AS_AD&TYPE=%v&MEDIA_ID=%v&IMG_URL=%v\">Set as Advertisement</a> ]", p.DATA_TYPE, p.MEDIA_ID, p.IMG_URL)
									fmt.Fprintf(w, "<hr>")
									fmt.Fprintf(w, "<img src=\"%v\" width=40 height=40></img><br>", p.IMG_URL)
									fmt.Fprintf(w, "<a href=\"/media?FUNC_CODE=PLAY&BLOB_KEY=%v&SID=TDSMEDIA-%v\">Play Video</a><br>", p.BLOB_KEY, p.MEDIA_ID)
									fmt.Fprintf(w, "    <video id='gs_video' width='640' height='360' controls preload='auto'>")
									fmt.Fprintf(w, "      <source id='gs_video_ogv' src='/media?FUNC_CODE=PLAY&BLOB_KEY=%v' type='video/ogv' />", p.BLOB_KEY)
									fmt.Fprintf(w, "      <source id='gs_video_mp4' src='/media?FUNC_CODE=PLAY&BLOB_KEY=%v' type='video/mp4' />", p.BLOB_KEY)
									fmt.Fprintf(w, "      <source id='gs_video_webm' src='/media?FUNC_CODE=PLAY&BLOB_KEY=%v' type='video/webm' />", p.BLOB_KEY)
									fmt.Fprintf(w, "      No html5 video for you.")
									fmt.Fprintf(w, "    </video><br>")
									embLink := fmt.Sprintf("%vmedia?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", getSchemeUrl(w,r), p.MEDIA_ID, p.MEDIA_ID)
									fmt.Fprintf(w, "<b>IFRAME Embed Link:</b><br><textarea  name=\"embed\" rows=\"5\" cols=\"40\"/>%v</textarea><br>", embLink)
									if p.DOC_STAT != "Personal" && p.FL_SHARED == "Y" {
										fmt.Fprintf(w, "<b>IFRAME Embed Link(Short):</b><a href=\"%v\">%v</a><br>", ShortenUrl(w,r,embLink), ShortenUrl(w,r,embLink))
									}
									
									err = rootTemplateMediaGenUp1.Execute(w, "")
									if err != nil {
											////log.Panicf("%v", err)
									}
									
									err = rootTemplateMediaGenUp2.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									getCategories(w,r,uid)
									err = rootTemplateMediaGenUp3.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									//delete form
									err = rootTemplateMediaU1Del.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									err = rootTemplateMediaU1SharedTo.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									
								case p.DATA_TYPE == "midi":
								
									fmt.Fprintf(w, "<b>Media ID:</b> %v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>SID:</b> TDSMEDIA-%v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Admin URL:</b> <a href=\"/media?FUNC_CODE=VIEW&MEDIA_ID=%v\">%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v</a><br>", p.MEDIA_ID, getSchemeUrl(w,r), p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Shared Status:</b> %v<br>", p.FL_SHARED)
									fmt.Fprintf(w, "<b>Author: </b> %v<br>", p.AUTHOR)
									fmt.Fprintf(w, "<b>Publish Status:</b> %v<br>", p.DOC_STAT)
									fmt.Fprintf(w, "<b>Category:</b> %v<br>", p.CATEGORY)
									URL_DIS := fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSMEDIA-%v&TITLE=%v", p.MEDIA_ID, TITLE)
									fmt.Fprintf(w, "<b>Discussion:</b> <a href=\"%v\">View Comments</a><br>", URL_DIS)
									fmt.Fprintf(w, "<b>Media Type:</b> %v<br>", p.DATA_TYPE)
									fmt.Fprintf(w, "<b>Mime Type:</b> %v<br>", p.MIME_TYPE)
									fmt.Fprintf(w, "<b>Title:</b> %v<br>", p.TITLE)
									fmt.Fprintf(w, "<b>Desc:</b> %v<br>", p.DESC)
									thisURL := getSchemeNewUrl(w,r,p.IMG_URL)
									fmt.Fprintf(w, "<b>Image URL:</b><a href=\"%v\" id=\"murl\">%v</a><br>", thisURL, thisURL)
									fmt.Fprintf(w, "<b>Blob Key:</b> %v<br>", p.BLOB_KEY)
									//midi
									fmt.Fprintf(w, "<b>Wall Copy:</b> <a href=\"/wall?WALL_FUNC=MEDIA_COPY&MEDIA_ID=%v&SID=TDSMEDIA-%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.TITLE, CMD_GEN_KEY)
									
									if p.SYS_VER == 888 {
										fmt.Fprintf(w, "<b>Pinned:</b> <img src=\"/static/img/pinned.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=1&MEDIA_ID=%v\">Unpin</a>]<br>", p.MEDIA_ID)		
									} else {
										fmt.Fprintf(w, "<b>Not Pinned:</b> <img src=\"/static/img/pinned2.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=888&MEDIA_ID=%v\">Pin</a>]<br>", p.MEDIA_ID)										
									}
									fmt.Fprintf(w, "[ <a href=\"/admin-setup?ADMIN_FUNC=SET_AS_AD&TYPE=%v&MEDIA_ID=%v&IMG_URL=%v\">Set as Advertisement</a> ]", p.DATA_TYPE, p.MEDIA_ID, p.IMG_URL)
									fmt.Fprintf(w, "<hr>")
									dRef := fmt.Sprintf("/media?FUNC_CODE=PLAY&SID=TDSMEDIA-%v&BLOB_KEY=%v&MIME_TYPE=%v", p.MEDIA_ID, p.BLOB_KEY, p.MIME_TYPE)
									
									if err := mediaMIDIPlayerA.Execute(w, dRef); err != nil {
										panic(err)
									}
									
									err = rootTemplateMediaGenUp1.Execute(w, "")
									if err != nil {
											////log.Panicf("%v", err)
									}
									
									err = rootTemplateMediaGenUp2.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									getCategories(w,r,uid)
									err = rootTemplateMediaGenUp3.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									//delete form
									err = rootTemplateMediaU1Del.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									err = rootTemplateMediaU1SharedTo.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}

								default:
									fmt.Fprintf(w, "<b>Media ID:</b> %v<br>", p.MEDIA_ID)
									fmt.Fprintf(w, "<b>SID:</b> TDSMEDIA-%v<br>", p.MEDIA_ID)
									if p.MIME_TYPE == "text/html" {
										fmt.Fprintf(w, "<b>Edit:</b> [ <a href=\"/editor?MEDIA_ID=%v&SID=TDSMEDIA-%v&CATEGORY=%v\">Text Editor1</a> ] [ <a href=\"/editor?EDIT_FUNC=READER&MEDIA_ID=%v&SID=TDSMEDIA-%v&CATEGORY=%v\">Text Editor2</a> ] [ <a href=\"/media?FUNC_CODE=RAWTEXT&MEDIA_ID=%v&SID=TDSMEDIA-%v\">View Raw Text</a> ] [ <a href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\">View Original Text</a> ] [ <a href=\"/media?FUNC_CODE=GET_MEDIA&MEDIA_ID=%v&SID=TDSMEDIA-%v\">View Hyperlink</a> ] [ <a download=\"TDSMEDIA-%v-%v.doc\" href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\">Download Doc File</a> ] [ <a download=\"TDSMEDIA-%v-%v.txt\" href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\">Download Text File</a> ] [ <a href=\"/media?FUNC_CODE=RAWJSON&MEDIA_ID=%v&SID=TDSMEDIA-%v\">View Raw JSON</a> ]<br>", p.MEDIA_ID, p.MEDIA_ID, p.CATEGORY, p.MEDIA_ID, p.MEDIA_ID, p.CATEGORY, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, TITLE, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, TITLE, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID)
									}
									fmt.Fprintf(w, "<b>Shared Status:</b> %v<br>", p.FL_SHARED)
									fmt.Fprintf(w, "<b>Author: </b> %v<br>", p.AUTHOR)
									fmt.Fprintf(w, "<b>Publish Status:</b> %v<br>", p.DOC_STAT)
									fmt.Fprintf(w, "<b>Category:</b> %v<br>", p.CATEGORY)
									URL_DIS := fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSMEDIA-%v&TITLE=%v", p.MEDIA_ID, TITLE)
									fmt.Fprintf(w, "<b>Discussion:</b> <a href=\"%v\">View Comments</a><br>", URL_DIS)
									fmt.Fprintf(w, "<b>Media Type:</b> %v<br>", DATA_TYPE)
									fmt.Fprintf(w, "<b>Mime Type:</b> %v<br>", p.MIME_TYPE)
									fmt.Fprintf(w, "<b>Title:</b> %v<br>", p.TITLE)
									fmt.Fprintf(w, "<b>Desc:</b> %v<br>", p.DESC)

									fmt.Fprintf(w, "<b>Admin URL:</b> <a href=\"/media?FUNC_CODE=VIEW&MEDIA_ID=%v\">%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v</a><br>", p.MEDIA_ID, getSchemeUrl(w,r), p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Blob Key:</b> %v<br>", p.BLOB_KEY)
 
									dName := ""
									if strings.Index(p.DESC, "[") != -1 && strings.Index(p.DESC, "]") != -1 {
										SPL := strings.Split(p.DESC,"[")
										
										if len(SPL) > 0 {
											SPLX := strings.Split(SPL[1],"]")
											if len(SPLX) > 0 {
												dName = fmt.Sprintf("%v", SPLX[0])
											}
										}	
									} else {
										///static/img/files/mid-icon-128x128.png
										SPL := strings.Split(p.IMG_URL,"/")
										
										if len(SPL) > 0 {
											SPLX := strings.Split(SPL[2],"-")
											if len(SPLX) > 0 {
												dName = fmt.Sprintf("%v.%v", p.TITLE, SPLX[0])
											}
										}
									}
									if dName == "" {
										dName = fmt.Sprintf("%v.%v", p.TITLE, "unknown")
									}
								
									longURL := fmt.Sprintf("%vmedia?FUNC_CODE=DL&SID=TDSMEDIA-%v&BLOB_KEY=%v&MIME_TYPE=%v", getSchemeUrl(w,r), p.MEDIA_ID, p.BLOB_KEY, p.MIME_TYPE)
									longerURL := fmt.Sprintf("%vmedia?FUNC_CODE=VIEW&MEDIA_ID=%v", getSchemeUrl(w,r), p.MEDIA_ID)
									fmt.Fprintf(w, "<b>Download:</b> [ <a download=\"%v\" href=\"/media?FUNC_CODE=DL&SID=TDSMEDIA-%v&BLOB_KEY=%v&MIME_TYPE=%v\">Download File</a> ] [Viewer ShortURL: <a href=\"%v\">%v</a> ] [LongerURL: <a href=\"%v\">%v</a> ]<br>", dName, p.MEDIA_ID, p.BLOB_KEY, p.MIME_TYPE, ShortenUrl(w,r,longURL), ShortenUrl(w,r,longURL), longerURL, longerURL)
									
									fmt.Fprintf(w, "[ <a href=\"/admin-setup?ADMIN_FUNC=SET_AS_AD&TYPE=%v&MEDIA_ID=%v&IMG_URL=%v\">Set as Advertisement</a> ]<br>", p.DATA_TYPE, p.MEDIA_ID, p.IMG_URL)
									//media def
									fmt.Fprintf(w, "<b>Wall Copy:</b> <a href=\"/wall?WALL_FUNC=MEDIA_COPY&MEDIA_ID=%v&SID=TDSMEDIA-%v&TITLE=%v&wall_key=%v\"><img src=\"/static/img/ucopy.png\" width=\"40\" height=\"40\"></img></a><br>", p.MEDIA_ID, p.MEDIA_ID, p.TITLE, CMD_GEN_KEY)
									
									if p.SYS_VER == 888 {
										fmt.Fprintf(w, "<b>Pinned:</b> <img src=\"/static/img/pinned.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=1&MEDIA_ID=%v\">Unpin</a>]<br>", p.MEDIA_ID)		
									} else {
										fmt.Fprintf(w, "<b>Not Pinned:</b> <img src=\"/static/img/pinned2.png\" width=\"40\" height=\"40\"></img> [<a href=\"/media?FUNC_CODE=PINNED_MEDIA&P=888&MEDIA_ID=%v\">Pin</a>]<br>", p.MEDIA_ID)										
									}
									
									fmt.Fprintf(w, "<hr>")
									fmt.Fprintf(w, "<a href=\"/media?FUNC_CODE=PLAY&SID=TDSMEDIA-%v&BLOB_KEY=%v&MIME_TYPE=%v\"><img src=\"%v\" width=40 height=40 title=\"View in Browser\"></img></a><br>", p.MEDIA_ID, p.BLOB_KEY, p.MIME_TYPE, p.IMG_URL)
									embLink := fmt.Sprintf("%vmedia?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", getSchemeUrl(w,r), p.MEDIA_ID, p.MEDIA_ID)
									fmt.Fprintf(w, "<b>IFRAME Embed Link:</b><br><textarea  name=\"embed\" rows=\"5\" cols=\"40\"/>%v</textarea><br>", embLink)
									if p.DOC_STAT != "Personal" && p.FL_SHARED == "Y" {
										fmt.Fprintf(w, "<b>IFRAME Embed Link(Short):</b><a href=\"%v\">%v</a><br>", ShortenUrl(w,r,embLink), ShortenUrl(w,r,embLink))
									}
									err = rootTemplateMediaD1.Execute(w, "")
									if err != nil {
											////log.Panicf("%v", err)
									}
									err = rootTemplateMediaD2.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									getCategories(w,r,uid)
									err = rootTemplateMediaD3.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									//delete form
									err = rootTemplateMediaU1Del.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}
									err = rootTemplateMediaU1SharedTo.Execute(w, media)
									if err != nil {
											////log.Panicf("%v", err)
									}									
								break
							}
						}
					//}
					if err := outputFooterTemplate.Execute(w, ""); err != nil {
						panic(err)
					}
                    return
                case "MULTI_IMAGE_UPLOAD":
                    //log.Printf("MULTI_IMAGE_UPLOAD")
					updateUserActiveData(w, r, c, uid, "/media(upload)")
					//fmt.Fprintf(w, "MULTI_IMAGE_UPLOAD")
					TITLE := r.FormValue("TITLE")
					DESC := r.FormValue("DESC")
					CATEGORY := r.FormValue("CATEGORY")
					DATA_TYPE := r.FormValue("DATA_TYPE")
					FL_ADD_WP := r.FormValue("FL_ADD_WP")
					if err := multiUploaderImagesHdr2.Execute(w, CATEGORY); err != nil {
						panic(err)
					}
					for i := 1; i <= MAX_DRAG_DROP_FILES; i++ {
						csn2 := getUpUrlString(w,r,"/upload-media")
						uploadURL3 := csn2
						if err := multiUploaderImagesForm.Execute(w, uploadURL3); err != nil {
							panic(err)
						}
						TEMPDATA := TEMPSTRUCT2{
							STR_FILLER1: TITLE,
							STR_FILLER2: DESC,
							STR_FILLER3: CATEGORY,
							STR_FILLER4: DATA_TYPE,
							STR_FILLER5: FL_ADD_WP,
						}
						if err := multiUploaderImagesForm2.Execute(w, &TEMPDATA); err != nil {
							panic(err)
						}
					}
					if err := htmlFooterModal.Execute(w, ""); err != nil {
						panic(err)
                    }
				case "SET_MULTI_IMAGE_UPLOAD":
					//log.Println("SET_MULTI_IMAGE_UPLOAD")
					//prep mime list
					_, _ = getMimeType(w,r,path.Ext(""))
					if err := multiUploaderImagesHdr.Execute(w, ""); err != nil {
						panic(err)
					}
					getCategories(w,r,uid)
					if err := rootTemplateMultiUploadForm.Execute(w, ""); err != nil {
						panic(err)
					}
					if err := htmlFooterModal.Execute(w, ""); err != nil {
						panic(err)
                    }
                    return
                case "VIEW_THUMBS":
		//D0118
                    //log.Printf("VIEW_THUMBS")
					//D0070
					//log.Printf("VIEW_THUMBS")
					PROC := r.FormValue("PROC")
					updateUserActiveData(w, r, c, uid, "/media(photos)")
					//also notify all users about this
					msgDtl3 := fmt.Sprintf("UID:%v %v has accessed ULAPPH Photo Gallery! %v", getGeoString(w,r), uid, getAccessString(w,r,""))
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/media?FUNC_CODE=VIEW_THUMBS",""),"")
			switch {
			case  SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true:
				//since photos maybe too many; lets divide per batch
				viewBatch := r.FormValue("perBatch")
				uid := r.FormValue("UID")
				filter := r.FormValue("filter")
				indexPicsFile := SYS_STATIC_FOLDER_PATH_INDEX+"TERMUX_INDEX_PICS_FILES"
				if viewBatch == "" {
					perBatch := 50
					startBatch := 0
					endBatch := 0
					//fmt.Fprintf(w, "<h1>Please select batch of pictures...</h1>")
					thisForm := `
					<html>
					<body>
					<form action="#" onSubmit="applyFilter(); return false;">
					  <label for="fname">Filter:</label>
					  <input type="text" id="fname" name="fname">
					  <input type="submit" value="Apply">
					</form>
					<br>
					<script>
					function applyFilter() {
						 var keyword = document.getElementById("fname").value;
						 //var anchors = document.getElementsByTagName("a");
						 //for (var i = 0; i < anchors.length; i++) {
						 //   anchors[i].href += anchors[i].href.indexOf('?') != -1 ? "&filter=" + keyword  : "?filter=" + keyword;
						 //}
						const urlParams = new URLSearchParams(window.location.search);
						urlParams.set('filter', keyword);
						window.location.search = urlParams;
				 	}
					 </script>
					`
					fmt.Fprintf(w, "%v", thisForm)
					//lets display batch links only first
					    file, err := os.Open(indexPicsFile)
					    if err != nil {
						log.Fatal(err)
					    }
					    defer file.Close()
					    musicRaw, err := ioutil.ReadAll(file)
					    if err != nil {
						log.Fatal(err)
					    }
					totPics := 0
					s := bufio.NewScanner(bytes.NewReader(musicRaw))
						for s.Scan() {
							if strings.Index(s.Text(), "/.") != -1 {
								//ignore
							} else {
								if filter != "" {
									if strings.Index(strings.ToUpper(s.Text()), strings.ToUpper(filter)) != -1 {
										totPics++
									}
								} else {
									totPics++
								}
							}
						}

					ulapphDebug(w,r, "info", fmt.Sprintf("totPics: %v", totPics))
					for i:=0; i<=100; i++ {
						if totPics > 0 {
						endBatch = startBatch + perBatch
						bLink := fmt.Sprintf("/media?FUNC_CODE=VIEW_THUMBS&UID=%v&uid=%v&perBatch=yes&startBatch=%v&endBatch=%v&batchNum=%v&filter=%v", uid, uid, startBatch, endBatch, i, filter)
						fmt.Fprintf(w, "<h2><a href=\"%v\" target=\"batch-%v\">Batch %v</a></h2>", bLink, i, i)
						startBatch = startBatch + perBatch
						totPics = totPics - perBatch
						}
					}
					fmt.Fprintf(w, "</body></html>")
					return
				}
				//display from termux index file
				    file, err := os.Open(indexPicsFile)
				    if err != nil {
					log.Fatal(err)
				    }
				    defer file.Close()
				    musicRaw, err := ioutil.ReadAll(file)
				    if err != nil {
					log.Fatal(err)
				    }
				media := []TDSMEDIA{}
				limit := 0
				lineNbr := 0
				startBatch := r.FormValue("startBatch")
				numStart, _ := strconv.Atoi(startBatch)
				endBatch := r.FormValue("endBatch")
				numEnd, _ := strconv.Atoi(endBatch)
				s := bufio.NewScanner(bytes.NewReader(musicRaw))
					for s.Scan() {
						//fmt.Fprintf(w, "%v", s.Text())	
						   if strings.Index(s.Text(), "/.") != -1 {
							//skip /.folders
						} else {
						limit++
						//lineNbr++
						if strings.Index(strings.ToUpper(s.Text()), strings.ToUpper(filter)) != -1 {
							lineNbr++
						}
						fileName := filepath.Base(s.Text())
						p := TDSMEDIA {
								SYS_VER: 0,	
								MEDIA_ID: 0,	
								DOC_ID: 0,	
								DATA_TYPE: "image",
								PROP: "",	
								TITLE: fileName,
								DESC: fileName,
								AUTHOR: "",			
								YEAR: "",	
								CATEGORY: "",	
								DOC_STAT: "",
								FL_SHARED: "",
								SHARED_TO: "",
								IMG_URL: s.Text(),
								BLOB_KEY: "",	
								DT_UPLOAD: 0,
								NUM_LIKES: 0,	
								NUM_COMMENTS: 0,	
								LIKED_BY: "",	
								COMMENTS_BY: "",
								NUM_VIEWS: 0,
								MIME_TYPE: "",
						}
						if lineNbr >= numStart && lineNbr <= numEnd {
							if filter != "" {
								if strings.Index(strings.ToUpper(s.Text()), strings.ToUpper(filter)) != -1 {
									//lineNbr++
									media = append(media, p)
								}
							} else {
								//if lineNbr >= numStart && lineNbr <= numEnd {
									media = append(media, p)
								//}
							}
							
						}
						}
					}
					pgtitle := fmt.Sprintf("My Photos - Batch#%v (%v - %v) [%v]", r.FormValue("batchNum"), numStart, numEnd, len(media))
					if err := mediaSimpleGalHeaderA.Execute(w, pgtitle); err != nil {
						panic(err)
					}
                    fmt.Fprintf(w, "<h2>[<a id=\"prevLink\" href=\"being.set.by.js\">Previous</a>] [<a id=\"nextLink\" href=\"being.set.by.js\">Next</a>]</h2>")
					contCat := "General"
					if err := mediaSimpleGalHeaderB.Execute(w, contCat); err != nil {
						panic(err)
					}

					for _, p := range media{
						//photoGalleryShowMedia(w,r,uid,GROUP_ID,contCat,start,end,&p)
						photoGalleryShowMediaStatic(w,r,uid,"","",0,0,&p)
					}
					if err := mediaSimpleGalFooter.Execute(w, ""); err != nil {
						panic(err)
					}

                    case PROC == "":
                        //log.Printf("VIEW_THUMBS: PROC")
						thisCats := getCategoriesBytes(w,r,uid)
						kword := r.FormValue("kword")
						renderTimelineForm(w,r,".photo-gallery", kword, thisCats)
						return
                    case PROC == "Y":
                        //log.Printf("VIEW_THUMBS: Y")
						_, uid := checkSession(w,r)
						FUNC_CODE := "GET_GRP_ID"
                        _, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
                        //log.Printf("GROUP_ID: %v", GROUP_ID)
						start_date := r.FormValue("start_date")
						start_time := r.FormValue("start_time")
						end_date := r.FormValue("end_date")
						end_time := r.FormValue("end_time")
						contType := r.FormValue("cont_type")
						contCat := r.FormValue("cont_cat")
						kword := r.FormValue("kword")
						//uid := r.FormValue("uid")
						RECENT := r.FormValue("RECENT")
						start_year := ""
						FL_RECENT := false
						if RECENT == "" {
						//get year
						SPL := strings.Split(start_date, ", ")
						start_year = SPL[1]
						} else {
						FL_RECENT = true
						}
						//log.Printf("kword: %v", kword)
						//log.Printf("start_year: %v", start_year)
						//log.Printf("start_date: %v", start_date)
						//log.Printf("start_time: %v", start_time)
						//log.Printf("end_date: %v", end_date)
						//log.Printf("end_time: %v", end_time)
						//log.Printf("contType: %v", contType)
						//log.Printf("contCat: %v", contCat)
						//compose timestamp
						start_tstmp := fmt.Sprintf("%v %v", start_date, start_time)
						end_tstmp := fmt.Sprintf("%v %v", end_date, end_time)
						//log.Printf("start_tstmp: %v", start_tstmp)
						//log.Printf("end_tstmp: %v", end_tstmp)
						rt1, _ := time.Parse("_2 January, 2006 3:04 PM", start_tstmp)
						start_rt1 := fmt.Sprintf("%v", rt1.Format("20060102150405"))
						startYEAR := fmt.Sprintf("%v", rt1.Format("2006"))
						startMONTH := fmt.Sprintf("%v", rt1.Format("01"))
						startDAY := fmt.Sprintf("%v", rt1.Format("02"))
						rt2, _ := time.Parse("_2 January, 2006 3:04 PM", end_tstmp)
						start_rt2 := fmt.Sprintf("%v", rt2.Format("20060102150405"))
						endYEAR := fmt.Sprintf("%v", rt2.Format("2006"))
						endMONTH := fmt.Sprintf("%v", rt2.Format("01"))
						endDAY := fmt.Sprintf("%v", rt2.Format("02"))						
						//log.Printf("start_rt1: %v", start_rt1)
						//log.Printf("start_rt2: %v", start_rt2)
						start := str2int(start_rt1)
						end := str2int(start_rt2)
						if  FL_RECENT == true {
							start = 0
							end = 0
						}
						//if err := mediaSimpleGalHeaderA.Execute(w, start_year); err != nil {
                        pgtitle := deskNum2Name(w,r,uid,contCat)
                        if pgtitle == "unknown" {
                            pgtitle = kword
                        }
						if err := mediaSimpleGalHeaderA.Execute(w, pgtitle); err != nil {
							panic(err)
						}
						if err := mediaSimpleGalHeaderB.Execute(w, contCat); err != nil {
							panic(err)
						}
						switch contType {
                        case "CCTV":
                            //log.Printf("VIEW_THUMBS: CCTV")
                            //nRecCtr :=0
                            //numRecent, _ := strconv.Atoi(RECENT)
                            //List all CCTV images from cloud storage
                            if kword == "" {
                                //requires camera number like "1"
                                fmt.Fprintf(w, "ERROR: Please indicate the camera number.")
                                return
                            }
                            //log.Printf("kword: %v", kword)
                            //log.Printf("start_year: %v", start_year)
                            //log.Printf("start_date: %v", start_date)
                            //log.Printf("start_time: %v", start_time)
                            //log.Printf("end_date: %v", end_date)
                            //log.Printf("end_time: %v", end_time)
                            //log.Printf("contType: %v", contType)
                            //log.Printf("contCat: %v", contCat)
							//uid := r.FormValue("uid")
							if r.FormValue("uid") != "" {
								uid = r.FormValue("uid")
							}
							//log.Printf("uid: %v", uid)
                            //wstr := ""
                            //ctr := 0
							//edwin.d.vinas@gmail.com/TDSMEDIA/CCTV/1/Y2020/M01/D27/H12/20200127120911
                            prefix := fmt.Sprintf("%v/TDSMEDIA/CCTV/%v/", uid, kword)
                            switch {
								case startYEAR == endYEAR && startMONTH == endMONTH && startDAY == endDAY:								
									prefix = fmt.Sprintf("%v/TDSMEDIA/CCTV/%v/Y%v/M%v/D%v/", uid, kword, startYEAR, startMONTH, startDAY)
								case startYEAR == endYEAR && startMONTH == endMONTH:							
									prefix = fmt.Sprintf("%v/TDSMEDIA/CCTV/%v/Y%v/M%v/", uid, kword, startYEAR, startMONTH)
								case startYEAR == endYEAR:							
									prefix = fmt.Sprintf("%v/TDSMEDIA/CCTV/%v/Y%v/", uid, kword, startYEAR)
							} 
							delim := ""
                            it, err := listGcsObject(prefix, delim)
                            if err != nil {
                                //log.Printf("ERROR: listGcsObject() %v", err)
                            }
                            //log.Printf("it: %v", it)
							var buf bytes.Buffer
                            for {
                                attrs, err := it.Next()
                                if err == iterator.Done {
                                        break
                                }
                                if err != nil {
                                        //return err
                                        //log.Printf("iterator error: %v", err)
                                }
                                //ctr++
                                //log.Printf("attrs: %#v", attrs)
                                //log.Printf("attrs.Name: %v", attrs.Name)
                                thisBuf := photoGalleryShowCCTV(w,r,uid,GROUP_ID,contCat,start,end,attrs)
								buf.Write(thisBuf)
                            }
							w.WriteHeader(200)
							w.Write(buf.Bytes())
							//return
						case "TDSMEDIA":
							datastoreClient := createClientDS()
							q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID").Limit(5000)
							if contCat != "" && FL_RECENT == false {
							q = datastore.NewQuery("TDSMEDIA").Filter("CATEGORY =", contCat).Filter("YEAR =", start_year)
							}
							recCount,_ := datastoreClient.Count(c,q)
							//log.Printf("media: %v", recCount)
							//log.Printf("uid: %v", uid)
							media := make([]TDSMEDIA, 0, recCount)
							if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [48075]")
							FL_USE_AS_WALLP := r.FormValue("USEWALLP")
							//D0074
							FL_DELETE_ALL := r.FormValue("DELETE-ALL")
							switch {
							case FL_DELETE_ALL == "Y":
								recCtr := 0
								for _, p := range media{
									if kword != "" {
										i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
										j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
										if i != -1 || j != -1 {
											thisDU := p.DT_UPLOAD
											if thisDU >= start && thisDU <= end && (p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
												nt := strings.Index(p.TITLE, "No title")
												nd := strings.Index(p.DESC, "ulapphMirrorImage")
												ntt := strings.Index(p.TITLE, "ulapphMirrorImage")
												temp1 := strings.Index(p.TITLE, "Gate")
												if ((nt != -1 || ntt != -1) && nd != -1) || (temp1 != -1 && nd != -1) {
													recCtr++
													//delete imageServing
													//err := imageApi.DeleteServingURL(c, appengine.BlobKey(p.BLOB_KEY))
													//if err != nil {
													//}
													//blobstore.Delete(c, appengine.BlobKey(p.BLOB_KEY))
													//delete
													thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
													key := datastore.NameKey("TDSMEDIA", thisKey, nil)
													datastoreClient.Delete(c, key)
												}
											}
										}

									} else {
										thisDU := p.DT_UPLOAD
										if thisDU >= start && thisDU <= end && (p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
											nt := strings.Index(p.TITLE, "No title")
											nd := strings.Index(p.DESC, "ulapphMirrorImage")
											ntt := strings.Index(p.TITLE, "ulapphMirrorImage")
											temp1 := strings.Index(p.TITLE, "Gate")
											if ((nt != -1 || ntt != -1) && nd != -1) || (temp1 != -1 && nd != -1) {
												recCtr++
												//delete imageServing
												//err := imageApi.DeleteServingURL(c, appengine.BlobKey(p.BLOB_KEY))
												//if err != nil {
												//}
												//blobstore.Delete(c, appengine.BlobKey(p.BLOB_KEY))
												//delete
												thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
												key := datastore.NameKey("TDSMEDIA", thisKey, nil)
												datastoreClient.Delete(c, key)
											}
										}
									}
								}
								w.WriteHeader(200)
								w.Write([]byte(fmt.Sprintf("%v images have been deleted!", recCtr)))
								return
							case FL_USE_AS_WALLP == "Y":
								recCtr := 0
								WALLPAPERS_LIST_STR := ""
								cKey := fmt.Sprintf("WALLPAPERS_LIST_%v", uid)
								cKey2 := fmt.Sprintf("WALLPAPERS_TOTAL_%v", uid)
								for _, p := range media{
									if kword != "" {
										i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
										j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
										if i != -1 || j != -1 {
											thisDU := p.DT_UPLOAD
											if thisDU >= start && thisDU <= end && (p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
												recCtr++
												WALLPAPERS_LIST_STR = fmt.Sprintf("%v@888@%v|%v|%v", WALLPAPERS_LIST_STR, p.IMG_URL, p.TITLE, p.DESC)
											}
										}

									} else {
										thisDU := p.DT_UPLOAD
										if thisDU >= start && thisDU <= end && (p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER") {
											recCtr++
											WALLPAPERS_LIST_STR = fmt.Sprintf("%v@888@%v|%v|%v", WALLPAPERS_LIST_STR, p.IMG_URL, p.TITLE, p.DESC)
										}
									}
								}
								//store count
								WALLPAPERS_TOTAL := fmt.Sprintf("%v", recCtr)
								putStrToMemcacheWithExp(w,r,cKey2,WALLPAPERS_TOTAL,GEN_CONTENT_EXPIRES3) //3hours
								//store list
								putStrToMemcacheWithExp(w,r,cKey,WALLPAPERS_LIST_STR,GEN_CONTENT_EXPIRES3)//3hours
								w.WriteHeader(200)
								w.Write([]byte("Wallpapers have been updated!"))
								pStr := fmt.Sprintf("WALLPAPERS_TOTAL: %v", WALLPAPERS_TOTAL)
								w.Write([]byte(pStr))
								return

                            default:
                                //log.Printf("VIEW_THUMBS: default")
								nRecCtr :=0
								numRecent, _ := strconv.Atoi(RECENT)
								for _, p := range media{
                                    //log.Printf("photoGalleryShowMedia()")
                                    if p.DATA_TYPE == "image" {
                                        if kword != "" {
                                            i := strings.Index(strings.ToUpper(p.TITLE), strings.ToUpper(kword))
                                            j := strings.Index(strings.ToUpper(p.DESC), strings.ToUpper(kword))
                                            if i != -1 || j != -1 {
                                                photoGalleryShowMedia(w,r,uid,GROUP_ID,contCat,start,end,&p)
                                            }

                                        } else {
                                            if FL_RECENT == true {
                                                if RECENT != "" && contCat == p.CATEGORY && nRecCtr <= numRecent {
                                                    nRecCtr++
                                                    photoGalleryShowMedia(w,r,uid,GROUP_ID,contCat,start,end,&p)
                                                    if nRecCtr >= numRecent {
                                                        break
                                                    }
                                                }
                                            } else {
                                                photoGalleryShowMedia(w,r,uid,GROUP_ID,contCat,start,end,&p)
                                            }
                                        }
                                    }
								}
							}
						}
						if err := mediaSimpleGalFooter.Execute(w, ""); err != nil {
							panic(err)
						}
						return
					}
				case "ADD_REM_RAN_WP":
					datastoreClient := createClientDS()
					MEDIA_ID := r.FormValue("MEDIA_ID")
					PROP := r.FormValue("PROP")
					URL := r.FormValue("URL")
					mediaID := str2int(MEDIA_ID)
					cKey := ""
					cKey2 := ""
					//display media
					dsKey := fmt.Sprintf("%d", mediaID)
					key := datastore.NameKey("TDSMEDIA", dsKey, nil)
					q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
					//log.Panicf("[S0372]")
					if URL != "" {
						q = datastore.NewQuery("TDSMEDIA").Filter("IMG_URL =", URL)
						PROP = URL
					}
					media := make([]TDSMEDIA, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [48226]")
					for _, p := range media{
							if p.DATA_TYPE == "image" {
								p.PROP = PROP
								dsKey := fmt.Sprintf("%d", p.MEDIA_ID)
								key := datastore.NameKey("TDSMEDIA", dsKey, nil)
								_, err := datastoreClient.Put(c, key, &p)
                                //log.Panicf("[S0373]")
                                //log.Printf("datastoreClient.Put()  [48234]")
								if err != nil {
									 panic(err)
								}
 
								if SYS_WALLP_ADMIN_ONLY == false {
									cKey = fmt.Sprintf("WALLPAPERS_LIST_%v", uid)
									cKey2 = fmt.Sprintf("WALLPAPERS_TOTAL_%v", uid)
								} else {
									cKey = fmt.Sprintf("WALLPAPERS_LIST_%v", "admin")
									cKey2 = fmt.Sprintf("WALLPAPERS_TOTAL_%v", "admin")
								}
								//clear wallpaper count
								putStrToMemcacheWithoutExp(w,r,cKey2,"")
								//clear wallpaper list
								putStrToMemcacheWithoutExp(w,r,cKey,"")
								msgDtl := fmt.Sprintf("[U00162] SUCCESS: Image has been added/removed in the random wallpapers.")
								msgTyp := "success"
								msgURL := fmt.Sprintf("/%v#page", "desktop0")
								action := "U00162"
								sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
								http.Redirect(w, r, sysReq, http.StatusFound)
								return
							}
					}
				case "RAWJSON":
					SID := r.FormValue("SID")
					SPL := strings.Split(SID,"-")
					TARGET := SPL[0]
					DOC_ID := "0"
					if len(SPL) > 1 {
						DOC_ID = SPL[1]
					}
					BLOB_KEY := contentCheckSid(w,r,SID)
					//log.Printf("BLOB_KEY: %v", BLOB_KEY)
					switch TARGET {
						case "TDSSLIDE":
							time.AfterFunc(5*time.Second, func() {
                                laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSSLIDE-%v", DOC_ID), "SO_INC_NUM_VIEWS")
                            })
						case "TDSARTL":
							time.AfterFunc(5*time.Second, func() {
                                laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSARTL-%v", DOC_ID), "SO_INC_NUM_VIEWS")
                            })
						case "TDSMEDIA":
							time.AfterFunc(5*time.Second, func() {
                                laterIncNumViewsSocial(c, "", fmt.Sprintf("TDSMEDIA-%v", DOC_ID), "SO_INC_NUM_VIEWS")
                            })
					}
					var buf bytes.Buffer
                    bData, err := readGcsObject(BLOB_KEY)
                    if err != nil {
                        panic(err)
                    }
                    s := bufio.NewScanner(bytes.NewReader(bData))
					sbuf := make([]byte, 0, 64*1024)
					s.Buffer(sbuf, 1024*1024)
					for s.Scan() {
						buf.WriteString(fmt.Sprintf("%v", s.Text()))
					}
					w.Header().Set("Content-Type", "application/json")
					writeHTMLHeader(w, 200)
					//log.Printf("%v", buf.String())
					w.Write(buf.Bytes())
					return
				case "RENAME":
					//delete media 
					if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
						if r.FormValue("fname") == "" {
							//thisURL := r.URL.String()
							ulapphDebug(w,r, "info", fmt.Sprintf("RENAME FORM: %v", ""))
							fmt.Fprintf(w, "<html><body>Please input the new filename for this image?<br>")
							fmt.Fprintf(w, "	<form action=\"%v\" mehod=\"GET\">", "/media?FUNC_CODE=RENAME")
							 fmt.Fprintf(w, " <input type=\"hidden\" id=\"FUNC_CODE\" name=\"FUNC_CODE\" value=\"RENAME\"><br>")
							 fmt.Fprintf(w, "  <label for=\"fname\">New Filename:</label>")
							 fmt.Fprintf(w, " <input type=\"text\" id=\"fname\" name=\"fname\" value=\"%v\" size=\"150\"><br>", r.FormValue("IMG_URL"))
							 fmt.Fprintf(w, "  <label for=\"fnold\">Old Filename:</label>")
							 fmt.Fprintf(w, " <input type=\"text\" id=\"fnold\" name=\"fnold\" value=\"%v\"  size=\"150\">", r.FormValue("IMG_URL"))
							 fmt.Fprintf(w, " <input type=\"submit\" value=\"Rename\"></form><br>")
							fmt.Fprintf(w, "<img src=\"%v\"></body></html>", r.FormValue("IMG_URL"))
						} else {
							ulapphDebug(w,r, "info", fmt.Sprintf("RENAMING LOGIC: %v", ""))
							fName := r.FormValue("fname")
							fNameBak := r.FormValue("fname")
							fNold := r.FormValue("fnold")
							fName = strings.Replace(fName, "/android/", SYS_STATIC_FOLDER_PATH, -1)
							fNold = strings.Replace(fNold, "/android/", SYS_STATIC_FOLDER_PATH, -1)
							ulapphDebug(w,r, "info", fmt.Sprintf("fName: %v", fName))
							ulapphDebug(w,r, "info", fmt.Sprintf("fNold: %v", fNold))
							os.Rename(fNold, fName)
							ulapphDebug(w,r, "info", fmt.Sprintf("FILE RENAMED: %v", fNameBak))
							fmt.Fprintf(w, "<html>File Renamed: <a href=\"%v\">Link to new file</a></html>", fNameBak)
						}
						return
					}
				case "DELETE":
					//delete media 
					if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
						if r.FormValue("confirm") != "yes" {
							thisURL := r.URL.String()
							fmt.Fprintf(w, "<html>Please <a href=\"%v&confirm=yes\">confirm</a> if you really want to delete this?<br><img src=\"%v\"></html>", thisURL, r.FormValue("IMG_URL"))
						} else {
							fName := r.FormValue("IMG_URL")
							fName = strings.Replace(fName, "/android", SYS_STATIC_FOLDER_PATH, -1)
							ulapphDebug(w,r, "info", fmt.Sprintf("FILE: %v", fName))
							os.Remove(fName)
							fmt.Fprintf(w, "<html>File deleted: If no image below, that means deletion is successful!")
						}
						return
					}
					//delete media
					updateUserActiveData(w, r, c, uid, "/media(delete)")
					MEDIA_ID := r.FormValue("MEDIA_ID")
					mediaID := str2int(MEDIA_ID)
					BLOB_KEY := r.FormValue("BLOB_KEY")
					//validate authority
					if GROUP_ID == "GRP_USER" {
						if SYS_NOREG_FIXED_USER != "" {
							//allow
						} else {
							_, _, _, AUTHOR, _, _, _, _, _, _, _ := getTDSMEDIABlobKey(w, r, mediaID)
							if uid != AUTHOR {
							msgDtl := "[U00064] ERROR: You have no authority to access this function."
							msgTyp := "error"
							msgURL := "/media"
							action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to Media.", msgURL)
							sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
							http.Redirect(w, r, sysReq, http.StatusFound)
							return
							}
						}
					}
					if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
						//delete from tiedot 
						err := tiedotDeleteMedia(w,r,MEDIA_ID)
						if err != nil {
							ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotDeleteMedia(): %v", err))
							return
						}
						ulapphDebug(w,r, "info", fmt.Sprintf("DELETED TIEDOT: mediaID: %v tiedotDeleteMedia: %#v", mediaID, BLOB_KEY))

						//delete from SWFS
						err = deleteSeaweedStorage(w,r,BLOB_KEY)
						if err != nil {
							ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: deleteSeaweedStorage(): %v", err))
							return
						}
						ulapphDebug(w,r, "info", fmt.Sprintf("DELETED SWFS: mediaID: %v deleteSeaweedStorage: %v", mediaID, BLOB_KEY))

					} else {

					//display media
					datastoreClient := createClientDS()
					dsKey := fmt.Sprintf("%d", mediaID)
					key := datastore.NameKey("TDSMEDIA", dsKey, nil)
					q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
					//log.Panicf("[S0374]")
					media := make([]TDSMEDIA, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Get()  [48327]")
					for _, p := range media{
							if p.AUTHOR == uid || GROUP_ID == "GRP_ADMIN" {
								if p.BLOB_KEY == BLOB_KEY {
									err := deleteGcsObject(c, p.BLOB_KEY)
									if err != nil {
										//log.Fatalf("ERROR: deleteGcsObject() %v", err)
										ulapphDebug(w,r, "info", fmt.Sprintf("ERROR: deleteGcsObject() %v", err))
									}
								}
								thisKey := fmt.Sprintf("%d", mediaID)
								key := datastore.NameKey("TDSMEDIA", thisKey, nil)
								datastoreClient.Delete(c, key)
								break
							}
					}
					}
					
					//delete media from search idx
					thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", mediaID)
					index, err := search.Open("IDX_TDSMEDIA")
					if err != nil {
						 panic(err)
					}
					_ = index.Delete(c, thisIdxKey)
 
					msgDtl := "[U00065] SUCCESS: Media file has been deleted."
					msgTyp := "success"
					msgURL := fmt.Sprintf("/media")
					action := "U00065"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					
				//media
				case "UPDATE3":
					datastoreClient := createClientDS()
					SHARED_TO := r.FormValue("SHARED_TO")
					
					MEDIA_ID2 := r.FormValue("MEDIA_ID")
					MEDIA_ID := str2int(MEDIA_ID2)
						
						
					dsKey := fmt.Sprintf("%d", MEDIA_ID)
					key := datastore.NameKey("TDSMEDIA", dsKey, nil)
					q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
					//log.Panicf("[S0375]")
					media := make([]TDSMEDIA, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
						 panic(err)
					  }
					//log.Printf("datastoreClient.Get()  [48376]")
					for _, p := range media{
 
						//p.DOC_STAT = "Personal"
						//p.FL_SHARED = "Y"
						p.SHARED_TO = SHARED_TO
						thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
						key := datastore.NameKey("TDSMEDIA", thisKey, nil)
						_, err := datastoreClient.Put(c, key, &p)
                        //log.Panicf("[S0376]")
                        //log.Printf("datastoreClient.Put()  [48386]")
						if err != nil {
							 panic(err)
						}
						//clear cache
						cKey := fmt.Sprintf("TDSMEDIA_MEDID_CACHE_%v", p.MEDIA_ID)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d", MEDIA_ID)
						http.Redirect(w, r, sysReq, http.StatusFound)
						//return
						break
                    }
                case "UMP":
			//D0118
			if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
				FILTER := r.FormValue("FILTER")
				if err := mediaMusicPlayerA.Execute(w, ""); err != nil {
					panic(err)
				}
				fmt.Fprintf(w, "       <style type=\"text/css\">")
				renderStyleCssColored(w,r,".able-player")
				fmt.Fprintf(w, "       </style>")
				fmt.Fprintf(w, "       <style type=\"text/css\">")
				renderStyleCssColored(w,r,".able-playlist")
				fmt.Fprintf(w, "       </style>")
				if err := mediaMusicPlayerA2.Execute(w, ""); err != nil {
					panic(err)
				}
				//read from index file
				    file, err := os.Open(SYS_STATIC_FOLDER_PATH_INDEX+"TERMUX_INDEX_MUSIC_FILES")
				    if err != nil {
					log.Fatal(err)
				    }
				    defer file.Close()
				    musicRaw, err := ioutil.ReadAll(file)
				    if err != nil {
					log.Fatal(err)
				    }
				media := []TDSMEDIA{}
				s := bufio.NewScanner(bytes.NewReader(musicRaw))
					for s.Scan() {
						//fmt.Fprintf(w, "%v", s.Text())	
						fileName := filepath.Base(s.Text())
						p := TDSMEDIA {
								SYS_VER: 0,	
								MEDIA_ID: 0,	
								DOC_ID: 0,	
								DATA_TYPE: "music",
								PROP: "",	
								TITLE: fileName,
								DESC: fileName,
								AUTHOR: "",			
								YEAR: "",	
								CATEGORY: "",	
								DOC_STAT: "",
								FL_SHARED: "",
								SHARED_TO: "",
								IMG_URL: "",
								BLOB_KEY: s.Text(),	
								DT_UPLOAD: 0,
								NUM_LIKES: 0,	
								NUM_COMMENTS: 0,	
								LIKED_BY: "",	
								COMMENTS_BY: "",
								NUM_VIEWS: 0,
								MIME_TYPE: "",
						}
						media = append(media, p)
					}
				//media = []TDSMEDIA{}
				if FILTER == "" {
					if err := mediaDispTemplateUMPStatic.Execute(w, media); err != nil {
				 	panic(err)
					}
				} else {
					for _, p := range media{
						i := strings.Index(strings.ToLower(p.TITLE), strings.ToLower(FILTER))
						j := strings.Index(strings.ToLower(p.DESC), strings.ToLower(FILTER))
						if i != -1 || j != -1 {
							if err := mediaDispTemplateUMPStaticFiltered.Execute(w, &p); err != nil {
							panic(err)
							}
						}
					}
				}
				fmt.Fprintf(w, "</ul>")
				if err := umpFooterTemplate.Execute(w, "MUSIC"); err != nil {
					panic(err)
				}
				return
			}

					datastoreClient := createClientDS()
                    			SHUF := r.FormValue("shuf")
					updateUserActiveData(w, r, c, uid, "/media(ump)")
					//also notify all users about this
					msgDtl3 := fmt.Sprintf("UID:%v %v has accessed Music Player! %v", getGeoString(w,r), uid, getAccessString(w,r,""))
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/media?FUNC_CODE=UMP",""),"")
					FILTER := r.FormValue("FILTER")
					if err := mediaMusicPlayerA.Execute(w, ""); err != nil {
						panic(err)
					}
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssColored(w,r,".able-player")
					fmt.Fprintf(w, "       </style>")
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssColored(w,r,".able-playlist")
					fmt.Fprintf(w, "       </style>")
					if err := mediaMusicPlayerA2.Execute(w, ""); err != nil {
						panic(err)
					}
					if FILTER == "" {
						q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "music")
						//log.Panicf("[S0377]")
                        recCount,_ := datastoreClient.Count(c,q)
                        if recCount == 0 {
                            fmt.Fprintf(w, "Hmmm, you have no music yet. Try to download some OGG music files from <a href=\"https://archive.org/details/ElvisCollection\">Elvis Presley</a> music collection. Then, you can upload them using the Uploader tool.")
                            return
                        }
						media := make([]TDSMEDIA, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
                        }
                        if SHUF == "Y" {
                            Shuffle(media)
                        }
                        //log.Printf("datastoreClient.Get()  [48433]")
						if err := mediaDispTemplateUMP.Execute(w, media); err != nil {
							 panic(err)
						}
						fmt.Fprintf(w, "</ul>")
						//display tags
						cKey := fmt.Sprintf("UMP_CACHE_MUSIC_%s", uid)
						UMP_CACHE := ""
						UMP_CACHE = getStrMemcacheValueByKey(w,r,cKey)
						if UMP_CACHE == "" {
							var buf bytes.Buffer
							for _, p := range media{
								buf.WriteString(fmt.Sprintf("%v %v", p.TITLE, p.DESC))
							}
							//UMP_CACHE = buf.String()
							display_music_tags(w,r,uid,count_words(get_words_from(buf.String())))
						} else {
							fmt.Fprintf(w, "%v", UMP_CACHE)
						}
						//sort & display
					} else {
						q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "music")
						//log.Panicf("[S0378]")
                        recCount,_ := datastoreClient.Count(c,q)
                        if recCount == 0 {
                            fmt.Fprintf(w, "Hmmm, you have no music yet. Try to download some OGG music files from <a href=\"https://archive.org/details/ElvisCollection\">Elvis Presley</a> music collection. Then, you can upload them using the Uploader tool.")
                            return
                        }
						media := make([]TDSMEDIA, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [48465]")
						// Sort by DESC 
						sort.SliceStable(media, func(i, j int) bool {
							    return media[i].DESC < media[j].DESC
                        })
                        if SHUF == "Y" {
                            Shuffle(media)
                        }
						for _, p := range media{
								i := strings.Index(strings.ToLower(p.TITLE), strings.ToLower(FILTER))
								j := strings.Index(strings.ToLower(p.DESC), strings.ToLower(FILTER))
								if i != -1 || j != -1 {
									if err := mediaDispTemplateUMPFiltered.Execute(w, &p); err != nil {
										 panic(err)
									}
								}
						}
						fmt.Fprintf(w, "</ul>")
						cKey := fmt.Sprintf("UMP_CACHE_MUSIC_%s", uid)
						UMP_CACHE := ""
						UMP_CACHE = getStrMemcacheValueByKey(w,r,cKey)
						if UMP_CACHE == "" {
							var buf bytes.Buffer
							for _, p := range media{
								buf.WriteString(fmt.Sprintf("%v %v", p.TITLE, p.DESC))
							}
							//UMP_CACHE = buf.String()
							display_music_tags(w,r,uid,count_words(get_words_from(buf.String())))
						} else {
							fmt.Fprintf(w, "%v", UMP_CACHE)
						}
						if err := umpFooterTemplate.Execute(w, "MUSIC"); err != nil {
							panic(err)
						}
					}
					return
				//midi player
				case "MDP":
					datastoreClient := createClientDS()
					updateUserActiveData(w, r, c, uid, "/media(mdp)")
					//also notify all users about this
					msgDtl3 := fmt.Sprintf("UID:%v %v has accessed MIDI Player! %v", getGeoString(w,r), uid, getAccessString(w,r,""))
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/media?FUNC_CODE=MDP",""),"")
				
					FILTER := r.FormValue("FILTER")
					if err := mediaMIDIPlayerB.Execute(w, ""); err != nil {
						panic(err)
					}
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssColored(w,r,".able-player")
					fmt.Fprintf(w, "       </style>")
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssColored(w,r,".able-playlist")
					fmt.Fprintf(w, "       </style>")
					if err := mediaMIDIPlayerB2.Execute(w, ""); err != nil {
						panic(err)
					}
					if FILTER == "" {
						q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "midi")
						//log.Panicf("[S0379]")
						recCount,_ := datastoreClient.Count(c,q)
						media := make([]TDSMEDIA, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
						}
						//log.Printf("datastoreClient.Get()  [48531]")
						if err := mediaDispTemplateMDP.Execute(w, media); err != nil {
							 panic(err)
						}
							
					} else {
						q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "midi")
						//log.Panicf("[S0380]")
						recCount,_ := datastoreClient.Count(c,q)
						media := make([]TDSMEDIA, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [48544]")
						for _, p := range media{
								i := strings.Index(strings.ToLower(p.TITLE), strings.ToLower(FILTER))
								j := strings.Index(strings.ToLower(p.DESC), strings.ToLower(FILTER))
								if i != -1 || j != -1 {
									if err := mediaDispTemplateMDPFiltered.Execute(w, &p); err != nil {
										 panic(err)
									}
								}
						}
						
					}
					fmt.Fprintf(w, "</ul>")
					if err := umpFooterTemplate.Execute(w, "MIDI"); err != nil {
						panic(err)
					}
					
					return
				
                	case "UVP":
					//D0118
					if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
						FILTER := r.FormValue("FILTER")
						if err := mediaVideoPlayerA.Execute(w, ""); err != nil {
							panic(err)
						}
						fmt.Fprintf(w, "       <style type=\"text/css\">")
						renderStyleCssColored(w,r,".able-player")
						fmt.Fprintf(w, "       </style>")
						fmt.Fprintf(w, "       <style type=\"text/css\">")
						renderStyleCssColored(w,r,".able-playlist")
						fmt.Fprintf(w, "       </style>")
						if err := mediaVideoPlayerA2.Execute(w, ""); err != nil {
							panic(err)
						}
						//read from index file
						    file, err := os.Open(SYS_STATIC_FOLDER_PATH_INDEX+"TERMUX_INDEX_VIDEO_FILES")
						    if err != nil {
							log.Fatal(err)
						    }
						    defer file.Close()
						    musicRaw, err := ioutil.ReadAll(file)
						    if err != nil {
							log.Fatal(err)
						    }
						media := []TDSMEDIA{}
						s := bufio.NewScanner(bytes.NewReader(musicRaw))
							for s.Scan() {
								//fmt.Fprintf(w, "%v", s.Text())	
								fileName := filepath.Base(s.Text())
								p := TDSMEDIA {
										SYS_VER: 0,	
										MEDIA_ID: 0,	
										DOC_ID: 0,	
										DATA_TYPE: "music",
										PROP: "",	
										TITLE: fileName,
										DESC: fileName,
										AUTHOR: "",			
										YEAR: "",	
										CATEGORY: "",	
										DOC_STAT: "",
										FL_SHARED: "",
										SHARED_TO: "",
										IMG_URL: "",
										BLOB_KEY: s.Text(),	
										DT_UPLOAD: 0,
										NUM_LIKES: 0,	
										NUM_COMMENTS: 0,	
										LIKED_BY: "",	
										COMMENTS_BY: "",
										NUM_VIEWS: 0,
										MIME_TYPE: "",
								}
								media = append(media, p)
							}
						//media = []TDSMEDIA{}
						if FILTER == "" {
							if err := mediaDispTemplateUMPStatic.Execute(w, media); err != nil {
							panic(err)
							}
						} else {
							for _, p := range media{
								i := strings.Index(strings.ToLower(p.TITLE), strings.ToLower(FILTER))
								j := strings.Index(strings.ToLower(p.DESC), strings.ToLower(FILTER))
								if i != -1 || j != -1 {
									if err := mediaDispTemplateUMPStaticFiltered.Execute(w, &p); err != nil {
									panic(err)
									}
								}
							}
						}
						fmt.Fprintf(w, "</ul>")
						if err := umpFooterTemplate.Execute(w, "VIDEO"); err != nil {
							panic(err)
						}
						return
					}
					datastoreClient := createClientDS()
                    			SHUF := r.FormValue("shuf")
					updateUserActiveData(w, r, c, uid, "/media(uvp)")
					//also notify all users about this
					msgDtl3 := fmt.Sprintf("UID:%v %v has accessed Video Player! %v", getGeoString(w,r), uid, getAccessString(w,r,""))
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/media?FUNC_CODE=UMP",""),"")
					
					FILTER := r.FormValue("FILTER")
					if err := mediaVideoPlayerA.Execute(w, ""); err != nil {
						panic(err)
					}
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssColored(w,r,".able-player")
					fmt.Fprintf(w, "       </style>")
					fmt.Fprintf(w, "       <style type=\"text/css\">")
					renderStyleCssColored(w,r,".able-playlist")
					fmt.Fprintf(w, "       </style>")
					if err := mediaVideoPlayerA2.Execute(w, ""); err != nil {
						panic(err)
					}
					//list all videos
					if FILTER == "" {
						q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "video")
						//log.Panicf("[S0381]")
						recCount,_ := datastoreClient.Count(c,q)
						media := make([]TDSMEDIA, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
                        }
                        if SHUF == "Y" {
                            Shuffle(media)
                        }
						//log.Printf("datastoreClient.Get()  [48596]")
						if err := mediaDispTemplateUVP.Execute(w, media); err != nil {
							 panic(err)
						}
						
					} else {
						q := datastore.NewQuery("TDSMEDIA").Filter("DATA_TYPE =", "video")
						//log.Panicf("[S0382]")
						recCount,_ := datastoreClient.Count(c,q)
						media := make([]TDSMEDIA, 0, recCount)
						if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
							 panic(err)
						}
						//log.Printf("datastoreClient.Get()  [48609]")
                        if SHUF == "Y" {
                            Shuffle(media)
                        }
						for _, p := range media{
							i := strings.Index(strings.ToLower(p.TITLE), strings.ToLower(FILTER))
							j := strings.Index(strings.ToLower(p.DESC), strings.ToLower(FILTER))
							if i != -1 || j != -1 {
								if err := mediaDispTemplateUVPFiltered.Execute(w, &p); err != nil {
									 panic(err)
								}
							}
						}
					}
					fmt.Fprintf(w, "</ul>")
					if err := umpFooterTemplate.Execute(w, "VIDEO"); err != nil {
						panic(err)
					}
                    return
                //D0093
                case "VDOWN":
                    //log.Printf("Video downloader")
                    VID := r.FormValue("VID")
                    VSRC := r.FormValue("VSRC")
                    VTL := r.FormValue("VTL")
                    switch VSRC {
                        case "YT":
                            //log.Printf("Video downloader: Youtube")
                            //Youtube downloader
                            thisVid := fmt.Sprintf("https://www.youtube.com/watch?v=%v", VID)
                            vid, err := ytdl.GetVideoInfo(thisVid)
                            if err != nil {
                                rt := r.Header.Get("Retry-After")
                                //log.Printf("Failed to get video info: %v Retry: %v", err, rt)
								ulapphDebug(w,r, "info", fmt.Sprintf("Failed to get video info: %v Retry: %v", err, rt))
                                return
                            }
                            var buf bytes.Buffer
                            //file, _ := os.Create(vid.Title + ".mp4")
                            //defer file.Close()
                            //log.Printf("vid.Download()")
                            vid.Download(vid.Formats[0], &buf)
                            //log.Printf("buf len: %v", len(buf.Bytes()))
                            //upload to cloud storage
                            //log.Printf("Upload to GCS: blobFileSaver()")
                            //save to GCS
                            ctx := context.Background()
                            //inpData := buf.String()
                            public := false
                            UUID := generateUUID(w,r,uid,"TDSMEDIA")
                            //log.Printf("UUID: %v", UUID)
                            //_, objAttrs, err := uploadGcsObject(ctx, &buf, UUID, public)
                            _, _, err = uploadGcsObject(ctx, &buf, UUID, public)
                            if err != nil {
                                switch err {
                                case storage.ErrBucketNotExist:
                                    log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
                                default:
                                    log.Fatalf("ERROR: %v", err)
                                }
                            }
                            //log.Printf("URL: %s", objectURL(objAttrs))
                            //log.Printf("MediaURL: %s", objAttrs.MediaLink)
                            //log.Printf("Size: %d", objAttrs.Size)
                            //log.Printf("MD5: %x", objAttrs.MD5)
                            //log.Printf("objAttrs: %+v", objAttrs)
                            //log.Printf("UUID: %v", UUID)
                            //save object url
                            //gcsObjectUrl = objectURL(objAttrs)
                            gcsObjectUrl := UUID
                            gcsMediaUrl := mediaURL(UUID)
                            //serve-media
                            w.Header().Set("Access-Control-Allow-Origin", "*")
                            w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
                            UID := uid
                            TYPE := "video"
                            TITLE := VTL
                            DESC := fmt.Sprintf("Video Download - %v", VID)
                            CATEGORY := ""
                            FL_SHARED := ""
                            FILE_NAME := ""
                            MIME_TYPE := "video/mp4"
                            FL_ADD_WP := ""
                            DOC_STAT := ""
                            EMBED := ""
                            //D0066
                            STRUWM := ""
                            STRUWMI := ""
                            AUTOML := ""
                            PINKEY := ""
                            OPT := ""
                            bKey := gcsObjectUrl
                            mUrl := gcsMediaUrl
                            reqStr := fmt.Sprintf("/serve-media/?DATA_TYPE=%s&TITLE=%s&DESC=%s&CATEGORY=%s&blobKey5=%v&FL_SHARED=%v&FILE_NAME=%v&MIME_TYPE=%v&FL_ADD_WP=%v&UID=%v&DOC_STAT=%v&EMBED=%v&OPT=%v&STRUWM=%v&STRUWMI=%v&AUTOML=%v&PINKEY=%v&murl=%v", TYPE, TITLE, DESC, CATEGORY, bKey, FL_SHARED, FILE_NAME, MIME_TYPE, FL_ADD_WP, UID, DOC_STAT, EMBED, OPT, STRUWM, STRUWMI, AUTOML, PINKEY, mUrl)
                            http.Redirect(w, r, reqStr, http.StatusFound)
                        default:
                           //log.Printf("No source indicated") 
                    }
                    return
				default:
					if CATEGORY != "" {
						redURL := fmt.Sprintf("/infodb?DB_FUNC=MEDIA&CATEGORY=%v", CATEGORY)
						http.Redirect(w, r, redURL, http.StatusFound)
						return
					} else {
						redURL := fmt.Sprintf("/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT")
						http.Redirect(w, r, redURL, http.StatusFound)
						return
					}
					//}
		
			}
			
		}
	}
}
//D0066
var htmlBotHdr = template.Must(template.New("htmlBotHdr").Parse(htmlBotHdrA))
const htmlBotHdrA = `
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>ULAPPH Bot</title>

	<!-- for mobile screens -->
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<!-- stylesheets are conveniently separated into components -->
	<link rel="stylesheet" media="all" href="/static/lib/css/chat-bubble/setup.css">
	<link rel="stylesheet" media="all" href="/static/lib/css/chat-bubble/says.css">
	<link rel="stylesheet" media="all" href="/static/lib/css/chat-bubble/reply.css">
	<link rel="stylesheet" media="all" href="/static/lib/css/chat-bubble/typing.css">
	<link rel="stylesheet" media="all" href="/static/lib/css/chat-bubble/input.css">
	<style>
	body {
		background: #dcdde0;
	}
	.bubble-container {
		height: 100vh;
	}
	.bubble-container .input-wrap textarea {
		margin: 0;
		width: calc(100% - 30px);
	}
	</style>
	<script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
</head>
<body onload="redirectLogin()">

<!-- container element for chat window -->
<div id="chat"></div>
<input type="hidden" id="uid" value="{{.STR_FILLER1}}">

<!-- import the JavaScript file -->
<script src="/static/lib/js/chat-bubble/Bubbles.js"></script>
`

//D0066
var htmlBotFtr = template.Must(template.New("htmlBotFtr").Parse(htmlBotFtrA))
const htmlBotFtrA = `
</body>
</html>
`

var htmlD3PopPage = template.Must(template.New("htmlPopPage").Parse(htmlPopPageA))
 
const htmlPopPageA = `

<!DOCTYPE html>
<meta charset="utf-8">
<head>
	<title>Quick Info</title>
</head>
<h1>{{.STR_FILLER1}}</h1>
<hr>
{{.STR_FILLER2}}
<hr>
<h3><a href="{{.STR_FILLER3}}">More...</a></h3>

`

 
var mediaMusicPlayerA = template.Must(template.New("mediaMusicPlayerA").Parse(mediaMusicPlayerUMP1))
 
const mediaMusicPlayerUMP1 = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Music Player::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<script src="/static/js/modernizr.custom.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script src="/static/js/jquery.cookie.js"></script>
`
 
var mediaMusicPlayerA2 = template.Must(template.New("mediaMusicPlayerA").Parse(mediaMusicPlayerUMP12))
 
const mediaMusicPlayerUMP12 = `
 
<script src="/static/js/able-player.js"></script>
 
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>
<style>
/* static */
body {
  background: #fdfdfd;
  margin: 0;
}

.shadow {
  position: absolute;
  top: 50%;
  width: 100%;
  height: 50%;
  background: linear-gradient(to bottom, black 0%, rgba(44, 44, 44, 0.8) 30%, rgba(56, 56, 56, 0.8) 45%, rgba(59, 59, 59, 0.8) 55%, rgba(56, 56, 56, 0.8) 65%, rgba(43, 43, 43, 0.8) 100%);
}

@keyframes play {
  to {
    height: 11em;
  }
}
</style>
  <script>
  window.console = window.console || function(t) {};
</script>

  
  
  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>		
</head>
 
<body translate="no">
<form action="/media?FUNC_CODE=UMP" method="POST" enctype="multipart/form-data">
<input type="search" name="FILTER" value="" placeholder="Enter keyword..." /> [<a href="#" onclick="gotoTags();return false;">See Tags</a>]
</form>
<script>
function gotoTags() {
    var top = document.getElementById("music_tags").offsetTop;
    window.scrollTo(0, top);
}
function playMusicUWM(mLink) {
	if (window.XMLHttpRequest)
	  {// code for IE7+, Firefox, Chrome, Opera, Safari
	  cxhr2=new XMLHttpRequest();
	  }
	else
	  {// code for IE6, IE5
	  cxhr2=new ActiveXObject('MSXML2.XMLHTTP.3.0');
	  }
	cxhr2.open("GET",mLink, true);
        cxhr2.send();
	console.log("Music has been queued...");
}
</script>
 
<audio id="audio1" preload="auto" data-able-player autoplay>
</audio>
 
<ul class="able-playlist" data-player="audio1" data-embedded>
`
 
var mediaMIDIPlayerB = template.Must(template.New("mediaMIDIPlayerB").Parse(mediaMIDIPlayerUMP1))
 
const mediaMIDIPlayerUMP1 = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>MIDI Player::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<script src="/static/js/modernizr.custom.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script type='text/javascript' src='/static/js/midi.js'></script>
<script src="/static/js/jquery.cookie.js"></script>
`
 
var mediaMIDIPlayerB2 = template.Must(template.New("mediaMIDIPlayerB").Parse(mediaMIDIPlayerUMP12))
 
const mediaMIDIPlayerUMP12 = `
<script src="/static/js/able-player.js"></script>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>
		
</head>
 
<body>
 
<form action="/media?FUNC_CODE=MDP" method="POST" enctype="multipart/form-data">
<input type="search" name="FILTER" value="" placeholder="Enter keyword..." />
</form>
 
		<style type="text/css">
.source_code { background-color: #bbbbff; color:black }	
.player { background-color: #bbbbff; color:black; border: 2px solid grey;}		</style>
 
		<div class="player">
			<div style="font-size: 71%;font-size: 71%">
				MIDI Status:: <span id="msg" style="color: green">Initializing ...</span>
			</div>
		</div>
	<script type='text/javascript'>	
		function doPlay(midiLink) {
			document.getElementById("msg").innerHTML = "Playing...";
			var m = new MidiPlayer(midiLink);
			m.setDebugDiv('msg');
			m.play();
		}
	</script>
 
	<ul class="able-playlist" data-player="video1" data-embedded>
 
` 
var mediaDispTemplateUMP = template.Must(template.New("mediaDispTemplateUMP").Parse(mediaDispTemplateHTMLUMP))
 
const mediaDispTemplateHTMLUMP = `
{{range .}}
<li
	  data-mp3="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}"
		data-ogg="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}">{{.TITLE}}#{{.DESC}}<br>[ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a href="#" onclick="playMusicUWM('/search?f=RC_PLAY_MUSIC&q={{.MEDIA_ID}}'); return false;">PlayUWM</a> ] [ <a href="https://www.google.com/search?q={{.TITLE}}-{{.DESC}} lyrics" target="ump-lyrics">Lyrics</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="ump-delete">Delete</a> ]</li>
{{end}}
`
//D0118
var mediaDispTemplateUMPStatic = template.Must(template.New("mediaDispTemplateUMPStatic").Parse(mediaDispTemplateHTMLUMPStatic))
 
const mediaDispTemplateHTMLUMPStatic = `
{{range .}}
<li
	  data-mp3="{{.BLOB_KEY}}"
		data-ogg="{{.BLOB_KEY}}">{{.TITLE}}#{{.DESC}}<br>[ <a href="{{.BLOB_KEY}}" target="ump-play">Play</a> ] [ <a href="https://www.google.com/search?q={{.TITLE}}-{{.DESC}} lyrics" target="ump-lyrics">Lyrics</a> ]</li>
{{end}}
`

var mediaDispTemplateUMPStaticFiltered = template.Must(template.New("mediaDispTemplateUMPStaticFiltered").Parse(mediaDispTemplateHTMLUMPStaticFiltered))
 
const mediaDispTemplateHTMLUMPStaticFiltered = `
<li
	  data-mp3="{{.BLOB_KEY}}"
		data-ogg="{{.BLOB_KEY}}">{{.TITLE}}#{{.DESC}}<br>[ <a href="{{.BLOB_KEY}}" target="ump-play">Play</a> ] [ <a href="https://www.google.com/search?q={{.TITLE}}-{{.DESC}} lyrics" target="ump-lyrics">Lyrics</a> ]</li>
`
 
var mediaDispTemplateMDP = template.Must(template.New("mediaDispTemplateMDP").Parse(mediaDispTemplateHTMLMDP))
 
const mediaDispTemplateHTMLMDP = `
{{range .}}
<li>
<a href="#example" onclick="doPlay('/media?FUNC_CODE=PLAY&SID=TDSMEDIA-{{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}&MIME_TYPE={{.MIME_TYPE}}');">Play {{.TITLE}} - {{.DESC}}</a> [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="mdp-delete">Delete</a> ]
</li>
 
{{end}}
`
 
var mediaDispTemplateUMPFiltered = template.Must(template.New("mediaDispTemplateUMPFiltered").Parse(mediaDispTemplateHTMLUMPF))
 
const mediaDispTemplateHTMLUMPF = `
<li
	  data-mp3="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}"
		data-ogg="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}">{{.TITLE}}#{{.DESC}}<br>[ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a href="#" onclick="playMusicUWM('/search?f=RC_PLAY_MUSIC&q={{.MEDIA_ID}}'); return false;">PlayUWM</a> ] [ <a href="https://www.google.com/search?q={{.TITLE}}-{{.DESC}} lyrics" target="ump-lyrics">Lyrics</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="ump-delete">Delete</a> </li>
`
 
var mediaDispTemplateMDPFiltered = template.Must(template.New("mediaDispTemplateMDPFiltered").Parse(mediaDispTemplateHTMLMDPF))
 
const mediaDispTemplateHTMLMDPF = `
 
<li>
<a href="#example" onclick="MIDIjs.play('/media?FUNC_CODE=PLAY&SID=TDSMEDIA-{{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}&MIME_TYPE={{.MIME_TYPE}}');">Play {{.TITLE}} - {{.DESC}}</a> [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="mdp-delete">Delete</a> ]
</li>
 
`
 
var mediaVideoPlayerA = template.Must(template.New("mediaVideoPlayerA").Parse(mediaVideoPlayerUVP1))
 
const mediaVideoPlayerUVP1 = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Video Player::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<script src="/static/js/modernizr.custom.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script src="/static/js/jquery.cookie.js"></script>
`
 
var mediaVideoPlayerA2 = template.Must(template.New("mediaVideoPlayerA").Parse(mediaVideoPlayerUVP12))
 
const mediaVideoPlayerUVP12 = `	
<script src="/static/js/able-player.js"></script>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>
 
</head>
 
<body>
 
<form action="/media?FUNC_CODE=UVP" method="POST" enctype="multipart/form-data">
<input type="search" name="FILTER" value="" placeholder="Enter keyword..." />
</form>
<video id="video1" preload="auto" data-able-player autoplay>
</video>
<ul class="able-playlist" data-player="video1" data-embedded>
`
 
var mediaDispTemplateUVP = template.Must(template.New("mediaDispTemplateUVP").Parse(mediaDispTemplateHTMLUVP))
 
const mediaDispTemplateHTMLUVP = `
{{range .}}
<li
	  data-mp4="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}"
		data-ogv="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}">{{.TITLE}}#{{.DESC}}<br>[ <a href="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}">Play</a> ] [ <a href="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}" target="uvp">Fullscreen</a> ] [ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="uvp-delete">Delete</a> ]</li>
{{end}}
`
 
var mediaDispTemplateUVPFiltered = template.Must(template.New("mediaDispTemplateUVPFiltered").Parse(mediaDispTemplateHTMLUVPF))
 
const mediaDispTemplateHTMLUVPF = `
<li
	  data-mp4="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}"
		data-ogv="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}">{{.TITLE}}#{{.DESC}}<br>[ <a href="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}">Play</a> ] [ <a href="/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}" target="uvp">Fullscreen</a> ] [ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="uvp-delete">Delete</a> ]</li>
`  
var htmlWidgetBrowser = template.Must(template.New("htmlWidgetBrowser").Parse(htmlWidgetBrowserA))
 
const htmlWidgetBrowserA = `	
<!doctype html>
<html lang="en-US">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
  <title>ULAPPH Search - ULAPPH Cloud Desktop</title>
  <meta name="description" content="ULAPPH Cloud Desktop" />
  <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
  <link rel="shortcut icon" href="/static/img/favicon.ico"/>
  <link rel="stylesheet" type="text/css" media="all" href="/static/css/searchbar-style.css">
  <script type="text/javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script type="text/javascript" src="/static/js/jquery.autocomplete.min.js"></script>
	<style>
	html *
	{
	   color: {{.STR_FILLER3}} !important;
	}
	body {
		//background: {{.STR_FILLER3}};
		background:url({{.STR_FILLER4}});
		background-size:100% 100%;
		background-repeat:no-repeat;
	}
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
    * {
    box-sizing: border-box;
    }

    body {
    margin: 0;
    }
	
	.button {
	  background-color: {{.STR_FILLER2}};
	  border: none;
	  color: white;
	  padding: 15px 32px;
	  text-align: center;
	  text-decoration: none;
	  display: inline-block;
	  font-size: 16px;
	  //margin: 4px 2px;
	  margin: auto;
	  cursor: pointer;
	}

    .navbar {
    overflow: hidden;
    //background-color: {{.STR_FILLER1}};
    font-family: Arial, Helvetica, sans-serif;
    }

    .navbar a {
    float: left;
    font-size: 16px;
    color: white;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    }

    .dropdown {
    float: left;
    overflow: hidden;
    }

    .dropdown .dropbtn {
    font-size: 16px;  
    border: none;
    outline: none;
    color: white;
    padding: 14px 16px;
    background-color: inherit;
    font: inherit;
    margin: 0;
    }

    .navbar a:hover, .dropdown:hover .dropbtn {
    background-color: {{.STR_FILLER1}};
    }

    .dropdown-content {
    display: none;
    position: absolute;
    background-color: {{.STR_FILLER3}};
    width: 100%;
    left: 0;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
    }

    .dropdown-content .header {
    background: {{.STR_FILLER3}};
    padding: 16px;
    color: white;
    }

    .dropdown:hover .dropdown-content {
    display: block;
    }

    /* Create three equal columns that floats next to each other */
    .column {
    float: left;
    width: 33.33%;
    padding: 10px;
    background-color: {{.STR_FILLER1}};
    height: 500px;
    }

    .column a {
    float: none;
    color: black;
    padding: 16px;
    text-decoration: none;
    display: block;
    text-align: left;
    }

    .column a:hover {
    background-color: {{.STR_FILLER2}};
    }

    /* Clear floats after the columns */
    .row:after {
    content: "";
    display: table;
    clear: both;
    }

    /* Responsive layout - makes the three columns stack on top of each other instead of next to each other */
    @media screen and (max-width: 600px) {
    .column {
        width: 100%;
        height: auto;
    }
    }
	
	#searchfield form {
	  display: inline-block;
	  background: {{.STR_FILLER1}};
	  padding: 0;
	  margin: 0;
	  padding: 5px;
	  border-radius: 3px;
	  margin: 5px 0 0 0;
	}
    </style>
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/float-buttons.css" />
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
`
 
var htmlWidgetBrowserS = template.Must(template.New("htmlWidgetBrowserS").Parse(htmlWidgetBrowserH))
 
const htmlWidgetBrowserH = `	
<!doctype html>
<html lang="en-US">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
  <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
  <meta name="description" content="ULAPPH Cloud Desktop" />
  <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
  <link rel="shortcut icon" href="/static/img/favicon.ico"/>
  <link rel="stylesheet" type="text/css" media="all" href="/static/css/searchbar-style.css">
  <script type="text/javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script type="text/javascript" src="/static/js/jquery.autocomplete.min.js"></script>
  <link rel="stylesheet" href="/static/css/font-awesome.min.css">
  <link rel="stylesheet" href="/static/css/style.min.css">
  <link rel="stylesheet" href="/static/css/alertify.core.css" />
  <link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
  <style>
	.img-circle {
    border-radius: 50%;
	}
  </style>
`
 
var htmlWidgetBrowserLoading = template.Must(template.New("htmlWidgetBrowserS").Parse(htmlWidgetBrowserC1))
 
const htmlWidgetBrowserC1 = `	
<!doctype html>
<html lang="en-US">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
  <title>Loading ULAPPH Cloud Desktop::www.ulapph.com - ULAPPH Cloud Desktop</title>
  <meta name="description" content="ULAPPH Cloud Desktop" />
  <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
  <link rel="shortcut icon" href="/static/img/favicon.ico"/>
  <meta http-equiv="refresh" content="{{.}}" />
  <style type="text/css">
	 body  {
		background: #fff;
	}
	#loaduwm{
		position: absolute;
		top: 50%;
		left: 50%;
		margin-top: -50px;
		margin-left: -50px;
		width: 400px;
		height: 100px;
	}
   </style>
` 
//D0113
var htmlWidgetBrowserB = template.Must(template.New("htmlWidgetBrowserB").Parse(htmlWidgetBrowserAB))
	
const htmlWidgetBrowserAB = `	
<body>
	<input type="hidden" id="aUser" value="{{.STR_FILLER3}}">
    <div class="navbar" onmouseover="removeIconsBar();return false;">
    <div class="dropdown">
        <button class="dropbtn">Search Engines 
        <i class="fa fa-caret-down"></i>
        </button>
        <div class="dropdown-content">  
        <div class="row">
            <div class="column">
            <a href="#" onclick="setEngineProfile('everything','Search Everything');return false">Search Everything</a>
			<a href="#" onclick="setEngineProfile('basic','Basic Search');return false">Basic Search</a>
			<a href="#" onclick="setEngineProfile('just-google','Google Search');return false">Just Google Search</a>
			<a href="#" onclick="setEngineProfile('just-bing','Bing Search');return false">Just Bing Search</a>
			<a href="#" onclick="setEngineProfile('developer','Developer Search');return false">Developer Search</a>
            <a href="#" onclick="setEngineProfile('pharmacy','Pharmacy Search');return false">Pharmacy Search</a>
			<a href="#" onclick="setEngineProfile('shopping','Shopping Search');return false">Shopping Search</a>
			<a href="#" onclick="setEngineProfile('grocery','Grocery Search');return false">Grocery Search</a>
			<a href="#" onclick="setEngineProfile('patent','Patent Search');return false">Patent Search</a>
			<a href="#" onclick="setEngineProfile('religion','Religion Search');return false">Religion Search</a>
            </div>
            <div class="column">
            <!-- add more here-->
            </div>
            <div class="column">
			<a href="#" onclick="showIconsBar();return false">[Show Left Icons]</a>
			<a href="#" onclick="toggleSearchBox();return false">[Show/Hide Search]</a>
			<a href="/tools?FUNC=WIDGET&t=MiniBrowserGetCustom" >[Custom Search]</a>
            </div>
        </div>
        </div>
    </div> 
    </div>
  <div id="w">
    <div id="content" onmouseover="showIconsBar();return false;">
	{{if eq .STR_FILLER1 "ULAPPH Cloud Desktop" }}
		<h1><a href="#" onclick="clearLocalIndex();return false;" title="Clear Search Data" ><div class="childdiv">ULAPPH Search</div></a>
		  <div class="pst-example" title="Philippine Standard Time">
		  </div>Philippines
		  <script type="text/javascript" id="gwt-pst">
			(function(d, eId) {
			  var js, gjs = d.getElementById(eId);
			  js = d.createElement('script'); js.id = 'gwt-pst-jsdk';
			  js.src = "//gwhs.i.gov.ph/pst/gwtpst.js?"+new Date().getTime();
			  gjs.parentNode.insertBefore(js, gjs);
			}(document, 'gwt-pst'));

			var gwtpstReady = function(){
			  var otherFormat = 'h:MM:ss TT';
			  var firstPst = new gwtpstTime({
				timerClass: 'pst-example',
				format: otherFormat
			  });
			}
		  </script>
		</h1>
	{{else}}
		<h1><a href="{{.STR_FILLER2}}" title="View JSON Source">{{.STR_FILLER1}}</a></h1>
	{{end}}
 
      <div id="searchfield">
        <form action="/tools?FUNC=WIDGET&t=MiniBrowserPost" method="POST" enctype="multipart/form-data">
        <input type="text" name="url" class="biginput" id="autocomplete" autofocus="autofocus">
		<input type="submit" class="button" value="Go">
		<input type="button" class="button" value="Close Tabs" id="stabs" onclick="clearTabs();return false;">
        <input type="hidden" name="engine" id="engine" value="/search?f=glow2&t=In ULAPPH&s=" />
        </form>
      </div><!-- @end #searchfield -->
 
      <div id="outputbox">
        <p id="outputcontent" align="center"><!--a href="/website?q=home">Contents</a> | <a href="/social?SO_FUNC=show-trending">Trending</a> | <a href="/social?SO_FUNC=show-whats-new">Whats New!</a> | <a href="/search?f=glow2&In ULAPPH&i=yes">Goto Multi-Search</a--></p>
      </div>
    </div><!-- @end #content -->
  </div><!-- @end #w -->
	<div class="icon-bar">
	  <a href="/uwm?targetDesktop=none" target="uwmDefault" title="Open ULAPPH Cloud Desktop" class="desktop"><i class="fa fa-desktop"></i></a>
	  <a href="#" onclick="openChatWithUserID('/chat-bubble/ulapphbot.html');return false;" title="Chat with AI" class="robot"><i class="fa fa-android"></i></a>
      <!--a href="https://mail.google.com/" target="gmail" title="Open Gmail"  class="envelope"><i class="fa fa-envelope"></i></a-->		
	  <!--a href="https://en.m.wikipedia.org/wiki/Main_Page" target="wiki" title="Open Wikipedia" class="wiki"><i class="fa fa-wikipedia-w"></i></a-->
	  <a href="#" onclick="window.location.reload();return false;" title="Random Wallpaper" class="random"><i class="fa fa-random"></i></a>
	  <!--a href="https://www.facebook.com" target="facebook" title="Open Facebook" class="facebook"><i class="fa fa-facebook"></i></a--> 
	  <!--a href="https://www.twitter.com" target="twitter" title="Open Twitter" class="twitter"><i class="fa fa-twitter"></i></a--> 
	  <!--a href="https://www.linkedin.com" target="linkedin" title="Open LinkedIn" class="linkedin"><i class="fa fa-linkedin"></i></a-->
	  <!--a href="https://www.youtube.com" target="youtube" title="Open Youtube" class="youtube"><i class="fa fa-youtube"></i></a-->
	  <!--a href="/editor?MEDIA_ID=0&SID=NEWTEXT&EDIT_FUNC=READER" target="text-editor" title="Open Notepad" class="notepad"><i class="fa fa-edit"></i></a-->
	  <!--a href="https://keep.google.com/" target="text-editor" title="Open Google Keep" class="notepad"><i class="fa fa-edit"></i></a-->
	  <a href="#" onclick="toggleSearchBox();return false;" target="search" title="Show/Hide Search" class="search"><i class="fa fa-search"></i></a> 
	</div>
  <script type="text/javascript">
	//parse URL values
	var urlParams;
	var match,
			pl     = /\+/g,  // Regex for replacing addition symbol with a space
			search = /([^&=]+)=?([^&]*)/g,
			decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
			query  = window.location.search.substring(1);

	urlParams = {};
	while (match = search.exec(query))
	   urlParams[decode(match[1])] = decode(match[2]);
	
	var windows = [];
	var bTabs = document.getElementById("stabs");
	
	if (urlParams["kw"] !== undefined && urlParams["kw"] !== "") {
		switch (localStorage["search-engine-profile"]) {
			case "shopping":
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=shop&q='+urlParams["kw"], 'Google Shopping'+urlParams["kw"]));
				windows.push(window.open('https://www.lazada.com.ph/catalog/?q='+urlParams["kw"], 'Lazada'+urlParams["kw"]));
				windows.push(window.open('https://www.carousell.ph/search/'+urlParams["kw"], 'Carousell'+urlParams["kw"]));
				windows.push(window.open('https://shopee.ph/search?keyword='+urlParams["kw"], 'Shopee'+urlParams["kw"]));
				windows.push(window.open('https://www.facebook.com/marketplace/search/?query='+urlParams["kw"], 'FB Marketplace'+urlParams["kw"]));
				windows.push(window.open('https://www.zalora.com.ph/catalog/?q='+urlParams["kw"], 'Zalora'+urlParams["kw"]));
				windows.push(window.open('https://www.metrodeal.com/search?q='+urlParams["kw"], 'Metrodeal'+urlParams["kw"]));
				windows.push(window.open('https://www.ebay.ph/sch/i.html?_nkw='+urlParams["kw"], 'Ebay'+urlParams["kw"]));
				windows.push(window.open('https://www.galleon.ph/search?keyword='+urlParams["kw"], 'Galleon'+urlParams["kw"]));
				windows.push(window.open('https://villman.com/Search.php?stext='+urlParams["kw"], 'Villman'+urlParams["kw"]));
				windows.push(window.open('https://www.abenson.com/search/'+urlParams["kw"], 'Abenson'+urlParams["kw"]));
				windows.push(window.open('https://robinsonsappliances.com.ph/search?type=product&q='+urlParams["kw"], 'Robinsons'+urlParams["kw"]));
				windows.push(window.open('https://www.smappliance.com/catalogsearch/result/?q='+urlParams["kw"], 'SM Appliance'+urlParams["kw"]));
				windows.push(window.open('https://ansons.ph/?s='+urlParams["kw"], 'Ansons'+urlParams["kw"]));
				windows.push(window.open('https://automatic-centre.com/?s='+urlParams["kw"], 'Automatic'+urlParams["kw"]));
				windows.push(window.open('https://dealgrocer.com/?'+urlParams["kw"], 'DealGrocer'+urlParams["kw"]));
				windows.push(window.open('https://www.lamudi.com.ph/buy/?q='+urlParams["kw"], 'Lamudi'+urlParams["kw"]));
				windows.push(window.open('https://www.carmudi.com.ph/?'+urlParams["kw"], 'Carmudi'+urlParams["kw"]));
				windows.push(window.open('https://www.autodeal.com.ph/?'+urlParams["kw"], 'AutoDeal'+urlParams["kw"]));
				windows.push(window.open('https://www.zipmatch.com/sale/condominium/'+urlParams["kw"], 'Zipmatch'+urlParams["kw"]));
				windows.push(window.open('https://kimstore.com/catalogue?keyword='+urlParams["kw"], 'Kimstore'+urlParams["kw"]));
				windows.push(window.open('https://shop.globe.com.ph/search?search='+urlParams["kw"], 'Globe'+urlParams["kw"]));
				windows.push(window.open('https://www.ticketnet.com.ph/events/showsearch?showsandevents='+urlParams["kw"], 'TicketNet'+urlParams["kw"]));
				windows.push(window.open('https://www.poundit.com/search?type=product&q='+urlParams["kw"], 'Poundit'+urlParams["kw"]));
				windows.push(window.open('https://www.thesmstore.com/search?q='+urlParams["kw"], 'SM Store'+urlParams["kw"]));
				windows.push(window.open('https://rustans.com/search?q='+urlParams["kw"], 'Rustans'+urlParams["kw"]));
				windows.push(window.open('https://www.robinsonsdepartmentstore.com.ph/search/'+urlParams["kw"], 'Robinsons'+urlParams["kw"]));
				windows.push(window.open('https://www.ubuy.com.ph/search/?q='+urlParams["kw"], 'Ubuy'+urlParams["kw"]));
				windows.push(window.open('https://www.shopback.ph/product/search/'+urlParams["kw"], 'ShopBack'+urlParams["kw"]));
				windows.push(window.open('https://www.shoptv.com.ph/catalogsearch/result/?q='+urlParams["kw"], 'ShopTV'+urlParams["kw"]));
				windows.push(window.open('https://rootscollective.ph/search?q='+urlParams["kw"], 'RootsCollective'+urlParams["kw"]));
				windows.push(window.open('https://www.thenestgenie.com/search?utf8=%E2%9C%93&q='+urlParams["kw"], 'NestGenie'+urlParams["kw"]));
				windows.push(window.open('https://humanheartnature.com/buy/index.php/catalogsearch/result/?q='+urlParams["kw"], 'HumanNature'+urlParams["kw"]));
				windows.push(window.open('https://www.thenaturalemarket.com/search?q='+urlParams["kw"], 'NaturalMarket'+urlParams["kw"]));
				windows.push(window.open('https://allhome.com.ph/search.php?search_query='+urlParams["kw"], 'AllHome'+urlParams["kw"]));
				windows.push(window.open('https://www.digitalhome.ph/search?type=product&q='+urlParams["kw"], 'DigitalHome'+urlParams["kw"]));
				windows.push(window.open('https://www.furnituremanila.com.ph/?s='+urlParams["kw"], 'FurnitureManila'+urlParams["kw"]));
				windows.push(window.open('https://blade.ph/search?type=product%2Carticle&q='+urlParams["kw"], 'BladePH'+urlParams["kw"]));
				windows.push(window.open('https://chrissports.com/search?q='+urlParams["kw"], 'ChrisSports'+urlParams["kw"]));
				windows.push(window.open('https://visionexpress.ph/search?type=product%2Carticle%2Cpage&q='+urlParams["kw"], 'VisionExpress'+urlParams["kw"]));
				break;
			case "grocery":
				windows.push(window.open('https://smmarkets.ph/catalogsearch/result/?q='+urlParams["kw"], 'SM Markets'+urlParams["kw"]));
				windows.push(window.open('https://www.landers.ph/catalogsearch/result/?category=0&keyword='+urlParams["kw"], 'Landers'+urlParams["kw"]));
				windows.push(window.open('http://www.snrshopping.com/index.php?searchword='+urlParams["kw"], 'S&R'+urlParams["kw"]));
				windows.push(window.open('https://www.waltermartdelivery.com.ph/shop#!/?q='+urlParams["kw"], 'Waltermart'+urlParams["kw"]));
				windows.push(window.open('https://www.bayanmall.com/index.php?route=product/search&search='+urlParams["kw"], 'BayanMall'+urlParams["kw"]));
				windows.push(window.open('https://shopsuki.ph/search?type=product&q='+urlParams["kw"], 'ShopSuki'+urlParams["kw"]));
				windows.push(window.open('https://freshfindsmanila.com/search?q='+urlParams["kw"], 'FreshFinds'+urlParams["kw"]));
				windows.push(window.open('https://thegreengrocermanila.com/?s='+urlParams["kw"], 'GreenGrocer'+urlParams["kw"]));
				windows.push(window.open('https://karton.ph/search/products?query='+urlParams["kw"], 'Karton'+urlParams["kw"]));
				windows.push(window.open('https://www.nuthera.ph/search?q='+urlParams["kw"], 'Nuthera'+urlParams["kw"]));
				windows.push(window.open('https://www.minimart.ph/search?search='+urlParams["kw"], 'Minimart'+urlParams["kw"]));
				windows.push(window.open('https://www.gourmetdirect.ph/pages/search-results-page?q='+urlParams["kw"], 'GourmetDirect'+urlParams["kw"]));
				windows.push(window.open('https://freshmart.ph/search?q='+urlParams["kw"], 'Freshmart'+urlParams["kw"]));
				windows.push(window.open('https://www.thesuperfoodgrocer.com/search?type=product&q='+urlParams["kw"], 'SuperfoodGrocer'+urlParams["kw"]));
				windows.push(window.open('https://epalengke.com/search-products?search='+urlParams["kw"], 'Epalengke'+urlParams["kw"]));
				windows.push(window.open('https://foodsource.ph/search?type=product&q='+urlParams["kw"], 'FoodSource'+urlParams["kw"]));
				windows.push(window.open('https://rarefoodshop.com/search?type=article%2Cpage%2Cproduct&q='+urlParams["kw"], 'RareFoodShop'+urlParams["kw"]));
				windows.push(window.open('https://www.freshproduce.com.ph/search?controller=search&orderby=position&orderway=desc&search_query='+urlParams["kw"], 'FreshProduce'+urlParams["kw"]));
				windows.push(window.open('https://www.pacificbay.com.ph/search?type=product&q='+urlParams["kw"], 'PacificBay'+urlParams["kw"]));
				windows.push(window.open('https://deli.ph/search?type=product&q='+urlParams["kw"], 'Deli'+urlParams["kw"]));
				windows.push(window.open('https://realfoodph.com/search?options%5Bunavailable_products%5D=show&options%5Bprefix%5D=last&q='+urlParams["kw"], 'RealFood'+urlParams["kw"]));
				windows.push(window.open('https://crate2plate.com/search?options%5Bunavailable_products%5D=show&options%5Bprefix%5D=last&q='+urlParams["kw"], 'Crate2Plate'+urlParams["kw"]));
				windows.push(window.open('https://www.bigas-online.com/search?q='+urlParams["kw"], 'BigasOnline'+urlParams["kw"]));
				windows.push(window.open('https://themeatmarket.ph/search?q='+urlParams["kw"], 'MeatMarket'+urlParams["kw"]));
				windows.push(window.open('https://shop.gerald.ph/search?q='+urlParams["kw"], 'Gerald'+urlParams["kw"]));
				windows.push(window.open('https://www.mrgulay.com/search?q='+urlParams["kw"], 'MrGulay'+urlParams["kw"]));
				windows.push(window.open('https://delidrop.ph/search?options%5Bunavailable_products%5D=show&options%5Bprefix%5D=last&q='+urlParams["kw"], 'DeliDrop'+urlParams["kw"]));
				windows.push(window.open('https://www.bigasph.com/search?q='+urlParams["kw"], 'BigasPH'+urlParams["kw"]));
				break;
			case "pharmacy":
				windows.push(window.open('https://www.mercurydrug.com/index.html?'+urlParams["kw"], 'Mercury'+urlParams["kw"]));
				windows.push(window.open('https://www.watsons.com.ph/search?text='+urlParams["kw"], 'Watsons'+urlParams["kw"]));
				windows.push(window.open('https://southstardrug.com.ph/?'+urlParams["kw"], 'SouthStarDrug'+urlParams["kw"]));
				windows.push(window.open('https://www.aide-app.com/?'+urlParams["kw"], 'AIDE'+urlParams["kw"]));
				windows.push(window.open('https://www.muramed.com/?'+urlParams["kw"], 'MuraMed'+urlParams["kw"]));
				windows.push(window.open('https://puritanspride.ph/?s='+urlParams["kw"], 'Puritans'+urlParams["kw"]));
				windows.push(window.open('https://www.rosepharmacy.com/?s='+urlParams["kw"], 'RosePharmacy'+urlParams["kw"]));
				windows.push(window.open('https://healthyhabits.ph/search?q='+urlParams["kw"], 'HealthyHabits'+urlParams["kw"]));
				windows.push(window.open('https://www.nutritiondepot.com.ph/?'+urlParams["kw"], 'NutritionDepot'+urlParams["kw"]));
				windows.push(window.open('https://www.healthmart.ph/search?type=product&q='+urlParams["kw"], 'HealthMart'+urlParams["kw"]));
				windows.push(window.open('https://www.supplementhub.com.ph/?product_cat=0&s='+urlParams["kw"], 'SupplementHub'+urlParams["kw"]));
				break;
			case "developer":
				windows.push(window.open('https://www.bing.com/search?q='+urlParams["kw"], 'Bing'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?q='+urlParams["kw"], 'Google'+urlParams["kw"]));
				windows.push(window.open('https://stackoverflow.com/search?q='+urlParams["kw"], 'StackOverflow'+urlParams["kw"]));
				windows.push(window.open('https://serverfault.com/search?q='+urlParams["kw"], 'ServerFault'+urlParams["kw"]));
				windows.push(window.open('https://github.com/search?type=issues&q='+urlParams["kw"], 'Github-Issues'+urlParams["kw"]));
				windows.push(window.open('https://www.reddit.com/search/?q='+urlParams["kw"], 'Reddit'+urlParams["kw"]));
				windows.push(window.open('https://access.redhat.com/search/#/?q='+urlParams["kw"], 'Redhat'+urlParams["kw"]));
				break;
			case "religion":
				windows.push(window.open('https://www.biblegateway.com/quicksearch/?quicksearch='+urlParams["kw"], 'BibleGateway'+urlParams["kw"]));
				windows.push(window.open('https://www.islamicity.org/quransearch/?q='+urlParams["kw"], 'IslamicCity'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?q=religion+'+urlParams["kw"], 'Google'+urlParams["kw"]));
				windows.push(window.open('http://www.findingdulcinea.com/search.html?keywords='+urlParams["kw"], 'FindingDulcinea'+urlParams["kw"]));
				windows.push(window.open('https://www.biblestudytools.com/search/?s='+urlParams["kw"], 'BibleStudyTools'+urlParams["kw"]));
				windows.push(window.open('https://bibleproject.com/search/#?cludoquery='+urlParams["kw"], 'BibleProject'+urlParams["kw"]));
				break;
			case "basic":
				windows.push(window.open('https://www.google.com/search?source=lnt&tbs=qdr:d&q='+urlParams["kw"], 'Google Latest'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?q='+urlParams["kw"], 'Google'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=shop&q='+urlParams["kw"], 'Google Shopping'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=isch&q='+urlParams["kw"], 'Google Images'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=vid&q='+urlParams["kw"], 'Google Videos'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=bks&q='+urlParams["kw"], 'Google Books'+urlParams["kw"]));
				windows.push(window.open('https://www.baidu.com/s?wd='+urlParams["kw"], 'Baidu'+urlParams["kw"]));
				windows.push(window.open('https://search.yahoo.com/search?p='+urlParams["kw"],'Yahoo!'+urlParams["kw"]));
				windows.push(window.open('https://www.bing.com/search?q='+urlParams["kw"],'Bing'+urlParams["kw"]));
				windows.push(window.open('https://www.sogou.com/tx?query='+urlParams["kw"],'Soso'+urlParams["kw"]));
				windows.push(window.open('https://www.sogou.com/web?query='+urlParams["kw"],'Sogou'+urlParams["kw"]));
				windows.push(window.open('https://www.ask.com/web?q='+urlParams["kw"],'Ask.com'+urlParams["kw"]));
				windows.push(window.open('https://duckduckgo.com/?q='+urlParams["kw"],'DuckDuckGo'+urlParams["kw"]));
				windows.push(window.open('https://search.aol.com/aol/search?q='+urlParams["kw"],'AOL'+urlParams["kw"]));
				windows.push(window.open('https://youdao.com/w/eng/'+urlParams["kw"],'Youdao'+urlParams["kw"]));
				windows.push(window.open('https://www.webcrawler.com/serp?q='+urlParams["kw"],'WebCrawler'+urlParams["kw"]));
				break;
			case "just-google":
				windows.push(window.open('https://www.google.com/search?source=lnt&tbs=qdr:d&q='+urlParams["kw"], 'Google Latest'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?q='+urlParams["kw"], 'Google'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=shop&q='+urlParams["kw"], 'Google Shopping'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=isch&q='+urlParams["kw"], 'Google Images'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=vid&q='+urlParams["kw"], 'Google Videos'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=bks&q='+urlParams["kw"], 'Google Books'+urlParams["kw"]));
				break;
			case "just-bing":
				windows.push(window.open('https://www.bing.com/search?q='+urlParams["kw"],'Bing'+urlParams["kw"]));
				windows.push(window.open('https://www.bing.com/images/search?q='+urlParams["kw"],'BingImages'+urlParams["kw"]));
				windows.push(window.open('https://www.bing.com/videos/search?q='+urlParams["kw"],'BingVideos'+urlParams["kw"]));
				windows.push(window.open('https://www.bing.com/news/search?q='+urlParams["kw"],'BingNews'+urlParams["kw"]));
				windows.push(window.open('https://www.bing.com/search?filters=ex1%3a%22ez1%22&q='+urlParams["kw"],'BingLatest24h'+urlParams["kw"]));
				windows.push(window.open('https://www.bing.com/search?filters=ex1%3a%22ez2%22&q='+urlParams["kw"],'BingLatestWeek'+urlParams["kw"]));
				break;
			case "patent":
				windows.push(window.open('https://patents.google.com/?q='+urlParams["kw"],'GooglePatent'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnt&tbs=qdr:d&q=patent on '+urlParams["kw"], 'Google Latest'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?q=patent on '+urlParams["kw"], 'Google'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=isch&q=patent on '+urlParams["kw"], 'Google Images'+urlParams["kw"]));
				windows.push(window.open('https://www.youtube.com/results?sp=CAI%253D&search_query=patent on +'+urlParams["kw"],'YoutubePatents'+urlParams["kw"]));
				break;
			case "everything":
				windows.push(window.open('https://translate.google.com/?sl=auto&tl=en&op=translate&text='+urlParams["kw"], 'Google Translate'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnt&tbs=qdr:d&q='+urlParams["kw"], 'Google Latest'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?q='+urlParams["kw"], 'Google'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=shop&q='+urlParams["kw"], 'Google Shopping'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=isch&q='+urlParams["kw"], 'Google Images'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=vid&q='+urlParams["kw"], 'Google Videos'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/search?source=lnms&tbm=bks&q='+urlParams["kw"], 'Google Books'+urlParams["kw"]));
				windows.push(window.open('https://www.baidu.com/s?wd='+urlParams["kw"], 'Baidu'+urlParams["kw"]));
				windows.push(window.open('https://search.yahoo.com/search?p='+urlParams["kw"],'Yahoo!'+urlParams["kw"]));
				windows.push(window.open('https://www.bing.com/search?q='+urlParams["kw"],'Bing'+urlParams["kw"]));
				windows.push(window.open('https://www.sogou.com/tx?query='+urlParams["kw"],'Soso'+urlParams["kw"]));
				windows.push(window.open('https://www.sogou.com/web?query='+urlParams["kw"],'Sogou'+urlParams["kw"]));
				windows.push(window.open('https://www.ask.com/web?q='+urlParams["kw"],'Ask.com'+urlParams["kw"]));
				windows.push(window.open('https://duckduckgo.com/?q='+urlParams["kw"],'DuckDuckGo'+urlParams["kw"]));
				windows.push(window.open('https://search.aol.com/aol/search?q='+urlParams["kw"],'AOL'+urlParams["kw"]));
				windows.push(window.open('https://youdao.com/w/eng/'+urlParams["kw"],'Youdao'+urlParams["kw"]));
				windows.push(window.open('https://www.webcrawler.com/serp?q='+urlParams["kw"],'WebCrawler'+urlParams["kw"]));
				windows.push(window.open('https://www.washingtonpost.com/newssearch/?query='+urlParams["kw"],'WP'+urlParams["kw"]));
				windows.push(window.open('https://www.nytimes.com/search?query='+urlParams["kw"],'NYT'+urlParams["kw"]));
				windows.push(window.open('https://www.weforum.org/search?query='+urlParams["kw"],'WEF'+urlParams["kw"]));
				windows.push(window.open('https://search.un.org/results.php?query='+urlParams["kw"],'UN'+urlParams["kw"]));
				windows.push(window.open('https://www.who.int/westernpacific/home/search?indexCatalogue=wpro-content-index&wordsMode=AllWords&healthtopic=undefined&country=undefined&searchQuery='+urlParams["kw"],'WHO'+urlParams["kw"]));
				windows.push(window.open('https://www.reddit.com/search/?q='+urlParams["kw"],'Reddit'+urlParams["kw"]));	
				windows.push(window.open('https://github.com/search?q='+urlParams["kw"],'Github'+urlParams["kw"]));
				windows.push(window.open('https://stackoverflow.com/questions/tagged/'+urlParams["kw"],'StackOverflow'+urlParams["kw"]));
				windows.push(window.open('https://en.wikipedia.org/wiki/'+urlParams["kw"],'Wikipedia'+urlParams["kw"]));
				windows.push(window.open('https://www.dost.gov.ph/component/search/?searchword='+urlParams["kw"],'DOST'+urlParams["kw"]));
				windows.push(window.open('https://www.merriam-webster.com/dictionary/'+urlParams["kw"],'Meriam-Webster'+urlParams["kw"]));
				windows.push(window.open('https://web.archive.org/web/*/'+urlParams["kw"],'Internet Archive'+urlParams["kw"]));
				windows.push(window.open('https://www.youtube.com/results?search_query='+urlParams["kw"],'Youtube'+urlParams["kw"]));
				windows.push(window.open('https://www.instructables.com/howto/'+urlParams["kw"],'How-to'+urlParams["kw"]));
				windows.push(window.open('https://www.google.com/maps/search/'+urlParams["kw"],'Maps'+urlParams["kw"]));
				windows.push(window.open('https://www.gutenberg.org/ebooks/search/?query='+urlParams["kw"],'Gutenberg'+urlParams["kw"]));
				windows.push(window.open('https://www.coursera.org/search?query='+urlParams["kw"],'Coursera'+urlParams["kw"]));
				windows.push(window.open('https://www.udemy.com/courses/search/?src=ukw&q='+urlParams["kw"],'Udemy'+urlParams["kw"]));
				windows.push(window.open('https://www.linkedin.com/learning/search?keywords='+urlParams["kw"],'LinkedIn'+urlParams["kw"]));
				windows.push(window.open('https://ds.mainlib.upd.edu.ph/Search/Results?lookfor='+urlParams["kw"],'UP'+urlParams["kw"]));
				windows.push(window.open('https://www.mit.edu/search/?q='+urlParams["kw"],'MIT'+urlParams["kw"]));
				windows.push(window.open('https://ocw.mit.edu/search/ocwsearch.htm?q='+urlParams["kw"],'MIT-OCW'+urlParams["kw"]));
				windows.push(window.open('https://podcasts.ox.ac.uk/open/search?openterms='+urlParams["kw"],'OXF-OCW'+urlParams["kw"]));
				windows.push(window.open('https://archive.org/search.php?query='+urlParams["kw"],'Archive'+urlParams["kw"]));
				windows.push(window.open('https://play.google.com/store/search?q='+urlParams["kw"],'PlayStore'+urlParams["kw"]));
				windows.push(window.open('https://drive.google.com/drive/search?q='+urlParams["kw"],'Google Drive'+urlParams["kw"]));
				windows.push(window.open('https://onedrive.live.com/?qt=search&q='+urlParams["kw"],'MS Drive'+urlParams["kw"]));
				windows.push(window.open('https://mail.google.com/mail/u/0/#search/'+urlParams["kw"],'Gmail'+urlParams["kw"]));
				windows.push(window.open('https://www.ipophil.gov.ph/?s='+urlParams["kw"],'IPOPHIL'+urlParams["kw"]));
				windows.push(window.open('https://patents.google.com/?q='+urlParams["kw"],'Google Patents'+urlParams["kw"]));
				windows.push(window.open('https://scholar.google.com/scholar?q='+urlParams["kw"],'Google Scholar'+urlParams["kw"]));
				windows.push(window.open('https://www.eventbrite.com/d/online/'+urlParams["kw"],'Eventbrite'+urlParams["kw"]));
				windows.push(window.open('https://www.meetup.com/find?keywords='+urlParams["kw"],'Meetups'+urlParams["kw"]));
				windows.push(window.open('https://www.biblegateway.com/quicksearch/?quicksearch='+urlParams["kw"] + '&version=NIV','BibleGateway'+urlParams["kw"]));
				break;
		}
		window.history.pushState('{}', 'ULAPPH Search', '/tools?FUNC=WIDGET&t=MiniBrowserGet');
		bTabs.style.display = "block";
	} else {
		bTabs.style.display = "none";
	}
	
    if(typeof(Storage) !== "undefined") {
		console.log("Save index to local...")
		{{if eq .STR_FILLER1 "ULAPPH Cloud Desktop" }}
			localStorage.searchStorage = '<!doctype html>' + '<html>' + window.document.documentElement.innerHTML + '</html>';
		{{end}}
    } else {
        //alert("Sorry, your browser does not support web storage... You won't be able to record or see session details.");
        //return
    }	
	
	function clearTabs() {
		for(var i = 0; i < windows.length; i++){
			windows[i].close()
		}
		bTabs.style.display = "none";
	}
	function clearLocalIndex() {
		console.log("Clearing local index...")
		{{if eq .STR_FILLER1 "ULAPPH Cloud Desktop" }}
            localStorage.searchStorage = "";
            localStorage["search-engine-url"] = "";
            localStorage["search-engine-name"] = "";
			//window.location.assign("/tools?FUNC=CLR_AC");
			clearCacheMB();
		{{end}}
		//return;
    }
    function setEngine(url,name) {
        document.getElementById("engine").value = url;
        document.getElementsByClassName("childdiv")[0].innerHTML=name;
        localStorage["search-engine-url"] = url;
        localStorage["search-engine-name"] = name;
        var root = location.protocol + '//' + location.host;
        var keyword = document.getElementsByClassName("biginput")[0].value;
        console.log(keyword);
        var message = "@888@ULAPPH-SYS-UPD@888@SYS_OPEN_WINDOW@888@" + url + keyword;
        message = message.replace(" ", "%%20")
        console.log(message);
        //window.postMessage(message,root);
        sendSysCmd(message);
    }
    function setEngineProfile(id,name) {
        //document.getElementById("engine").value = url;
        document.getElementsByClassName("childdiv")[0].innerHTML=name;
        localStorage["search-engine-profile"] = id;
        localStorage["search-engine-name"] = name;
        var root = location.protocol + '//' + location.host;
        var keyword = document.getElementsByClassName("biginput")[0].value;
        console.log(keyword);
        //var message = "@888@ULAPPH-SYS-UPD@888@SYS_OPEN_WINDOW@888@" + url + keyword;
        //message = message.replace(" ", "%%20")
        //console.log(message);
        //window.postMessage(message,root);
        //sendSysCmd(message);
    }
    if (localStorage["search-engine-url"] !== "" && localStorage["search-engine-url"] !== undefined) {
        document.getElementById("engine").value = localStorage["search-engine-url"];
    }
    if (localStorage["search-engine-name"] !== "" && localStorage["search-engine-name"] !== undefined) {
        document.getElementsByClassName("childdiv")[0].innerHTML=localStorage["search-engine-name"];
    }
    function sendSysCmd(msg) {
        if (window.XMLHttpRequest)
        {// code for IE7+, Firefox, Chrome, Opera, Safari
        cxhrc=new XMLHttpRequest();
        }
        else
        {// code for IE6, IE5
        cxhrc=new ActiveXObject('MSXML2.XMLHTTP.3.0');
        } 
        cxhrc.open("GET","/message-channel?CHAN_FUNC=ulapphsyscmd&message=" + msg, true); 
        cxhrc.send();
        
        cxhrc.onreadystatechange=function()
        {
        if (cxhrc.readyState==4 && cxhrc.status==200)
            {
            var currVal = cxhrc.responseText;
            console.log(currVal);
            return;
            }
        }
    }
    function clearCacheMB() {
        if (window.XMLHttpRequest)
        {// code for IE7+, Firefox, Chrome, Opera, Safari
        cxhrd=new XMLHttpRequest();
        }
        else
        {// code for IE6, IE5
        cxhrd=new ActiveXObject('MSXML2.XMLHTTP.3.0');
        } 
        cxhrd.open("GET","/tools?FUNC=CLR_AC", true); 
        cxhrd.send();
        
        cxhrd.onreadystatechange=function()
        {
        if (cxhrd.readyState==4 && cxhrd.status==200)
            {
            var currVal = cxhrd.responseText;
            console.log(currVal);
			//alert("Local storage cleared.");
			location.href="/tools?FUNC=WIDGET&t=MiniBrowserGet";
            return;
            }
        }
    }
	var aiInit = "A";
	var aiSession = 0;
	function openChatWithUserID(origURL) {
		aiSession = aiSession + 1;
		var aUser = document.getElementById("aUser").value;
		var compAiSession = "-session-" + aiInit + aiSession;
		var uid = aUser + compAiSession;
		var n = origURL.indexOf("?");
		var str = origURL;
		if (n > 0) { str = str+"&UID="+uid+"&uid="+uid; } else {str = str+"?UID="+uid+"&uid="+uid;}
		//window.open(str, compAiSession);
		url = str;
		alertify.set({ delay: 21600000 });
		alertify.log("<iframe src=\"" + url + "\" frameborder=\"0\" scrolling=\"yes\" allowtransparency=\"true\" height=\"400px\"></iframe>");		
	}
	function removeIconsBar() {
		console.log("removeIconsBar()");
		document.getElementsByClassName("icon-bar")[0].style.display = "none";
	}
	function showIconsBar() {
		console.log("showIconsBar()");
		document.getElementsByClassName("icon-bar")[0].style.display = "block";
	}
	if (localStorage["search-box-show-hide"] == "hidden") {
		document.getElementById("w").style.display = "none";
	} else {
		document.getElementById("w").style.display = "block";
	}
	function toggleSearchBox() {
		console.log("toggleSearchBox()");
		var curDisp = document.getElementById("w").style.display;
		if (curDisp == "none") {
			document.getElementById("w").style.display = "block";
			localStorage["search-box-show-hide"] = "visible";
		} else {
			document.getElementById("w").style.display = "none";
			localStorage["search-box-show-hide"] = "hidden";
		}
	}
  </script>
  <script src="/static/js/alertify.min.js"></script>
  <script>
	//hide address bar url params
	  var uri = window.location.toString();
	  if (uri.indexOf("?") > 0) {
	      var clean_uri = uri.substring(0, uri.indexOf("?"));
	      if (uri.indexOf("#page") > 0) {
	          clean_uri = clean_uri + "#page";
	      }     
	      window.history.replaceState({}, document.title, clean_uri);
	      window.history.pushState("ULAPPH",  document.title, clean_uri);
	  }
  </script>
</body>
</html>
`
 
var htmlWidgetBrowserLoading2 = template.Must(template.New("htmlWidgetBrowserLoading2").Parse(htmlWidgetBrowserLoading2a))
	
const htmlWidgetBrowserLoading2a = `	
 
<body>
	<div id='loaduwm'>
		<a href="/uwm" title="Loading..."><img src="/static/img/loading.gif" width="80" height="80"></a>
	</div>
	<script>
	setInterval(function(){checkUWM()}, 10000);
	function checkUWM() {
		location.href = "/uwm";
		return;
	}
	</script>
</body>
</html>
`
 
var htmlWidgetBrowserS2 = template.Must(template.New("htmlWidgetBrowserS2").Parse(htmlWidgetBrowserH2))
	
const htmlWidgetBrowserH2 = `	
<body>
<div id="o-wrapper" class="o-wrapper">
 
  <header class="o-header">
    <nav class="o-header-nav">
      <a href="/?q=login&LFUNC=GOOGLE&TARGET_URL=/login?continue=/uwm" class="o-header-nav__link" title="Access online desktop as valid user. Install CORS and X-Frames plugins for best experience.">Full Desktop</a>
	  {{if eq .BOOL_FILLER2 false }}
		<a href="/?q=login&LFUNC=GOOGLE" class="o-header-nav__link" title="Register now to access full desktop and create contents.">Register</a>
	  {{end}}
	  {{if eq .BOOL_FILLER1 true }}
		<a href="/?q=login&LFUNC=guest&TARGET_URL=/login" class="o-header-nav__link" title="Access online desktop as guest. Install CORS and X-Frames plugins for best experience.">Guest Desktop</a>
	  {{end}}
	  <a href="/website?q=home" class="o-header-nav__link" title="View the cloud website and access the slides, articles and media. If you are new here, just click this link.">Contents</a>
	  <!--a href="/m" class="o-header-nav__link" title="Access mobile site by using the quick search or list menu index.">Mobile</a-->
	  <!--a href="/api-doc/" class="o-header-nav__link" title="An API for the ULAPPH Cloud Desktop which can be used to manage slides, articles, media and things.">API</a-->
	  <!--a href="{{.STR_FILLER6}}" class="o-header-nav__link" target="contact_us" title="Talk to us via chat if you have any questions. If available, a live support will respond.">Contact Us</a-->
	  <!--a href="/directory?DIR_FUNC=sites" class="o-header-nav__link" title="List all sites available in the sites server">Directory</a-->	
	  <!--a href="/chat?pubchan=worldwide" class="o-header-nav__link" title="Chat with worldwide users and get system events">Chat</a-->
	  <!--a href="https://ulapph-installer.appspot.com" class="o-header-nav__link" title="Install desktops and applications">Installers</a-->	
	  <a href="/tools?FUNC=random" class="o-header-nav__link" title="If you have nothing to do or don't know what site to visit, just hit this link.">Random</a>
    </nav>
    <div class="o-container">
		  <div id="w">
			<div id="content">
			{{if eq .STR_FILLER1 "ULAPPH Cloud Desktop" }}
			{{else}}
				<h1><a href="/website?q=home" title="Click this link to open the cloud website & access the slides, articles and media.">{{.STR_FILLER1}}</a></h1>
			{{end}}
			  <div id="searchfield">
				<form action="/tools?FUNC=WIDGET&t=MiniBrowserPost" method="POST" enctype="multipart/form-data"><input type="text" name="url" class="biginput" id="autocomplete" autofocus="autofocus"></form>
			  </div><!-- @end #searchfield -->
			
			  <div id="outputbox">
				<p id="outputcontent" align="center"><img src="{{.STR_FILLER9}}" width=100 height=100><br><strong>{{.HTM_FILLER5}}</strong></p>
			  </div>
			</div><!-- @end #content -->
		  </div><!-- @end #w -->
    </div>
  </header><!-- /o-header -->
 
  <main class="o-content">
    <div class="o-container">
 
      <div class="c-buttons">
        <button id="c-button--push-left" class="c-button" title="Push this button to view left hidden contents.">{{.STR_FILLER2}}</button>
        <button id="c-button--push-right" class="c-button" title="Push this button to view right hidden contents.">{{.STR_FILLER3}}</button>
        <button id="c-button--push-top" class="c-button" title="Push this button to view top hidden contents.">{{.STR_FILLER4}}</button>
        <button id="c-button--push-bottom" class="c-button" title="Push this button to view bottom hidden contents.">{{.STR_FILLER5}}</button>
		<button onclick="location.href='/infodb?DB_FUNC=VIEWER-SLIDES-ALL';" class="c-button" title="View index of all contents">{{.STR_FILLER10}}</button>
		<!--button onclick="location.href='/directory?DIR_FUNC=sessions2';" class="c-button" title="Who are online now?">{{.STR_FILLER10}}({{.STR_FILLER12}})</button-->
		<span id="boxcmd" onclick="document.getElementById('w').style.display = 'block'; document.getElementById('boxcmd').style.display = 'none';  dispSessions(); dispChatHelp(); setTimeout(function(){ document.getElementById('w').style.display = 'none'; document.getElementById('boxcmd').style.display = 'block';}, 20000)" title="{{.STR_FILLER1}}"><img src="{{.STR_FILLER9}}" width=50 height=50></span>
      </div>
 
      <div id="github-icons"></div>
 
    </div><!-- /o-container -->
  </main><!-- /o-content -->
 
  <footer class="o-footer">
  </footer><!-- /o-footer -->
 
</div><!-- /o-wrapper -->
 
<nav id="c-menu--push-left" class="c-menu c-menu--push-left">
  <button class="c-menu__close">&larr; Close Menu</button>
  <ul class="c-menu__items">
  {{.HTM_FILLER1}}
  </ul>
</nav><!-- /c-menu push-left -->
 
<nav id="c-menu--push-right" class="c-menu c-menu--push-right">
  <button class="c-menu__close">Close Menu &rarr;</button>
  <ul class="c-menu__items">
  {{.HTM_FILLER2}}
  </ul>
</nav><!-- /c-menu push-right -->
 
<nav id="c-menu--push-top" class="c-menu c-menu--push-top">
  <button class="c-menu__close"><strong>x</strong></button>
  <ul class="c-menu__items">
  {{.HTM_FILLER3}}
  </ul>
</nav><!-- /c-menu push-top -->
 
 
<nav id="c-menu--push-bottom" class="c-menu c-menu--push-bottom">
  <button class="c-menu__close"><strong>x</strong></button>
  <ul class="c-menu__items">
  {{.HTM_FILLER4}}
  </ul>
</nav><!-- /c-menu push-bottom -->
 
<div id="c-mask" class="c-mask"></div><!-- /c-mask -->
<input type="hidden" id="chatHelp" value="{{.STR_FILLER11}}">
<script src="/static/js/menu.js"></script>
<script src="/static/js/menu-slides.js"></script>
<script src="/static/js/ranwall2.js"></script>
<script src="/static/js/mobitouch3.js"></script>
<script src="/static/js/alertify.min.js"></script>
<script src="/static/js/channel-public.js"></script>
<script type="text/javascript">
	document.getElementById("boxcmd").style.display = "none";
	setTimeout(function(){ document.getElementById("w").style.display = "none"; document.getElementById("boxcmd").style.display = "block";}, 20000);
</script>
<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.STR_FILLER7}}"></script-->
</body>
</html>
`
 
var htmlWidgetBrowserURLFetch = template.Must(template.New("htmlWidgetBrowserURLFetch").Parse(htmlWidgetBrowserAUF))
 
const htmlWidgetBrowserAUF = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>MiniBrowser::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>
	
</head>
 
<body>
<form action="/search?f=fetch-url" method="POST" enctype="multipart/form-data">
<input type="search" name="URL" value="" placeholder="https://github.com" />
</form>
`
 
var htmlWidgetRanGen = template.Must(template.New("htmlWidgetRanGen").Parse(htmlWidgetRanGenTool))
 
const htmlWidgetRanGenTool = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Random Generator::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
</head>
 
<body>
This will generate random string with alphanumeric characters. Can be used to generate passwords or secret keys.
<form action="/tools?FUNC=WIDGET&t=RandomGeneratorRes" method="POST">
<select name="mode" value="alphanumeric">
  <option value="alphanumeric">Alphanumeric</option>
  <option value="uuid">UUID</option>
</select>
<br>
<input name="len" value="" placeholder="Enter length" size="10" maxlength="500"/>
<input type="submit" name="rangen" value="Generate"/>
</form>
`

var htmlWidgetFamTree = template.Must(template.New("htmlWidgetRanGen").Parse(htmlWidgetFamTreeTool))
 
const htmlWidgetFamTreeTool = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Family Tree::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
</head>
 
<body>
This will generate the family tree based on json data. Indicate below the TDSMEDIA where JSON is saved.
<form action="/tools?FUNC=WIDGET&t=FAM_TREE" method="POST">
<input name="MEDIA_ID" value="" placeholder="Enter TDSMEDIA ID" size="10" maxlength="10"/>
<input type="submit" name="famtree" value="Generate"/>
</form>
`
 
var htmlURLFetcher = template.Must(template.New("htmlURLFetcher").Parse(htmlUrlFetcherA))
 
const htmlUrlFetcherA = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>URL Fetcher::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>
	
</head>
 
<body>
<h3>My URL Fetcher</h3>
	<form action="/tools?t=URL_FETCH" method="POST" enctype="multipart/form-data">
	<input type="submit" name="FUNC" value="Edit URL List">
	<input type="submit" name="FUNC" value="Run Fetcher Now">
	</form>
`

var htmlUwmSharing = template.Must(template.New("htmlURLFetcher").Parse(htmlUwmSharingA))
 
const htmlUwmSharingA = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>UWM Sharing::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link href="/static/css/bootstrap.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="/static/css/switch.css">
</head>
 
<body>
<h3>UWM{{.STR_FILLER1}} Sharing Settings</h3>
You can share a UWM desktop by enabling sharing and informing users of the password.<br> 
{{if eq .STR_FILLER2 "Y" }}
<label class="switch">
  <input type="checkbox" checked id="uwmshare">
  <div class="slider round"></div>
</label>
{{else}}
<label class="switch">
  <input type="checkbox" id="uwmshare">
  <div class="slider round"></div>
</label>
{{end}}
<br>
<input type="text" id="KEY" name="KEY" value="{{.STR_FILLER3}}" placeholder="" maxlength="50"/>
<input type="submit" onclick="switch2();" value="Submit">
<hr>
<!--b>Link which does not ask password:</b>
<br>
<a href="/uwm?u={{.STR_FILLER1}}&passcode={{.STR_FILLER3}}&uid={{.STR_FILLER4}}">/uwm?u={{.STR_FILLER1}}&passcode={{.STR_FILLER3}}&uid={{.STR_FILLER4}}</a>
<br>
<b>Link which asks password:</b-->
<b>Share this link:</b>
<br>
<a href="/uwm?u={{.STR_FILLER1}}&passcode=&uid={{.STR_FILLER4}}">/uwm?u={{.STR_FILLER1}}&passcode=&uid={{.STR_FILLER4}}</a>
<script>
	function switch2() {
	  var key = document.getElementById("KEY").value;
	  if (document.getElementById("uwmshare").checked) 
	  {
	    var thisUrl = "/people-edit?EditPeopleFunc=SET_UWM_SHARE&u=" + {{.STR_FILLER1}} + "&VAL=" + "Y" + "&KEY=" + key;
		window.location.href = thisUrl;
		console.log(thisUrl);
	  } else {
	    var thisUrl = "/people-edit?EditPeopleFunc=SET_UWM_SHARE&u=" + {{.STR_FILLER1}} + "&VAL=" + "N" + "&KEY=" + key;
		window.location.href = thisUrl;
		console.log(thisUrl);
	  }
	};
</script>
`
 
//D0033
var htmlDrives = template.Must(template.New("htmlURLFetcher").Parse(htmlDrivesA))
 
const htmlDrivesA = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>My Drives::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
<link rel="stylesheet" href="/static/lib/css/animate/animate.css">	
<link rel="stylesheet" href="/static/lib/css/text-input/text-input.css">	
<style>
	.img-circle {
	border-radius: 50%;
	}
</style>
</head>
 
<body>
<h1>My Drives</h1>
	<a href="#drive"><img src="/static/img/icon-drive.png" width=80 height=80 class="img-circle animated infinite pulse" title="Google Drive"></a>
	<a href="#onedrive"><img src="/static/img/onedrive.png" width=80 height=80 class="img-circle animated infinite pulse" title="Microsoft OneDrive"></a>
	<a href="#aws"><img src="/static/img/amazon-drive.png" width=80 height=80 class="img-circle animated infinite pulse" title="Amazon Drive"></a>
	<a href="#dropbox"><img src="/static/img/dropbox.png" width=80 height=80 class="img-circle animated infinite pulse" title="Dropbox"></a>
	<a href="#hubic"><img src="/static/img/hubic.png" width=100 height=80 class="img-circle animated infinite pulse" title="Hubic"></a>
	<a href="#yandex"><img src="/static/img/yandex.png" width=80 height=80 class="img-circle animated infinite pulse" title="Yandex"></a>
	<a href="#pcloud"><img src="/static/img/pcloud.png" width=80 height=80 class="img-circle animated infinite pulse" title="pCloud"></a>
	<a href="#sync"><img src="/static/img/sync.png" width=80 height=80 class="img-circle animated infinite pulse" title="Sync"></a>
	<a href="#box"><img src="/static/img/box.png" width=100 height=80 class="img-circle animated infinite pulse" title="Box"></a>
	<a href="#github"><img src="/static/img/github.png" width=100 height=80 class="img-circle animated infinite pulse" title="Github"></a>
    <hr>
	<hr>
	<img id="drive" src="/static/img/icon-drive.png" width=80 height=80 title="Google Drive">
	<h3>Google Drive</h3>
	<span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_GOOGLE&ACT=A" target="auth-drive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Google Drive@888@/tools?FUNC=DRIVES&t=MYDRIVE_GOOGLE&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Google Drive@888@https://drive.google.com', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Open</a></span>
	<br>
	<span class="button-wrap"><a href="https://drive.google.com" target="gd" class="button button-pill">Login</a></span>
 
	<hr>
	<img id="onedrive" src="/static/img/onedrive.png" width=80 height=80 title="Microsoft OneDrive">
	<h3>Microsoft OneDrive</h3>
	<!--span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=A" target="auth-onedrive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@MS OneDrive@888@/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br-->
	<span class="button-wrap"><a href="https://onedrive.live.com/" target="ms" class="button button-pill">Open</a></span>
	<!--br>
	<span class="button-wrap"><a href="https://onedrive.live.com/" target="ms" class="button button-pill">Login</a></span-->
	
	<hr>
	<img id="aws" src="/static/img/amazon-drive.png" width=80 height=80 title="Amazon Drive">
	<h3>Amazon Drive</h3>
	<!--span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=A" target="auth-onedrive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Amazon@888@/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br-->
	<span class="button-wrap"><a href="https://www.amazon.com/clouddrive" target="aws" class="button button-pill">Open</a></span>
	<!--br>
	<span class="button-wrap"><a href="https://www.amazon.com/clouddrive" target="aws" class="button button-pill">Login</a></span-->
	
	<hr>
	<img id="dropbox" src="/static/img/dropbox.png" width=80 height=80 title="Dropbox">
	<h3>Dropbox</h3>
	<!--span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=A" target="auth-onedrive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Dropbox@888@/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br-->
	<span class="button-wrap"><a href="https://www.dropbox.com/home" target="db" class="button button-pill">Open</a></span>
	<!--br>
	<span class="button-wrap"><a href="https://www.dropbox.com/home" target="db" class="button button-pill">Login</a></span-->
	
	<hr>
	<img id="hubic" src="/static/img/hubic.png" width=100 height=80 title="Hubic">
	<h3>Hubic</h3>
	<!--span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=A" target="auth-onedrive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Hubic@888@/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br-->
	<span class="button-wrap"><a href="https://hubic.com/home/browser/" class="button button-pill button-raised button-primary">Open</a></span>
	<!--br>
	<span class="button-wrap"><a href="https://hubic.com/home/browser/" class="button button-pill button-raised button-primary">Login</a></span-->
	
	<hr>
	<img id="yandex" src="/static/img/yandex.png" width=80 height=80 title="Yandex">
	<h3>Yandex</h3>
	<!--span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=A" target="auth-onedrive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Yandex@888@/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br-->
	<span class="button-wrap"><a href="https://disk.yandex.com/client/disk" class="button button-pill button-raised button-primary">Open</a></span>
	<!--br>
	<span class="button-wrap"><a href="https://disk.yandex.com/client/disk" class="button button-pill button-raised button-primary">Login</a></span-->
	
	<hr>
	<img id="pcloud" src="/static/img/pcloud.png" width=80 height=80 title="pCloud">
	<h3>pCloud</h3>
	<!--span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=A" target="auth-onedrive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@pCloud@888@/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br-->
	<span class="button-wrap"><a href="https://my.pcloud.com/" class="button button-pill button-raised button-primary">Open</a></span>
	<!--br>
	<span class="button-wrap"><a href="https://my.pcloud.com/" class="button button-pill button-raised button-primary">Login</a></span-->
	
	<hr>
	<img id="sync" src="/static/img/sync.png" width=80 height=80 title="Sync">
	<h3>Sync</h3>
	<!--span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=A" target="auth-onedrive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Sync@888@/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br-->
	<span class="button-wrap"><a href="https://cp.sync.com/files/" class="button button-pill button-raised button-primary">Open</a></span>
	<!--br>
	<span class="button-wrap"><a href="https://cp.sync.com/files/" class="button button-pill button-raised button-primary">Login</a></span-->
	
	<hr>
	<img id="box" src="/static/img/box.png" width=100 height=80 title="Box">
	<h3>Box</h3>
	<!--span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=A" target="auth-onedrive" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Box@888@/tools?FUNC=DRIVES&t=MYDRIVE_MICROSOFT&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br-->
	<span class="button-wrap"><a href="https://app.box.com/folder/0" class="button button-pill button-raised button-primary">Open</a></span>
	<!--br>
	<span class="button-wrap"><a href="https://app.box.com/folder/0" class="button button-pill button-raised button-primary">Login</a></span-->
	
	<hr>
	<img id="github" src="/static/img/github.png" width=100 height=80 title="Github">
	<h3>Github</h3>
	Github username:
	<form action="/people-edit?EditPeopleFunc=SetGithubUser" method="POST" enctype="multipart/form-data">
	 <section>
		<ul class="input-list style-2 clearfix">
		  <li>
			<input type="text" name="guser" value="{{.STR_FILLER1}}" placeholder="Github username" maxlength=200>
		  </li>
		</ul>
	  </section>
	</form>
	<span class="button-wrap"><a href="/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=A" target="auth-github" class="button button-pill">Auth</a></span>
	<br>
	<span class="button-wrap"><a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@Github@888@/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=S', 'https://www.ulapph.com'); return false;" class="button button-pill button-raised button-primary">Sync</a></span>
	<br>
	<span class="button-wrap"><a href="https://github.com/explore" target="github-explore" class="button button-pill">Open</a></span>
	<br>
	<span class="button-wrap"><a href="https://github.com/explore" target="github-login" class="button button-pill">Login</a></span>
 
`

//D0033
var htmlDriveJSONtoTable = template.Must(template.New("htmlDriveJSONtoTable").Parse(htmlDriveJSONtoTableA))
 
const htmlDriveJSONtoTableA = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>JSON to Table::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" href="/static/lib/css/json2table/classic.css">
<script src="/static/js/jquery.min.js"></script>
<script src="/static/lib/js/json2table/jquery.columns.min.js"></script>
	
</head>
 
<body>
<div id="columns"></div>
<script>
  $(document).ready(function() {
    var json = {{.}};
    $('#columns').columns({
      data:json,
	  schema: [
		  {"header":"Icon", "key":"iconLink", "template":'<img src="{{"{{"}}iconLink{{"}}"}}"/>'},
		  {"header":"Name", "key":"name"},
		  {"header":"Link", "key":"webViewLink", "template":'<a href=\'#\' onClick=\"window.postMessage(\'ULAPPH-SYS-UPD@888@{{"{{"}}name{{"}}"}}@888@{{"{{"}}webViewLink{{"}}"}}\', \'https://www.ulapph.com\'); return false;\">{{"{{"}}webViewLink{{"}}"}}</a>'}
	  ]
    });
  });
</script>
`

//D0033
//D0066
var htmlDesktopsJSONtoTable = template.Must(template.New("htmlDesktopsJSONtoTable").Parse(htmlDesktopsJSONtoTableA))
 
const htmlDesktopsJSONtoTableA = `

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>All Desktops::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" href="/static/lib/css/json2table/classic.css">
<script src="/static/js/jquery.min.js"></script>
<script src="/static/lib/js/json2table/jquery.columns.min.js"></script>
<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">	
</head>
 
<body>
<div id="desktops"></div>
<div id="columns"></div>
<br>
[<a href="/admin-setup?ADMIN_FUNC=EDIT_CATEGORY_LIST">Edit</a>] [<a href="#" onClick="/tools?FUNC=ALL_NOTES">Notes</a>] [<a href="/directory?DIR_FUNC=sites">Servers</a>] [<a href="#" onclick="blankDesktop();return false;">Blank Desktop</a>] [<a href="#" onclick="clearDesktops();return false;">Clear Desktops</a>]
<script>
  $(document).ready(function() {
    var json = {{.}};
    $('#columns').columns({
      data:json,
	  schema: [
		  {"header":"Icon", "key":"iconLink", "template":'<img src="{{"{{"}}iconLink{{"}}"}}" width=32 height=32/>'},
		  {"header":"ID", "key":"id"},
		  {"header":"Group", "key":"cGrp"},
		  {"header":"Name", "key":"name", "template":'<a href=\'#\' onClick=\"openDesktop(\'{{"{{"}}uLink{{"}}"}}\', \'UWM-{{"{{"}}name{{"}}"}}\', \'{{"{{"}}id{{"}}"}}\'); return false;\" target=\'UWM-{{"{{"}}name{{"}}"}}\' title=\'Open UWM in new tab\'>{{"{{"}}name{{"}}"}}</a>'},
		  {"header":"Search", "key":"rLink", "template":'<a href=\'{{"{{"}}rLink{{"}}"}}\' target=\'T-{{"{{"}}name{{"}}"}}\' title=\'Click to run topics search\'><img src=\'/static/img/run.png\' width=32 height=32></a>'},
		  {"header":"ChatBot", "key":"bLink", "template":'<a href=\'{{"{{"}}bLink{{"}}"}}\' target=\'B-{{"{{"}}name{{"}}"}}\' title=\'Click to bot for this desktop\'><img src=\'/static/img/robot.png\' width=32 height=32></a>'},
		  {"header":"Desktop", "key":"dLink", "template":'<a href=\'{{"{{"}}dLink{{"}}"}}\' target=\'D-{{"{{"}}name{{"}}"}}\'><img src=\'/static/img/ext-con.png\' width=32 height=32></a> <a href=\'#\' onClick=\"window.postMessage(\'ULAPPH-SYS-UPD@888@{{"{{"}}name{{"}}"}}@888@{{"{{"}}dLink{{"}}"}}\', \'https://www.ulapph.com\'); return false;\"><img src=\'/static/img/uwm-mini.png\' width=32 height=32></a>'},
		  {"header":"UWM", "key":"uLink", "template":'<a href=\'{{"{{"}}uLink{{"}}"}}\' target=\'UWM-{{"{{"}}name{{"}}"}}\'><img src=\'/static/img/ext-con.png\' width=32 height=32></a> <a href=\'#\' onClick=\"window.postMessage(\'ULAPPH-SYS-UPD@888@{{"{{"}}name{{"}}"}}@888@{{"{{"}}uLink{{"}}"}}\', \'https://www.ulapph.com\'); return false;\"><img src=\'/static/img/uwm-mini.png\' width=32 height=32></a>'},
		  {"header":"Desktop", "key":"dsLink", "template":'<a href=\'{{"{{"}}dsLink{{"}}"}}\' target=\'dsLink-{{"{{"}}name{{"}}"}}\'><img src=\'/static/img/settings.png\' width=32 height=32></a>'},
		  {"header":"UWM", "key":"usLink", "template":'<a href=\'{{"{{"}}usLink{{"}}"}}\' target=\'usLink-{{"{{"}}name{{"}}"}}\'><img src=\'/static/img/settings.png\' width=32 height=32></a>'},
		  {"header":"Topics", "key":"tLink", "template":'<a href=\'{{"{{"}}tLink{{"}}"}}\' target=\'tLink-{{"{{"}}name{{"}}"}}\'><img src=\'/static/img/settings.png\' width=32 height=32></a>'},
		  {"header":"ChatBot", "key":"cLink", "template":'<a href=\'{{"{{"}}cLink{{"}}"}}\' target=\'cLink-{{"{{"}}name{{"}}"}}\'><img src=\'/static/img/settings.png\' width=32 height=32></a>'},
		  {"header":"Share", "key":"sLink", "template":'<a href=\'{{"{{"}}sLink{{"}}"}}\' target=\'sLink-{{"{{"}}name{{"}}"}}\'><img src=\'/static/img/settings.png\' width=32 height=32></a>'},
		  {"header":"Slides", "key":"sqLink", "template":'<a href=\'{{"{{"}}sqLink{{"}}"}}\' target=\'T-{{"{{"}}name{{"}}"}}\' title=\'Click to view counts\'><img src=\'/static/img/info.png\' width=32 height=32></a>'},
		  {"header":"Articles", "key":"aqLink", "template":'<a href=\'{{"{{"}}aqLink{{"}}"}}\' target=\'T-{{"{{"}}name{{"}}"}}\' title=\'Click to view counts\'><img src=\'/static/img/info.png\' width=32 height=32></a>'},
		  {"header":"Media", "key":"mqLink", "template":'<a href=\'{{"{{"}}mqLink{{"}}"}}\' target=\'T-{{"{{"}}name{{"}}"}}\' title=\'Click to view counts\'><img src=\'/static/img/info.png\' width=32 height=32></a>'}
	  ]
    });
  });
		  //{"header":"TSet", "key":"tSource", "template":'<img src=\'{{"{{"}}tSource{{"}}"}}\' width=32 height=32>'},
		  //{"header":"IsShared", "key":"isShared", "template":'<img src=\'{{"{{"}}isShared{{"}}"}}\' width=32 height=32>'},

  //populate existing desktops
	document.getElementById("desktops").innerHTML = "";
	var utot = 0;
	if (localStorage['uwm-ctr'] != undefined && localStorage['uwm-ctr'] != "") {
		utot = parseInt(localStorage['uwm-ctr']);
	}
	for (i = 1; i <= utot; i++) { 
		chtm = document.getElementById("desktops").innerHTML;
		document.getElementById("desktops").innerHTML = chtm + localStorage['uwm-'+i];
	}
	if (utot > 0) {
		  thisDesk = '<span class=\"button-wrap\"><a href=\"#\" onclick=\"clearDesktops(); return false;\" class=\"button button-pill button-raised button-primary\">Clear</a></span>';
		  chtm = document.getElementById("desktops").innerHTML;
		  document.getElementById("desktops").innerHTML = chtm + thisDesk;
	}

  function openDesktop(uLink, name, id) {
	  
	  console.log("uLink: "+uLink);
	  console.log("name: "+name);
	  console.log("id: "+id);
	  
	  //display button
	  thisDesk = '<span class=\"button-wrap\"><a href=\"' + uLink +'\" class=\"button button-pill button-raised button-primary\" target=\"' + name + '\">' + id + '::' + name + '</a></span>';
	  chtm = document.getElementById("desktops").innerHTML;
	  document.getElementById("desktops").innerHTML = chtm + thisDesk;
	  
	  //save to ls
	  if (localStorage['uwm-ctr'] == undefined || localStorage['uwm-ctr'] == "") {
		  localStorage['uwm-ctr'] = 0;
	  }
	  uctr = parseInt(localStorage['uwm-ctr']) + 1;
	  localStorage['uwm-'+uctr] = thisDesk;
	  localStorage['uwm-ctr'] = uctr;
	  
	  //open new tab
	  window.open(uLink,name);
  }

  function blankDesktop() {
	var tdesk = prompt("Please enter desktop name", "TempDesktop");
	if (tdesk != null) {
		window.open("/uwm?u=" + tdesk, "_blank");
	} else {
		alert("Please enter desktop name");
	}
  }

  function clearDesktops() {
	var utot = 0;
	if (localStorage['uwm-ctr'] != undefined && localStorage['uwm-ctr'] != "") {
		utot = parseInt(localStorage['uwm-ctr']);
	}
	for (i = 1; i <= utot; i++) { 
		localStorage['uwm-'+i] = "";
		localStorage['uwm-ctr'] = "";
	}
        location.reload();
  }
</script>
`

//Display all the icons
var htmlIconsJSONtoTable = template.Must(template.New("htmlIconsJSONtoTable").Parse(htmlIconsJSONtoTableA))
 
const htmlIconsJSONtoTableA = `

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>All Icons::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" href="/static/lib/css/json2table/classic.css">
<script src="/static/js/jquery.min.js"></script>
<script src="/static/lib/js/json2table/jquery.columns.min.js"></script>
<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">	
</head>
 
<body>
<div id="columns"></div>
<br>
[<a href="/admin-icons">Admin Icons</a>]
<script>
  $(document).ready(function() {
    var json = {{.}};
    $('#columns').columns({
      data:json,
	  schema: [
		  {"header":"Icon", "key":"iconLink", "template":'<img src="{{"{{"}}iconLink{{"}}"}}" width=32 height=32/>'},
		  {"header":"ID", "key":"id"},
		  {"header":"Name", "key":"name", "template":'{{"{{"}}name{{"}}"}}'},
		  {"header":"Logo", "key":"iLogo", "template":'<img src="{{"{{"}}iLogo{{"}}"}}" width=32 height=32/>'},
		  {"header":"Link", "key":"iUrl", "template":'<a href=\'{{"{{"}}iUrl{{"}}"}}\' target=\'S-{{"{{"}}iUrl{{"}}"}}\' title=\'open tab - {{"{{"}}iUrl{{"}}"}}\'>{{"{{"}}iUrl{{"}}"}}</a>'},
		  {"header":"Title", "key":"iName", "template":'{{"{{"}}iName{{"}}"}}'},
		  {"header":"Launch", "key":"iUrl", "template":'<a href=\'{{"{{"}}iUrl{{"}}"}}\' target=\'S-{{"{{"}}name{{"}}"}}\' title=\'open tab - {{"{{"}}name{{"}}"}}\'><img src=\'/static/img/ext-con.png\' width=32 height=32></a> <a href=\'#\' onClick=\"window.postMessage(\'ULAPPH-SYS-UPD@888@{{"{{"}}name{{"}}"}}@888@{{"{{"}}iUrl{{"}}"}}\', \'https://www.ulapph.com\'); return false;\" title=\'open window - {{"{{"}}name{{"}}"}}\'><img src=\'/static/img/uwm-mini.png\' width=32 height=32></a>'}
	  ]
    });
  });

</script>
`

var htmlNotesJSONtoTable = template.Must(template.New("htmlNotesJSONtoTable").Parse(htmlNotesJSONtoTableA))
 
const htmlNotesJSONtoTableA = `

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>All Notes::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" href="/static/lib/css/json2table/classic.css">
<script src="/static/js/jquery.min.js"></script>
<script src="/static/lib/js/json2table/jquery.columns.min.js"></script>
<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">	
</head>
 
<body>
<div id="desktops"></div>
<div id="columns"></div>
<script>
  $(document).ready(function() {
    var json = {{.}};
    $('#columns').columns({
      data:json,
	  schema: [
		  {"header":"ID", "key":"id"},
		  {"header":"Desktop", "key":"desktop"},
		  {"header":"Note", "key":"note"},
		  {"header":"Timestamp", "key":"timestamp"},
		  {"header":"Left", "key":"left"},
		  {"header":"Top", "key":"top"},
		  {"header":"Zindex", "key":"zindex"}
	  ]
    });
  });
</script>
`


//D0033
var htmlGithubJSONtoTable = template.Must(template.New("htmlDriveJSONtoTable").Parse(htmlGithubJSONtoTableA))
 
const htmlGithubJSONtoTableA = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>JSON to Table::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" href="/static/lib/css/json2table/classic.css">
<script src="/static/js/jquery.min.js"></script>
<script src="/static/lib/js/json2table/jquery.columns.min.js"></script>
</head>
 
<body>
<div id="columns"></div>
<script>
  $(document).ready(function() {
    var json = {{.}};
    $('#columns').columns({
      data:json,
	  schema: [
	      {"header":"Icon", "key":"icon", "template":'<img src="{{"{{"}}icon{{"}}"}}" width=50 height=50/>'},
		  {"header":"Name", "key":"name", "template":'<a href=\'#\' onClick=\"window.postMessage(\'ULAPPH-SYS-UPD@888@{{"{{"}}name{{"}}"}}@888@https://www.ulapph.com/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=B&repo={{"{{"}}name{{"}}"}}\', \'https://www.ulapph.com\'); return false;\"><b>{{"{{"}}name{{"}}"}}</b></a>'},
		  {"header":"Full Name", "key":"full_name"},
		  {"header":"Description", "key":"description"},
		  {"header":"Language", "key":"language"},
		  {"header":"Watchers", "key":"watchers_count"},
		  {"header":"Stars", "key":"stargazers_count"},
		  {"header":"Forks", "key":"forks_count"},
		  {"header":"Issues", "key":"open_issues_count"},
		  {"header":"Size", "key":"size"},
		  {"header":"Link", "key":"html_url", "template":'<a href=\'#\' onClick=\"window.postMessage(\'ULAPPH-SYS-UPD@888@{{"{{"}}name{{"}}"}}@888@{{"{{"}}html_url{{"}}"}}\', \'https://www.ulapph.com\'); return false;\">{{"{{"}}html_url{{"}}"}}</a>'}
	  ]
    });
  });
</script>
<h3><a href="https://github.com/new" title="Create new repo via Github website" target="newrepo">New Repository</a></h3>
`
 
//D0033
var htmlGithubJSONtoTableB = template.Must(template.New("htmlDriveJSONtoTable").Parse(htmlGithubJSONtoTableAB))
 
const htmlGithubJSONtoTableAB = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>JSON to Table::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" href="/static/lib/css/json2table/classic.css">
<script src="/static/js/jquery.min.js"></script>
<script src="/static/lib/js/json2table/jquery.columns.min.js"></script>
</head>
 
<body>
<div id="columns"></div>
<script>
  $(document).ready(function() {
    var json = {{.}};
    $('#columns').columns({
      data:json,
	  schema: [
	      {"header":"Icon", "key":"icon", "template":'<img src="{{"{{"}}icon{{"}}"}}" width=50 height=50/>'},
		  {"header":"Path", "key":"path", "template":'<a href=\'#\' onClick=\"window.postMessage(\'ULAPPH-SYS-UPD@888@{{"{{"}}path{{"}}"}}@888@https://www.ulapph.com/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=C&bra={{"{{"}}branch{{"}}"}}&repo={{"{{"}}repo{{"}}"}}&path={{"{{"}}path{{"}}"}}&sha={{"{{"}}sha{{"}}"}}&sha2={{"{{"}}sha2{{"}}"}}\', \'https://www.ulapph.com\'); return false;\"><b>{{"{{"}}path{{"}}"}}</b></a>'},
		  {"header":"Size", "key":"size"},
		  {"header":"Repo", "key":"repo"},
		  {"header":"Branch", "key":"branch"},
		  {"header":"Mode", "key":"mode"},
		  {"header":"SHA Content", "key":"sha2"},
		  {"header":"SHA Branch", "key":"sha"}
	  ]
    });
  });
</script>
`
 
var htmlWidgetMyLocalNotes = template.Must(template.New("htmlWidgetMyLocalNotes").Parse(htmlWidgetMyLocalNotesA))
 
const htmlWidgetMyLocalNotesA = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Local Notes::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>	
<link href="/static/css/bootstrap.css" rel="stylesheet">
</head>
 
<body>
 
<input type="hidden" id="aUser" value="{{.STR_FILLER3}}">
<input type="hidden" id="host" value="{{.STR_FILLER4}}">
<input type="hidden" id="MEDIA_ID" value="{{.STR_FILLER2}}">
		
<h3>Status:</h3>
{{if eq .STR_FILLER1 "OK" }}
{{.STR_FILLER1}} [ Notes file is ok. ]
{{else}}
{{.STR_FILLER1}} [ <a href="/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0">Create Initial Notes File</a> ]
{{end}}
<hr>
<h3>Enter TDSMEDIA ID for the Notes Text File:</h3>
<form action="/people-edit?EditPeopleFunc=SetMyLocalNotesMediaID" method="POST" enctype="multipart/form-data">
<input type="text" name="MEDIA_ID" value="{{.STR_FILLER2}}" placeholder="MEDIA_ID" />
</form>
{{if eq .STR_FILLER1 "OK" }}
<hr>
<h3>To force sync to cloud now!</h3>
<button id="doBackupBtn" class="btn">Sync Notes to Cloud</button><font color=red><div id="snc"></div></font>
<hr>
<!--h3>If you synced your notes upon logout, you can load notes from cloud:</h3>
<button id="doLoadBtn" class="btn">Load Notes from Cloud</button>
<hr-->
<h3>To view the content of saved notes (JSON):</h3>
<h3><a href="/editor?EDIT_FUNC=READER&MEDIA_ID={{.STR_FILLER2}}&SID=TDSMEDIA-{{.STR_FILLER2}}"><button class="btn">View All Notes JSON</button></a> <a href="/tools?FUNC=ALL_NOTES&MEDIA_ID={{.STR_FILLER2}}&SID=TDSMEDIA-{{.STR_FILLER2}}"><button class="btn">View All Notes Table</button></a></h3>
<hr>
<h3>To <font color=red>delete all notes</font> in local browser:</h3>
<button id="doDeleteBtn" class="btn">Delete Notes Database</button>
{{end}}
<script src="/static/js/jquery.min.js"></script>
<script src="/static/js/cloud-notes-backup.js"></script>
	
`

var htmlWidgetDefaultSlide = template.Must(template.New("htmlWidgetDefaultSlide").Parse(htmlWidgetDefaultSlideA))
 
const htmlWidgetDefaultSlideA = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Default Slide::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>	
<link href="/static/css/bootstrap.css" rel="stylesheet">
</head>
 
<body>
 
<input type="hidden" id="aUser" value="{{.STR_FILLER3}}">
<input type="hidden" id="host" value="{{.STR_FILLER4}}">
<input type="hidden" id="MEDIA_ID" value="{{.STR_FILLER2}}">
You can indicate below the default slide where all images uploaded from camera or other apps will be automatically inserted.	 	
<h3>Status:</h3>
{{if eq .STR_FILLER1 "OK" }}
{{.STR_FILLER1}} [ Default slide file is ok. ]
{{else}}
{{.STR_FILLER1}} [ <a href="/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWSLIDE&CATEGORY=desktop0">Create Initial Slide File</a> ]
{{end}}
<hr>
<h3>Enter TDSSLIDE DOC_ID for the Default Slide File for Uploads:</h3>
<form action="/people-edit?EditPeopleFunc=SetMyDefaultSlideID" method="POST" enctype="multipart/form-data">
<input type="text" name="MEDIA_ID" value="{{.STR_FILLER2}}" placeholder="MEDIA_ID" />
</form>
<h3>View Default Uploads Slide</h3>
<a href="/slides?TYPE=SLIDE&DOC_ID={{.STR_FILLER2}}&SID=TDSSLIDE-{{.STR_FILLER2}}">/slides?TYPE=SLIDE&DOC_ID={{.STR_FILLER2}}&SID=TDSSLIDE-{{.STR_FILLER2}}</b></a>
`
 
var formTemplate = template.Must(template.New("example").Parse(formTemplateSrc))
 
const formTemplateSrc = `<!doctype html>
<html>
	<head>
		<script src='https://www.google.com/recaptcha/api.js'></script>
	</head>
	<body>
		<img src="https://lh3.googleusercontent.com/TIR_BkCTPdDVPphJZRHAYwq0hSMHYbDGQ-LH17cZrqXEVKTc0IjctijVoVyxTRiHEFwfOwPJf3prOVxZRI0KwPhIRn2Bjg">
		<br>
		<form action="/captcha?CC_FUNC=CHECK" method="post">
			<div class="g-recaptcha" data-sitekey="{{.STR_FILLER2}}" data-callback="correctCaptcha"></div>
			<input type=hidden name="R" value="{{.STR_FILLER1}}">
			<input type=hidden name="SID" value="{{.STR_FILLER3}}">
			<input type=hidden name="SO_FUNC" value="{{.STR_FILLER4}}">
			<input type=hidden name="TITLE" value="{{.STR_FILLER5}}">
			<input type=hidden name="content" value="{{.STR_FILLER6}}">
			<input type=hidden name="REC_TYP" value="{{.STR_FILLER7}}">
			<input type=hidden name="CC_KEY" value="{{.STR_FILLER2}}">
			<br>
			<input id="loginSubmit" type="submit">
		</form>
		<script type="text/javascript">
			//hide submit
			document.getElementById("loginSubmit").style.display='none';
			
			var correctCaptcha = function(response) {
				if(response.length > 0) {
					console.log("captcha verified");
					document.getElementById("loginSubmit").style.display='';
				} else {
					console.log("captcha failed!");
				}
			};
		</script>
	</body>
</html>
`
 
var formTemplate2 = template.Must(template.New("example").Parse(formTemplateSrc2))
 
const formTemplateSrc2 = `<!doctype html>
<html>
	<head>
		<script src='https://www.google.com/recaptcha/api.js'></script>
	</head>
	<body>
		<img src="https://lh3.googleusercontent.com/TIR_BkCTPdDVPphJZRHAYwq0hSMHYbDGQ-LH17cZrqXEVKTc0IjctijVoVyxTRiHEFwfOwPJf3prOVxZRI0KwPhIRn2Bjg">
		<br>
		<form action="/captcha?CC_FUNC=CHECK" method="post">
			<div class="g-recaptcha" data-sitekey="{{.STR_FILLER2}}" data-callback="correctCaptcha"></div>
			<input type=hidden name="R" value="{{.STR_FILLER1}}">
			<input type=hidden name="INVITE" value="{{.STR_FILLER3}}">
			<input type=hidden name="RID" value="{{.STR_FILLER4}}">
			<input type=hidden name="logLink" value="{{.STR_FILLER5}}">
			<input type=hidden name="intent" value="{{.STR_FILLER6}}">
			<input type=hidden name="CC_KEY" value="{{.STR_FILLER2}}">
			<br>
			<input id="loginSubmit" type="submit">
		</form>
		<script type="text/javascript">
			//hide submit
			document.getElementById("loginSubmit").style.display='none';
			
			var correctCaptcha = function(response) {
				if(response.length > 0) {
					console.log("captcha verified");
					document.getElementById("loginSubmit").style.display='';
				} else {
					console.log("captcha failed!");
				}
			};
		</script>
	</body>
</html>
`
 
var formTemplate3 = template.Must(template.New("example").Parse(formTemplateSrc3))
 
const formTemplateSrc3 = `<!doctype html>
<html>
	<head>
		<script src='https://www.google.com/recaptcha/api.js'></script>
	</head>
	<body>
		<img src="https://lh3.googleusercontent.com/TIR_BkCTPdDVPphJZRHAYwq0hSMHYbDGQ-LH17cZrqXEVKTc0IjctijVoVyxTRiHEFwfOwPJf3prOVxZRI0KwPhIRn2Bjg">
		<br>
		<form action="/captcha?CC_FUNC=CHECK" method="post">
			<div class="g-recaptcha" data-sitekey="{{.STR_FILLER2}}" data-callback="correctCaptcha"></div>
			<input type=hidden name="R" value="{{.STR_FILLER1}}">
			<input type=hidden name="CC_KEY" value="{{.STR_FILLER2}}">
			<input type=hidden name="pubchan" value="{{.STR_FILLER3}}">
			<br>
			<input id="loginSubmit" type="submit">
		</form>
		<script type="text/javascript">
			//hide submit
			document.getElementById("loginSubmit").style.display='none';
			
			var correctCaptcha = function(response) {
				if(response.length > 0) {
					console.log("captcha verified");
					document.getElementById("loginSubmit").style.display='';
				} else {
					console.log("captcha failed!");
				}
			};
		</script>
	</body>
</html>
`
 
var htmlWidgetMyPreferences = template.Must(template.New("htmlWidgetMyPreferences").Parse(htmlWidgetMyPreferencesA))
 
const htmlWidgetMyPreferencesA = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>My Preferences::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link href="/static/css/bootstrap.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="/static/css/spectrum.css">
<link rel="stylesheet" type="text/css" href="/static/css/switch.css">
<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
<script type="text/javascript" src="/static/js/jquery-1.11.0.js"></script>
<script type="text/javascript" src="/static/js/spectrum.js"></script>
<style type="text/css">
	.full-spectrum .sp-palette {
	max-width: 200px;
	}
</style>
</head>
 
<body>
 
<input type="hidden" id="aUser" value="{{.STR_FILLER2}}">
<input type="hidden" id="host" value="{{.STR_FILLER3}}">
<input type="hidden" id="SYS_SUPER_USER" value="{{.BOOL_FILLER1}}">
<h3>Desktop Themes</h3>
	<select id="THEME" onchange="saveAllTheme();return false;">
		{{.HTM_FILLER1}}
		<option selected>
		Select Theme
		</option>
	</select>
	<input type="text" id="color1" name="COLOR"/>
	<input type="text" id="color2" name="COLOR"/>
	<input type="text" id="color3" name="COLOR"/>
<hr>
<h3>Customize Start Menu Color</h3>
<form action="/people-edit?EditPeopleFunc=SetStartMenuTheme" method="POST" enctype="multipart/form-data">
<input type="text" id="full1" name="COLOR"/>
<input type="text" id="COLOR1" value="{{.STR_FILLER5}}" placeholder="#xxxxxx" maxlength=7/>
<a href="" onclick="saveMenuColor();return false;" title="Save color"><img src="/static/img/cloud-save.png" width="40" height="40"></img></a>
</form>
<hr>
<h3>Customize Windows Color (Active)</h3>
<form action="/people-edit?EditPeopleFunc=SetActiveWindowsTheme" method="POST" enctype="multipart/form-data">
<input type="text" id="full2" name="COLOR"/>
<input type="text" id="COLOR2" value="{{.STR_FILLER6}}" placeholder="#xxxxxx" maxlength=7/>
<a href="" onclick="saveActiveWinColor();return false;" title="Save color"><img src="/static/img/cloud-save.png" width="40" height="40"></img></a>
</form>
<hr>
<h3>Customize Windows Color (InActive)</h3>
<form action="/people-edit?EditPeopleFunc=SetInActiveWindowsTheme" method="POST" enctype="multipart/form-data">
<input type="text" id="full3" name="COLOR"/>
<input type="text" id="COLOR3" value="{{.STR_FILLER7}}" placeholder="#xxxxxx" maxlength=7/>
<a href="" onclick="saveInActiveWinColor();return false;" title="Save color"><img src="/static/img/cloud-save.png" width="40" height="40"></img></a>
</form>
<br>
You can check sample color combinations <a href="https://www.materialui.co/colors" target="colors">here</a>.
		
<hr>
 
<h3>Enable Sound for notifications</h3>
{{if eq .STR_FILLER4 "on" }}
<label class="switch">
  <input type="checkbox" checked onclick="switch0();" id="soundsw">
  <div class="slider round"></div>
</label><br>
The sound for notifications is <b>ENABLED</b>. <a href="/tools?FUNC=WIDGET&t=MyPreferences&MP_FUNC=JSWM_SOUND_OFF">Click to disable</a>. This setting will not allow sound for notifications.
{{else}}
<label class="switch">
  <input type="checkbox" onclick="switch0();" id="soundsw">
  <div class="slider round"></div>
</label><br>
The sound for notifications is <b>DISABLED</b>. <a href="/tools?FUNC=WIDGET&t=MyPreferences&MP_FUNC=JSWM_SOUND_ON">Click to enable</a>. All notifications will have a sound.
{{end}}
<br>

<hr>
<h3>Auto-load initial windows</h3>
{{if eq .STR_FILLER1 "Y" }}
<label class="switch">
  <input type="checkbox" checked onclick="switch2();" id="uwmsw">
  <div class="slider round"></div>
</label><br>
Auto open windows upon start-up is <b>ENABLED</b>. <a href="/tools?FUNC=WIDGET&t=MyPreferences&MP_FUNC=JSWM_AUTO_LOAD_OFF">Click to disable</a>. This setting will auto-open initial desktop windows based on your settings. You may <a href="/people-edit?EditPeopleFunc=EDIT_WINDOWS_MINE&UID=">edit</a> your personal UWM startup configurations. Your current source of UWM settings is TDSMEDIA-{{.NUM_FILLER1}}.
{{else}}
<label class="switch">
  <input type="checkbox" onclick="switch2();" id="uwmsw">
  <div class="slider round"></div>
</label><br>
Auto open windows is <b>DISABLED</b>. <a href="/tools?FUNC=WIDGET&t=MyPreferences&MP_FUNC=JSWM_AUTO_LOAD_ON">Click to enable</a>.
{{if ne .NUM_FILLER1 0 }}
Your current source of UWM settings is TDSMEDIA-{{.NUM_FILLER1}}. <a href="/people-edit?EditPeopleFunc=EDIT_WINDOWS_MINE&UID=">Click here</a> to edit your UWM Windows configurations.
{{end}}
{{end}}
<br>

<hr>
<h3>Custom Search Source</h3>
You may <a href="/people-edit?EditPeopleFunc=EDIT_CUSTOM_SEARCH_MINE&UID=">edit</a> your personal custom search configurations. Your current source of custom search is TDSMEDIA-{{.NUM_FILLER2}}.
<br>
<hr>
<h3>Choose Speech Voice</h3>
<form action="/people-edit?EditPeopleFunc=SetSpeechVoice" method="POST" enctype="multipart/form-data">
		<select name="VOICE" value="{{.STR_FILLER11}}">
			<option data-lang="en-US" data-name="Microsoft David - English (United States)">Microsoft David - English (United States) (en-US) -- DEFAULT</option>
			<option data-lang="en-US" data-name="Microsoft Mark - English (United States)">Microsoft Mark - English (United States) (en-US)</option>
			<option data-lang="en-US" data-name="Microsoft Zira - English (United States)">Microsoft Zira - English (United States) (en-US)</option>
			<option data-lang="de-DE" data-name="Google Deutsch">Google Deutsch (de-DE)</option>
			<option data-lang="en-US" data-name="Google US English">Google US English (en-US)</option>
			<option data-lang="en-GB" data-name="Google UK English Female">Google UK English Female (en-GB)</option>
			<option data-lang="en-GB" data-name="Google UK English Male">Google UK English Male (en-GB)</option>
			<option data-lang="es-ES" data-name="Google español">Google español (es-ES)</option>
			<option data-lang="es-US" data-name="Google español de Estados Unidos">Google español de Estados Unidos (es-US)</option>
			<option data-lang="fr-FR" data-name="Google français">Google français (fr-FR)</option>
			<option data-lang="hi-IN" data-name="Google हिन्दी">Google हिन्दी (hi-IN)</option>
			<option data-lang="id-ID" data-name="Google Bahasa Indonesia">Google Bahasa Indonesia (id-ID)</option>
			<option data-lang="it-IT" data-name="Google italiano">Google italiano (it-IT)</option>
			<option data-lang="ja-JP" data-name="Google 日本語">Google 日本語 (ja-JP)</option>
			<option data-lang="ko-KR" data-name="Google 한국의">Google 한국의 (ko-KR)</option>
			<option data-lang="nl-NL" data-name="Google Nederlands">Google Nederlands (nl-NL)</option>
			<option data-lang="pl-PL" data-name="Google polski">Google polski (pl-PL)</option>
			<option data-lang="pt-BR" data-name="Google português do Brasil">Google português do Brasil (pt-BR)</option>
			<option data-lang="ru-RU" data-name="Google русский">Google русский (ru-RU)</option>
			<option data-lang="zh-CN" data-name="Google&nbsp;普通话（中国大陆）">Google&nbsp;普通话（中国大陆） (zh-CN)</option>
			<option data-lang="zh-HK" data-name="Google&nbsp;粤語（香港）">Google&nbsp;粤語（香港） (zh-HK)</option>
			<option data-lang="zh-TW" data-name="Google 國語（臺灣）">Google 國語（臺灣） (zh-TW)</option>
		</select>
		<option selected>
		{{.STR_FILLER11}}
		</option>
	</select>
	<input type="submit" value="Submit">
</form>

<hr>
<h3>Choose Applications Provider</h3>
<form action="/people-edit?EditPeopleFunc=SetAppsProvider" method="POST" enctype="multipart/form-data">
	<select name="PROV" value="{{.STR_FILLER8}}">
	  <option value="GOGL">Google</option>
	  <option value="MSFT">Microsoft</option>
	  <option value="DB">DropBox</option>
		<option selected>
		{{.STR_FILLER8}}
		</option>
	</select>
	<input type="submit" value="Submit">
</form>

{{if eq .BOOL_FILLER1 true }} 
<hr>
<h3>User Privacy Settings</h3>
<form action="/people-edit?EditPeopleFunc=SetPrivacy" method="POST" enctype="multipart/form-data">
	<select name="PRIV" value="{{.STR_FILLER9}}">
	  <option value="NORMAL">All search, access and activity will be logged!</option>
	  <option value="INCOGNITO">Do not log my searches, access, or activity!</option>
		<option selected>
		{{.STR_FILLER9}}
		</option>
	</select>
	<input type="submit" value="Submit">
</form>
{{end}}

<hr>
<h3>Set Your Current Location Manually</h3>
First, you need to get your latitude and longitude from <a href="https://www.google.com.ph/maps" target=gmap>Google Maps</a>. Point your location at the map and you will see on the address bar a valude like "nn.nnnnnnn,mm.mmmmmmm". Copy/paste that to the form below.
<form action="/people-edit?EditPeopleFunc=SetMyLocation" method="POST" enctype="multipart/form-data">
<input type="text" name="LATLON" value="{{.STR_FILLER10}}" placeholder="" /> 
<input type="submit" value="Submit">
<br>
{{if ne .STR_FILLER10 "" }} [<a href="https://www.google.com.ph/maps/search/{{.STR_FILLER10}}" target=loc>Preview Map</a>]{{end}}
</form>
<hr>
<h3>Quick Links</h3>
We have listed below some important links about your ULAPPH cloud desktop.
<ul>
	<li>Invite others to chat with you via your own private chat (one on one)</li>
		<ul><li>
		<a href="{{.STR_FILLER3}}chat?CHAT_FUNC=newChatRoom&INVITE={{.STR_FILLER2}}">{{.STR_FILLER3}}chat?CHAT_FUNC=newChatRoom&INVITE={{.STR_FILLER2}}</a>
		</li></ul>
	<li>Invite others to chat with you via your own private chat (multiple users)</li>
		<ul><li>
		<a href="{{.STR_FILLER3}}chat?CHAT_FUNC=newChatRoom&INVITE={{.STR_FILLER2}}&RID=ChangeToYourRoomName">{{.STR_FILLER3}}chat?CHAT_FUNC=newChatRoom&INVITE={{.STR_FILLER2}}&RID=ChangeToYourRoomName</a>
		</li></ul>
	<li>Invite others to video chat with you via Web RTC.</li>
		<ul><li>
		<a href="{{.STR_FILLER3}}chat?CHAT_FUNC=newChatRoomAppRTC&INVITE={{.STR_FILLER2}}">{{.STR_FILLER3}}chat?CHAT_FUNC=newChatRoomAppRTC&INVITE={{.STR_FILLER2}}</a>
		</li></ul>
	<li>Allow others to knock you online by sharing this link.</li>
		<ul><li>
		<a href="{{.STR_FILLER3}}guestbook?GB_FUNC=KNOCK&UID={{.STR_FILLER2}}">{{.STR_FILLER3}}guestbook?GB_FUNC=KNOCK&UID={{.STR_FILLER2}}</a>
		</li></ul>
	<li>Share your ULAPPH Profile link.</li>
		<ul><li>
		<a href="{{.STR_FILLER3}}social?SO_FUNC=ViewPeople&UID={{.STR_FILLER2}}">{{.STR_FILLER3}}social?SO_FUNC=ViewPeople&UID={{.STR_FILLER2}}</a>
		</li></ul>
</ul>
<hr>
<h3>Force System Settings</h3>
<label class="switch">
  <input type="checkbox" checked onclick="switch4('SYS_UWM_RAN_COLORS');" id="SYS_UWM_RAN_COLORS">
  <div class="slider round"></div>
</label> Randomize Desktop Colors<br>
<hr>
<h3>Force Screensize</h3>
<label class="switch">
  <input type="checkbox" checked onclick="screensize();" id="SYS_SMALL_SCREEN">
  <div class="slider round"></div>
</label> If yes, windows open in new tabs.<br>
<script type="text/javascript" src="/static/js/switch_uwm.js"></script>
<script type="text/javascript" src="/static/js/myprefs.js"></script>
`
 
var htmlWidgetMyPreferencesMOTD = template.Must(template.New("htmlWidgetMyPreferences").Parse(htmlWidgetMyPreferencesAMOTD))
 
const htmlWidgetMyPreferencesAMOTD = `		
<hr>
<h3>My MOTDs</h3>
Press button to get random quotes. You can edit/update your MOTD files.
<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER1}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER1}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER1}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER1}}&SID=TDSMEDIA-{{.NUM_FILLER1}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER2}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER2}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER2}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER2}}&SID=TDSMEDIA-{{.NUM_FILLER2}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER3}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER3}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER3}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER3}}&SID=TDSMEDIA-{{.NUM_FILLER3}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER4}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER4}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER4}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER4}}&SID=TDSMEDIA-{{.NUM_FILLER4}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER5}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER5}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER5}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER5}}&SID=TDSMEDIA-{{.NUM_FILLER5}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER6}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER6}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER6}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER6}}&SID=TDSMEDIA-{{.NUM_FILLER6}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER7}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER7}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER7}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER7}}&SID=TDSMEDIA-{{.NUM_FILLER7}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER8}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER8}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER8}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER8}}&SID=TDSMEDIA-{{.NUM_FILLER8}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER9}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER9}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER9}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER9}}&SID=TDSMEDIA-{{.NUM_FILLER9}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER10}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER10}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER10}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER10}}&SID=TDSMEDIA-{{.NUM_FILLER10}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER11}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER11}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER11}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER11}}&SID=TDSMEDIA-{{.NUM_FILLER11}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER12}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER12}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER12}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER12}}&SID=TDSMEDIA-{{.NUM_FILLER12}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER13}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER13}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER13}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER13}}&SID=TDSMEDIA-{{.NUM_FILLER13}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER14}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER14}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER14}}</a>
		<a href="/editor?MEDIA_ID={{.NUM_FILLER14}}&SID=TDSMEDIA-{{.NUM_FILLER14}}" class="button button-raised button-pill button-inverse">Edit</a>
		<br>
<a href="#" onClick="window.postMessage('ULAPPH-SYS-UPD@888@{{.STR_FILLER15}}@888@/tools?FUNC=WIDGET&t=RandomMotd&MEDIA_ID={{.NUM_FILLER15}}', 'https://www.ulapph.com'); return false;" class="button button-raised button-primary button-pill">{{.STR_FILLER15}}</a>
        <a href="/editor?MEDIA_ID={{.NUM_FILLER15}}&SID=TDSMEDIA-{{.NUM_FILLER15}}" class="button button-raised button-pill button-inverse">Edit</a>
<hr>
{{if eq .BOOL_FILLER1 true }}
<h3>Enable Default Sites</h3>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('ulapph-1');" id="ulapph-1">
  <div class="slider round"></div>
</label><label for="ulapph-1">God (ulapph-1)</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('ulapph-2');" id="ulapph-2">
  <div class="slider round"></div>
</label><label for="ulapph-2">Universe (ulapph-2)</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('ulapph-3');" id="ulapph-3">
  <div class="slider round"></div>
</label><label for="ulapph-3">Earth (ulapph-3)</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('ulapph-4');" id="ulapph-4">
  <div class="slider round"></div>
</label><label for="ulapph-4">Philippines (ulapph-4)</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('ulapph-5');" id="ulapph-5">
  <div class="slider round"></div>
</label><label for="ulapph-5">Global (ulapph-5)</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('info');" id="info">
  <div class="slider round"></div>
</label><label for="info">Infostream (ulapph-infostream)</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('opo');" id="opo">
  <div class="slider round"></div>
</label><label for="opo">Opo (ulapph-public-1)</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('videoke');" id="videoke">
  <div class="slider round"></div>
</label><label for="videoke">Videoke (ulapph-videoke)</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('website');" id="website">
  <div class="slider round"></div>
</label><label for="website">MyWebsite ()</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('bible');" id="bible">
  <div class="slider round"></div>
</label><label for="bible">Holy Bible ()</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('chat');" id="chat">
  <div class="slider round"></div>
</label><label for="chat">Chat Worldwide</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('online');" id="online">
  <div class="slider round"></div>
</label><label for="online">Online Users</label><br>
<label class="switch">
  <input type="checkbox" checked onclick="switch3('ytlive');" id="ytlive">
  <div class="slider round"></div>
</label><label for="ytlive">Youtube Live</label><br> 
<label class="switch">
  <input type="checkbox" checked onclick="switch3('stream');" id="stream">
  <div class="slider round"></div>
</label><label for="stream">ULAPPH Stream</label><br> 
<hr>
{{end}}
`
 
var htmlEscSearch = template.Must(template.New("htmlEscSearch").Parse(htmlEscSearchACR))
 
const htmlEscSearchACR = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Search::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
	
</head>
 
<body>
`
 
var htmlWidgetBrowserCR = template.Must(template.New("htmlWidgetBrowserCR").Parse(htmlWidgetBrowserACR))
 
const htmlWidgetBrowserACR = `	
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Join Chat::www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>
	
</head>
 
<body>
<form action="/tools?FUNC=WIDGET&t=MiniBrowserPost" method="POST" enctype="multipart/form-data">
<input type="search" name="url" value="" placeholder="Chat Room URL" />
</form>
`	
var iconsSettingsTemplateHeader = template.Must(template.New("iconsSettingsTemplateHeader").Parse(iconsSettingsTemplateHeaderHTML))
 
const iconsSettingsTemplateHeaderHTML = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Settings::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
 
 
$(document).ready(function() {
	$('#example').dataTable();
	$('#example2').dataTable();
} );
 
 
	</script>
</head>
 
<body>
<script src="/static/js/settings_count.js"></script>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
{{if eq .NUM_FILLER1 0 }}
<a href="/desktop0#page"><img src="https://lh3.googleusercontent.com/YQGP45qzsnehhJ0l3t4NSBXjse_j7T-NPsXATU_HXPuouqOqOI_DEF_yFcoQIw_EG4OpUXta6HtD7r04VFf2WR69sIPP" title="Back to  Desktop0" height=40 width=40></a><a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.STR_FILLER1}}&SID={{.STR_FILLER1}}"><img src="https://lh3.googleusercontent.com/4esfglgZ0V801qZXHgrbfptGvpBPN3hKNTR9MN0DbDE_dLGHK6_giKd9I14QbqWgL9YGdqelZCJvxu41j3-Cpjqqc43g" title="Update Profile" height=40 width=40></a><a href="/admin-icons"><img src="https://lh3.googleusercontent.com/mjwP20A3v61-1UFTKeW7OltxDylnusLUiqVBr-iPf-FAn1TsZV2v6B3dRN7eKNIG_Vu42ZcfAWnu9RisfsUAYS2X7wfMyg" title="Admin Icons" height=40 width=40></a>
{{else}}
<a href="/desktop?d={{.NUM_FILLER1}}#page"><img src="https://lh3.googleusercontent.com/YQGP45qzsnehhJ0l3t4NSBXjse_j7T-NPsXATU_HXPuouqOqOI_DEF_yFcoQIw_EG4OpUXta6HtD7r04VFf2WR69sIPP" title="Back to  Desktop{{.NUM_FILLER1}}" height=40 width=40></a><a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.STR_FILLER1}}&SID={{.STR_FILLER1}}"><img src="https://lh3.googleusercontent.com/4esfglgZ0V801qZXHgrbfptGvpBPN3hKNTR9MN0DbDE_dLGHK6_giKd9I14QbqWgL9YGdqelZCJvxu41j3-Cpjqqc43g" title="Update Profile" height=40 width=40></a> <a href="/admin-icons"><img src="https://lh3.googleusercontent.com/mjwP20A3v61-1UFTKeW7OltxDylnusLUiqVBr-iPf-FAn1TsZV2v6B3dRN7eKNIG_Vu42ZcfAWnu9RisfsUAYS2X7wfMyg" title="Admin Icons" height=40 width=40></a>
{{end}}
<form id="desktop" name="desktop" action="/settings-display-screen" method="post">
<h3>Check below to select your icons(first click means first icon to appear in dock menu): </h3>
<input type="hidden" name="desktop-name" value="desktop{{.NUM_FILLER1}}" maxlength="50">
Icons Selected: <input type="text" name="curr-count" value="0" size="2" maxlength="3">
Icons Text: <input type="text" name = "mychecks" value="desktop{{.NUM_FILLER1}}" size=100 maxlength="200">
<br>Don't edit above text fields. Click below icons or click next table display to select your icons or use search form.</br>
<div id="icons-area"><img src="/static/img/bracket.png" width=40 height=40></div>
<br>If icons are missing, reload this page. To start over again, just also reload this page.</br>
`
 
 
 
var genericTableDispHdr = template.Must(template.New("genericTableDispHdr").Parse(genericTableDispHdr2))
 
const genericTableDispHdr2 = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>{{.STR_FILLER3}}::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	<style>
	#channel-area{
		width: 100%;
		position:relative;
		vertical-align: top;
		z-index:111;
		bottom:0px;
		left:0px;
		padding:6px;
		background-color:#44E61F;
	}
	</style>
	<link rel="stylesheet" type="text/css" href="/static/css/collapse.css">
	<script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	
	<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
	<script type="text/javascript" src="/static/js/vibrate.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
 
 
$(document).ready(function() {
	$('#example').dataTable();
} );
 
 
	</script>
	<script src="/static/js/jquery.linkify-1.0.js"></script>
  <script>
    $(function(){
      jQuery('#warning').remove();
      jQuery('body').linkify({
          handleLinks: function (links) {
              links
                  .css('background', '#ff0')
                  //.after(function (i) { return ' (link '+(i+1)+')'; });
            }
        });
    });
  </script>	
 
</head>
 
<body>
<input type="hidden" id="chan-id" value="{{.STR_FILLER1}}">
<input type="hidden" id="ringtone" value="{{.STR_FILLER2}}">	
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<script src="/static/js/settings_count.js"></script>
<h3><font color="blue">{{.STR_FILLER3}}</font></h3>
[ <a href="/">Home</a> ] [ <a href="/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE&o=tiles">Users</a> ] [ <a href="/chat">Chat</a> ] [ <a href="/logout">Logout</a> ]
<form id="desktop" name="desktop" action="/admin-icons" method="post">
<hr>
`
 
var genericTableDispHdrNC = template.Must(template.New("genericTableDispHdrNC").Parse(genericTableDispHdrNC2))
 
const genericTableDispHdrNC2 = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>{{.STR_FILLER3}}::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	<style>
	#channel-area{
		width: 100%;
		position:relative;
		vertical-align: top;
		z-index:111;
		bottom:0px;
		left:0px;
		padding:6px;
		background-color:#44E61F;
	}
	</style>
	
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
 
 
$(document).ready(function() {
	$('#example').dataTable();
} );
 
 
	</script>
	<script src="/static/js/jquery.linkify-1.0.js"></script>
  <script>
    $(function(){
      jQuery('#warning').remove();
      jQuery('body').linkify({
          handleLinks: function (links) {
              links
                  .css('background', '#ff0')
                  //.after(function (i) { return ' (link '+(i+1)+')'; });
            }
        });
    });
  </script>	
 
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<script src="/static/js/settings_count.js"></script>
<h3><font color="blue">{{.STR_FILLER3}}</font></h3>
[ <a href="/">Home</a> ] [ <a href="/people?PEOPLE_FUNC=QUICK-VIEW-ONLINE&o=tiles">Users</a> ] [ <a href="/chat">Chat</a> ] [ <a href="/logout">Logout</a> ]
<form id="desktop" name="desktop" action="/admin-icons" method="post">
<hr>
<div id="stat-area"></div>
<div id="slides-area" contenteditable="true"></div>
<style scoped>
  #slides-area { margin-bottom: 10px; }
  [contenteditable="true"] { padding: 10px; outline: 2px dashed #CCC; }
  [contenteditable="true"]:hover { outline: 2px dashed #0090D2; }
</style>
 
<script>
function copyToUWM(link, title, mid) {
	var e = document.getElementById("slides-area");
	var currHTML = e.innerHTML;
	var link2 = link.replace("http://", "https://");
	
	e.innerHTML = currHTML + "&lt;input type=\"hidden\" value=\"'" + link2 + "', 800, 500, 'left', 'top', {title: '" + title + "', icon: '/static/img/jswm-web.png'}\" size=\"60\" id=\"" + "ulapph-" + mid + "\" /&gt;&lt;script type=\"text/javascript\"&gt;eval('windowManager.openURI(' + $('" + "ulapph-" + mid + "').value + ');');&lt;/script&gt;" + "<br>" + "<br>";
 
	document.getElementById("stat-area").innerHTML = "<b>After adding target website icons, copy the code and goto <a href=\"#\" onclick=\"editUWMSettings(); return false;\" >UWM Settings</a> and append the new settings.</b>";
	return;
}
 
function editUWMSettings() {
	var root = location.protocol + '//' + location.host;
	window.postMessage("ULAPPH-SYS-UPD@888@EDIT_WINDOWS_SUBUWM",root);
}
 
</script>
<hr>
`
 
var infoDBTemplateHeaderSlidesAdmin = template.Must(template.New("infoDBTemplateHeaderSlidesAdmin").Parse(infoDBTemplateHeaderHTMLSlidesAdmin))
 
const infoDBTemplateHeaderHTMLSlidesAdmin = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Slides::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	
	<script type="text/javascript" class="init">
	
$(document).ready(function() {
    $('#example').DataTable( {
        order: [[ 4, 'desc' ]]
    } );
} );
 
 
	</script>
	<link href="/static/css/thumbs-style.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="/static/js/thumbs-tooltip.js"></script>
	<script type="text/javascript" src="/static/js/thumbs-ajax.js"></script>
	<!--style>
		.slidingDiv {
		height:300px;
		background-color: #99CCFF;
		padding:20px;
		margin-top:10px;
		border-bottom:5px solid #3399FF;
		}
 
		.show_hide {
		display:none;
		}
	</style-->
	<!--script type="text/javascript">
 
	$(document).ready(function(){
 
	$(".slidingDiv").hide();
	$(".show_hide").show();
 
	$('.show_hide').click(function(){
	$(".slidingDiv").slideToggle();
	});
 
	});
 
	</script-->
	<script type="text/javascript" language="javascript" src="/static/js/copyToUWM.js"></script>
 
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<script src="/static/js/settings_count.js"></script>
<h3><font color="blue">Slides > {{.}}</font></h3>
<!--a href="/infodb?DB_FUNC=SLIDES&CATEGORY="><img src="https://lh3.googleusercontent.com/1hOYTc1KkYDbvrdqB2TAe9-bE1TfSBBNBhFu2YrKrF1fbhmsxVuK9ZH0_Mf-ghCLUW2HtGBnY6XE1mHGQI8Xp6b1DL58yQ" title="List All Slides" height=40 width=40></a>
<a href="/infodb?DB_FUNC=VIEWER-SLIDES-ALL"><img src="https://lh3.googleusercontent.com/zz0WH4xuaiGofYdNEV5T9YityoXV-LdKuAWzhwyHqYFjXgPQVSzsUvMDTB9Q-5s1N9cPmyAn92pFPnaVKzrwQQraCybi" title="Slide All Slides" height=40 width=40></a>
<a href="/editor?DOC_ID=0&SID=NEWSLIDE&CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/c6C1SEHVDBREUM9hjWwBkE-5xNq5dzrvcdj1iMaNVt6CexLSo9pwivkFpuTc8f4YPvnOfNAoscBPVoHuIXzg1jVR2_G2" title="New Slide" height=40 width=40></a>
<a href="#upload-slides"><img src="https://lh3.googleusercontent.com/wcYYSjl5jjz27wNNAjaZF988sIxwE_w5prJAEpDvi6-sNNjlS2sq8E1kmJhnSlb_HAXTXru9JGKMvS54nKPX-2wDwRf1" title="Upload Slides" height=40 width=40></a>
<a href="/admin-slides"><img src="https://lh3.googleusercontent.com/_YgRVu3_fLmw1WKXsCq8vqv6fCRPv-8RGolpPx2os0DEkW1OXxl6NB40C2PLsN9V1FbkxUrzT5tMMQMu3PX1H8VRXATC" title="Admin Slides" height=40 width=40></a>
<a href="/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/9huj9qpDUt8idkHGJiEQz2MsnP7i1pRx6gcoR3WN-gixfyUkW48K5yzy3UrQAP01fFOfEpeJ-uvkB-q1VzrLqYRDEWRb" title="View Personal Slides" height=40 width=40></a>
<a href="/media?CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/0DMGfaCaIl5rk0mOnQ3UHDLRfj70_GanQJLxzAPS865GhNkTRJEn7UTEt40U2QtgmHR76t4Mc2ql59xu3QuDQZNtliyXEg" title="Media Gallery" height=40 width=40></a>
<a href="/infodb?DB_FUNC=SLIDES&CATEGORY={{.}}&VIEW=RECENT"><img src="/static/img/recent.png" title="View Recent Slides" height=40 width=40></a>
<hr-->
<div id="slides-area"></div>
<div id="slides-area-button"></div>
<div id="slides-copy-button"></div>
`
 
var infoDBTemplateHeaderSlidesDirectory = template.Must(template.New("infoDBTemplateHeaderSlidesDirectory").Parse(infoDBTemplateHeaderHTMLSlidesDirectory))
 
const infoDBTemplateHeaderHTMLSlidesDirectory = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Directory::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	
	<script type="text/javascript" class="init">
	
$(document).ready(function() {
    $('#example').DataTable( {
        order: [[ 9, 'desc' ]]
    } );
} );
 
 
	</script>
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<script src="/static/js/settings_count.js"></script>
<h3><font color="blue">ULAPPH Directory</font></h3>
<a href="/infodb?DB_FUNC=SLIDES&CATEGORY="><img src="https://lh3.googleusercontent.com/1hOYTc1KkYDbvrdqB2TAe9-bE1TfSBBNBhFu2YrKrF1fbhmsxVuK9ZH0_Mf-ghCLUW2HtGBnY6XE1mHGQI8Xp6b1DL58yQ" title="List All Slides" height=40 width=40></a>
<a href="/infodb?DB_FUNC=VIEWER-SLIDES-ALL"><img src="https://lh3.googleusercontent.com/zz0WH4xuaiGofYdNEV5T9YityoXV-LdKuAWzhwyHqYFjXgPQVSzsUvMDTB9Q-5s1N9cPmyAn92pFPnaVKzrwQQraCybi" title="Slide All Slides" height=40 width=40></a>
<a href="/editor?DOC_ID=0&SID=NEWSLIDE&CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/c6C1SEHVDBREUM9hjWwBkE-5xNq5dzrvcdj1iMaNVt6CexLSo9pwivkFpuTc8f4YPvnOfNAoscBPVoHuIXzg1jVR2_G2" title="New Slide" height=40 width=40></a>
<a href="#upload-slides"><img src="https://lh3.googleusercontent.com/wcYYSjl5jjz27wNNAjaZF988sIxwE_w5prJAEpDvi6-sNNjlS2sq8E1kmJhnSlb_HAXTXru9JGKMvS54nKPX-2wDwRf1" title="Upload Slides" height=40 width=40></a>
<a href="/admin-slides"><img src="https://lh3.googleusercontent.com/_YgRVu3_fLmw1WKXsCq8vqv6fCRPv-8RGolpPx2os0DEkW1OXxl6NB40C2PLsN9V1FbkxUrzT5tMMQMu3PX1H8VRXATC" title="Admin Slides" height=40 width=40></a>
<a href="/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/9huj9qpDUt8idkHGJiEQz2MsnP7i1pRx6gcoR3WN-gixfyUkW48K5yzy3UrQAP01fFOfEpeJ-uvkB-q1VzrLqYRDEWRb" title="View Personal Slides" height=40 width=40></a>
<a href="/media?CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/0DMGfaCaIl5rk0mOnQ3UHDLRfj70_GanQJLxzAPS865GhNkTRJEn7UTEt40U2QtgmHR76t4Mc2ql59xu3QuDQZNtliyXEg" title="Media Gallery" height=40 width=40></a>
<a href="/infodb?DB_FUNC=SLIDES&CATEGORY={{.}}&VIEW=RECENT"><img src="/static/img/recent.png" title="View Recent Slides" height=40 width=40></a>
<hr>
`
 
var showTrending = template.Must(template.New("showTrending").Parse(showTrendingRecs))
 
const showTrendingRecs = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>ULAPPH Trending Contents::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	
	<script type="text/javascript" class="init">
	
$(document).ready(function() {
	//$('#example').dataTable();
    $('#example').DataTable( {
        order: [[ 5, 'desc' ]]
    } );
} );
 
 
	</script>
</head>
 
<body>
<h3><font color="blue">ULAPPH Overall Trending</font> [<a href="https://ulapph-sites.appspot.com/social?SO_FUNC=show-whats-new">Whats New</a>]</h3>
<hr>
`
 
var showPeopleDir = template.Must(template.New("showPeopleDir").Parse(showPeopleDirRecs))
 
const showPeopleDirRecs = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>ULAPPH People Directory::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<link rel="stylesheet" type="text/css" href="/static/css/collapse.css">
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
	
$(document).ready(function() {
	//$('#example').dataTable();
    $('#example').DataTable( {
        order: [[ 0, 'desc' ]]
    } );
} );
 
 
	</script>
</head>
 
<body>
<script src="https://apis.google.com/static/js/platform.js" async defer></script>
<h3><font color="blue">ULAPPH People Directory</font></h3>
<hr>
`
 
var showSitesDir = template.Must(template.New("showPeopleDir").Parse(showSitesDirRecs))
 
const showSitesDirRecs = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>ULAPPH Cloud Desktop Directory::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<link rel="stylesheet" type="text/css" href="/static/css/collapse.css">
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">	
	$(document).ready(function() {
		//$('#example').dataTable();
		$('#example').DataTable( {
			order: [[ 5, 'desc' ]]
		} );
	});
	</script>
	<style>
	.img-circle {
    border-radius: 50%;
	}
	</style>
</head>
 
<body>
<h3><font color="blue">ULAPPH Cloud Desktops Directory</font></h3>
<hr>
`
 
var showWhatsNew = template.Must(template.New("showWhatsNew").Parse(showWhatsNewRecs))
 
const showWhatsNewRecs = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>ULAPPH Whats New Contents::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	
	<script type="text/javascript" class="init">
	
$(document).ready(function() {
	//$('#example').dataTable();
    $('#example').DataTable( {
        order: [[ 4, 'desc' ]]
    } );
} );
 
 
	</script>
</head>
 
<body>
<h3><font color="blue">ULAPPH Overall Whats New</font> [<a href="https://ulapph-sites.appspot.com/social?SO_FUNC=show-trending">Trending</a>]</h3>
<hr>
`

//D0042
var showDiscussions = template.Must(template.New("showDiscussions").Parse(showDiscussionsRecs))
 
const showDiscussionsRecs = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>ULAPPH Recent Discussions::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	
	<script type="text/javascript" class="init">
		$(document).ready(function() {
			//$('#example').dataTable();
			$('#example').DataTable( {
				order: [[ 5, 'desc' ]]
			} );
		} );
	</script>
	<style>
		.img-circle {
		border-radius: 50%;
		}
	</style>
</head>
 
<body>
<h3><font color="blue">ULAPPH Recent Discussions</font></h3>
<hr>
`

//D0042
var showAllRecents = template.Must(template.New("showDiscussions").Parse(showAllRecentsRecs))
 
const showAllRecentsRecs = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>ULAPPH Recents::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	
	<script type="text/javascript" class="init">
		$(document).ready(function() {
			//$('#example').dataTable();
			$('#example').DataTable( {
				order: [[ 5, 'desc' ]]
			} );
		} );
	</script>
	<style>
		.img-circle {
		border-radius: 50%;
		}
	</style>
</head>
 
<body>
<h3><font color="blue">ULAPPH Recent Discussions</font></h3>
<hr>
`

var infoDBTemplateHeaderArticlesAdmin = template.Must(template.New("infoDBTemplateHeaderArticlesAdmin").Parse(infoDBTemplateHeaderHTMLArticlesAdmin))
 
const infoDBTemplateHeaderHTMLArticlesAdmin = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Articles::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	
	<script type="text/javascript" class="init">
	
$(document).ready(function() {
    $('#example').DataTable( {
        order: [[ 4, 'desc' ]]
    } );
} );
 
 
	</script>
	<link href="/static/css/thumbs-style.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="/static/js/thumbs-tooltip.js"></script>
	<script type="text/javascript" src="/static/js/thumbs-ajax.js"></script>
	<!--style>
		.slidingDiv {
		height:300px;
		background-color: #99CCFF;
		padding:20px;
		margin-top:10px;
		border-bottom:5px solid #3399FF;
		}
 
		.show_hide {
		display:none;
		}
	</style-->
	<!--script type="text/javascript">
 
	$(document).ready(function(){
 
	$(".slidingDiv").hide();
	$(".show_hide").show();
 
	$('.show_hide').click(function(){
	$(".slidingDiv").slideToggle();
	});
 
	});
 
	</script-->
	<script type="text/javascript" language="javascript" src="/static/js/copyToUWM.js"></script>
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<script src="/static/js/settings_count.js"></script>
<h3><font color="blue">Articles > {{.}}</font></h3>
<!--a href="/infodb?DB_FUNC=ARTICLES&CATEGORY="><img src="https://lh3.googleusercontent.com/5F03yVRd68GcmE5hsGW0PSf-j3eR6-QxNWsLOzXOk-qYxWHydMbwG6un3ecZiuYsLmPPWNLf88qE3vaxHX1kVLrJBSccpw" title="List all Articles" height=40 width=40></a>
<a href="/editor?DOC_ID=0&SID=NEWARTICLE&CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/UmYEg0Y9VgTuymOs0U6m_C1EJ02zdX-L-SMJpwuhhphtrc4oVCx5UDJ0Tv4DVbsuzRxmeMxyIE8tMteSV3UKN9B2h4uK" title="New Article" height=40 width=40></a>
<a href="#upload-articles"><img src="https://lh3.googleusercontent.com/ohqRUQxZxQj5qi2N-njg9sb8dsvogOfM8Zamot1g-9iZXbyKV-peONVDoPNt7GzSRjMY2DbQPHD9phRCe0QdBKVCiwVpqA" title="Upload Article" height=40 width=40></a>
<a href="/admin-articles"><img src="https://lh3.googleusercontent.com/9YwRXxRpwP0J9eLZ5RKcs1NEI2TP_WaulchFx8_gL9aSHKxW9-zBIEH0H6UcYDF40UvR_CdneXC8tQDmnfe_lxjljk5y" title="Admin Articles" height=40 width=40></a>
<a href="/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/UA3v8CtZTiufEmBnraMfGVIFhWKK352Og2hJoHTpeOenu-3BKxAigV6iCtBaMoZFOkWMUwPPFFBEkuIwpPBQ946sspIbVw" title="View Personal Articles" height=40 width=40></a>
<a href="/media?CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/fazvKTAudGvqzmVfKUCtMseQStH28o5Anr1VGTlZVcw2vn3Z2o4wFjHEtjpsYbC9pZ8XbTamulRfRQmCeA5-SAyy6UDV" title="Media Gallery" height=40 width=40></a>
<a href="/infodb?DB_FUNC=ARTICLES&CATEGORY={{.}}&VIEW=RECENT"><img src="/static/img/recent.png" title="View Recent Articles" height=40 width=40></a>
<hr-->
<div id="slides-area"></div>
<div id="slides-area-button"></div>
<div id="slides-copy-button"></div>
`
 
var iconsSettingsTemplateHeaderADS = template.Must(template.New("iconsSettingsTemplateHeaderADS").Parse(iconsSettingsTemplateHeaderHTMLAds))
 
const iconsSettingsTemplateHeaderHTMLAds = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>AdminAds::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />   	
    <script src="/static/js/pulldown-site-min.js"></script>
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
		$(document).ready(function() {
			$('#example').dataTable();
		} );
		
		$(document).ready(function() {
			$('#example2').dataTable();
		} );
	</script>
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<script src="/static/js/settings_count.js"></script>
<h3><font color="blue">Admin - Advertisements</font></h3>
<h3>[ <a href="/admin-ads?ADS_FUNC=UPLOAD#upload-ads" target="ads">Upload New Advertisement</a> ] [ <a href="/admin-ads?ADS_FUNC=ListSlots" target="slots">View Timeslots</a> ] [ <a href="/admin-ads?ADS_FUNC=ListAds" target="ads">View Advertisements</a> ] [ <a href="/admin-ads?ADS_FUNC=TASK_ADS_SLOTS" target="run">Run Adslots Processor</a> ] [ <a href="/admin-ads?ADS_FUNC=CheckCatAdSlots" target="cats">Check Categories & Ads Slots</a> ] [ <a href="/admin-setup?ADMIN_FUNC=EDIT_ADS_SLOTS_LIST">Edit Ads Slots List</a> ]</h3>
<hr>
`
 
var iconsSettingsTemplateHeaderSL = template.Must(template.New("iconsSettingsTemplateHeaderSL").Parse(iconsSettingsTemplateHeaderHTMLSL))
 
const iconsSettingsTemplateHeaderHTMLSL = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>AdminSlides::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
	$(document).ready(function() {
		$('#example').DataTable( {
			order: [[ 9, 'desc' ]]
		} );
	} );
	</script>
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<h3><font color="blue">Admin - Slides - {{.}}</font></h3>
<!--a href="/infodb?DB_FUNC=SLIDES&CATEGORY="><img src="https://lh3.googleusercontent.com/1hOYTc1KkYDbvrdqB2TAe9-bE1TfSBBNBhFu2YrKrF1fbhmsxVuK9ZH0_Mf-ghCLUW2HtGBnY6XE1mHGQI8Xp6b1DL58yQ" title="List All Slides" height=40 width=40></a>
<a href="/infodb?DB_FUNC=VIEWER-SLIDES-ALL"><img src="https://lh3.googleusercontent.com/zz0WH4xuaiGofYdNEV5T9YityoXV-LdKuAWzhwyHqYFjXgPQVSzsUvMDTB9Q-5s1N9cPmyAn92pFPnaVKzrwQQraCybi" title="Slide All Slides" height=40 width=40></a>
<a href="/editor?DOC_ID=0&SID=NEWSLIDE&CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/c6C1SEHVDBREUM9hjWwBkE-5xNq5dzrvcdj1iMaNVt6CexLSo9pwivkFpuTc8f4YPvnOfNAoscBPVoHuIXzg1jVR2_G2" title="New Slide" height=40 width=40></a>
<a href="#upload-slides"><img src="https://lh3.googleusercontent.com/wcYYSjl5jjz27wNNAjaZF988sIxwE_w5prJAEpDvi6-sNNjlS2sq8E1kmJhnSlb_HAXTXru9JGKMvS54nKPX-2wDwRf1" title="Upload Slides" height=40 width=40></a>
<a href="/infodb?DB_FUNC=SLIDES&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/9huj9qpDUt8idkHGJiEQz2MsnP7i1pRx6gcoR3WN-gixfyUkW48K5yzy3UrQAP01fFOfEpeJ-uvkB-q1VzrLqYRDEWRb" title="View Personal Slides" height=40 width=40></a>
<a href="/media?CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/0DMGfaCaIl5rk0mOnQ3UHDLRfj70_GanQJLxzAPS865GhNkTRJEn7UTEt40U2QtgmHR76t4Mc2ql59xu3QuDQZNtliyXEg" title="Media Gallery" height=40 width=40></a>
<a href="/infodb?DB_FUNC=SLIDES&CATEGORY={{.}}&VIEW=RECENT"><img src="/static/img/recent.png" title="View Recent Slides" height=40 width=40></a>
<hr-->
`
 
var iconsSettingsTemplateHeaderAL = template.Must(template.New("iconsSettingsTemplateHeaderAL").Parse(iconsSettingsTemplateHeaderHTMLAL))
 
const iconsSettingsTemplateHeaderHTMLAL = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>AdminArticles::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
	$(document).ready(function() {
		$('#example').dataTable();
	} );
	</script>
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<h3><font color="blue">Admin - Articles</font></h3>
<!--a href="/infodb?DB_FUNC=ARTICLES&CATEGORY="><img src="https://lh3.googleusercontent.com/5F03yVRd68GcmE5hsGW0PSf-j3eR6-QxNWsLOzXOk-qYxWHydMbwG6un3ecZiuYsLmPPWNLf88qE3vaxHX1kVLrJBSccpw" title="List all Articles" height=40 width=40></a>
<a href="/editor?DOC_ID=0&SID=NEWARTICLE&CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/UmYEg0Y9VgTuymOs0U6m_C1EJ02zdX-L-SMJpwuhhphtrc4oVCx5UDJ0Tv4DVbsuzRxmeMxyIE8tMteSV3UKN9B2h4uK" title="New Article" height=40 width=40></a>
<a href="#upload-articles"><img src="https://lh3.googleusercontent.com/ohqRUQxZxQj5qi2N-njg9sb8dsvogOfM8Zamot1g-9iZXbyKV-peONVDoPNt7GzSRjMY2DbQPHD9phRCe0QdBKVCiwVpqA" title="Upload Article" height=40 width=40></a>
<a href="/admin-articles"><img src="https://lh3.googleusercontent.com/9YwRXxRpwP0J9eLZ5RKcs1NEI2TP_WaulchFx8_gL9aSHKxW9-zBIEH0H6UcYDF40UvR_CdneXC8tQDmnfe_lxjljk5y" title="Admin Articles" height=40 width=40></a>
<a href="/infodb?DB_FUNC=ARTICLES&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/UA3v8CtZTiufEmBnraMfGVIFhWKK352Og2hJoHTpeOenu-3BKxAigV6iCtBaMoZFOkWMUwPPFFBEkuIwpPBQ946sspIbVw" title="View Personal Articles" height=40 width=40></a>
<a href="/media?CATEGORY={{.}}"><img src="https://lh3.googleusercontent.com/fazvKTAudGvqzmVfKUCtMseQStH28o5Anr1VGTlZVcw2vn3Z2o4wFjHEtjpsYbC9pZ8XbTamulRfRQmCeA5-SAyy6UDV" title="Media Gallery" height=40 width=40></a>
<a href="/infodb?DB_FUNC=ARTICLES&CATEGORY={{.}}&VIEW=RECENT"><img src="/static/img/recent.png" title="View Recent Articles" height=40 width=40></a>
<hr-->
`
 
var iconsSettingsTemplateHeaderMD = template.Must(template.New("iconsSettingsTemplateHeaderMD").Parse(iconsSettingsTemplateHeaderHTMLMD))
 
const iconsSettingsTemplateHeaderHTMLMD = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Media Gallery::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.3.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
 
$(document).ready(function() {
    $('#example').DataTable( {
        order: [[ 5, 'desc' ]]
    } );
} );
 
 
	</script>
	<script type="text/javascript" language="javascript" src="/static/js/copyToClipboard.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/copyToSlides.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/copyToUWM.js"></script>
	<!--[if IE]>
	  <script src="https://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
	<style>
	  article, aside, figure, footer, header, hgroup,
	  menu, nav, section { display: block; }
	  pre { margin: 0; }
	  pre.LineNumbers {
		float: left;
		padding-right:2px;
		border-right: solid 1px black;
		margin-right:7px;
	  }
	  div.CodeBox {
		border: solid 2px navy;
		padding:2px;
		background-color: #BFD1E4;
	  }
	
	</style>
	<link href="/static/css/thumbs-style.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="/static/js/thumbs-tooltip.js"></script>
	<script type="text/javascript" src="/static/js/thumbs-ajax.js"></script>
	<!--style>
		.slidingDiv {
		height:300px;
		background-color: #99CCFF;
		padding:20px;
		margin-top:10px;
		border-bottom:5px solid #3399FF;
		}
 
		.show_hide {
		display:none;
		}
	</style-->
	<!--script type="text/javascript">
 
	$(document).ready(function(){
 
	$(".slidingDiv").hide();
	$(".show_hide").show();
 
	$('.show_hide').click(function(){
	$(".slidingDiv").slideToggle();
	});
 
	});
 
	</script-->
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<h3><font color="blue">Media Gallery</font></h3>
<!--a href="/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD"><img src="/static/img/uploader.png" title="Multiple Upload" height=40 width=40></a>
<a href="/?q=qi#upload-image"><img src="https://lh3.googleusercontent.com/eGqfd8VMV1FCKIaubhMkBDjMnU9lv1WQRu0iqzcAnqLJ60k4wrGp2opS1f-j-Oh0n7uUTBAHxTwSEeQi3efMLdMi1PbW" title="Upload Image" height=40 width=40></a>
<a href="/?q=qt#upload-text"><img src="https://lh3.googleusercontent.com/sGoo7YEJKoJ4JrkySxYzcplcZChb6VhOC_7dIkrF78KH0C3GgLvARzvDNUevjcBWZhCGcytW3myUvJoftkMnTseq0SVj" title="Upload Text File" height=40 width=40></a>
<a href="/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/HZeDnyMUi99is1fbWsnWnqGrkt-Pde01EHLz4ej-GSZ69S-N3jezP-FoNMuwXaSvv2ntr_cauLhKsIWtAEWOircVhg1PSg" title="New Text File" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/enc435Yme7GQbr07M44VEOnuOx_w012Uut0iq2NpVtJov6xMtwkZ1rVfgIUG_85ibqfCkefAVQakCTp0e_GxOk462sHjeA" title="View Personal Media" height=40 width=40></a>
<a href="/media?FUNC_CODE=VIEW_THUMBS"><img src="https://lh3.googleusercontent.com/yi50g4HBwhK7dtxPPsr4UFVbYsIa2DEnKg4SKDfbSu0bmBwoUxdtTEvjYw1JjLQI1-6Lq8jMqc-rkZFecKwjYe9Y9TM" title="ULAPPH Photo Gallery" height=40 width=40></a>
<a href="/?q=qm#upload-music"><img src="/static/img/new-music.png" height=40 width=40 title="Upload New Music"></a>
<a href="/?q=qv#upload-video"><img src="/static/img/new-video.png" title="Upload New Video" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_MUSIC"><img src="/static/img/all-music.png" title="View All Music" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_MIDI"><img src="/static/img/all-midi.png" title="View All MIDI" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_VIDEO"><img src="/static/img/all-videos.png" title="View All Video" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_TEXT"><img src="/static/img/all-text.png" title="View All Text" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_IMG"><img src="/static/img/all-photos.png" title="View All Photos" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT"><img src="/static/img/recent.png" title="View Recent" height=40 width=40></a>
<a href="/media?FUNC_CODE=UMP"><img src="/static/img/music-player.png" title="Music Player" height=40 width=40></a>
<a href="/media?FUNC_CODE=UVP"><img src="/static/img/video-player.png" title="Video Player" height=40 width=40></a>
<hr-->
<div id="slides-area"></div>
<div id="slides-area-button"></div>
<div id="slides-copy-button"></div>
<hr>
Switch to Category: <select id="CATEGORY" onchange="selectCategory()"><option value="">Select</option></span></h1>
`
 
var iconsSettingsTemplateHeaderMDAdmin = template.Must(template.New("iconsSettingsTemplateHeaderMDAdmin").Parse(iconsSettingsTemplateHeaderHTMLMDAdmin))
 
const iconsSettingsTemplateHeaderHTMLMDAdmin = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Media Gallery::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script type="text/javascript" class="init">
 
$(document).ready(function() {
    $('#example').DataTable( {
        order: [[ 5, 'desc' ]]
    } );
} );
 
 
	</script>
	<script type="text/javascript" language="javascript" src="/static/js/copyToClipboard.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/copyToSlides.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/copyToUWM.js"></script>
	
	<!--[if IE]>
	  <script src="https://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
	<style>
	  article, aside, figure, footer, header, hgroup,
	  menu, nav, section { display: block; }
	  pre { margin: 0; }
	  pre.LineNumbers {
		float: left;
		padding-right:2px;
		border-right: solid 1px black;
		margin-right:7px;
	  }
	  div.CodeBox {
		border: solid 2px navy;
		padding:2px;
		background-color: #BFD1E4;
	  }
	
	</style>
	<link href="/static/css/thumbs-style.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="/static/js/thumbs-tooltip.js"></script>
	<script type="text/javascript" src="/static/js/thumbs-ajax.js"></script>
	<!--style>
		.slidingDiv {
		height:300px;
		background-color: #99CCFF;
		padding:20px;
		margin-top:10px;
		border-bottom:5px solid #3399FF;
		}
 
		.show_hide {
		display:none;
		}
	</style-->
	<!--script type="text/javascript">
 
	$(document).ready(function(){
 
	$(".slidingDiv").hide();
	$(".show_hide").show();
 
	$('.show_hide').click(function(){
	$(".slidingDiv").slideToggle();
	});
 
	});
 
	</script-->
	
</head>
 
<body>
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
<h3><font color="blue">Media Gallery</font></h3>
<!--a href="/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD"><img src="/static/img/uploader.png" title="Multiple Upload" height=40 width=40></a>
<a href="/?q=qi#upload-image"><img src="https://lh3.googleusercontent.com/eGqfd8VMV1FCKIaubhMkBDjMnU9lv1WQRu0iqzcAnqLJ60k4wrGp2opS1f-j-Oh0n7uUTBAHxTwSEeQi3efMLdMi1PbW" title="Upload Image" height=40 width=40></a>
<a href="/?q=qt#upload-text"><img src="https://lh3.googleusercontent.com/sGoo7YEJKoJ4JrkySxYzcplcZChb6VhOC_7dIkrF78KH0C3GgLvARzvDNUevjcBWZhCGcytW3myUvJoftkMnTseq0SVj" title="Upload Text File" height=40 width=40></a>
<a href="/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/HZeDnyMUi99is1fbWsnWnqGrkt-Pde01EHLz4ej-GSZ69S-N3jezP-FoNMuwXaSvv2ntr_cauLhKsIWtAEWOircVhg1PSg" title="New Text File" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=desktop0"><img src="https://lh3.googleusercontent.com/enc435Yme7GQbr07M44VEOnuOx_w012Uut0iq2NpVtJov6xMtwkZ1rVfgIUG_85ibqfCkefAVQakCTp0e_GxOk462sHjeA" title="View Personal Media" height=40 width=40></a>
<a href="/media?FUNC_CODE=VIEW_THUMBS"><img src="https://lh3.googleusercontent.com/yi50g4HBwhK7dtxPPsr4UFVbYsIa2DEnKg4SKDfbSu0bmBwoUxdtTEvjYw1JjLQI1-6Lq8jMqc-rkZFecKwjYe9Y9TM" title="ULAPPH Photo Gallery" height=40 width=40></a>
<a href="/?q=qm#upload-music"><img src="/static/img/new-music.png" height=40 width=40 title="Upload New Music"></a>
<a href="/?q=qv#upload-video"><img src="/static/img/new-video.png" title="Upload New Video" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_MUSIC"><img src="/static/img/all-music.png" title="View All Music" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_MIDI"><img src="/static/img/all-midi.png" title="View All MIDI" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_VIDEO"><img src="/static/img/all-videos.png" title="View All Video" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_TEXT"><img src="/static/img/all-text.png" title="View All Text" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_IMG"><img src="/static/img/all-photos.png" title="View All Photos" height=40 width=40></a>
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT"><img src="/static/img/recent.png" title="View Recent" height=40 width=40></a>
<a href="/media?FUNC_CODE=UMP"><img src="/static/img/music-player.png" title="Music Player" height=40 width=40></a>
<a href="/media?FUNC_CODE=UVP"><img src="/static/img/video-player.png" title="Video Player" height=40 width=40></a>
<hr-->
<div id="slides-area"></div>
<div id="slides-area-button"></div>
<div id="slides-copy-button"></div>
<hr>
Switch to Category: <select id="CATEGORY" onchange="selectCategory()"><option value="">Select</option></span></h1>
`
 
var iconsSettingsTemplateHeaderMDUAdmin = template.Must(template.New("iconsSettingsTemplateHeaderMDUAdmin").Parse(iconsSettingsTemplateHeaderHTMLMDUAdmin))
 
const iconsSettingsTemplateHeaderHTMLMDUAdmin = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Media Gallery::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.3.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<link rel="stylesheet" href="/static/lib/css/sol/sol.css">
	<script type="text/javascript" src="/static/lib/js/sol/sol.js"></script>
	<script type="text/javascript" class="init">
 
$(document).ready(function() {
	$('#example').dataTable();
} );
 
 
	</script>
	<!--[if IE]>
	  <script src="https://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
	<style>
	  article, aside, figure, footer, header, hgroup,
	  menu, nav, section { display: block; }
	  pre { margin: 0; }
	  pre.LineNumbers {
		float: left;
		padding-right:2px;
		border-right: solid 1px black;
		margin-right:7px;
	  }
	  div.CodeBox {
		border: solid 2px navy;
		padding:2px;
		background-color: #BFD1E4;
	  }
	
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/copyToClipboard.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/copyToSlides.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/copyToUWM.js"></script>
</head>
 
<body>
<h3><font color="blue">Admin Media</font></h3>
<a href="/infodb?DB_FUNC=MEDIA">Media Home</a> |
<a href="#update-media">Update Media</a> |
<a href="#delete-media">Delete Media</a> |
<a href="#shared-to2">Access List</a> |
<a href="/?q=qi#upload-image">Upload New Image</a> |
<a href="/?q=qt#upload-text">Upload Text File</a> |
<a href="/?q=qm#upload-music">Upload New Music</a> |
<a href="/?q=qv#upload-video">Upload New Video</a> |
<a href="/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0">New Text File</a> |
<a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT">View Recent</a>
<div id="slides-area"></div>
<div id="slides-area-button"></div>
<div id="slides-copy-button"></div>
<hr>
`
 
var iconsSettingsTemplateHeaderSLU = template.Must(template.New("iconsSettingsTemplateHeaderSLU").Parse(iconsSettingsTemplateHeaderHTMLSLU))
 
const iconsSettingsTemplateHeaderHTMLSLU = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Admin Slides::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script src="/static/js/jquery-1.11.1.min.js"></script>
	<link rel="stylesheet" href="/static/lib/css/sol/sol.css">
	<script type="text/javascript" src="/static/lib/js/sol/sol.js"></script>
	<script type="text/javascript" class="init">
		$(document).ready(function() {
			$('#example').dataTable();
		} );
	</script>
	<!--[if IE]>
	  <script src="https://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
	<style>
	  article, aside, figure, footer, header, hgroup,
	  menu, nav, section { display: block; }
	  pre { margin: 0; }
	  pre.LineNumbers {
		float: left;
		padding-right:2px;
		border-right: solid 1px black;
		margin-right:7px;
	  }
	  div.CodeBox {
		border: solid 2px navy;
		padding:2px;
		background-color: #BFD1E4;
	  }
	
	</style>
</head>
 
<body>
<h3><font color="blue">Admin Slides</font></h3>
<a href="/admin-slides">Slides Home</a> | <a href="/editor?DOC_ID={{.}}&SID=TDSSLIDE-{{.}}">Slide Editor</a> | <a href="#update-slides">Update Slide</a> | <a href="#shared-to">Access List </a> | <a href="#delete-slides">Delete Slide File</a> | <a href="#clear-cache">Clear Cache</a> | <a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID={{.}}&SID=TDSSLIDE-{{.}}">Preview Slide</a> | <a href="/media">Media Gallery</a> | <a href="/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWSLIDE&CATEGORY=desktop0">New Slide</a>
<hr>
`
 
var iconsSettingsTemplateHeaderSLA = template.Must(template.New("iconsSettingsTemplateHeaderSLA").Parse(iconsSettingsTemplateHeaderHTMLSLA))
 
const iconsSettingsTemplateHeaderHTMLSLA = `
<html>
 
<head>
	<meta http-equiv="Content-type" content="text/html; charset=us-ascii">
	<meta name="viewport" content="width=device-width,initial-scale=1">
 
	<title>Admin Articles::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<meta name="description" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://www.datatables.net/rss.xml">
	<link rel="stylesheet" type="text/css" href="/static/css/table-jquery.dataTables.css">
	<link rel="stylesheet" type="text/css" href="/static/css/table-site.css">
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<style type="text/css" class="init">
	</style>
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/jquery.dataTables.min.js"></script>
	<script type="text/javascript" language="javascript" src="/static/js/table-demo.js"></script>
	<script src="/static/js/jquery-1.11.1.min.js"></script>
	<link rel="stylesheet" href="/static/lib/css/sol/sol.css">
	<script type="text/javascript" src="/static/lib/js/sol/sol.js"></script>
	<script type="text/javascript" class="init">
	$(document).ready(function() {
		$('#example').dataTable();
	} );
	</script>
	<!--[if IE]>
	  <script src="https://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
	<style>
	  article, aside, figure, footer, header, hgroup,
	  menu, nav, section { display: block; }
	  pre { margin: 0; }
	  pre.LineNumbers {
		float: left;
		padding-right:2px;
		border-right: solid 1px black;
		margin-right:7px;
	  }
	  div.CodeBox {
		border: solid 2px navy;
		padding:2px;
		background-color: #BFD1E4;
	  }
	
	</style>
</head>
 
<body>
<h3><font color="blue">Admin Articles</font></h3>
<a href="/admin-articles">Articles Home</a> |
<a href="/editor?DOC_ID={{.}}&SID=TDSARTL-{{.}}">Article Editor</a> |
<a href="#update-articles">Update Article</a> |
<a href="#shared-to2">Access List</a> |
<a href="#delete-articles">Delete Article File</a> |
<a href="#clear-cache">Clear Cache</a> |
<a href="/articles?TYPE=ARTICLE&DOC_ID={{.}}&SID=TDSARTL-{{.}}">Preview Article</a> |
<a href="/media">Media Gallery</a> |
<a href="/infodb?DB_FUNC=ARTICLES&CATEGORY=&VIEW=RECENT">View Recent Articles</a>
<hr>
`
 
var iconsSettingsTemplateHeader2 = template.Must(template.New("iconsSettingsTemplateHeader2").Parse(iconsSettingsTemplateHeaderHTML2))
 
const iconsSettingsTemplateHeaderHTML2 = `
<input type="hidden" name="uid" value="{{.}}">
<table id="example" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col" class="cbc tct-selectall"></th>
		<th scope="col" class="id">
		ICON
		</th>
		<th scope="col">
		ICON_ID
		</th>
		<th scope="col">
		ICON_NAME
		</th>
		<th scope="col">
		URL_ADD
		</th>
		<th scope="col">
		URL_ID
		</th>
		<th scope="col">
		DESKTOP
		</th>
		<th scope="col">
		IMG_SRC
		</th>
	</tr>
</thead>
 
<tfoot>
	<tr>
		<td colspan="6">
		<input type="submit"
							 name="updateIcons" value="Update Settings" class="goog-button"
							 onclick="return confirm('Are you sure you want to update toolbar icons?');">
 
		<input type="submit"
							 name="deleteIcons" value="Delete Icons" class="goog-button"
							 onclick="return confirm('Are you sure you want to delete icons?');">
 
		<input type="submit"
							 name="shareIcons" value="Share Icons" class="goog-button"
							 onclick="return confirm('Are you sure you want to share icons?');">
		</td>
	</tr>
</tfoot>
<tbody>
`
var mediaSimpleGalHeaderA = template.Must(template.New("mediaSimpleGalHeaderA").Parse(mediaSimpleGal1A))
const mediaSimpleGal1A = `
<!DOCTYPE html>
<html lang="en">
    <head>
		<meta charset="UTF-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Photo Gallery::www.ulapph.com - ULAPPH Cloud Desktop</title>
        <meta name="description" content="ULAPPH Cloud Desktop" />
        <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />

        <meta name="author" content="Codrops"/>
        <link rel="shortcut icon" href="/static/img/favicon.ico"/>
        <link rel="stylesheet" type="text/css" href="/static/css/style-gamma.css"/>
		<script src="/static/js/modernizr.custom.70736.js"></script>
		<noscript><link rel="stylesheet" type="text/css" href="/static/css/noJS-gamma.css"/></noscript>
		<!--[if lte IE 7]><style>.main{display:none;} .support-note .note-ie{display:block;}</style><![endif]-->
    </head>
    <body>
        <div class="container">
			<div class="main">
				<header class="clearfix">
					<h1>{{.}}</h1>
`
var mediaSimpleGalHeaderB = template.Must(template.New("mediaSimpleGalHeaderB").Parse(mediaSimpleGal1B))
const mediaSimpleGal1B = `
				</header>
				<div class="gamma-container gamma-loading" id="gamma-container">
					<ul class="gamma-gallery">
`
var mediaSimpleGalFooter = template.Must(template.New("mediaSimpleGalFooter").Parse(mediaSimpleGal3))
const mediaSimpleGal3 = `
					</ul>
					<div class="gamma-overlay"></div>
				</div>
			</div><!--/main-->
		</div>
        <script>
            var urlParams;
            var match,
                    pl     = /\+/g,  // Regex for replacing addition symbol with a space
                    search = /([^&=]+)=?([^&]*)/g,
                    decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
                    query  = window.location.search.substring(1);

            urlParams = {};
            while (match = search.exec(query))
               urlParams[decode(match[1])] = decode(match[2]);
            if (urlParams["UID"] != "" && urlParams["uid"] != "") {
                if (urlParams["FUNC_CODE"] == "VIEW_THUMBS" && urlParams["perBatch"] == "yes") {
                   startBatch = urlParams["startBatch"];
                   endBatch = urlParams["endBatch"];
                   batchNum = urlParams["batchNum"];
                   nextBatchNum = parseInt(batchNum) + 1;
                   prevBatchNum = parseInt(batchNum) - 1;
                   startBatchPrev = parseInt(startBatch) - 50;
                   endBatchPrev = startBatch;
                   startBatchNext = parseInt(endBatch);
                   endBatchNext = startBatchNext + 50;
                   thisPrevLink = "/media?FUNC_CODE=VIEW_THUMBS&UID=" + urlParams["UID"] + "&uid=" + urlParams["uid"]  + "&perBatch=yes&startBatch=" + startBatchPrev + "&endBatch=" + endBatchPrev + "&batchNum=" + prevBatchNum +"&filter=" + urlParams["filter"];
                   thisNextLink = "/media?FUNC_CODE=VIEW_THUMBS&UID=" + urlParams["UID"] + "&uid=" + urlParams["uid"]  + "&perBatch=yes&startBatch=" + startBatchNext + "&endBatch=" + endBatchNext + "&batchNum=" + nextBatchNum +"&filter=" + urlParams["filter"];
                   document.getElementById('prevLink').href = thisPrevLink;
                   document.getElementById('nextLink').href = thisNextLink;
                }
            }
        </script>
		<script src="/static/js/jquery.min.js"></script>
		<script src="/static/js/jquery.masonry.min.js"></script>
		<script src="/static/js/jquery.history.js"></script>
		<script src="/static/js/js-url.min.js"></script>
		<script src="/static/js/jquerypp.custom.js"></script>
		<script src="/static/js/gamma.js"></script>
		<script src="/static/js/gamma-settings.js"></script>
		<!--div>{{.}}</a-->
	</body>
</html>
`
var iconsSettingsTemplateSavedToolbars = template.Must(template.New("iconsSettingsTemplateSavedToolbars").Parse(iconsSettingsTemplateSavedToolbarsMenu))
const iconsSettingsTemplateSavedToolbarsMenu = `
<hr>
<h3>You may also reload previous desktop0 icons:</a></h3>
<font color=red>You can save up to {{.}} sets of icons which you can reload anytime in your desktop0.</font>
<hr>
<table id="example2" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col" class="cbc tct-selectall">ACTION</th>
		<th scope="col">
		DESCRIPTION
		</th>
		<th scope="col">
		TIMESTAMP
		</th>
		<th scope="col">
		ICONS
		</th>
	</tr>
</thead>
<tbody>
`
 
var iconsSettingsTemplateUrlFetch = template.Must(template.New("iconsSettingsTemplateUrlFetch").Parse(iconsSettingsTemplateUrlFetchList))
 
const iconsSettingsTemplateUrlFetchList = `
<div class="success">Automatic Website Monitoring {{.}}:
	<form action="/tools?t=URL_FETCH" method="POST" enctype="multipart/form-data">
	<input type="submit" name="FUNC" value="Edit URL List">
	<input type="submit" name="FUNC" value="Run Fetcher Now">
	</form>
</div>
 
`
 
var iconsSettingsTemplateHeader2ICONS = template.Must(template.New("iconsSettingsTemplateHeader2ICONS").Parse(iconsSettingsTemplateHeaderHTML2Icons))
 
const iconsSettingsTemplateHeaderHTML2Icons = `
<input type="hidden" name="uid" value="{{.}}">
<table id="example" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col" class="cbc tct-selectall">ACTION</th>
		<th scope="col" class="id">
		ICON
		</th>
		<th scope="col">
		ICON_ID
		</th>
		<th scope="col">
		ICON_NAME
		</th>
		<th scope="col">
		URL_ADD
		</th>
		<th scope="col">
		URL_ID
		</th>
		<th scope="col">
		DESKTOP
		</th>
		<th scope="col">
		IMG_SRC
		</th>
	</tr>
</thead>
<tbody>
`
 
var htmlFacebookLikes = template.Must(template.New("htmlFacebookLikes").Parse(htmlFacebookLikesA))
 
const htmlFacebookLikesA = `
<div class="fb-like" data-href="{{.STR_FILLER1}}slides?TYPE=SLIDE&amp;amp;DOC_ID={{.STR_FILLER2}}&amp;amp;SID=TDSSLIDE-{{.STR_FILLER2}}" data-layout="standard" data-action="like" data-show-faces="true" data-share="true"></div>
</body>
</html>
`
 
var htmlFacebookComments = template.Must(template.New("htmlFacebookComments").Parse(htmlFacebookComsA))
 
const htmlFacebookComsA = `
<div class="fb-comments" data-href="{{.STR_FILLER1}}slides?TYPE=SLIDE&amp;amp;DOC_ID={{.STR_FILLER2}}&amp;amp;SID=TDSSLIDE-{{.STR_FILLER2}}" data-numposts="5"></div>
</body>
</html>
`
 
var peopleSettingsTemplateHeader2PEOPLE = template.Must(template.New("peopleSettingsTemplateHeader2PEOPLE").Parse(iconsSettingsTemplateHeaderHTML2People))
 
const iconsSettingsTemplateHeaderHTML2People = `
<script src="https://apis.google.com/static/js/platform.js" async defer></script>
<h3>[ <a href="/people?PEOPLE_FUNC=SLIDE-VIEW">Slides View</a> ] [ Hello <a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.}}&SID={{.}}">{{.}}</a>! ]</h3>
<input type="hidden" name="uid" value="{{.}}">
<table id="example" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col" class="cbc tct-selectall">GB_MSG</th>
		<th scope="col" class="id">
		PICTURE
		</th>
		<th scope="col">
		UID
		</th>
		<th scope="col">
		BIRTH_DAY
		</th>
		<th scope="col">
		ELEM_SCHOOL
		</th>
		<th scope="col">
		HIGH_SCHOOL
		</th>
		<th scope="col">
		COLLEGE
		</th>
		<th scope="col">	
		POST_GRAD
		</th>
		<th scope="col">	
		PROFESSION
		</th>
		<th scope="col">	
		COMPANY
		</th>
		<th scope="col">	
		CONTACT_NUM	
		</th>
		<th scope="col">
		SOCIAL_1
		</th>
		<th scope="col">	
		SOCIAL_2
		</th>
		<th scope="col">	
		SOCIAL_3
		</th>
		<th scope="col">	
		COUNTRY
		</th>	
		<th scope="col">
		REGION
		</th>
		<th scope="col">	
		CITY
		</th>
		<th scope="col">	
		MUNICIPALITY
		</th>
		<th scope="col">	
		BARANGAY
		</th>
		<th scope="col">	
		SUBDIVISION
		</th>
		<th scope="col">	
		GOVT ID
		</th>
		<th scope="col">	
		ID_NUMBER
		</th>
		<th scope="col">	
		I_HAVE_TEXT
		</th>
		<th scope="col">	
		I_NEED_TEXT
		</th>
		<th scope="col">	
		BADGE
		</th>
		<th scope="col">	
		CRED_PTS
		</th>
		<th scope="col">	
		POS_VOTES
		</th>
		<th scope="col">	
		NEG_VOTES
		</th>
		<th scope="col">	
		LIFE_RATING
		</th>
		<th scope="col">	
		FILLER_1
		</th>
		<th scope="col">	
		FILLER_2
		</th>
		<th scope="col">	
		FILLER_3
		</th>
 
	</tr>
</thead>
<tbody>
`
 
var peopleSettingsTemplateHeader2PEOPLEAdmin = template.Must(template.New("peopleSettingsTemplateHeader2PEOPLEAdmin").Parse(iconsSettingsTemplateHeaderHTML2PeopleAdmin))
 
const iconsSettingsTemplateHeaderHTML2PeopleAdmin = `
<h3>Hello, {{.}}!</h3>
<input type="hidden" name="uid" value="{{.}}">
<table id="example" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col" class="cbc tct-selectall">STATUS</th>
		<th scope="col" class="id">
		PICTURE
		</th>
		<th scope="col">
		UID
		</th>
		<th scope="col">
		BIRTH_DAY
		</th>
		<th scope="col">
		ELEM_SCHOOL
		</th>
		<th scope="col">
		HIGH_SCHOOL
		</th>
		<th scope="col">
		COLLEGE
		</th>
		<th scope="col">	
		POST_GRAD
		</th>
		<th scope="col">	
		PROFESSION
		</th>
		<th scope="col">	
		COMPANY
		</th>
		<th scope="col">	
		CONTACT_NUM	
		</th>
		<th scope="col">
		SOCIAL_1
		</th>
		<th scope="col">	
		SOCIAL_2
		</th>
		<th scope="col">	
		SOCIAL_3
		</th>
		<th scope="col">	
		COUNTRY
		</th>	
		<th scope="col">
		REGION
		</th>
		<th scope="col">	
		CITY
		</th>
		<th scope="col">	
		MUNICIPALITY
		</th>
		<th scope="col">	
		BARANGAY
		</th>
		<th scope="col">	
		SUBDIVISION
		</th>
		<th scope="col">	
		GOVT ID
		</th>
		<th scope="col">	
		ID_NUMBER
		</th>
		<th scope="col">	
		I_HAVE_TEXT
		</th>
		<th scope="col">	
		I_NEED_TEXT
		</th>
		<th scope="col">	
		BADGE
		</th>
		<th scope="col">	
		CRED_PTS
		</th>
		<th scope="col">	
		POS_VOTES
		</th>
		<th scope="col">	
		NEG_VOTES
		</th>
		<th scope="col">	
		LIFE_RATING
		</th>
		<th scope="col">	
		FILLER_1
		</th>
		<th scope="col">	
		FILLER_2
		</th>
		<th scope="col">	
		FILLER_3
		</th>
 
	</tr>
</thead>
<tbody>
`
 
var infoDBTemplateHeaderCols = template.Must(template.New("infoDBTemplateHeaderCols").Parse(infoDBTemplateHeaderHTMLCols))
 
const infoDBTemplateHeaderHTMLCols = `
<input type="hidden" name="uid" value="{{.}}">
<table id="example" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col" class="cbc tct-selectall">DB</th>
		<th scope="col" class="id">
		PUB_STAT
		</th>
		<th scope="col">
		POSTED_BY
		</th>
		<th scope="col">
		LAST_UPDATED
		</th>
		<th scope="col">
		PICTURE_1
		</th>
		<th scope="col">
		PICTURE_1_CAP
		</th>
		<th scope="col">
		PICTURE_2
		</th>
		<th scope="col">	
		PICTURE_2_CAP
		</th>
		<th scope="col">	
		PICTURE_3
		</th>
		<th scope="col">	
		PICTURE_3_CAP
		</th>
		<th scope="col">	
		COUNTRY
		</th>	
		<th scope="col">
		REGION
		</th>
		<th scope="col">
		PROVINCE
		</th>
		<th scope="col">	
		CITY
		</th>
		<th scope="col">	
		MUNICIPALITY
		</th>
		<th scope="col">	
		BARANGAY
		</th>
		<th scope="col">	
		SUBDIVISION
		</th>
		<th scope="col">	
		INFO_TYPE
		</th>
		<th scope="col">			
		INFO_SUB_TYPE	
		</th>
		<th scope="col">	
		INFO_TITLE
		</th>
		<th scope="col">			
		INFO_DESC
		</th>
		<th scope="col">			
		INFO_PRICE
		</th>
		<th scope="col">			
		INFO_HOURS
		</th>
		<th scope="col">			
		INFO_URL
		</th>
		<th scope="col">			
		INFO_POC
		</th>
		<th scope="col">			
		INFO_PHONE
		</th>
		<th scope="col">			
		INFO_EMAIL
		</th>
		<th scope="col">			
		INFO_COMMENTS
		</th>
		<th scope="col">			
		INFO_LIKES
		</th>
		<th scope="col">			
		LIKED_BY
		</th>
		<th scope="col">			
		INFO_DLIKES
		</th>
		<th scope="col">			
		DLIKED_BY
		</th>
		<th scope="col">			
		MAP_LOC
		</th>
	</tr>
</thead>
<tbody>
`
 
var iconsSettingsTemplateHeader2ADS = template.Must(template.New("iconsSettingsTemplateHeader2ADS").Parse(iconsSettingsTemplateHeaderHTML2Ads))
 
const iconsSettingsTemplateHeaderHTML2Ads = `
<p>
<h3>List of Advertisements: </h3>
<hr>
<input type="hidden" name="uid" value="{{.}}">
<table id="example2" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col" class="cbc tct-selectall"></th>
		<th scope="col" class="id">
		ADS_IMG
		</th>
		<th scope="col">
		ADS_ID
		</th>
		<th scope="col">
		ADS_PUB_ID
		</th>
		<th scope="col">
		ADS_STATUS
		</th>
		<th scope="col">
		ADS_TITLE
		</th>
		<th scope="col">
		UPLOAD_BY
		</th>
		<th scope="col">
		ADS_URL
		</th>
		<th scope="col">
		UPLOAD_DATE
		</th>
		<th scope="col">
		CATEGORY
		</th>
		<th scope="col">
		ADS_IMG
		</th>
	</tr>
</thead>
<tbody>
															
 
`
 
var iconsSettingsTemplateTable = template.Must(template.New("irect(w, r, URL_ADD_D, htt").Parse(iconsSettingsTemplateTableHTML))
 
const iconsSettingsTemplateTableHTML = `
    {{range .}}
<tr>
<td class="cbc">
<input type="checkbox" name="icons" id="icon{{.ICON_ID}}"/>
</td>
<td class="id">
<img id="icon{{.ICON_ID}}src" src="{{.IMG_SRC}}" title="{{.ICON_NAME}}" width=35 height=35/>
</td>
<td data-order="{{.ICON_ID}}">
{{.ICON_ID}}
</td>
<td data-order="{{.ICON_NAME}}">
{{.ICON_NAME}}
<br>
<a href="/admin-icons?EditIconFunc=EditIcon&myIcon={{.ICON_ID}}">Edit</a>
</td>
<td data-search="{{.URL_ADD}}">
<a href="{{.URL_ADD}}">
{{.URL_ADD}}
</a>
</td>
<td data-order="{{.URL_ID}}">
{{.URL_ID}}
</td>
<td data-order="{{.DESKTOP}}">
{{.DESKTOP}}
</td>
<td>
{{.IMG_SRC}}
</td>
</tr>
    {{end}}
`
 
var iconsSettingsTemplateTableSTB = template.Must(template.New("iconsSettingsTemplateTableSTB").Parse(iconsSettingsTemplateTableHTMLSTB))
 
const iconsSettingsTemplateTableHTMLSTB = `
    {{range .}}
<tr>
<td class="cbc">
{{if eq .NUM_VAL 0}}
<a href="/settings-display-screen?loadIcons=UpdateDesc&desktop-name=desktop0&NUM_VAL={{.NUM_VAL}}&uid={{.USER}}"><img src="https://lh3.googleusercontent.com/qg41Q5MfDwxq3rvMiN3CQnB3sN-zcHoouUMTkf5ZlxgQbYyQPxFMFIzlccdiGdh_cSCGEqOLOAW2IuS1IldwXJd5iU8B" title="View" height=40 width=40></a>
{{else}}
<a href="/settings-display-screen?loadIcons=SetDefault&desktop-name=desktop0&NUM_VAL={{.NUM_VAL}}&CFG_DESC={{.CFG_DESC}}&uid={{.USER}}&LOAD_DATA={{.TXT_VAL}}"><img src="https://lh3.googleusercontent.com/uAOUeyLEikeOTh3wfDeZ_Yp6newtluq0Pm9it30XVF43I0os67urjAfNSgu9NykhrokqgKlSmcUoIjPX58d6hPbe_3o" title="Set Default" height=40 width=40></a><a href="/settings-display-screen?loadIcons=UpdateDesc&desktop-name=desktop0&NUM_VAL={{.NUM_VAL}}&uid={{.USER}}"><img src="https://lh3.googleusercontent.com/qg41Q5MfDwxq3rvMiN3CQnB3sN-zcHoouUMTkf5ZlxgQbYyQPxFMFIzlccdiGdh_cSCGEqOLOAW2IuS1IldwXJd5iU8B" title="View" height=40 width=40></a></a><a href="/settings-display-screen?loadIcons=DeleteSet&desktop-name=desktop0&NUM_VAL={{.NUM_VAL}}&uid={{.USER}}&TXT_VAL={{.TXT_VAL}}"><img src="https://lh3.googleusercontent.com/zE4CvBfujLgUGj021nvIsqu1n7V9acU2-rJyrGkRs9C7HGCTImE6WD5qH-fiEUNEKvXi3DzV6rUUvXO_kVJaqzpqqEWr" title="Delete" height=40 width=40></a></a>
{{end}}
</td>
<td data-order="{{.CFG_DESC}}">
{{.CFG_DESC}}
</td>
<td data-order="{{.NUM_VAL}}">
{{.NUM_VAL}}
</td>
<td data-order="{{.TXT_VAL}}">
{{.TXT_VAL}}
</td>
</tr>
    {{end}}
`
 
var iconsSettingsTemplateTableSTB120 = template.Must(template.New("iconsSettingsTemplateTableSTB120").Parse(iconsSettingsTemplateTableHTMLSTB120))
 
const iconsSettingsTemplateTableHTMLSTB120 = `
    {{range .}}
<tr>
<td class="cbc">
{{if eq .NUM_VAL 0}}
<a href="/settings-display-screen?loadIcons=UpdateDesc&desktop-name={{.USER}}&NUM_VAL={{.NUM_VAL}}&uid={{.USER}}"><img src="https://lh3.googleusercontent.com/qg41Q5MfDwxq3rvMiN3CQnB3sN-zcHoouUMTkf5ZlxgQbYyQPxFMFIzlccdiGdh_cSCGEqOLOAW2IuS1IldwXJd5iU8B" title="View" height=40 width=40></a>
{{else}}
<a href="/settings-display-screen?loadIcons=SetDefault&desktop-name={{.USER}}&NUM_VAL={{.NUM_VAL}}&CFG_DESC={{.CFG_DESC}}&uid={{.USER}}&LOAD_DATA={{.TXT_VAL}}"><img src="https://lh3.googleusercontent.com/uAOUeyLEikeOTh3wfDeZ_Yp6newtluq0Pm9it30XVF43I0os67urjAfNSgu9NykhrokqgKlSmcUoIjPX58d6hPbe_3o" title="Set Default" height=40 width=40></a><a href="/settings-display-screen?loadIcons=UpdateDesc&desktop-name={{.USER}}&NUM_VAL={{.NUM_VAL}}&uid={{.USER}}"><img src="https://lh3.googleusercontent.com/qg41Q5MfDwxq3rvMiN3CQnB3sN-zcHoouUMTkf5ZlxgQbYyQPxFMFIzlccdiGdh_cSCGEqOLOAW2IuS1IldwXJd5iU8B" title="View" height=40 width=40></a><a href="/settings-display-screen?loadIcons=DeleteSet&desktop-name={{.USER}}&NUM_VAL={{.NUM_VAL}}&uid={{.USER}}&TXT_VAL={{.TXT_VAL}}"><img src="https://lh3.googleusercontent.com/zE4CvBfujLgUGj021nvIsqu1n7V9acU2-rJyrGkRs9C7HGCTImE6WD5qH-fiEUNEKvXi3DzV6rUUvXO_kVJaqzpqqEWr" title="Delete" height=40 width=40></a>
{{end}}
</td>
<td data-order="{{.CFG_DESC}}">
{{.CFG_DESC}}
</td>
<td data-order="{{.NUM_VAL}}">
{{.NUM_VAL}}
</td>
<td data-order="{{.TXT_VAL}}">
{{.TXT_VAL}}
</td>
</tr>
    {{end}}
`
 
var iconsSettingsTemplateTableEdit = template.Must(template.New("iconsSettingsTemplateTableEdit").Parse(iconsSettingsTemplateTableEditHTML))
 
const iconsSettingsTemplateTableEditHTML = `
    {{range .}}
<tr>
<td class="cbc">
<a href="/admin-icons?EditIconFunc=EditIcon&myIcon={{.ICON_ID}}">Edit</a> | <a href="#" onclick="copyToUWM('{{.URL_ADD}}','{{.ICON_NAME}}','TDSICONS-{{.ICON_ID}}')">UWM Me!</a>
</td>
<td class="id">
<img src="{{.IMG_SRC}}" title="{{.ICON_NAME}}" width=35 height=35/>
</td>
<td data-order="{{.ICON_ID}}">
{{.ICON_ID}}
</td>
<td data-order="{{.ICON_NAME}}">
{{.ICON_NAME}}
</td>
<td data-search="{{.URL_ADD}}">
<a href="{{.URL_ADD}}">
{{.URL_ADD}}
</a>
</td>
<td data-order="{{.URL_ID}}">
{{.URL_ID}}
</td>
<td data-order="{{.DESKTOP}}">
{{.DESKTOP}}
</td>
<td>
{{.IMG_SRC}}
</td>
</tr>
    {{end}}
`
 
var peopleSettingsTemplateTablePeople = template.Must(template.New("peopleSettingsTemplateTablePeople").Parse(peopleSettingsTemplateTablePeopleHTML))
 
const peopleSettingsTemplateTablePeopleHTML = `
    {{range .}}
<tr>
<td class="cbc">
<a href="/guestbook?UID={{.UID}}"><img src="/static/img/guestbook.png" width=40 height=40/></img></a><g:hangout render="createhangout" invites="[{ id : '{{.UID}}', invite_type : 'EMAIL' }]" widget_size="72"></g:hangout>
</td>
<td class="id">
<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.UID}}&SID={{.UID}}"></img><img src="{{.PICTURE}}" width=40 height=40></img></a><img src="/static/img/flags/{{.COUNTRY}}.gif" width=48 height=30>
</td>
<td data-order="{{.UID}}">
{{.UID}}
</td>
<td data-order="{{.BIRTH_DAY}}">
{{.BIRTH_DAY}}
</td>
<td data-order="{{.ELEM_SCHOOL}}">
{{.ELEM_SCHOOL}}
</td>
<td data-search="{{.HIGH_SCHOOL}}">
{{.HIGH_SCHOOL}}
</td>
<td data-order="{{.COLLEGE}}">
{{.COLLEGE}}
</td>
<td data-order="{{.POST_GRAD}}">
{{.POST_GRAD}}
</td>
<td data-order="{{.PROFESSION}}">
{{.PROFESSION}}
</td>
<td data-order="{{.COMPANY}}">
{{.COMPANY}}
</td>
<td data-order="{{.CONTACT_NUM}}">
{{.CONTACT_NUM}}
</td>
<td data-order="{{.SOCIAL_1}}">
{{.SOCIAL_1}}
</td>
<td data-order="{{.SOCIAL_2}}">
{{.SOCIAL_2}}
</td>
<td data-order="{{.SOCIAL_3}}">
{{.SOCIAL_3}}
</td>
<td data-order="{{.COUNTRY}}">
{{.COUNTRY}}
</td>	
<td data-order="{{.REGION}}">
{{.REGION}}
</td>
<td data-order="{{.CITY}}">
{{.CITY}}
</td>	
<td data-order="{{.MUNICIPALITY}}">
{{.MUNICIPALITY}}
</td>		
<td data-order="{{.BARANGAY}}">
{{.BARANGAY}}
</td>	
<td data-order="{{.SUBDIVISION}}">
{{.SUBDIVISION}}
</td>	
<td data-order="{{.REG_VOTER}}">
{{.REG_VOTER}}
</td>	
<td data-order="{{.ID_NUMBER}}">
{{.ID_NUMBER}}
</td>	
<td data-order="{{.I_HAVE_TEXT}}">
  <label class="collapse" for="{{.UID}}_1">I_HAVE_TEXT...</label>
  <input id="{{.UID}}_1" type="checkbox">
  <div>{{.I_HAVE_TEXT}}</div>
</td>	
<td data-order="{{.I_NEED_TEXT}}">
<label class="collapse" for="{{.UID}}_2">I_NEED_TEXT...</label>
  <input id="{{.UID}}_2" type="checkbox">
  <div>{{.I_NEED_TEXT}}</div>
</td>	
<td data-order="{{.BADGE}}">
{{.BADGE}}
</td>	
<td data-order="{{.CRED_PTS}}">
{{.CRED_PTS}}
</td>	
<td data-order="{{.POS_VOTES}}">
{{.POS_VOTES}}
</td>	
<td data-order="{{.NEG_VOTES}}">
{{.NEG_VOTES}}
</td>	
<td data-order="{{.LIFE_RATING}}">
{{.LIFE_RATING}}
</td>	
<td data-order="{{.FILLER_1}}">
{{.FILLER_1}}
</td>	
<td data-order="{{.FILLER_2}}">
{{.FILLER_2}}
</td>		
<td data-order="{{.FILLER_3}}">
{{.FILLER_3}}
</td>
 
</tr>
    {{end}}
`
 
var peopleDirectoryList = template.Must(template.New("peopleDirectoryList").Parse(peopleDirectoryListHTML))
 
const peopleDirectoryListHTML = `
    {{range .}}
<tr>
<td data-order="status">
Online
</td>
<td class="cbc">
<a href="https://www.ulapph.com/guestbook?UID={{.UID}}"><img src="/static/img/guestbook.png" width=40 height=40/></img></a><g:hangout render="createhangout" invites="[{ id : '{{.UID}}', invite_type : 'EMAIL' }]" widget_size="72"></g:hangout>
</td>
<td class="id">
<a href="https://www.ulapph.com/people-edit?EditPeopleFunc=EditPeople&UID={{.UID}}&SID={{.UID}}"></img><img src="{{.PICTURE}}" width=40 height=40></img></a><img src="/static/img/flags/{{.COUNTRY}}.gif" width=48 height=30>
</td>
<td data-order="{{.UID}}">
<a href="https://www.ulapph.com/chat?CHAT_FUNC=newChatRoom&INVITE={{.UID}}"><img src="/static/img/chat.png" title="chat"  width=40 height=40></img></a> {{.UID}}
</td>
<td data-order="https://www.ulapph.com">
<a href="https://www.ulapph.com">https://www.ulapph.com</a>
</td>
<td data-order="{{.PROFESSION}}">
{{.PROFESSION}}
</td>
<td data-order="{{.COMPANY}}">
{{.COMPANY}}
</td>
<td data-order="{{.CONTACT_NUM}}">
{{.CONTACT_NUM}}
</td>
<td data-order="{{.SOCIAL_1}}">
{{.SOCIAL_1}}
</td>
<td data-order="{{.SOCIAL_2}}">
{{.SOCIAL_2}}
</td>
<td data-order="{{.SOCIAL_3}}">
{{.SOCIAL_3}}
</td>
<td data-order="{{.COUNTRY}}">
{{.COUNTRY}}
</td>	
<td data-order="{{.REGION}}">
{{.REGION}}
</td>
<td data-order="{{.CITY}}">
{{.CITY}}
</td>	
<td data-order="{{.I_HAVE_TEXT}}">
  <label class="collapse" for="{{.UID}}_1">{{if ne .I_HAVE_TEXT ""}}I have...{{end}}</label>
  <input id="{{.UID}}_1" type="checkbox">
  <div>{{.I_HAVE_TEXT}}</div>
</td>	
<td data-order="{{.I_NEED_TEXT}}">
<label class="collapse" for="{{.UID}}_2">{{if ne .I_HAVE_TEXT ""}}I need...{{end}}</label>
  <input id="{{.UID}}_2" type="checkbox">
  <div>{{.I_NEED_TEXT}}</div>
</td>	
</tr>
    {{end}}
`
 
var peopleSettingsTemplateTablePeopleAdmin = template.Must(template.New("peopleSettingsTemplateTablePeopleAdmin").Parse(peopleSettingsTemplateTablePeopleHTMLAdmin))
 
const peopleSettingsTemplateTablePeopleHTMLAdmin = `
    {{range .}}
<tr>
<td class="cbc">
ADMIN
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-BLOCK&USER={{.UID}}"><img src="/static/img/blockuser.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-DELETE&USER={{.UID}}"><img src="/static/img/delete-user.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-ACCOUNT&USER={{.UID}}#account"><img src="/static/img/settings.png" width=40 height=40/></img></a>
</td>
<td class="id">
<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.UID}}&SID={{.UID}}"><img src="{{.PICTURE}}" width=40 height=40></img></a>
</td>
<td data-order="{{.UID}}">
{{.UID}}
</td>
<td data-order="{{.BIRTH_DAY}}">
{{.BIRTH_DAY}}
</td>
<td data-order="{{.ELEM_SCHOOL}}">
{{.ELEM_SCHOOL}}
</td>
<td data-search="{{.HIGH_SCHOOL}}">
{{.HIGH_SCHOOL}}
</td>
<td data-order="{{.COLLEGE}}">
{{.COLLEGE}}
</td>
<td data-order="{{.POST_GRAD}}">
{{.POST_GRAD}}
</td>
<td data-order="{{.PROFESSION}}">
{{.PROFESSION}}
</td>
<td data-order="{{.COMPANY}}">
{{.COMPANY}}
</td>
<td data-order="{{.CONTACT_NUM}}">
{{.CONTACT_NUM}}
</td>
<td data-order="{{.SOCIAL_1}}">
{{.SOCIAL_1}}
</td>
<td data-order="{{.SOCIAL_2}}">
{{.SOCIAL_2}}
</td>
<td data-order="{{.SOCIAL_3}}">
{{.SOCIAL_3}}
</td>
<td data-order="{{.COUNTRY}}">
{{.COUNTRY}}
</td>	
<td data-order="{{.REGION}}">
{{.REGION}}
</td>
<td data-order="{{.CITY}}">
{{.CITY}}
</td>	
<td data-order="{{.MUNICIPALITY}}">
{{.MUNICIPALITY}}
</td>		
<td data-order="{{.BARANGAY}}">
{{.BARANGAY}}
</td>	
<td data-order="{{.SUBDIVISION}}">
{{.SUBDIVISION}}
</td>	
<td data-order="{{.REG_VOTER}}">
{{.REG_VOTER}}
</td>	
<td data-order="{{.ID_NUMBER}}">
{{.ID_NUMBER}}
</td>	
<td data-order="{{.I_HAVE_TEXT}}">
{{.I_HAVE_TEXT}}
</td>	
<td data-order="{{.I_NEED_TEXT}}">
{{.I_NEED_TEXT}}
</td>	
<td data-order="{{.BADGE}}">
{{.BADGE}}
</td>	
<td data-order="{{.CRED_PTS}}">
{{.CRED_PTS}}
</td>	
<td data-order="{{.POS_VOTES}}">
{{.POS_VOTES}}
</td>	
<td data-order="{{.NEG_VOTES}}">
{{.NEG_VOTES}}
</td>	
<td data-order="{{.LIFE_RATING}}">
{{.LIFE_RATING}}
</td>	
<td data-order="{{.FILLER_1}}">
{{.FILLER_1}}
</td>	
<td data-order="{{.FILLER_2}}">
{{.FILLER_2}}
</td>		
<td data-order="{{.FILLER_3}}">
{{.FILLER_3}}
</td>
 
</tr>
    {{end}}
`

var peopleSettingsTemplateTablePeopleNonAdmin = template.Must(template.New("peopleSettingsTemplateTablePeopleNonAdmin").Parse(peopleSettingsTemplateTablePeopleHTMLNonAdmin))
 
const peopleSettingsTemplateTablePeopleHTMLNonAdmin = `
    {{range .}}
<tr>
<td class="cbc">
USER
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-BLOCK&USER={{.UID}}"><img src="/static/img/blockuser.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-DELETE&USER={{.UID}}"><img src="/static/img/delete-user.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-ACCOUNT&USER={{.UID}}#account"><img src="/static/img/settings.png" width=40 height=40/></img></a>
</td>
<td class="id">
<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.UID}}&SID={{.UID}}"><img src="{{.PICTURE}}" width=40 height=40></img></a>
</td>
<td data-order="{{.UID}}">
{{.UID}}
</td>
<td data-order="{{.BIRTH_DAY}}">
{{.BIRTH_DAY}}
</td>
<td data-order="{{.ELEM_SCHOOL}}">
{{.ELEM_SCHOOL}}
</td>
<td data-search="{{.HIGH_SCHOOL}}">
{{.HIGH_SCHOOL}}
</td>
<td data-order="{{.COLLEGE}}">
{{.COLLEGE}}
</td>
<td data-order="{{.POST_GRAD}}">
{{.POST_GRAD}}
</td>
<td data-order="{{.PROFESSION}}">
{{.PROFESSION}}
</td>
<td data-order="{{.COMPANY}}">
{{.COMPANY}}
</td>
<td data-order="{{.CONTACT_NUM}}">
{{.CONTACT_NUM}}
</td>
<td data-order="{{.SOCIAL_1}}">
{{.SOCIAL_1}}
</td>
<td data-order="{{.SOCIAL_2}}">
{{.SOCIAL_2}}
</td>
<td data-order="{{.SOCIAL_3}}">
{{.SOCIAL_3}}
</td>
<td data-order="{{.COUNTRY}}">
{{.COUNTRY}}
</td>	
<td data-order="{{.REGION}}">
{{.REGION}}
</td>
<td data-order="{{.CITY}}">
{{.CITY}}
</td>	
<td data-order="{{.MUNICIPALITY}}">
{{.MUNICIPALITY}}
</td>		
<td data-order="{{.BARANGAY}}">
{{.BARANGAY}}
</td>	
<td data-order="{{.SUBDIVISION}}">
{{.SUBDIVISION}}
</td>	
<td data-order="{{.REG_VOTER}}">
{{.REG_VOTER}}
</td>	
<td data-order="{{.ID_NUMBER}}">
{{.ID_NUMBER}}
</td>	
<td data-order="{{.I_HAVE_TEXT}}">
{{.I_HAVE_TEXT}}
</td>	
<td data-order="{{.I_NEED_TEXT}}">
{{.I_NEED_TEXT}}
</td>	
<td data-order="{{.BADGE}}">
{{.BADGE}}
</td>	
<td data-order="{{.CRED_PTS}}">
{{.CRED_PTS}}
</td>	
<td data-order="{{.POS_VOTES}}">
{{.POS_VOTES}}
</td>	
<td data-order="{{.NEG_VOTES}}">
{{.NEG_VOTES}}
</td>	
<td data-order="{{.LIFE_RATING}}">
{{.LIFE_RATING}}
</td>	
<td data-order="{{.FILLER_1}}">
{{.FILLER_1}}
</td>	
<td data-order="{{.FILLER_2}}">
{{.FILLER_2}}
</td>		
<td data-order="{{.FILLER_3}}">
{{.FILLER_3}}
</td>
 
</tr>
    {{end}}
`
 
var peopleSettingsTemplateTablePeopleAdminPending = template.Must(template.New("peopleSettingsTemplateTablePeopleAdminPending").Parse(peopleSettingsTemplateTablePeopleHTMLAdminPending))
 
const peopleSettingsTemplateTablePeopleHTMLAdminPending = `
<tr>
<td class="cbc">
PENDING
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-APPROVE&USER={{.}}" title="Approve User"><img src="/static/img/approve.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-DELETE&USER={{.}}" title="Delete User"><img src="/static/img/delete-user.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-ACCOUNT&USER={{.}}#account" title="Settings"><img src="/static/img/settings.png" width=40 height=40/></img></a>
</td>
<td class="id">
<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.}}&SID={{.}}"><img src="/static/img/emoticon-happy.png" width=40 height=40></img></a>
</td>
<td data-order="{{.}}">
{{.}}
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-search="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>		
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>		
<td data-order="TBD">
TBD
</td>
 
</tr>
`
 
var peopleSettingsTemplateTablePeopleAdminNoProf = template.Must(template.New("peopleSettingsTemplateTablePeopleAdminNoProf").Parse(peopleSettingsTemplateTablePeopleHTMLAdminNoProf))
 
const peopleSettingsTemplateTablePeopleHTMLAdminNoProf = `
<tr>
<td class="cbc">
NO PROFILE
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-BLOCK&USER={{.}}"><img src="/static/img/blockuser.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-DELETE&USER={{.}}"><img src="/static/img/delete-user.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-ACCOUNT&USER={{.}}#account"><img src="/static/img/settings.png" width=40 height=40/></img></a>
</td>
<td class="id">
<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.}}&SID={{.}}"><img src="/static/img/emoticon-happy.png" width=40 height=40></img></a>
</td>
<td data-order="{{.}}">
{{.}}
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-search="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>		
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>	
<td data-order="TBD">
TBD
</td>		
<td data-order="TBD">
TBD
</td>
 
</tr>
`
 
var peopleSettingsTemplateTablePeopleOffline = template.Must(template.New("peopleSettingsTemplateTablePeopleOffline").Parse(peopleSettingsTemplateTablePeopleHTMLOffline))
 
const peopleSettingsTemplateTablePeopleHTMLOffline = `
    {{range .}}
<tr>
<td class="cbc">
<a href="/guestbook?UID={{.UID}}"><img src="/static/img/guestbook-offline.png" width=40 height=40/></img></a><g:hangout render="createhangout" invites="[{ id : '{{.UID}}', invite_type : 'EMAIL' }]" widget_size="72"></g:hangout>
</td>
<td class="id">
<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.UID}}&SID={{.UID}}"><img src="{{.PICTURE}}" width=40 height=40></img></a><img src="/static/img/flags/{{.COUNTRY}}.gif" width=48 height=30>
</td>
<td data-order="{{.UID}}">
{{.UID}}
</td>
<td data-order="{{.BIRTH_DAY}}">
{{.BIRTH_DAY}}
</td>
<td data-order="{{.ELEM_SCHOOL}}">
{{.ELEM_SCHOOL}}
</td>
<td data-search="{{.HIGH_SCHOOL}}">
{{.HIGH_SCHOOL}}
</td>
<td data-order="{{.COLLEGE}}">
{{.COLLEGE}}
</td>
<td data-order="{{.POST_GRAD}}">
{{.POST_GRAD}}
</td>
<td data-order="{{.PROFESSION}}">
{{.PROFESSION}}
</td>
<td data-order="{{.COMPANY}}">
{{.COMPANY}}
</td>
<td data-order="{{.CONTACT_NUM}}">
{{.CONTACT_NUM}}
</td>
<td data-order="{{.SOCIAL_1}}">
{{.SOCIAL_1}}
</td>
<td data-order="{{.SOCIAL_2}}">
{{.SOCIAL_2}}
</td>
<td data-order="{{.SOCIAL_3}}">
{{.SOCIAL_3}}
</td>
<td data-order="{{.COUNTRY}}">
{{.COUNTRY}}
</td>	
<td data-order="{{.REGION}}">
{{.REGION}}
</td>
<td data-order="{{.CITY}}">
{{.CITY}}
</td>	
<td data-order="{{.MUNICIPALITY}}">
{{.MUNICIPALITY}}
</td>		
<td data-order="{{.BARANGAY}}">
{{.BARANGAY}}
</td>	
<td data-order="{{.SUBDIVISION}}">
{{.SUBDIVISION}}
</td>	
<td data-order="{{.REG_VOTER}}">
{{.REG_VOTER}}
</td>	
<td data-order="{{.ID_NUMBER}}">
{{.ID_NUMBER}}
</td>	
<td data-order="{{.I_HAVE_TEXT}}">
  <label class="collapse" for="{{.UID}}_1">I_HAVE_TEXT...</label>
  <input id="{{.UID}}_1" type="checkbox">
  <div>{{.I_HAVE_TEXT}}</div>
</td>	
<td data-order="{{.I_NEED_TEXT}}">
<label class="collapse" for="{{.UID}}_2">I_NEED_TEXT...</label>
  <input id="{{.UID}}_2" type="checkbox">
  <div>{{.I_NEED_TEXT}}</div>
</td>	
<td data-order="{{.BADGE}}">
{{.BADGE}}
</td>	
<td data-order="{{.CRED_PTS}}">
{{.CRED_PTS}}
</td>	
<td data-order="{{.POS_VOTES}}">
{{.POS_VOTES}}
</td>	
<td data-order="{{.NEG_VOTES}}">
{{.NEG_VOTES}}
</td>	
<td data-order="{{.LIFE_RATING}}">
{{.LIFE_RATING}}
</td>	
<td data-order="{{.FILLER_1}}">
{{.FILLER_1}}
</td>	
<td data-order="{{.FILLER_2}}">
{{.FILLER_2}}
</td>		
<td data-order="{{.FILLER_3}}">
{{.FILLER_3}}
</td>
 
</tr>
    {{end}}
`
 
var peopleDirectoryListOffline = template.Must(template.New("peopleDirectoryListOffline").Parse(peopleDirectoryListHTMLOffline))
 
const	peopleDirectoryListHTMLOffline = `
    {{range .}}
<tr>
<td data-order="status">
Offline
</td>
<td class="cbc">
<a href="/guestbook?UID={{.UID}}"><img src="/static/img/guestbook-offline.png" width=40 height=40/></img></a><g:hangout render="createhangout" invites="[{ id : '{{.UID}}', invite_type : 'EMAIL' }]" widget_size="72"></g:hangout>
</td>
<td class="id">
<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.UID}}&SID={{.UID}}"><img src="{{.PICTURE}}" width=40 height=40></img></a><img src="/static/img/flags/{{.COUNTRY}}.gif" width=48 height=30>
</td>
<td data-order="{{.UID}}">
{{.UID}}
</td>
<td data-order="https://www.ulapph.com">
<a href="https://www.ulapph.com">https://www.ulapph.com</a>
</td>
<td data-order="{{.PROFESSION}}">
{{.PROFESSION}}
</td>
<td data-order="{{.COMPANY}}">
{{.COMPANY}}
</td>
<td data-order="{{.CONTACT_NUM}}">
{{.CONTACT_NUM}}
</td>
<td data-order="{{.SOCIAL_1}}">
{{.SOCIAL_1}}
</td>
<td data-order="{{.SOCIAL_2}}">
{{.SOCIAL_2}}
</td>
<td data-order="{{.SOCIAL_3}}">
{{.SOCIAL_3}}
</td>
<td data-order="{{.COUNTRY}}">
{{.COUNTRY}}
</td>	
<td data-order="{{.REGION}}">
{{.REGION}}
</td>
<td data-order="{{.CITY}}">
{{.CITY}}
</td>	
<td data-order="{{.I_HAVE_TEXT}}">
  <label class="collapse" for="{{.UID}}_1">{{if ne .I_HAVE_TEXT ""}}I have...{{end}}</label>
  <input id="{{.UID}}_1" type="checkbox">
  <div>{{.I_HAVE_TEXT}}</div>
</td>	
<td data-order="{{.I_NEED_TEXT}}">
<label class="collapse" for="{{.UID}}_2">{{if ne .I_HAVE_TEXT ""}}I need...{{end}}</label>
  <input id="{{.UID}}_2" type="checkbox">
  <div>{{.I_NEED_TEXT}}</div>
</td>	
</tr>
    {{end}}
`
 
var peopleSettingsTemplateTablePeopleOfflineAdmin = template.Must(template.New("peopleSettingsTemplateTablePeopleOfflineAdmin").Parse(peopleSettingsTemplateTablePeopleHTMLOfflineAdmin))
 
const peopleSettingsTemplateTablePeopleHTMLOfflineAdmin = `
    {{range .}}
<tr>
<td class="cbc">
BLOCKED
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-UNBLOCK&USER={{.UID}}"><img src="/static/img/unblockuser.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-DELETE&USER={{.UID}}"><img src="/static/img/delete-user.png" width=40 height=40/></img></a>
<a href="/admin-setup?ADMIN_FUNC=TDSUSERS-ACCOUNT&USER={{.UID}}#account"><img src="/static/img/settings.png" width=40 height=40/></img></a>
</td>
<td class="id">
<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.UID}}&SID={{.UID}}"><img src="{{.PICTURE}}" width=40 height=40></img></a>
</td>
<td data-order="{{.UID}}">
{{.UID}}
</td>
<td data-order="{{.BIRTH_DAY}}">
{{.BIRTH_DAY}}
</td>
<td data-order="{{.ELEM_SCHOOL}}">
{{.ELEM_SCHOOL}}
</td>
<td data-search="{{.HIGH_SCHOOL}}">
{{.HIGH_SCHOOL}}
</td>
<td data-order="{{.COLLEGE}}">
{{.COLLEGE}}
</td>
<td data-order="{{.POST_GRAD}}">
{{.POST_GRAD}}
</td>
<td data-order="{{.PROFESSION}}">
{{.PROFESSION}}
</td>
<td data-order="{{.COMPANY}}">
{{.COMPANY}}
</td>
<td data-order="{{.CONTACT_NUM}}">
{{.CONTACT_NUM}}
</td>
<td data-order="{{.SOCIAL_1}}">
{{.SOCIAL_1}}
</td>
<td data-order="{{.SOCIAL_2}}">
{{.SOCIAL_2}}
</td>
<td data-order="{{.SOCIAL_3}}">
{{.SOCIAL_3}}
</td>
<td data-order="{{.COUNTRY}}">
{{.COUNTRY}}
</td>	
<td data-order="{{.REGION}}">
{{.REGION}}
</td>
<td data-order="{{.CITY}}">
{{.CITY}}
</td>	
<td data-order="{{.MUNICIPALITY}}">
{{.MUNICIPALITY}}
</td>		
<td data-order="{{.BARANGAY}}">
{{.BARANGAY}}
</td>	
<td data-order="{{.SUBDIVISION}}">
{{.SUBDIVISION}}
</td>	
<td data-order="{{.REG_VOTER}}">
{{.REG_VOTER}}
</td>	
<td data-order="{{.ID_NUMBER}}">
{{.ID_NUMBER}}
</td>	
<td data-order="{{.I_HAVE_TEXT}}">
{{.I_HAVE_TEXT}}
</td>	
<td data-order="{{.I_NEED_TEXT}}">
{{.I_NEED_TEXT}}
</td>	
<td data-order="{{.BADGE}}">
{{.BADGE}}
</td>	
<td data-order="{{.CRED_PTS}}">
{{.CRED_PTS}}
</td>	
<td data-order="{{.POS_VOTES}}">
{{.POS_VOTES}}
</td>	
<td data-order="{{.NEG_VOTES}}">
{{.NEG_VOTES}}
</td>	
<td data-order="{{.LIFE_RATING}}">
{{.LIFE_RATING}}
</td>	
<td data-order="{{.FILLER_1}}">
{{.FILLER_1}}
</td>	
<td data-order="{{.FILLER_2}}">
{{.FILLER_2}}
</td>		
<td data-order="{{.FILLER_3}}">
{{.FILLER_3}}
</td>
 
</tr>
    {{end}}
`
 
var iconsSettingsTemplateTableADS = template.Must(template.New("iconsSettingsTemplateTableADS").Parse(iconsSettingsTemplateTableHTMLAds))
 
const iconsSettingsTemplateTableHTMLAds = `
    {{range .}}
<tr>
<td class="cbc">
[<a href="/admin-ads?ADS_FUNC=EditAd&ADS_ID={{.ADS_ID}}">Edit</a>] [<a href="/admin-ads?ADS_FUNC=PUSH-AD&ADS_ID={{.ADS_ID}}&ADS_TITLE={{.ADS_TITLE}}&ADS_URL={{.ADS_URL}}&ADS_IMG={{.ADS_IMG}}">Push-Ad</a>]
</td>
<td class="id">
<img src="{{.ADS_IMG}}" title="{{.ADS_TITLE}}" width=100 height=100/>
<br>
<a href="/admin-ads?ADS_FUNC=DelAd&ADS_ID={{.ADS_ID}}&ADS_PUB_ID={{.ADS_PUB_ID}}">Delete</a>
</td>
<td data-order="{{.ADS_ID}}">
{{.ADS_ID}}
</td>
<td data-order="{{.ADS_PUB_ID}}">
{{.ADS_PUB_ID}}
</td>
<td data-order="{{.ADS_STATUS}}">
{{.ADS_STATUS}}
</td>
<td data-order="{{.ADS_TITLE}}">
{{.ADS_TITLE}}
</td>
<td data-order="{{.UPLOAD_BY}}">
{{.UPLOAD_BY}}
</td>
<td data-search="{{.ADS_URL}}">
<a href="{{.ADS_URL}}">
{{.ADS_URL}}
</a>
</td>
<td data-order="{{.UPLOAD_DATE}}">
{{.UPLOAD_DATE}}
</td>
<td data-order="{{.CATEGORY}}">
{{.CATEGORY}}
</td>
<td data-order="{{.ADS_IMG}}">
{{.ADS_IMG}}
</td>
</tr>
    {{end}}
`
 
var iconsSettingsTemplateTableFooterAdmin = template.Must(template.New("iconsSettingsTemplateTableFooterAdmin").Parse(iconsSettingsTemplateTableHTMLFooterAdmin))
 
const iconsSettingsTemplateTableHTMLFooterAdmin = `
</tbody>
</form>
</table>
 
<script type="text/javascript">
 
checkboxlimit(document.forms.desktop.icons, 10)
 
</script>
</div>
<a href="/?q=qu"><img src="https://lh3.googleusercontent.com/hPJvi7PAJZ8Csjg3Dimu1ijLkHIuMraOikXcDMJxDM1dLviQ3XS7z0ZNt85Jw0sq6ww1THPRB_0VtxCSqt1TgUvKEYQE" title="Upload New Icon" height=40 width=40></a><a href="/admin-ads?ADS_FUNC=UPLOAD#upload-ads" target="ads"><img src="https://lh3.googleusercontent.com/YC_rjS9ZR3N7vLUrvreIdP33Ka-5WHMhsQdHS0Qlz29H_KhBcuQmrZjRM_B1IvrW6Zk7O3GZGfO1ll6s40mDOoOJ7WHx1Q" title="Upload New Ads" height=40 width=40></a>
`
 
var iconsSettingsTemplateTableFooter = template.Must(template.New("iconsSettingsTemplateTableFooter").Parse(iconsSettingsTemplateTableHTMLFooterUp))
 
const iconsSettingsTemplateTableHTMLFooterUp = `
</tbody>
</form>
</table>
 
<script type="text/javascript">
 
checkboxlimit(document.forms.desktop.icons, 10)
 
</script>
</div>
<a href="/?q=qu"><img src="https://lh3.googleusercontent.com/hPJvi7PAJZ8Csjg3Dimu1ijLkHIuMraOikXcDMJxDM1dLviQ3XS7z0ZNt85Jw0sq6ww1THPRB_0VtxCSqt1TgUvKEYQE" title="Upload New Icon" height=40 width=40></a>
</body>
</html>
`
 
var iconsSettingsTemplateTableFooterNoHTMLClose = template.Must(template.New("iconsSettingsTemplateTableFooterNoHTMLClose").Parse(iconsSettingsTemplateTableHTMLFooterNoHTMLClose))
 
const iconsSettingsTemplateTableHTMLFooterNoHTMLClose = `
</tbody>
</form>
</table>
 
<script type="text/javascript">
 
checkboxlimit(document.forms.desktop.icons, 10)
 
</script>
</div>
<a href="/?q=qu"><img src="https://lh3.googleusercontent.com/hPJvi7PAJZ8Csjg3Dimu1ijLkHIuMraOikXcDMJxDM1dLviQ3XS7z0ZNt85Jw0sq6ww1THPRB_0VtxCSqt1TgUvKEYQE" title="Upload New Icon" height=40 width=40></a>
 
`
 
 
var peopleSettingsTemplateTableFooter = template.Must(template.New("peopleSettingsTemplateTableFooter").Parse(peopleSettingsTemplateTableHTMLFooter))
 
const peopleSettingsTemplateTableHTMLFooter = `
</tbody>
</form>
</table>
</div>
<h3>[ <a href="{{.}}">Back to ULAPPH</a> ]</h3>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
<script src="/static/js/alertify.min.js"></script>
<script src="/static/js/channel.js" type="text/javascript"></script>
</body>
</html>
`
 
var infoDBTemplateTableFooter = template.Must(template.New("infoDBTemplateTableFooter").Parse(infoDBTemplateTableHTMLFooter))
 
const infoDBTemplateTableHTMLFooter = `
</tbody>
</form>
</table>
</div>
<script src="/static/js/tab5.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
</body>
</html>
`
 
var showTrendingFooterSelf = template.Must(template.New("showTrendingFooter").Parse(showTrendingFooterSelfRec))
 
const showTrendingFooterSelfRec = `
</tbody>
</table>
</div>
<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.}}"></script-->
[<a href="https://ulapph-sites.appspot.com/social?SO_FUNC=show-discussions">Worldwide Discussions</a>]
</body>
</html>
`

var showTrendingFooter = template.Must(template.New("showTrendingFooter").Parse(showTrendingFooterRec))
 
const showTrendingFooterRec = `
</tbody>
</table>
</div>
<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.}}"></script-->
</body>
</html>
`
 
var showPeopleDirFooter = template.Must(template.New("showPeopleDirFooter").Parse(showPeopleDirFooterRec))
 
const showPeopleDirFooterRec = `
</tbody>
</table>
</div>
<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.}}"></script-->
</body>
</html>
`
 
var showSitesDirFooter = template.Must(template.New("showSitesDirFooter").Parse(showSitesDirFooterRec))
 
const showSitesDirFooterRec = `
</tbody>
</table>
</div>
<!--h3>[<a href="/directory?DIR_FUNC=sites&latest=y">Refresh</a>] [<a href="/directory?DIR_FUNC=sessions">All Sites Sessions</a>]</h3-->
<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.}}"></script-->
</body>
</html>
`
 
var infoDBTemplateTableFooterHelp = template.Must(template.New("infoDBTemplateTableFooterHelp").Parse(infoDBTemplateTableHTMLFooterHelp))
 
const infoDBTemplateTableHTMLFooterHelp = `
</tbody>
</form>
</table>
</div>
<h3>[ <a href="/slides">Slides</a> ] [ <a href="/articles">Articles</a> ] [ <a href="/media">Media</a> ] [ <a href="/people-edit?EditPeopleFunc=TutorialEnable&UID={{.}}">Enable Tutorial</a> ]</h3>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
<script src="/static/js/tab5.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
</body>
</html>
`
 
var peopleSettingsTemplateTableFooter2 = template.Must(template.New("peopleSettingsTemplateTableFooter2").Parse(peopleSettingsTemplateTableHTMLFooter2))
 
const peopleSettingsTemplateTableHTMLFooter2 = `
</tbody>
</form>
</table>
<h3>[<a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.}}&SID={{.}}">Create your profile</a>]</h3>
</div>
<h3>[ <a href="{{.}}">Back to ULAPPH</a> ]</h3>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
</body>
</html>
`
 
var peopleSettingsTemplateTableFooter3 = template.Must(template.New("peopleSettingsTemplateTableFooter3").Parse(peopleSettingsTemplateTableHTMLFooter3))
 
const peopleSettingsTemplateTableHTMLFooter3 = `
</tbody>
</form>
</table>
<h3>[<a href="/people-edit?EditPeopleFunc=UnhideUser&UID={{.}}">Unhide Profile</a>]</h3>
</div>
<h3>[ <a href="{{.}}">Back to ULAPPH</a> ]</h3>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
</body>
</html>
`
 
var iconsSettingsTemplateTableFooter1 = template.Must(template.New("iconsSettingsTemplateTableFooter1").Parse(iconsSettingsTemplateTableHTMLFooter1))
 
const iconsSettingsTemplateTableHTMLFooter1 = `
</tbody>
</form>
</table>
`
 
var iconsSettingsTemplateTableFooter8 = template.Must(template.New("iconsSettingsTemplateTableFooter8").Parse(iconsSettingsTemplateTableHTMLFooter8))
 
const iconsSettingsTemplateTableHTMLFooter8 = `
</tbody>
</form>
</table>
</div>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
<script src="/static/js/alertify.min.js"></script>
<script src="/static/js/channel.js" type="text/javascript"></script>
</body>
</html>
`
 
var iconsSettingsTemplateTableFooter9 = template.Must(template.New("iconsSettingsTemplateTableFooter9").Parse(iconsSettingsTemplateTableHTMLFooter9))
 
const iconsSettingsTemplateTableHTMLFooter9 = `
</tbody>
</form>
</table>
</div>
<h3>[ <a href="/admin-ads?ADS_FUNC=UPLOAD#upload-ads" target="ads">Upload New Advertisement</a> ]</h3>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
</body>
</html>
`
 
var slidesSettingsTemplateTableFooter9 = template.Must(template.New("slidesSettingsTemplateTableFooter9").Parse(slidesSettingsTemplateTableHTMLFooter9))
 
const slidesSettingsTemplateTableHTMLFooter9 = `
</tbody>
</table>
<h3>[ <a href="/slides">Slides</a> ] [ <a href="/articles">Articles</a> ] [ <a href="/media">Media</a> ] [ <a href="/people-edit?EditPeopleFunc=TutorialEnable&UID={{.}}">Enable Tutorial</a> ]</h3>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
<script src="/static/js/tab5.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
</body>
</html>
`
 
 
var mediaSettingsTemplateTableFooter9 = template.Must(template.New("mediaSettingsTemplateTableFooter9").Parse(mediaSettingsTemplateTableHTMLFooter9))
 
const mediaSettingsTemplateTableHTMLFooter9 = `
</tbody>
</table>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
	<hr>
	<h3>[ <a href="/slides">Slides</a> ] [ <a href="/articles">Articles</a> ] [ <a href="/media">Media</a> ]</h3>
	&copy; 2014-22020 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->
    <!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->	
</body>
</html>
`
 
var rootTemplate = template.Must(template.New("rootTemplate").Parse(rootTemplateHTML))
 
const rootTemplateHTML = `
	<div id="upload-icon" class="modalDialog">
		<div>
		<a href="#close" title="Close" class="close">X</a>
		<h3>Upload a new Icon</h3>
		<form action="{{.}}" method="POST" enctype="multipart/form-data">
		Upload File: <input type="file" name="file"><br>
		Enter Icon Name: <input type="text" name="ICON_NAME" maxlength="50">Note: Sample Name <br>
		Enter Website: <input type="text" id="URL_ADD" name="URL_ADD" maxlength="300">Note: http://www.samplewebsite.com <br>
		Shared Status: <select name="FL_SHARED" value="Y">
		  <option value="Y">Shared</option>
		  <option value="N">Not Shared</option>
		</select><br>
		Published Status:<select name="DOC_STAT" value="ULAPPH Only">
		  <option value="ULAPPH Only">ULAPPH Only</option>
		  <option value="Worldwide">Worldwide</option>
		  <option value="Personal">Personal</option>
		  <option value="Premium">Premium</option>
		</select><br>
		Category: <select name="DESKTOP">
`
 
var rootTemplate2 = template.Must(template.New("rootTemplate2").Parse(rootTemplateHTML2))
 
const rootTemplateHTML2 = `
		</select><br>
		<!--input type="hidden" name="DESKTOP" value="{{.}}"-->
		<input type="submit" name="submit" value="Upload Icon">
		</form>
		</div>
	</div>
`
 
var quickUploadTemplate = template.Must(template.New("quickUploadTemplate").Parse(rootTemplateQuickUpload))
 
const rootTemplateQuickUpload = `
	<div id="upload-icon" class="modalDialog">
		<div>
		<a href="#close" title="Close" class="close">X</a>
		<h3>Quick Upload a new Icon</h3>
		<form action="{{.}}" method="POST" enctype="multipart/form-data">
		Category: <select name="DESKTOP">
`
 
var quickUploadTemplate2 = template.Must(template.New("quickUploadTemplate2").Parse(rootTemplateQuickUpload2))
 
const rootTemplateQuickUpload2 = `
		</select><br>
		Upload Image Icon: [<a href="#" onclick="findIcons(); return false;" title="Opens search window"><b>Get Icons...</b></a>]<input type="file" name="file"><br>
		Enter Icon Name: <input type="text" name="ICON_NAME" maxlength="50"><br>
		Enter Website: <input type="text" id="URL_ADD" name="URL_ADD" maxlength="300"><br>
		Shared Status: <select name="FL_SHARED" value="Y">
		  <option value="Y">Shared</option>
		  <option value="N">Not Shared</option>
		</select><br>
		Published Status:<select name="DOC_STAT" value="ULAPPH Only">
		  <option value="ULAPPH Only">ULAPPH Only</option>
		  <option value="Worldwide">Worldwide</option>
		  <option value="Personal">Personal</option>
		  <option value="Premium">Premium</option>
		</select><br>
		<input type="submit" name="submit" value="Upload Icon" onclick="prepURL();return false;">
		</form>
		</div>
	</div>
	<script type="text/javascript">
		location.href = "#upload-icon";
	</script>
	<script type="text/javascript">
		function findIcons() {
			var root = location.protocol + '//' + location.host;
			window.postMessage("ULAPPH-SYS-UPD@888@FIND_NEW_ICONS",root);
		}
	</script>
`
 
var rootSetDesktopNWP = template.Must(template.New("rootSetDesktopNWP").Parse(rootTemplateSetDnLogin))
 
const rootTemplateSetDnLogin = `
	<div id="set-wp-other" class="modalDialog">
		<div>
		<a href="#close" title="Close" class="close">X</a>
		<h3>Set as DesktopN Wallpaper</h3>
		<form action="/settings-display-screen" method="POST" enctype="multipart/form-data">
		<input type="hidden" name="imageURL" value="{{.}}">
		<input type="hidden" name="setWallpaper" value="setDNWP">
		<select name="desktop-name" id="CATEGORY">
 
`
 
 
var rootSetDesktopNWP2 = template.Must(template.New("rootSetDesktopNWP2").Parse(rootTemplateSetDnLogin2))
 
const rootTemplateSetDnLogin2 = `
		</select><br>
		<select name="targetWP">
		  <option value="loginWP">Login Wallpaper</option>
		  <option value="bigWP">Desktop Wallpaper</option>
		</select><br>
		<input type="submit" name="submit" value="Set Desktop Wallpaper">
		</form>
		</div>
	</div>
`
 
var rootTemplatePic = template.Must(template.New("rootTemplatePic").Parse(rootTemplateHTMLPic))
 
const rootTemplateHTMLPic = `
<html><body>
<hr>
<h3>Upload a new Picture</h3>
<form action="{{.}}" method="POST" enctype="multipart/form-data">
Upload Picture: <input type="file" name="file"><br>
`
 
var rootTemplateReplaceMedia = template.Must(template.New("rootTemplatePic").Parse(rootTemplateHTMLReplaceMedia))
 
const rootTemplateHTMLReplaceMedia = `
<html><body>
<hr>
<h3>Upload a new Media File</h3>
<form action="{{.}}" method="POST" enctype="multipart/form-data">
Upload Picture: <input type="file" name="file"><br>
`
 
var rootTemplate2Pic = template.Must(template.New("rootTemplate2Pic").Parse(rootTemplateHTML2Pic))
 
const rootTemplateHTML2Pic = `
<input type="hidden" name="UID" value="{{.}}">
<input type="hidden" name="PFUNC" value="UploadPic">
<input type="submit" name="submit" value="Upload Picture">
</form>
</body></html>
`
 
var rootTemplate2ReplaceMedia = template.Must(template.New("rootTemplate2Pic").Parse(rootTemplateHTML2ReplaceMedia))
 
const rootTemplateHTML2ReplaceMedia = `
<input type="hidden" name="MEDIA_ID" value="{{.STR_FILLER1}}">
<input type="hidden" name="DATA_TYPE" value="{{.STR_FILLER2}}">
<input type="hidden" name="UID" value="{{.STR_FILLER3}}">
<input type="hidden" name="PFUNC" value="UPLOAD-REP-MEDIA">
<input type="submit" name="submit" value="Upload Media">
</form>
</body></html>
`
 
var rootTemplateAds = template.Must(template.New("rootTemplateAds").Parse(rootTemplateHTMLAds))
 
const rootTemplateHTMLAds = `
	<div id="upload-ads" class="modalDialog">
		<div>
		<a href="#close" title="Close" class="close">X</a>
		<h3>Upload a new Advertisement (Image)</h3>
		<form action="{{.}}" method="POST" enctype="multipart/form-data">
		Upload File: <input type="file" name="file"><br>
		Enter Ads Title: <input type="text" name="ADS_TITLE" maxlength="50">Note: Sample Ad Name <br>
		Enter Ads Redirect URL: <input type="text" id="URL_ADD" name="URL_ADD" maxlength="300">Note: http://www.samplewebsite.com <br>
`
 
var rootTemplateSlidesA = template.Must(template.New("rootTemplateSlidesA").Parse(rootTemplateHTMLSlidesA))
 
const rootTemplateHTMLSlidesA = `
	<div id="upload-slides" class="modalDialog">
		<div>
		<a href="#close" title="Close" class="close">X</a>
		<h3>Upload a new Slide File</h3>
		<form action="{{.}}" method="POST" enctype="multipart/form-data">
			Category: <select name="CATEGORY">
`
 
var rootTemplateArticlesA = template.Must(template.New("rootTemplateArticlesA").Parse(rootTemplateHTMLArticlesA))
 
const rootTemplateHTMLArticlesA = `
	<div id="upload-articles" class="modalDialog">
		<div>
		<a href="#close" title="Close" class="close">X</a>
		<h3>Upload a new Article File</h3>
		<form action="{{.}}" method="POST" enctype="multipart/form-data">
		Category: 		<select name="CATEGORY">
`
 
 
var rootTemplateSlidesB = template.Must(template.New("rootTemplateSlidesB").Parse(rootTemplateHTMLSlidesB))
 
const rootTemplateHTMLSlidesB = `
				<option selected>
				{{.}}
				</option>		
			</select>Current: {{.}}<br>
		Upload File: <input type="file" name="file">Note: sample.slide<br>
		Enter Slides Title: <input type="text" name="TITLE" maxlength="50">Note: Sample Slide Name <br>
		Enter Slides Desc: <input type="text" id="DESC" name="DESC" maxlength="300">Note: This is some sample slides. <br>
		<input type="submit" name="submit" value="Upload Slide File">
		</form>
	    </div>
   </div>
`
 
var rootTemplateSlidesCategory = template.Must(template.New("rootTemplateSlidesCategory").Parse(rootTemplateSlidesCategoryChoice))
 
const rootTemplateSlidesCategoryChoice = `
			Switch to Category: <select id="CATEGORY" onchange="selectCategory()"><option value="">Select</option>
 
`
 
var rootTemplateSlidesCategoryB = template.Must(template.New("rootTemplateSlidesCategoryB").Parse(rootTemplateSlidesCategoryChoiceB))
 
const rootTemplateSlidesCategoryChoiceB = `
			</select>
			<script>
				function selectCategory() {
					var x = document.getElementById("CATEGORY").value;
					var str = window.location.href;
					var res = str.match(/infodb/g);
					if (res != null) {
						window.location.assign('/infodb?DB_FUNC=SLIDES&CATEGORY=' + x);
					} else {
						window.location.assign('/admin-slides?CATEGORY=' + x);
					}
					return				
				};
			</script>
`

var rootTemplateMultiUploadForm = template.Must(template.New("rootTemplateMultiUploadForm").Parse(rootTemplateMultiUploadFormB))
 
const rootTemplateMultiUploadFormB = `
			</select>
			<script type="text/javascript">
			    $(function() {
				// initialize sol
				$('#CATEGORY').searchableOptionList();
			    });
			</script>
			<br>
			<input type="submit" name="submit" value="Proceed">
			</form>
`
 
var rootTemplateArticlesCategory = template.Must(template.New("rootTemplateArticlesCategory").Parse(rootTemplateArticlesCategoryChoice))
 
const rootTemplateArticlesCategoryChoice = `
			Switch to Category: <select id="CATEGORY" onchange="selectCategory()"><option value="">Select</option>
 
`
 
var rootTemplateArticlesCategoryB = template.Must(template.New("rootTemplateArticlesCategoryB").Parse(rootTemplateArticlesCategoryChoiceB))
 
const rootTemplateArticlesCategoryChoiceB = `
			</select>
			<script>
				function selectCategory() {
					var x = document.getElementById("CATEGORY").value;
					var str = window.location.href;
					var res = str.match(/infodb/g);
					if (res != null) {
						window.location.assign('/infodb?DB_FUNC=ARTICLES&CATEGORY=' + x);
					} else {
						window.location.assign('/admin-articles?CATEGORY=' + x);
					}
					return				
				};
			</script>
`
 
var rootTemplateMediaCategory = template.Must(template.New("rootTemplateMediaCategory").Parse(rootTemplateMediaCategoryChoice))
 
const rootTemplateMediaCategoryChoice = `
			Switch to Category: <select id="CATEGORY" onchange="selectCategory()"><option value="">Select</option></span></h1>
`
var rootTemplateMediaYear = template.Must(template.New("rootTemplateMediaYear").Parse(rootTemplateMediaYearChoice))
 
const rootTemplateMediaYearChoice = `
			Switch to Year: <select id="YEAR" onchange="selectYear()"><option value="">Select</option></span></h1>
				  <option value="2000">2000</option>
				  <option value="2001">2001</option>
				  <option value="2002">2002</option>
				  <option value="2003">2003</option>
				  <option value="2004">2004</option>
				  <option value="2005">2005</option>
				  <option value="2006">2006</option>
				  <option value="2007">2007</option>
				  <option value="2008">2008</option>
				  <option value="2009">2009</option>
				  <option value="2010">2010</option>
				  <option value="2011">2011</option>
				  <option value="2012">2012</option>
				  <option value="2013">2013</option>
				  <option value="2014">2014</option>
				  <option value="2015">2015</option>
				  <option value="2016">2016</option>
				  <option value="2017">2017</option>
				  <option value="2018">2018</option>
				  <option value="2019">2019</option>
				  <option value="2020">2020</option>
				  <option value="2021">2021</option>
				  <option value="2022">2022</option>
				  <option value="2023">2023</option>
				  <option value="2024">2024</option>
				  <option value="2025">2025</option>
				  <option value="2026">2026</option>
				  <option value="2027">2027</option>
				  <option value="2028">2028</option>
				  <option value="2029">2029</option>
				  <option value="2030">2030</option>
			</select>
			<script>
				function selectYear() {
					var x = document.getElementById("YEAR").value;
					//var y = document.getElementById("CATEGORY").value;
					if (x != "") {
					var str = window.location.href;
					//window.location.assign('/media?FUNC_CODE=VIEW_THUMBS&YEAR=' + x + '&CATEGORY=' + y);
					window.location.assign('/media?FUNC_CODE=VIEW_THUMBS&YEAR=' + x);
					}
					return				
				};
			</script>
`
 
var rootTemplateMediaCategoryC = template.Must(template.New("rootTemplateMediaCategoryC").Parse(rootTemplateMediaCategoryChoiceC))
 
const rootTemplateMediaCategoryChoiceC = `
			</select>
			<script>
				function selectCategory() {
					var x = document.getElementById("CATEGORY").value;
					var str = window.location.href;
					window.location.assign('/infodb?DB_FUNC=MEDIA&CATEGORY=' + x);
					return				
				};
			</script>
			Switch to Year: <select id="YEAR" onchange="selectYear()"><option value="">Select</option></span></h1>
				  <option value="2000">2000</option>
				  <option value="2001">2001</option>
				  <option value="2002">2002</option>
				  <option value="2003">2003</option>
				  <option value="2004">2004</option>
				  <option value="2005">2005</option>
				  <option value="2006">2006</option>
				  <option value="2007">2007</option>
				  <option value="2008">2008</option>
				  <option value="2009">2009</option>
				  <option value="2010">2010</option>
				  <option value="2011">2011</option>
				  <option value="2012">2012</option>
				  <option value="2013">2013</option>
				  <option value="2014">2014</option>
				  <option value="2015">2015</option>
				  <option value="2016">2016</option>
				  <option value="2017">2017</option>
				  <option value="2018">2018</option>
				  <option value="2019">2019</option>
				  <option value="2020">2020</option>
				  <option value="2021">2021</option>
				  <option value="2022">2022</option>
				  <option value="2023">2023</option>
				  <option value="2024">2024</option>
				  <option value="2025">2025</option>
				  <option value="2026">2026</option>
				  <option value="2027">2027</option>
				  <option value="2028">2028</option>
				  <option value="2029">2029</option>
				  <option value="2030">2030</option>
			</select>
			<script>
				function selectYear() {
					var x = document.getElementById("YEAR").value;
					var str = window.location.href;
					window.location.assign('/infodb?DB_FUNC=MEDIA&YEAR=' + x);
					return			
				};
			</script>
`
 
var rootTemplateArticlesB = template.Must(template.New("rootTemplateArticlesB").Parse(rootTemplateHTMLArticlesB))
 
const rootTemplateHTMLArticlesB = `
				<option selected>
				{{.}}
				</option>			
			</select>Current: {{.}}<br>
		Upload File: <input type="file" name="file">Note: sample.article<br>
		Enter Articles Title: <input type="text" name="TITLE" maxlength="50">Note: Sample Article Name <br>
		Enter Articles Desc: <input type="text" id="DESC" name="DESC" maxlength="300">Note: This is some sample articles. <br>
		<input type="submit" name="submit" value="Upload Article File">
		</form>
	    </div>
   </div>
`
 
var rootTemplateMediaA = template.Must(template.New("rootTemplateMediaA").Parse(rootTemplateHTMLMediaA))
 
const rootTemplateHTMLMediaA = `
	<div id="upload-image" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Upload a new Image</h3>
			<form action="{{.}}" method="POST" enctype="multipart/form-data">
			Category: <select name="CATEGORY" id="CATEGORY">
`
var rootTemplateMediaA2 = template.Must(template.New("rootTemplateMediaA2").Parse(rootTemplateHTMLMediaA2))
 
const rootTemplateHTMLMediaA2 = `
			</select><br>
			<input type="hidden" name="DATA_TYPE" value="image">
			Upload File: <input type="file" name="file"><br>
			Enter Image Title: <input type="text" name="TITLE" maxlength="50">Note: Sample Image Name <br>
			Enter Image Desc: <input type="text" id="DESC" name="DESC" maxlength="300">Note: This is some image description. <br>
			Shared Status: <select name="FL_SHARED" value="Y">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
			</select><br>
			Published Status:<select name="DOC_STAT" value="ULAPPH Only">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
              <option value="Premium">Premium</option>			
			</select><br>
			<input type="submit" name="submit" value="Upload Image File">
			<h3>[ <a href="/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD">Multiple Uploader</a> ]</h3>
			</form>
	    </div>
    </div>	
`
 
var rootTemplateMediaB = template.Must(template.New("rootTemplateMediaB").Parse(rootTemplateHTMLMediaB))
 
const rootTemplateHTMLMediaB = `
	<div id="upload-text" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Upload a new Text File</h3>
			<form action="{{.}}" method="POST" enctype="multipart/form-data">
			Category:		<select name="CATEGORY" id="CATEGORY">
`
 
var rootTemplateMediaB2 = template.Must(template.New("rootTemplateMediaB2").Parse(rootTemplateHTMLMediaB2))
 
const rootTemplateHTMLMediaB2 = `
			</select>
			<input type="hidden" name="DATA_TYPE" value="text">
			<br>
			Upload File: <input type="file" name="file"><br>
			Enter Text Title: <input type="text" name="TITLE" maxlength="50">Note: Sample Text file<br>
			Enter Text Desc: <input type="text" id="DESC" name="DESC" maxlength="300">Note: This is some file description. <br>
			Shared Status: <select name="FL_SHARED" value="Y">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
			</select><br>
			Published Status:<select name="DOC_STAT" value="ULAPPH Only">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
              <option value="Premium">Premium</option>			
			</select><br>
			<input type="submit" name="submit" value="Upload Text File">
			</form>
	    </div>
    </div>	
`
 
var rootTemplateMediaM = template.Must(template.New("rootTemplateMediaM").Parse(rootTemplateHTMLMediaM))
 
const rootTemplateHTMLMediaM = `
	<div id="upload-music" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Upload a Music File</h3>
			<form action="{{.}}" method="POST" enctype="multipart/form-data">
			Category:		<select name="CATEGORY">
`
 
var rootTemplateMediaM2 = template.Must(template.New("rootTemplateMediaM2").Parse(rootTemplateHTMLMediaM2))
 
const rootTemplateHTMLMediaM2 = `
			</select>
			<input type="hidden" name="DATA_TYPE" value="music">
			<br>
			Upload File: <input type="file" name="file"><br>
			Enter Music Title: <input type="text" name="TITLE" maxlength="50">Note: Sample Music file<br>
			Enter Music Desc: <input type="text" id="DESC" name="DESC" maxlength="300">Note: This is some file description. <br>
			Shared Status: <select name="FL_SHARED" value="Y">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
			</select><br>
			Published Status:<select name="DOC_STAT" value="ULAPPH Only">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
              <option value="Premium">Premium</option>			
			</select><br>
			<input type="submit" name="submit" value="Upload Music File">
			</form>
	    </div>
    </div>	
`
 
var rootTemplateMediaV = template.Must(template.New("rootTemplateMediaV").Parse(rootTemplateHTMLMediaV))
 
const rootTemplateHTMLMediaV = `
	<div id="upload-video" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Upload a Video File</h3>
			<form action="{{.}}" method="POST" enctype="multipart/form-data">
			Category:		<select name="CATEGORY">
`
 
var rootTemplateMediaV2 = template.Must(template.New("rootTemplateMediaV2").Parse(rootTemplateHTMLMediaV2))
 
const rootTemplateHTMLMediaV2 = `
			</select>
			<input type="hidden" name="DATA_TYPE" value="video">
			<br>
			Upload File: <input type="file" name="file"><br>
			Enter Video Title: <input type="text" name="TITLE" maxlength="50">Note: Sample Video file<br>
			Enter Video Desc: <input type="text" id="DESC" name="DESC" maxlength="300">Note: This is some file description. <br>
			Shared Status: <select name="FL_SHARED" value="Y">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
			</select><br>
			Published Status:<select name="DOC_STAT" value="ULAPPH Only">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
              <option value="Premium">Premium</option>			
			</select><br>
			<input type="submit" name="submit" value="Upload Video File">
			</form>
	    </div>
    </div>	
`

var rootTemplateMediaC1 = template.Must(template.New("rootTemplateMediaC1").Parse(rootTemplateHTMLMediaC1))
 
const rootTemplateHTMLMediaC1 = `
	<div id="update-media" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Update Image File Details</h3>
			<form action="/media" method="POST" enctype="multipart/form-data">
`
 
var rootTemplateMediaC2 = template.Must(template.New("rootTemplateMediaC2").Parse(rootTemplateHTMLMediaC2))
 
const rootTemplateHTMLMediaC2 = `
	{{range .}}
			<input type="hidden" name="MEDIA_ID" value="{{.MEDIA_ID}}">
			<input type="hidden" name="FUNC_CODE" value="UPDATE">
			Media ID: {{.MEDIA_ID}}<br>
			Image Title: <input type="text" name="TITLE" maxlength="50" value="{{.TITLE}}">Note: Sample Image Name <br>
			Image Desc: <input type="text" id="DESC" name="DESC" maxlength="300" value="{{.DESC}}">Note: Some image description. <br>
			Data Type: <input type="text" id="DATA_TYPE" name="DATA_TYPE" maxlength="300" value="{{.DATA_TYPE}}"><br>
			Mime Type: <input type="text" id="MIME_TYPE" name="MIME_TYPE" maxlength="300" value="{{.MIME_TYPE}}"><a href="https://golang.org/misc/nacl/testdata/mime.types?m=text" target="mlist">List</a><br>
			Author: <input type="text" id="AUTHOR" name="AUTHOR" maxlength="300" value="{{.AUTHOR}}"><br>
			Category: 		<select name="CATEGORY" id="CATEGORY">
 
	{{end}}	
`
 
var rootTemplateMediaC3 = template.Must(template.New("rootTemplateMediaC3").Parse(rootTemplateHTMLMediaC3))
 
const rootTemplateHTMLMediaC3 = `
	{{range .}}
				<option selected>
				{{.CATEGORY}}
				</option>		
		</select>Current: {{.CATEGORY}}<br>
			Published Status:<select name="DOC_STAT" value="{{.DOC_STAT}}">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
			  <option value="Premium">Premium</option>
				<option selected>
				{{.DOC_STAT}}
				</option>			
			</select><br>
			Shared Status: <select name="FL_SHARED" value="{{.FL_SHARED}}">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
			</select>
			<br><input type="submit" name="submit" value="Update Media">
			</form>
	    </div>
			<script type="text/javascript">
			    $(function() {
				$('#CATEGORY').searchableOptionList();
			    });
			</script>
   </div>
	{{end}}	
`
 
 
var rootTemplateSlideU1 = template.Must(template.New("rootTemplateSlideU1").Parse(rootTemplateHTMLSlideU1))
 
const rootTemplateHTMLSlideU1 = `
	<div id="update-slides" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<!--h3>Update Slide</h3-->
			<form action="/admin-slides" method="POST" enctype="multipart/form-data">
`
 
 
var rootTemplateArticleU1 = template.Must(template.New("rootTemplateArticleU1").Parse(rootTemplateHTMLArticleU1))
 
const rootTemplateHTMLArticleU1 = `
	<div id="update-articles" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<!--h3>Update Article</h3-->
			<form action="/admin-articles" method="POST" enctype="multipart/form-data">
`
 
var rootTemplateSlideU1SharedTo = template.Must(template.New("rootTemplateSlideU1SharedTo").Parse(rootTemplateHTMLSlideU1ST))
 
const rootTemplateHTMLSlideU1ST = `
	<div id="shared-to" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Personal Access List</h3>
			<font color=red>List ULAPPH user email address or PIN codes line by line:</font>
			<form action="/admin-slides" method="POST" enctype="multipart/form-data">
	{{range .}}
			<input type="hidden" name="DOC_ID" value="{{.DOC_ID}}">
			<input type="hidden" name="BLOB_URL" value="{{.BLOB_URL}}">
			<textarea  name="SHARED_TO" value="{{.SHARED_TO}}" maxlength="200" rows="10" cols="20"/>{{.SHARED_TO}}</textarea>
			<input type="hidden" name="FUNC_CODE" value="UPDATE3">
			<input type="submit" name="submit" value="Update Access List">
			</form>
 
{{end}}
`
 
var rootTemplateQRTokenAccess= template.Must(template.New("rootTemplateQRTokenAccess").Parse(rootTemplateQRTokenAccess1))
 
const rootTemplateQRTokenAccess1 = `
	<div id="passcode" class="modalDialog">
		<div>
		<h3>ULAPPH QR Login Passcode</h3>
		<img src="/static/img/passcode.png"><br>
		<form action="/message-channel?CHAN_FUNC=authPasscodeVal" method="POST">
		Email:<input type="text" name="UID"><br>
		Passcode:<input type="text" name="passcode"><br>
		<input type="hidden" name="TID" value="{{.STR_FILLER2}}">
		<input type="hidden" name="CID" value="{{.STR_FILLER3}}">
		<input type="hidden" name="target-url" value="{{.STR_FILLER4}}">
		<br><br>
		<input type="submit">
		</form><br>
	    </div>
    </div>
	<script type="text/javascript">
		location.href = "#passcode";
	</script>
`
 
var rootTemplateGuestTokenAccess= template.Must(template.New("rootTemplateGuestTokenAccess").Parse(rootTemplateGuestTokenAccess1))
 
const rootTemplateGuestTokenAccess1 = `
	<div id="passcode" class="modalDialog">
		<div>
		<h3>ULAPPH Guest Login Passcode</h3>
		<img src="/static/img/passcode.png"><br>
		<form action="/message-channel?CHAN_FUNC=authPasscodeVal2" method="POST">
		Guest ID:<input type="text" name="UID" value="{{.STR_FILLER3}}"><br>
		Passcode:<input type="text" name="passcode"><br>
		<input type="hidden" name="TID" value="{{.STR_FILLER2}}">
		<input type="hidden" name="CID" value="{{.STR_FILLER3}}">
		<input type="hidden" name="target-url" value="{{.STR_FILLER4}}">
		<input type="hidden" name="mode" value="guest">
		<br><br>
		<input type="submit">
		</form><br>
	    </div>
    </div>
	<script type="text/javascript">
		location.href = "#passcode";
	</script>
`
 
var rootTemplateSetSearchServer= template.Must(template.New("rootTemplateSetSearchServer").Parse(rootTemplateSetSearchServer1))
 
const rootTemplateSetSearchServer1 = `
    <h1> Set Search Settings</h1>
    <h3>STEP 1: Do you want to set this site as search server?</h3>
	<form action="/admin-setup?ADMIN_FUNC=SET_SEARCH_CNFG_SAVE" method="POST">
	Type: <select name="setServerQ" value="{{.STR_FILLER1}}">
				  <option value="Y">Yes, set as search server.</option>
				  <option value="N">No, don't set as search server.</option>
				<option selected>
				{{.STR_FILLER1}}
				</option>				
				</select><br>
    <h3>STEP 2a: If answer above is NO, identify the search server if there is any.</h3>
	<textarea name="searchServerName" cols=50 rows=1>{{.STR_FILLER2}}</textarea> Ex: https://ulapph-sites.appspot.com
    <h3>STEP 2b: If answer above is YES, identify the MEDIA ID where list of ULAPPH sites are located..</h3>
	TDSMEDIA TEXT MEDIA-ID: <input type="text" name="searchHostList" value="{{.STR_FILLER3}}"> Ex: 5<br>
	<br>
	<input type="submit" value="Save Search Settings">
	</form>
`
 
var rootTemplateSetTemplates= template.Must(template.New("rootTemplateSetTemplates").Parse(rootTemplateSetTemplates1))
 
const rootTemplateSetTemplates1 = `
    <h1> Set Custom Slide & Article Templates</h1>
	<form action="/admin-setup?ADMIN_FUNC=SET_TEMPLATES_SAVE" method="POST">
    <h3>HOMEPAGE: If you have custom website homepage, enter below.</h3>
	TDSMEDIA-: <input type="text" name="HomeTemplate" value="{{.STR_FILLER1}}"> [<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.STR_FILLER1}}">Edit</a>]<br>
    <!--h3><a href="/website?q=home">CONTENTS</a>: If you have custom contents template, enter below.</h3>
	TDSMEDIA-: <input type="text" name="ContentsTemplate" value="{{.STR_FILLER2}}"> [<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.STR_FILLER2}}">Edit</a>]<br>
    <h3><a href="/?q=gallery">GALLERY</a>: If you have custom gallery template, enter below.</h3>
	TDSMEDIA-: <input type="text" name="GalleryTemplate" value="{{.STR_FILLER3}}"> [<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.STR_FILLER3}}">Edit</a>]<br-->
    <h3>SLIDES: If you have custom slides template, enter below.</h3>
	TDSMEDIA-: <input type="text" name="SlidesTemplate" value="{{.STR_FILLER4}}"> [<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.STR_FILLER4}}">Edit</a>]<br>
    <h3>ARTICLES: If you have custom articles template, enter below.</h3>
	TDSMEDIA-: <input type="text" name="ArticlesTemplate" value="{{.STR_FILLER5}}"> [<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.STR_FILLER5}}">Edit</a>]<br>
	<h3>LIST ALL THEME MEDIA IDS: To allow users to select their preferred themes, list them all below separated by commas.</h3>
	TDSMEDIA LIST: <input type="text" name="ThemesList" value="{{.STR_FILLER6}}"> Ex: 3,100,50<br>
	<br>
	<input type="submit" value="Save Template Settings"> [<a href="/admin-setup?ADMIN_FUNC=SET_TEMPLATES_SAVE&clear=yes" title="Clear memcache templates">Clear Templates Cache</a>]
	</form>
`
 
var rootTemplateArticleU1SharedTo = template.Must(template.New("rootTemplateArticleU1SharedTo").Parse(rootTemplateHTMLArticleU1ST))
 
const rootTemplateHTMLArticleU1ST = `
	<div id="shared-to2" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Personal Access List</h3>
			<font color=red>List ULAPPH user email address or PIN codes line by line:</font>
			<form action="/admin-articles" method="POST" enctype="multipart/form-data">
	{{range .}}
			<input type="hidden" name="DOC_ID" value="{{.DOC_ID}}">
			<input type="hidden" name="BLOB_URL" value="{{.BLOB_URL}}">
			<textarea  name="SHARED_TO" value="{{.SHARED_TO}}" maxlength="200" rows="10" cols="20"/>{{.SHARED_TO}}</textarea>
			<input type="hidden" name="FUNC_CODE" value="UPDATE3">
			<input type="submit" name="submit" value="Update Access List">
			</form>
 
{{end}}
`
 
var rootTemplateMediaU1SharedTo = template.Must(template.New("rootTemplateMediaU1SharedTo").Parse(rootTemplateHTMLMediaU1ST))
 
const rootTemplateHTMLMediaU1ST = `
	<div id="shared-to2" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Personal Access List</h3>
			<font color=red>List ULAPPH user email address or PIN codes line by line:</font>
			<form action="/media" method="POST" enctype="multipart/form-data">
	{{range .}}
			<input type="hidden" name="MEDIA_ID" value="{{.MEDIA_ID}}">
			<input type="hidden" name="BLOB_KEY" value="{{.BLOB_KEY}}">
			<textarea  name="SHARED_TO" value="{{.SHARED_TO}}" maxlength="200" rows="10" cols="20"/>{{.SHARED_TO}}</textarea>
			<input type="hidden" name="FUNC_CODE" value="UPDATE3">
			<input type="submit" name="submit" value="Update Access List">
			</form>
 
{{end}}
`
 
var rootTemplateSlideU2 = template.Must(template.New("rootTemplateSlideU2").Parse(rootTemplateHTMLSlideU2))
 
const rootTemplateHTMLSlideU2 = `
	{{range .}}
			<input type="hidden" name="DOC_ID" value="{{.DOC_ID}}">
			<input type="hidden" name="BLOB_URL" value="{{.BLOB_URL}}">
			<input type="hidden" name="FUNC_CODE" value="UPDATE2">
			File Title: <input type="text" name="TITLE" maxlength="200" value="{{.TITLE}}">Note: Sample Slides Name <br>
			File Desc: <input type="text" id="DESC" name="DESC" maxlength="300" value="{{.DESC}}">Note: Some slides description. <br>
			Category: 		<select name="CATEGORY" id="CATEGORY">
 
{{end}}
`
 
var rootTemplateSlideU3 = template.Must(template.New("rootTemplateSlideU3").Parse(rootTemplateHTMLSlideU3))
 
const rootTemplateHTMLSlideU3 = `
	{{range .}}
				<option selected>
				{{.CATEGORY}}
				</option>			
			</select>Current: {{.CATEGORY}}<br>
			Image URL: <input type="text" name="TAGS" maxlength="300" value="{{.TAGS}}">Note: From media gallery<br>
			Author: <input type="text" name="AUTHOR" maxlength="300" value="{{.AUTHOR}}"><br>
			Published Status:<select name="DOC_STAT" value="{{.DOC_STAT}}">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
			  <option value="Premium">Premium</option>
				<option selected>
				{{.DOC_STAT}}
				</option>			
			</select><br>
			Shared Status: <select name="FL_SHARED" value="{{.FL_SHARED}}">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
				<option selected>
				{{.FL_SHARED}}
				</option>	
			</select><br>
			Background Music Media ID: <input type="text" name="MUSIC_ID" maxlength="10" value="{{.MUSIC_ID}}"><br>
			Get Next Contents: <input type="text" name="GET_NEXT" maxlength="10" value="{{.GET_NEXT}}">Note: 12,14,90<br>
			Special Options: <br>
			<textarea  name="FL_COUNTRY_SPECIFIC" value="{{.FL_COUNTRY_SPECIFIC}}" maxlength="200" rows="10" cols="20"/>{{.FL_COUNTRY_SPECIFIC}}</textarea>
			<br><input type="submit" name="submit" value="Update Slide">
			</form>
			<script type="text/javascript">
			    $(function() {
				
				$('#CATEGORY').searchableOptionList();
			    });
			</script>
	    </div>
    </div>
{{end}}
`
 
var rootTemplateArticleU2 = template.Must(template.New("rootTemplateArticleU2").Parse(rootTemplateHTMLArticleU2))
 
const rootTemplateHTMLArticleU2 = `
	{{range .}}
			<input type="hidden" name="DOC_ID" value="{{.DOC_ID}}">
			<input type="hidden" name="BLOB_URL" value="{{.BLOB_URL}}">
			<input type="hidden" name="FUNC_CODE" value="UPDATE2">
			File Title: <input type="text" name="TITLE" maxlength="200" value="{{.TITLE}}">Note: Sample Articles Name <br>
			File Desc: <input type="text" id="DESC" name="DESC" maxlength="300" value="{{.DESC}}">Note: Some article description. <br>
			Category:<select name="CATEGORY" id="CATEGORY">
 
{{end}}
`
 
var rootTemplateArticleU3 = template.Must(template.New("rootTemplateArticleU3").Parse(rootTemplateHTMLArticleU3))
 
const rootTemplateHTMLArticleU3 = `
	{{range .}}
				<option selected>
				{{.CATEGORY}}
				</option>			
			</select>Current: {{.CATEGORY}}<br>
			Image URL: <input type="text" name="TAGS" maxlength="300" value="{{.TAGS}}">Note: From media gallery<br>
			Author: <input type="text" name="AUTHOR" maxlength="300" value="{{.AUTHOR}}"><br>
			Published Status:<select name="DOC_STAT" value="{{.DOC_STAT}}">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
			  <option value="Premium">Premium</option>
				<option selected>
				{{.DOC_STAT}}
				</option>
			</select><br>
			Shared Status: <select name="FL_SHARED" value="{{.FL_SHARED}}">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
				<option selected>
				{{.FL_SHARED}}
				</option>
			</select><br>
			Background Music Media ID: <input type="text" name="MUSIC_ID" maxlength="10" value="{{.MUSIC_ID}}"><br>
			Special Options: <br>
			<textarea  name="FL_COUNTRY_SPECIFIC" value="{{.FL_COUNTRY_SPECIFIC}}" maxlength="200" rows="10" cols="20"/>{{.FL_COUNTRY_SPECIFIC}}</textarea>
			<br><input type="submit" name="submit" value="Update Article">
			</form>
			<script type="text/javascript">
			    $(function() {
				
				$('#CATEGORY').searchableOptionList();
			    });
			</script>
	    </div>
    </div>
{{end}}
`
 
var rootTemplateSlideU1Del = template.Must(template.New("rootTemplateSlideU1Del").Parse(rootTemplateHTMLSlideU1Del))
 
const rootTemplateHTMLSlideU1Del = `
{{range .}}
	<div id="delete-slides" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1><font color=red>Delete Slide File</font></h1>
			<h3>Do you really want to delete this slide?</h3>
			<form action="/admin-slides?FUNC_CODE=DELETE" method="POST" enctype="multipart/form-data">
			<input type="hidden" name="DOC_ID" value="{{.DOC_ID}}">
			<input type="hidden" name="BLOB_URL" value="{{.BLOB_URL}}">
			<input type="hidden" name="FUNC_CODE" value="DELETE">
			<br><input type="submit" name="submit" value="Yes, delete this slide!">
			</form>
	    </div>
    </div>
{{end}}
`
var rootTemplateMediaU1Del = template.Must(template.New("rootTemplateMediaU1Del").Parse(rootTemplateHTMLMediaU1Del))
 
const rootTemplateHTMLMediaU1Del = `
{{range .}}
	<div id="delete-media" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1><font color=red>Delete Media File</font></h1>
			<h3>Do you really want to delete this media?</h3>
			<form action="/media?FUNC_CODE=DELETE" method="POST" enctype="multipart/form-data">
			<input type="hidden" name="MEDIA_ID" value="{{.MEDIA_ID}}">
			<input type="hidden" name="BLOB_KEY" value="{{.BLOB_KEY}}">
			<input type="hidden" name="FUNC_CODE" value="DELETE">
			<br><input type="submit" name="submit" value="Yes, delete this media!">
			</form>
	    </div>
    </div>
{{end}}
`
 
var rootTemplateMediaU1Go = template.Must(template.New("rootTemplateMediaU1Go").Parse(rootTemplateHTMLMediaU1Go))
 
const rootTemplateHTMLMediaU1Go = `
<script>
	document.getElementsByName("IMG_URL")[0].setAttribute("value","{{.}}");
</script>
`
 
var rootTemplateArticleU1Del = template.Must(template.New("rootTemplateArticleU1Del").Parse(rootTemplateHTMLArticleU1Del))
const rootTemplateHTMLArticleU1Del = `
{{range .}}
	<div id="delete-articles" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1><font color=red>Delete Article File</font></h1>
			<h3>Do you really want to delete this article?</h3>
			<form action="/admin-articles?FUNC_CODE=DELETE" method="POST" enctype="multipart/form-data">
			<input type="hidden" name="DOC_ID" value="{{.DOC_ID}}">
			<input type="hidden" name="BLOB_URL" value="{{.BLOB_URL}}">
			<input type="hidden" name="FUNC_CODE" value="DELETE">
			<br><input type="submit" name="submit" value="Yes, delete this article!">
			</form>
	    </div>
    </div>
{{end}}
`
 
var rootTemplateArticleU1ClearCache = template.Must(template.New("rootTemplateArticleU1ClearCache").Parse(rootTemplateHTMLArticleU1ClearCache))
 
const rootTemplateHTMLArticleU1ClearCache = `
{{range .}}
	<div id="clear-cache" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1><font color=red>Clear Cache</font></h1>
			<h3>Do you really want to clear the cache for this article?</h3>
			<form action="/admin-articles?FUNC_CODE=CLEAR-CACHE" method="POST" enctype="multipart/form-data">
			<input type="hidden" name="DOC_ID" value="{{.DOC_ID}}">
			<input type="hidden" name="BLOB_URL" value="{{.BLOB_URL}}">
			<input type="hidden" name="FUNC_CODE" value="CLEAR-CACHE">
			<br><input type="submit" name="submit" value="Yes, clear cache for this article!">
			</form>
	    </div>
    </div>
{{end}}
`
 
var rootTemplateSlideU1ClearCache = template.Must(template.New("rootTemplateSlideU1ClearCache").Parse(rootTemplateHTMLSlideU1ClearCache))
 
const rootTemplateHTMLSlideU1ClearCache = `
{{range .}}
	<div id="clear-cache" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1><font color=red>Clear Cache</font></h1>
			<h3>Do you really want to clear the cache for this slide?</h3>
			<form action="/admin-articles?FUNC_CODE=CLEAR-CACHE" method="POST" enctype="multipart/form-data">
			<input type="hidden" name="DOC_ID" value="{{.DOC_ID}}">
			<input type="hidden" name="BLOB_URL" value="{{.BLOB_URL}}">
			<input type="hidden" name="FUNC_CODE" value="CLEAR-CACHE">
			<br><input type="submit" name="submit" value="Yes, clear cache for this slide!">
			</form>
	    </div>
    </div>
{{end}}
`
 
var rootTemplateMediaD1 = template.Must(template.New("rootTemplateMediaD1").Parse(rootTemplateHTMLMediaD1))
 
const rootTemplateHTMLMediaD1 = `
	<div id="update-media" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h3>Update Text File Details</h3>
			<form action="/media" method="POST" enctype="multipart/form-data">
`
 
var rootTemplateMediaD2 = template.Must(template.New("rootTemplateMediaD2").Parse(rootTemplateHTMLMediaD2))
 
const rootTemplateHTMLMediaD2 = `
	{{range .}}
			<input type="hidden" name="MEDIA_ID" value="{{.MEDIA_ID}}">
			<input type="hidden" name="FUNC_CODE" value="UPDATE">
			Media ID: {{.MEDIA_ID}}<br>
			File Title: <input type="text" name="TITLE" maxlength="200" value="{{.TITLE}}">Note: Sample Image Name <br>
			File Desc: <input type="text" id="DESC" name="DESC" maxlength="300" value="{{.DESC}}">Note: Some image description. <br>
			Image URL: <input type="text" name="IMG_URL" maxlength="300" value="{{.IMG_URL}}">Note: Media image or icon<br>
			Data Type: <input type="text" id="DATA_TYPE" name="DATA_TYPE" maxlength="300" value="{{.DATA_TYPE}}"><br>
			Mime Type: <input type="text" id="MIME_TYPE" name="MIME_TYPE" maxlength="300" value="{{.MIME_TYPE}}"><a href="https://golang.org/misc/nacl/testdata/mime.types?m=text" target="mlist">List</a><br>
			Author: <input type="text" id="AUTHOR" name="AUTHOR" maxlength="300" value="{{.AUTHOR}}"><br>
			Category: 		<select name="CATEGORY">
 
{{end}}
`
 
var rootTemplateMediaD3 = template.Must(template.New("rootTemplateMediaD3").Parse(rootTemplateHTMLMediaD3))
 
const rootTemplateHTMLMediaD3 = `
	{{range .}}
				<option selected>
				{{.CATEGORY}}
				</option>			
			</select>Current: {{.CATEGORY}}<br>
			Published Status:<select name="DOC_STAT" value="{{.DOC_STAT}}">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
			  <option value="Premium">Premium</option>
				<option selected>
				{{.DOC_STAT}}
				</option>			
			</select><br>
			Shared Status: <select name="FL_SHARED" value="{{.FL_SHARED}}">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
				<option selected>
				{{.FL_SHARED}}
				</option>
			</select>
			<br><input type="submit" name="submit" value="Update Media">
			</form>
	    </div>
    </div>
{{end}}
`
 
var rootTemplateMediaGenUp1 = template.Must(template.New("rootTemplateMediaGenUp1").Parse(rootTemplateHTMLMediaGenUp1))
 
const rootTemplateHTMLMediaGenUp1 = `
	<div id="update-media" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<!--h3>Update Media Details</h3-->
			<form action="/media" method="POST" enctype="multipart/form-data">
`
 
var rootTemplateMediaGenUp2 = template.Must(template.New("rootTemplateMediaGenUp2").Parse(rootTemplateHTMLMediaGenUp2))
 
const rootTemplateHTMLMediaGenUp2 = `
	{{range .}}
			<input type="hidden" name="MEDIA_ID" value="{{.MEDIA_ID}}">
			<input type="hidden" name="FUNC_CODE" value="UPDATE">
			Media ID: {{.MEDIA_ID}}<br>
			File Title: <input type="text" name="TITLE" maxlength="200" value="{{.TITLE}}">Note: Sample Image Name <br>
			File Desc: <input type="text" id="DESC" name="DESC" maxlength="300" value="{{.DESC}}">Note: Some image description. <br>
			Image URL: <input type="text" name="IMG_URL" maxlength="300" value="{{.IMG_URL}}">Note: Media image or icon<br>
			Data Type: <input type="text" id="DATA_TYPE" name="DATA_TYPE" maxlength="300" value="{{.DATA_TYPE}}"><br>
			Mime Type: <input type="text" id="MIME_TYPE" name="MIME_TYPE" maxlength="300" value="{{.MIME_TYPE}}"><a href="https://golang.org/misc/nacl/testdata/mime.types?m=text" target="mlist">List</a><br>
			Author: <input type="text" id="AUTHOR" name="AUTHOR" maxlength="300" value="{{.AUTHOR}}"><br>
			Category: 		<select name="CATEGORY">
 
{{end}}
`
 
var rootTemplateMediaGenUp3 = template.Must(template.New("rootTemplateMediaGenUp3").Parse(rootTemplateHTMLMediaGenUp3))
 
const rootTemplateHTMLMediaGenUp3 = `
	{{range .}}
				<option selected>
				{{.CATEGORY}}
				</option>			
			</select>Current: {{.CATEGORY}}<br>
			Published Status:<select name="DOC_STAT" value="{{.DOC_STAT}}">
			  <option value="ULAPPH Only">ULAPPH Only</option>
			  <option value="Worldwide">Worldwide</option>
			  <option value="Personal">Personal</option>
			  <option value="Premium">Premium</option>
				<option selected>
				{{.DOC_STAT}}
				</option>			
			</select><br>
			Shared Status: <select name="FL_SHARED" value="{{.FL_SHARED}}">
			  <option value="Y">Shared</option>
			  <option value="N">Not Shared</option>
				<option selected>
				{{.FL_SHARED}}
				</option>
			</select>
			<br><input type="submit" name="submit" value="Update Media">
			</form>
	    </div>
    </div>
{{end}}
`
 
var rootTemplate2Ads = template.Must(template.New("rootTemplate2Ads").Parse(rootTemplateHTML2Ads))
 
const rootTemplateHTML2Ads = `
		<input type="hidden" name="DESKTOP" value="{{.}}">
		<input type="submit" name="submit" value="Upload Advertisement">
		</form>
	    </div>
    </div>
</body></html>
`

//serves TDSMEDIA contents given a SID and mime type
//before it serves data, it performs security checkings
func serveMediaContent(w http.ResponseWriter, r *http.Request, SID, MIME_TYPE string) {
	//c := appengine.NewContext(r)
	
	SPL := strings.Split(SID,"-")
	TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
	
	BLOB_KEY := ""					
	DOC_STAT := ""
	FL_SHARED := ""
	AUTHOR := ""
	SHARED_TO := ""
	
	switch TARGET {
		case "TDSSLIDE":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, _, SHARED_TO, _, _ = getTDSSLIDEBlobKey(w, r, docID)
		case "TDSARTL":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, SHARED_TO, _, _ = getTDSARTLBlobKey(w, r, docID)
		case "TDSMEDIA":
			BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, SHARED_TO = getTDSMEDIABlobKey(w, r, docID)	
	}
	
	_, uid := checkSession(w,r)
	
	FL_PROC_OK := false
	
	switch {
		
		case DOC_STAT == "Premium" && uid != AUTHOR:
			
			sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=%v", SID)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
				
		case FL_SHARED == "N" || DOC_STAT == "Personal" && SHARED_TO == "":
			isOk := checkPersonalAuthor(w,r,AUTHOR,SID,docID)
			if isOk == true {
				FL_PROC_OK = true
			}
				
		case DOC_STAT == "Personal" && SHARED_TO != "":
			isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, SID, docID)
			if isAllowed == true {
				//break
				FL_PROC_OK = true
			}
			
		case DOC_STAT == "ULAPPH Only":
			FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			FL_PROC_OK = true
 
		case DOC_STAT == "Worldwide" && FL_SHARED == "Y":
			//allow
			FL_PROC_OK = true
		
	}
 
	if FL_PROC_OK == true {
		if MIME_TYPE != "" {
			w.Header().Set("Content-Type",  MIME_TYPE)
		}
        //blobstore.Send(w, appengine.BlobKey(BLOB_KEY))	
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        w.Write(bData)	
	}
 
	return
	
}

//checks if current user has access to a Personal content 
func checkPersonalAccess(w http.ResponseWriter, r *http.Request, AUTHOR, SHARED_TO, SID string, MEDIA_ID int) (isAllowed bool) {
	//c := appengine.NewContext(r)
	//u := user.Current(c)
	isAllowed = false
	
	uid := ""
	if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		//uid = uid
		_, uid = checkSession(w,r)
	} else {
		uid = "@888@"
	}
	pc := r.FormValue("passcode")
	auth := r.FormValue("auth")
	if auth == "p" && pc != "" {
		uid = pc
	} else {
		uid = "@888@"
	}
 
	if auth == "p" && validatePasscode(w,r,"checkPersonalAccess(1)",SHARED_TO, pc) == true {
		isAllowed = true
		//return
	} else if (uid != AUTHOR) {
		msgDtl := fmt.Sprintf("[U00151b] ERROR: This document (%s) is accessible only to select individuals. Kindly request access from author.", SID)
		msgURL := url.QueryEscape(r.URL.String())
		msgTyp := "error"
		action := "U00151"
		sysReq := fmt.Sprintf("/sysmsg?SID=%v&msgTyp=%v&message=%v&msgURL=%v&action=%v", SID, msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)	
		return
	}
	return isAllowed
}

//serves media content via SID and mime type w/o checking security 
func serveMediaContentNow(w http.ResponseWriter, r *http.Request, SID, MIME_TYPE string) {
	SPL := strings.Split(SID,"-")
	TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
 
	BLOB_KEY := ""					
	
	switch TARGET {
		case "TDSSLIDE":
			BLOB_KEY, _, _, _, _, _, _, _, _, _ = getTDSSLIDEBlobKey(w, r, docID)
		case "TDSARTL":
			BLOB_KEY, _, _, _, _, _, _, _, _ = getTDSARTLBlobKey(w, r, docID)
		case "TDSMEDIA":
			BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)	
	}
	
	if MIME_TYPE != "" {
		w.Header().Set("Content-Type",  MIME_TYPE)
	}
    //blobstore.Send(w, appengine.BlobKey(BLOB_KEY))
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    w.Write(bData)
	return
	
}

//handles display settings for desktop UIs 
//handles the macOS-like docks and icons
func settingsDisplayScreen(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
 
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	aUser := r.FormValue("aUser")
	tok := r.FormValue("tok")
	FL_TOKEN_PROC := false
	if aUser == "" && tok == "" {
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
		if FL_PROC_OK == false {return}
	} else {
		FL_TOKEN_PROC = validateToken(w, r, "IS_VALID_USER", aUser, tok)
	}
	
	USER_EMAIL_ID := ""
	uid := ""
	deskName := ""
	if FL_TOKEN_PROC == false {
		_, uid := checkSession(w,r)
		FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
		if FL_PROC_OK == false {return}
		USER_EMAIL_ID = uid
	} else {
		deskName = "desktop0"
		USER_EMAIL_ID = aUser
	}
 
	FUNC_UPD_SET := r.FormValue("updateIcons")
	FUNC_DEL_ICO := r.FormValue("deleteIcons")
	FUNC_SHR_ICO := r.FormValue("shareIcons")
	FUNC_LOD_ICO := r.FormValue("loadIcons")
	FUNC_DOCK_ICO := r.FormValue("dockIcons")
	FUNC_DOCK_ICO_GO := r.FormValue("fromIcons")
	FUNC_SET_DESKTOP_WP := r.FormValue("setWallpaper")
	FUNC_SHR_D0_ICONS := r.FormValue("loadIcons")
	updateUserActiveData(w, r, c, USER_EMAIL_ID, "/settings")
	deskName = r.FormValue("desktop-name")
	if deskName !=  "desktop0" {
		USER_EMAIL_ID = deskName
	}
 
	uid = fmt.Sprintf("%v",r.FormValue("uid"))
	mycss := r.FormValue("mycss")
	currDesktop := fmt.Sprintf("%v",r.FormValue("desktop-name"))
	desktopCss := fmt.Sprintf("%s_css",r.FormValue("desktop-name"))
	newIcons := strings.Replace(r.FormValue("mychecks"), "icon", "", -1)
	desktopIcons := fmt.Sprintf("%s_icons",r.FormValue("desktop-name"))
	LOAD_DATA := r.FormValue("LOAD_DATA")
	CFG_DESC := r.FormValue("CFG_DESC")
	NUM_VAL := str2int(r.FormValue("NUM_VAL"))
	r.ParseForm()
	
	sl := strings.Split(currDesktop, "desktop")
	thisDesk:= sl[len(sl)-1]
	thisDeskNum := str2int(thisDesk)
 
	switch {
	
	case FUNC_DOCK_ICO == "UpdateDock":
			deskN := fmt.Sprintf("%v_icons", deskName)
			var buffer3 bytes.Buffer
			
			deskNumVal := str2int(r.FormValue("dockTarget"))
			
			//DOCKS_LIST_desktop0_ulapph@gmail.com
			cKey := fmt.Sprintf("DOCKS_LIST_%v_%s", deskName, USER_EMAIL_ID)
			DOCKS_LIST_desktop := ""
            DOCKS_LIST := ""
            DOCKS_LIST_desktop = getStrMemcacheValueByKey(w,r,cKey)
            if DOCKS_LIST_desktop != "" {
				DOCKS_LIST = DOCKS_LIST_desktop
			}
			
			if DOCKS_LIST_desktop == "" {
			
				q := datastore.NewQuery("TDSCNFG").Filter("USER =", USER_EMAIL_ID).
												   Filter("CFG_ID =", deskN).
												   Limit(100)
				//log.Panicf("[S0385]")
				config := make([]TDSCNFG, 0, 100)
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					 panic(err)
				}
                //log.Printf("datastoreClient.Get()  [55107]")
				for _, p := range config {
					DOCKS_LIST = fmt.Sprintf("%v#dock%v-%v-%v", DOCKS_LIST, p.NUM_VAL, p.TXT_VAL, p.CFG_DESC)
				}
				DOCKS_LIST = fmt.Sprintf("%v%v", DOCKS_LIST, DOCKS_LIST)
				
				putStrToMemcacheWithoutExp(w,r,cKey,DOCKS_LIST)
				//fmt.Fprintf(w, "DOCKS_LIST: %v", DOCKS_LIST)
			}
			
			if DOCKS_LIST == "" {
			
				putStrToMemcacheWithoutExp(w,r,cKey,"")
				
				thisDock := fmt.Sprintf("<div class=\"error2\">[U00155]ERROR: Error retrieving desktop icons. Please go to <a href=\"/settings\">Settings</a> to check your desktop icons or <a href=\"/settings\">reload</a> this page.</div>")
				writeHTMLHeader(w, 200)
				w.Write([]byte(thisDock))
				return				
			}
			
			
			iconsStr := ""
			iconsDesc := ""
			iconNumVal := 0	
			thisDock := fmt.Sprintf("dock%v", deskNumVal)
			
			//fmt.Fprintf(w, "DOCKS_LIST: %v", DOCKS_LIST)
			//fmt.Fprintf(w, "thisDock: %v", thisDock)
			//#dock20150206195818-desktop0,360,749,751,752,806,753,754,755,600,409,406,746,468,474,619,-TITLE HERE#dock20150219073532-desktop0,511,530,580,510,471,499,508,637,758,744,756,418,540,592,509,#dock20150309212337-desktop0,360,749,751,752,753,754,755,600,409,406,746,468,474,619,477,#dock0-desktop0,360,749,751,752,753,754,755,600,409,406,746,468,474,619,806,
			if FUNC_DOCK_ICO_GO == "N" {
				//fmt.Fprintf(w, "NEXT")
				docksArr := strings.Split(DOCKS_LIST, "#")
				for i := 0; i <= len(docksArr); i++ {
					thisText := docksArr[i]
					//fmt.Fprintf(w, "thisText: %v", thisText)
					if thisText != "" {
						//dock0-desktop0,446,447,448,449,450,451,452,453,454,455,456,457,458,459,461,-TITLE HERE
						dockArr := strings.Split(thisText, "-")
						if dockArr[0] == thisDock {
							//get next element as next dock
							y := i + 1
							thisText := docksArr[y]
							//fmt.Fprintf(w, "thisText: %v", thisText)
							dockNow := strings.Split(thisText, "-")
							iconsStr = dockNow[1]
							iconsDesc = dockNow[2]
							dockNowNum := strings.Split(dockNow[0], "dock")
							//fmt.Fprintf(w, "iconsStr: %v", iconsStr)
							iconNumVal = str2int(dockNowNum[1])
							//fmt.Fprintf(w, "iconNumVal: %v", iconNumVal)	
						}
						if iconsStr != "" && iconNumVal >= 0 {
							break
						}
						
					}
				}
				
			} else {
				//fmt.Fprintf(w, "PREVIOUS")
				docksArr := strings.Split(DOCKS_LIST, "#")
				for i := 0; i <= len(docksArr); i++ {
					thisText := docksArr[i]
					//fmt.Fprintf(w, "thisText: %v", thisText)
					if thisText != "" {
						//dock0-desktop0,446,447,448,449,450,451,452,453,454,455,456,457,458,459,461,
						dockArr := strings.Split(thisText, "-")
						if dockArr[0] == thisDock {
 
							//get next element as next dock
							if i > 1 {
								y := i - 1
								thisText := docksArr[y]
								//fmt.Fprintf(w, "thisText: %v", thisText)
								dockNow := strings.Split(thisText, "-")
								iconsStr = dockNow[1]
								iconsDesc = dockNow[2]
								dockNowNum := strings.Split(dockNow[0], "dock")
								//fmt.Fprintf(w, "iconsStr: %v", iconsStr)
								iconNumVal = str2int(dockNowNum[1])
								//fmt.Fprintf(w, "iconNumVal: %v", iconNumVal)	
							}
							if iconsStr != "" && iconNumVal >= 0 {
								break
							}
						}
						
					}	
				}
			}
			//fmt.Fprintf(w, "iconsStr: %v", iconsStr)
			iconsArr := strings.Split(iconsStr,",")
			if len(iconsArr) <= 1 {
			
				if deskName !=  "desktop0" {
					//get cached desktop items
					TASK_MEMCACHER_desktopIcons := ""
                    cKey = fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%v", deskName)
                    TASK_MEMCACHER_desktopIcons = getStrMemcacheValueByKey(w,r,cKey)
                    if TASK_MEMCACHER_desktopIcons != "" {
						writeHTMLHeader(w, 200)
						w.Write([]byte(TASK_MEMCACHER_desktopIcons))
						return
					}
					
				} else {
					//get cached desktop items
					TASK_MEMCACHER_desktopIcons := ""
 
                    cKey = fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%s_%s", deskName, uid)
                    TASK_MEMCACHER_desktopIcons = getStrMemcacheValueByKey(w,r,cKey)
                    if TASK_MEMCACHER_desktopIcons != "" {
						writeHTMLHeader(w, 200)
						w.Write([]byte(TASK_MEMCACHER_desktopIcons))
						return
					}
									
				}
			}
			if (iconsArr[0] == deskName) {
				//fmt.Fprintf(w, "iconsArr[0] %v", iconsArr[0])
				buffer3.WriteString(fmt.Sprintf("<input type=\"hidden\" id=\"dispAds\" value=\"%v\">", SYS_DISP_ADS_RIGHT))
				buffer3.WriteString(fmt.Sprintf("<input type=\"hidden\" id=\"desktop\" value=\"%v\">", deskName))
				buffer3.WriteString(fmt.Sprintf("<input type=\"hidden\" id=\"dName\" value=\"%v\">", deskNum2Name(w,r,uid,deskName)))
				buffer3.WriteString(fmt.Sprintf("<input type=\"hidden\" id=\"aUser\" value=\"%v\">", aUser))
				buffer3.WriteString(fmt.Sprintf("<input type=\"hidden\" id=\"tok\" value=\"%v\">", tok))
				buffer3.WriteString(fmt.Sprintf("<input type=\"hidden\" id=\"host\" value=\"%v\">", getSchemeUrl(w,r)))
				buffer3.WriteString(fmt.Sprintf("<input type=\"hidden\" id=\"mode\" value=\"full\">"))
				buffer3.WriteString(fmt.Sprintf("<div id=\"focusCont\"></div>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"Desktop\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"#\" onclick=\"ULAPPH_UPD_DOCK_P('%d');return false;\">", iconNumVal))
				buffer3.WriteString(fmt.Sprintf("	 <em><span>Previous</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("		<img src=\"/static/img/arrow_left.png\" title=\"Desktop Switcher\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("	</a>"))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				
				myCtr := 0
				for i := 1; i < len(iconsArr) && i <= 14; i++ {
					thisIcon := iconsArr[i]
					if thisIcon != "" {
						//buffer3.WriteString(fmt.Sprintf("iconsArr[%s]:\n", thisIcon))
						//get icon details
						thisIconNum := str2int(thisIcon)
						//buffer3.WriteString(fmt.Sprintf("iconsArr[%d]:\n", thisIconNum))
						dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
						key := datastore.NameKey("TDSICONS", dsKey, nil)
						q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
						//log.Panicf("[S0386]")
						icons := make([]TDSICONS, 0, 1)
						if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [55259]")
						for _, p := range icons {
							buffer3.WriteString(fmt.Sprintf("<li id=\"%s\">", p.ICON_NAME))
							buffer3.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=D\" target=%v> ", p.URL_ADD, p.ICON_NAME, p.ICON_ID, p.ICON_ID))
							buffer3.WriteString(fmt.Sprintf("<em><span>%s</span></em><br>", p.ICON_NAME))
							buffer3.WriteString(fmt.Sprintf("<img src=\"%s\" title=\"%s\" height=\"40\" width=\"40\"/> ", p.IMG_SRC, p.ICON_NAME))	
							buffer3.WriteString(fmt.Sprintf("</a>"))
							buffer3.WriteString(fmt.Sprintf("</li>"))
							buffer3.WriteString(fmt.Sprintf("</li>"))
							myCtr++
						} 						
						
					}
					
				}
				if myCtr == 0 {
 
					myrand := randNum(1, 3)
					switch myrand {
						case 1:
							buffer3.WriteString(fmt.Sprintf("<li id=\"JollibeeDelivery\"><a href=\"/click-url/?URL_ADD=http://jollibeedelivery.com/&ICON_NAME=JollibeeDelivery&ICON_ID=714&URL_TYP=W&DISP_TYP=D\" target=\"714\"> <em><span>JollibeeDelivery</span></em><br><img src=\"https://lh3.googleusercontent.com/gohR6pfHzr7kAVDPSIO11QOsLZEnm7jvGVy-tpLTEjVqzY1ZRrrbJ480yRmExOKjqnTH9SRwj9J22-x7mWKxYsJ1JFVS\" title=\"JollibeeDelivery\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"BPI\"><a href=\"/click-url/?URL_ADD=http://www.bpiexpressonline.com/&ICON_NAME=BPI&ICON_ID=713&URL_TYP=W&DISP_TYP=D\" target=\"713\"> <em><span>BPI</span></em><br><img src=\"https://lh3.googleusercontent.com/7mxRPMiwFZs-Hud2dIJ4UHx9KMb3qajQVrZ85BCkcE-83U4_o26OSilCuzjx4OTQgaxzMEG5ptPSRFePXdoW5d5V6JPn\" title=\"BPI\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"eBay\"><a href=\"/click-url/?URL_ADD=http://www.ebay.ph/&ICON_NAME=eBay&ICON_ID=655&URL_TYP=W&DISP_TYP=D\" target=\"655\"> <em><span>eBay</span></em><br><img src=\"https://lh3.googleusercontent.com/MGJ9hllOzinua96NJ5FFFUbWYJY-2rJBHBxSUqVy2pQCXeVP0_HkIbBYLr3TpZJleqZpekrKxpogmj5mrF2Y0Clg39I\" title=\"eBay\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Paypal\"><a href=\"/click-url/?URL_ADD=http://www.paypal.com&ICON_NAME=Paypal&ICON_ID=715&URL_TYP=W&DISP_TYP=D\" target=\"715\"> <em><span>Paypal</span></em><br><img src=\"https://lh3.googleusercontent.com/mrt6PrVlb67jiwbIaJf3WwXvqlLYBHYwTlqEi2kEG2hiIyRBiZXLHEJt08y-8dfEQUvgVe4yZjMiZgt7Primg4OybPd6\" title=\"Paypal\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"OLXPH\"><a href=\"/click-url/?URL_ADD=http://olx.ph/&ICON_NAME=OLXPH&ICON_ID=718&URL_TYP=W&DISP_TYP=D\" target=\"718\"> <em><span>OLXPH</span></em><br><img src=\"https://lh3.googleusercontent.com/OyzSDW0b6LPKCqDbNWwvmFNiXT2UNMn9sNMc6hUn-0K_9eMgb0TFfzlBYXcpJry6Tugd8L794Ux2GO515nBQB_6Ft0c7\" title=\"OLXPH\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"TipidPC\"><a href=\"/click-url/?URL_ADD=http://www.tipidpc.com/&ICON_NAME=TipidPC&ICON_ID=719&URL_TYP=W&DISP_TYP=D\" target=\"719\"> <em><span>TipidPC</span></em><br><img src=\"https://lh3.googleusercontent.com/3ZY-HGegHIp6CIb8oEHYp_BqyNeK6rS3xesHweJE4LMhnrVo82AGad6mRBgZjsUf8JBC5x-o95D1b6ZNNgehxvRgY-jl\" title=\"TipidPC\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Meetup\"><a href=\"/click-url/?URL_ADD=http://www.meetup.com/&ICON_NAME=Meetup&ICON_ID=716&URL_TYP=W&DISP_TYP=D\" target=\"716\"> <em><span>Meetup</span></em><br><img src=\"https://lh3.googleusercontent.com/kCaNsMbR06rnSMEJ2Klw6pmfgQY4HRoZZ74V1_AZp12v_C0qzL6CTqxWJKG05loFAffgNDG42Pr8h9UKJxSBO0hTDpu3\" title=\"Meetup\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"BDO\"><a href=\"/click-url/?URL_ADD=http://www.bdo.com.ph/&ICON_NAME=BDO&ICON_ID=410&URL_TYP=W&DISP_TYP=D\" target=\"410\"> <em><span>BDO</span></em><br><img src=\"https://lh3.googleusercontent.com/8nNLPUdkCaA_TyYLkiHfS5nN6bh3YsN9B14O43r-J_HYv7Yde2GQsQ27sKrMCZWH-2otdylyCVEuQPaXcKAUXV3HmW3myA\" title=\"BDO\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"pnb\"><a href=\"/click-url/?URL_ADD=http://www.pnb.com.ph/&ICON_NAME=pnb&ICON_ID=418&URL_TYP=W&DISP_TYP=D\" target=\"418\"> <em><span>pnb</span></em><br><img src=\"https://lh3.googleusercontent.com/gYGhIa7IkdYAfsj7qGegkx_KJDCa774qRLzq8xHPpxOVD1ssgXupwsiUR4wEfSzh7Z7ZYbfZLPENSeOaOB1GeDFS78w\" title=\"pnb\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Landbank\"><a href=\"/click-url/?URL_ADD=http://www.landbank.com/&ICON_NAME=Landbank&ICON_ID=416&URL_TYP=W&DISP_TYP=D\" target=\"416\"> <em><span>Landbank</span></em><br><img src=\"https://lh3.googleusercontent.com/jTdks898bm4kN5NqybB7OmJkqsiqym41v6jZB6EOQlZfLRP1ASRl7ciZPXDv1n1USpFIAJx4QPU2isDv5i1njqvxSlEI\" title=\"Landbank\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Animal Planet\"><a href=\"/click-url/?URL_ADD=http://www.animalplanet.com/&ICON_NAME=Animal Planet&ICON_ID=474&URL_TYP=W&DISP_TYP=D\" target=\"474\"> <em><span>Animal Planet</span></em><br><img src=\"https://lh3.googleusercontent.com/jdKIaYW-SfX1bNKzerYFsxtVoB2hLyLp_SRIlKBWjnpPyt0v4yiJfI2k1XukoEPInM6yO2wEJOO1vFG0Zg0UlFk_QFTh\" title=\"Animal Planet\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Discovery\"><a href=\"/click-url/?URL_ADD=http://www.discovery.com/&ICON_NAME=Discovery&ICON_ID=475&URL_TYP=W&DISP_TYP=D\" target=\"475\"> <em><span>Discovery</span></em><br><img src=\"https://lh3.googleusercontent.com/kntaGRQ8n_8XJantnCuPURxXwg90ndhpd1BSmfmC6ugPmwC8Z9S5WkcyAbI4ti42G8aJjVCQILH7NfmwnwZsLS6bP3cM\" title=\"Discovery\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Bureau of Internal Revenue\"><a href=\"/click-url/?URL_ADD=http://www.bir.gov.ph/&ICON_NAME=Bureau of Internal Revenue&ICON_ID=460&URL_TYP=W&DISP_TYP=D\" target=\"460\"> <em><span>Bureau of Internal Revenue</span></em><br><img src=\"https://lh3.googleusercontent.com/a0QeuiEAzTMtMRehY_O3AoQQl3nZ9f68HjK1Y39Kzh1aaO2uqADWSqaB14N5qxONAMIvb1mqeu4nctA0CRVItKYk0qI\" title=\"Bureau of Internal Revenue\" height=\"40\" width=\"40\"/> </a></li></li>"))
						case 2:
							buffer3.WriteString(fmt.Sprintf("<li id=\"Linked In\"><a href=\"/click-url/?URL_ADD=http://www.linkedin.com&ICON_NAME=Linked In&ICON_ID=668&URL_TYP=W&DISP_TYP=D\" target=\"668\"> <em><span>Linked In</span></em><br><img src=\"https://lh3.googleusercontent.com/Ci2FFgZqLH3-0x5ngXj-Cgoxxb-iob5obTT33r5pjuBm6SwSrC1ir9N5oQVKT6LJ3sP-xj4qsBTqfl9OFfskZinITFP8\" title=\"Linked In\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Stumble Upon\"><a href=\"/click-url/?URL_ADD=http://www.stumbleupon.com/&ICON_NAME=Stumble Upon&ICON_ID=660&URL_TYP=W&DISP_TYP=D\" target=\"660\"> <em><span>Stumble Upon</span></em><br><img src=\"https://lh3.googleusercontent.com/Lzkf0icLob0A3cwE-lkuQx6G_Psyhhpy309yMF5rJFHmeIDdLVtdfpZea-9Zjt-LsMT-jeGK4_GEmK9RVmso50MoWVco\" title=\"Stumble Upon\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Chat Roulette\"><a href=\"/click-url/?URL_ADD=http://chatroulette.com/&ICON_NAME=Chat Roulette&ICON_ID=25&URL_TYP=W&DISP_TYP=D\" target=\"25\"> <em><span>Chat Roulette</span></em><br><img src=\"https://lh3.googleusercontent.com/VwCzFGSFWrH1Jg5tyvULm7w5LM33h7hCg1q_1S3cVRmrhdi57LySP8Z4EbbXJov2sCBhwQYJq3rOLmCzqKm4A4qYO8-YlqI\" title=\"Chat Roulette\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Facebook\"><a href=\"/click-url/?URL_ADD=http://www.facebook.com/?_rdr=p&ICON_NAME=Facebook&ICON_ID=669&URL_TYP=W&DISP_TYP=D\" target=\"669\"> <em><span>Facebook</span></em><br><img src=\"https://lh3.googleusercontent.com/1qOxwYf7J0SermAXj1CBgDGRK1Bq8rzDNFA9U-6azWKI6r6J4PTaE3xQjwh6W6YU13j0xWTE9EVFXAVACKk1TiiVyiJC\" title=\"Facebook\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Twitter\"><a href=\"/click-url/?URL_ADD=http://www.twitter.com&ICON_NAME=Twitter&ICON_ID=672&URL_TYP=W&DISP_TYP=D\" target=\"672\"> <em><span>Twitter</span></em><br><img src=\"https://lh3.googleusercontent.com/BIxAVI3XDLoWN5-1k8tRBMgohdM0JBl_bb0ahwCkhapkKYBkIbQYkhRGGzBftkUVG6ZASDPFjPkJsxhQOTRvVLGe1Ws\" title=\"Twitter\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Blogger\"><a href=\"/click-url/?URL_ADD=http://www,blogger.com&ICON_NAME=Blogger&ICON_ID=571&URL_TYP=W&DISP_TYP=D\" target=\"571\"> <em><span>Blogger</span></em><br><img src=\"https://lh3.googleusercontent.com/my2ZHqrJ3tDDOzQ9jxBZo6_UmWxhAijj4ZVQeKb5yOjr7XN4KJ7YWWDUcBkDifZjZh7GpWIzwL5Y_eAAA7YwZSlbrgQ2\" title=\"Blogger\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"FilipiKnow\"><a href=\"/click-url/?URL_ADD=http://www.filipiknow.net/&ICON_NAME=FilipiKnow&ICON_ID=307&URL_TYP=W&DISP_TYP=D\" target=\"307\"> <em><span>FilipiKnow</span></em><br><img src=\"https://lh3.googleusercontent.com/nt90DRSBExLE_qYsDYBmEHvckqO9c_ddiHrTYk2iMgLYIRiFJ5SsDcagZiztnfiAbCBImYNnHbJ13upXIoXTYouQY6o9\" title=\"FilipiKnow\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"click the city\"><a href=\"/click-url/?URL_ADD=http://www.clickthecity.com/&ICON_NAME=click the city&ICON_ID=336&URL_TYP=W&DISP_TYP=D\" target=\"336\"> <em><span>click the city</span></em><br><img src=\"https://lh3.googleusercontent.com/pK0q_N0qRIiSng42l0_aZF68SA_qcmMSALyB6sSrBV0JNC_5LUPqoOGGonHUjBvCOYUpcUgO0wccFl3mzRkE11BF-Ylx\" title=\"click the city\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Instagram\"><a href=\"/click-url/?URL_ADD=http://instagram.com/&ICON_NAME=Instagram&ICON_ID=567&URL_TYP=W&DISP_TYP=D\" target=\"567\"> <em><span>Instagram</span></em><br><img src=\"https://lh3.googleusercontent.com/iochvnC9j5Qdll5izBqOzOPUd4vefJCxyCt8INKnSYMtVWehRyHIt5gXZ1WNxHZ-yTjlcnnImqfVlgyTHqBGFqvhji4C\" title=\"Instagram\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Skype\"><a href=\"/click-url/?URL_ADD=http://www.skype.com/en/&ICON_NAME=Skype&ICON_ID=659&URL_TYP=W&DISP_TYP=D\" target=\"659\"> <em><span>Skype</span></em><br><img src=\"https://lh3.googleusercontent.com/YgNw0x0-vlRPHte4Ae6dxc49zdCeF-bThsqUHdJuwigyrpESmzjlBS6BbrktNhHmQh2_MAN7s1e86M6a48Xab8JIPsgN\" title=\"Skype\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Sky FM\"><a href=\"/click-url/?URL_ADD=http://www.radiotunes.com/&ICON_NAME=Sky FM&ICON_ID=642&URL_TYP=W&DISP_TYP=D\" target=\"642\"> <em><span>Sky FM</span></em><br><img src=\"https://lh3.googleusercontent.com/P99EihxSc56pQ3fd744OuJ05e-pYWLSwouCjmU0NeuvQR_A0LMkXoWL80S-Qk0whw-MoSVBWXuyE499t_jfc3nYwL4kvSw\" title=\"Sky FM\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"pinoy exchange\"><a href=\"/click-url/?URL_ADD=http://www.pinoyexchange.com/&ICON_NAME=pinoy exchange&ICON_ID=309&URL_TYP=W&DISP_TYP=D\" target=\"309\"> <em><span>pinoy exchange</span></em><br><img src=\"https://lh3.googleusercontent.com/ThUprsVGtxWBmzxn7-iz6ZOoh0G7TF_9HW_bLWfY6f_M5_ljoKyInTBTE_6NkH7FLPbj2Kpqs2LWxgyNb2_xY3yh1BCoKQ\" title=\"pinoy exchange\" height=\"40\" width=\"40\"/> </a></li></li><li id=\"Youtube\"><a href=\"/click-url/?URL_ADD=https://www.youtube.com/&ICON_NAME=Youtube&ICON_ID=673&URL_TYP=W&DISP_TYP=D\" target=\"673\"> <em><span>Youtube</span></em><br><img src=\"https://lh3.googleusercontent.com/2D3sQcvbJd406p1XSBQEUxA-0MG5C8XONYFo-zEsG2KiKe2iG7SlZcFi5kLtsA7U9tqo3dEeLPZuEDXOHXUrrC0BcMA\" title=\"Youtube\" height=\"40\" width=\"40\"/> </a></li></li>"))
						case 3:
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Drive\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://drive.google.com/?authuser=0#my-drive\" target=\"drive-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Drive</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/GDrive.png\" title=\"Google Drive\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Docs\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://docs.google.com/\" target=\"docs-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Docs</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/docs.png\" title=\"Docs\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Slides\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://docs.google.com/presentation/u/0/\" target=\"slides-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Slides</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/slides.png\" title=\"Slides\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Sheets\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://docs.google.com/spreadsheets/u/0/\" target=\"sheets-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Sheets</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/sheets.png\" title=\"Sheets\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Drawings\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://docs.google.com/drawings\" target=\"drawings-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Drawings</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/drawings.png\" title=\"Drawings\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Forms\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://docs.google.com/forms/\" target=\"forms-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Forms</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/forms.png\" title=\"Forms\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Notes\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://keep.google.com\" target=\"notes-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Notes</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/googlekeep.png\" title=\"Google Keep\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Gmail\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://gmail.google.com/\" target=\"gmail-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Gmail</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/Gmail.png\" title=\"Gmail\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Calendar\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://calendar.google.com/\" target=\"calendar-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Calendar</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/GCalendar.png\" title=\"Calendar\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Translate\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://translate.google.com.ph/\" target=\"trans-frame\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Translate</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/translate.png\" title=\"Translate\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
							buffer3.WriteString(fmt.Sprintf("        <li id=\"Google Maps\">"))
							buffer3.WriteString(fmt.Sprintf("         <a href=\"https://maps.google.com\" target=\"google-maps\">"))
							buffer3.WriteString(fmt.Sprintf("             <em><span>Google Maps</span></em><br>"))
							buffer3.WriteString(fmt.Sprintf("                <img src=\"/static/img/google-maps.png\" title=\"Google Maps\" height=\"40\" width=\"40\"/>"))
							buffer3.WriteString(fmt.Sprintf("            </a>"))
							buffer3.WriteString(fmt.Sprintf("        </li>"))
						
					}
					
				}
				//append fix icons
				buffer3.WriteString(fmt.Sprintf("<li id=\"Articles\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"/articles?CATEGORY=%v\">", deskName))
				buffer3.WriteString(fmt.Sprintf("     <em><span>Articles</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("        <img src=\"/static/img/ulapph-icons-articles.png\" title=\"Articles\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("    </a>"))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"Slides\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"/slides?CATEGORY=%v\">", deskName))
				buffer3.WriteString(fmt.Sprintf("     <em><span>Slides</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("        <img src=\"/static/img/ulapph-icons-slides.png\" title=\"Slides\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("    </a>"))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"Media\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"/media?q=%v\"> ", deskName))
				buffer3.WriteString(fmt.Sprintf("     <em><span>Media</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("        <img src=\"/static/img/ulapph-icons-media.png\" title=\"Media\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("    </a> "))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"Chat\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"/chat?q=%v\"> ", deskName))
				buffer3.WriteString(fmt.Sprintf("     <em><span>Chat</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("        <img src=\"/static/img/chat.png\" title=\"Chat\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("    </a> "))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"InfoDB\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"/infodb?q=%v\"> ", deskName))
				buffer3.WriteString(fmt.Sprintf("     <em><span>InfoDB</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("        <img src=\"/static/img/ulapph-icons-infodb.png\" title=\"InfoDB\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("    </a> "))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"Settings\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"/settings?q=%v\">", deskName))
				buffer3.WriteString(fmt.Sprintf("     <em><span>Settings</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("        <img src=\"/static/img/ulapph-icons-settings.png\" title=\"Settings\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("    </a>"))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"Admin\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"/admin-setup\">"))
				buffer3.WriteString(fmt.Sprintf("     <em><span>Admin</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("        <img src=\"/static/img/admin-icon.png\" title=\"Admin\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("    </a>"))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"Logout\">"))
				buffer3.WriteString(fmt.Sprintf(" <a href=\"/logout?q=%v\">", deskName))
				buffer3.WriteString(fmt.Sprintf("     <em><span>Logout</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("        <img src=\"/static/img/ulapph-icons-logout.png\" title=\"Logout\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("    </a>"))
				buffer3.WriteString(fmt.Sprintf("</li>"))
				buffer3.WriteString(fmt.Sprintf("<li id=\"Desktop\">"))	
				buffer3.WriteString(fmt.Sprintf(" <a href=\"#\" onclick=\"ULAPPH_UPD_DOCK_N('%d');return false;\">", iconNumVal))
				buffer3.WriteString(fmt.Sprintf("	 <em><span>Next</span></em><br>"))
				buffer3.WriteString(fmt.Sprintf("		<img src=\"/static/img/arrow_right.png\" title=\"Desktop Switcher\" height=\"40\" width=\"40\"/>"))
				buffer3.WriteString(fmt.Sprintf("	</a>"))
				buffer3.WriteString(fmt.Sprintf("</li>"))
			}
 
			//append description
			buffer3.WriteString(fmt.Sprintf("***!!!%v", iconsDesc))	
			iconsHTML := buffer3.String()
			
			if iconsHTML == "" {
			
				thisDock := fmt.Sprintf("<div class=\"error2\">[U00156] ERROR: Error retrieving desktop icons. Please go to <a href=\"/settings\">Settings</a> to check your desktop icons.</div>")
				writeHTMLHeader(w, 200)
				w.Write([]byte(thisDock))
				return				
			}
			
			writeHTMLHeader(w, 200)
			w.Write([]byte(iconsHTML))
			return
		//}
		
	case FUNC_SHR_ICO == "Share Icons" && FUNC_UPD_SET == "" && FUNC_DEL_ICO == "":

		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
		
			if (GROUP_ID == "GRP_ADMIN") {
				
				iconsArr := strings.Split(newIcons,",")
				if (iconsArr[0] == currDesktop) {
					for i := 1; i < len(iconsArr); i++ {
						thisIcon := iconsArr[i]
						if thisIcon != "" {
							//get icon blobkey to be deleted
							thisIconNum := str2int(thisIcon)
							dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
							key := datastore.NameKey("TDSICONS", dsKey, nil)
							q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
							//log.Panicf("[S0387]")
							icons := make([]TDSICONS, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [55452]")
							for _, p := range icons{
							//share ICONS
								p.DESKTOP = "all"
								thisKey := fmt.Sprintf("ICON[%d]", thisIconNum)
								key := datastore.NameKey("TDSICONS", thisKey, nil)
								if _, err := datastoreClient.Put(c, key, &p); err != nil {
									 panic(err)
                                }
                                //log.Printf("datastoreClient.Put()  [55461]")
								//log.Panicf("[S0388]")
								
								//notify all users of this event via channels
								msgDtl3 := fmt.Sprintf("<img src=\"%v\" width=200 height=200><br>Icon(%v) have been shared.", p.IMG_SRC, thisIconNum)	
								sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/admin-icons",""),"")
			
								msgDtl := "[U00066] SUCCESS: Icon(s) have been shared"
								msgTyp := "success"
								//msgURL := fmt.Sprintf("/%v#page", currDesktop)
								msgURL := ""
								if currDesktop == "desktop0" {
									msgURL = fmt.Sprintf("/%v", currDesktop)
								} else {
									msgURL = fmt.Sprintf("/desktop?d=%v", thisDeskNum)
								}
								action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go back to desktop.", msgURL)
								redURL := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
								http.Redirect(w, r, redURL, http.StatusFound)
								//return
								break
							}
						}
						
					}
				}
			
			} else {	
				msgDtl := "[U00067] ERROR: Icon(s) cannot be shared because of your account type."
				msgTyp := "error"
				msgURL := ""
				if currDesktop == "desktop0" {
					msgURL = fmt.Sprintf("/%v", currDesktop)
				} else {
					msgURL = fmt.Sprintf("/desktop?d=%v", thisDeskNum)
				}
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to desktop.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		
		}
		
	case FUNC_DEL_ICO == "Delete Icons" && FUNC_UPD_SET == "" && FUNC_SHR_ICO == "":
	
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
		
			if (GROUP_ID == "GRP_ADMIN") {
				
				thisIconNum := 0
				iconsArr := strings.Split(newIcons,",")
				if (iconsArr[0] == currDesktop) {
					for i := 1; i < len(iconsArr); i++ {
						thisIcon := iconsArr[i]
						if thisIcon != "" {
							//get icon blobkey to be deleted
							thisIconNum = str2int(thisIcon)
							dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
							key := datastore.NameKey("TDSICONS", dsKey, nil)
							q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
							//log.Panicf("[S0389]")
							icons := make([]TDSICONS, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [55531]")
							for _, p := range icons{
									if p.BLOB_KEY != "" {
										//blobstore.Delete(c, appengine.BlobKey(p.BLOB_KEY))	
										err := deleteGcsObject(c, p.BLOB_KEY)
										if err != nil {
											log.Fatalf("ERROR: deleteGcsObject() %v", err)
										}
									}
									break
							}
							//delete from ICONS
							thisKey := fmt.Sprintf("ICON[%d]", thisIconNum)
							key = datastore.NameKey("TDSICONS", thisKey, nil)
							datastoreClient.Delete(c, key)
							//delete icon from search idx
							thisIdxKey := fmt.Sprintf("TDSICONS-%d", thisIconNum)
							index, err := search.Open("IDX_TDSICONS")
							if err != nil {
								 panic(err)
							}
							err = index.Delete(c, thisIdxKey)
							if err != nil {
								 panic(err)
							}
						}
						
					}
				}
				
				//request update of cache
				time.AfterFunc(5*time.Second, func() {
                    laterSettingsIcons(c, "")
                })
				//clear icons cache
				memcacheDelete(w,r, "ALL_ICONS")
		
				msgDtl := fmt.Sprintf("[U00068] WARNING: Icon(s) has been deleted. Admin must run /task-memcache-settings-all-icons. BY: %v", uid)
				msgTyp := "warning"
				msgURL := ""
				if currDesktop == "desktop0" {
					msgURL = fmt.Sprintf("/%v", currDesktop)
				} else {
					msgURL = fmt.Sprintf("/desktop?d=%v", thisDeskNum)
				}
				action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go back go desktop.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			
			} else {	
				msgDtl := "[U00069] ERROR: Icon(s) cannot be deleted because of your account type."
				msgTyp := "error"
				msgURL := ""
				if currDesktop == "desktop0" {
					msgURL = fmt.Sprintf("/%v", currDesktop)
				} else {
					msgURL = fmt.Sprintf("/desktop?d=%v", thisDeskNum)
				}
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to desktop.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		
		}
		
	case FUNC_UPD_SET == "Update Settings" && FUNC_DEL_ICO == "" && FUNC_SHR_ICO == "":
 
 
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		SPL:= strings.Split(currDesktop,"desktop")
		thisDeskNum := str2int(SPL[1])
		
		if FL_VALID_USER == true {
		
			if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN") && currDesktop == "desktop0" {

				q := datastore.NewQuery("TDSCNFG").Filter("USER =", uid).
												   Filter("NUM_VAL =", 0).
												   Limit(2)
				//log.Panicf("[S0390]")
				recCount,_ := datastoreClient.Count(c,q)
				if recCount <= 2 {

					g := TDSCNFG{
							SYS_VER: 1,
							USER: uid,
							CFG_ID: desktopIcons,
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: newIcons,
							CFG_DESC: "Default description, please update",
					}
					
					thisKey := fmt.Sprintf("%v-%s-%s", 0, uid, desktopIcons)

					key := datastore.NameKey("TDSCNFG", thisKey, nil)
					_, err := datastoreClient.Put(c, key, &g)
					//log.Panicf("[S0391]")
					if err != nil {
						panic(err)
					}
                    //log.Printf("datastoreClient.Put()  [55637]")
                    time.AfterFunc(5*time.Second, func() {
                        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-cache-desktop0-icons", map[string]string{"uid": uid, "desktop": currDesktop})
                    })
					msgURL := ""
					if currDesktop == "desktop0" {
						msgURL = fmt.Sprintf("/%v#page", currDesktop)
					} else {
						msgURL = fmt.Sprintf("/desktop?d=%v#page", thisDeskNum)
					}
					http.Redirect(w, r, msgURL, http.StatusFound)
					return
					
				}

				config := make([]TDSCNFG, 0, 2)
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					 panic(err)
				  }
				//log.Printf("datastoreClient.Get()  [55656]")
				for _, p := range config{
						if p.USER == uid {
							//update icons
							if p.CFG_ID == desktopIcons {
								//save previous icons first in DS
								timestamp := getTimestamp()									
								p.NUM_VAL = str2int(timestamp)
								p.CFG_DESC = "Default description, please update"
								thisKeySaved := fmt.Sprintf("%v-%s-%s", timestamp, uid, desktopIcons)
								keySaved := datastore.NameKey("TDSCNFG", thisKeySaved, nil)
								if _, err := datastoreClient.Put(c, keySaved, &p); err != nil {
									 panic(err)
                                }
                                //log.Printf("datastoreClient.Put()  [55670]")
								//log.Panicf("[S0392]")
								//save new icons
								p.NUM_VAL = 0
								p.TXT_VAL = newIcons
								thisKey := fmt.Sprintf("%v-%s-%s", p.NUM_VAL, uid, desktopIcons)
								//buffer3.WriteString(fmt.Sprintf("Updating P.TXT_VAL: %s\n", p.TXT_VAL))
								key := datastore.NameKey("TDSCNFG", thisKey, nil)
								//buffer3.WriteString(fmt.Sprintf("Update count: %v\n", count))
								if _, err := datastoreClient.Put(c, key, &p); err != nil {
									 panic(err)
                                }
                                //log.Printf("datastoreClient.Put()  [55682]")
                                time.AfterFunc(5*time.Second, func() {
                                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-cache-desktop0-icons", map[string]string{"uid": uid, "desktop": currDesktop})
                                })
																	
							}
							//update css
							if p.CFG_ID == desktopCss {
								p.TXT_VAL = mycss
								thisKey2 := fmt.Sprintf("%s-%s", uid, desktopCss)
								//buffer3.WriteString(fmt.Sprintf("Updating P.TXT_VAL: %s\n", p.TXT_VAL))
								key := datastore.NameKey("TDSCNFG", thisKey2, nil)
								//buffer3.WriteString(fmt.Sprintf("Update count: %v\n", count))
								if _, err := datastoreClient.Put(c, key, &p); err != nil {
									 panic(err)
                                }
                                //log.Printf("datastoreClient.Put()  [55698]")
                                time.AfterFunc(5*time.Second, func() {
                                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-cache-desktop0-css", map[string]string{"uid": uid, "desktop": currDesktop, "css": mycss})
                                })
								
							}
						}
						
				}
			} else if (GROUP_ID == "GRP_ADMIN" && thisDeskNum > 0) {

				
				q := datastore.NewQuery("TDSCNFG").Filter("USER =", currDesktop).
												   Filter("NUM_VAL =", 0).
												   Limit(2)
				//log.Panicf("[S0395]")
				recCount,_ := datastoreClient.Count(c,q)
				//FL_NEW_DESKTOP := false
				if recCount <= 0 {
					//FL_NEW_DESKTOP = true
					//currDesktop = "desktop1"
					q = datastore.NewQuery("TDSCNFG").Filter("USER =", "desktop1").
													   Filter("NUM_VAL =", 0).
													   Limit(2)
					//log.Panicf("[S0396]")

					//insert initial cfg records
					//var g TDSCNFG
					g := TDSCNFG{
							SYS_VER: 1,
							USER: currDesktop,
							CFG_ID: desktopIcons,
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: "desktop0,1,2,3,4,5,6,7,8,9,10,11,",
							CFG_DESC: "Sample cfg item",
					}
					
					thisKey := fmt.Sprintf("%s-%s", g.USER, g.CFG_ID)

					key := datastore.NameKey("TDSCNFG", thisKey, nil)
					_, err := datastoreClient.Put(c, key, &g)
					//log.Panicf("[S0397]")
					if err != nil {
						panic(err)
					}
                    //log.Printf("datastoreClient.Put()  [55744]")
					g = TDSCNFG{
							SYS_VER: 1,
							USER: currDesktop,
							CFG_ID: desktopCss,
							DAT_TYP: "TXT",
							NUM_VAL: 0,
							TXT_VAL: "/static/css/style.css",
							CFG_DESC: "Sample cfg item",
					}

					thisKey = fmt.Sprintf("%s-%s", g.USER, g.CFG_ID)

					key = datastore.NameKey("TDSCNFG", thisKey, nil)
					_, err = datastoreClient.Put(c, key, &g)
					//log.Panicf("[S0398]")
					if err != nil {
						panic(err)
					}

					q = datastore.NewQuery("TDSCNFG").Filter("USER =", currDesktop).
													   Filter("NUM_VAL =", 0).
													   Limit(2)
					//log.Panicf("[S0399]")

					
				}

				config := make([]TDSCNFG, 0, 2)
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					 panic(err)
				  }
				//log.Printf("datastoreClient.Get()  [55776]")
				for _, p := range config{
						//if p.USER == currDesktop {
							//update icons
							i := strings.Index(p.CFG_ID, "_icons")
							if i != -1 {
								timestamp := getTimestamp()
								p.NUM_VAL = str2int(timestamp)
								p.CFG_DESC = "Default description, please update"
								thisKeySaved := fmt.Sprintf("%v-%s-%s", timestamp, currDesktop, desktopIcons)
								keySaved := datastore.NameKey("TDSCNFG", thisKeySaved, nil)
								//if FL_NEW_DESKTOP == false {
								if _, err := datastoreClient.Put(c, keySaved, &p); err != nil {
									 panic(err)
                                }
                                //log.Printf("datastoreClient.Put()  [55791]")
								//}
								//log.Panicf("[S0400]")

								//save new icons
								p.NUM_VAL = 0
								p.TXT_VAL = newIcons
								thisKey := fmt.Sprintf("%s-%s", currDesktop, desktopIcons)
								//buffer3.WriteString(fmt.Sprintf("Updating P.TXT_VAL: %s\n", p.TXT_VAL))
								key := datastore.NameKey("TDSCNFG", thisKey, nil)
								//buffer3.WriteString(fmt.Sprintf("Update count: %v\n", count))
								if _, err := datastoreClient.Put(c, key, &p); err != nil {
									 panic(err)
                                }
                                //log.Printf("datastoreClient.Put()  [55805]")
                                time.AfterFunc(5*time.Second, func() {
                                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-cache-desktop0-icons", map[string]string{"uid": uid, "desktop": currDesktop})
                                })
								
							}
							//update css
							i = strings.Index(p.CFG_ID, "_css")
							if i != -1 {
							//if p.CFG_ID == desktopCss {

								p.TXT_VAL = mycss
								thisKey2 := fmt.Sprintf("%s-%s", currDesktop, desktopCss)
								//buffer3.WriteString(fmt.Sprintf("Updating P.TXT_VAL: %s\n", p.TXT_VAL))
								key := datastore.NameKey("TDSCNFG", thisKey2, nil)
								//buffer0.WriteString(fmt.Sprintf("Update count: %v\n", count))
								if _, err := datastoreClient.Put(c, key, &p); err != nil {
									 panic(err)
                                }
                                //log.Printf("datastoreClient.Put()  [55824]")
                                time.AfterFunc(5*time.Second, func() {
                                    laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-cache-desktop0-css", map[string]string{"uid": uid, "desktop": currDesktop, "css": mycss})
                                })
								
							}
						//}
						
				}
				//clear docks list cache
				cKey := fmt.Sprintf("DOCKS_LIST_%v_%s", deskName, USER_EMAIL_ID)
				DOCKS_LIST := ""
				putStrToMemcacheWithoutExp(w,r,cKey,DOCKS_LIST)
				
				msgURL := ""
				if currDesktop == "desktop0" {
					msgURL = fmt.Sprintf("/%v#page", currDesktop)
				} else {
					msgURL = fmt.Sprintf("/desktop?d=%v#page", thisDeskNum)
				}
				http.Redirect(w, r, msgURL, http.StatusFound)
				return
			
			} else {
				msgDtl := "[U00070] ERROR (Update Settings): FOR THIS DESKTOP, CHANGE SETTINGS NOT ALLOWED FOR YOUR ACCOUNT TYPE"
				msgTyp := "error"
				msgURL := "/settings"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
				}
		
		}
		
		
	case FUNC_LOD_ICO == "SetDefault" && FUNC_UPD_SET == "" && FUNC_DEL_ICO == "" && FUNC_SHR_ICO == "":
 
		//loading previously saved toolbars
		//load icons
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _, _  := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if NUM_VAL == 0 {
			msgDtl := "[U00071] ERROR: Cannot load icons because this is already your current settings."
			msgTyp := "error"
			msgURL := "/"
			action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return				
		
		}
		
		if FL_VALID_USER == true {
			//fmt.Fprintf(w, "<br>valid user")
			
			if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN") && thisDeskNum >= 0 {
				//fmt.Fprintf(w, "<br>valid process")
				targetDesktop := ""
				if thisDeskNum == 0 {
					targetDesktop = uid
				} else {
					targetDesktop = currDesktop
				}
				
				q := datastore.NewQuery("TDSCNFG").Filter("USER =", targetDesktop).
												   Filter("CFG_ID =", desktopIcons).
												   Limit(maxTDSCNFGSaveTB)
				//log.Panicf("[S0403]")
				config := make([]TDSCNFG, 0, maxTDSCNFGSaveTB)
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					 panic(err)
				  }
				//log.Printf("datastoreClient.Get()  [55899]")
				for _, p := range config{
					if p.NUM_VAL == 0 {
						//save current desktop0
						p.NUM_VAL = NUM_VAL
						//p.CFG_DESC = CFG_DESC
						thisKeySaved := fmt.Sprintf("%v-%s-%s", NUM_VAL, uid, desktopIcons)
						keySaved := datastore.NameKey("TDSCNFG", thisKeySaved, nil)
						//key := datastore.NameKey("TDSCNFG", keySaved, nil)
						if _, err := datastoreClient.Put(c, keySaved, &p); err != nil {
							 panic(err)
						}
                        //log.Printf("datastoreClient.Put()  [55911]")
						p.NUM_VAL = 0
						p.CFG_DESC = CFG_DESC
						p.TXT_VAL = LOAD_DATA
						thisKey := fmt.Sprintf("%s-%s", uid, desktopIcons)
						//fmt.Fprintf(w, "thisKey: %v", thisKey)
						key := datastore.NameKey("TDSCNFG", thisKey, nil)
						if _, err := datastoreClient.Put(c, key, &p); err != nil {
							 panic(err)
						}
						//log.Panicf("[S0405]")
                        //log.Printf("datastoreClient.Put()  [55922]")
                        time.AfterFunc(5*time.Second, func() {
                            laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-cache-desktop0-icons", map[string]string{"uid": uid, "desktop": currDesktop})
                        })
						
						//set manifest refresh to Y
						cKey := fmt.Sprintf("CACHE_MANIFEST_RELOAD_FLAG_%s",  uid)
						putStrToMemcacheWithoutExp(w,r,cKey,"Y")
					
						//fmt.Fprintf(w, "currDesktop: %v", currDesktop)
						msgURL := ""
						if currDesktop == "desktop0" {
							msgURL = fmt.Sprintf("/%v#page", currDesktop)
						} else {
							msgURL = fmt.Sprintf("/desktop?d=%v#page", thisDeskNum)
						}
						http.Redirect(w, r, msgURL, http.StatusFound)
						return
					}

				}

			} else {
				msgDtl := "[U00072] ERROR (SetDefault): FOR THIS DESKTOP, CHANGE SETTINGS NOT ALLOWED FOR YOUR ACCOUNT TYPE"
				msgTyp := "error"
				msgURL := "/settings"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
				}
		
		}
		
	case FUNC_LOD_ICO == "DeleteSet" && FUNC_UPD_SET == "" && FUNC_DEL_ICO == "" && FUNC_SHR_ICO == "":

		//load icons
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {

			if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN") {
				
				if NUM_VAL > 0 {
					thisKey := fmt.Sprintf("%v-%s-%s_icons", NUM_VAL, uid, currDesktop)

					key := datastore.NameKey("TDSCNFG", thisKey, nil)
					datastoreClient.Delete(c, key)

					//reset DOCK_LIST
					cKey := ""
					if deskName != "desktop0" {
						cKey = fmt.Sprintf("DOCKS_LIST_%s_%s", deskName, USER_EMAIL_ID)
					} else {
						cKey = fmt.Sprintf("DOCKS_LIST_%s_%s", deskName, uid)
					}
					putStrToMemcacheWithoutExp(w,r,cKey,"")
		
					msgDtl := "[U00073] SUCCESS: Icons set has been removed."
					msgTyp := "success"
					msgURL := "/settings"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				} else {
					msgDtl := "[U00074] ERROR: Desktop0 cannot be deleted."
					msgTyp := "error"
					msgURL := "/settings"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				}
						
			}
			return
		}

 
	case FUNC_LOD_ICO == "UpdateDesc" && FUNC_UPD_SET == "" && FUNC_DEL_ICO == "" && FUNC_SHR_ICO == "":
 
		//update config desc	
		//load icons
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _, _  := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
			
			//if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN") && currDesktop == "desktop0" {
			if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN") && thisDeskNum >= 0 {
	
				if err := htmlHeaderModal.Execute(w, getBasicColors(w,r)); err != nil {
				  panic(err)
				}

				targetDesktop := ""
				if thisDeskNum == 0 {
					targetDesktop = uid
				} else {
					targetDesktop = currDesktop
				}
				
				q := datastore.NewQuery("TDSCNFG").Filter("USER =", targetDesktop).
												   Filter("CFG_ID =", desktopIcons).
												   Filter("NUM_VAL =", NUM_VAL).
												   Limit(maxTDSCNFGSaveTB)
				//log.Panicf("[S0406]")

				  recCount,_ := datastoreClient.Count(c,q)
				config := make([]TDSCNFG, 0, maxTDSCNFGSaveTB)
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					 panic(err)
				  }
				//log.Printf("datastoreClient.Get()  [56039]")
				for _, p := range config{
					//if p.NUM_VAL == NUM_VAL && p.NUM_VAL > 0 {
					if p.NUM_VAL == NUM_VAL {
					
						if recCount > 1 {
							thisKey := fmt.Sprintf("%s-%s_icons", uid, currDesktop)

							key := datastore.NameKey("TDSCNFG", thisKey, nil)
							datastoreClient.Delete(c, key)
							
							thisKey = fmt.Sprintf("%v-%s-%s_icons", p.NUM_VAL, uid, currDesktop)

							key = datastore.NameKey("TDSCNFG", thisKey, nil)
							datastoreClient.Delete(c, key)
							
						}
						//geticons
						if err := descEditTemplateA.Execute(w, config); err != nil {
						  panic(err)
						}
						if err := descEditTemplateB.Execute(w, currDesktop); err != nil {
						  panic(err)
						}
						if err := descEditTemplateC.Execute(w, config); err != nil {
						  panic(err)
						}
						_ = getIconsDesktop(w, r, thisDeskNum, p.TXT_VAL)
						break
					}

				}
				if err := htmlFooterModal.Execute(w, ""); err != nil {
				  panic(err)
				}
			}
		
		}

 
	case FUNC_LOD_ICO == "UpdateDesc2" && FUNC_UPD_SET == "" && FUNC_DEL_ICO == "" && FUNC_SHR_ICO == "":
 
		//update config desc
		//load icons	
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
		
			if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN") && currDesktop == "desktop0" {
			
				q := datastore.NewQuery("TDSCNFG").Filter("USER =", uid).
												   Filter("CFG_ID =", "desktop0_icons").
				//                                   Filter("NUM_VAL =", 0).
												   Limit(maxTDSCNFGSaveTB)
				//log.Panicf("[S0407]")
				config := make([]TDSCNFG, 0, maxTDSCNFGSaveTB)
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					 panic(err)
				  }
				//log.Printf("datastoreClient.Get()  [56100]")
				for _, p := range config{
					//load to desktop0
					if p.NUM_VAL == NUM_VAL && p.NUM_VAL > 0 {
						//p.TXT_VAL = loadIconsData
						if CFG_DESC != "" {
							p.CFG_DESC = CFG_DESC
						}
						thisKeySaved := fmt.Sprintf("%v-%s-%s", NUM_VAL, uid, desktopIcons)
						keySaved := datastore.NameKey("TDSCNFG", thisKeySaved, nil)
						if _, err := datastoreClient.Put(c, keySaved, &p); err != nil {
							 panic(err)
						}
						//log.Printf("datastoreClient.Put()  [56113]")
						msgDtl := "[U00075] SUCCESS: Icons description has been updated. You may close this window."
						msgTyp := "success"
						msgURL := "/settings"
						action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
					
					if p.NUM_VAL == 0 {
					
						//p.TXT_VAL = loadIconsData
						if CFG_DESC != "" {
							p.CFG_DESC = CFG_DESC
						}

						thisKey := fmt.Sprintf("%s-%s", uid, desktopIcons)
						//fmt.Fprintf(w, "thisKey: %v", thisKey)
						key := datastore.NameKey("TDSCNFG", thisKey, nil)
						if _, err := datastoreClient.Put(c, key, &p); err != nil {
							 panic(err)
						}
						//log.Panicf("[S0409]")
						//log.Printf("datastoreClient.Put()  [56137]")
						msgDtl := "[U00076] SUCCESS: Icons description has been updated. You may close this window."
						msgTyp := "success"
						msgURL := "/settings"
						action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}

				}
			} else {
				msgDtl := "[U00077] ERROR (UpdateDesc2): FOR THIS DESKTOP, CHANGE SETTINGS NOT ALLOWED FOR YOUR ACCOUNT TYPE"
				msgTyp := "error"
				msgURL := "/settings"
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
				}
		
		}

		
 
	case FUNC_SHR_D0_ICONS == "ShareDesktopIcons" && FUNC_UPD_SET == "" && FUNC_DEL_ICO == "" && FUNC_SHR_ICO == "":
 
		//share icons
		//get user privilege
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
			CFG_DESC := r.FormValue("CFG_DESC")
			TXT_VAL := r.FormValue("LOAD_DATA")
			uid2 := fmt.Sprintf("%v",r.FormValue("uid"))
			currDesktop := fmt.Sprintf("%v",r.FormValue("desktop-name"))
			
			if uid == uid2 {
				//send email of the link to be shared
				MESSAGE := fmt.Sprintf("https://www.ulapph.com/settings-display-screen?loadIcons=ShareDesktopIcons&desktop-name=desktop0&CFG_DESC=%v&uid=%v&LOAD_DATA=%v", CFG_DESC, uid, TXT_VAL)
				SENDSHARED0MAIL(c, uid, ADMMAIL, MESSAGE)

				//notify all users of this event via channels					
				msgDtl := "[U00078] SUCCESS: Desktop Shared Icons link has been sent to your email. You may forward that email to other ULAPPH users so they can click that link and load to their desktop0."
				msgTyp := "success"
				msgURL := "/settings"
				action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
				
			} else {
			//save to other user's desktop0
				
				if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN") && currDesktop == "desktop0" {
				
					q := datastore.NewQuery("TDSCNFG").Filter("USER =", uid).
													   Filter("CFG_ID =", "desktop0_icons").
													   Limit(1)
					//log.Panicf("[S0410]")
					config := make([]TDSCNFG, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
						 panic(err)
					  }
					//log.Printf("datastoreClient.Get()  [56202]")
					for _, p := range config{
						//load to desktop0
						//rt := time.Now().Local()
						//timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))	
						timestamp := getTimestamp()
						p.NUM_VAL = str2int(timestamp)
						p.CFG_DESC = fmt.Sprintf("SHARED(by: %v)-%v", uid, CFG_DESC)
						p.CFG_ID = "desktop0_icons"
						p.DAT_TYP = "TXT"
						p.SYS_VER = 1
						p.USER = uid
						p.TXT_VAL = TXT_VAL
						thisKeySaved := fmt.Sprintf("%v-%s-%s", timestamp, uid, "desktop0_icons")
						keySaved := datastore.NameKey("TDSCNFG", thisKeySaved, nil)
						if _, err := datastoreClient.Put(c, keySaved, &p); err != nil {
							 panic(err)
						}
						//log.Panicf("[S0411]")
                        //log.Printf("datastoreClient.Put()  [56221]")
						//clear DOCKS_LIST
						cKey := fmt.Sprintf("DOCKS_LIST_%s_%s", "desktop0", uid)
						putStrToMemcacheWithoutExp(w,r,cKey,"")
						
						//notify all users of this event via channels
						msgDtl := "[U00079] SUCCESS: Desktop Shared Icons have been saved to your desktop0. Click the left/right arrow in desktop0 to see this icons."
						msgTyp := "success"
						msgURL := "/settings"
						action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return

					}
				} else {
					msgDtl := "[U00080] ERROR (ShareDesktopIcons): FOR THIS DESKTOP, CHANGE SETTINGS NOT ALLOWED FOR YOUR ACCOUNT TYPE"
					msgTyp := "error"
					msgURL := "/settings"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
					}
			
			}
		}
		
	case FUNC_SET_DESKTOP_WP == "setD0WP" && FUNC_LOD_ICO == "" && FUNC_UPD_SET == "" && FUNC_DEL_ICO == "" && FUNC_SHR_ICO == "":
 
		//update wallpaper desktop0	
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _ , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
			
			if (GROUP_ID == "GRP_USER" || GROUP_ID == "GRP_ADMIN") && thisDeskNum == 0 {
	
				targetWP := r.FormValue("targetWP")
				imageURL := r.FormValue("imageURL")
				
				if targetWP == "" || imageURL == "" {
					msgDtl := "[U00081] ERROR: Missing target and image details."
					msgTyp := "error"
					msgURL := "/settings"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				}

				q := datastore.NewQuery("TDSCNFG").Filter("NUM_VAL =", 0).
												   Limit(1)
				//log.Panicf("[S0412]")
				config := make([]TDSCNFG, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					 panic(err)
				  }
				//log.Printf("datastoreClient.Get()  [56279]")
				for _, p := range config{
					//update wallpaper
					p.SYS_VER = 1
					//rt := time.Now().Local()
					//timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))	
					timestamp := getTimestamp()
					p.NUM_VAL = str2int(timestamp)
					p.CFG_DESC = targetWP
					p.CFG_ID = fmt.Sprintf("desktop0_%v", targetWP)
					p.DAT_TYP = "TXT"
					p.TXT_VAL = imageURL
					p.USER = uid
					thisKeySaved := fmt.Sprintf("%s-desktop0_%s", uid, targetWP)
					keySaved := datastore.NameKey("TDSCNFG", thisKeySaved, nil)
					if _, err := datastoreClient.Put(c, keySaved, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0413]")
                    //log.Printf("datastoreClient.Put()  [56298]")
					cKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", targetWP, uid)
					putStrToMemcacheWithoutExp(w,r,cKey,imageURL)
					
					//set manifest refresh to Y
					cKey = fmt.Sprintf("CACHE_MANIFEST_RELOAD_FLAG_%s",  uid)
					putStrToMemcacheWithoutExp(w,r,cKey,"Y")
					
					//notify all users of this event via channels						
					msgDtl := "[U00082] SUCCESS: Wallpaper has been saved."
					msgTyp := "success"
					msgURL := "/settings"
					action := fmt.Sprintf("Congratulations! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					//return
					break
				
				}
			}
		
		}
		
	case FUNC_SET_DESKTOP_WP == "setDNWP" && FUNC_LOD_ICO == "" && FUNC_UPD_SET == "" && FUNC_DEL_ICO == "" && FUNC_SHR_ICO == "":
 
		//update wallpaper desktopN	
		FUNC_CODE := "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _, _  := usersProcessor(w, r, "au", uid, FUNC_CODE)
		
		if FL_VALID_USER == true {
			
			if GROUP_ID == "GRP_ADMIN" && thisDeskNum > 0 {
	
				targetWP := r.FormValue("targetWP")
				imageURL := r.FormValue("imageURL")
				desktop := r.FormValue("desktop-name")
				
				if targetWP == "" || imageURL == "" {
					msgDtl := "[U00083] ERROR: Missing target and image details."
					msgTyp := "error"
					msgURL := "/settings"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				}

				q := datastore.NewQuery("TDSCNFG").Filter("NUM_VAL =", 0).
												   Limit(1)
				//log.Panicf("[S0414]")
				config := make([]TDSCNFG, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
					 panic(err)
				  }
				//log.Printf("datastoreClient.Get()  [56352]")
				for _, p := range config{
					//update wallpaper
					p.SYS_VER = 1
					//rt := time.Now().Local()
					//timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
					timestamp := getTimestamp()						
					p.NUM_VAL = str2int(timestamp)
					//p.CFG_DESC = targetWP
					p.CFG_DESC = fmt.Sprintf("%v_desktopN", targetWP)
					p.CFG_ID = fmt.Sprintf("%v_%v", desktop, targetWP)
					p.DAT_TYP = "TXT"
					p.TXT_VAL = imageURL
					p.USER = desktop
					thisKeySaved := fmt.Sprintf("%s-%s_%s", desktop, desktop, targetWP)
					keySaved := datastore.NameKey("TDSCNFG", thisKeySaved, nil)
					if _, err := datastoreClient.Put(c, keySaved, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0415]")
                    //log.Printf("datastoreClient.Put()  [56372]")
					cKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%v", desktop, targetWP)
					putStrToMemcacheWithoutExp(w,r,cKey,imageURL)
					
					//set manifest refresh to Y
					cKey = fmt.Sprintf("CACHE_MANIFEST_RELOAD_FLAG_%s",  desktop)
					putStrToMemcacheWithoutExp(w,r,cKey,"Y")
					
					//notify all users of this event via channels
					msgDtl := "[U00084] SUCCESS: Wallpaper has been saved."
					msgTyp := "success"
					msgURL := "/settings"
					action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					//return
					break

				
				}
			}
		
		}
		
	default:
		msgDtl := fmt.Sprintf("[U00085] ERROR: Settings operation error.")
		msgTyp := "error"
		msgURL := "/settings"
		action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go back to Settings.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
	
}

//gets the ip address from the http request 
//handles forwarded IPs via proxy
func getIpAdd(w http.ResponseWriter, r *http.Request) (ipStr string) {
    ipProxy := r.Header.Get("X-FORWARDED-FOR")
	
	if len(ipProxy) > 0 {
        ipStr = ipProxy
    }
	if ipStr == "" {
		ipStr, _, _ = net.SplitHostPort(r.RemoteAddr)
	}
	if ipStr == "" {
		ipStr = strings.Split(r.RemoteAddr,":")[0]
	}
	
    return ipStr
}

//D0040 
//gets the SID reference from a http request URL
func getRefDoc(w http.ResponseWriter, r *http.Request, tURL string) (refDoc string, sidOk bool) {
	//parse page accessed
	if tURL == "" {
		tURL = r.URL.String()
	}
	z, err := url.Parse(tURL)
	if err != nil {
		panic(err)
	}
	path := z.Path
	m, _ := url.ParseQuery(z.RawQuery)	
	document := ""
	if _, ok := m["SID"]; ok {
		//do something here
		document = m["SID"][0]
		sidOk = true
	} else {
		document = path
		sidOk = false
	}
	return document, sidOk
}

//D0040
//gets captcha key from the http request url 
func getCCKey(w http.ResponseWriter, r *http.Request, tURL string) (cckey string, ccOk bool) {
	//parse page accessed
	if tURL == "" {
		tURL = r.URL.String()
	}
	z, err := url.Parse(tURL)
	if err != nil {
		panic(err)
	}
	path := z.Path
	m, _ := url.ParseQuery(z.RawQuery)	
	document := ""
	if _, ok := m["cc_key"]; ok {
		//do something here
		document = m["cc_key"][0]
		ccOk = true
	} else {
		document = path
		ccOk = false
	}
	return document, ccOk
}
 
//get desktop category
func getDeskCat(w http.ResponseWriter, r *http.Request) (desktop string) {
	uReferer := r.URL.String()
	z, err := url.Parse(uReferer)
	if err != nil {
		panic(err)
	}
	path := z.Path
	m, _ := url.ParseQuery(z.RawQuery)	
	document := ""
	if _, ok := m["desktop"]; ok {
		//do something here
		document = m["desktop"][0]
	} else {
		document = path
	}
	return document
}
 
//gets the URM reference from the http request url 
func getRefUwm(w http.ResponseWriter, r *http.Request) (refUwm string) {
	//parse page accessed
	uReferer := r.Referer()
	z, err := url.Parse(uReferer)
	if err != nil {
		panic(err)
	}
	//path := z.Path
	m, _ := url.ParseQuery(z.RawQuery)
	if _, ok := m["u"]; ok {
		//do something here
		refUwm = m["u"][0]
	}
	return refUwm
}
//D0068
//gets the IMG_URL from TDSMEDIA link 
func getImgFromUrl(w http.ResponseWriter, r *http.Request, turl string) (img string) {
	z, err := url.Parse(turl)
	if err != nil {
		panic(err)
	}
	//path := z.Path
	m, _ := url.ParseQuery(z.RawQuery)
	if _, ok := m["IMG_URL"]; ok {
		//do something here
		img = m["IMG_URL"][0]
	}
	return img
}
//updates if the user if current active
//used to detect the presence of a user 
func updateUserActiveData(w http.ResponseWriter, r *http.Request, c context.Context, uid, content string) {
	//log.Printf("updateUserActiveData()")
	if SYS_STATELESS_SERVER == true {
		return
	}
	//D0116
	if SYS_REALTIME_NOTIFS == false {
		return
	}
	//u := user.Current(c)
	FL_USER_INCOGNITO := false
	if r.Header.Get("X-Goog-Authenticated-User-Email") != ""  {
		if userPrivacy(w,r) == "INCOGNITO" {
			//usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", uid)
			//putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"Y")
			//usersProcessor_CACHE_KEY = fmt.Sprintf("usersProcessor_IS_LOGGED_IN_TS_%s", uid)
			//timestamp := getTimestamp()
			//putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,timestamp)
			//dont log events
			//return
			FL_USER_INCOGNITO = true
		}
	}
	ipStr := getIpAdd(w,r)
	//system error and access hits
	//billing fix (check only for non-users)
	if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
		x := strings.Index(content, "Error: ")
		switch {
			case x != -1:
			//increment error hits
			cKey := fmt.Sprintf("ERROR_HITS")
			ERROR_HITS := ""
			ERROR_HITS = getStrMemcacheValueByKey(w,r,cKey)
				thisCtrNum := str2int(ERROR_HITS)
				if thisCtrNum >= 0 {
					thisNewCtr := thisCtrNum + 1
					strCtrVal := fmt.Sprintf("%d", thisNewCtr)
					putStrToMemcacheWithoutExp(w,r,cKey,strCtrVal)
				}
			//per ip hits
			cKey2 := fmt.Sprintf("ERROR_HITS_%v", ipStr)
			ERROR_HITS2 := ""
			ERROR_HITS2 = getStrMemcacheValueByKey(w,r,cKey2)
				thisCtrNum2 := str2int(ERROR_HITS2)
				if thisCtrNum2 >= 0 {
					thisNewCtr2 := thisCtrNum2 + 1
					strCtrVal := fmt.Sprintf("%d", thisNewCtr2)
					putStrToMemcacheWithExp(w,r,cKey2,strCtrVal,300)
					//if thisNewCtr2 > 20 {
					if thisNewCtr2 > 10 && checkInBoundAppidAllowed(w,r) != true { //commit error every 30s
						//block ip
						blockIP(w,r,uid,ipStr,"auto")
					}
				}
			case x == -1:
			//increment access hits
			cKey := fmt.Sprintf("ACCESS_HITS")
			ACCESS_HITS := ""
			ACCESS_HITS = getStrMemcacheValueByKey(w,r,cKey)
				thisCtrNum := str2int(ACCESS_HITS)
				if thisCtrNum >= 0 {
					thisNewCtr := thisCtrNum + 1
					strCtrVal := fmt.Sprintf("%d", thisNewCtr)
					putStrToMemcacheWithoutExp(w,r,cKey,strCtrVal)
				}
			cKey2 := fmt.Sprintf("ACCESS_HITS_%v", ipStr)
			ACCESS_HITS2 := ""
			ACCESS_HITS2 = getStrMemcacheValueByKey(w,r,cKey2)
				thisCtrNum2 := str2int(ACCESS_HITS2)
				if thisCtrNum2 >= 0 {
					thisNewCtr2 := thisCtrNum2 + 1
					strCtrVal := fmt.Sprintf("%d", thisNewCtr2)
					putStrToMemcacheWithExp(w,r,cKey2,strCtrVal,300)
					if thisNewCtr2 > 200 && checkInBoundAppidAllowed(w,r) != true {
						//block ip
						blockIP(w,r,uid,ipStr,"auto")
					}
				}
		}
	}
	//D0040
	refDoc, _ := getRefDoc(w,r,"")
	content = fmt.Sprintf("%v@%v", content, refDoc)
	if uid == "" || uid == "undefined" || uid == "guest" {
		_, uid = checkSession(w,r)
		if uid == "" || uid == "undefined" || uid == "guest" {
			uid = getGeoString(w,r)
		}
	}
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	//uaPlatform := ua.Platform()
	uaPlatform1 := ua.Platform()
	uaPlatform := ua.OS()
	nameb, _ := ua.Browser()
	i := strings.Index(uid, "@")
	f := strings.Index(uid, "facebook")
	g := strings.Index(uid, "gplus")
	h := strings.Index(uid, "github")
	l := strings.Index(uid, "linkedin")
	o := strings.Index(uid, "onedrive")
	if i != -1 || f != -1 || g != -1 || h != -1 || l != -1 || o != -1  {
		usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", uid)
		putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"Y")
		usersProcessor_CACHE_KEY = fmt.Sprintf("usersProcessor_IS_LOGGED_IN_TS_%s", uid)
		timestamp := getTimestamp()
		putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,timestamp)
	}
	//skip robots from notifs
	//log.Printf("nameb: %v", nameb)
	//log.Printf("uaPlatform1: %v", uaPlatform1)
	//log.Printf("uaPlatform: %v", uaPlatform)
	if nameb != "" && uaPlatform1 != "" && uaPlatform != "" {
		time.AfterFunc(5*time.Second, func() {
            laterQueueStatsUserActive(c, uid, uaPlatform, nameb)
        })
        //broadcast to server
		osp := fmt.Sprintf("%v - %v", uaPlatform1, uaPlatform)
		time.AfterFunc(5*time.Second, func() {
			if FL_USER_INCOGNITO == false {
				laterBroadcastUserPresence(c, uid, osp, nameb, getSchemeUrl(w,r), getProfilePic(w, r, uid), getGeoString(w,r), content, ipStr)
			}
        })
        //log visitors as well
		rh := r.Header
		oLatLong := rh.Get("X-AppEngine-CityLatLong")
		if FL_USER_INCOGNITO == false {
			procBroadcastUserLoc(w,r,uid,oLatLong)
		}
	}
	//increment access hits for dweetio
	SPL := strings.Split(content, "-")
	switch {
		case SPL[0] == "TDSMEDIA" && SPL[1] != "":
		XPL := strings.Split(SPL[1], "@")
		putStrToMemcacheWithoutExp(w,r,"LAST_TDSMEDIA",XPL[0])
		case SPL[0] == "TDSSLIDE" && SPL[1] != "":
		XPL := strings.Split(SPL[1], "@")
		putStrToMemcacheWithoutExp(w,r,"LAST_TDSSLIDE",XPL[0])
		case SPL[0] == "TDSARTL" && SPL[1] != "":
		XPL := strings.Split(SPL[1], "@")
		putStrToMemcacheWithoutExp(w,r,"LAST_TDSARTL",XPL[0])
	}
}

//task queue to increment counter
func queueCounterIncrement(w http.ResponseWriter, r *http.Request) {
	//var buffer bytes.Buffer
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //cname := fmt.Sprintf("%v",r.FormValue("name"))
    cname := val["name"].(string)
	//uid := ""
	if cname != "" {
		//get counter cached items
		cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", cname)
		TASK_MEMCACHER_CounterIncrement_CACHE := ""
		TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
		
		if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
		//increment existing
			thisCtrNum := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
			if thisCtrNum > 0 {
				thisNewCtr := thisCtrNum + 1
				strCtrVal := fmt.Sprintf("%d", thisNewCtr)
				putStrToMemcacheWithoutExp(w,r,cKey,strCtrVal)
			}
			
		} else {
			
			//if browser or OS counter, insert into TDSSTATS
			FL_NOT_BR_OS := false
			if len(cname) >= 6 {
				if string(cname[5]) == "." &&  (string(cname[6]) == "O" || string(cname[6]) == "B" || string(cname[6]) == "A") {
					//TASK_MEMCACHER_CounterIncrement_STAT.OS
					//TASK_MEMCACHER_CounterIncrement_STAT.BROWSER
					//buffer.WriteString(fmt.Sprintf("INSERTING TDSSTAS\n"))
					//check if row exists
					FL_STAT_EXISTS := false
					
					key := datastore.NameKey("TDSSTATS", cname, nil)
					q := datastore.NewQuery("TDSSTATS").Filter("__key__ =", key)
					//log.Panicf("[S0416]")
					stats := make([]TDSSTATS, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
						 panic(err)
					  }
					//log.Printf("datastoreClient.Get()  [56706]")
					for _, p := range stats{
						cVal := fmt.Sprintf("%v", p.VAL_NUM + 1 )
						putStrToMemcacheWithoutExp(w,r,cKey,cVal)
						p.VAL_NUM = p.VAL_NUM + 1
						key := datastore.NameKey("TDSSTATS", cname, nil)
						//buffer.WriteString(fmt.Sprintf("SET CACHE [%s]: %d\n", cKey, p.VAL_NUM))
						if _, err := datastoreClient.Put(c, key, &p); err != nil {
							 panic(err)
						}
						//log.Panicf("[S0417]")
                        //log.Printf("datastoreClient.Put()  [56717]")
						FL_STAT_EXISTS = true
						break
					}
					
					if FL_STAT_EXISTS == false {
						//OPTIMIZE (query is weird???)
						q := datastore.NewQuery("TDSSTATS").Order("STAT_NAME").Limit(1)
						//log.Panicf("[S0418]")
						stats := make([]TDSSTATS, 0, 1)
						if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
							 panic(err)
						  }
						//log.Printf("datastoreClient.Get()  [56730]")
						for _, p := range stats{
							p.DATA_TYPE = "NUM"
							switch string(cname[6]) {
								case "O":
								p.VAL_TXT = "STATS.OS"
								case "B":
								p.VAL_TXT = "STATS.BROWSER"
								case "A":
								p.VAL_TXT = "STATS.APPS"
							}
							p.STAT_NAME = cname
							p.VAL_NUM = 1
							key := datastore.NameKey("TDSSTATS", cname, nil)
							//buffer.WriteString(fmt.Sprintf("SET CACHE [%s]: %d\n", cKey, p.VAL_NUM))
							if _, err := datastoreClient.Put(c, key, &p); err != nil {
								 panic(err)
							}
							//log.Panicf("[S0419]")
                            //log.Printf("datastoreClient.Put()  [56749]")
						}
					}
					FL_NOT_BR_OS = false
				} else {
					FL_NOT_BR_OS = true
				}
			}
			
			if FL_NOT_BR_OS == true {
			
				FL_STAT_EXISTS := false
				
				key := datastore.NameKey("TDSSTATS", cname, nil)
				q := datastore.NewQuery("TDSSTATS").Filter("__key__ =", key)
				//log.Panicf("[S0420]")
				stats := make([]TDSSTATS, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
					 panic(err)
				  }
				//log.Printf("datastoreClient.Get()  [56769]")
				for _, p := range stats{
					cVal := fmt.Sprintf("%v", p.VAL_NUM + 1 )
					putStrToMemcacheWithoutExp(w,r,cKey,cVal)
					p.VAL_NUM = p.VAL_NUM + 1
					key := datastore.NameKey("TDSSTATS", cname, nil)
					//buffer.WriteString(fmt.Sprintf("SET CACHE [%s]: %d\n", cKey, p.VAL_NUM))
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0421]")
                    //log.Printf("datastoreClient.Put()  [56780]")
					FL_STAT_EXISTS = true
					break
				}
				if FL_STAT_EXISTS == false {
					q := datastore.NewQuery("TDSSTATS").Order("STAT_NAME").Limit(1)
					//log.Panicf("[S0422]")
					stats := make([]TDSSTATS, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
						 panic(err)
					  }
					//log.Printf("datastoreClient.Get()  [56791]")
					for _, p := range stats{
						p.DATA_TYPE = "NUM"
						p.STAT_NAME = cname
						p.VAL_NUM = 1
						key := datastore.NameKey("TDSSTATS", cname, nil)
						//buffer.WriteString(fmt.Sprintf("SET CACHE [%s]: %d\n", cKey, p.VAL_NUM))
						if _, err := datastoreClient.Put(c, key, &p); err != nil {
							 panic(err)
						}
						//log.Panicf("[S0423]")
                        //log.Printf("datastoreClient.Put()  [56802]")
					}
				}
			}
			
		}
	}
 
}
 
//task queue to cache desktop0 icons
func TASK_MEMCACHER_desktopIcons(w http.ResponseWriter, r *http.Request) {
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	IS_OK_TO_RUN = false
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //USER_EMAIL_ID := fmt.Sprintf("%v",r.FormValue("uid"))
    USER_EMAIL_ID := val["uid"].(string)
	//uid := USER_EMAIL_ID
	//deskName := r.FormValue("desktop")
    deskName := val["desktop"].(string)
	//if both parms are spaces, run for all users desktop0s
	FL_MEMCACHER_CRON_ALL := false
	if USER_EMAIL_ID == "" && deskName == "" {
		FL_MEMCACHER_CRON_ALL = true
	}
 
	if FL_MEMCACHER_CRON_ALL == false {
		var buffer3 bytes.Buffer
		var buffer4 bytes.Buffer
	
		if deskName != "desktop0" {
			USER_EMAIL_ID = deskName
		}
 
		//buffer3.WriteString(fmt.Sprintf("func getIcons()\n"))
		deskN := fmt.Sprintf("%s_icons", deskName)
		//buffer3.WriteString(fmt.Sprintf("UID: %s\n", USER_EMAIL_ID))
		//buffer3.WriteString(fmt.Sprintf("deskName: %s\n", deskN))
		q := datastore.NewQuery("TDSCNFG").Filter("USER =", USER_EMAIL_ID).
										   Filter("CFG_ID =", deskN).
										   Filter("NUM_VAL =", 0).
										   Limit(1)	
		//log.Panicf("[S0424]")
		config := make([]TDSCNFG, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
			//check overquota error
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		}
		//log.Printf("datastoreClient.Get()  [56860]")
		iconsStr := ""
		FL_CUSTOM_ICONS := false
		//style = "/static/css/style.css"
		for _, p := range config {
			if p.USER == USER_EMAIL_ID {
				//style = p.TXT_VAL
				//desktop0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
				iconsStr = p.TXT_VAL
				//buffer3.WriteString(fmt.Sprintf("ICONSSTR: %s\n", iconsStr))
				FL_CUSTOM_ICONS = true
				//buffer3.WriteString(fmt.Sprintf("FL_CUSTOM_ICONS: %t\n", FL_CUSTOM_ICONS))
				break
			}
				
		}
		if (FL_CUSTOM_ICONS == true) {
			iconsArr := strings.Split(iconsStr,",")
			//buffer3.WriteString(fmt.Sprintf("ICONSARR: %v\n", iconsArr[0]))
			//buffer3.WriteString(fmt.Sprintf("DESKNAME: %s\n", deskName))
			//buffer3.WriteString(fmt.Sprintf("ARR LEN: %d\n", len(iconsArr)))
			if (iconsArr[0] == deskName) {
				for i := 1; i < len(iconsArr); i++ {
					thisIcon := iconsArr[i]
					if thisIcon != "" {
						//buffer3.WriteString(fmt.Sprintf("iconsArr[%s]:\n", thisIcon))
						//get icon details
						thisIconNum := str2int(thisIcon)
						//buffer3.WriteString(fmt.Sprintf("iconsArr[%d]:\n", thisIconNum))
						dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
						key := datastore.NameKey("TDSICONS", dsKey, nil)
						q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
						//log.Panicf("[S0425]")
						icons := make([]TDSICONS, 0, 1)
						if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [56897]")
						for _, p := range icons {
							buffer3.WriteString(fmt.Sprintf("<li id=\"%s\">", p.ICON_NAME))
							buffer3.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=D\" target=\"%d\"> ", p.URL_ADD,p.ICON_NAME, p.ICON_ID, p.ICON_ID))
							buffer3.WriteString(fmt.Sprintf("<em><span>%s</span></em><br>", p.ICON_NAME))
							buffer3.WriteString(fmt.Sprintf("<img src=\"%s\" title=\"%s\" height=\"40\" width=\"40\"/> ", p.IMG_SRC, p.ICON_NAME))	
							buffer3.WriteString(fmt.Sprintf("</a>"))
							buffer3.WriteString(fmt.Sprintf("</li>"))
							buffer3.WriteString(fmt.Sprintf("</li>"))
							
							buffer4.WriteString(fmt.Sprintf("<li id=\"%s\">", p.ICON_NAME))
							buffer4.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=M\"> ", p.URL_ADD, p.ICON_NAME,p.ICON_ID))
							buffer4.WriteString(fmt.Sprintf("<em><span>%s</span></em><br>", p.ICON_NAME))
							buffer4.WriteString(fmt.Sprintf("<img src=\"%s\" title=\"%s\" height=\"40\" width=\"40\"/> ", p.IMG_SRC, p.ICON_NAME))	
							buffer4.WriteString(fmt.Sprintf("</a>"))
							buffer4.WriteString(fmt.Sprintf("</li>"))
							buffer4.WriteString(fmt.Sprintf("</li>"))
						}
					}
					
				}
			}
		}
 
		iconsHTML := buffer3.String()
		cKey := fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%s", deskName)
		if deskName == "desktop0" {
			cKey = fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%s_%s", deskName, USER_EMAIL_ID)
		}
		putStrToMemcacheWithoutExp(w,r,cKey,iconsHTML)
		fmt.Fprintf(w, "%v: %v", cKey, iconsHTML)
		
		iconsHTML = buffer4.String()
		cKey = fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%s_Mobile", deskName)
		if deskName == "desktop0" {
			cKey = fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%s_%s_Mobile", deskName, USER_EMAIL_ID)
		}
		putStrToMemcacheWithoutExp(w,r,cKey,iconsHTML)
		fmt.Fprintf(w, "%v: %v", cKey, iconsHTML)
		
		//reset DOCK_LIST
		cKey = ""
		if deskName != "desktop0" {
			//USER_EMAIL_ID = deskName
			cKey = fmt.Sprintf("DOCKS_LIST_%s_%s", deskName, USER_EMAIL_ID)
		} else {
			cKey = fmt.Sprintf("DOCKS_LIST_%s_%s", deskName, r.FormValue("uid"))
		}
		putStrToMemcacheWithoutExp(w,r,cKey,"")
		
	} else {
	//memcache all desktop0 icons
 
		deskName = "desktop0"
 
		//buffer3.WriteString(fmt.Sprintf("func getIcons()\n"))
		deskN := fmt.Sprintf("%s_icons", deskName)
		//buffer3.WriteString(fmt.Sprintf("UID: %s\n", USER_EMAIL_ID))
		//buffer3.WriteString(fmt.Sprintf("deskName: %s\n", deskN))
		q := datastore.NewQuery("TDSCNFG").Filter("CFG_ID =", deskN).
										   Filter("NUM_VAL =", 0)
		//log.Panicf("[S0426]")
 
		recCount,_ := datastoreClient.Count(c,q)
		config := make([]TDSCNFG, 0, recCount)
		if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
			//check overquota error
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		}
		//log.Printf("datastoreClient.Get()  [56967]")
		iconsStr := ""
		//FL_CUSTOM_ICONS := false
		//style = "/static/css/style.css"
		for _, p := range config {
			var buffer3 bytes.Buffer
			var buffer4 bytes.Buffer
 
			fmt.Fprintf(w, "<br>*************************************************************************************************")
			fmt.Fprintf(w, "<br>DESKTOP MEMCACHE FOR %v", p.USER)
			fmt.Fprintf(w, "<br>*************************************************************************************************")
			//if p.USER == USER_EMAIL_ID {
				//style = p.TXT_VAL
				//desktop0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
				iconsStr = p.TXT_VAL
				//buffer3.WriteString(fmt.Sprintf("ICONSSTR: %s\n", iconsStr))
				
				iconsArr := strings.Split(iconsStr,",")
				//buffer3.WriteString(fmt.Sprintf("ICONSARR: %v\n", iconsArr[0]))
				//buffer3.WriteString(fmt.Sprintf("DESKNAME: %s\n", deskName))
				//buffer3.WriteString(fmt.Sprintf("ARR LEN: %d\n", len(iconsArr)))
				if (iconsArr[0] == deskName) {
					for i := 1; i < len(iconsArr); i++ {
						thisIcon := iconsArr[i]
						if thisIcon != "" {
							//buffer3.WriteString(fmt.Sprintf("iconsArr[%s]:\n", thisIcon))
							//get icon details
							thisIconNum := str2int(thisIcon)
							//buffer3.WriteString(fmt.Sprintf("iconsArr[%d]:\n", thisIconNum))
							dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
							key := datastore.NameKey("TDSICONS", dsKey, nil)
							q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
							//log.Panicf("[S0427]")
							icons := make([]TDSICONS, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
								 panic(err)
							}
							//log.Printf("datastoreClient.Get()  [57004]")
							//if err := iconsMenuTemplate.Execute(w, icons); err != nil {
							//	 panic(err)
							//}
							for _, p := range icons {
								buffer3.WriteString(fmt.Sprintf("<li id=\"%s\">", p.ICON_NAME))
								buffer3.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=D\" target=\"%d\"> ", p.URL_ADD,p.ICON_NAME, p.ICON_ID, p.ICON_ID))
								buffer3.WriteString(fmt.Sprintf("<em><span>%s</span></em><br>", p.ICON_NAME))
								buffer3.WriteString(fmt.Sprintf("<img src=\"%s\" title=\"%s\" height=\"40\" width=\"40\"/> ", p.IMG_SRC, p.ICON_NAME))	
								buffer3.WriteString(fmt.Sprintf("</a>"))
								buffer3.WriteString(fmt.Sprintf("</li>"))
								buffer3.WriteString(fmt.Sprintf("</li>"))
								
								buffer4.WriteString(fmt.Sprintf("<li id=\"%s\">", p.ICON_NAME))
								buffer4.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%s&ICON_NAME=%v&ICON_ID=%d&URL_TYP=W&DISP_TYP=M\"> ", p.URL_ADD, p.ICON_NAME,p.ICON_ID))
								buffer4.WriteString(fmt.Sprintf("<em><span>%s</span></em><br>", p.ICON_NAME))
								buffer4.WriteString(fmt.Sprintf("<img src=\"%s\" title=\"%s\" height=\"40\" width=\"40\"/> ", p.IMG_SRC, p.ICON_NAME))	
								buffer4.WriteString(fmt.Sprintf("</a>"))
								buffer4.WriteString(fmt.Sprintf("</li>"))
								buffer4.WriteString(fmt.Sprintf("</li>"))
							}
						}
						
					}
					iconsHTML := buffer3.String()
					cKey := fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%s_%s", deskName, p.USER)
					putStrToMemcacheWithoutExp(w,r,cKey,iconsHTML)
					fmt.Fprintf(w, "%v: %v", cKey, iconsHTML)
					
					iconsHTML = buffer4.String()
					cKey = fmt.Sprintf("TASK_MEMCACHER_desktopIcons_%s_%s_Mobile", deskName, p.USER)
					putStrToMemcacheWithoutExp(w,r,cKey,iconsHTML)
					fmt.Fprintf(w, "%v: %v", cKey, iconsHTML)	
				}
	
		}
	}
}
 
//cache desktopCss for all desktop0s & desktop1-20
func TASK_MEMCACHER_All_desktopCss(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()	
	//Generate css for all desktop0s
	q := datastore.NewQuery("TDSCNFG").Filter("CFG_ID =", "desktop0_css")
	//log.Panicf("[S0428]")
	recCount,_ := datastoreClient.Count(c,q)
						
	config := make([]TDSCNFG, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	}
    //log.Printf("datastoreClient.Get()  [57068]")
	for _, p := range config {
		cssKey := fmt.Sprintf("TASK_MEMCACHER_desktopCss_desktop0_%s", p.USER)
		//uid := p.USER
		putStrToMemcacheWithoutExp(w,r,cssKey,p.TXT_VAL)
		fmt.Fprintf(w, "[%v]: %v<br>", cssKey, p.TXT_VAL)
			
	}
	
	for d := 1; d <= 20; d++ {
		//Generate css for desktop0
		deskName := fmt.Sprintf("desktop%d_css", d)
		
		q := datastore.NewQuery("TDSCNFG").Filter("CFG_ID =", deskName).
										   Limit(1)
		//log.Panicf("[S0429]")
 
		config := make([]TDSCNFG, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
			 panic(err)
		}
        //log.Printf("datastoreClient.Get()  [57088]")
		for _, p := range config {
			cssKey := fmt.Sprintf("TASK_MEMCACHER_desktopCss_desktop%d", d)
			//uid := p.USER
			putStrToMemcacheWithoutExp(w,r,cssKey,p.TXT_VAL)
			fmt.Fprintf(w, "[%v]: %v<br>", cssKey, p.TXT_VAL)
			break	
		}
	}
	fmt.Fprintf(w, "TASK_MEMCACHER_desktopCss: Completed!<br>")
	
}
//task queue to cache desktop0 css
func TASK_MEMCACHER_desktopCss(w http.ResponseWriter, r *http.Request) {
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	IS_OK_TO_RUN = false
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}
	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //USER_EMAIL_ID := fmt.Sprintf("%v",r.FormValue("uid"))
    USER_EMAIL_ID := val["uid"].(string)
	//uid := USER_EMAIL_ID
    //deskName := r.FormValue("desktop")
    deskName := val["desktop"].(string)
    //deskCss := r.FormValue("css")
    deskCss := val["css"].(string)
     //D0086
    datastoreClient := createClientDS()
	//var buffer3 bytes.Buffer
	//var buffer4 bytes.Buffer
 
	if deskName != "desktop0" {
		USER_EMAIL_ID = deskName
	}
 
	//buffer3.WriteString(fmt.Sprintf("func getIcons()\n"))
	deskN := fmt.Sprintf("%s_css", deskName)
	//buffer3.WriteString(fmt.Sprintf("UID: %s\n", USER_EMAIL_ID))
	//buffer3.WriteString(fmt.Sprintf("deskName: %s\n", deskN))
	q := datastore.NewQuery("TDSCNFG").Filter("USER =", USER_EMAIL_ID).
									   Filter("CFG_ID =", deskN).
									   Limit(1)	
	//log.Panicf("[S0430]")
    config := make([]TDSCNFG, 0, 1)
    if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
    }
    //log.Printf("datastoreClient.Get()  [57135]")
	
	//cssStr := ""
	FL_CUSTOM_CSS := false
	//style = "/static/css/style.css"
	for _, p := range config {
		if p.USER == USER_EMAIL_ID {
			//style = p.TXT_VAL
			//desktop0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
			//cssStr = p.TXT_VAL
			//buffer3.WriteString(fmt.Sprintf("cssStr: %s\n", cssStr))
			
			FL_CUSTOM_CSS = true
			//buffer3.WriteString(fmt.Sprintf("FL_CUSTOM_CSS: %t\n", FL_CUSTOM_CSS))
			break
		}
			
	}
    if (FL_CUSTOM_CSS == true && deskName != "desktop0") {
		cssHTML := deskCss
		cKey := fmt.Sprintf("TASK_MEMCACHER_desktopCss_%s", deskName)
		putStrToMemcacheWithoutExp(w,r,cKey,cssHTML)
		//fmt.Fprintf(w, "%v", cssHTML)
	} else {
		cssHTML := deskCss
		cKey := fmt.Sprintf("TASK_MEMCACHER_desktopCss_desktop0_%s", USER_EMAIL_ID)
		putStrToMemcacheWithoutExp(w,r,cKey,cssHTML)		
	}
}
 
//desktop0 homeIcons (single user)
func TASK_MEMCACHER_desktop0_homeIcons_Single(w http.ResponseWriter, r *http.Request, uid string) {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//uid := fmt.Sprintf("%v",r.FormValue("uid"))
	fmt.Fprintf(w, "uid: %v<br>", uid)
     //D0086
    datastoreClient := createClientDS()
	
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}
	q := datastore.NewQuery("TDSUSERS").Filter("USER =", uid).Limit(1)
	//log.Panicf("[S0431]")
	users := make([]TDSUSERS, 0, 1)
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
      }	
      //log.Printf("datastoreClient.Get()  [57189]")
	for _, p := range users{
		//var buffer3 bytes.Buffer
		var buffer4 bytes.Buffer
		deskName := p.USER
		deskN := "desktop0_icons"
 
		q := datastore.NewQuery("TDSCNFG").Filter("USER =", deskName).
										   Filter("CFG_ID =", deskN).
										   Limit(50)
		//log.Panicf("[S0432]")
 
		config := make([]TDSCNFG, 0, 50)
		if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
			 panic(err)
		}
		//log.Printf("datastoreClient.Get()  [57205]")
		iconsStr := ""
		cfgCtr := 0
		//FL_CUSTOM_ICONS := false
		for _, p := range config {
			//style = p.TXT_VAL
			//desktop0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
			cfgCtr++
			iconsStr = p.TXT_VAL
			//deskU := fmt.Sprintf("%s", p.CFG_DESC)
			buffer4.WriteString(fmt.Sprintf("<b>(%d)</b>", cfgCtr))
			iconsArr := strings.Split(iconsStr,",")
			//if (iconsArr[0] == deskName) {
				for i := 1; i < len(iconsArr); i++ {
					thisIcon := iconsArr[i]
					if thisIcon != "" {
						thisIconNum := str2int(thisIcon)
						dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
						key := datastore.NameKey("TDSICONS", dsKey, nil)
						q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
						//log.Panicf("[S0433]")
						icons := make([]TDSICONS, 0, 1)
						if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
							 panic(err)
                        }
                        //log.Printf("datastoreClient.Get()  [57230]")
						
						for _, p := range icons {
							buffer4.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%v&ICON_NAME=%v&ICON_ID=%v&URL_TYP=W&DISP_TYP=M\"><img src=\"%v\" title=\"%v\" height=\"35\" width=\"35\"/></a> ", p.URL_ADD, p.ICON_NAME, p.ICON_ID, p.IMG_SRC, p.ICON_NAME ))	
						}
					}	
				}
			//}
				
		}
		
		////////
		cKey := fmt.Sprintf("TASK_MEMCACHER_desktop0_homeIcons_%v", deskName)
		iconsHTML := buffer4.String()
		putStrToMemcacheWithoutExp(w,r,cKey,iconsHTML)
		fmt.Fprintf(w, "%v: <br>iconsHTML:<br>%v<br>", cKey, iconsHTML)
		break
		
	}
	
}
 
//desktop0 homeIcons
func TASK_MEMCACHER_desktop0_homeIcons(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
    }
    //D0086
    datastoreClient := createClientDS()
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    q := datastore.NewQuery("TDSUSERS").Order("USER")
	//log.Panicf("[S0434]")
	recCount,_ := datastoreClient.Count(c,q)	
	users := make([]TDSUSERS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
      }
      //log.Printf("datastoreClient.Get()  [57275]")
	for _, p := range users{
		//var buffer3 bytes.Buffer
		var buffer4 bytes.Buffer
		deskName := p.USER
		deskN := "desktop0_icons"
		//uid := p.USER
		q := datastore.NewQuery("TDSCNFG").Filter("USER =", deskName).
										   Filter("CFG_ID =", deskN).
										   Limit(50)
		//log.Panicf("[S0435]")
 
		config := make([]TDSCNFG, 0, 50)
		if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
			 panic(err)
		}
		//log.Printf("datastoreClient.Get()  [57291]")
		iconsStr := ""
		cfgCtr := 0
		//FL_CUSTOM_ICONS := false
		for _, p := range config {
			//style = p.TXT_VAL
			//desktop0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
			cfgCtr++
			iconsStr = p.TXT_VAL
			//deskU := fmt.Sprintf("%s", p.CFG_DESC)
			buffer4.WriteString(fmt.Sprintf("<b>(%d)</b>", cfgCtr))
			iconsArr := strings.Split(iconsStr,",")
			//if (iconsArr[0] == deskName) {
				for i := 1; i < len(iconsArr); i++ {
					thisIcon := iconsArr[i]
					if thisIcon != "" {
						thisIconNum := str2int(thisIcon)
						dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
						key := datastore.NameKey("TDSICONS", dsKey, nil)
						q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
						//log.Panicf("[S0436]")
						icons := make([]TDSICONS, 0, 1)
						if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
							 panic(err)
						}
						//log.Printf("datastoreClient.Get()  [57316]")
						for _, p := range icons {
							buffer4.WriteString(fmt.Sprintf("<a href=\"/click-url/?URL_ADD=%v&ICON_NAME=%v&ICON_ID=%v&URL_TYP=W&DISP_TYP=M\"><img src=\"%v\" title=\"%v\" height=\"35\" width=\"35\"/></a>", p.URL_ADD,p.ICON_NAME, p.ICON_ID, p.IMG_SRC, p.ICON_NAME ))	
						}
					}	
				}
			//}
				
		}
		
		////////
		cKey := fmt.Sprintf("TASK_MEMCACHER_desktop0_homeIcons_%v", deskName)
		iconsHTML := buffer4.String()
		putStrToMemcacheWithoutExp(w,r,cKey,iconsHTML)
		fmt.Fprintf(w, "%v: <br>iconsHTML:<br>%v<br>", cKey, iconsHTML)
 
	}
}
 
//desktop0 wallpapers
func TASK_MEMCACHER_desktop0_wallpapers(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}	
 
    //D0086
    datastoreClient := createClientDS()
 
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//Desktop0 Big Wallpapers
	q := datastore.NewQuery("TDSCNFG").Filter("CFG_ID =", "desktop0_bigWP")
	//log.Panicf("[S0437]")
	recCount,_ := datastoreClient.Count(c,q)
	config := make([]TDSCNFG, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [57361]")
	for _, p := range config{
		//uid := p.USER
		wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", "bigWP", p.USER)
		putStrToMemcacheWithoutExp(w,r,wpKey,p.TXT_VAL)
		fmt.Fprintf(w, "wpKey : %v<br>", wpKey)
	
	}
	fmt.Fprintf(w, "COMPLETED: Desktop0 Big Wallpapers<br><br>")
	
 
	//Desktop0 Login Wallpapers
	q = datastore.NewQuery("TDSCNFG").Filter("CFG_ID =", "desktop0_loginWP")
	//log.Panicf("[S0438]")
	recCount,_ = datastoreClient.Count(c,q)
	config = make([]TDSCNFG, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [57380]")
	for _, p := range config{
		//uid := p.USER
		wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_desktop0_%s", "loginWP", p.USER)
		putStrToMemcacheWithoutExp(w,r,wpKey,p.TXT_VAL)
		fmt.Fprintf(w, "wpKey : %v<br>", wpKey)
	
	}
	fmt.Fprintf(w, "COMPLETED: Desktop0 Login Wallpapers<br><br>")
	
}
 
//desktopN wallpapers
func TASK_MEMCACHER_desktopN_wallpapers(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}	
    //D0086
    datastoreClient := createClientDS()

	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	//DesktopN Big Wallpapers
	q := datastore.NewQuery("TDSCNFG").Filter("CFG_DESC =", "bigWP_desktopN")
	//log.Panicf("[S0439]")
	recCount,_ := datastoreClient.Count(c,q)
	config := make([]TDSCNFG, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [57417]")
	for _, p := range config{
		//uid := p.USER
		wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", p.USER, "bigWP")
		putStrToMemcacheWithoutExp(w,r,wpKey,p.TXT_VAL)
		fmt.Fprintf(w, "wpKey : %v<br>", wpKey)
	
	}
	fmt.Fprintf(w, "COMPLETED: DesktopN Big Wallpapers<br><br>")
	
 
	//DesktopN Login Wallpapers
	q = datastore.NewQuery("TDSCNFG").Filter("CFG_DESC =", "loginWP_desktopN")
	//log.Panicf("[S0440]")
	recCount,_ = datastoreClient.Count(c,q)
	config = make([]TDSCNFG, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [57436]")
	for _, p := range config{
		//uid := p.USER
		wpKey := fmt.Sprintf("TASK_MEMCACHER_desktopWP_%v_%s", p.USER, "loginWP")
		putStrToMemcacheWithoutExp(w,r,wpKey,p.TXT_VAL)
		fmt.Fprintf(w, "wpKey : %v<br>", wpKey)
	
	}
	fmt.Fprintf(w, "COMPLETED: DesktopN Login Wallpapers<br><br>")
	
}
//task queue to increment logged in stats
func queueStatsIncLoggedIn(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
	cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", "TOT_ONLINE")
	TASK_MEMCACHER_CounterIncrement_CACHE := ""
	TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
 
	if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
	//increment existing
		thisCtrNum := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
		thisNewCtr := thisCtrNum + 1
		strCtrVal := fmt.Sprintf("%d", thisNewCtr)
		putStrToMemcacheWithoutExp(w,r,cKey,strCtrVal)
		
	} else {
	//if not exist, create counter
		putStrToMemcacheWithoutExp(w,r,cKey,"1")
	}
	//
	
	//update profile pic & ringtone
	q := datastore.NewQuery("TDSPROF").Filter("UID =", uid).Limit(1)
	//log.Panicf("[S0441]")
	profile := make([]TDSPROF, 0, 1)
	if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [57482]")
	//edv 30/09/2015
	FL_PROFILE_FOUND := false
	for _, p := range profile{
		FL_PROFILE_FOUND = true
		//cache profile pic
		cKey := fmt.Sprintf("PROFILE_PIC_%v", p.UID)
		putStrToMemcacheWithoutExp(w,r,cKey,p.PICTURE)
		//fmt.Fprintf(w, "%v:<br> %s<br>", cKey, p.PICTURE)
		
		//cache country pic
		countryPic := fmt.Sprintf("%v/static/img/flags/%v.gif", getSchemeUrl(w,r), p.COUNTRY)
		cKey = fmt.Sprintf("COUNTRY_PIC_%v", p.UID)
		putStrToMemcacheWithoutExp(w,r,cKey,countryPic)
		fmt.Fprintf(w, "%v: %v<br>", cKey, countryPic)
		
		//cache ringtone
		ringtoneURL := fmt.Sprintf("%v", p.RINGTONE)
		cKey = fmt.Sprintf("RINGTONE_URL_%v", p.UID)
		putStrToMemcacheWithoutExp(w,r,cKey,ringtoneURL)
		iCRED_PTS := getCreditPoints(w, r, uid)
		p.CRED_PTS = iCRED_PTS
		thisKey := fmt.Sprintf("%s", uid)
		key := datastore.NameKey("TDSPROF", thisKey, nil)
		_, err := datastoreClient.Put(c, key, &p)
		//log.Panicf("[S0442]")
		if err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Put()  [57511]")
	}
	
	if FL_PROFILE_FOUND == false {
		//when no profile yet
		//sendChannelMessage(w,r,uid,msgDtl)
		//create initial profile
		h := r.Header
		xCountry := h.Get("X-AppEngine-Country")
		xRegion  := h.Get("X-AppEngine-Region")
		xCity    := h.Get("X-AppEngine-City")
		rt := time.Now().Local()
		BADGE := fmt.Sprintf("%v", rt.Format("20060102150405"))
		f := TDSPROF {
			SYS_VER: 1,	
			UID: uid,
			PICTURE: "/static/img/no-profile.png",
			BIRTH_DAY: "",	
			ELEM_SCHOOL: "",
			HIGH_SCHOOL: "",
			COLLEGE: "",
			POST_GRAD: "",
			PROFESSION: "",
			COMPANY: "",
			CONTACT_NUM: "",
			SOCIAL_1: "",	
			SOCIAL_2: "",	
			SOCIAL_3: "",
			COUNTRY: xCountry,
			REGION: xRegion,
			CITY: xCity,
			MUNICIPALITY: "",	
			BARANGAY: "",
			SUBDIVISION: "",
			REG_VOTER: "",
			ID_NUMBER: "",
			I_HAVE_TEXT: "",
			I_NEED_TEXT: "",
			BADGE: BADGE,
			CRED_PTS: 20 ,
			POS_VOTES: 0,
			NEG_VOTES: 0,
			LIFE_RATING: 100,
			FILLER_1: "",
			FILLER_2: "",
			FILLER_3: "",
			RINGTONE: "",
		}
 
		dsKey := fmt.Sprintf("%s", uid)
		key2 := datastore.NameKey("TDSPROF", dsKey, nil)
 
		if _, err := datastoreClient.Put(c, key2, &f); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Put()  [57566]")
	}
	
	//update TDSUSERS
	q = datastore.NewQuery("TDSUSERS").Filter("USER =", uid).Limit(1)
	//log.Panicf("[S0443]")
    users := make([]TDSUSERS, 0, 1)
    if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
         panic(err)
      }
	//log.Printf("datastoreClient.Get()  [57576]")
	for _, p := range users{
			if p.USER == uid && strings.TrimSpace(p.USER) != "" {
				lastLoggedIn := p.LAST_LOGIN
				p.LOGGED_IN = 1
				t := time.Now().Local()
				p.LAST_LOGIN = fmt.Sprintf(t.Format("20060102150405"))
				//key := uid
				key := datastore.NameKey("TDSUSERS", uid, nil)
                _, err := datastoreClient.Put(c, key, &p)
                //log.Printf("datastoreClient.Put()  [57586]")
				//log.Panicf("[S0444]")
				if err != nil {
					 //panic(err)
				}
 
				//also update memcache for IS_LOGGED_IN status
				usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", p.USER)
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"Y")
				
				usersProcessor_CACHE_KEY2 := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_TS_%s", p.USER)
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY2,p.LAST_LOGIN)
				
				//------
				
				//increment user hit counter
				ncStatsAccess := fmt.Sprintf("STATS.ACCESS.%s", p.USER)
				time.AfterFunc(5*time.Second, func() {
                    laterQueueCounterIncrement(c, ncStatsAccess)
				})			
				//notify all users of this event via channels
				msgDtl3 := fmt.Sprintf("UID:%v has logged in.",  p.USER)
				data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "LOG-IN", msgDtl3)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")	
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,p.USER,"/login",""),"")
				updateUserActiveData(w, r, c, uid, "logged-in")
				contentMsg := fmt.Sprintf("[ULAPPH] Welcome back %v! Your last login was %v on %v and you were last active %v.", p.USER, lastLoggedIn, p.ACTIVE_DTLS, p.LAST_ACTIVE)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", p.USER, contentMsg, ADMMAIL)
                })
                //broadcast
				msgDtl3 = fmt.Sprintf("UID:%v has logged in at %v >>> <br><img src=\"%v\" width=70 height=70></img>",  p.USER, SYS_SERVER_NAME, getProfilePic(w, r, p.USER))
				sysReq := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, p.USER, getGeoString(w,r))
				//http.Redirect(w, r, sysReq, http.StatusFound)
				_ = fetchURL(w,r,sysReq)
				break
			}
	}
	
	userCount := 0
	
	if SYS_MEM_CACHE_ENABLE == true {
 
		q = datastore.NewQuery("TDSUSERS").Filter("LOGGED_IN =", 1)
		//log.Panicf("[S0445]")
		  recCount,_ := datastoreClient.Count(c,q)
		users = make([]TDSUSERS, 0, recCount)
		if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
			 panic(err)
		  }
		//log.Printf("datastoreClient.Get()  [57637]")
		USER_LIST := ""
		//userCount := 0
		for _, p := range users{
			userCount++
			USER_LIST = fmt.Sprintf("%v,%v", USER_LIST, p.USER)
		}
		
		USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
		putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,USER_LIST)
	}
	key := datastore.NameKey("TDSSTATS", "TOT_ONLINE", nil)
	q = datastore.NewQuery("TDSSTATS").Filter("__key__ =", key)
	//log.Panicf("[S0446]")
	 recCount,_ := datastoreClient.Count(c,q)
	stats := make([]TDSSTATS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [57656]")
	for _, p := range stats{
			if p.STAT_NAME == "TOT_ONLINE" {
				p.VAL_NUM = userCount
				key := datastore.NameKey("TDSSTATS", "TOT_ONLINE", nil)
				if _, err := datastoreClient.Put(c, key, &p); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Put()  [57664]")
				//log.Panicf("[S0447]")
 
				cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", "TOT_ONLINE")
				strCtrVal := fmt.Sprintf("%d", userCount)
				putStrToMemcacheWithoutExp(w,r,cKey,strCtrVal)
			
				break
			}
			
	}
	
	//clear USER ONLINE LIST
	USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
	putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
	
	putStrToMemcacheWithoutExp(w,r,"LAST_LOGIN_TIMESTAMP","")
 
}
 
//online user checker
//checks if user is logged in / currently active or not
func getActiveStatus(w http.ResponseWriter, r *http.Request, UID string) (IS_ACTIVE string)  {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	IS_ACTIVE = "N"
	//uid := UID
	//check cache first
	usersProcessor_IS_LOGGED_IN := ""
	usersProcessor_IS_LOGGED_IN_TS := ""
	usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", UID)
	usersProcessor_IS_LOGGED_IN = getStrMemcacheValueByKey(w,r,usersProcessor_CACHE_KEY)
	usersProcessor_CACHE_KEY2 := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_TS_%s", UID)
	usersProcessor_IS_LOGGED_IN_TS = getStrMemcacheValueByKey(w,r,usersProcessor_CACHE_KEY2)
	if usersProcessor_IS_LOGGED_IN != "" && usersProcessor_IS_LOGGED_IN_TS != "" {
		if usersProcessor_IS_LOGGED_IN == "N" {
			IS_ACTIVE = "N"
		} else {
			timeFormat := "20060102150405"
			then, err := time.Parse(timeFormat, usersProcessor_IS_LOGGED_IN_TS)
			if err != nil {
				 //panic(err)
			}
			duration := time.Since(then)
			if duration.Hours() > 2 {
				IS_ACTIVE = "N"
			} else {
				IS_ACTIVE = "Y"
			}
		}
		return IS_ACTIVE
	}
	//if no cache, use datastore					
	q := datastore.NewQuery("TDSUSERS").Filter("USER =", UID).Limit(1)
	//log.Panicf("[S0448]")
	users := make([]TDSUSERS, 0, 1)
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		 panic(err)
      }
      //log.Printf("datastoreClient.Get()  [57725]")
	for _, p := range users{
			//if p.USER == UID {
				if p.LOGGED_IN == 0 {
					IS_ACTIVE = "N"
					usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", UID)
					putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"N")
					usersProcessor_CACHE_KEY2 := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_TS_%s", UID)
					putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY2,p.LAST_LOGIN)
				} else {
					if p.LAST_ACTIVE != "" && p.USER != "" {
						timeFormat := "20060102150405"
						then, err := time.Parse(timeFormat, p.LAST_ACTIVE)
						if err != nil {
							panic(err)
						}
						duration := time.Since(then)
						if duration.Hours() > 2 {
							IS_ACTIVE = "N"
						} else {
							IS_ACTIVE = "Y"	
						}
						usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", UID)
						putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,IS_ACTIVE)
						usersProcessor_CACHE_KEY = fmt.Sprintf("usersProcessor_IS_LOGGED_IN_TS_%s", UID)
						putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,p.LAST_ACTIVE)
					} else {
						IS_ACTIVE = "N"
					}
			}
	}
	return IS_ACTIVE
}
//task queue to set user as active
func queueStatsUserActive(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
	//log.Printf("queueStatsUserActive()")
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
    //uaPlatform := r.FormValue("uaPlatform")
    uaPlatform := val["uaPlatform"].(string)
	//nameb := r.FormValue("nameb")
	nameb := val["nameb"].(string)
	//limit updates to every 10mins
	//cKeyA := fmt.Sprintf("USER_ACTIVE_%v",uid)
	//isActiveFlag := getStrMemcacheValueByKey(w,r,cKeyA)
	//if isActiveFlag != "" {
	//	return
	//}
 
	q := datastore.NewQuery("TDSUSERS").Filter("USER =", uid).Limit(1)
	//log.Panicf("[S0449]")
    users := make([]TDSUSERS, 0, 1)
    if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
         panic(err)
      }
	//log.Printf("datastoreClient.Get()  [57786]")
	for _, p := range users{
			if p.USER == uid && strings.TrimSpace(p.USER) != "" {
				p.LOGGED_IN = 1
				timestamp := getTimestamp()
				p.LAST_ACTIVE = timestamp
				p.LAST_LOGIN = timestamp
				p.ACTIVE_DTLS = fmt.Sprintf("%s - %s - %v", uaPlatform, nameb, getIpAdd(w,r))
				key := datastore.NameKey("TDSUSERS", uid, nil)
                _, err := datastoreClient.Put(c, key, &p)
                //log.Printf("datastoreClient.Put()  [57795]")
				//log.Panicf("[S0450]")
				if err != nil {
					 panic(err)
				}
 
				//also update memcache for IS_LOGGED_IN status
				usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", p.USER)
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"Y")
 
				//make sure TOT_ONLINE has at least 1
				cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", "TOT_ONLINE")
				TASK_MEMCACHER_CounterIncrement_CACHE := ""
				TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
				
				if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
				//increment existing
					thisCtrNum := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
					//thisNewCtr := thisCtrNum + 1
					if thisCtrNum <= 0 {
						strCtrVal := fmt.Sprintf("%d", 1)
						putStrToMemcacheWithoutExp(w,r,cKey,strCtrVal)
					}
					
				} else {
				//if not exist, create counter
					putStrToMemcacheWithoutExp(w,r,cKey,"1")
				}
				//update USERS_ONLINE_LIST
				usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
				usersOnline_CACHE := ""
				usersOnline_CACHE = getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
	
				i := strings.Index(usersOnline_CACHE, uid)
				if i <= 0 {
					usersOnline_CACHE = fmt.Sprintf("%v,%v", usersOnline_CACHE, uid)
					if usersOnline_CACHE != "" {
						putStrToMemcacheWithoutExp(w,r,usersOnline_CACHE_KEY,usersOnline_CACHE)
					}
				}
				
				//update active flag
				//cKeyA := fmt.Sprintf("USER_ACTIVE_%v",uid)
				//putStrToMemcacheWithExp(w,r,cKeyA,"Y",600)
				
				//------
				break
			}
	}
}
//for sessions in local server (sessions2)
//task queue to broadcast presence to server
func queueBroadcastPresence(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
    //uaPlatform := r.FormValue("uaPlatform")
    uaPlatform := val["uaPlatform"].(string)
    //nameb := r.FormValue("nameb")
    nameb := val["nameb"].(string)
    //host := r.FormValue("host")
    host := val["host"].(string)
    //pic := r.FormValue("pic")
    pic := val["pic"].(string)
    //geo := r.FormValue("geo")
    geo := val["geo"].(string)
    //cont := r.FormValue("cont")
    cont := val["cont"].(string)
	//ip := r.FormValue("ip")
	ip := val["ip"].(string)
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	
	//if this server is not sites server
	if IS_SEARCH_SERVER == "N" && uid != "" {
        time.AfterFunc(5*time.Second, func() {
            laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-broadcast-presence2", map[string]string{"uid": uid, "uaPlatform": uaPlatform, "nameb": nameb, "host": host, "pic": pic, "geo": geo, "cont": cont, "ip": ip})
        })
	
		//save neighborhood (self)
		//prevTempc := ""
		templ := strings.Split(geo,".")
		countryPic := fmt.Sprintf("%v/static/img/flags/%v.gif", getSchemeUrl(w,r), templ[0])
		i := strings.Index(uid, "---")
		if i == -1 {
			chatLink := fmt.Sprintf("%vchat?CHAT_FUNC=newChatRoom&INVITE=%v", host, uid)
			profLink := pic
			userMail := uid
			timestamp := getTimestamp()
			dataCon := fmt.Sprintf("%v@!!!@%v@!!!@%v@!!!@%v@!!!@%v@!!!@%v", userMail, host, profLink, chatLink, countryPic, timestamp)
			ACTIVE_USER_DTL := fmt.Sprintf("ACTIVE_USER_%v_%v_%v", host, uid, ip)
			
			putStrToMemcacheWithExp(w,r,ACTIVE_USER_DTL,dataCon,3600)
			for i:=1; i <= 1000 ; i++ {
				keyID := fmt.Sprintf("ACTIVE_ID_%v", i)
				//ACTIVE_ID_100 = ACTIVE_USER_<host>_<user>_<ip>
				tempc := getStrMemcacheValueByKey(w,r,keyID)
				//if tempc == "" && tempc != prevTempc{
				if tempc == "" {
					putStrToMemcacheWithExp(w,r,keyID,ACTIVE_USER_DTL,3600)
					//prevTempc = tempc
					break
				}
			}
		}
	
	}
	return	
}
 
//for sites server only
//broadcasts notifications to all
func procBroadcastAll(w http.ResponseWriter, r *http.Request) {
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //host := r.FormValue("host")
    host := val["host"].(string)
    //uid := r.FormValue("uid")
    uid := val["uid"].(string)
    //os := r.FormValue("os")
    os := val["os"].(string)
    //browser := r.FormValue("browser")
    browser := val["browser"].(string)
    //pic := r.FormValue("pic")
    pic := val["pic"].(string)
    //geo := r.FormValue("geo")
    geo := val["geo"].(string)
    //cont := r.FormValue("cont")
    cont := val["cont"].(string)
    //ip := r.FormValue("ip")
    ip := val["ip"].(string)
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
				tURL := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
				}
				if tURL != "" {
					i := strings.Index(getSchemeUrl(w,r), tURL)
					//if tURL != "" && i == -1 {
					if string(tURL[0]) != "#" && i == -1 {
						URL := fmt.Sprintf("%v/social?SO_FUNC=proc-broadcast-all&uid=%v&os=%v&browser=%v&host=%v&pic=%v&geo=%v&cont=%v&ip=%v", tURL, uid, os, browser, host, pic, geo, cont, ip)
						postUrlBroadcast(w,r,URL)
					}
				}
			}
		}
	}
	
}

//posts broadcasts to all given a URL
func postUrlBroadcast(w http.ResponseWriter, r *http.Request, URL string) {
	//c := appengine.NewContext(r)
	req, err := http.NewRequest("POST", URL, nil)
    //client := urlfetch.Client(c)
    client := &http.Client{}
	_, err = client.Do(req)
	if err != nil {
		panic(err)
	}
}
//broadcast worldwide contents
func procBroadcastContentsAll(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //encMsg := r.FormValue("encMsg")
    encMsg := val["encMsg"].(string)
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	//if this server is not sites server
	if IS_SEARCH_SERVER != "Y" {
		//Post data to server
		URL := fmt.Sprintf("%v/social?SO_FUNC=proc-broadcast-contents&encMsg=%v", SEARCH_SERVER, encMsg)
		req, err := http.NewRequest("POST", URL, nil)
 
        //client := urlfetch.Client(c)
        client := &http.Client{}
		_, err = client.Do(req)
		if err != nil {
			panic(err)
		}
 
	}
	return	
	
}
//broadcast current location
//executed only when user manually sets the lat/lon via myPreferences
func procBroadcastCustomLoc(w http.ResponseWriter, r *http.Request, uid, latlon string) {
    //c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	//if this server is not sites server
	URL := fmt.Sprintf("%v/social?SO_FUNC=proc-broadcast-location&custom=%v&uid=%v&xhost=%v&xpic=%v", SEARCH_SERVER, latlon, uid, domRefMatchS, getProfilePic(w, r, uid))
	if IS_SEARCH_SERVER != "Y" {
		//Post data to server
		req, err := http.NewRequest("POST", URL, nil)
        //client := urlfetch.Client(c)
        client := &http.Client{}
		_, err = client.Do(req)
		if err != nil {
			panic(err)
		}
	} else {
		time.AfterFunc(5*time.Second, func() {
			laterQueueBroadcastLoc(c, "proc-broadcast-location", latlon, uid, getProfilePic(w, r, uid))
		})
	}
	return
}
//for sites server only
//process messages to all
func procMessageAll(w http.ResponseWriter, r *http.Request) {
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //host := r.FormValue("host")
    host := val["host"].(string)
    //msg := r.FormValue("msg")
    msg := val["msg"].(string)
    //uid := r.FormValue("uid")
    uid := val["uid"].(string)
    //os := r.FormValue("os")
    os := val["os"].(string)
    //browser := r.FormValue("browser")
    browser := val["browser"].(string)
	//host := r.FormValue("host")
    //pic := r.FormValue("pic")
    pic := val["pic"].(string)
    //geo := r.FormValue("geo")
    geo := val["geo"].(string)
    //ip := r.FormValue("ip")
    ip := val["ip"].(string)
	
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
 
				tURL := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
				}
				//i := strings.Index(getSchemeUrl(w,r), tURL)
				i := strings.Index(domRefMatchS, tURL)
				if tURL != "" && i == -1 {
					if string(tURL[0]) != "#" {
						URL := fmt.Sprintf("%v/social?SO_FUNC=proc-broadcast-all-msg&msg=%v&uid=%v&os=%v&browser=%v&host=%v&pic=%v&geo=%v&ip=%v", tURL, url.QueryEscape(msg), uid, os, browser, host, pic, geo,ip)
						postUrlBroadcast(w,r,URL)
					}
				}
			}
		}
	}
	
}
 
//for sites server only
//gets current account logs
func getCurrAccLog(w http.ResponseWriter, r *http.Request) (CURR_ACC_LOG_ALL string) {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	cKey := fmt.Sprintf("CURR_ACC_LOG_ALL")
	//CURR_ACC_LOG_ALL := ""
	CURR_ACC_LOG_ALL = getStrMemcacheValueByKey(w,r,cKey)
	//_, uid := checkSession(w,r)
	if CURR_ACC_LOG_ALL != "" {
		//ok
		CURR_ACC_LOG_ALL = fmt.Sprintf("%v", CURR_ACC_LOG_ALL)
	} else {
		
		currenttime := time.Now().Local()	
		accessLogDateSeq := currenttime.Hour()
		accessLogDate := fmt.Sprintf("%v", currenttime.Format("2006-01-02"))
		accessLogKey := fmt.Sprintf("%v.%v", accessLogDate, accessLogDateSeq)
	
        var g TDSLOGS
        //D0086
        datastoreClient := createClientDS()
		if err := datastoreClient.Get(c, getKeyAccess(c,accessLogKey), &g); err != nil {
			//panic(err)
		}
		//log.Printf("datastoreClient.Get()  [58097]")
		IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
		if IS_SEARCH_SERVER == "Y" {
			putBytesToMemcacheWithExp(w,r,"CURR_ACC_LOG_ALL",g.ACCESS_LOG_TEXT,300)
		}
		CURR_ACC_LOG_ALL = fmt.Sprintf("%v", g.ACCESS_LOG_TEXT)
 
	}
	return CURR_ACC_LOG_ALL
}
 
//for sites server only
//gets the hostlist from cache or from the sites server
func getHostList(w http.ResponseWriter, r *http.Request) (TOT int, HOST_LIST string) {
	//c := appengine.NewContext(r)
	cKey := fmt.Sprintf("HOST_LIST")
	//_, uid := checkSession(w,r)
	//HOST_LIST := ""
	HOST_LIST = getStrMemcacheValueByKey(w,r,cKey)
	if HOST_LIST != "" {
		//ok
	} else {
		//cache host list here
		MEDIA_ID := 0
		cfgName := "SYSTEM_SEARCH_SETTINGS"
		_, MEDIA_ID = getTDSCNFG(w,r,1,cfgName)
		if MEDIA_ID <= 0 {
			fmt.Fprintf(w, "SYSTEM_SEARCH_SETTINGS does not exist. Please create it first via Admin Setup.<br>.")
			return
		}
		//update cache
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		for s.Scan() {
			//fmt.Fprintf(w, "%v", s.Text())	
			buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
		}
		cKey := fmt.Sprintf("HOST_LIST")
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		HOST_LIST = buf.String()
	}
	//secCtr := 0
	TOT = 0
	s := bufio.NewScanner(strings.NewReader(HOST_LIST))
	for s.Scan() {
		if s.Text() != "" {
			TOT++
		}
	}
	return TOT, HOST_LIST
}

//for sites server only
//stores user longitude and latitude locations
func updateMyULAPPHLoc(w http.ResponseWriter, r *http.Request, uid, latlon string) {
	//get user
	//c := appengine.NewContext(r)
	////u := user.Current(c)
	
	MEDIA_ID := 0
	cfgName := "SYSTEM_USER_TO_HOST_SETTINGS"
	_, MEDIA_ID = getTDSCNFG(w,r,1,cfgName)
	if MEDIA_ID <= 0 {
		log.Panicf("ERROR: SYSTEM_USER_TO_HOST_SETTINGS does not exist.")
		return 
	}
	BLOB_KEY := ""
	BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)	
	
	var buf bytes.Buffer
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
	//secCtr := 0
	FL_FOUND := false
	for s.Scan() {
		//fmt.Fprintf(w, "%v", s.Text())
		//find the record & update
		//ulapph@gmail.com|https://christine-cunanan.appspot.com|lat,lon|timestamp
		if s.Text() != "" {
			thisStr := fmt.Sprintf("%v", s.Text())
			if string(thisStr[0]) != "#" && FL_FOUND == false {
				SPL := strings.Split(s.Text(), "|")
				if len(SPL) > 0 {
					if strings.TrimSpace(SPL[0]) == strings.TrimSpace(uid) {
						FL_FOUND = true
						buf.WriteString(fmt.Sprintf("%v|%v|%v|%v\n", uid, SPL[1], latlon, time.Now()))
					} else {
						buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
					}
				} else {
					buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			} else {
				buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}	
		}
	}
	
	cKey := fmt.Sprintf("HOST_LIST2")
	putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
	//log.Printf("User to Host List has been updated with user loc.<br><br>.")
	//fmt.Fprintf(w, "%v", buf.String())
	//update the actual host list file
	SID := fmt.Sprintf("TDSMEDIA-%v", MEDIA_ID)
	err = blobFileSaver(w,r,SID,buf.Bytes())
	if err != nil {
		//log.Printf("User to Host List has been updated at TDSMEDIA-%v", MEDIA_ID)
		return
	}
	return		
}

//for sites server only
//gets the ulapph cliud desktop owned by the user
func getMyULAPPH(w http.ResponseWriter, r *http.Request, mode string) (url []string) {
	//get user
	//c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
    //u := user.Current(c)
	uid := ""
	cKey2 := ""
	if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		uid = r.Header.Get("X-Goog-Authenticated-User-Email")
		cKey2 = fmt.Sprintf("MY_ULAPPH:%v", uid)
		//lets check cache if url is saved
		urls := getStrMemcacheValueByKey(w,r,cKey2)
		//log.Printf("urls: %v", urls)
		if urls != "" {
			SPL := strings.Split(urls, "@888@")
			url = SPL
			return url
		}
	} else {
		//D0044
		if mode == "" {
			//loginGoogle(w,r,r.URL.String())
		}
	}
	//parse host list
	cKey := fmt.Sprintf("HOST_LIST2")
    HOST_LIST2 := ""
    HOST_LIST2 = getStrMemcacheValueByKey(w,r,cKey)
	if HOST_LIST2 == "" {
		HOST_LIST2 = getHostList2(w,r)
	}
	FL_FOUND := false
	scanner := bufio.NewScanner(strings.NewReader(HOST_LIST2))
	for scanner.Scan() {
		if scanner.Text() != "" {
			//ulapph@gmail.com|https://ulapph-installer.appspot.com
			SPL := strings.Split(scanner.Text(), "|")
			if len(SPL) >= 2 {
				//tURL := SPL[1]
				tKey := SPL[0]
				if tKey == uid {
					//ok found you
					//url = append(url, tURL)
					url = append(url, strings.TrimSpace(scanner.Text()))
					FL_FOUND = true
					//log.Printf("url: %v", url)
					//lets store this to memory
				}
			}
		}
	}
	if FL_FOUND == true {
		justString := strings.Join(url,"@888@")
		putStrToMemcacheWithoutExp(w,r,cKey2,justString)
		return url
	}
	return nil 
}
//for sites server only
//gets the user to owned ulapph cloud desktop mapping
func getHostList2(w http.ResponseWriter, r *http.Request) (HOST_LIST2 string) {
	//c := appengine.NewContext(r)
	cKey := fmt.Sprintf("HOST_LIST2")
	//_, uid := checkSession(w,r)
	//HOST_LIST2 := ""
	HOST_LIST2 = getStrMemcacheValueByKey(w,r,cKey)
	if HOST_LIST2 != "" {
		//ok
	} else {
		//cache host list here
		MEDIA_ID := 0
		cfgName := "SYSTEM_USER_TO_HOST_SETTINGS"
		_, MEDIA_ID = getTDSCNFG(w,r,1,cfgName)
		if MEDIA_ID <= 0 {
			fmt.Fprintf(w, "SYSTEM_USER_TO_HOST_SETTINGS does not exist. Please create it first via Admin Setup.<br>.")
			return
		}
		//update cache
		BLOB_KEY := ""
		BLOB_KEY, _, _, _, _, _, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, MEDIA_ID)
		var buf bytes.Buffer
        bData, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
        s := bufio.NewScanner(bytes.NewReader(bData))
		//secCtr := 0
		for s.Scan() {
			//fmt.Fprintf(w, "%v", s.Text())
			buf.WriteString(fmt.Sprintf("%v\n", s.Text()))
		}
		cKey := fmt.Sprintf("HOST_LIST2")
		putBytesToMemcacheWithoutExp(w,r,cKey,buf.Bytes())
		HOST_LIST2 = buf.String()
	}
	return HOST_LIST2
}
//for non-sites server only
//fetch host list from cache
func fetchHostList(w http.ResponseWriter, r *http.Request) (TOT int, HOST_LIST string) {
	//c := appengine.NewContext(r)
	_, SEARCH_SERVER, _ := getSitesServer(w,r)
	cKey := fmt.Sprintf("HOST_LIST")
	//_, uid := checkSession(w,r)
	//HOST_LIST := ""
	HOST_LIST = getStrMemcacheValueByKey(w,r,cKey)
	if HOST_LIST == "" {
		//fetch hosts list from server
		urlStr := fmt.Sprintf("%v/search?f=GET_HOST_LIST", SEARCH_SERVER)
		//client := urlfetch.Client(c)
		if err := r.ParseForm(); err != nil {
			panic(err)
		}
		resp, err := http.Get(urlStr)
		if err != nil {
			panic(err)
		}
		bodyBytes, _ := ioutil.ReadAll(resp.Body)
		HOST_LIST = string(bodyBytes)
		if HOST_LIST != "" {
			cKey := fmt.Sprintf("HOST_LIST")
			putBytesToMemcacheWithoutExp(w,r,cKey,bodyBytes)
		} else {
			cKey := fmt.Sprintf("HOST_LIST")
			putStrToMemcacheWithoutExp(w,r,cKey,"")
		}
	}
	//count lines
	scanner := bufio.NewScanner(strings.NewReader(HOST_LIST))
	TOT = 0
	for scanner.Scan() {
		if scanner.Text() != "" {
			TOT++
		}
	}
	return TOT, HOST_LIST
}

//broadcasts presence to all 
func procBroadcastPresence(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    //c := appengine.NewContext(r)
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
    //uaPlatform := r.FormValue("uaPlatform")
    uaPlatform := val["uaPlatform"].(string)
    //nameb := r.FormValue("nameb")
    nameb := val["nameb"].(string)
    //host := r.FormValue("host")
    host := val["host"].(string)
    //pic := r.FormValue("pic")
    pic := val["pic"].(string)
    //geo := r.FormValue("geo")
    geo := val["geo"].(string)
    //cont := r.FormValue("cont")
    cont := val["cont"].(string)
    //ip := r.FormValue("ip")
    ip := val["ip"].(string)
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	//if this server is not sites server
	if IS_SEARCH_SERVER != "Y" && uid != "" {
		URL := fmt.Sprintf("%v/social?SO_FUNC=proc-broadcast-presence&uid=%v&uaPlatform=%v&nameb=%v&host=%v&pic=%v&geo=%v&cont=%v&ip=%v", SEARCH_SERVER, uid, uaPlatform, nameb, host, pic, geo, cont, ip)
		req, err := http.NewRequest("POST", URL, nil)
        //client := urlfetch.Client(c)
        client := &http.Client{}
		_, err = client.Do(req)
		if err != nil {
			//panic(err)
		}
	}
	return
}
//broadcasts user locations via longitude and latitude
//executed only when user logs in to UWM desktop
func procBroadcastUserLoc(w http.ResponseWriter, r *http.Request, UID, latLon string) {
    //c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	//if this server is not sites server
	URL := fmt.Sprintf("%v/social?SO_FUNC=proc-broadcast-location&uid=%v&xll=%v&xhost=%v&xpic=%v", SEARCH_SERVER, UID, latLon, domRefMatchS, getProfilePic(w, r, UID))
	if IS_SEARCH_SERVER != "Y" && UID != "" {
		//Post data to server
		req, err := http.NewRequest("POST", URL, nil)
        //client := urlfetch.Client(c)
        client := &http.Client{}
		_, err = client.Do(req)
		if err != nil {
			//panic(err)
		}
	} else {
		time.AfterFunc(5*time.Second, func() {
			laterQueueBroadcastLoc(c, "proc-broadcast-location", latLon, UID, getProfilePic(w, r, UID))
		})
	}
	return
}
//broadcasts messages to the sites server 
func procBroadcastMessage(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //msg := r.FormValue("msg")
    msg := val["msg"].(string)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
    //os := r.FormValue("os")
    os := val["os"].(string)
    //browser := r.FormValue("browser")
    browser := val["browser"].(string)
    //host := r.FormValue("host")
    host := val["host"].(string)
    //pic := r.FormValue("pic")
    pic := val["pic"].(string)
    //geo := r.FormValue("geo")
    geo := val["geo"].(string)
    //ip := r.FormValue("ip")
    ip := val["ip"].(string)
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	//if this server is not sites server
	if IS_SEARCH_SERVER != "Y" {
		//Post data to server
		URL := fmt.Sprintf("%v/social?SO_FUNC=proc-broadcast-message-all&msg=%v&uid=%v&os=%v&browser=%v&host=%v&pic=%v&geo=%v&ip=%v", SEARCH_SERVER, msg, uid, os, browser, host, pic, geo,ip)
		req, err := http.NewRequest("POST", URL, nil)
        //client := urlfetch.Client(c)
        client := &http.Client{}
		_, err = client.Do(req)
		if err != nil {
			//panic(err)
		}
 
	}
	return	
	
}
 
//check if sites server name only
/*func getSitesServerName(w http.ResponseWriter, r *http.Request) ( SEARCH_SERVER_NAME string) {
	
    IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		SEARCH_SERVER = domRefMatchS
    }
    if SEARCH_SERVER == "" {
        SEARCH_SERVER = SYS_SEARCH_SERVER
    }
	SSH := strings.Split(SEARCH_SERVER, ".")
	if len(SSH) > 0 {
		SSI := strings.Split(SSH[0], "//")
		if len(SSI) > 0 {
			SEARCH_SERVER_NAME = SSI[1]	
		}		
	}
	return SEARCH_SERVER_NAME
}*/
func getSitesServerName(w http.ResponseWriter, r *http.Request) ( SEARCH_SERVER_NAME string) {
	return ""
}
 
//get hostname from url
func getServerNameFromURL(w http.ResponseWriter, r *http.Request, url string) ( SERVER_NAME string) {
	
	SSH := strings.Split(url, ".")
	if len(SSH) > 0 {
		SSI := strings.Split(SSH[0], "//")
		if len(SSI) > 0 {
			SERVER_NAME = SSI[1]	
		}		
	}
	return SERVER_NAME
}
 
//check if sites server
func getSitesServer(w http.ResponseWriter, r *http.Request) (IS_SEARCH_SERVER, SEARCH_SERVER string, HOST_LIST_MID int) {
    if SYS_STATELESS_SERVER == true {
        SEARCH_SERVER = "https://ulapph-sites.appspot.com"
        return "N", SEARCH_SERVER, 0
    }
	//_, uid := checkSession(w,r)
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()

	cKey := fmt.Sprintf("SEARCH_SERVER")
	//SEARCH_SERVER := ""
	SEARCH_SERVER = getStrMemcacheValueByKey(w,r,cKey)
	
	cKey2 := fmt.Sprintf("IS_SEARCH_SERVER")
	//IS_SEARCH_SERVER := ""
	IS_SEARCH_SERVER = getStrMemcacheValueByKey(w,r,cKey2)
	
	cKey3 := fmt.Sprintf("HOST_LIST_MID")
	//HOST_LIST_MID := ""
	HOST_LIST_MID_STR := getStrMemcacheValueByKey(w,r,cKey3)
	HOST_LIST_MID = str2int(HOST_LIST_MID_STR)
 
	if SEARCH_SERVER != "" && IS_SEARCH_SERVER != "" && HOST_LIST_MID >= 0 {
 
		//return IS_SEARCH_SERVER, SEARCH_SERVER
		
	} else {
			
			//check if system is installed already
			q := datastore.NewQuery("TDSUSERS").Limit(1)
			//log.Panicf("[S0017]")
			users := make([]TDSUSERS, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
				panic(err)
				//return
            }
            //log.Printf("datastoreClient.Get()  [58528]")
			recCount := 0
			for _, _ = range users {
				recCount++
			}
		 
			var g TDSCNFG
			
			if recCount > 0 {
			  thisKey := fmt.Sprintf("SYSTEM_SEARCH_SETTINGS")
              key := datastore.NameKey("TDSCNFG", thisKey, nil)
              //D0086
              datastoreClient := createClientDS()
			  if err := datastoreClient.Get(c, key, &g); err != nil {
				return "N", SYS_SEARCH_SERVER, 0
              }
              //log.Printf("datastoreClient.Get()  [58544]")
			}
		
		  //sVal = g.NUM_VAL
		
		  if g.NUM_VAL > 0 {
			//it is site server
			//cKey := fmt.Sprintf("SEARCH_SERVER")
			IS_SEARCH_SERVER = "Y"
			SEARCH_SERVER = ""
			HOST_LIST_MID = g.NUM_VAL
 
			putStrToMemcacheWithoutExp(w,r,cKey2,"Y")
 
			putStrToMemcacheWithoutExp(w,r,cKey2,"")
		
		  }
		
		  if g.NUM_VAL == 0 {
			//not sites server
			IS_SEARCH_SERVER = "N"
			sHost := g.TXT_VAL
			SEARCH_SERVER = sHost
			HOST_LIST_MID = g.NUM_VAL
 
			putStrToMemcacheWithoutExp(w,r,cKey,sHost)
 
			putStrToMemcacheWithoutExp(w,r,cKey2,"N")
			
		  }
		  //return IS_SEARCH_SERVER, SEARCH_SERVER
	}
	
	return IS_SEARCH_SERVER, SEARCH_SERVER, HOST_LIST_MID
}	
 
 
//task queue to broadcast contents sharing
func procBroadcastContentsWorldwide(w http.ResponseWriter, r *http.Request) {
	
    //c := appengine.NewContext(r)
	 encMsg := r.FormValue("encMsg")
	//log to access log instead
	
	sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", encMsg, "", "" ,"")
	//return
	
}
 
//task queue to broadcast presence status
func procBroadcastPresence2(w http.ResponseWriter, r *http.Request) {
	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	 uid := r.FormValue("uid")
	 os := r.FormValue("uaPlatform")
	 browser := r.FormValue("nameb")
	 host := r.FormValue("host")
	 pic := r.FormValue("pic")
	 geo := r.FormValue("geo")
	 cont := r.FormValue("cont")
	 ip := r.FormValue("ip")
	
	//log to access log instead
	
	templ := strings.Split(geo,".")
	countryPic := fmt.Sprintf("%v/static/img/flags/%v.gif", getSchemeUrl(w,r), templ[0])
	msgDtl3 := ""
	if uid != "ZZ...user" {
		msgDtl3 = fmt.Sprintf("[P01]PRESENCE: <hr><a href=\"%vchat?CHAT_FUNC=newChatRoom&INVITE=%v\" target=\"temp\"><img src=\"%v\" width=60 height=60></img></a><img src=\"%v\" width=48 height=30> %v is active! (%v) <hr> [<a href=\"%vcontents?q=home\" target=\"temp\">Contents</a>] [<a href=\"%vuwm\" target=\"temp\">UWM</a>] [<a href=\"%vguestbook?GB_FUNC=GB_OWNER\" target=\"temp\">GB</a>] [<a href=\"%vchat?CHAT_FUNC=newChatRoom&INVITE=%v\" target=\"temp\">Private Chat</a>] [<a href=\"%vlogout\" target=\"temp\">Logout</a>] - seen at <a href=\"%v\" target=\"temp\">%v</a> using %v OS and %v browser with IP %v [<a href=\"%vadmin-setup?ADMIN_FUNC=BLOCK_IP&ip=%v\" target=\"temp\">Block</a>]", host, uid, pic, countryPic, uid, cont, host, host, host, host, uid, host, host, host, os, browser, ip, host, ip)
		sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", "" ,"")
		//return
		//activity site
		putStrToMemcacheWithExp(w,r,"ACTIVITY_SITE",countryPic,30)
		//broadcast presence to all
		time.AfterFunc(5*time.Second, func() {
            laterBroadcastPresenceAll(c, uid, os, browser, host, pic, geo, cont, ip)
        })
        //save neighborhood
		i := strings.Index(uid, "---")
		if i == -1 {
			chatLink := fmt.Sprintf("%vchat?CHAT_FUNC=newChatRoom&INVITE=%v", host, uid)
			profLink := pic
			userMail := uid
			//rt := time.Now().Local()
			//timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
			timestamp := getTimestamp()
			dataCon := fmt.Sprintf("%v@!!!@%v@!!!@%v@!!!@%v@!!!@%v@!!!@%v", userMail, host, profLink, chatLink, countryPic, timestamp)
			ACTIVE_USER_DTL := fmt.Sprintf("ACTIVE_USER_%v_%v_%v", host, uid, ip)
			//tempCache := getStrMemcacheValueByKey(w,r,ACTIVE_USER_DTL)
			//if tempCache == "" {
				//ACTIVE_USER_<host>_<user>_<ip> = %vchat?CHAT_FUNC=newChatRoom&INVITE=%v
				//putStrToMemcacheWithExp(w,r,ACTIVE_USER_DTL,dataCon,600)
				putStrToMemcacheWithExp(w,r,ACTIVE_USER_DTL,dataCon,3600)
				for i:=1; i <= 1000 ; i++ {
					keyID := fmt.Sprintf("ACTIVE_ID_%v", i)
					//ACTIVE_ID_100 = ACTIVE_USER_<host>_<user>_<ip>
					tempc := getStrMemcacheValueByKey(w,r,keyID)
					if tempc == "" {
						//putStrToMemcacheWithExp(w,r,keyID,ACTIVE_USER_DTL,600)
						putStrToMemcacheWithExp(w,r,keyID,ACTIVE_USER_DTL,3600)
						break
					}
				}
			//}
		}
	}
}
//D0084
//returns all users table that are tagged workforce
func getTDSUSERSwf(w http.ResponseWriter, r *http.Request) ([]byte) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//log.Printf("getTDSUSERSwf")
	cKey := fmt.Sprintf("TDSUSERS_CACHE")
	FL_PROC_CACHE_OK := true
	TDSUSERS_CACHE := getBytMemcacheValueByKey(w,r,cKey)
	//log.Printf("TDSUSERS_CACHE: %v", TDSUSERS_CACHE)
	if TDSUSERS_CACHE != nil {
	//get from cache
		//log.Printf("TDSUSERS_CACHE: found")
		return TDSUSERS_CACHE
	} else {
		//no cache yet
		FL_PROC_CACHE_OK = false
	}
	if FL_PROC_CACHE_OK == false {
		//log.Printf("TDSUSERS direct call")
		q := datastore.NewQuery("TDSUSERS").Filter("FL_WORK =", "Y")
		recCount,_ := datastoreClient.Count(c,q)
		//log.Printf("recCount: %v", recCount)
		users := make([]TDSUSERS, 0, recCount)
		if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
			//checkError(w,r,"",err,"CHK_OQ")
			 panic(err)
        }
        //log.Printf("datastoreClient.Get()  [58684]")
		//log.Printf("saved TDSUSERS to cache")
		data,_ := json.Marshal(users)
		//putBytesToMemcacheWithExp(w,r,cKey,data,86400)
		putBytesToMemcacheWithExp(w,r,cKey,data,180)
		return data
	}
	return nil
}
//D0084
//show matching agents from this site
func procShowAgents(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    //log.Printf("procShowAgents")
    intent := r.FormValue("intent")
    user := r.FormValue("user")
    deviceID := r.FormValue("did")
    //D0085
    cType := r.FormValue("ch")
    fbSrc := r.FormValue("recipient")
    //log.Printf("intent: %v", intent)
    //log.Printf("user: %v", user)
    //log.Printf("deviceID: %v", deviceID)
    //log.Printf("cType: %v", cType)
    //log.Printf("recipient: %v", fbSrc)
    //count agents
    agCtr := 0
    TDSUSERS_CACHE := getTDSUSERSwf(w,r)
    //log.Printf("users: %v", len(users))
    var users []TDSUSERS
    json.Unmarshal(TDSUSERS_CACHE, &users)
    for _, p := range users {
	//for each user, match intent
	//log.Printf("skills: %v", p.FL_WF_ID)
	if p.FL_WF_ID != "0" && p.FL_WF_ID != "" {
		scanner := bufio.NewScanner(strings.NewReader(p.FL_WF_ID))
		for scanner.Scan() {
			if scanner.Text() != "" {
				i := strings.Index(scanner.Text(), intent)
				if i != -1 {
					//log.Printf("FOUND LIVE AGENT...")
					//check login status
					IS_ACTIVE := getActiveStatus(w,r,p.USER)
					if IS_ACTIVE == "N" {
						continue
					}
					//send to the user via channel
					TO_USER := user
					TO_DEVICE := deviceID
					PIC := getProfilePic(w, r, p.USER)
					URL := fmt.Sprintf("%v/chat?CHAT_FUNC=newChatRoom&INVITE=%v&intent=%v", getSchemeUrl(w,r),p.USER,intent)
					//log.Printf("URL: %v", URL)
					if cType == "bubble-chat" {
						data2 := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_ROUTE_AGENT@888@%v@888@%v@888@%v@888@%v@888@%v@888@%v", SYS_SERVER_NAME, TO_USER, TO_DEVICE, PIC, URL, p.USER)
						//log.Printf("data2: %v", data2)
						sendChannelMessage(w,r,"public",data2)
					} else if cType == "fb" {
						//D0085
						dataf := fmt.Sprintf("You can clik below to connect with live agent. %v", URL)
						sendFacebook(w,r,"text",TO_USER,fbSrc,dataf,"")
						sendFacebook(w,r,"image",TO_USER,fbSrc,"",PIC)
					}
					agCtr++
				}
			}
		}
	}
    }
    //log.Printf("procShowAgents done")
    w.WriteHeader(200)
    w.Write([]byte(fmt.Sprintf("%v",agCtr)))
    return
}
//D0085
//process routing bot
func procRoutingBot(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    //log.Printf("procRoutingBot")
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //URL := r.FormValue("URL")
    URL := val["URL"].(string)
    //SENDER := r.FormValue("SENDER")
    SENDER := val["SENDER"].(string)
    //RECIPIENT := r.FormValue("RECIPIENT")
    RECIPIENT := val["RECIPIENT"].(string)
    //log.Printf("URL: %v", URL)
	//client := urlfetch.Client(c)
	resp,err := http.Post(URL,"application/json",nil)
	if err != nil {
		log.Panicf("ERROR: %v", err)
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	//log.Printf("response Body: %v", string(body))
	sendFacebook(w,r,"text",SENDER,RECIPIENT,string(body),"")
	return
}
//D0084
//process live agents requests
func procGetAgents(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    //log.Printf("procGetAgents")
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //intent := r.FormValue("intent")
    intent := val["intent"].(string)
    //user := r.FormValue("user")
    user := val["user"].(string)
    //deviceID := r.FormValue("did")
    deviceID := val["did"].(string)
    //D0085
    //cType := r.FormValue("ch")
    cType := val["ch"].(string)
    //recipient := r.FormValue("recipient")
    recipient := val["recipient"].(string)
    //count agents
    agAvail := 0
	//Trending Contents
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		//scan host list
		_, HOST_LIST := getHostList(w,r)
		//foreach host post presence message
		temp := strings.Split(HOST_LIST,"\n")
		if len(temp) > 0 {
			for j := 0; j < len(temp); j++ {
				tURL := ""
				SPL := strings.Split(temp[j], "|")
				if len(SPL) < 2 {
					tURL = strings.TrimSpace(temp[j])
				} else {
					tURL = strings.TrimSpace(SPL[0])
				}
				i := strings.Index(getSchemeUrl(w,r), tURL)
				thisStr := fmt.Sprintf("%v", temp[j])
				if tURL != "" && i == -1 && string(thisStr[0]) != "#" {
					URL := fmt.Sprintf("%v/social?SO_FUNC=get-agents&intent=%v&user=%v&did=%v&ch=%v&recipient=%v", tURL, intent, user, deviceID, cType, recipient)
					//log.Printf("URL: %v", URL)
					//client := urlfetch.Client(c)
					if err := r.ParseForm(); err != nil {
						panic(err)
					}
					FL_RESP_OK := true
					resp, err := http.Get(URL)
					if err != nil {
						//panic(err)
						FL_RESP_OK = false
					}
					if FL_RESP_OK == true {
						bodyBytes, _ := ioutil.ReadAll(resp.Body)
						//log.Printf("bodyBytes: %v", string(bodyBytes))
						//w.WriteHeader(200)
						//w.Write([]byte("ok"))
						thisCount := str2int(string(bodyBytes))
						agAvail = agAvail + thisCount
					} else {
						//w.WriteHeader(200)
						//w.Write([]byte("error"))
						log.Panicf("Error getting agents...")
					}
				}
			}
		}
	}
	if agAvail <= 0 {
		//send to facebook
		msg := "Apologies, there are no available live agents now. Please check again later."
		sendFacebook(w,r,"text",user,recipient,msg,"")
	} else {
		//send to facebook
		msg := fmt.Sprintf("Great! I've found %v agents all in all. You may repeat the request so we can search for new agents.", agAvail)
		if agAvail == 1 {
			msg = fmt.Sprintf("Great! I've found 1 agent for you. You may repeat the request so we can search for new agents.")
		}
		sendFacebook(w,r,"text",user,recipient,msg,"")
	}
	return
}
//process trending contents in this cloud desktop
func procTrending(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    //D0083
    mode := r.FormValue("t")
    var td []UlapphSources
	q := datastore.NewQuery("TDSSLIDE").Order("-NUM_VIEWS").Limit(DEFAULT_NUM_TREN_NEW)
	//log.Panicf("[S0454]")
	slides := make([]TDSSLIDE, 0, DEFAULT_NUM_TREN_NEW)
	if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [58880]")
	//D0083
	if mode == "html" || mode == "" {
		if err := slidesTrending.Execute(w, slides); err != nil {
		  panic(err)
		}
	} else {
		//D0083
		for _, p := range slides {
			reqStr := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.FL_COUNTRY_SPECIFIC)
			g :=  UlapphSources {
				Source: SYS_SERVER_NAME,
				Author: p.AUTHOR,
				Title: p.TITLE,
				Description: p.DESC,
				URL: reqStr,
				Image: p.TAGS,
				PublishedAt: stmpHumanize(p.DT_UPLOAD),
				Content: "",
			}
			td = append(td, g)
		}
		//data,_ := json.Marshal(td)
		//w.Write(data)
	}
	q = datastore.NewQuery("TDSARTL").Order("-NUM_VIEWS").Limit(DEFAULT_NUM_TREN_NEW)
	//log.Panicf("[S0455]")
	articles := make([]TDSARTL, 0, DEFAULT_NUM_TREN_NEW)
	if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [58911]")
	//D0083
	if mode == "html" || mode == "" {
		if err := articlesTrending.Execute(w, articles); err != nil {
		  panic(err)
		}
	} else {
		//D0083
		for _, p := range articles {
			reqStr := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&MUSIC_ID=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.FL_COUNTRY_SPECIFIC)
			g :=  UlapphSources {
				Source: SYS_SERVER_NAME,
				Author: p.AUTHOR,
				Title: p.TITLE,
				Description: p.DESC,
				URL: reqStr,
				Image: p.TAGS,
				PublishedAt: stmpHumanize(p.DT_UPLOAD),
				Content: "",
			}
			td = append(td, g)
		}
		data,_ := json.Marshal(td)
		w.Write(data)
	}
}
//process whats new contents in this cloud desktop 
func procWhatsNew(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    //D0083
    mode := r.FormValue("t")
    var td []UlapphSources
	q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(DEFAULT_NUM_TREN_NEW)
	//log.Panicf("[S0456]")
	slides := make([]TDSSLIDE, 0, DEFAULT_NUM_TREN_NEW)
	if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [58953]")
	//D0083
	if mode == "html" || mode == "" {
		if err := slidesWhatsNew.Execute(w, slides); err != nil {
		  panic(err)
		}
	} else {
		//D0083
		for _, p := range slides {
			reqStr := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.GET_NEXT, SLIDE_SOUND_SET, p.FL_COUNTRY_SPECIFIC)
			g :=  UlapphSources {
				Source: SYS_SERVER_NAME,
				Author: p.AUTHOR,
				Title: p.TITLE,
				Description: p.DESC,
				URL: reqStr,
				Image: p.TAGS,
				PublishedAt: stmpHumanize(p.DT_UPLOAD),
				Content: "",
			}
			td = append(td, g)
		}
	}
	q = datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(DEFAULT_NUM_TREN_NEW)
	//log.Panicf("[S0457]")
	articles := make([]TDSARTL, 0, DEFAULT_NUM_TREN_NEW)
	if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [58982]")
	//D0083
	if mode == "html" || mode == "" {
		if err := articlesWhatsNew.Execute(w, articles); err != nil {
		  panic(err)
		}
	} else {
		//D0083
		for _, p := range articles {
			reqStr := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v&MUSIC_ID=%v&FL_COUNTRY_SPECIFIC=%v", getSchemeUrl(w,r), p.DOC_ID, p.DOC_ID, p.MUSIC_ID, p.FL_COUNTRY_SPECIFIC)
			g :=  UlapphSources {
				Source: SYS_SERVER_NAME,
				Author: p.AUTHOR,
				Title: p.TITLE,
				Description: p.DESC,
				URL: reqStr,
				Image: p.TAGS,
				PublishedAt: stmpHumanize(p.DT_UPLOAD),
				Content: "",
			}
			td = append(td, g)
		}
		data,_ := json.Marshal(td)
		w.Write(data)
	}
}

//D0042
//Gets the newly discussed contents
//it process comments index
func procDiscussions(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	// 20170708191743
	// 20170708191743
	// TDSARTL-4
	// 1
	// TDSARTL-4
	// ["My","comments","on","your","MIS","UPOU","course"]
	// ulapph@gmail.com
	//	DT_FIRST	DT_UPDATE	IID	NUM_COMMENTS	SID	TAGS	USERS
	rt := time.Now().AddDate(0, 0, -30)
	timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
	q := datastore.NewQuery("TDSCOMIDX").Filter("DT_UPDATE > ", timestamp)
	recCount, _  := datastoreClient.Count(c,q)
	//log.Printf("recCount: %v", recCount)
	cidx := make([]TDSCOMIDX, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &cidx); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [59035]")
	//For each record populate struct
	var cx []Discussions
	for _, p := range cidx{
		//get content record
		//D0042
		SID := p.SID
		SPL := strings.Split(SID,"-")
		TARGET := SPL[0]
		DOC_ID := "0"
		if len(SPL) > 1 {
			DOC_ID = SPL[1]
		}
		docID := str2int(DOC_ID)
		IMAGE := ""
		TITLE := ""
		//AUTHOR := conUidToHTML()
		var buf bytes.Buffer
		comu := p.USERS
		for i:=0; i < len(comu); i++ {
			buf.WriteString(fmt.Sprintf("<a href=\"https://www.ulapph.com/social?SO_FUNC=ViewPeople&UID=%v\"><img src=\"%v\" class=\"img-circle\" width=50 height=50 title=\"Chat with %v\"> ", comu[i], getProfilePic(w, r, comu[i]), comu[i]))
		}
		USERS := template.HTML(buf.String())
		ACTIVITY := stmpHumanizeStr(p.DT_UPDATE)
		DT_UPDATE := p.DT_UPDATE
		COMMENTS := p.NUM_COMMENTS
		URL_DIS := ""
		URL_CON := ""
		FL_SHARED := ""
		DOC_STAT := ""
		MUSIC_ID := ""
		GET_NEXT := ""
		switch TARGET {
			case "TDSSLIDE":
				_, DOC_STAT, FL_SHARED, _, _, TITLE, IMAGE, _, MUSIC_ID, GET_NEXT = getTDSSLIDEBlobKey(w, r, docID)
				URL_DIS = fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=%v&TITLE=%v", SID, TITLE)
				URL_CON = fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&DOC_ID=%v&SID=%v&FORCE=%v&MODE=%v&PARM=%v&SECS=%v&TITLE=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=ON", DOC_ID, SID, "N", "NORMAL", "LOOP", "8", TITLE, MUSIC_ID, GET_NEXT)
			case "TDSARTL":
				_, DOC_STAT, FL_SHARED, _, _, TITLE, _, IMAGE, MUSIC_ID = getTDSARTLBlobKey(w, r, docID)
				URL_DIS = fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=%v&TITLE=%v", SID, TITLE)
				URL_CON = fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%v&SID=%v&FORCE=%v&TITLE=%v&MUSIC_ID=%v", DOC_ID, SID, "N", TITLE, MUSIC_ID)
			case "TDSMEDIA":
				_, _, TITLE, _, DOC_STAT, FL_SHARED, IMAGE, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
				URL_DIS = fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=%v&TITLE=%v", SID, TITLE)
				URL_CON = fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v", docID, docID)
		}
		g := Discussions{
			IMAGE: IMAGE,
			TITLE: TITLE,
			USERS: USERS,
			ACTIVITY: ACTIVITY,
			DT_UPDATE: DT_UPDATE,
			COMMENTS: COMMENTS,
			URL_DIS: URL_DIS,
			URL_CON: URL_CON,
			FL_SHARED: FL_SHARED,
			DOC_STAT: DOC_STAT,
		}
		cx = append(cx, g)
	}
	if err := recentDiscussions.Execute(w, cx); err != nil {
	  panic(err)
	}
}

//process the people directory for this cloud desktop 
func procPeopleDir(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//billing fix
	q := datastore.NewQuery("TDSUSERS").Filter("LOGGED_IN =", 1)
	//log.Panicf("[S0458]")
	recCount, _  := datastoreClient.Count(c,q)
	users := make([]TDSUSERS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [59115]")
	for _, p := range users {
		isLOGGED_IN := p.LOGGED_IN
		USER_ACC_OPT := p.USER_ACC_OPT
		q := datastore.NewQuery("TDSPROF").Filter("UID =", p.USER).Limit(1)
		//log.Panicf("[S0459]")
		profile := make([]TDSPROF, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Get()  [59125]")
		for _, _ = range profile{
			//FL_PROFILE_FOUND = true
			if USER_ACC_OPT != "Invisible" {
				if (isLOGGED_IN == 1) {
					if err := peopleDirectoryList.Execute(w, profile); err != nil {
						 panic(err)
					}
				}
			}
		}
	}
}

//shows the overall sessions 
func showOverallSessions(w http.ResponseWriter, r *http.Request, target string, FL_BOT bool) {
	//billing fix
	//dont display sessions if not logged in
	if FL_BOT == true {
		showOverallRobot(w,r,target)
		return
	}
	cKey := fmt.Sprintf("ACTIVE_SESS_%v", target)
	sess := getStrMemcacheValueByKey(w,r,cKey)
	if sess != "" {
		writeHTMLHeader(w, 200)
		w.Write([]byte(sess))
		return
	}
	var bLine bytes.Buffer
	bLine.WriteString("<html><head>")
	bLine.WriteString(fmt.Sprintf("<META http-equiv=\"refresh\" content=\"300;URL=/directory?DIR_FUNC=%v\">", target))
	style := `<style>
	.img-circle {
    border-radius: 50%;
	}
	</style>`
	bLine.WriteString(style)
	bLine.WriteString("</head><body>")
	valCtr := 0
	uid := ""
	for i:=1; i <= 500 ; i++ {
		keyID := fmt.Sprintf("ACTIVE_ID_%v", i)
		tempc := getStrMemcacheValueByKey(w,r,keyID)
		if tempc != "" {
			tempc2 := getStrMemcacheValueByKey(w,r,tempc)
			if tempc2 != "" {
				//dataCon := fmt.Sprintf("%v@!!!@%v@!!!@%v@!!!@%v@!!!@%v@!!!@%v", userMail, host, profLink, chatLink, countryPic, timestamp)
				SPL := strings.Split(tempc2, "@!!!@")
				if len(SPL) > 0 && len(SPL) == 6 {
					uid = SPL[0]
					host := SPL[1]
					pic := SPL[2]
					chat := SPL[3]
					copic := SPL[4]
					tstmp := stmpHumanizeStr(SPL[5])
					i := strings.Index(uid, "@")
					if i != -1 {
						bLine.WriteString(fmt.Sprintf("<a href=\"%v\" target=\"%v\"><img src=\"%v\" width=60 height=60 class=\"img-circle\" title=\"Chat with %v (%v) @ %v\"></a> ", chat, uid, pic, uid, tstmp, host))
					} else {
						bLine.WriteString(fmt.Sprintf("<a href=\"#\"><img src=\"%v\" width=60 height=60 class=\"img-circle\" title=\"%v (%v) @ %v\"></a> ", copic, uid, tstmp, host))
					}
					valCtr++
				}
			}
		}
	}
	keyID := fmt.Sprintf("ACTIVE_TOT_SESS")
	putStrToMemcacheWithExp(w,r,keyID,fmt.Sprintf("%v", valCtr),3600)
	if valCtr <= 0 {
		showOverallRobot(w,r,target)
		return
	}
	bLine.WriteString(fmt.Sprintf("</body></html>"))
	writeHTMLHeader(w, 200)
	w.Write([]byte(bLine.String()))
	//cache
	putStrToMemcacheWithExp(w,r,cKey,bLine.String(),900) //clear cache every 15 minutes
	return
}

//shows if access is from a robot or non-humans 
func showOverallRobot(w http.ResponseWriter, r *http.Request, target string) {
	writeHTMLHeader(w, 200)
	w.Write([]byte(fmt.Sprintf("<html><head><META http-equiv=\"refresh\" content=\"300;URL=/directory?DIR_FUNC=%v\"></head><body><img src=\"/static/img/cat_sleep.png\" width=150 height=150 title=\"No one online now!\"></body></html>", target)))
	return
}
//shows overall map for users portal
func showOverallMap(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    updateUserActiveData(w, r, c, "", "showOverallMap")
	var dks []UlapphDesktops
	//lets serve some cache
	cKeyC := fmt.Sprintf("JSON_PROC_BROADCAST_LOCATION")
	JLIST := getBytMemcacheValueByKey(w,r,cKeyC)
	//log.Printf("JLIST: %v", string(JLIST))
	//if JLIST != nil {
	if string(JLIST) != "" {
		//log.Printf("Serve map cached!")
		json.Unmarshal(JLIST, &dks)
		data,_ := json.Marshal(dks)
		w.Write(data)
		return
	}
	//get from memcache
	cKey := fmt.Sprintf("PROC_BROADCAST_LOCATION")
	LIST := getStrMemcacheValueByKey(w,r,cKey)
	//DEDUPS := ""
	ctr := 0
	//log.Printf("LIST: %v", LIST)
	if LIST != "" {
		//scan
		//var buf bytes.Buffer
		scanner := bufio.NewScanner(strings.NewReader(LIST))
		//XLIST := strings.Split(LIST, "@888@")
		for scanner.Scan() {
		//for i:=0;i<len(XLIST);i++ {
			if scanner.Text() != "" {
			//ent := strings.TrimSpace(XLIST[i])
			//if ent != "" {
				SPL := strings.Split(scanner.Text(), "|")
				//SPL := strings.Split(ent, "|")
				if len(SPL) >= 4 {
					ctr++
					XUID := SPL[0]
					XHOST := SPL[1]
					XLL := SPL[2]
						lat := float64(0)
						lon := float64(0)
						LPL := strings.Split(XLL, ",")
						if len(LPL) == 2 {
							lat, _ = strconv.ParseFloat(LPL[0], 64)
							lon, _ = strconv.ParseFloat(LPL[1], 64)
						}
					//if no lat/lon
					if lat ==0 && lon == 0 {
					SPL := strings.Split(XUID, ".")
					if len(SPL) > 0 {
						XLL := xCountry2LatLon[SPL[0]]
						LPL := strings.Split(XLL, ",")
						if len(LPL) == 2 {
							lat, _ = strconv.ParseFloat(LPL[0], 64)
							lon, _ = strconv.ParseFloat(LPL[1], 64)
						}
					}
					}
					XTMP := SPL[3]
					XPIC := "/static/img/no-profile.png"
					if len(SPL) >= 5 {
					XPIC = SPL[4]
					}
					//buf.WriteString("")
					//ulapph@gmail.com|https://|14.7391207,121.0501458|2017-07-01 00:40:15.926259213 +0000 UTC
					p := UlapphDesktops {
						PK:				ctr,
						Lat:			lat,
						Lon:			lon,
						Title:			XHOST,
						Status:		0,
						Altitude:		0,
						Placement:		"GAE",
						Brand:			"ULAPPH",
						Model:			"Cloud Desktop",
						AntennaModel:	stmpHumanizeStr(XTMP),
						Username:		XUID,
						Picture:	XPIC,
					}
					dks = append(dks, p)
				}
			}
		}
	}
	data,_ := json.Marshal(dks)
	putBytesToMemcacheWithExp(w,r,cKeyC,data,60)
	w.Write(data)
	return
}
//shows overall map for servers portal
func showOverallMap2(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    updateUserActiveData(w, r, c, "", "showOverallMap2")
	var dks []UlapphDesktops
	//lets serve some cache
	cKeyC := fmt.Sprintf("JSON_PROC_BROADCAST_LOCATION2")
	JLIST := getBytMemcacheValueByKey(w,r,cKeyC)
	//log.Printf("JLIST: %v", string(JLIST))
	//if JLIST != nil {
	if string(JLIST) != "" {
		//log.Printf("Serve map cached!")
		json.Unmarshal(JLIST, &dks)
		data,_ := json.Marshal(dks)
		w.Write(data)
		return
	}
	//get from memcache
	cKey := fmt.Sprintf("PROC_BROADCAST_LOCATION2")
	LIST := getStrMemcacheValueByKey(w,r,cKey)
	if LIST == "" {
		//IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
		//if IS_SEARCH_SERVER == "N" {
		//	_, LIST = fetchHostList(w,r)
		//} else {
			_, LIST = getHostList(w,r)
		//}
	}
	ctr := 0
	//log.Printf("LIST: %v", LIST)
	if LIST != "" {
		//scan
		//var buf bytes.Buffer
		scanner := bufio.NewScanner(strings.NewReader(LIST))
		//XLIST := strings.Split(LIST, "@888@")
		for scanner.Scan() {
		//for i:=0;i<len(XLIST);i++ {
			if scanner.Text() != "" {
			//ULAPPHServerURL,ServerName,ServerDesc,ServerTag,AlternateURL,Latitude,Longitude,ServerIcon
			//ent := strings.TrimSpace(XLIST[i])
			//if ent != "" {
			//log.Printf("LINE: %v", scanner.Text())
			thisStr := fmt.Sprintf("%v", scanner.Text())
                        if string(thisStr[0]) == "#" {
				continue
			}
				SPL := strings.Split(scanner.Text(), "|")
				//SPL := strings.Split(ent, "|")
				if len(SPL) >= 4 {
					ctr++
					XUID := SPL[0]
					XHOST := SPL[0]
					lat := float64(0)
					lon := float64(0)
					lat, _ = strconv.ParseFloat(SPL[2], 64)
					lon, _ = strconv.ParseFloat(SPL[3], 64)
					XPIC := SPL[4] 
					//buf.WriteString("")
					p := UlapphDesktops {
						PK:				ctr,
						Lat:			lat,
						Lon:			lon,
						Title:			XHOST,
						Status:		0,
						Altitude:		0,
						Placement:		"GAE",
						Brand:			"ULAPPH",
						Model:			"Cloud Desktop",
						AntennaModel:	getTimestamp(),
						Username:		XUID,
						Picture:	XPIC,
					}
					dks = append(dks, p)
				}
			}
		}
	}
	data,_ := json.Marshal(dks)
	putBytesToMemcacheWithExp(w,r,cKeyC,data,60)
	w.Write(data)
	return
}

//shows overall people directory	
func showOverallPeople(w http.ResponseWriter, r *http.Request, FL_BOT bool) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    if FL_BOT == true {
		//showOverallRobot(w,r)
		fmt.Fprintf(w, "Robot not allowed!")
		return
	}
	updateUserActiveData(w, r, c, "", "showOverallPeople")
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "N" {
		//redirect
		redURL := fmt.Sprintf("%v/directory?DIR_FUNC=people", getSchemeNewUrl(w,r,SEARCH_SERVER))
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	cKey := fmt.Sprintf("OVERALL_PEOPLE")
	OVERALL_PEOPLE := ""
	OVERALL_PEOPLE = getStrMemcacheValueByKey(w,r,cKey)
	if OVERALL_PEOPLE != "" {
		if err := showPeopleDir.Execute(w, ""); err != nil {
			 panic(err)
		}
		if err := showPeopleDirHdr.Execute(w, ""); err != nil {
			 panic(err)
		}
		//show cache
		w.Write([]byte(OVERALL_PEOPLE))
		if err := showPeopleDirFooter.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {
			 panic(err)
		}
	} else {
		fmt.Fprintf(w, "Sorry, no cache available at this time.")
	}
}
//D0077
//shows user location (site server only) 
func showUserLocation(w http.ResponseWriter, r *http.Request, xhost, xuid string) {
	//c := appengine.NewContext(r)
	//log.Printf("showUserLocation()")
	cKey := fmt.Sprintf("%v-tracker-%v", xhost, xuid)
	//log.Printf("cKey: %v", cKey)
	longStr := ""
	latStr := ""
	longLat := getStrMemcacheValueByKey(w,r,cKey)
	//log.Printf("longLat: %v", longLat)
	SPL := strings.Split(longLat, ",")
	if len(SPL) > 0 {
		longStr = SPL[1]
		latStr = SPL[0]
	}
	//log.Printf("longStr: %v", longStr)
	//log.Printf("latStr: %v", latStr)
	if longStr != "" && latStr != "" {
		l := RealtimeLocation{}
		l.Geometry.Type = "Point"
		l.Geometry.Coordinates = []string{longStr, latStr}
		l.Type = "Feature"
		l.Properties = "" 
		data,_ := json.Marshal(l)
		w.WriteHeader(200)
		w.Write(data)
		//log.Printf("realtime: %#v", l)
	} else {
		l := RealtimeLocation{}
		data,_ := json.Marshal(l)
		w.WriteHeader(500)
		w.Write(data)
	}
	return
}

//shows overall sites 
func showOverallSites(w http.ResponseWriter, r *http.Request, FL_BOT bool) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    if FL_BOT == true {
		//showOverallRobot(w,r)
		fmt.Fprintf(w, "Robot not allowed!")
		return
	}
	updateUserActiveData(w, r, c, "", "showOverallSites")
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "N" {
		//redirect
		redURL := fmt.Sprintf("%v/directory?DIR_FUNC=sites", getSchemeNewUrl(w,r,SEARCH_SERVER))
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	cKey := fmt.Sprintf("OVERALL_SITES")
	OVERALL_SITES := ""
	OVERALL_SITES = getStrMemcacheValueByKey(w,r,cKey)
	if OVERALL_SITES != "" {
		if err := showSitesDir.Execute(w, ""); err != nil {
			 panic(err)
		}
		if err := showSitesDirHdr.Execute(w, ""); err != nil {
			 panic(err)
		}
		//show cache
		//fmt.Fprintf(w, "SOC_FUNC: %s<br>", SOC_FUNC)
		w.Write([]byte(OVERALL_SITES))
		if err := showSitesDirFooter.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {
			 panic(err)
		}
	} else {
		fmt.Fprintf(w, "Sorry, no cache available at this time. <a href=\"/m\">Click here</a> to open quick search.")
	}
}
//shows overall trending contents 
func showOverallTrending(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0083
    mode := r.FormValue("t")
	updateUserActiveData(w, r, c, "", "showOverallTrending")
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "N" {
		//redirect
		//D0083
		if mode != "json" {
			redURL := fmt.Sprintf("%v/social?SO_FUNC=show-trending", getSchemeNewUrl(w,r,SEARCH_SERVER))
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			urlStr := fmt.Sprintf("%v/social?SO_FUNC=show-trending&t=json", SEARCH_SERVER)
			//client := urlfetch.Client(c)
			if err := r.ParseForm(); err != nil {
				panic(err)
			}
			resp, err := http.Get(urlStr)
			if err != nil {
				panic(err)
			}
			bodyBytes, _ := ioutil.ReadAll(resp.Body)
			w.WriteHeader(200)
			w.Write(bodyBytes)
		}
		return
	}
	cKey := fmt.Sprintf("OVERALL_TRENDING")
	//D0083
	if mode == "json" {
		cKey = fmt.Sprintf("OVERALL_TRENDING_JSON")
	}
	OVERALL_TRENDING := ""
	OVERALL_TRENDING = getStrMemcacheValueByKey(w,r,cKey)
	if OVERALL_TRENDING != "" {
		if mode == "json" {
			w.Write([]byte(OVERALL_TRENDING))
			return
		}
		if err := showTrending.Execute(w, ""); err != nil {
			 panic(err)
		}
		if err := showTrendingHdr.Execute(w, ""); err != nil {
			 panic(err)
		}
		//show cache
		//fmt.Fprintf(w, "SOC_FUNC: %s<br>", SOC_FUNC)
		w.Write([]byte(OVERALL_TRENDING))
		if err := showTrendingFooter.Execute(w, ""); err != nil {
			 panic(err)
		}
	} else {
		fmt.Fprintf(w, "Sorry, no cache available at this time.")
	}
}

//shows overall whats new 
func showOverallWhatsNew(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0083
    mode := r.FormValue("t")
	updateUserActiveData(w, r, c, "", "showOverallWhatsNew")
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "N" {
		//redirect
		//D0083
		if mode != "json" {
			redURL := fmt.Sprintf("%v/social?SO_FUNC=show-whats-new&t=%v", getSchemeNewUrl(w,r,SEARCH_SERVER),mode)
			http.Redirect(w, r, redURL, http.StatusFound)
		} else {
			urlStr := fmt.Sprintf("%v/social?SO_FUNC=show-whats-new&t=json", SEARCH_SERVER)
			//client := urlfetch.Client(c)
			if err := r.ParseForm(); err != nil {
				panic(err)
			}
			resp, err := http.Get(urlStr)
			if err != nil {
				panic(err)
			}
			bodyBytes, _ := ioutil.ReadAll(resp.Body)
			w.WriteHeader(200)
			w.Write(bodyBytes)
		}
		return
	}
	cKey := fmt.Sprintf("OVERALL_WHATS_NEW")
	//D0083
	if mode == "json" {
		cKey = fmt.Sprintf("OVERALL_WHATS_NEW_JSON")
	}
	OVERALL_WHATS_NEW := ""
	OVERALL_WHATS_NEW = getStrMemcacheValueByKey(w,r,cKey)
	if OVERALL_WHATS_NEW != "" {
		if mode == "json" {
			w.Write([]byte(OVERALL_WHATS_NEW))
			return
		}
		if err := showWhatsNew.Execute(w, ""); err != nil {
			 panic(err)
		}
		if err := showWhatsNewHdr.Execute(w, ""); err != nil {
			 panic(err)
		}
		//show cache
		//fmt.Fprintf(w, "SOC_FUNC: %s<br>", SOC_FUNC)
		w.Write([]byte(OVERALL_WHATS_NEW))
		if err := showTrendingFooter.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {
			 panic(err)
		}
	} else {
		fmt.Fprintf(w, "Sorry, no cache available at this time.")
	}
}

//D0042
//shows overall discussion and comments
func showOverallDiscussions(w http.ResponseWriter, r *http.Request) {
	
    //c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	updateUserActiveData(w, r, c, "", "showOverallDiscussions")
	
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "N" {
		//redirect
		redURL := fmt.Sprintf("%v/social?SO_FUNC=show-discussions", getSchemeNewUrl(w,r,SEARCH_SERVER))
		http.Redirect(w, r, redURL, http.StatusFound)
		return		
	}
	cKey := fmt.Sprintf("OVERALL_DISCUSSIONS")
	OVERALL_DISCUSSIONS := ""
	OVERALL_DISCUSSIONS = getStrMemcacheValueByKey(w,r,cKey)
	if OVERALL_DISCUSSIONS != "" {	
		if err := showDiscussions.Execute(w, ""); err != nil {
			 panic(err)
		}
		if err := showDiscussionsHdr.Execute(w, ""); err != nil {
			 panic(err)
		}
		//show cache
		//fmt.Fprintf(w, "SOC_FUNC: %s<br>", SOC_FUNC)
		w.Write([]byte(OVERALL_DISCUSSIONS))
		
		if err := showTrendingFooter.Execute(w, SYS_ADD_THIS_PUB_ID); err != nil {
			 panic(err)
		}
	} else {
		fmt.Fprintf(w, "Sorry, no cache available at this time.")
	}
	
}
 
//task queue to broadcast messages
func procBroadcastMessage2(w http.ResponseWriter, r *http.Request) {
	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	 msg := r.FormValue("msg")
	 uid := r.FormValue("uid")
	 os := r.FormValue("os")
	 browser := r.FormValue("browser")
	 host := r.FormValue("host")
	 pic := r.FormValue("pic")
	 geo := r.FormValue("geo")
	 ip := r.FormValue("ip")
	msgInfo := fmt.Sprintf("%v - Sent by %v", msg, uid)
	putStrToMemcacheWithExp(w,r,"BROADCAST_MSG",msgInfo,30)
	data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "BROADCAST", msgInfo)
	ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
	//broadcast message to all
	time.AfterFunc(5*time.Second, func() {
        laterBroadcastMessageSites(c, msg, uid, os, browser, host, pic, geo, ip)
    })
}
 
//sends notifs from all over ulapph (from site server)
func procBroadcastPresence4(w http.ResponseWriter, r *http.Request) {
	 host := r.FormValue("host")
	 geo := r.FormValue("geo")
	 countryPic := ""
	 IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)

	 if IS_SEARCH_SERVER == "N" {
		templ := strings.Split(geo,".")
		countryPic = fmt.Sprintf("%v/static/img/flags/%v.gif", getSchemeUrl(w,r), templ[0])
		
		//update all sys msg
		if getSchemeUrl(w,r) != host {
			putStrToMemcacheWithExp(w,r,"ACTIVITY_EXT",countryPic,30)
		}
	 }
	
}

//process log hits 
func procLogHits(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
	    defer cancel()
	cKey := fmt.Sprintf("OVERALL_HITS_IND_%v", SYS_SERVER_NAME)
	data := getBytMemcacheValueByKey(w,r,cKey)
	cData := ""
	if data != nil {
		cData = fmt.Sprintf("%v", data)
	} else {
		currenttime := time.Now().Local()
		DATE := currenttime.Format("2006-01-02")
		var data []int
		for i:=0; i <= 23; i++ {
			//"|%02d\n"
			accessLogKey := fmt.Sprintf("%v.%d", DATE, i)
            var g TDSLOGS
            //D0086
            datastoreClient := createClientDS()
			if err := datastoreClient.Get(c, getKeyAccess(c,accessLogKey), &g); err != nil {
				//do nothing
				data = append(data, 0)
			} else {
				data = append(data, g.ACCESS_LOG_CTR)
            }
            //log.Printf("datastoreClient.Get()  [59728]")
		}
		
		cData = fmt.Sprintf("%v", data)
		putBytesToMemcacheWithExp(w,r,cKey,[]byte(cData),1800)
	}
	
	writeHTMLHeader(w, 200)
	w.Write([]byte(cData))
	return
}

//process broad messages by putting them in guestbooks	
func procBroadcastMessage4(w http.ResponseWriter, r *http.Request) {
 
	 msg := r.FormValue("msg")
	 uid := r.FormValue("uid")
	
	 IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
 
	 if IS_SEARCH_SERVER == "N"  {
		putStrToMemcacheWithExp(w,r,"BROADCAST_MSG",fmt.Sprintf("%v - Sent by %v", msg, uid),30)
		sysReq := fmt.Sprintf("/guestbook?GB_FUNC=SIGN_ALL&METHOD=GB&content=%v&uid=%v", msg, uid)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return	
		
	 }
	
}

//decrement login counters 
func queueStatsDecLoggedIn(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
    //from := fmt.Sprintf("%v",r.FormValue("from"))
    from := val["from"].(string)
	q := datastore.NewQuery("TDSUSERS").Filter("USER =", uid).Limit(1)
	//log.Panicf("[S0462]")
    users := make([]TDSUSERS, 0, 1)
    if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
         panic(err)
      }
      //log.Printf("datastoreClient.Get()  [59777]")
	for _, p := range users{
			if p.USER == uid && strings.TrimSpace(p.USER) != ""{
				p.LOGGED_IN = 0
				origLL := p.LAST_LOGIN
				t := time.Now().Local()
				lastLog := fmt.Sprintf(t.Format("20060102150405"))
				p.LAST_LOGIN = lastLog
				key := datastore.NameKey("TDSUSERS", uid, nil)
                _, err := datastoreClient.Put(c, key, &p)
                //log.Printf("datastoreClient.Put()  [59787]")
				//log.Panicf("[S0463]")
				if err != nil {
					 panic(err)
				}
				//delete from channel data store
				//delete old channel here
				datastoreClient.Delete(c, getKeyChannel(c,p.USER))			
				//clear autocomps
				cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", p.USER)
				putStrToMemcacheWithoutExp(w,r,cKeyAll,"")
				//notify all users of this event via channels
				msgDtl3 := fmt.Sprintf("UID:%v has logged out.",  p.USER)
				data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "LOG-OUT", msgDtl3)
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
				ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
				sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,p.USER,"/logout",""),"")
				updateUserActiveData(w, r, c, uid, "logged-out")
				contentMsg := fmt.Sprintf("[ULAPPH] Goodbye %v! >>> Your last login was %v on %v and you were last active %v. >>> Logout initiated from: %v", p.USER, origLL, p.ACTIVE_DTLS, p.LAST_ACTIVE, from)
				time.AfterFunc(5*time.Second, func() {
                    laterNotifyGB(c, "autoNotifyPeopleGB", p.USER, contentMsg, ADMMAIL)
                })
                //check online cache
				usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", p.USER)
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"N")
				usersProcessor_CACHE_KEY2 := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_TS_%s", p.USER)
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY2,lastLog)
				//------
				//broadcast
				msgDtl3 = fmt.Sprintf("UID:%v has logged out at %v >>> <br><img src=\"%v\" width=70 height=70></img>",  p.USER, SYS_SERVER_NAME, getProfilePic(w, r, p.USER))
				sysReq := fmt.Sprintf("%vguestbook?GB_FUNC=SIGN_ALL&METHOD=CH2&content=%v&uid=%v&geo=%v", domRefMatchS, msgDtl3, p.USER, getGeoString(w,r))
				_ = fetchURL(w,r,sysReq)
				break
			}
	}
	//count users online to update stats
	q = datastore.NewQuery("TDSUSERS").Filter("LOGGED_IN =", 1)
	//log.Panicf("[S0464]")
	  recCount,_ := datastoreClient.Count(c,q)
    users = make([]TDSUSERS, 0, recCount)
    if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
         panic(err)
      }
      //log.Printf("datastoreClient.Get()  [59830]")
	userCount := 0
	for _, _ = range users{
		userCount++
	}
 
	key := datastore.NameKey("TDSSTATS", "TOT_ONLINE", nil)
	q = datastore.NewQuery("TDSSTATS").Filter("__key__ =", key)
	//log.Panicf("[S0465]")
	stats := make([]TDSSTATS, 0, 1)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		 panic(err)
      }
      //log.Printf("datastoreClient.Get()  [59843]")
	
	for _, p := range stats{
			if p.STAT_NAME == "TOT_ONLINE" {
				p.VAL_NUM = userCount
				key := datastore.NameKey("TDSSTATS", "TOT_ONLINE", nil)
				if _, err := datastoreClient.Put(c, key, &p); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Put()  [59852]")
				//log.Panicf("[S0466]")
				break
			}
 
			cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", "TOT_ONLINE")
			strCtrVal := fmt.Sprintf("%d", userCount)
			putStrToMemcacheWithoutExp(w,r,cKey,strCtrVal)
			
	}
	
	//delete from channel data store
	//delete old channel here
	datastoreClient.Delete(c, getKeyChannel(c,uid))
	//clear USER ONLINE LIST
	USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
	putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,"")
  	
}
 
//process taskqueue to notify message via guestbook
func queueNotifyGB(w http.ResponseWriter, r *http.Request) {
	//log.Printf("queueNotifyGB()")
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //TO := r.FormValue("UID")
    TO := val["UID"].(string)
    //FROM := r.FormValue("FROM")
    FROM := val["FROM"].(string)
    //MESSAGE := r.FormValue("MESSAGE")
    MESSAGE := val["MESSAGE"].(string)
	notifyGuestbook(w, r , "autoNotifyPeopleGB", TO, MESSAGE, FROM)
	return
 
}
//process taskqueue to log users coordinates
func queueLogMapCoors(w http.ResponseWriter, r *http.Request, xLatLong, USER_TYPE, TARGET_URL, viaStr, SID string) {
	if SYS_STATELESS_SERVER == true {
		return
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //split coors
	SPL := strings.Split(xLatLong,"+")
	currenttime := time.Now().Local()
	latitude := ""
	longitude := ""
	if len(SPL) == 2 {
		latitude = SPL[0]
		longitude = SPL[1]
	}
	if latitude != "" && longitude != "" {
		var buffer4 bytes.Buffer
		var buffer5 bytes.Buffer
		buffer4.WriteString(fmt.Sprintf("\n"))
		buffer4.WriteString(fmt.Sprintf("t.push('%v');\n", USER_TYPE))
		buffer5.WriteString(fmt.Sprintf("\n"))
		buffer5.WriteString(fmt.Sprintf("t.push('%v');\n", USER_TYPE))
		PROFILE_PIC_URLME := getProfilePic(w, r, USER_TYPE)
		//14.676041
		//121.043700
		buffer4.WriteString(fmt.Sprintf("x.push('%v');\n", latitude))
		buffer4.WriteString(fmt.Sprintf("y.push('%v');\n", longitude))
		buffer5.WriteString(fmt.Sprintf("x.push('%v');\n", latitude))
		buffer5.WriteString(fmt.Sprintf("y.push('%v');\n", longitude))
		buffer4.WriteString(fmt.Sprintf("h.push('<p><strong>%v</strong><br/><img src=\"%v\" width=50 height=50 title=\"%s\"></img><a href=\"%v\" target=\"link\">%v</a><br>%v - %v</p>');\n", USER_TYPE, PROFILE_PIC_URLME, USER_TYPE, TARGET_URL, TARGET_URL, viaStr, currenttime.Format("2006-01-02 15:04:05 +0800")))
		buffer5.WriteString(fmt.Sprintf("h.push('<p><strong>%v</strong><br/><img src=\"%v\" width=50 height=50 title=\"%s\"></img><a href=\"%v\" target=\"link\">%v</a><br>%v - %v</p>');\n", USER_TYPE, PROFILE_PIC_URLME, USER_TYPE, TARGET_URL, TARGET_URL, viaStr, currenttime.Format("2006-01-02 15:04:05 +0800")))
		//update TDSLOGS key
		//currenttime := time.Now().Local()	
		accessLogDateSeq := currenttime.Hour()
		accessLogDate := fmt.Sprintf("%v", currenttime.Format("2006-01-02"))
		accessLogKey := fmt.Sprintf("%v.%v", accessLogDate, accessLogDateSeq)
		//get old text
        var g TDSLOGS
        //D0086
        datastoreClient := createClientDS()
		if err := datastoreClient.Get(c, getKeyAccess(c,accessLogKey), &g); err != nil {
			//panic(err)
        }
        //log.Printf("datastoreClient.Get()  [59931]")
		buffer4.Write(g.ACCESS_MAP_TEXT)
        ctr := g.ACCESS_LOG_CTR + 1
		//if len(fmt.Sprintf("%v", buffer4.Bytes())) >= 1048576 || len(fmt.Sprintf("%v", g.ACCESS_LOG_TEXT)) >= 1048576 {
		if len(fmt.Sprintf("%v", buffer4.Bytes())) >= 500576 || len(fmt.Sprintf("%v", g.ACCESS_LOG_TEXT)) >= 500576 {
			g.ACCESS_MAP_TEXT = []byte("")
			g.ACCESS_LOG_TEXT = []byte("")
		}
		g = TDSLOGS{
				ACCESS_LOG_DATE: accessLogDate,
				ACCESS_LOG_SEQ: accessLogDateSeq,
				ACCESS_MAP_TEXT: buffer4.Bytes(),
				ACCESS_LOG_TEXT: g.ACCESS_LOG_TEXT,
				ACCESS_LOG_CTR: ctr,
		}
        _, err := datastoreClient.Put(c, getKeyAccess(c,accessLogKey), &g)
        //log.Printf("datastoreClient.Put()  [59946]")
		//log.Panicf("[S0467]")
		if err != nil {
			//panic(err)
			checkError(w,r,"",err,"CHK_OQ")
			return
		}
		//log access for specific content
		SPL := strings.Split(SID,"-")
		//SPM := strings.Split(SID,"@")
		FL_PROCEED := false
		switch {
			case len(SPL) > 1:
				TARGET := SPL[0]
				DOC_nn := SPL[1]
				DOC_ID := str2int(DOC_nn)
				if (TARGET == "TDSSLIDE" || TARGET == "TDSARTL" || TARGET == "TDSMEDIA") && DOC_ID > 0 {
					FL_PROCEED = true
				}
			case SID == "FAM_TRACKER":
				FL_PROCEED = true
        }
        //FL_PROCEED = false
		if FL_PROCEED == true {
			//log access for this specific content
			accessLogKey := fmt.Sprintf("%v", SID)
			//get old text
            var g TDSLOGS
            //D0086
            datastoreClient := createClientDS()
			if err := datastoreClient.Get(c, getKeyAccess(c,accessLogKey), &g); err != nil {
				//panic(err)
            }
            //log.Printf("datastoreClient.Get()  [59979]")
			buffer5.Write(g.ACCESS_MAP_TEXT)
			ctr := g.ACCESS_LOG_CTR + 1
			g = TDSLOGS{
					ACCESS_LOG_DATE: SID,
					ACCESS_LOG_SEQ: 0,
					ACCESS_MAP_TEXT: buffer5.Bytes(),
					ACCESS_LOG_TEXT: g.ACCESS_LOG_TEXT,
					ACCESS_LOG_CTR: ctr,
			}
			//if len(fmt.Sprintf("%v", buffer5.Bytes())) >= 1048487 || len(fmt.Sprintf("%v", g.ACCESS_LOG_TEXT)) >= 1048487 {
			if len(fmt.Sprintf("%v", buffer5.Bytes())) >= 500487 || len(fmt.Sprintf("%v", g.ACCESS_LOG_TEXT)) >= 500487 {
				g.ACCESS_MAP_TEXT = []byte("")
				g.ACCESS_LOG_TEXT = []byte("")
			}
            _, err := datastoreClient.Put(c, getKeyAccess(c,accessLogKey), &g)
            //log.Printf("datastoreClient.Put()  [59994]")
			//log.Panicf("[S0468]")
			if err != nil {
				//panic(err)
				checkError(w,r,"",err,"CHK_OQ")
				return
			}
		}
	}
}
//process taskqueue to notify all users via channel
func queueNotifyCH(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	var buffer4 bytes.Buffer
    var buffer5 bytes.Buffer
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //message := r.FormValue("MESSAGE")
    message := val["MESSAGE"].(string)
	//origMessage := message
    //TSTMP := r.FormValue("TSTMP")
    TSTMP := val["TSTMP"].(string)
    //SID := r.FormValue("SID")
    SID := val["SID"].(string)
    //tName := r.FormValue("tName")
	currenttime := time.Now().Local()
	PROFILE_PIC_URL := ""
	COUNTRY_PIC_URL := ""
	uid := ""
	//add profile pic or country flag for each message
	//UID:banaosys2@gmail.com has logged in. (Date: 2015-06-04 18:32:04 +0800)
	//UID:PH.man.quezon.user has viewed ARTICLE TDSSLIDE-15
	if string(message[0]) == "U" && string(message[1]) == "I" && string(message[2]) == "D" {
		SPL := strings.Split(message," ")
		i := strings.Index(SPL[0], "@")
		if i != -1 {
			SPL := strings.Split(SPL[0],"UID:")
			uid = SPL[1]
			PROFILE_PIC_URL = getProfilePic(w, r, uid)
			COUNTRY_PIC_URL = getCountryPic(w, r, uid)
			message = fmt.Sprintf("<a href=\"/guestbook?UID=%v\" target=\"msg\"><img src=\"%v\" width=60 height=60></img></a><img src=\"%v\" width=48 height=30>%v", uid, PROFILE_PIC_URL, COUNTRY_PIC_URL, message)
		} else {
			// /static/img/flags/%v.gif
			SPL := strings.Split(SPL[0],"UID:")
			uid = SPL[1]
			//geoTag := SPL[1]
			//COUNTRY_PIC_URL = fmt.Sprintf("%v/static/img/flags/%v%v.gif", getSchemeUrl(w,r), string(geoTag[0]), string(geoTag[1]))
			PROFILE_PIC_URL = getProfilePic(w, r, uid)
			COUNTRY_PIC_URL = getCountryPic(w, r, uid)
			if COUNTRY_PIC_URL == "" {
				//SPL := strings.Split(SPL[0],"UID:")
				//if len(SPL) > 1 {
					geo := SPL[1]
					templ := strings.Split(geo,".")
					COUNTRY_PIC_URL = fmt.Sprintf("%v/static/img/flags/%v.gif", getSchemeUrl(w,r), templ[0])
				//}
			}
			message = fmt.Sprintf("<img src=\"%v\" width=60 height=60></img><img src=\"%v\" width=48 height=30>%v", PROFILE_PIC_URL, COUNTRY_PIC_URL, message)
		}
	}
	message = strings.Replace(message, "UID:", "", -1)

	message2 := ""
 
	usersOnline_CACHE_KEY := fmt.Sprintf("USERS_ONLINE_LIST")
	usersOnline_CACHE := getStrMemcacheValueByKey(w,r,usersOnline_CACHE_KEY)
	SPO := strings.Split(usersOnline_CACHE,",")
	fuCtr := 0
	for i := 0; i < len(SPO); i++ {
		if SPO[i] != "" {
		fuCtr++
		}
	}
					
	//message2 := ""
	var buffer3 bytes.Buffer
	buffer3.WriteString(fmt.Sprintf("<a href=\"/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG\" target=\"notifications\"><img src=\"%v/static/img/notify-icon.png\" width=60 height=60></img></a>%v", getSchemeUrl(w,r), message))
 
	switch {
		case strings.Index(buffer3.String(), "DANGER!!!") != -1:
			message2 = strings.Replace(buffer3.String(), "notify-icon", "danger-cat", -1)
		case strings.Index(buffer3.String(), "PRESENCE:") != -1:
			message2 = strings.Replace(buffer3.String(), "notify-icon", "users-online", -1)
		case strings.Index(buffer3.String(), "SHOUT-OUT:") != -1:
			message2 = strings.Replace(buffer3.String(), "notify-icon", "gopher", -1)
		case strings.Index(buffer3.String(), "has joined ULAPPH Chat!") != -1:
			message2 = strings.Replace(buffer3.String(), "notify-icon", "chat", -1)
		case strings.Index(buffer3.String(), "has joined ULAPPH Chat - Private") != -1:
			message2 = strings.Replace(buffer3.String(), "notify-icon", "chat", -1)
		case strings.Index(buffer3.String(), " has sent a broadcast message") != -1:
			message2 = strings.Replace(buffer3.String(), "notify-icon", "golang2", -1)
		default:
			message2 = buffer3.String()
		
	}
 
	ranID := randSeq(6)
	message2 = fmt.Sprintf("%v <br>[%v] [M01-%v]", message2, TSTMP, ranID)

	if SYS_MSG_CHRT_NOTIFY_ENABLE == true {
		//when all later notify
		sendChannelMessage(w,r,"public",message2)
 
	}
		
	thisInd := ")</font></a>"
	i := strings.Index(message2, thisInd)
	if i != -1 {
		SPL := strings.Split(message2, thisInd)
		message2 = SPL[1]
	}
	if message2 != "" {		
		buffer4.WriteString(fmt.Sprintf("<div class=\"info2\">%v (Date: %v)</div>", message2, currenttime.Format("2006-01-02 15:04:05 +0800")))
		i := strings.Index(message2, SID)
		if i != -1 {
			buffer5.WriteString(fmt.Sprintf("<div class=\"info2\">%v (Date: %v)</div>", message2, currenttime.Format("2006-01-02 15:04:05 +0800")))
		}
	}
	
	//update TDSLOGS key
	//currenttime := time.Now().Local()	
	accessLogDateSeq := currenttime.Hour()
	accessLogDate := fmt.Sprintf("%v", currenttime.Format("2006-01-02"))
	accessLogKey := fmt.Sprintf("%v.%v", accessLogDate, accessLogDateSeq)
	
	if message2 == "" {
		message = strings.Replace(message, "UID:", "", -1)
		
		buffer4.WriteString(fmt.Sprintf("<div class=\"info2\">%v (Date: %v)</div>", message, currenttime.Format("2006-01-02 15:04:05 +0800")))
		i := strings.Index(message, SID)
		if i != -1 {
			buffer5.WriteString(fmt.Sprintf("<div class=\"info2\">%v (Date: %v)</div>", message, currenttime.Format("2006-01-02 15:04:05 +0800")))
		}		
	}
	//get old text
    var g TDSLOGS
	if err := datastoreClient.Get(c, getKeyAccess(c,accessLogKey), &g); err != nil {
		//panic(err)
    }
    //log.Printf("datastoreClient.Get()  [60136]")
	buffer4.Write(g.ACCESS_LOG_TEXT)
	IS_SEARCH_SERVER, _, _ := getSitesServer(w,r)
	if IS_SEARCH_SERVER == "Y" {
		putBytesToMemcacheWithExp(w,r,"CURR_ACC_LOG_ALL",buffer4.Bytes(),300)
	}
	//update access logs for this content
	SPL := strings.Split(SID,"-")
	if len(SPL) > 1 {
		TARGET := SPL[0]
		DOC_nn := SPL[1]
		DOC_ID := str2int(DOC_nn)
		if (TARGET == "TDSSLIDE" || TARGET == "TDSARTL" || TARGET == "TDSMEDIA") && DOC_ID > 0 {
								
			//log access for this specific content
			accessLogKey := fmt.Sprintf("%v", SID)
			
			//get old text
            var g TDSLOGS
            //D0086
            datastoreClient := createClientDS()
			if err := datastoreClient.Get(c, getKeyAccess(c,accessLogKey), &g); err != nil {
				//panic(err)
			}
			//log.Printf("datastoreClient.Get()  [60178]")
			buffer5.Write(g.ACCESS_LOG_TEXT)
			
			//ctr := g.ACCESS_LOG_CTR + 1
			
			g = TDSLOGS{
					ACCESS_LOG_DATE: SID,
					ACCESS_LOG_SEQ: 0,
					ACCESS_MAP_TEXT: g.ACCESS_MAP_TEXT,
					ACCESS_LOG_TEXT: buffer5.Bytes(),
					//ACCESS_LOG_CTR: ctr,
					ACCESS_LOG_CTR: g.ACCESS_LOG_CTR,
			}
			if g.ACCESS_LOG_TEXT != nil {

                _, err := datastoreClient.Put(c, getKeyAccess(c,accessLogKey), &g)
                //log.Printf("datastoreClient.Put()  [60194]")
				//log.Panicf("[S0470]")
				if err != nil {
						//panic(err)
						checkError(w,r,"",err,"CHK_OQ")
						return
				}

			}
		}
		
	}
	return
}
 
 
//process taskqueue to log ratings
func queueRatings(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //RTG_FUNC := r.FormValue("RTG_FUNC")
    RTG_FUNC := val["RTG_FUNC"].(string)
    //UID := fmt.Sprintf("%v",r.FormValue("UID"))
    UID := val["UID"].(string)
    //FROM := r.FormValue("FROM")
    FROM := val["FROM"].(string)
	if FROM == "" {
		return
	}
 
	switch  {
	
		case RTG_FUNC == "RatePeople-PLUS" || RTG_FUNC == "RatePeople-NEG":
 
			q := datastore.NewQuery("TDSPROF").Filter("UID =", UID).Limit(1)
			//log.Panicf("[S0471]")
			profile := make([]TDSPROF, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
				 panic(err)
            }
            //log.Printf("datastoreClient.Get()  [60239]")
			for _, p := range profile{
				if RTG_FUNC == "RatePeople-PLUS" {
					p.POS_VOTES = p.POS_VOTES + 1
 
				} else {
					p.NEG_VOTES = p.NEG_VOTES + 1
				}
				thisKey := fmt.Sprintf("%s", UID)
				key := datastore.NameKey("TDSPROF", thisKey, nil)
                _, err := datastoreClient.Put(c, key, &p)
                //log.Printf("datastoreClient.Put()  [60250]")
				//log.Panicf("[S0472]")
				if err != nil {
					 panic(err)
				}
 
				
				//clear profile cache
				cKey := fmt.Sprintf("SLIDES_PROFILE_VIEW_%s", UID)
				//uid := UID
				putStrToMemcacheWithoutExp(w,r,cKey,"")
				
				contentMsg := ""
				if RTG_FUNC == "RatePeople-PLUS" {
					contentMsg = fmt.Sprintf("[ULAPPH] Good job! I'm giving you a POSITIVE rating! FROM: %v", FROM)
				} else {
					contentMsg = fmt.Sprintf("[ULAPPH] Sorry, I'm giving you a NEGATIVE rating! Please improve more. FROM: %v", FROM)
				}
				notifyGuestbook(w, r , "autoNotifyPeopleGB", UID, contentMsg, FROM)
				
				break
				
			}	
	}
}

//D0076
//process taskqueue to embed source to SIDs
func queueAutoMLProc(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //log.Printf("queueAutoMLProc()")
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //AML_FUNC := r.FormValue("FUNC")
    AML_FUNC := val["AML_FUNC"].(string)
	//log.Printf("AML_FUNC: %v", AML_FUNC)
	switch AML_FUNC {
		case "CCTV":
		//process cctv events
        //IMG := r.FormValue("IMG")
        IMG := val["IMG"].(string)
		//log.Printf("IMG: %v", IMG)
		//LABEL := r.FormValue("LABEL")
		//log.Printf("LABEL: %v", LABEL)
		//PINKEY := r.FormValue("PINKEY")
		//log.Printf("PINKEY: %v", PINKEY)
        //TITLE := r.FormValue("TITLE")
        TITLE := val["TITLE"].(string)
		//log.Printf("TITLE: %v", TITLE)
		//STRUWM := r.FormValue("STRUWM")
		//log.Printf("STRUWM: %v", STRUWM)
        //UID := r.FormValue("UID")
        UID := val["UID"].(string)
		//log.Printf("UID: %v", UID)
		g := &AutoMLPayload{}
		g.Payload.Image.ImageBytes = openImageURLtoBytes(w,r,IMG)
		//log.Printf("Payload: %#v", g)
		data, _ := json.Marshal(g)
		body := bytes.NewBuffer(data)
		req, _ := http.NewRequest("POST", AUTOML_PREDICT_URL, body)
		thisLength := strconv.Itoa(len(data))
		req.Header.Set("Content-Length", thisLength)
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Accept", "application/json")
		//set automl api
		rdr := strings.NewReader(AUTOML_SERVER_JSON)
		AUTOML_KEY_JSON, err := ioutil.ReadAll(rdr)
		if err != nil {
			log.Panicf("[ioutil.ReadAll] ERROR: %v", err)
			return
		}
		//ctx := newappengine.NewContext(r)
		conf, err := google.JWTConfigFromJSON(AUTOML_KEY_JSON, "https://www.googleapis.com/auth/cloud-platform")
		if err != nil {
			log.Panicf("[google.JWTConfigFromJSON] ERROR: %v", err)
			return
		}
		//client := conf.Client(ctx)
        client := conf.Client(c)
		//log.Printf("req: %v", req)
		res, err := client.Do(req)
		if err != nil {
			log.Panicf("client.Do err: %v", err)
		}
		if res.StatusCode != 200 {
			//log.Printf("res: %v", res)
			//log.Printf("error posting data")
		}else{
			//log.Printf("res: %v", res)
			bodyBytes, err := ioutil.ReadAll(res.Body)
			if err != nil {
				//return
				log.Panicf("ioutil.ReadAll err: %v", err)
				return
			} else {
				//log.Printf("response: %#v", string(bodyBytes))
				data := map[string]interface{}{}
				dec := json.NewDecoder(bytes.NewReader(bodyBytes))
				dec.Decode(&data)
				jq := jsonq.NewQuery(data)
				jqVal, err := jq.String("payload", "0", "displayName")
				if err != nil {
					log.Panicf("ERROR: %v", err)
				}
				//log.Printf("jqVal: %v", jqVal)
				if jqVal == "cctvKitchenPersonDetected" {
					//person was detected
					CAPTION := fmt.Sprintf("Person detected in the %v", TITLE)
					MESSAGE := fmt.Sprintf("<a href=\"#\" onclick=\"openWindow('%v','Previous'); return false\"><img src=\"%v\" width=\"100\" height=\"100\"></a><br>", IMG, IMG)
					data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_STRUWM_ALARM@888@%v@888@%v", CAPTION, MESSAGE)
					sendChannelMessage(w,r,UID,data)
					sendChannelMessage(w,r,"cctv",data)
					//log.Printf("Channel sent to: %v", UID)
				}
			}
		}
	}
	return
}
//process taskqueue to embed source to SIDs
//func queueWgetUrl(w http.ResponseWriter, r *http.Request) {
func WgetUrlDownload(w http.ResponseWriter, r *http.Request, ATS_FUNC, UID, URL string) {
    //log.Printf("WgetUrlDownload")
    //c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
    //    defer cancel()
    //D0088
    //_, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //ATS_FUNC := val["WG_FUNC"].(string)
    //ATS_FUNC := r.FormValue("WG_FUNC")
	//WCMD := r.FormValue("WCMD")
    //UID := r.FormValue("UID")
    //UID := val["UID"].(string)
    //WURL := r.FormValue("WURL")
    //WURL := val["WURL"].(string)
    //log.Printf("ATS_FUNC: %v", ATS_FUNC)
    //log.Printf("UID: %v", UID)
    //log.Printf("WURL: %v", WURL)
    //log.Printf("url: %v", URL)
    //prep mime list
    _, _ = getMimeType(w,r,path.Ext(""))
    //log.Printf("switch...")
	switch ATS_FUNC {
        case "WGET-URL":
            //log.Printf("WGET-URL")
			//WCMD, _ = url.QueryUnescape(WCMD)
			//SPL := strings.Split(WCMD, "wget ")
			thisUrl, _ := url.QueryUnescape(URL)
            urlRespBytes, err := fetchURLB(w,r,thisUrl)
            if urlRespBytes == nil {
                //log.Printf("ERROR: WGET did not execute properly.")
                return
            }
            //log.Printf("urlRespBytes: %v", len(urlRespBytes))
            //upload to cloud storage
            //log.Printf("Upload to GCS: uploadGcsObject()")
            //save to GCS
            ctx := context.Background()
            //inpData := buf.String()
            public := false
            uid := UID
            UUID := generateUUID(w,r,uid,"TDSMEDIA")
            //log.Printf("UUID: %v", UUID)
            _, objAttrs, err := uploadGcsObject(ctx, bytes.NewReader(urlRespBytes), UUID, public)
            //_, _, err = uploadGcsObject(ctx, bytes.NewReader(urlRespBytes), UUID, public)
            if err != nil {
                switch err {
                case storage.ErrBucketNotExist:
                    log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
                default:
                    log.Fatalf("ERROR: %v", err)
                }
            }
            //log.Printf("URL: %s", objectURL(objAttrs))
            //log.Printf("MediaURL: %s", objAttrs.MediaLink)
            //log.Printf("Size: %d", objAttrs.Size)
            //log.Printf("MD5: %x", objAttrs.MD5)
            //log.Printf("objAttrs: %+v", objAttrs)
            //log.Printf("UUID: %v", UUID)
            //save object url
            //gcsObjectUrl = objectURL(objAttrs)
            gcsObjectUrl := UUID
            gcsMediaUrl := mediaURL(UUID)
            //serve-media
            //w.Header().Set("Access-Control-Allow-Origin", "*")
            //w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
            _, file := path.Split(thisUrl)
            //fmt.Println(dir)
            //fmt.Println(file)
            //values := r.URL.Query()
            //values.Add("UID", uid)
            UID := uid
            //values.Add("DATA_TYPE", "auto")
            DATA_TYPE := "auto"
            //values.Add(name, value)
            //file = url.QueryEscape(file)
            //TITLE := fmt.Sprintf("%v", file)
            TITLE := file
            //values.Add("TITLE", TITLE)
            DESC := fmt.Sprintf("Wget - %v", file)
            //DESC = url.QueryEscape(DESC)
            //values.Add("DESC", DESC)
            //log.Printf("TITLE: %v", TITLE)
            //log.Printf("DESC: %v", DESC)
            CATEGORY := ""
            //values.Add("CATEGORY", "")
            FL_SHARED := ""
            //values.Add("FL_SHARED", "")
            FILE_NAME := file
            //values.Add("FILE_NAME", "")
            MIME_TYPE := objAttrs.ContentType
            //values.Add("MIME_TYPE", "")
            FL_ADD_WP := ""
            //values.Add("FL_ADD_WP", "")
            DOC_STAT := ""
            //values.Add("DOC_STAT", "")
            EMBED := ""
            //values.Add("EMBED", "")
            //D0066
            STRUWM := ""
            //values.Add("STRUWM", "")
            STRUWMI := ""
            //values.Add("STRUWMI", "")
            AUTOML := ""
            //values.Add("AUTOML", "")
            PINKEY := ""
            //values.Add("PINKEY", "")
            OPT := ""
            //values.Add("OPT", "")
            blobkey5 := gcsObjectUrl
            //values.Add("blobkey5", blobkey5)
            murl := gcsMediaUrl
            //values.Add("murl", murl)
            reqStr := fmt.Sprintf("/serve-media/?DATA_TYPE=%s&TITLE=%s&DESC=%s&CATEGORY=%s&blobKey5=%v&FL_SHARED=%v&FILE_NAME=%v&MIME_TYPE=%v&FL_ADD_WP=%v&UID=%v&DOC_STAT=%v&EMBED=%v&OPT=%v&STRUWM=%v&STRUWMI=%v&AUTOML=%v&PINKEY=%v&murl=%v", DATA_TYPE, TITLE, DESC, CATEGORY, blobkey5, FL_SHARED, FILE_NAME, MIME_TYPE, FL_ADD_WP, UID, DOC_STAT, EMBED, OPT, STRUWM, STRUWMI, AUTOML, PINKEY, murl)
            //log.Printf("reqStr: %v", reqStr)
            http.Redirect(w, r, reqStr, http.StatusFound)
            //r.URL.RawQuery = values.Encode()
            //log.Printf("Calling handleServeMedia()")
            //handleServeMedia(w,r)
            return
	}
	//return
}
//D0074
//update cctv list
func struwmUpdateCCTVList(w http.ResponseWriter, r *http.Request) {
    //log.Printf("struwmUpdateCCTVList")
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    //log.Printf("struwmUpdateCCTVList...")
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := r.FormValue("uid")
    uid := val["uid"].(string)
    //CATEGORY := r.FormValue("desktop")
    CATEGORY := val["desktop"].(string)
	//D0074
	//cKeyLA := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", uid)
	cKeyLA := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", SYS_SERVER_NAME)
	//log.Printf("cKeyLA: %v", cKeyLA)
	//cctvla := getStrMemcacheValueByKey(w,r,cKeyLA)
	//log.Printf("cctvla: %v", cctvla)
	//cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", uid)
	cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", SYS_SERVER_NAME)
	cctvla, _ := getTDSCNFG(w,r,0,cfgName)
	cctvla2 := ""
	SPL := strings.Split(cctvla, "@888@")
	FL_CAT_FOUND := false
	for i:=0;i<len(SPL);i++ {
		if SPL[i]==CATEGORY {
			FL_CAT_FOUND = true
			continue
		} else {
			//donothing
		}
	}
	if FL_CAT_FOUND == false {
		//append
		cctvla2 = fmt.Sprintf("%v@888@%v", cctvla, CATEGORY)
		//log.Printf("cctvla2: %v", cctvla2)
		putStrToMemcacheWithExp(w,r,cKeyLA,cctvla2,GEN_CONTENT_EXPIRES4)
		thisKey := cfgName
		g := TDSCNFG{
				SYS_VER: 1,
				USER: uid,
				CFG_ID: thisKey,
				DAT_TYP: "TXT",
				NUM_VAL: 0,
				TXT_VAL: cctvla2,
				CFG_DESC: "Set via CCTV app",
		}
		key := datastore.NameKey("TDSCNFG", thisKey, nil)
		if _, err := datastoreClient.Put(c, key, &g); err != nil {
				panic(err)
				//return
        }
        //log.Printf("datastoreClient.Put()  [60551]")
	}
}
//D0066
//process taskqueue to stream mirror to UWM 
func struwmStreamMirrorToUwm(w http.ResponseWriter, r *http.Request, uid, STRUWM, CATEGORY, SRC, CAPTION string) {
	//c := appengine.NewContext(r)
	//log.Printf("struwmStreamMirrorToUwm: %v", CATEGORY)
	UID := ""
	if _, err := strconv.Atoi(STRUWM); err != nil {
		UID = uid
	} else {
		UID = fmt.Sprintf("%v---%v", uid, STRUWM)
	}
	data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_STRUWM_MIRROR@888@%v@888@%v", SRC, CAPTION)
	//log.Printf("%v", data)
	sendChannelMessage(w,r,UID,data)
	//also send to main uwm
	sendChannelMessage(w,r,uid,data)
	//D0083
	//also send to all users in the site
	data2 := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_STRUWM_DESKTOP@888@%v@888@%v@888@%v@888@%v@888@%v", SYS_SERVER_NAME, STRUWM, SRC, CAPTION, UID)
	sendChannelMessage(w,r,"public",data2)
	//dummyCmd(w,r,uid)
	//D0071
	//save this image to memcache
	//STRUWM-desktop123-previous = <url>
	cKey := fmt.Sprintf("STRUWM-%v-previous-image", CATEGORY)
	//log.Printf("cKey: %v", cKey)
	putStrToMemcacheWithExp(w,r,cKey,SRC,GEN_CONTENT_EXPIRES)
}
//D0071
func struwmPreviousImageCompare(w http.ResponseWriter, r *http.Request, uid, blobkey, STRUWM, AUTOML, CATEGORY, SRC, TITLE string) (bool) {
	ulapphDebug(w,r, "info", fmt.Sprintf("struwmPreviousImageCompare() %v", ""))
    //log.Printf("struwmPreviousImageCompare")
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //get previous image
    //TDSMEDIA/CCTV/1/previous
    //prevData := fmt.Sprintf("%v/TDSMEDIA/CCTV/%v/previous", uid,STRUWM)
    prevData := fmt.Sprintf("%v/TDSMEDIA/CCTV/previous/%v", uid,STRUWM)
	ulapphDebug(w,r, "info", fmt.Sprintf("prevData: %v", prevData))
    //compare prevURL with SRC
    //log.Printf("openImageURL")
	//imgA := openImageURL(w,r,prevURL)
    //imgB := openImageURL(w,r,SRC)
    imga, err := readGcsObject(prevData)
    if err != nil && imga == nil {
        //log.Printf("Error reading blobkey: %v", blobkey)
        //return false
    }
	imgA, _, err := image.Decode(bytes.NewReader(imga))
	if err != nil {
        //log.Printf("ERROR: image.Decode() %v", err)
		//panic(err)
	}
    imgb, err := readGcsObject(blobkey)
    if err != nil {
        //log.Printf("Error reading blobkey: %v", blobkey)
        //return false
    }
	imgB, _, err := image.Decode(bytes.NewReader(imgb))
	if err != nil {
        //log.Printf("ERROR: image.Decode() %v", err)
		//panic(err)
    }
    //log.Printf("Saving as previous data...")
    err = readCopyGcsObject(blobkey, prevData)
    if err != nil {
        //log.Printf("ERROR: readCopyGcsObject() %v", err)
        //return false
    }
	//log.Printf("imgA: %v", imgA)
	//log.Printf("imgB: %v", imgB)
	distance, err := perceptive.CompareImages(imgA, imgB, perceptive.Difference)
	if err != nil {
		panic(err)
	}
	//detect any intruder
	FL_INTRUDER := false
	if distance == 0 {
		// images are likely the same
		//log.Printf("distance[%v]: images are likely the same", distance)
	} else if distance >= 1 && distance <= 10 {
		// images are potentially a variation
		//log.Printf("distance[%v]: images are potentially a variation", distance)
		if distance > 1 {
			FL_INTRUDER = true
		}
	} else {
		// images are likely different
		//log.Printf("distance[%v]: images are likely different", distance)
		FL_INTRUDER = true
	}
	//D0076
	if FL_INTRUDER == true && AUTOML == "Y" {
		cKey := fmt.Sprintf("CCTV_AUTODETECTION_FLAG_%v", SYS_SERVER_NAME)
		//log.Printf("cKey: %v", cKey)
		cctv_status := getStrMemcacheValueByKey(w,r,cKey)
		if (strings.TrimSpace(cctv_status) == "") {
			//get status in DS
			cctv_status, _ = getTDSCNFG(w,r,0,cKey)
		}
		if strings.TrimSpace(cctv_status) == "Y" {
            //D0076
            //send image to AutoML
            time.AfterFunc(5*time.Second, func() {
                laterAutoML(c, "CCTV", "cctvKitchenPersonDetected", uid, TITLE, STRUWM, SRC)
            })
        }
    }
    //log.Printf("FL_INTRUDER: %v", FL_INTRUDER)
	return FL_INTRUDER
}
//D0098
func struwmPreviousImageCompareSwfs(w http.ResponseWriter, r *http.Request, prevURL, SRC string) (bool) {
	if prevURL == "" {
		return true
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("struwmPreviousImageCompareSwfs() %v", ""))
    //log.Printf("struwmPreviousImageCompare")
	//c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
    //get previous image
    //TDSMEDIA/CCTV/1/previous
    //prevData := fmt.Sprintf("%v/TDSMEDIA/CCTV/%v/previous", uid,STRUWM)
    //prevData := fmt.Sprintf("%v/TDSMEDIA/CCTV/previous/%v", uid,STRUWM)
    //compare prevURL with SRC
    //log.Printf("openImageURL")
	imgA := openImageURL(w,r,prevURL)
    imgB := openImageURL(w,r,SRC)
	distance, err := perceptive.CompareImages(imgA, imgB, perceptive.Difference)
	if err != nil {
		panic(err)
	}
	//detect any intruder
	FL_INTRUDER := false
	if distance == 0 {
		// images are likely the same
		//log.Printf("distance[%v]: images are likely the same", distance)
	} else if distance >= 1 && distance <= 10 {
		// images are potentially a variation
		//log.Printf("distance[%v]: images are potentially a variation", distance)
		if distance > 1 {
			FL_INTRUDER = true
		}
	} else {
		// images are likely different
		//log.Printf("distance[%v]: images are likely different", distance)
		FL_INTRUDER = true
	}
    //log.Printf("FL_INTRUDER: %v", FL_INTRUDER)
	return FL_INTRUDER
}
//get image url and output bytes 
func openImageURLtoBytes(w http.ResponseWriter, r *http.Request, imgURL string) []byte {
	//c := appengine.NewContext(r)
	//client := urlfetch.Client(c)
    urlRespBytes, err := fetchURLB(w,r,imgURL)
    if err != nil {
        //log.Printf("ERROR: %v", err)
    }
	return urlRespBytes
}
//D0071
//get image url and output imageApi.Image
func openImageURL(w http.ResponseWriter, r *http.Request, imgURL string) image.Image {
	//c := appengine.NewContext(r)
	//log.Printf("openImageURL...")
	//client := urlfetch.Client(c)
    //log.Printf("openImageURL()")
    //log.Printf("imgURL: %v", imgURL)
    client := &http.Client{
            Timeout: 60 * time.Second,
    }
    //log.Printf("client: %v", client)
    req, err := http.NewRequest("GET", imgURL, nil)
    if err != nil {
            log.Fatalf("failed to create HTTP request: %v", err)
    }
    //log.Printf("req: %v", req)
    values := url.Values{"test":{"1"},}
    thisLength := strconv.Itoa(len(values))
    req.Header.Set("Content-Length", thisLength)
    req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
    response, err := client.Do(req)
    if err != nil {
            log.Fatalf("HTTP request failed: %v", err)
    }
    defer response.Body.Close()
    //log.Printf("response: %v", response)
    //bodyBytes, err := ioutil.ReadAll(response.Body)
	img, _, err := image.Decode(response.Body)
	if err != nil {
		//panic(err)
	}
	return img
}

//process taskqueue to embed source to SIDs
func queueAddToSid(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //ATS_FUNC := r.FormValue("ATS_FUNC")
    ATS_FUNC := val["ATS_FUNC"].(string)
    //UID := r.FormValue("UID")
    UID := val["UID"].(string)
    //SID := r.FormValue("SID")
    SID := val["SID"].(string)
    //TYP := r.FormValue("TYP")
    TYP := val["TYP"].(string)
    //SRC := r.FormValue("SRC")
    SRC := val["SRC"].(string)
    //CAPTION := r.FormValue("TITLE")
    CAPTION := val["TITLE"].(string)
 
	SPL := strings.Split(SID,"-")
	TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
	
	BLOB_KEY := ""
	//TITLE := ""
 
	DOC_STAT := ""
	FL_SHARED := ""
	AUTHOR := ""
	csn := ""

	switch TARGET {
		case "TDSSLIDE":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, _, _, _, _ = getTDSSLIDEBlobKey(w, r, docID)
			//upload url
			csn = getUpUrlString(w,r,"/upload-slides")
		
		case "TDSARTL":
		
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, _, _, _ = getTDSARTLBlobKey(w, r, docID)
			
		case "TDSMEDIA":
			BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
	}
 
	switch {
 
		case DOC_STAT == "Premium" && UID != AUTHOR:
			//dont process
			return
	
		case FL_SHARED == "N" || DOC_STAT == "Personal" || (FL_SHARED == "Y" && DOC_STAT == "Personal"):
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", UID, FUNC_CODE)
			
 
			
			if FL_VALID_USER != true {
				//dont process
				return
			}
			
			if UID != AUTHOR {
				//dont process
				return
			}
			
		case DOC_STAT == "ULAPPH Only":
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", UID, FUNC_CODE)
			
			if FL_VALID_USER != true {
				//dont process
				return
			}
 
		case DOC_STAT == "Worldwide" && FL_SHARED == "Y":
			//allow
		
	}
	
	//current text
	blobChan := make(chan string)
	go getBlobTextChan(w, r,blobChan, BLOB_KEY)
	thisCont := <- blobChan
 
	var buf bytes.Buffer
	buf.WriteString(fmt.Sprintf("%v", thisCont))
	buf.WriteString(fmt.Sprintf(" \n"))
	FL_PROC_OK := false
	switch  {
	
		case ATS_FUNC == "ATS-IMAGE" && TYP == "image":
		
			updateUserActiveData(w, r, c, UID, "queueEmbedImage")
			
			FL_PROC_OK = true
			//append this image to existing slide
			//.image SRC 600 900
			//buf.WriteString(fmt.Sprintf(" \n"))
			buf.WriteString(fmt.Sprintf("* \n"))
			//buf.WriteString(fmt.Sprintf(" \n"))
			buf.WriteString(fmt.Sprintf(".image %v 600 900\n", SRC))
			//buf.WriteString(fmt.Sprintf(" \n"))
			buf.WriteString(fmt.Sprintf(".caption %v\n", CAPTION))
			buf.WriteString(fmt.Sprintf(" \n"))
			//buf.WriteString(fmt.Sprintf(" \n"))
				
	}
	
	if FL_PROC_OK == true {
 
		//update content
		// Now you can prepare a form that you will submit to that URL.
		var m bytes.Buffer
		fw := multipart.NewWriter(&m)
		// Do not change the form field, it must be "file"!
		// You are free to change the filename though, it will be stored in the BlobInfo.
		file, err := fw.CreateFormFile("file", SID)
		if err != nil {
			return
		}
 
		if _, err = file.Write(buf.Bytes()); err != nil {
			//http.Error(w, err.Error(), http.StatusInternalServerError)
			//log.Panicf("%s", err)
 
			return
		}
		_ = fw.WriteField("EDIT_FUNC2", "SAVE_TEXT")
		_ = fw.WriteField("SID", SID)
		_ = fw.WriteField("CATEGORY", "desktop0")
		_ = fw.WriteField("FUNC_CODE", "UPD-FROM-EDITOR")
		_ = fw.WriteField("SPC_OPT", "")
		_ = fw.WriteField("SPC_OPT", "")
		//_ = fw.WriteField("TITLE", CAPTION)
		_ = fw.WriteField("UID", UID)
		
		// Don't forget to close the multipart writer.
		// If you don't close it, your request will be missing the terminating boundary.
		fw.Close()
		
		//upload url
		u := csn
		// Now that you have a form, you can submit it to your handler.
		req, err := http.NewRequest("POST", u, &m)
		if err != nil {
			return
		}
		// Don't forget to set the content type, this will contain the boundary.
		req.Header.Set("Content-Type", fw.FormDataContentType())
 
		
		// Now submit the request.
        //client := urlfetch.Client(c)
        client := &http.Client{}
		res, err := client.Do(req)
		if err != nil {
			return
		}
 
		// Check the response status, it should be whatever you return in the `/upload` handler.
		if res.StatusCode != http.StatusCreated {
			return
		}		
	}
}

//process appending of data to existing SID
func appendToSid(w http.ResponseWriter, r *http.Request, UID, FUNC, SID, TEXT string) (err error){
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	docID := 0
	TARGET := ""
	BLOB_KEY := ""
	DOC_STAT := ""
	FL_SHARED := ""
	AUTHOR := ""
	csn := ""
	if SID != "" {
		SPL := strings.Split(SID,"-")
		DOC_ID := "0"
		if len(SPL) > 1 {
			TARGET = SPL[0]
			DOC_ID = SPL[1]
		}
		docID = str2int(DOC_ID)
	}
	switch TARGET {
		case "TDSSLIDE":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, _, _, _, _ = getTDSSLIDEBlobKey(w, r, docID)
			//upload url
			csn = getUpUrlString(w,r,"/upload-slides")
		case "TDSARTL":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, _, _, _ = getTDSARTLBlobKey(w, r, docID)
			csn = getUpUrlString(w,r,"/upload-articles")
		case "TDSMEDIA":
			BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, _ = getTDSMEDIABlobKey(w, r, docID)
			csn = getUpUrlString(w,r,"/upload-media")
	}
	switch {
		case DOC_STAT == "Premium" && UID != AUTHOR:
			//dont process
			return fmt.Errorf("Invalid operation. Author issue.")
		case FL_SHARED == "N" || DOC_STAT == "Personal" || (FL_SHARED == "Y" && DOC_STAT == "Personal"):
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", UID, FUNC_CODE)

			if FL_VALID_USER != true {
				//dont process
				return fmt.Errorf("Invalid operation. Invalid user.")
			}
			if UID != AUTHOR {
				//dont process
				return fmt.Errorf("Invalid operation. Invalid author.")
			}
		case DOC_STAT == "ULAPPH Only":
			FUNC_CODE := "GET_GRP_ID"
			FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", UID, FUNC_CODE)
			if FL_VALID_USER != true {
				//dont process
				return fmt.Errorf("Invalid operation. Invalid user.")
			}
		case DOC_STAT == "Worldwide" && FL_SHARED == "Y":
			//allow
	}
	//current text
	blobChan := make(chan string)
	go getBlobTextChan(w, r,blobChan, BLOB_KEY)
	thisCont := <- blobChan
	//log.Printf("getBlobTextChan...")
	//log.Printf("thisCont: %v", thisCont)
	var buf bytes.Buffer
	buf.WriteString(fmt.Sprintf("%v", thisCont))
	buf.WriteString(fmt.Sprintf(" \n"))
	FL_PROC_OK := false
	switch  {
		case FUNC == "APPEND-UWM" && TEXT != "":
			//log.Printf("APPEND-UWM APPEND...")
			//log.Printf("TEXT: %v", TEXT)
			FL_PROC_OK = true
			//buf.WriteString(fmt.Sprintf(" %v\n", template.HTML(TEXT)))
			buf.WriteString(fmt.Sprintf(" %v\n", html.UnescapeString(TEXT)))
			//D0057
			//add flag if auto-arrange
			arr := r.FormValue("ARR")
			if arr != "" {
				thisKey := fmt.Sprintf("SYSTEM_UWM_ARR_%v_%v", SID, UID)
				key := datastore.NameKey("TDSCNFG", thisKey, nil)
				g := TDSCNFG{
						SYS_VER: 1,
						USER: UID,
						CFG_ID: thisKey,
						DAT_TYP: "TXT",
						NUM_VAL: 0,
						TXT_VAL: arr,
						CFG_DESC: "UWM Arrangement",
				}
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
                }
                //log.Printf("datastoreClient.Put()  [61066]")
			}
			//set default wallpaper
			wallp := r.FormValue("WALLP")
			if wallp != "" {
				thisKey := fmt.Sprintf("SYSTEM_UWM_WALLP_%v_%v", SID, UID)
				key := datastore.NameKey("TDSCNFG", thisKey, nil)
				g := TDSCNFG{
						SYS_VER: 1,
						USER: UID,
						CFG_ID: thisKey,
						DAT_TYP: "TXT",
						NUM_VAL: 0,
						TXT_VAL: wallp,
						CFG_DESC: "Default Wallpaper",
				}
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
                }
                //log.Printf("datastoreClient.Put()  [61085]")
			}
			//set shown only uwm wallpapers
			wpuwmonly := r.FormValue("WPUWMONLY")
			UWM := r.FormValue("UWM")
			if wpuwmonly == "true" || wpuwmonly == "false" {
				//thisKey := fmt.Sprintf("SYSTEM_UWM_WALLP_WPUWMONLY_%v_%v", SID, UID)
				thisKey := fmt.Sprintf("SYSTEM_UWM_WALLP_WPUWMONLY_%v_%v", UWM, UID)
				key := datastore.NameKey("TDSCNFG", thisKey, nil)
				g := TDSCNFG{
						SYS_VER: 1,
						USER: UID,
						CFG_ID: thisKey,
						DAT_TYP: "TXT",
						NUM_VAL: 0,
						TXT_VAL: wpuwmonly,
						CFG_DESC: "Shown UWM Random Wallpaper",
				}
				if _, err := datastoreClient.Put(c, key, &g); err != nil {
						panic(err)
                }
                //log.Printf("datastoreClient.Put()  [61106]")
			}


	}
	if FL_PROC_OK == true {
		//log.Printf("FL_PROC_OK...")
		//update content
		// Now you can prepare a form that you will submit to that URL.
		var m bytes.Buffer
		fw := multipart.NewWriter(&m)
		// Do not change the form field, it must be "file"!
		// You are free to change the filename though, it will be stored in the BlobInfo.
		file, err := fw.CreateFormFile("file", SID)
		if err != nil {
			return err
		}
		if _, err = file.Write(buf.Bytes()); err != nil {
			//http.Error(w, err.Error(), http.StatusInternalServerError)
			//log.Panicf("%s", err)
			return err
		}
		_ = fw.WriteField("EDIT_FUNC2", "SAVE_TEXT")
		_ = fw.WriteField("SID", SID)
		_ = fw.WriteField("CATEGORY", "desktop0")
		_ = fw.WriteField("FUNC_CODE", "UPD-FROM-EDITOR")
		_ = fw.WriteField("SPC_OPT", "")
		_ = fw.WriteField("SPC_OPT", "")
		//_ = fw.WriteField("TITLE", CAPTION)
		_ = fw.WriteField("UID", UID)
		// Don't forget to close the multipart writer.
		// If you don't close it, your request will be missing the terminating boundary.
		fw.Close()
		//upload url
		u := csn
		// Now that you have a form, you can submit it to your handler.
		req, err := http.NewRequest("POST", u, &m)
		if err != nil {
			return err
		}
		// Don't forget to set the content type, this will contain the boundary.
		req.Header.Set("Content-Type", fw.FormDataContentType())
		// Now submit the request.
        //client := urlfetch.Client(c)
        client := &http.Client{}
		_, err = client.Do(req)
		if err != nil {
			return err
		}
		// Check the response status, it should be whatever you return in the `/upload` handler.
		//if res.StatusCode != http.StatusCreated {
		//	return fmt.Errorf("Invalid operation")
		//}		
	}
	return err
}
//saves blob data for a given SID document
func blobFileSaver(w http.ResponseWriter, r *http.Request, SID string, DATA []byte) error {
    //log.Printf("blobFileSaver()")
	//c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
    //update content
	// Now you can prepare a form that you will submit to that URL.
	var m bytes.Buffer
	fw := multipart.NewWriter(&m)
	// Do not change the form field, it must be "file"!
	// You are free to change the filename though, it will be stored in the BlobInfo.
	file, err := fw.CreateFormFile("file", SID)
	if err != nil {
        //log.Printf("ERROR: %v", err)
		return err
	}
	if _, err = file.Write(DATA); err != nil {
        //log.Printf("ERROR: %v", err)
		return err
    }
    _ = fw.WriteField("EDIT_FUNC2", "SAVE_TEXT")
    _ = fw.WriteField("SID", SID)
    _ = fw.WriteField("CATEGORY", "filesystem")
    _ = fw.WriteField("FUNC_CODE", "UPD-FROM-EDITOR")
    _ = fw.WriteField("SPC_OPT", "")
    //_ = fw.WriteField("SPC_OPT", "")
	UMAIL := ADMMAIL
	//uc := user.Current(c)
	//if uc != nil {
    _, uid := checkSession(w,r)
    if uid != "" {
		UMAIL = uid
	}
	_ = fw.WriteField("UID", UMAIL)
	// Don't forget to close the multipart writer.
	// If you don't close it, your request will be missing the terminating boundary.
	fw.Close()
	//upload url
	csn := getUpUrlString(w,r,"/upload-media")
	u := csn
	// Now that you have a form, you can submit it to your handler.
	req, err := http.NewRequest("POST", u, &m)
	if err != nil {
		return err
	}
	// Don't forget to set the content type, this will contain the boundary.
	req.Header.Set("Content-Type", fw.FormDataContentType())
	// Now submit the request.
    //client := urlfetch.Client(c)
    client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		return err
	}
	// Check the response status, it should be whatever you return in the `/upload` handler.
	if res.StatusCode != http.StatusCreated {
		return err
	}
	return err
}
//process taskqueue to log social ratings
func queueSocial(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    _, _, val := cloudTaskHandler(w,r)
    //"UID": UID, "SID": SID, "SOC_FUNC": SOC_FUNC, "COMMENTS_BY": CommentsBy
    //log.Printf("queueSocial executed: queueName(%v), taskName(%v)", queueName, taskName)
    //c := appengine.NewContext(r)
    //UID := fmt.Sprintf("%v",r.FormValue("UID"))
    UID := val["UID"].(string)
	//uid := UID
    //SOC_FUNC := r.FormValue("SOC_FUNC")
    SOC_FUNC := val["SOC_FUNC"].(string)
    //MODE := r.FormValue("MODE")
    MODE := val["MODE"].(string)
    //SID := r.FormValue("SID")
    SID := val["SID"].(string)
    //FL_INC_LIKES := r.FormValue("FL_INC_LIKES")
    FL_INC_LIKES := val["FL_INC_LIKES"].(string)
    //FL_INC_DISLIKES := r.FormValue("FL_INC_DISLIKES")
    FL_INC_DISLIKES := val["FL_INC_DISLIKES"].(string)
	//COMMENT := r.FormValue("COMMENT")
    //COMMENTS_BY := r.FormValue("COMMENTS_BY")
    COMMENTS_BY := val["COMMENTS_BY"].(string)
	//FL_INC_COMMS := r.FormValue("FL_INC_COMMS")
	r.ParseForm()
	
	fmt.Fprintf(w, "SOC_FUNC: %s<br>", SOC_FUNC)
	fmt.Fprintf(w, "SID: %s<br>", SID)
	fmt.Fprintf(w, "UID: %s<br>", UID)
	//fmt.Fprintf(w, "FL_INC_LIKES: %s<br>", FL_INC_LIKES)
	//fmt.Fprintf(w, "FL_INC_DISLIKES: %s<br>", FL_INC_DISLIKES)
	//fmt.Fprintf(w, "COMMENT: %s<br>", COMMENT)
	fmt.Fprintf(w, "COMMENTS_BY: %s<br>", COMMENTS_BY)
	
	switch  {
 
		case SOC_FUNC == "SO_INC_NUM_LIKES":
			//split SID = TSDSLIDE-nn
			//TARGET = table
			//DOC_ID = nn
			SPL := strings.Split(SID,"-")
			if len(SPL) > 1 {
				TARGET := SPL[0]
				DOC_nn := SPL[1]
				DOC_ID := str2int(DOC_nn)
				TITLE := ""
				if TARGET != "" && DOC_ID > 0 {
					switch TARGET {
						case "TDSSLIDE":
							dsKey := fmt.Sprintf("%d", DOC_ID)
							key := datastore.NameKey("TDSSLIDE", dsKey, nil)
							q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
							//log.Panicf("[S0473]")
							slides := make([]TDSSLIDE, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [61283]")
							for _, p := range slides {
								if MODE != "C" {
									p.NUM_LIKES = p.NUM_LIKES + 1
								}
								//error panic: API error 1 (datastore_v3: BAD_REQUEST): The value of property "LIKED_BY" is longer than 1500 bytes.
								//p.LIKED_BY = fmt.Sprintf("%v, %v", p.LIKED_BY, UID)
								if MODE != "A" {
								p.NUM_COMMENTS = p.NUM_COMMENTS + 1
								}
								dsKey := fmt.Sprintf("%d", p.DOC_ID)
								TITLE = p.TITLE
								key := datastore.NameKey("TDSSLIDE", dsKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [61297]")
								//log.Panicf("[S0474]")
								if err != nil {
									 panic(err)
								}
								//update stats
								sKey := fmt.Sprintf("VIEW_LIKE_COM_%v", SID)
								cData := fmt.Sprintf("%v,%v,%v", p.NUM_VIEWS, p.NUM_LIKES, p.NUM_COMMENTS)
								putStrToMemcacheWithoutExp(w,r,sKey,cData)
 
								thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", p.DOC_ID)
								thisIdxURL := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", p.DOC_ID, thisIdxKey, p.CATEGORY, 0)
								
								//t := time.Now().Local()
								//tstamp := t.Format("20060102150405")
								tstamp := getTimestamp()
								if err != nil {
									panic(err)
								}
											
								TITLE2 := strings.Replace(p.TITLE, "_", " ", -1)
								DESC2 := strings.Replace(p.DESC, "_", " ", -1)
								slideIdx := &IDX_TDSSLIDE{
									DOC_KEY: 			thisIdxKey,
									SEARCH_TYPE: 		"SLIDES",
									SOURCE_TYPE: 		"ULAPPH",	
									SOURCE_TBL:  		"TDSSLIDE",	
									DESKTOP: 			p.CATEGORY,
									FL_SHARED:			p.FL_SHARED,
									DOC_STAT:			p.DOC_STAT,
									DOC_SCOPE_OVERALL:	"",
									DOC_SCOPE_COUNTRY:  "",
									DOC_SCOPE_REGION:  	"",
									DOC_SCOPE_CITY: 	"",
									DOC_SCOPE_BARANGAY: "",
									DOC_TITLE: 			TITLE2,	
									DOC_DESC: 			DESC2,
									DOC_AUTHOR:         UID,
									//DOC_CONTENT_TEXT: 	blobText,
                                    DOC_CONTENT_TEXT:   "",
                                    DOC_CONTENT_HTML: 	"",	
									DOC_CONTENT_ATOM: 	"",	
									DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
									DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
									DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),	
									CONTENT_URL: 		thisIdxURL,
									IMG_URL: 			p.TAGS,
									DATE_ADDED: 		tstamp,
									DATE_UPDATED: 		tstamp,
                                }
                                
								putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
								break
							}
							
							//notify all users of this event via channels
							reqStr := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&DOC_ID=%v&SID=TDSSLIDE-%v", DOC_ID, DOC_ID)
							msgDtl3 := fmt.Sprintf("UID:%v has liked Slide (%v) %v <a href=\"%v\">%v</a>",  UID, TITLE, DOC_ID, reqStr, reqStr)
							sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,UID,reqStr,SID),SID)
				
						
						case "TDSARTL":
							dsKey := fmt.Sprintf("%d", DOC_ID)
							key := datastore.NameKey("TDSARTL", dsKey, nil)
							q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
							//log.Panicf("[S0475]")
							articles := make([]TDSARTL, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [61367]")
							for _, p := range articles {
								if MODE != "C" {
									p.NUM_LIKES = p.NUM_LIKES + 1
								}
								if MODE != "A" {
								p.NUM_COMMENTS = p.NUM_COMMENTS + 1
								}
								dsKey := fmt.Sprintf("%d", p.DOC_ID)
								TITLE = p.TITLE
								key := datastore.NameKey("TDSARTL", dsKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [61379]")
								//log.Panicf("[S0476]")
								if err != nil {
									 panic(err)
								}
								
								//update stats
								sKey := fmt.Sprintf("VIEW_LIKE_COM_%v", SID)
								cData := fmt.Sprintf("%v,%v,%v", p.NUM_VIEWS, p.NUM_LIKES, p.NUM_COMMENTS)
								putStrToMemcacheWithoutExp(w,r,sKey,cData)
								
								//t := time.Now().Local()
								//tstamp := t.Format("20060102150405")
								tstamp := getTimestamp()
								thisIdxKey := fmt.Sprintf("TDSARTL-%d", p.DOC_ID)
								thisIdxURL := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", p.DOC_ID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
								blobChan := make(chan string)
								go getBlobTextChan(w, r,blobChan, p.BLOB_URL)
								blobText := <- blobChan
								if p.SYS_VER == 777 {
									cStr := encrypter2(w,r,blobText,ENCRYPTION_KEY)
									blobText = string(cStr)
								}
								TITLE2 := strings.Replace(p.TITLE, "_", " ", -1)
								DESC2 := strings.Replace(p.DESC, "_", " ", -1)
								articleIdx := &IDX_TDSARTL{
									DOC_KEY: 			thisIdxKey,
									SEARCH_TYPE: 		"ARTICLES",
									SOURCE_TYPE: 		"ULAPPH",	
									SOURCE_TBL:  		"TDSARTL",	
									DESKTOP: 			p.CATEGORY,
									FL_SHARED:			p.FL_SHARED,
									DOC_STAT:			p.DOC_STAT,
									DOC_SCOPE_OVERALL:	"",
									DOC_SCOPE_COUNTRY:  "",
									DOC_SCOPE_REGION:  	"",
									DOC_SCOPE_CITY: 	"",
									DOC_SCOPE_BARANGAY: "",
									DOC_TITLE: 			TITLE2,	
									DOC_DESC: 			DESC2,
									DOC_AUTHOR:         p.AUTHOR,
									DOC_CONTENT_TEXT: 	blobText,
									DOC_CONTENT_HTML: 	"",	
									DOC_CONTENT_ATOM: 	"",	
									DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
									DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
									DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
									CONTENT_URL: 		thisIdxURL,
									IMG_URL: 			p.TAGS,
									//DATE_ADDED: 		tstamp,
									DATE_UPDATED: 		tstamp,
                                }
                                
								putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
 
								break
							}
							
							//notify all users of this event via channels
							reqStr := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v", DOC_ID, DOC_ID)
							msgDtl3 := fmt.Sprintf("UID:%v has liked Article (%v) %v <a href=\"%v\">%v</a>.",  UID, TITLE, DOC_ID, reqStr, reqStr)
							sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,UID,reqStr,SID),SID)
					}
				}
			}
 
		case SOC_FUNC == "SO_INC_NUM_DLIKES":
			//split SID = TSDSLIDE-nn
			//TARGET = table
			//DOC_ID = nn
			SPL := strings.Split(SID,"-")
			if len(SPL) > 1 {
				TARGET := SPL[0]
				DOC_nn := SPL[1]
				DOC_ID := str2int(DOC_nn)
				if TARGET != "" && DOC_ID > 0 {
					switch TARGET {
						case "TDSSLIDE":
						
							dsKey := fmt.Sprintf("%d", DOC_ID)
							key := datastore.NameKey("TDSSLIDE", dsKey, nil)
							q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
							//log.Panicf("[S0477]")
							slides := make([]TDSSLIDE, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [61466]")
							for _, p := range slides {
								p.NUM_COMMENTS = p.NUM_COMMENTS + 1
								//p.COMMENTS_BY = fmt.Sprintf("%v, %v", p.COMMENTS_BY, UID)
								dsKey := fmt.Sprintf("%d", p.DOC_ID)
								key := datastore.NameKey("TDSSLIDE", dsKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [61473]")
								//log.Panicf("[S0478]")
								if err != nil {
									 panic(err)
								}
								//update index
								thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", p.DOC_ID)
								thisIdxURL := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", p.DOC_ID, thisIdxKey, p.CATEGORY, 0)
								
								
								//update stats
								sKey := fmt.Sprintf("VIEW_LIKE_COM_%v", SID)
								cData := fmt.Sprintf("%v,%v,%v", p.NUM_VIEWS, p.NUM_LIKES, p.NUM_COMMENTS)
								putStrToMemcacheWithoutExp(w,r,sKey,cData)
								
								//t := time.Now().Local()
								//tstamp := t.Format("20060102150405")
								tstamp := getTimestamp()
 
								TITLE2 := strings.Replace(p.TITLE, "_", " ", -1)
								DESC2 := strings.Replace(p.DESC, "_", " ", -1)
								slideIdx := &IDX_TDSSLIDE{
									DOC_KEY: 			thisIdxKey,
									SEARCH_TYPE: 		"SLIDES",
									SOURCE_TYPE: 		"ULAPPH",	
									SOURCE_TBL:  		"TDSSLIDE",	
									DESKTOP: 			p.CATEGORY,
									FL_SHARED:			p.FL_SHARED,
									DOC_STAT:			p.DOC_STAT,
									DOC_SCOPE_OVERALL:	"",
									DOC_SCOPE_COUNTRY:  "",
									DOC_SCOPE_REGION:  	"",
									DOC_SCOPE_CITY: 	"",
									DOC_SCOPE_BARANGAY: "",
									DOC_TITLE: 			TITLE2,	
									DOC_DESC: 			DESC2,
									DOC_AUTHOR:         UID,
									//DOC_CONTENT_TEXT: 	blobText,
                                    DOC_CONTENT_TEXT: 	"",
                                    DOC_CONTENT_HTML: 	"",	
									DOC_CONTENT_ATOM: 	"",	
									DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
									DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
									DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),	
									CONTENT_URL: 		thisIdxURL,
									IMG_URL: 			p.TAGS,
									DATE_ADDED: 		tstamp,
									DATE_UPDATED: 		tstamp,
                                }
                                
								putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
 
								break
							}
							
							//notify all users of this event via channels
							reqStr := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v", DOC_ID, DOC_ID)
							msgDtl3 := fmt.Sprintf("UID:%v has dis-liked Slide %v <a href=\"%v\">%v</a>",  UID, DOC_ID, reqStr, reqStr)
							sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,UID,reqStr,SID),SID)
						
						case "TDSARTL":
							dsKey := fmt.Sprintf("%d", DOC_ID)
							key := datastore.NameKey("TDSARTL", dsKey, nil)
							q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
							//log.Panicf("[S0479]")
							articles := make([]TDSARTL, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [61542]")
							for _, p := range articles {
								p.NUM_COMMENTS = p.NUM_COMMENTS + 1
								//p.COMMENTS_BY = fmt.Sprintf("%v, %v", p.COMMENTS_BY, UID)
								dsKey := fmt.Sprintf("%d", p.DOC_ID)
								key := datastore.NameKey("TDSARTL", dsKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [61549]")
								//log.Panicf("[S0480]")
								if err != nil {
									 panic(err)
								}
 
								//update stats
								sKey := fmt.Sprintf("VIEW_LIKE_COM_%v", SID)
								cData := fmt.Sprintf("%v,%v,%v", p.NUM_VIEWS, p.NUM_LIKES, p.NUM_COMMENTS)
								putStrToMemcacheWithoutExp(w,r,sKey,cData)
								
								//t := time.Now().Local()
								//tstamp := t.Format("20060102150405")
								tstamp := getTimestamp()
								thisIdxKey := fmt.Sprintf("TDSARTL-%d", p.DOC_ID)
								thisIdxURL := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", p.DOC_ID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
								blobChan := make(chan string)
								go getBlobTextChan(w, r,blobChan, p.BLOB_URL)
								blobText := <- blobChan
								if p.SYS_VER == 777 {
									cStr := encrypter2(w,r,blobText,ENCRYPTION_KEY)
									blobText = string(cStr)
								}
								TITLE2 := strings.Replace(p.TITLE, "_", " ", -1)
								DESC2 := strings.Replace(p.DESC, "_", " ", -1)
								articleIdx := &IDX_TDSARTL{
									DOC_KEY: 			thisIdxKey,
									SEARCH_TYPE: 		"ARTICLES",
									SOURCE_TYPE: 		"ULAPPH",	
									SOURCE_TBL:  		"TDSARTL",	
									DESKTOP: 			p.CATEGORY,
									FL_SHARED:			p.FL_SHARED,
									DOC_STAT:			p.DOC_STAT,
									DOC_SCOPE_OVERALL:	"",
									DOC_SCOPE_COUNTRY:  "",
									DOC_SCOPE_REGION:  	"",
									DOC_SCOPE_CITY: 	"",
									DOC_SCOPE_BARANGAY: "",
									DOC_TITLE: 			TITLE2,	
									DOC_DESC: 			DESC2,
									DOC_AUTHOR:         p.AUTHOR,
									DOC_CONTENT_TEXT: 	blobText,
									DOC_CONTENT_HTML: 	"",	
									DOC_CONTENT_ATOM: 	"",	
									DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
									DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
									DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
									CONTENT_URL: 		thisIdxURL,
									IMG_URL: 			p.TAGS,
									//DATE_ADDED: 		tstamp,
									DATE_UPDATED: 		tstamp,
                                }
                                
								putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
 
								break
							}
							
							//notify all users of this event via channels
							reqStr := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v", DOC_ID, DOC_ID)
							msgDtl3 := fmt.Sprintf("UID:%v has dis-liked Article %v <a href=\"%v\">%v</a>",  UID, DOC_ID, reqStr, reqStr)
							sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,UID,reqStr,SID),SID)
					}
				}
			}
	
 
		case SOC_FUNC == "SO_INC_NUM_VIEWS":
			//split SID = TSDSLIDE-nn
			//TARGET = table
			//DOC_ID = nn
			SPL := strings.Split(SID,"-")
			if len(SPL) > 1 {
				TARGET := SPL[0]
				DOC_nn := SPL[1]
				DOC_ID := str2int(DOC_nn)
				if TARGET != "" && DOC_ID > 0 {
					switch TARGET {
						case "TDSMEDIA":
							
							dsKey := fmt.Sprintf("%d", DOC_ID)
							key := datastore.NameKey("TDSMEDIA", dsKey, nil)
							q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
							//log.Panicf("[S0481]")
							media := make([]TDSMEDIA, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
								panic(err)
								//checkError(w,r,"",err,"CHK_OQ")
								//return
							}
							//log.Printf("datastoreClient.Get()  [61639]")
							for _, p := range media{
					
								//slide view counter
								p.NUM_VIEWS = p.NUM_VIEWS + 1
								dsKey := fmt.Sprintf("%d", p.MEDIA_ID)
								key := datastore.NameKey("TDSMEDIA", dsKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [61647]")
								//log.Panicf("[S0482]")
								if err != nil {
									 panic(err)
								}
								//update index
								//t := time.Now().Local()
								//tstamp := t.Format("20060102150405")
								tstamp := getTimestamp()
								
								thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", p.MEDIA_ID)
								thisIdxURL := fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%d&IMG_URL=%v", p.MEDIA_ID, p.IMG_URL)
								TITLE := strings.Replace(p.TITLE, "_", " ", -1)
								DESC := strings.Replace(p.DESC, "_", " ", -1)
								thisCont := ""
								if p.DATA_TYPE == "text" {
									blobChan := make(chan string)
									go getBlobTextChan(w, r,blobChan, p.BLOB_KEY)
									thisCont = <- blobChan
											
								} else {
									thisCont = fmt.Sprintf("%v - %v", TITLE, DESC)
								}
								searchIdx := &IDX_TDSMEDIA{
									DOC_KEY: 			thisIdxKey,
									SEARCH_TYPE: 		"MEDIA",
									SOURCE_TYPE: 		p.DATA_TYPE,	
									SOURCE_TBL:  		"TDSMEDIA",	
									DESKTOP: 			p.CATEGORY,
									FL_SHARED:			p.FL_SHARED,
									DOC_STAT:			p.DOC_STAT,
									DOC_SCOPE_OVERALL:	"",
									DOC_SCOPE_COUNTRY:  "",
									DOC_SCOPE_REGION:  	"",
									DOC_SCOPE_CITY: 	"",
									DOC_SCOPE_BARANGAY: "",
									DOC_TITLE: 			TITLE,	
									DOC_DESC: 			DESC,
									DOC_AUTHOR:         p.AUTHOR,
									DOC_CONTENT_TEXT: 	thisCont,
									DOC_CONTENT_HTML: 	"",	
									DOC_CONTENT_ATOM: 	"",	
									DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
									DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
									DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
									CONTENT_URL: 		thisIdxURL,
									IMG_URL: 			p.IMG_URL,
									DATE_ADDED: 		tstamp,
									DATE_UPDATED: 		tstamp,
                                }
                                
								putSearchIndexM(w,r,"IDX_TDSMEDIA",thisIdxKey,searchIdx)
								
								break
							}
						case "TDSSLIDE":
							dsKey := fmt.Sprintf("%d", DOC_ID)
							key := datastore.NameKey("TDSSLIDE", dsKey, nil)
							q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
							//log.Panicf("[S0483]")
							slides := make([]TDSSLIDE, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
								//check overquota error
								//checkError(w,r,"",err,"CHK_OQ")
								panic(err)
							}
							//log.Printf("datastoreClient.Get()  [61713]")
							for _, p := range slides {
								//slide view counter
								p.NUM_VIEWS = p.NUM_VIEWS + 1
								dsKey := fmt.Sprintf("%d", p.DOC_ID)
								key := datastore.NameKey("TDSSLIDE", dsKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [61720]")
								//log.Panicf("[S0484]")
								if err != nil {
									 panic(err)
								}
								
								//update stats
								sKey := fmt.Sprintf("VIEW_LIKE_COM_%v", SID)
								cData := fmt.Sprintf("%v,%v,%v", p.NUM_VIEWS, p.NUM_LIKES, p.NUM_COMMENTS)
								putStrToMemcacheWithoutExp(w,r,sKey,cData)
								
								//update index
								thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", p.DOC_ID)
								thisIdxURL := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", p.DOC_ID, thisIdxKey, p.CATEGORY, 0)
								
								//t := time.Now().Local()
								//tstamp := t.Format("20060102150405")
								tstamp := getTimestamp()
 
								TITLE2 := strings.Replace(p.TITLE, "_", " ", -1)
								DESC2 := strings.Replace(p.DESC, "_", " ", -1)
								slideIdx := &IDX_TDSSLIDE{
									DOC_KEY: 			thisIdxKey,
									SEARCH_TYPE: 		"SLIDES",
									SOURCE_TYPE: 		"ULAPPH",	
									SOURCE_TBL:  		"TDSSLIDE",	
									DESKTOP: 			p.CATEGORY,
									FL_SHARED:			p.FL_SHARED,
									DOC_STAT:			p.DOC_STAT,
									DOC_SCOPE_OVERALL:	"",
									DOC_SCOPE_COUNTRY:  "",
									DOC_SCOPE_REGION:  	"",
									DOC_SCOPE_CITY: 	"",
									DOC_SCOPE_BARANGAY: "",
									DOC_TITLE: 			TITLE2,	
									DOC_DESC: 			DESC2,
									DOC_AUTHOR:         UID,
									//DOC_CONTENT_TEXT: 	blobText,
                                    DOC_CONTENT_TEXT: 	"",
                                    DOC_CONTENT_HTML: 	"",	
									DOC_CONTENT_ATOM: 	"",	
									DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
									DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
									DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),	
									CONTENT_URL: 		thisIdxURL,
									IMG_URL: 			p.TAGS,
									DATE_ADDED: 		tstamp,
									DATE_UPDATED: 		tstamp,
                                }
                                
								putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
 
								break
							}
						
						case "TDSARTL":
							dsKey := fmt.Sprintf("%d", DOC_ID)
							key := datastore.NameKey("TDSARTL", dsKey, nil)
							q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
							//log.Panicf("[S0485]")
							articles := make([]TDSARTL, 0, 1)
							if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
								 panic(err)
                            }
                            //log.Printf("datastoreClient.Get()  [61784]")
							for _, p := range articles {
								
								//article view counter
								p.NUM_VIEWS = p.NUM_VIEWS + 1
								dsKey := fmt.Sprintf("%d", p.DOC_ID)
								key := datastore.NameKey("TDSARTL", dsKey, nil)
                                _, err := datastoreClient.Put(c, key, &p)
                                //log.Printf("datastoreClient.Put()  [61792]")
								//log.Panicf("[S0486]")
								if err != nil {
									 panic(err)
								}
								
								//update stats
								sKey := fmt.Sprintf("VIEW_LIKE_COM_%v", SID)
								cData := fmt.Sprintf("%v,%v,%v", p.NUM_VIEWS, p.NUM_LIKES, p.NUM_COMMENTS)
								putStrToMemcacheWithoutExp(w,r,sKey,cData)
								
								//t := time.Now().Local()
								//tstamp := t.Format("20060102150405")
								tstamp := getTimestamp()
								thisIdxKey := fmt.Sprintf("TDSARTL-%d", p.DOC_ID)
								thisIdxURL := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", p.DOC_ID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
								blobChan := make(chan string)
								go getBlobTextChan(w, r,blobChan, p.BLOB_URL)
								blobText := <- blobChan
								if p.SYS_VER == 777 {
									cStr := encrypter2(w,r,blobText,ENCRYPTION_KEY)
									blobText = string(cStr)
								}
								TITLE2 := strings.Replace(p.TITLE, "_", " ", -1)
								DESC2 := strings.Replace(p.DESC, "_", " ", -1)
								articleIdx := &IDX_TDSARTL{
									DOC_KEY: 			thisIdxKey,
									SEARCH_TYPE: 		"ARTICLES",
									SOURCE_TYPE: 		"ULAPPH",	
									SOURCE_TBL:  		"TDSARTL",	
									DESKTOP: 			p.CATEGORY,
									FL_SHARED:			p.FL_SHARED,
									DOC_STAT:			p.DOC_STAT,
									DOC_SCOPE_OVERALL:	"",
									DOC_SCOPE_COUNTRY:  "",
									DOC_SCOPE_REGION:  	"",
									DOC_SCOPE_CITY: 	"",
									DOC_SCOPE_BARANGAY: "",
									DOC_TITLE: 			TITLE2,	
									DOC_DESC: 			DESC2,
									DOC_AUTHOR:         p.AUTHOR,
									DOC_CONTENT_TEXT: 	blobText,
									DOC_CONTENT_HTML: 	"",	
									DOC_CONTENT_ATOM: 	"",	
									DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
									DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
									DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
									CONTENT_URL: 		thisIdxURL,
									IMG_URL: 			p.TAGS,
									//DATE_ADDED: 		tstamp,
									DATE_UPDATED: 		tstamp,
                                }
                                
								putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
 
								break
							}
							
					}
				}
			}
	
		case SOC_FUNC == "SO_NOTIFY":
			msgDtl := fmt.Sprintf("[U00087] New comment posted on: %v by %s. LINK: %v", SID, UID, ShortenUrl(w,r,fmt.Sprintf("https://www.ulapph.com/social?SO_FUNC=SO_VIEW&SID=%s", SID)))
			data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "USER-COMMENT", msgDtl)
			ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
			SPL := strings.Split(COMMENTS_BY,",")
			for i := 0; i < len(SPL); i++ {
				thisEmail := SPL[i]
				if SPL[i] != "" {
					
					//notify all users of this event via channels
					msgDtl3 := fmt.Sprintf("UID:%v has posted a comment on: %v >>> LINK: <a href=\"https://www.ulapph.com/social?SO_FUNC=SO_VIEW&SID=%s\">Click here</a>", UID, SID, SID)
					reqStr := fmt.Sprintf("https://www.ulapph.com/social?SO_FUNC=SO_VIEW&SID=%s", SID)
					sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,UID,reqStr,SID),SID)
					time.AfterFunc(5*time.Second, func() {
                        laterNotifyGB(c, "autoNotifyPeopleGB", thisEmail, msgDtl, ADMMAIL)
                    })
                }
			}
			//also send message to the author
			msgDtl = fmt.Sprintf("[U00122] Your document %v has new comments by %s >>> LINK: https://www.ulapph.com/social?SO_FUNC=SO_VIEW&SID=%s", SID, UID, SID)
			docID := 0
			TARGET := ""
			SPL = strings.Split(SID,"-")
			if len(SPL) > 1 {
				TARGET = SPL[0]
				DOC_nn := SPL[1]
				docID = str2int(DOC_nn)
			}
			AUTHOR := ""
			if docID > 0 {
				if TARGET == "TDSSLIDE" {
					_, _, _, AUTHOR, _, _, _, _, _, _ = getTDSSLIDEBlobKey(w, r, docID)
				} else {
					_, _, _, AUTHOR, _, _, _, _, _ = getTDSARTLBlobKey(w, r, docID)
				}
				if AUTHOR != "" {
					time.AfterFunc(5*time.Second, func() {
                        laterNotifyGB(c, "autoNotifyPeopleGB", AUTHOR, msgDtl, UID)
                    })
                }
			}
			
		case SOC_FUNC == "SIGN":
			q := datastore.NewQuery("Social").Filter("SID =", SID)
			//log.Panicf("[S0487]")
			social := make([]Social, 0, SYS_MAX_SOC_COMMENTS)
			if _, err := datastoreClient.GetAll(c,q, &social); err != nil {
					 panic(err)
			}
			//log.Printf("datastoreClient.Get()  [61903]")
			if UID == "" {
				UID = getGeoString(w,r)
			}
			
			FL_FOUND_MAIN_REC := false
			
			for _, p := range social {
			
				if p.RecTyp == "" {
					FL_FOUND_MAIN_REC = true
					
					p.Content = ""
					p.Date =   time.Now()
					p.SID = SID
					//p.Author = ""
					p.Author = UID
					
					switch {
					
						case FL_INC_LIKES == "Yes":
							p.NumLikes = p.NumLikes + 1
							//p.LikedBy = fmt.Sprintf("%v,%v", p.LikedBy, UID)
							i := strings.Index(p.LikedBy, UID)
							if i < 0 {
								p.LikedBy = fmt.Sprintf("%v,%v", p.LikedBy, UID)
							}
							p.NumComments = p.NumComments + 1
							i = strings.Index(p.CommentsBy, UID)
							if i < 0 {
								p.CommentsBy = fmt.Sprintf("%v,%v", p.CommentsBy, UID)
							}
							
							time.AfterFunc(5*time.Second, func() {
                                laterNotifySocial(c, UID, SID, "SO_NOTIFY", p.CommentsBy)
                                laterIncNumLikesSocial(c, UID, SID, "SO_INC_NUM_LIKES", "")
                            })
 
						case FL_INC_DISLIKES == "Yes":
							p.NumDislikes = p.NumDislikes + 1
							//p.DislikedBy = fmt.Sprintf("%v,%v", p.DislikedBy, UID)
							i := strings.Index(p.DislikedBy, UID)
							if i < 0 {
								p.DislikedBy = fmt.Sprintf("%v,%v", p.DislikedBy, UID)
							}
							p.NumComments = p.NumComments + 1
							i = strings.Index(p.CommentsBy, UID)
							if i < 0 {
								p.CommentsBy = fmt.Sprintf("%v,%v", p.CommentsBy, UID)
							}
 
							time.AfterFunc(5*time.Second, func() {
                                laterNotifySocial(c,  UID, SID, "SO_NOTIFY", p.CommentsBy)
                                laterIncNumDislikesSocial(c, UID, SID, "SO_INC_NUM_DLIKES")
                            })
					}
					
					thisKey := fmt.Sprintf("%v", SID)
					key := datastore.NameKey("Social", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [61963]")
					//log.Panicf("[S0488]")
					if err != nil {
							 panic(err)
					}
 
					break
				}
			}
			
			if FL_FOUND_MAIN_REC == false {
			
				g := Social{
					Content: "",
					Date:    time.Now(),
					SID: SID,
					//Author: "",
					Author: UID,
				}
				
				switch {
					case FL_INC_LIKES == "Yes":
						g.NumLikes = 1
						g.NumComments = 1						
						g.LikedBy = fmt.Sprintf("%v", UID)
						g.CommentsBy = fmt.Sprintf("%v", UID)
						time.AfterFunc(5*time.Second, func() {
                            laterIncNumLikesSocial(c, UID, SID, "SO_INC_NUM_LIKES", "")
						})
                        //fallthrough
					case FL_INC_DISLIKES == "Yes":
						g.NumDislikes = 1
						g.NumComments = 1
						g.DislikedBy = fmt.Sprintf("%v", UID)
						g.CommentsBy = fmt.Sprintf("%v", UID)
						time.AfterFunc(5*time.Second, func() {
                            laterIncNumDislikesSocial(c, UID, SID, "SO_INC_NUM_DLIKES")
                        })
                        //fallthrough
					//case FL_INC_COMMS == "Yes":
						//g.NumComments = 1
				}
				
				thisKey := fmt.Sprintf("%v", SID)
				key := datastore.NameKey("Social", thisKey, nil)	
                _, err := datastoreClient.Put(c, key, &g)
                //log.Printf("datastoreClient.Put()  [62009]")
				//log.Panicf("[S0489]")
				if err != nil {
						 panic(err)
				}
 
			}
	}		
 
}
//process taskqueue to log ads views
func queueAdsLogViews(w http.ResponseWriter, r *http.Request) {
	if SYS_LOG_ADS_VIEWS == true {
        //c := appengine.NewContext(r)
        c, cancel := context.WithCancel(context.Background())
	    defer cancel()
        //D0086
        datastoreClient := createClientDS()
        _, _, val := cloudTaskHandler(w,r)
        //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
        //uid := fmt.Sprintf("%v",r.FormValue("uid"))
        uid := val["uid"].(string)
        //adsID := r.FormValue("adsID")
        adsID := val["adsID"].(string)
        //desktop := r.FormValue("desktop")
        desktop := val["desktop"].(string)
        //country := r.FormValue("country")
        country := val["country"].(string)
        //region := r.FormValue("region")
        region := val["region"].(string)
        //city := r.FormValue("city")
        city := val["city"].(string)
        //uaPlatform := r.FormValue("uaPlatform")
        uaPlatform := val["uaPlatform"].(string)
        //nameb := r.FormValue("nameb")
        nameb := val["nameb"].(string)
        //uReferer := r.FormValue("uReferer")
        uReferer := val["uReferer"].(string)
        //ipAdd := r.FormValue("ipAdd")
        ipAdd := val["ipAdd"].(string)
		thisAdID := str2int(adsID)
        //RULE_NUM_STR := r.FormValue("RULE_NUM_STR")
        RULE_NUM_STR := val["RULE_NUM_STR"].(string)
		thisRulNum := str2int(RULE_NUM_STR)
		//parse page accessed
		z, err := url.Parse(uReferer)
		if err != nil {
			panic(err)
		}
		path := z.Path
		//document := z.RawQuery
		m, _ := url.ParseQuery(z.RawQuery)
		//document := m["SID"][0]	
		document := ""
		if _, ok := m["SID"]; ok {
			//do something here
			document = m["SID"][0]
		} else {
			document = "no data"
		}
		
		timestamp := getTimestamp()
		currTimestamp := str2int(timestamp)
		
		p := TDSADVL{
				SYS_VER: 1,	
				ADS_ID: thisAdID,
				ADS_EVENT:  "VIEW",	
				EVENT_TSTMP:  currTimestamp,
				DESKTOP: desktop,	
				COUNTRY: country,	
				REGION:  region,		
				CITY:  city	,
				UID_ENCRYPTED:  uid,	
				RULE_NUM:  thisRulNum,
				PLATFORM:  uaPlatform,
				BROWSER:  nameb,
				URL_PATH:  path,
				URL_DATA:  document,
				IP_ADDRESS: ipAdd,
		
		}
		ukey := fmt.Sprintf("%d.%s.%d", thisAdID, p.ADS_EVENT, currTimestamp)
		key := datastore.NameKey("TDSADVL", ukey, nil)
		if _, err := datastoreClient.Put(c, key, &p); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Put()  [62096]")
		//log.Panicf("[S0490]")
 
	
	}
				
}
//process taskqueue to send email invites
func queueInviteEmail(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    uid := val["uid"].(string)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    //desktop := r.FormValue("desktop")
    desktop := val["desktop"].(string)
    //inviteEmail := r.FormValue("inviteEmail")
    inviteEmail := val["inviteEmail"].(string)
	SENDINVITE(c, desktop, uid, inviteEmail)
}
 
//process taskqueue to send email invites
func queueGenericEmail(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0088
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    SUBJECT := val["SUBJECT"].(string)
    //SUBJECT := r.FormValue("SUBJECT")
    //TO := r.FormValue("TO")
    TO := val["TO"].(string)
    //FROM := r.FormValue("FROM")
    FROM := val["FROM"].(string)
    //MESSAGE := r.FormValue("MESSAGE")
    MESSAGE := val["MESSAGE"].(string)
	SENDGENEMAIL(c, SUBJECT, TO, FROM, MESSAGE)
}
//process taskqueue to inquire about ads
func queueAdvertiseEmail(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
    //inquireEmail := r.FormValue("inquireEmail")
    inquireEmail := val["inquireEmail"].(string)
    //contactNum := r.FormValue("contactNum")
    contactNum := val["contactNum"].(string)
    //desktop := r.FormValue("desktop")
    desktop := val["desktop"].(string)
    //message := r.FormValue("message")
    message := val["message"].(string)
	SENDADSINQ(c, desktop, uid, inquireEmail, contactNum, message)
}
//process taskqueue to send feedback message
func queueFeedbackEmail(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
    //inquireEmail := r.FormValue("inquireEmail")
    inquireEmail := val["inquireEmail"].(string)
    //contactNum := r.FormValue("contactNum")
    contactNum := val["contactNum"].(string)
    //desktop := r.FormValue("desktop")
    desktop := val["desktop"].(string)
    //message := r.FormValue("message")
    message := val["message"].(string)
    //fbType := r.FormValue("fbType")
    fbType := val["fbType"].(string)
	SENDFEEDBACK(c, fbType, desktop, uid, inquireEmail, contactNum, message)
}
//stores the most recent users 
func queueStatsUpdateMostRecent(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //uid := fmt.Sprintf("%v",r.FormValue("uid"))
    uid := val["uid"].(string)
	q := datastore.NewQuery("TDSSTATS").Order("STAT_NAME")
	//log.Panicf("[S0491]")
	recCount,_ := datastoreClient.Count(c,q)
	
	stats := make([]TDSSTATS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [62196]")
	for _, p := range stats{
			if p.STAT_NAME == "MOST_RECENT_1" {
			    //save as MOST_RECENT_2 record
				p.STAT_NAME = "MOST_RECENT_2"
					key := datastore.NameKey("TDSSTATS", "MOST_RECENT_2", nil)
					//buffer0.WriteString(fmt.Sprintf("Update count: %v\n", count))
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [62206]")
					//log.Panicf("[S0492]")
 
				//replace MOST_RECENT_1 record
				//MOST_RECENT_1 := uid
				p.STAT_NAME = "MOST_RECENT_1"
				p.VAL_TXT = uid
					key = datastore.NameKey("TDSSTATS", "MOST_RECENT_1", nil)
					//buffer0.WriteString(fmt.Sprintf("Update count: %v\n", count))
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [62218]")
					//log.Panicf("[S0493]")
 
				
			}
			if p.STAT_NAME == "MOST_RECENT_2" {
				//save as MOST_RECENT_3 record
				//MOST_RECENT_3 := p.VAL_TXT
				//MOST_RECENT_2 = p.VAL_TXT
				p.STAT_NAME = "MOST_RECENT_3"
					key := datastore.NameKey("TDSSTATS", "MOST_RECENT_3", nil)
					//buffer0.WriteString(fmt.Sprintf("Update count: %v\n", count))
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [62233]")
					//log.Panicf("[S0494]")
 
				return
			}
	}
 	
}
// Cloud Task handler
// taskHandler processes task requests.
func cloudTaskHandler(w http.ResponseWriter, r *http.Request) (queueName string, taskName string, val map[string]interface{}) {
        t, ok := r.Header["X-Appengine-Taskname"]
        if !ok || len(t[0]) == 0 {
                // You may use the presence of the X-Appengine-Taskname header to validate
                // the request comes from Cloud Tasks.
                //log.Println("Invalid Task: No X-Appengine-Taskname request header found")
                //http.Error(w, "Bad Request - Invalid Task", http.StatusBadRequest)
                return
        }
        taskName = t[0]

        // Pull useful headers from Task request.
        q, ok := r.Header["X-Appengine-Queuename"]
        queueName = ""
        if ok {
                queueName = q[0]
        }

        // Extract the request body for further task details.
        body, err := ioutil.ReadAll(r.Body)
        if err != nil {
                //log.Printf("ReadAll: %v", err)
                //http.Error(w, "Internal Error", http.StatusInternalServerError)
                return
        }
        //var val map[string]interface{}
        if err := json.Unmarshal([]byte(body), &val); err != nil {
            //log.Printf("json.Unmarshal: %v", err)
            //http.Error(w, "Internal Error - Unmarshal", http.StatusInternalServerError)
            return
        }
        // Set a non-2xx status code to indicate a failure in task processing that should be retried.
        // For example, http.Error(w, "Internal Server Error: Task Processing", http.StatusInternalServerError)
        return queueName, taskName, val
}
//insert new unknown rule
func queueInsertUnknownRule(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0088
    //queueName, taskName, val := cloudTaskHandler(w,r)
    _, _, val := cloudTaskHandler(w,r)
    //log.Printf("queueInsertUnknownRule executed: queueName(%v), taskName(%v)", queueName, taskName)
    //D0086
    datastoreClient := createClientDS()
	DISP_TYP := val["DISP_TYP"].(string)
	COUNTRY	:= val["COUNTRY"].(string)
	REGION	:= val["REGION"].(string)
	CITY := val["CITY"].(string)
	IP_ADDRESS := val["IP_ADDRESS"].(string)
	IS_BOT := val["IS_BOT"].(string)
	IS_MOBILE := val["IS_MOBILE"].(string)
	OS_NAME := val["OS_NAME"].(string)
	PLATFORM := val["PLATFORM"].(string)
	BROWSER_NAME := val["BROWSER_NAME"].(string)
	BROWSER_VERSION	 := val["BROWSER_VERSION"].(string)
	UID	 := val["UID"].(string)
	
	//rt := time.Now().Local()
	//timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
	timestamp := getTimestamp()
		
	//overwrite disp type
	dispStr := fmt.Sprintf("%s.%s", PLATFORM, BROWSER_NAME)
	if isDesktop[dispStr] == true {
		DISP_TYP = "DESKTOP"
	}
 
	q := datastore.NewQuery("TDSRULES").Order("-RULE_NUM").Limit(1)
	//log.Panicf("[S0495]")
    rules := make([]TDSRULES, 0, 1)
    if _, err := datastoreClient.GetAll(c,q, &rules); err != nil {
         panic(err)
    }
	//log.Printf("datastoreClient.Get()  [62325]")
	for _, p := range rules{
 
		//inc rule num
		lastRule := p.RULE_NUM
		lastRule++
		
		p.SYS_VER = 1
		p.RULE_NUM = lastRule
		p.DISP_TYP = DISP_TYP
		p.DEST_URL = "*"
		p.TRIG_ID = "*"
		p.ADS_ID = "*"
		p.CAP_LIMIT_DAILY = 1000
		p.DESKTOP_ACCESSED = "*"
		p.URL_ACESSED = "*"
		p.URL_REFERER = "*"
		p.ACCESS_TIME = timestamp
		p.COUNTRY = COUNTRY
		p.REGION = REGION
		p.CITY = CITY
		p.IP_ADDRESS = IP_ADDRESS
		p.IS_BOT = IS_BOT
		p.IS_MOBILE = IS_MOBILE
		p.OS_NAME = OS_NAME
		p.PLATFORM = PLATFORM
		p.BROWSER_NAME = BROWSER_NAME
		p.BROWSER_VERSION = BROWSER_VERSION
		p.UID = UID
		
		//ruleKey := fmt.Sprintf("RULE[%d]", p.RULE_NUM)
		//ruleKey := fmt.Sprintf("%s.%s.%s", p.UID, p.PLATFORM, p.BROWSER_NAME)
		ruleKey := fmt.Sprintf("%s.%s.%s.%s", p.UID, p.PLATFORM, p.OS_NAME, p.BROWSER_NAME)
		key := datastore.NameKey("TDSRULES", ruleKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [62360]")
		//log.Panicf("[S0496]")
		if err != nil {
			 panic(err)
		}
 
		//uid := p.UID
		//store this to memcache immediately
		var buffer4 bytes.Buffer
		buffer4.WriteString(fmt.Sprintf("%d,%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER, p.RULE_NUM, p.DISP_TYP, p.DEST_URL, p.TRIG_ID, p.ADS_ID, p.CAP_LIMIT_DAILY, p.DESKTOP_ACCESSED, p.URL_ACESSED, p.URL_REFERER, p.ACCESS_TIME, p.COUNTRY, p.REGION, p.CITY, p.IP_ADDRESS, p.IS_BOT, p.IS_MOBILE, p.OS_NAME, p.PLATFORM, p.BROWSER_NAME, p.BROWSER_VERSION, p.UID))
		TDRULES_CACHE := buffer4.String()
		//rulesProcessor_CACHE_KEY := fmt.Sprintf("rulesProcessor_CACHE_%v", i)
		rulesProcessor_CACHE_KEY := fmt.Sprintf("rulesProcessor_CACHE_%v", p.RULE_NUM)
		putStrToMemcacheWithoutExp(w,r,rulesProcessor_CACHE_KEY,TDRULES_CACHE)
		//fmt.Fprintf(w, "rulesProcessor_CACHE_KEY: %s<br>", rulesProcessor_CACHE_KEY)
		//fmt.Fprintf(w, "rulesProcessor_CACHE_DATA: %s<br>", TDRULES_CACHE)
 
		//fmt.Fprintf(w, "rulesProcessor_CACHE_TOTAL: %d<br>", lastRule)
		mCtrStr := fmt.Sprintf("%d", lastRule)
		rulesProcessor_CACHE_KEY = fmt.Sprintf("rulesProcessor_CACHE_TOTAL")
		putStrToMemcacheWithoutExp(w,r,rulesProcessor_CACHE_KEY,mCtrStr)
		
		break
	}
 	
}
 
//get access key for logs
func getKeyAccess(c context.Context, accessLogKey string) *datastore.Key {
  return datastore.NameKey("TDSLOGS", accessLogKey, nil)
}
 
//get desktop key for desktop categories
//each UWM desktop corresponds to a category
func getKeyDesktop(c context.Context, desktopKey string) *datastore.Key {
  return datastore.NameKey("TDSCATS", desktopKey, nil)
}

//used for installation and setup only
//inserts initial records 
func adhocWebLoadTDSUSERS(w http.ResponseWriter, r *http.Request) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	keysBody := []byte(`[
{"SYS_VER":1,
"USER":"ulapph@gmail.com",
"COMPANY_ID":"BSIEDV",
"CLOUD_NAME":"ULAPPH",
"GROUP_ID":"GRP_ADMIN",
"LOGGED_IN":1,
"LAST_LOGIN":"20141110193058",
"LAST_ACTIVE":"20141110193058",
"ACTIVE_DTLS":"Dummy",
"USER_ACC_OPT":"Normal",
"FL_QUOTA":"Y",
"FL_BILLED":"Y",
"FL_WORK":"Y",
"FL_WF_ID":"Y",
"USER_ACC_TYP":"Gold"
}
]`)
	keys := make([]TDSUSERS,0)
	json.Unmarshal(keysBody, &keys)
	//log.Printf("%#v", keys)
	
	for _, p := range keys{
		//k := keys[i]
		//key := p.USER
		//fmt.Fprintf(w, "Record loaded.<br>")
		key := datastore.NameKey("TDSUSERS", p.USER, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [62434]")
		//log.Panicf("[S0499]")
		if err != nil {
			 panic(err)
		}
	}	
 
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}
 
//used for installation and setup only
//deletes initial records 
func adhocDeleteTDSUSERS(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSUSERS")
	//log.Panicf("[S0500]")
	recCount, _  := datastoreClient.Count(c,q)
	users := make([]TDSUSERS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62461]")
	for _, p := range users{
		key := datastore.NameKey("TDSUSERS", p.USER, nil)
		datastoreClient.Delete(c, key)
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSRULES(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSRULES")
	//log.Panicf("[S0501]")
	recCount, _  := datastoreClient.Count(c,q)
	rules := make([]TDSRULES, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &rules); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62486]")
	for _, p := range rules{
		ruleKey := fmt.Sprintf("%s.%s.%s.%s", p.UID, p.PLATFORM, p.OS_NAME, p.BROWSER_NAME)
		key := datastore.NameKey("TDSRULES", ruleKey, nil)
		datastoreClient.Delete(c, key)
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSSTATS(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSSTATS")
	//log.Panicf("[S0502]")
	recCount, _  := datastoreClient.Count(c,q)
	stats := make([]TDSSTATS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62512]")
	for _, p := range stats{
		key := datastore.NameKey("TDSSTATS", p.STAT_NAME, nil)
		datastoreClient.Delete(c, key)
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSCNFG(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSCNFG")
	//log.Panicf("[S0503]")
	recCount, _  := datastoreClient.Count(c,q)
	config := make([]TDSCNFG, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62537]")
	for _, p := range config{
	    thisKey := fmt.Sprintf("%s-%s", p.USER, p.CFG_ID)
		key := datastore.NameKey("TDSCNFG", thisKey, nil)
		datastoreClient.Delete(c, key)
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSICONS(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSICONS")
	//log.Panicf("[S0504]")
	recCount, _  := datastoreClient.Count(c,q)
	icons := make([]TDSICONS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62563]")
	for _, p := range icons{
	    thisKey := fmt.Sprintf("ICON[%d]", p.ICON_ID)
		key := datastore.NameKey("TDSICONS", thisKey, nil)
		datastoreClient.Delete(c, key)
		if p.BLOB_KEY != "" {
			//blobstore.Delete(c, appengine.BlobKey(p.BLOB_KEY))	
			err := deleteGcsObject(c, p.BLOB_KEY)
			if err != nil {
				log.Fatalf("ERROR: deleteGcsObject() %v", err)
			}
		}
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSADS(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSADS")
	//log.Panicf("[S0505]")
	recCount, _  := datastoreClient.Count(c,q)
	res := make([]TDSADS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &res); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62596]")
	for _, p := range res{
		adKey := fmt.Sprintf("%s.%d", p.ADS_PUB_ID, p.ADS_ID)
		key := datastore.NameKey("TDSADS", adKey, nil)
		datastoreClient.Delete(c, key)
		if p.BLOB_KEY != "" {
			//blobstore.Delete(c, appengine.BlobKey(p.BLOB_KEY))	
			err := deleteGcsObject(c, p.BLOB_KEY)
			if err != nil {
				log.Fatalf("ERROR: deleteGcsObject() %v", err)
			}
		}
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSADTS(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSADTS")
	//log.Panicf("[S0506]")
	recCount, _  := datastoreClient.Count(c,q)
	res := make([]TDSADTS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &res); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62629]")
	for _, p := range res{
		adKey := fmt.Sprintf("%s-%s", "", p.ADS_TIME_SLOT)
		key := datastore.NameKey("TDSADTS", adKey, nil)
		datastoreClient.Delete(c, key)
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSSLIDE(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSSLIDE")
	//log.Panicf("[S0507]")
	recCount, _  := datastoreClient.Count(c,q)
	res := make([]TDSSLIDE, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &res); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62655]")
	for _, p := range res{
		dsKey := fmt.Sprintf("%d", p.DOC_ID)
		key := datastore.NameKey("TDSSLIDE", dsKey, nil)
		datastoreClient.Delete(c, key)
		if p.BLOB_URL != "" {
			//blobstore.Delete(c, appengine.BlobKey(p.BLOB_URL))	
			err := deleteGcsObject(c, p.BLOB_URL)
			if err != nil {
				log.Fatalf("ERROR: deleteGcsObject() %v", err)
			}
		}
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSARTL(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSARTL")
	//log.Panicf("[S0508]")
	recCount, _  := datastoreClient.Count(c,q)
	res := make([]TDSARTL, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &res); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62688]")
	for _, p := range res{
		dsKey := fmt.Sprintf("%d", p.DOC_ID)
		key := datastore.NameKey("TDSARTL", dsKey, nil)
		datastoreClient.Delete(c, key)
		if p.BLOB_URL != "" {
			//blobstore.Delete(c, appengine.BlobKey(p.BLOB_URL))	
			err := deleteGcsObject(c, p.BLOB_URL)
			if err != nil {
				log.Fatalf("ERROR: deleteGcsObject() %v", err)
			}
		}
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSMEDIA(w http.ResponseWriter, r *http.Request) {
	
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSMEDIA")
	//log.Panicf("[S0509]")
	recCount, _  := datastoreClient.Count(c,q)
	res := make([]TDSMEDIA, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &res); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [62721]")
	for _, p := range res{
		dsKey := fmt.Sprintf("%d", p.MEDIA_ID)
		key := datastore.NameKey("TDSMEDIA", dsKey, nil)
		datastoreClient.Delete(c, key)
		if p.BLOB_KEY != "" {
			//blobstore.Delete(c, appengine.BlobKey(p.BLOB_KEY))	
			err := deleteGcsObject(c, p.BLOB_KEY)
			if err != nil {
				log.Fatalf("ERROR: deleteGcsObject() %v", err)
			}
		}
		//fmt.Fprintf(w, "DELETED %v<br>", key)
	}
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteTDSLOGS(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSLOGS").KeysOnly()
	//log.Panicf("[S0510]")
	keys, err := datastoreClient.GetAll(c,q, nil)
	if err != nil {
		panic(err)
    }
    //log.Printf("datastoreClient.Get()  [62751]")
	err = datastoreClient.DeleteMulti(c, keys)
	if err != nil {
		panic(err)
	}
	//fmt.Fprintf(w, "DELETED %v<br>", keys)
		
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteChannel(w http.ResponseWriter, r *http.Request) {
	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("channel").KeysOnly()
	//log.Panicf("[S0511]")
	keys, err := datastoreClient.GetAll(c,q, nil)
	if err != nil {
		panic(err)
    }
    //log.Printf("datastoreClient.Get()  [62775]")
	err = datastoreClient.DeleteMulti(c, keys)
	if err != nil {
		panic(err)
	}
	//fmt.Fprintf(w, "DELETED %v<br>", keys)
	
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteGreeting(w http.ResponseWriter, r *http.Request) {
	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("Greeting").KeysOnly()
	//log.Panicf("[S0512]")
	keys, err := datastoreClient.GetAll(c,q, nil)
	if err != nil {
		panic(err)
    }
    //log.Printf("datastoreClient.Get()  [62799]")
	err = datastoreClient.DeleteMulti(c, keys)
	if err != nil {
		panic(err)
	}
	//fmt.Fprintf(w, "DELETED %v<br>", keys)
	
}
 
//used for installation and setup only
//deletes initial records  
func adhocDeleteIndex(w http.ResponseWriter, r *http.Request, IDX_TARGET string) {
	
	//c := appengine.NewContext(r) 
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    index, err := search.Open(IDX_TARGET)
	if err != nil {
		 panic(err)
	}
 
	for t := index.List(c, nil); ; {
		var doc Doc
		id, err := t.Next(&doc)
		if err == search.Done {
			break
		}
		if err != nil {
			fmt.Fprintf(w, "Search error: %v\n", err)
			break
		}
		err = index.Delete(c, id)
		if err != nil {
			 panic(err)
		}
		fmt.Fprintf(w, "DELETED %v<br>", id)	
	}	
	
}
 
//used for installation and setup only
//loads initial records  
func adhocWebLoadTDSSTATS(w http.ResponseWriter, r *http.Request) {
	
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
 
	keysBody := []byte(`[
{"SYS_VER":1,
"STAT_NAME":"TOT_ONLINE",
"DATA_TYPE":"NUM",
"VAL_NUM":1,
"VAL_TXT":""
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_RECENT_1",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser1"
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_RECENT_2",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser2"
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_RECENT_3",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser3"
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_ACTIVE_1",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser1"
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_ACTIVE_2",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser2"
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_ACTIVE_3",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser3"
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_POPULAR_1",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser1"
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_POPULAR_2",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser2"
},
 
{"SYS_VER":1,
"STAT_NAME":"MOST_POPULAR_3",
"DATA_TYPE":"TXT",
"VAL_NUM":0,
"VAL_TXT":"dummuser3"
}
]`)
	keys := make([]TDSSTATS,0)
	json.Unmarshal(keysBody, &keys)
	//log.Printf("%#v", keys)
	
	for _, p := range keys{
		//k := keys[i]
		//fmt.Fprintf(w, "Record loaded.<br>")
		key := datastore.NameKey("TDSSTATS", p.STAT_NAME, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [62930]")
		//log.Panicf("[S0513]")
		if err != nil {
			 panic(err)
		}
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}
 
//used for installation and setup only
//loads initial records 
func adhocWebLoadTDSSLIDE(w http.ResponseWriter, r *http.Request) {
	
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
 
	keysBody := []byte(`[
{"FL_COUNTRY_SPECIFIC":"",
"SYS_VER":1,
"DOC_ID":1,
"DOC_STAT":"Personal",
"TITLE":"Sample Title",
"DESC":"This is a sample description",
"AUTHOR":"ulapph@gmail.com",
"YEAR":"2014",
"CATEGORY":"desktop1",
"TAGS":"sdd dsds sdsd",
"FL_SHARED":"Y",
"BLOB_URL":"http://keyhere",
"DT_UPLOAD":"201501051234",
"NUM_LIKES":1,
"NUM_COMMENTS":2,
"LIKED_BY":"sdsd",
"COMMENTS_BY":"sdsd",
"NUM_LIKES":0,
"NUM_VIEWS":0
}
]`)
	keys := make([]TDSSLIDE,0)
	json.Unmarshal(keysBody, &keys)
	
	for _, p := range keys{
		//fmt.Fprintf(w, "Record loaded.<br>")
		dsKey := fmt.Sprintf("%d", p.DOC_ID)
		key := datastore.NameKey("TDSSLIDE", dsKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [62980]")
		//log.Panicf("[S0514]")
		if err != nil {
			 panic(err)
		}
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}

//used for installation and setup only
//loads initial records 
func adhocWebLoadTDSARTL(w http.ResponseWriter, r *http.Request) {
	
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	keysBody := []byte(`[
{"FL_COUNTRY_SPECIFIC":"",
"SYS_VER":1,
"DOC_ID":1,
"DOC_STAT":"Personal",
"TITLE":"Sample Title",
"DESC":"This is a sample description",
"AUTHOR":"ulapph@gmail.com",
"YEAR":"2014",
"CATEGORY":"desktop1",
"TAGS":"sdd dsds sdsd",
"FL_SHARED":"N",
"BLOB_URL":"http://keyhere",
"DT_UPLOAD":"201501051234",
"NUM_LIKES":1,
"NUM_COMMENTS":2,
"LIKED_BY":"sdsd",
"COMMENTS_BY":"sdsd",
"NUM_LIKES":0,
"NUM_VIEWS":0
}
]`)
	keys := make([]TDSARTL,0)
	json.Unmarshal(keysBody, &keys)
	
	for _, p := range keys{
		//fmt.Fprintf(w, "Record loaded.<br>")
		dsKey := fmt.Sprintf("%d", p.DOC_ID)
		key := datastore.NameKey("TDSARTL", dsKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [63029]")
		//log.Panicf("[S0515]")
		if err != nil {
			 panic(err)
		}
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}

//used for installation and setup only
//loads initial records 
func adhocWebLoadTDSMEDIA(w http.ResponseWriter, r *http.Request) {
	
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	keysBody := []byte(`[
{"SYS_VER":1,
"MEDIA_ID":1,
"DOC_ID":1,
"DATA_TYPE":"image",
"PROP":"120x120",
"TITLE":"Sample Title",
"DESC":"This is a sample description",
"AUTHOR":"ulapph@gmail.com",
"YEAR":"2014",
"CATEGORY":"desktop0",
"FL_SHARED":"Y",
"IMG_URL":"",
"BLOB_KEY":"http://keyhere",
"DT_UPLOAD":"201501051234",
"NUM_LIKES":1,
"NUM_COMMENTS":2,
"LIKED_BY":"sdsd",
"COMMENTS_BY":"sdsd"
}
]`)
	keys := make([]TDSMEDIA,0)
	json.Unmarshal(keysBody, &keys)
	
	for _, p := range keys{
		//fmt.Fprintf(w, "Record loaded.<br>")
		dsKey := fmt.Sprintf("%d", p.MEDIA_ID)
		key := datastore.NameKey("TDSMEDIA", dsKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [63077]")
		//log.Panicf("[S0516]")
		if err != nil {
			 panic(err)
		}
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}

//used for installation and setup only
//loads initial records 
func adhocWebLoadTDSCNFG(w http.ResponseWriter, r *http.Request) {
	
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	keysBody := []byte(`[
{"SYS_VER":1,
"USER":"desktop1",
"CFG_ID":"desktop1_icons",
"DAT_TYP":"TXT",
"NUM_VAL":"",
"TXT_VAL":"desktop1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
"CFG_DESC":"Sample cfg item"
}
]`)
	keys := make([]TDSCNFG,0)
	json.Unmarshal(keysBody, &keys)
	
	for _, p := range keys{
		//fmt.Fprintf(w, "Record loaded.<br>")
	    thisKey := fmt.Sprintf("%s-%s", p.USER, p.CFG_ID)
		key := datastore.NameKey("TDSCNFG", thisKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [63114]")
		//log.Panicf("[S0517]")
		if err != nil {
			 panic(err)
		}
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}

//used for installation and setup only
//loads initial records  
func adhocWebLoadTDSICONS(w http.ResponseWriter, r *http.Request) {
	
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	keysBody := []byte(`[
{"SYS_VER":1,
"ICON_ID":1,
"URL_ID":0,
"URL_ADD":"https://drive.google.com/?authuser=0#my-drive",
"ICON_NAME":"Drive",
"IMG_SRC":"/static/img/GDrive.png",
"DESKTOP":"desktop0",
"BLOB_KEY":"AMIfv95ZOj5FsALDQvnqNy8TvOxdsTO_EwM1WZSMjDbwsXSyjcrT8U_vORkLxU7KjLHtwZSYCNgkK_4uGbeznraJRJerdQQcivwvFpgdccR9ET35j40WQBgOcvIl8_N2xvJWlKQuaYhQ2z_imAunW0SNyOFyjm9XUUHLB1ovYmIGxMWVESAM-2g"
}
]`)
	keys := make([]TDSICONS,0)
	json.Unmarshal(keysBody, &keys)
	
	for _, p := range keys{
		//fmt.Fprintf(w, "Record loaded.<br>")
	    thisKey := fmt.Sprintf("ICON[%d]", p.ICON_ID)
		key := datastore.NameKey("TDSICONS", thisKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [63152]")
		//log.Panicf("[S0518]")
		if err != nil {
			 panic(err)
		}
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}

//used for installation and setup only
//loads initial records 
func adhocWebLoadTDSRULES(w http.ResponseWriter, r *http.Request) {
	
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	keysBody := []byte(`[
{"SYS_VER":1,
"RULE_NUM":1,
"DISP_TYP":"TEST",
"DEST_URL":"",
"TRIG_ID":"*",
"ADS_ID":"*",
"CAP_LIMIT_DAILY":1000,
"DESKTOP_ACCESSED":"*",
"URL_ACESSED":"*",
"URL_REFERER":"*",
"ACCESS_TIME":"*",
"COUNTRY":"PH",
"REGION":"*",
"CITY":"*",
"IP_ADDRESS":"*",
"IS_BOT":"*",
"IS_MOBILE":"False",
"OS_NAME":"*",
"PLATFORM":"Windows",
"BROWSER_NAME":"Internet Explorer",
"BROWSER_VERSION":"*",
"UID":"*"
}
]`)
 
	keys := make([]TDSRULES,0)
	err := json.Unmarshal(keysBody, &keys)
	if err != nil {
		 panic(err)
	}
	
	
	//log.Printf("%#v", keys)
	
	for _, p := range keys{
		//k := keys[i]
		//log.Printf("Row[%d] Key[%v] \n RULENUM[%d] DISP_TYP[%s]\n", i, k, p.RULE_NUM, p.DISP_TYP)
		ruleKey := fmt.Sprintf("%s.%s.%s.%s", p.UID, p.PLATFORM, p.OS_NAME, p.BROWSER_NAME)
		key := datastore.NameKey("TDSRULES", ruleKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [63212]")
		//log.Panicf("[S0519]")
		if err != nil {
			 panic(err)
		}
 
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}

//used for installation and setup only
//loads initial records 
func adhocWebLoadTDSADS(w http.ResponseWriter, r *http.Request) {
	
	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	keysBody := []byte(`[
{"SYS_VER":1,
"ADS_ID":1,
"ADS_STATUS":1,
"ADS_PUB_ID":"ULAPPH",
"ADS_TYP":"IMG",
"UPLOAD_BY":"dummuser1@gmail.com",
"UPLOAD_DATE":"20141109091723",
"CATEGORY":"desktop0",
"ADS_SIZE":"",
"ADS_VIEW":0,
"ADS_CLICK":0,
"ADS_VAL_START":0,
"ADS_VAL_END":0,
"ADS_TITLE":"Jollibee",
"ADS_IMG":"http://lh3.ggpht.com/mRIylzMrZvtUPyVAT8bE7spA8Yw2TMwMnTHM0vYfN1oRkTOXdjrvYkfUFMzLhf8hr5uBUhC2NcmG63b_hstFw_4MZYNdW3rJ",
"ADS_URL":"http://www.jollibee.com.ph/",
"BLOB_KEY":""
}
]`)
	keys := make([]TDSADS,0)
	json.Unmarshal(keysBody, &keys)
	
	for _, p := range keys{
		//fmt.Fprintf(w, "Record loaded.<br>")
		adKey := fmt.Sprintf("%s.%d", p.ADS_PUB_ID, p.ADS_ID)
		key := datastore.NameKey("TDSADS", adKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [63260]")
		//log.Panicf("[S0520]")
		if err != nil {
			 panic(err)
		}
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}

//used for installation and setup only
//loads initial records 
func adhocWebLoadTDSADTS(w http.ResponseWriter, r *http.Request) {
	
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	keysBody := []byte(`[
{"SYS_VER":1,
"ADS_TIME_SLOT":"00:00:00",
"ADS_TIME_SLOT2":"08:00:00",
"ADS_RAND_0":"1,2,3",
"ADS_RAND_1":"1,2,3",
"ADS_RAND_2":"3,9,5",
"ADS_RAND_3":"5,10,2",
"ADS_RAND_4":"12,3,4",
"ADS_RAND_5":"1,2,9",
"ADS_RAND_6":"3,9,5",
"ADS_RAND_7":"5,10,2",
"ADS_RAND_8":"12,3,4",
"ADS_RAND_9":"1,2,9",
"CATEGORY":""
}
]`)
	keys := make([]TDSADTS,0)
	json.Unmarshal(keysBody, &keys)
	
	for _, p := range keys{
		//fmt.Fprintf(w, "Record loaded.<br>")
		//adKey := fmt.Sprintf("%s", p.ADS_TIME_SLOT)
		//adKey := fmt.Sprintf("%s-%s", p.CATEGORY, p.ADS_TIME_SLOT)
		adKey := fmt.Sprintf("%s-%s", "", p.ADS_TIME_SLOT)  		
		key := datastore.NameKey("TDSADTS", adKey, nil)
        _, err := datastoreClient.Put(c, key, &p)
        //log.Printf("datastoreClient.Put()  [63306]")
		//log.Panicf("[S0521]")
		if err != nil {
			 panic(err)
		}
	}	
	//fmt.Fprintf(w, "LOADED INITIAL TABLE RECORDS.<br>")
}
 
var adtsDispTemplateHdr = template.Must(template.New("adtsDispTemplateHdr").Parse(adtsDispTemplateHTMLHdr))
 
const adtsDispTemplateHTMLHdr = `
<html>
  <body>
 	<table>
	<thead>
	<tr>
	<th>S_VER</th>
	<th>ADS_TIME_SLOT</th>
	<th>ADS_TIME_SLOT2</th>
	<th>CATEGORY</th>
	<th>ADS_RAND_0</th>
	<th>ADS_RAND_1</th>
	<th>ADS_RAND_2</th>
	<th>ADS_RAND_3</th>
	<th>ADS_RAND_4</th>
	<th>ADS_RAND_5</th>
	<th>ADS_RAND_6</th>
	<th>ADS_RAND_7</th>
	<th>ADS_RAND_8</th>
	<th>ADS_RAND_9</th>
	</tr>
	</thead>
`
 
var adtsDispTemplateRec= template.Must(template.New("adtsDispTemplateRec").Parse(adtsDispTemplateHTMLRec))
 
const adtsDispTemplateHTMLRec = `
	<tr>
	<td>{{.SYS_VER}}</td>
	<td>{{.ADS_TIME_SLOT}}</td>
	<td>{{.ADS_TIME_SLOT2}}</td>
	<td>{{.CATEGORY}}</td>
	<td>{{.ADS_RAND_0}}</td>
	<td>{{.ADS_RAND_1}}</td>
	<td>{{.ADS_RAND_2}}</td>
	<td>{{.ADS_RAND_3}}</td>
	<td>{{.ADS_RAND_4}}</td>
	<td>{{.ADS_RAND_5}}</td>
	<td>{{.ADS_RAND_6}}</td>
	<td>{{.ADS_RAND_7}}</td>
	<td>{{.ADS_RAND_8}}</td>
	<td>{{.ADS_RAND_9}}</td>
	</tr>
`
	
var adtsDispTemplateFtr= template.Must(template.New("adtsDispTemplateFtr").Parse(adtsDispTemplateHTMLFtr))
 
const adtsDispTemplateHTMLFtr= `
	</table>
  </body>
</html>
`
 
var adtsDispTemplateAdminHdr = template.Must(template.New("adtsDispTemplateAdminHdr").Parse(adtsDispTemplateHTMLHeader))
 
const adtsDispTemplateHTMLHeader = `
<iframe src="https://freesecure.timeanddate.com/clock/i5jccu94/fs48/tcf90/pc9f0/ftbi/th2" width="300" height="100" scrolling="no"></iframe>
<iframe src="https://oras.pagasa.dost.gov.ph/widget.shtml" width=300 height=100 scrolling=no></iframe>
	<form name="adsts" action="/admin-ads" method="post" target="ListSlots">
		<select name="CATEGORY">
 
`
 
var adtsDispTemplateAdminHdr2 = template.Must(template.New("adtsDispTemplateAdminHdr2").Parse(adtsDispTemplateHTMLHeader2))
 
const adtsDispTemplateHTMLHeader2 = `
		</select>
		Display Ad Images?
		<select name="SHOW_IMAGES">
		  <option value="N">No</option>	
		  <option value="Y">Yes</option>
		</select>
		<input type="hidden" name="ADS_FUNC" value="ListSlots"/>
		<input type="submit" name="submit" value="ListSlots"/>
	</form>	
<h3>List of Advertisement Timeslots: <font color=blue>{{.}}</font></h3>
<input type="hidden" name="uid" value="{{.}}">
<table id="example" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col" class="cbc tct-selectall"></th>
		<th scope="col" class="id">
		SYS_VER
		</th>
		<th scope="col">ADS_TIME_SLOT (UTC)</th>
		<th scope="col">ADS_TIME_SLOT2 (PHL)</th>
		<th scope="col">CATEGORY</th>
		<th scope="col">ADS_RAND_0</th>
		<th scope="col">ADS_RAND_1</th>
		<th scope="col">ADS_RAND_2</th>
		<th scope="col">ADS_RAND_3</th>
		<th scope="col">ADS_RAND_4</th>
		<th scope="col">ADS_RAND_5</th>
		<th scope="col">ADS_RAND_6</th>
		<th scope="col">ADS_RAND_7</th>
		<th scope="col">ADS_RAND_8</th>
		<th scope="col">ADS_RAND_9</th>
		<th scope="col">CATEGORY</th>
	</tr>
</thead>
<tbody>
 
`
 
var slidesDispTemplateAdminHdr = template.Must(template.New("slidesDispTemplateAdminHdr").Parse(slidesDispTemplateHTMLHeader))
 
const slidesDispTemplateHTMLHeader = `
<table id="example" class="display" cellspacing="0" width="100%">
	<thead>
	<tr>
	<th scope="col">IMAGE</th>
	<th scope="col">TITLE</th>
	<th scope="col">DESCRIPTION</th>
	<th scope="col">AUTHOR</th>
	<th scope="col">DOC_ID</th>
	<th scope="col">YEAR</th>
	<th scope="col">CATEGORY</th>
	<th scope="col">DOC_STAT</th>
	<th scope="col">FL_SHARED</th>
	<!--th scope="col">BLOB_URL</th-->
	<th scope="col">GET_NEXT</th>
	<th scope="col">MUSIC_ID</th>
	<th scope="col">DT_UPLOAD</th>
	<th scope="col">NUM_LIKES</th>
	<th scope="col">NUM_DISLIKES</th>
	<th scope="col">LIKED_BY</th>
	<th scope="col">DISLIKED_BY</th>
	<th scope="col">NUM_VIEWS</th>
	</tr>
	</thead>
	<tbody>
`
 
var showTrendingHdr = template.Must(template.New("showTrendingHdr").Parse(showTrendingHdrRec))
 
const showTrendingHdrRec = `
<table id="example" class="display" cellspacing="0" width="100%">
	<thead>
	<tr>
	<th scope="col">IMAGE</th>
	<th scope="col">TITLE</th>
	<th scope="col">DESCRIPTION</th>
	<th scope="col">AUTHOR</th>
	<th scope="col">DOC_ID</th>
	<th scope="col">NUM_VIEWS</th>
	<th scope="col">NUM_COMMENTS</th>
	</tr>
	</thead>
	<tbody>
`
 
var showPeopleDirHdr = template.Must(template.New("showPeopleDirHdr").Parse(showPeopleDirHdrRec))
 
const showPeopleDirHdrRec = `
<table id="example" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col">
		STATUS
		</th>
		<th scope="col" class="cbc tct-selectall">GB_MSG</th>
		<th scope="col" class="id">
		PICTURE
		</th>
		<th scope="col">
		UID
		</th>
		<th scope="col">
		SITE
		</th>
		<th scope="col">	
		PROFESSION
		</th>
		<th scope="col">	
		COMPANY
		</th>
		<th scope="col">	
		CONTACT_NUM	
		</th>
		<th scope="col">
		SOCIAL_1
		</th>
		<th scope="col">	
		SOCIAL_2
		</th>
		<th scope="col">	
		SOCIAL_3
		</th>
		<th scope="col">	
		COUNTRY
		</th>	
		<th scope="col">
		REGION
		</th>
		<th scope="col">	
		CITY
		</th>
		<th scope="col">	
		I_HAVE_TEXT
		</th>
		<th scope="col">	
		I_NEED_TEXT
		</th>
	</tr>
</thead>
<tbody>
`
 
var showSitesDirHdr = template.Must(template.New("showPeopleDirHdr").Parse(showSitesDirHdrRec))
 
const showSitesDirHdrRec = `
<table id="example" class="display" cellspacing="0" width="100%">
<thead>
	<tr>
		<th scope="col">
		ICON
		</th>
		<th scope="col">
		TYPE
		</th>
		<th scope="col">
		URL
		</th>
		<th scope="col">
		STATUS
		</th>
		<th scope="col">
		LAST UPGRADE
		</th>
		<th scope="col">
		BUILD VERSION
		</th>
		<th scope="col">
		SLIDES
		</th>
		<th scope="col">
		ARTICLES
		</th>
		<th scope="col">
		MEDIA
		</th>
		<th scope="col">	
		USERS
		</th>
		<th scope="col">	
		CONTACT
		</th>
		<th scope="col">	
		SEARCH TAGS
		</th>
	</tr>
</thead>
<tbody>
`
 
var showWhatsNewHdr = template.Must(template.New("showWhatsNewHdr").Parse(showWhatsNewHdrRec))
 
const showWhatsNewHdrRec = `
<table id="example" class="display" cellspacing="0" width="100%">
	<thead>
	<tr>
	<th scope="col">IMAGE</th>
	<th scope="col">TITLE</th>
	<th scope="col">DESCRIPTION</th>
	<th scope="col">AUTHOR</th>
	<th scope="col">DT_UPLOAD</th>
	<th scope="col">NUM_VIEWS</th>
	<th scope="col">NUM_COMMENTS</th>
	</tr>
	</thead>
	<tbody>
`

//D0042
var showDiscussionsHdr = template.Must(template.New("showDiscussionsHdr").Parse(showDiscussionsHdrRec))

const showDiscussionsHdrRec = `
<table id="example" class="display" cellspacing="0" width="100%">
	<thead>
	<tr>
	<th scope="col">IMAGE</th>
	<th scope="col">TITLE/DESC</th>
	<th scope="col">USERS</th>
	<th scope="col">COMMENTS</th>
	<th scope="col">ACTIVITY</th>
	<th scope="col">LAST_UPDATE</th>
	</tr>
	</thead>
	<tbody>
`
 
var slidesDispTemplateAdminHdrDir = template.Must(template.New("slidesDispTemplateAdminHdrDir").Parse(slidesDispTemplateHTMLHeaderDir))
 
const slidesDispTemplateHTMLHeaderDir = `
<table id="example" class="display" cellspacing="0" width="100%">
	<thead>
	<tr>
	<th scope="col">IMAGE</th>
	<th scope="col">TITLE</th>
	<th scope="col">DESCRIPTION</th>
	<th scope="col">AUTHOR</th>
	<th scope="col">DOC_ID</th>
	<th scope="col">YEAR</th>
	<th scope="col">CATEGORY</th>
	<th scope="col">DOC_STAT</th>
	<th scope="col">FL_SHARED</th>
	<th scope="col">NUM_VIEWS</th>
	</tr>
	</thead>
	<tbody>
`
 
var articlesDispTemplateAdminHdr = template.Must(template.New("articlesDispTemplateAdminHdr").Parse(articlesDispTemplateHTMLHeader))
 
const articlesDispTemplateHTMLHeader = `
<table id="example" class="display" cellspacing="0" width="100%">
	<thead>
	<tr>
	<th scope="col">IMAGE</th>
	<th scope="col">TITLE</th>
	<th scope="col">DESCRIPTION</th>
	<th scope="col">AUTHOR</th>
	<th scope="col">DOC_ID</th>
	<th scope="col">YEAR</th>
	<th scope="col">CATEGORY</th>
	<th scope="col">DOC_STAT</th>
	<th scope="col">FL_SHARED</th>
	<!--th scope="col">BLOB_URL</th-->
	<th scope="col">MUSIC_ID</th>
	<th scope="col">DT_UPLOAD</th>
	<th scope="col">NUM_LIKES</th>
	<th scope="col">NUM_DISLIKES</th>
	<th scope="col">LIKED_BY</th>
	<th scope="col">DISLIKED_BY</th>
	<th scope="col">NUM_VIEWS</th>
	</tr>
	</thead>
	<tbody>
`
 
var mediaDispTemplateAdminHdr = template.Must(template.New("mediaDispTemplateAdminHdr").Parse(mediaDispTemplateHTMLHeader))
 
const mediaDispTemplateHTMLHeader = `
<table id="example" class="display" cellspacing="0" width="100%">
	<thead>
	<tr>
	<th scope="col">DATA_TYPE</th>
	<th scope="col">TITLE</th>
	<th scope="col">DESC</th>
	<th scope="col">PROP</th>
	<th scope="col">AUTHOR</th>
	<th scope="col">MEDIA_ID</th>
	<th scope="col">DOC_ID</th>
	<th scope="col">YEAR</th>
	<th scope="col">CATEGORY</th>
	<th scope="col">FL_SHARED</th>
	<th scope="col">DOC_STAT</th>
	<th scope="col">IMG_URL</th>
	<th scope="col">BLOB_KEY</th>
	<th scope="col">DT_UPLOAD</th>
	<th scope="col">NUM_LIKES</th>
	<th scope="col">NUM_DISLIKES</th>
	<th scope="col">LIKED_BY</th>
	<th scope="col">DISLIKED_BY</th>
	<th scope="col">NUM_VIEWS</th>
	</tr>
	</thead>
	<tbody>
`
 
var mediaDispTemplateAdminHdrMobile = template.Must(template.New("mediaDispTemplateAdminHdrMobile").Parse(mediaDispTemplateHTMLHeaderM))
 
const mediaDispTemplateHTMLHeaderM = `
<table id="example" class="display" cellspacing="0" width="100%">
	<thead>
	<tr>
	<th scope="col">DATA_TYPE</th>
	<th scope="col">TITLE</th>
	<th scope="col">DESC</th>
	<th scope="col">PROP</th>
	<th scope="col">AUTHOR</th>
	<th scope="col">MEDIA_ID</th>
	</tr>
	</thead>
	<tbody>
`
 
var adtsDispTemplateAdminRecs = template.Must(template.New("adtsDispTemplateAdminRecs").Parse(adtsDispTemplateHTMLRecs))
 
const adtsDispTemplateHTMLRecs = `
{{range .}}
	<tr>
		<td class="cbc">
		<input type="hidden" name="ADS_TIME_SLOT" value="{{.ADS_TIME_SLOT}}"/>
		<input type="hidden" name="ADS_TIME_SLOT2" value="{{.ADS_TIME_SLOT2}}"/>
		<a href="/admin-ads?ADS_FUNC=EditSlot&ADS_TIME_SLOT={{.ADS_TIME_SLOT}}&ADS_TIME_SLOT2={{.ADS_TIME_SLOT2}}&CATEGORY={{.CATEGORY}}" target="editslot">Edit</a>
		</td>
		<td class="id">{{.SYS_VER}}</td>
		<td data-search="{{.ADS_TIME_SLOT}}">{{.ADS_TIME_SLOT}}</td>
		<td data-search="{{.ADS_TIME_SLOT2}}">{{.ADS_TIME_SLOT2}}</td>
		<td data-order="{{.CATEGORY}}">{{.CATEGORY}}</td>
		<td data-order="{{.ADS_RAND_0}}">{{.ADS_RAND_0}}</td>
		<td data-order="{{.ADS_RAND_1}}">{{.ADS_RAND_1}}</td>
		<td data-order="{{.ADS_RAND_2}}">{{.ADS_RAND_2}}</td>
		<td data-order="{{.ADS_RAND_3}}">{{.ADS_RAND_3}}</td>
		<td data-order="{{.ADS_RAND_4}}">{{.ADS_RAND_4}}</td>
		<td data-order="{{.ADS_RAND_5}}">{{.ADS_RAND_5}}</td>
		<td data-order="{{.ADS_RAND_6}}">{{.ADS_RAND_6}}</td>
		<td data-order="{{.ADS_RAND_7}}">{{.ADS_RAND_7}}</td>
		<td data-order="{{.ADS_RAND_8}}">{{.ADS_RAND_8}}</td>
		<td data-order="{{.ADS_RAND_9}}">{{.ADS_RAND_9}}</td>
		<td data-order="{{.CATEGORY}}">{{.CATEGORY}}</td>
	</tr>
	{{end}}
`
 
var adtsDispTemplateAdminRecsShowImages = template.Must(template.New("adtsDispTemplateAdminRecsShowImages").Parse(adtsDispTemplateHTMLRecsShowImages))
 
const adtsDispTemplateHTMLRecsShowImages = `
{{range .}}
	<tr>
		<td class="cbc">
		<input type="hidden" name="ADS_TIME_SLOT" value="{{.ADS_TIME_SLOT}}"/>
		<input type="hidden" name="ADS_TIME_SLOT2" value="{{.ADS_TIME_SLOT2}}"/>
		<a href="/admin-ads?ADS_FUNC=EditSlot&ADS_TIME_SLOT={{.ADS_TIME_SLOT}}&ADS_TIME_SLOT2={{.ADS_TIME_SLOT2}}&CATEGORY={{.CATEGORY}}" target="editslot">Edit</a>
		</td>
		<td class="id">{{.SYS_VER}}</td>
		<td data-search="{{.ADS_TIME_SLOT}}">{{.ADS_TIME_SLOT}}</td>
		<td data-search="{{.ADS_TIME_SLOT2}}">{{.ADS_TIME_SLOT2}}</td>
		<td data-order="{{.CATEGORY}}">{{.CATEGORY}}</td>
		<td data-order="{{.ADS_RAND_0}}">{{.ADS_RAND_0}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_0}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_1}}">{{.ADS_RAND_1}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_1}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_2}}">{{.ADS_RAND_2}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_2}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_3}}">{{.ADS_RAND_3}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_3}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_4}}">{{.ADS_RAND_4}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_4}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_5}}">{{.ADS_RAND_5}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_5}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_6}}">{{.ADS_RAND_6}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_6}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_7}}">{{.ADS_RAND_7}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_7}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_8}}">{{.ADS_RAND_8}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_8}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.ADS_RAND_9}}">{{.ADS_RAND_9}}<br><iframe src="/advertisement?AD_FUNC=GETIMG2&LIST={{.ADS_RAND_9}}" width="200" height="60" scrolling=no></iframe></td>
		<td data-order="{{.CATEGORY}}">{{.CATEGORY}}</td>
	</tr>
	{{end}}
`
 
var slidesDispTemplateAdminRecs = template.Must(template.New("slidesDispTemplateAdminRecs").Parse(slidesDispTemplateHTMLRecs))
 
const slidesDispTemplateHTMLRecs = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
	<tr>
	<td><a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" style="padding-top:23px;" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a><button onclick="copyToUWM('','/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSSLIDE-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ] [ <a download="TDSSLIDE-{{.DOC_ID}}-{{.TITLE}}.ulapphSlide" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-{{.DOC_ID}}">Backup</a> ] [ <a href="/admin-slides?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="slide-delete">Delete</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		<a href="/slides?TYPE=SLIDE&SECS=8&MODE=NORMAL&PARM=LOOP&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}"><img src="/static/img/viewer.png" height="40" width="40"></a>
		<a href="/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/presenter.png" height="40" width="40"></a>
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}" title="Play Slide & Next Slide{{.GET_NEXT}}"><img src="/static/img/play.png" height="40" width="40"></a>
		<a href="/social?TYPE=SLIDE&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/slides?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a>
		<a href="/social?TYPE=SLIDE&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a>
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}]</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.GET_NEXT}}">{{.GET_NEXT}}</td>
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
{{end}}
`
 
var slidesTrending = template.Must(template.New("slidesTrending").Parse(slidesTrendingRec))
 
const slidesTrendingRec = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
{{if ne .DOC_STAT "Personal"}}
	<tr>
	<td><a href="https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100"></img></a></td>
	<td data-order="{{.TITLE}}">
		<a href="https://www.ulapph.com/slides?TYPE=SLIDE&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}]</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td>{{.NUM_VIEWS}}</td>
	<td data-order="{{.NUM_COMMENTS}}"><a href="https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}" target="str">{{.NUM_COMMENTS}}</a></td>
	</tr>
{{end}}
{{end}}
{{end}}
`
 
var slidesWhatsNew = template.Must(template.New("slidesWhatsNew").Parse(slidesWhatsNewRec))
 
const slidesWhatsNewRec = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
{{if ne .DOC_STAT "Personal"}}
	<tr>
	<td><a href="https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100"></img></a></td>
	<td data-order="{{.TITLE}}">
		<a href="https://www.ulapph.com/slides?TYPE=SLIDE&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}]</td>
	<td>{{.AUTHOR}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td>{{.NUM_VIEWS}}</td>
	<td data-order="{{.NUM_COMMENTS}}"><a href="https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}" target="swn">{{.NUM_COMMENTS}}</a></td>
	</tr>
{{end}}
{{end}}
{{end}}
`

//D0042
var recentDiscussions = template.Must(template.New("recentDiscussions").Parse(recentDiscussionsRec))
 
const recentDiscussionsRec = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
{{if ne .DOC_STAT "Personal"}}
	<tr>
	<td>
		<a href="{{.URL_CON}}" title="View Content">
		<img src="{{.IMAGE}}" height="100" width="100"></img>
		</a>
	</td>
	<td data-order="{{.TITLE}}">
		<a href="{{.URL_CON}}" title="View Content">{{.TITLE}}</a>
	</td>
	<td data-order="{{.USERS}}">{{.USERS}}</td>
	<td data-order="{{.COMMENTS}}">
		<a href="{{.URL_DIS}}">{{.COMMENTS}} comment(s)</a>
	</td>
	<td data-order="{{.ACTIVITY}}">{{.ACTIVITY}}</td>
	<td data-order="{{.DT_UPDATE}}">{{.DT_UPDATE}}</td>
	</tr>
{{end}}
{{end}}
{{end}}
`
 
var slidesDispTemplateAdminRecsDirectory = template.Must(template.New("slidesDispTemplateAdminRecsDirectory").Parse(slidesDispTemplateHTMLRecsDirectory))
 
const slidesDispTemplateHTMLRecsDirectory = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
	<tr>
	<td><a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100"></img></a></td>
	<td data-order="{{.TITLE}}">
		<a href="/slides?TYPE=SLIDE&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}]</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
{{end}}
`
 
var slidesDispTemplateAdminRecsRecent = template.Must(template.New("slidesDispTemplateAdminRecsRecent").Parse(slidesDispTemplateHTMLRecsRecent))
 
const slidesDispTemplateHTMLRecsRecent = `
{{if eq .FL_SHARED "Y"}}
	<tr>
	<td><a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" style="padding-top:23px;" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSSLIDE-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ] [ <a download="TDSSLIDE-{{.DOC_ID}}-{{.TITLE}}.ulapphSlide" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-{{.DOC_ID}}">Backup</a> ] [ <a href="/admin-slides?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="slide-delete">Delete</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		<a href="/slides?TYPE=SLIDE&SECS=8&MODE=NORMAL&PARM=LOOP&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}"><img src="/static/img/viewer.png" height="40" width="40"></a>
		<a href="/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/presenter.png" height="40" width="40"></a>
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}"  title="Play Slide & Next Slide{{.GET_NEXT}}"><img src="/static/img/play.png" height="40" width="40"></a>
		<a href="/social?TYPE=SLIDE&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/slides?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a>
		<a href="/social?TYPE=SLIDE&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a>
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}]</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.GET_NEXT}}">{{.GET_NEXT}}</td>
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
`
 
var articlesDispTemplateAdminRecs = template.Must(template.New("articlesDispTemplateAdminRecs").Parse(articlesDispTemplateHTMLRecs))
 
const articlesDispTemplateHTMLRecs = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
	<tr>
	<td><a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSARTL-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ] [ <a download="TDSARTL-{{.DOC_ID}}-{{.TITLE}}.ulapphArticle" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSARTL-{{.DOC_ID}}">Backup</a> ] [ <a href="/admin-articles?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="article-delete">Delete</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=ARTICLE&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/articles?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=ARTICLE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSARTL-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
{{end}}
`
 
var articlesTrending = template.Must(template.New("articlesTrending").Parse(articlesTrendingRec))
 
const articlesTrendingRec = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
{{if ne .DOC_STAT "Personal"}}
	<tr>
	<td><a href="https://www.ulapph.com/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100"></img></a></td>
	<td data-order="{{.TITLE}}">
		<a href="https://www.ulapph.com/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
	</td>
	<td>{{.DESC}} [TDSARTL-{{.DOC_ID}}]</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td>{{.NUM_VIEWS}}</td>
	<td data-order="{{.NUM_COMMENTS}}"><a href="https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}" target="atr">{{.NUM_COMMENTS}}</a></td>
	</tr>
{{end}}
{{end}}
{{end}}
`
 
var articlesWhatsNew = template.Must(template.New("articlesWhatsNew").Parse(articlesWhatsNewRec))
 
const articlesWhatsNewRec = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
{{if ne .DOC_STAT "Personal"}}
	<tr>
	<td><a href="https://www.ulapph.com/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100"></img></a></td>
	<td data-order="{{.TITLE}}">
		<a href="https://www.ulapph.com/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
	</td>
	<td>{{.DESC}}</td>
	<td>{{.AUTHOR}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td>{{.NUM_VIEWS}}</td>
	<td data-order="{{.NUM_COMMENTS}}"><a href="https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}" target="awn" >{{.NUM_COMMENTS}}</a></td>
	</tr>
{{end}}
{{end}}
{{end}}
`
 
var articlesDispTemplateAdminRecsRecent = template.Must(template.New("articlesDispTemplateAdminRecsRecent").Parse(articlesDispTemplateHTMLRecsRecent))
 
const articlesDispTemplateHTMLRecsRecent = `
{{if eq .FL_SHARED "Y"}}
	<tr>
	<td><a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSARTL-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ] [ <a download="TDSARTL-{{.DOC_ID}}-{{.TITLE}}.ulapphArticle" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSARTL-{{.DOC_ID}}">Backup</a> ] [ <a href="/admin-articles?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="article-delete">Delete</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=ARTICLE&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/articles?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=ARTICLE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSARTL-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
`
 
var slidesDispTemplateAdminRecsMine = template.Must(template.New("slidesDispTemplateAdminRecsMine").Parse(slidesDispTemplateHTMLRecsMine))
 
const slidesDispTemplateHTMLRecsMine = `
{{range .}}
	<tr>
	<td><a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" style="padding-top:23px;" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSSLIDE-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ] [ <a download="TDSSLIDE-{{.DOC_ID}}-{{.TITLE}}.ulapphSlide" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-{{.DOC_ID}}">Backup</a> ] [ <a href="/admin-slides?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="slide-delete">Delete</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		<a href="/slides?TYPE=SLIDE&SECS=8&MODE=NORMAL&PARM=LOOP&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/presenter.png" height="40" width="40"></a><br>
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}"  title="Play Slide & Next Slide{{.GET_NEXT}}"><img src="/static/img/play.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=SLIDE&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/slides?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=SLIDE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.GET_NEXT}}">{{.GET_NEXT}}</td>
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
`
 
var slidesDispTemplateAdminRecsMineRecent = template.Must(template.New("slidesDispTemplateAdminRecsMineRecent").Parse(slidesDispTemplateHTMLRecsMineRecent))
 
const slidesDispTemplateHTMLRecsMineRecent = `
	<tr>
	<td><a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" style="padding-top:23px;" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSSLIDE-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}&UID={{.AUTHOR}}">{{.TITLE}}</a><br>
		[ <a href="/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}&UID={{.AUTHOR}}">Update</a> ] [ <a download="TDSSLIDE-{{.DOC_ID}}-{{.TITLE}}.ulapphSlide" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-{{.DOC_ID}}&UID={{.AUTHOR}}">Backup</a> ] [ <a href="/admin-slides?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="slide-delete">Delete</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		<a href="/slides?TYPE=SLIDE&SECS=8&MODE=NORMAL&PARM=LOOP&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/presenter.png" height="40" width="40"></a><br>
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}"  title="Play Slide & Next Slide{{.GET_NEXT}}"><img src="/static/img/play.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=SLIDE&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/slides?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=SLIDE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.GET_NEXT}}">{{.GET_NEXT}}</td>
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
`
 
var slidesDispTemplateAdminRecsMineRecentDir = template.Must(template.New("slidesDispTemplateAdminRecsMineRecentDir").Parse(slidesDispTemplateHTMLRecsMineRecentDir))
 
const slidesDispTemplateHTMLRecsMineRecentDir = `
	<tr>
	<td><a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100"></img></a></td>
	<td data-order="{{.TITLE}}">
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ]<br>
		<a href="/slides?TYPE=SLIDE&SECS=8&MODE=NORMAL&PARM=LOOP&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/presenter.png" height="40" width="40"></a><br>
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}"  title="Play Slide & Next Slide{{.GET_NEXT}}"><img src="/static/img/play.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=SLIDE&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/slides?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=SLIDE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
`
 
var articlesDispTemplateAdminRecsMine = template.Must(template.New("articlesDispTemplateAdminRecsMine").Parse(articlesDispTemplateHTMLRecsMine))
 
const articlesDispTemplateHTMLRecsMine = `
{{range .}}
	<tr>
	<td><a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSARTL-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ] [ <a download="TDSARTL-{{.DOC_ID}}-{{.TITLE}}.ulapphArticle" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSARTL-{{.DOC_ID}}">Backup</a> ] [ <a href="/admin-articles?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="article-delete">Delete</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=ARTICLE&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/articles?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=ARTICLE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSARTL-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
`
 
var articlesDispTemplateAdminRecsMineRecent = template.Must(template.New("articlesDispTemplateAdminRecsMineRecent").Parse(articlesDispTemplateHTMLRecsMineRecent))
 
const articlesDispTemplateHTMLRecsMineRecent = `
	<tr>
	<td><a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSARTL-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ] [ <a download="TDSARTL-{{.DOC_ID}}-{{.TITLE}}.ulapphArticle" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSARTL-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}">Backup</a> ] [ <a href="/admin-articles?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="article-delete">Delete</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=ARTICLE&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/articles?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=ARTICLE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSARTL-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}{{if eq .SYS_VER 888}}(pinned){{end}}</td>
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
`
 
var slidesDispTemplateAdminRecs2 = template.Must(template.New("slidesDispTemplateAdminRecs2").Parse(slidesDispTemplateHTMLRecs2))
 
const slidesDispTemplateHTMLRecs2 = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
	<tr>
	<td>
	<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" style="padding-top:23px;" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSSLIDE-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-slides?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ] <!--[ <a href="#" class="show_hide">Show/Hide</a> ] [ <a download="TDSSLIDE-{{.DOC_ID}}-{{.TITLE}}.ulapphSlide" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-{{.DOC_ID}}">Backup</a> ] [ <a href="/admin-slides?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="slide-delete">Delete</a> ]
        <div class="slidingDiv">
		<a href="/slides?TYPE=SLIDE&SECS=8&MODE=NORMAL&PARM=LOOP&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/presenter.png" height="40" width="40"></a><br>
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&GET_NEXT={{.GET_NEXT}}"  title="Play Slide & Next Slide{{.GET_NEXT}}"><img src="/static/img/play.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=SLIDE&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/slides?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=SLIDE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSSLIDE-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}</td>	
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.GET_NEXT}}">{{.GET_NEXT}}</td>
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
{{end}}
`
 
var articlesDispTemplateAdminRecs2 = template.Must(template.New("articlesDispTemplateAdminRecs2").Parse(articlesDispTemplateHTMLRecs2))
 
const articlesDispTemplateHTMLRecs2 = `
{{range .}}
{{if eq .FL_SHARED "Y"}}
	<tr>
	<td><a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">
	<img src="{{.TAGS}}" height="100" width="100" onmouseover="showtrail(800,500,'{{.TAGS}}=s800');" onmouseout="hidetrail();"></img></a> <button onclick="copyToUWM('','/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}','{{.TITLE}}','TDSARTL-{{.DOC_ID}}')">UWM Me!</button><div id='iurl_{{.DOC_ID}}s'></div></td>
	<td data-order="{{.TITLE}}">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}">{{.TITLE}}</a><br>
		[ <a href="/admin-articles?FUNC_CODE=VIEW&DOC_ID={{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}">Update</a> ]
<!--		 [ <a href="#" class="show_hide">Show/Hide</a> ] [ <a download="TDSSLIDE-{{.DOC_ID}}-{{.TITLE}}.ulapphSlide" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-{{.DOC_ID}}">Backup</a> ] [ <a href="/admin-articles?FUNC_CODE=DELETE&DOC_ID={{.DOC_ID}}&BLOB_URL={{.BLOB_URL}}" target="article-delete">Delete</a> ]
        <div class="slidingDiv">
		<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}"><img src="/static/img/viewer.png" height="40" width="40"></a><br>
		<a href="/presenter?TYPE=SLIDE&MODE=PRESENTER&PARM=AUTO&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/presenter.png" height="40" width="40"></a><br>
		<a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&GET_NEXT={{.GET_NEXT}}"  title="Play Slide & Next Slide{{.GET_NEXT}}"><img src="/static/img/play.png" height="40" width="40"></a><br>
		<a href="/social?TYPE=ARTICLE&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_URL}}&CATEGORY={{.CATEGORY}}"><img src="/static/img/social_icon.png" height="40" width="40"></a><br>
		<a href="/social" onclick="ULAPPH_QR.PopIn.show('/articles?SID=TDSSLIDE-{{.DOC_ID}}&DOC_ID={{.DOC_ID}}&CATEGORY={{.CATEGORY}}');return false;"><img src="/static/img/qr-icon.png" height="40" width="40"></a><br>
		<a href="/uloc?LS_FUNC=ARTICLE_COPY&DOC_ID={{.DOC_ID}}&SID=TDSARTL-{{.DOC_ID}}&TITLE={{.TITLE}}&IMG_SRC={{.TAGS}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSSLIDE-{{.DOC_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id">{{.DOC_ID}}</td>
	<td data-order="{{.YEAR}}">{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td data-order="{{.DOC_STAT}}">{{.DOC_STAT}}</td>	
	<td>{{.FL_SHARED}}</td>
	<!--td>{{.BLOB_URL}}</td-->
	<td data-order="{{.MUSIC_ID}}">{{.MUSIC_ID}}</td>
	<td data-order="{{.DT_UPLOAD}}">{{.DT_UPLOAD}}</td>
	<td data-order="{{.NUM_LIKES}}">{{.NUM_LIKES}}</td>
	<td data-order="{{.NUM_COMMENTS}}">{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
{{end}}
{{end}}
`
var mediaDispTemplateAdminSwfs = template.Must(template.New("mediaDispTemplateAdminRecs").Parse(mediaDispTemplateHTMLSwfs))
 
const mediaDispTemplateHTMLSwfs = `
	<tr>
	<td>
		<a href="{{.BLOB_KEY}}" target="{{.BLOB_KEY}}">
		<img src="{{.BLOB_KEY}}" height="100" width="100" style="padding-top:23px;" onmouseover="showtrail(800,500,'{{.BLOB_KEY}}=s800');" onmouseout="hidetrail();"></img></a><br>
		{{if eq .DATA_TYPE "image"}}<button onclick="copyToClipboard('#murl_{{.MEDIA_ID}}')">Copy IMG_URL</button> <button onclick="copyToSlides('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.DESC}}','{{.MEDIA_ID}}')">Include Me!</button>{{end}}
		{{if eq .DATA_TYPE "music"}}<button onclick="copyToSlides('{{.DATA_TYPE}}','/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.DESC}}')">Include Me!</button>{{end}}
		{{if eq .DATA_TYPE "video"}}<button onclick="copyToSlides('{{.DATA_TYPE}}','/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.DESC}}')">Include Me!</button>{{end}}
		{{if eq .DATA_TYPE "text"}}
		<button onclick="copyToUWM('{{.DATA_TYPE}}','/media?FUNC_CODE=RAWTEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
		{{else}}
		<button onclick="copyToUWM('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
		{{end}}
		
		<div id='murl_{{.MEDIA_ID}}s'></div><div id='iurl_{{.MEDIA_ID}}s'></div>
	</td>
	<td>
	    <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">{{.TITLE}}</a>
		<br>
		[ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a download="TDSARTL-{.MEDIA_ID}}-{{.TITLE}}.ulapphText" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSMEDIA-{.MEDIA_ID}}">Backup</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="media-delete">Delete</a> ]
<!--	    [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		{{if eq .DATA_TYPE "image"}}
		<a href="/uloc?LS_FUNC=MEDIA_IMAGE&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&IMG_SRC={{.IMG_URL}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
		{{else}}
		<a href="/uloc?LS_FUNC=MEDIA_TEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
		{{end}}
		{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSMEDIA-{{.MEDIA_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.PROP}} - {{.DATA_TYPE}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id" data-order="{{.MEDIA_ID}}">{{.MEDIA_ID}}</td>
	<td>{{.DOC_ID}}</td>
	<td>{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td>{{.FL_SHARED}}</td>
	<td>{{.DOC_STAT}}</td>
	<td id="murl_{{.MEDIA_ID}}">
		{{.IMG_URL}}
	</td>
	<td>{{.BLOB_KEY}}</td>
	<td>{{.DT_UPLOAD}}</td>
	<td>{{.NUM_LIKES}}</td>
	<td>{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
`
 
var mediaDispTemplateAdminRecs = template.Must(template.New("mediaDispTemplateAdminRecs").Parse(mediaDispTemplateHTMLRecs))
 
const mediaDispTemplateHTMLRecs = `
	<tr>
	<td>
		<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">
		<img src="{{.IMG_URL}}" height="100" width="100" style="padding-top:23px;" onmouseover="showtrail(800,500,'{{.IMG_URL}}=s800');" onmouseout="hidetrail();"></img></a><br>
		{{if eq .DATA_TYPE "image"}}<button onclick="copyToClipboard('#murl_{{.MEDIA_ID}}')">Copy IMG_URL</button> <button onclick="copyToSlides('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.DESC}}','{{.MEDIA_ID}}')">Include Me!</button>{{end}}
		{{if eq .DATA_TYPE "music"}}<button onclick="copyToSlides('{{.DATA_TYPE}}','/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.DESC}}')">Include Me!</button>{{end}}
		{{if eq .DATA_TYPE "video"}}<button onclick="copyToSlides('{{.DATA_TYPE}}','/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.DESC}}')">Include Me!</button>{{end}}
		{{if eq .DATA_TYPE "text"}}
		<button onclick="copyToUWM('{{.DATA_TYPE}}','/media?FUNC_CODE=RAWTEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
		{{else}}
		<button onclick="copyToUWM('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
		{{end}}
		
		<div id='murl_{{.MEDIA_ID}}s'></div><div id='iurl_{{.MEDIA_ID}}s'></div>
	</td>
	<td>
	    <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">{{.TITLE}}</a>
		<br>
		[ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a download="TDSARTL-{.MEDIA_ID}}-{{.TITLE}}.ulapphText" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSMEDIA-{.MEDIA_ID}}">Backup</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="media-delete">Delete</a> ]
<!--	    [ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
		{{if eq .DATA_TYPE "image"}}
		<a href="/uloc?LS_FUNC=MEDIA_IMAGE&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&IMG_SRC={{.IMG_URL}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
		{{else}}
		<a href="/uloc?LS_FUNC=MEDIA_TEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
		{{end}}
		{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		<a href="#" class="show_hide">Hide</a></div-->
	</td>
	<td>{{.DESC}} [TDSMEDIA-{{.MEDIA_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.PROP}} - {{.DATA_TYPE}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id" data-order="{{.MEDIA_ID}}">{{.MEDIA_ID}}</td>
	<td>{{.DOC_ID}}</td>
	<td>{{.YEAR}}</td>
	<td>{{.CATEGORY}}</td>
	<td>{{.FL_SHARED}}</td>
	<td>{{.DOC_STAT}}</td>
	<td id="murl_{{.MEDIA_ID}}">
		{{.IMG_URL}}
	</td>
	<td>{{.BLOB_KEY}}</td>
	<td>{{.DT_UPLOAD}}</td>
	<td>{{.NUM_LIKES}}</td>
	<td>{{.NUM_COMMENTS}}</td>
	<td>{{.LIKED_BY}}</td>
	<td>{{.COMMENTS_BY}}</td>
	<td>{{.NUM_VIEWS}}</td>
	</tr>
`
 
var mediaDispTemplateAdminRecsMobile = template.Must(template.New("mediaDispTemplateAdminRecsMobile").Parse(mediaDispTemplateHTMLRecsMobile))
 
const mediaDispTemplateHTMLRecsMobile = `
{{range .}}
	<tr>
	<td>
		<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}"><img src="{{.IMG_URL}}" height="100" width="100"></img></a><br>
		{{if eq .DATA_TYPE "image"}}<button onclick="copyToClipboard('#murl_{{.MEDIA_ID}}')">Copy IMG_URL</button> <button onclick="copyToSlides('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.DESC}}','{{.MEDIA_ID}}')">Include Me!</button>{{end}}
		{{if eq .DATA_TYPE "music"}}<button onclick="copyToSlides('{{.DATA_TYPE}}','/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.DESC}}')">Include Me!</button>{{end}}
		{{if eq .DATA_TYPE "text"}}
		<button onclick="copyToUWM('{{.DATA_TYPE}}','/media?FUNC_CODE=RAWTEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
		{{else}}
		<button onclick="copyToUWM('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
		{{end}}
		<div id='murl_{{.MEDIA_ID}}s'></div><div id='iurl_{{.MEDIA_ID}}s'></div>
	</td>
	<td>
	    <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">{{.TITLE}}</a>
		<br>
		[ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a download="TDSARTL-{.MEDIA_ID}}-{{.TITLE}}.ulapphText" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSMEDIA-{.MEDIA_ID}}">Backup</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="media-delete">Delete</a> ]
	    <br>
		{{if eq .DATA_TYPE "image"}}
		<a href="/uloc?LS_FUNC=MEDIA_IMAGE&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&IMG_SRC={{.IMG_URL}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
		{{else}}
		<a href="/uloc?LS_FUNC=MEDIA_TEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
		{{end}}
		{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
	</td>
	<td>{{.DESC}} [TDSMEDIA-{{.MEDIA_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
	<td>{{.PROP}} - {{.DATA_TYPE}}</td>
	<td>{{.AUTHOR}}</td>
	<td class="id"  data-order="{{.MEDIA_ID}}">{{.MEDIA_ID}}</td>
	</tr>
{{end}}
`
 
var mediaDispTemplateAdminRecs2 = template.Must(template.New("mediaDispTemplateAdminRecs2").Parse(mediaDispTemplateHTMLRecs2))
 
const mediaDispTemplateHTMLRecs2 = `
{{range .}}
	{{if eq .FL_SHARED "Y"}}
		<tr>
		<td>
			<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">
			<img src="{{.IMG_URL}}" height="100" width="100" style="padding-top:23px;" onmouseover="showtrail(800,500,'{{.IMG_URL}}=s800');" onmouseout="hidetrail();"></img></a><br>
			{{if eq .DATA_TYPE "image"}}<button onclick="copyToClipboard('#murl_{{.MEDIA_ID}}')">Copy IMG_URL</button> <button onclick="copyToSlides('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.DESC}}','{{.MEDIA_ID}}')">Include Me!</button>{{end}}
			{{if eq .DATA_TYPE "music"}}<button onclick="copyToSlides('{{.DATA_TYPE}}','/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.DESC}}')">Include Me!</button>{{end}}
			{{if eq .DATA_TYPE "text"}}
			<button onclick="copyToUWM('{{.DATA_TYPE}}','/media?FUNC_CODE=RAWTEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
			{{else}}
			<button onclick="copyToUWM('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
			{{end}}
			<div id='murl_{{.MEDIA_ID}}s'></div><div id='iurl_{{.MEDIA_ID}}s'></div>
		</td>
		<td>
			<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">{{.TITLE}}</a>
			<br>
			[ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a download="TDSARTL-{.MEDIA_ID}}-{{.TITLE}}.ulapphText" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSMEDIA-{.MEDIA_ID}}">Backup</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="media-delete">Delete</a> ]
<!--			[ <a href="#" class="show_hide">Show/Hide</a> ]
        <div class="slidingDiv">
			{{if eq .DATA_TYPE "image"}}
				<a href="/uloc?LS_FUNC=MEDIA_IMAGE&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&IMG_SRC={{.IMG_URL}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
			{{else}}
				<a href="/uloc?LS_FUNC=MEDIA_TEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
			{{end}}
			{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
			<a href="#" class="show_hide">Hide</a></div-->
		</td>
		<td>{{.DESC}} [TDSMEDIA-{{.MEDIA_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
		<td>{{.PROP}} - {{.DATA_TYPE}}</td>
		<td>{{.AUTHOR}}</td>
		<td class="id" data-order="{{.MEDIA_ID}}">{{.MEDIA_ID}}</td>
		<td>{{.DOC_ID}}</td>
		<td>{{.YEAR}}</td>
		<td>{{.CATEGORY}}</td>
		<td>{{.FL_SHARED}}</td>
		<td>{{.DOC_STAT}}</td>
		<td id="murl_{{.MEDIA_ID}}">
			{{.IMG_URL}}
		</td>
		<td>{{.BLOB_KEY}}</td>
		<td>{{.DT_UPLOAD}}</td>
		<td>{{.NUM_LIKES}}</td>
		<td>{{.NUM_COMMENTS}}</td>
		<td>{{.LIKED_BY}}</td>
		<td>{{.COMMENTS_BY}}</td>
		<td>{{.NUM_VIEWS}}</td>
		</tr>
	{{end}}
{{end}}
`
 
var mediaDispTemplateAdminRecs2Mobile = template.Must(template.New("mediaDispTemplateAdminRecs2Mobile").Parse(mediaDispTemplateHTMLRecs2Mobile))
 
const mediaDispTemplateHTMLRecs2Mobile = `
{{range .}}
	{{if eq .FL_SHARED "Y"}}
		<tr>
		<td>
			<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}"><img src="{{.IMG_URL}}" height="100" width="100"></img></a><br>
			{{if eq .DATA_TYPE "image"}}<button onclick="copyToClipboard('#murl_{{.MEDIA_ID}}')">Copy IMG_URL</button> <button onclick="copyToSlides('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.DESC}}','{{.MEDIA_ID}}')">Include Me!</button>{{end}}
			{{if eq .DATA_TYPE "music"}}<button onclick="copyToSlides('{{.DATA_TYPE}}','/media?FUNC_CODE=PLAY&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.DESC}}')">Include Me!</button>{{end}}
			{{if eq .DATA_TYPE "text"}}
			<button onclick="copyToUWM('{{.DATA_TYPE}}','/media?FUNC_CODE=RAWTEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
			{{else}}
			<button onclick="copyToUWM('{{.DATA_TYPE}}','{{.IMG_URL}}','{{.TITLE}}','TDSMEDIA-{{.MEDIA_ID}}')">UWM Me!</button>
			{{end}}
			<div id='murl_{{.MEDIA_ID}}s'></div><div id='iurl_{{.MEDIA_ID}}s'></div>
		</td>
		<td>
			<a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">{{.TITLE}}</a>
			<br>
			[ <a href="/media?FUNC_CODE=VIEW&MEDIA_ID={{.MEDIA_ID}}&DATA_TYPE={{.DATA_TYPE}}&TITLE={{.TITLE}}&BLOB_KEY={{.BLOB_KEY}}&IMG_URL={{.IMG_URL}}">Update</a> ] [ <a download="TDSARTL-{.MEDIA_ID}}-{{.TITLE}}.ulapphText" href="/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSMEDIA-{.MEDIA_ID}}">Backup</a> ] [ <a href="/media?FUNC_CODE=DELETE&MEDIA_ID={{.MEDIA_ID}}&BLOB_KEY={{.BLOB_KEY}}" target="media-delete">Delete</a> ]
			<br>
			{{if eq .DATA_TYPE "image"}}
				<a href="/uloc?LS_FUNC=MEDIA_IMAGE&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&IMG_SRC={{.IMG_URL}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
			{{else}}
				<a href="/uloc?LS_FUNC=MEDIA_TEXT&MEDIA_ID={{.MEDIA_ID}}&SID=TDSMEDIA-{{.MEDIA_ID}}&TITLE={{.TITLE}}"><img src="/static/img/uloc.png" width="40" height="40"></img></a><br>
			{{end}}
			{{if eq .SYS_VER 777}}<img src="/static/img/encrypted.png" width="40" height="40"></img>{{else}}{{if eq .SYS_VER 666}}<img src="/static/img/decrypted.png" width="40" height="40"></img>{{end}}{{end}}
		</td>
		<td>{{.DESC}} [TDSMEDIA-{{.MEDIA_ID}}] {{if eq .SYS_VER 777}}[ENCRYPTED]{{end}}</td>
		<td>{{.PROP}} - {{.DATA_TYPE}}</td>
		<td>{{.AUTHOR}}</td>
		<td class="id"  data-order="{{.MEDIA_ID}}">{{.MEDIA_ID}}</td>
		</tr>
	{{end}}
{{end}}
`
 
var iconsDispTemplateREC = template.Must(template.New("iconsDispTemplateREC").Parse(iconsDispTemplateHTMLREC))
 
const iconsDispTemplateHTMLREC = `
	<tr>
	<td>{{.SYS_VER}}</td>
	<td>{{.ICON_ID}}</td>
	<td>{{.URL_ID}}</td>
	<td>{{.URL_ADD}}</td>
	<td>{{.ICON_NAME}}</td>	
	<td>{{.IMG_SRC}}</td>
	<td>{{.DESKTOP}}</td>
	<td>{{.BLOB_KEY}}</td>
	</tr>
`
 
var iconsDispTemplate = template.Must(template.New("iconsDispTemplate").Parse(iconsDispTemplateHTML))
 
const iconsDispTemplateHTML = `
<html>
  <body>
  	<table>
	<thead>
	<tr>
	<th>SYS_VER</th>
	<th>ICON_ID</th>
	<th>URL_ID</th>
	<th>URL_ADD</th>
	<th>ICON_NAME</th>
	<th>IMG_SRC</th>
	<th>DESKTOP</th>
	<th>BLOB_KEY</th>
	</tr>
    {{range .}}
	<tr>
	<td>{{.SYS_VER}}</td>
	<td>{{.ICON_ID}}</td>
	<td>{{.URL_ID}}</td>
	<td>{{.URL_ADD}}</td>
	<td>{{.ICON_NAME}}</td>	
	<td>{{.IMG_SRC}}</td>
	<td>{{.DESKTOP}}</td>
	<td>{{.BLOB_KEY}}</td>
	</tr>
    {{end}}
	</table>
  </body>
</html>
`
 
//USERS processing logic
//very important logic for user validations, group checking etc
func usersProcessor(w http.ResponseWriter, r *http.Request, auth, USER_EMAIL_ID string, FUNC_CODE string) (FL_VALID_USER bool, GROUP_ID, FL_BILLED, USER_ACC_TYP string) {
    //log.Printf("usersProcessor()")
    //log.Printf("USER_EMAIL_ID: %v", USER_EMAIL_ID)
    //D0086
    //c := appengine.NewContext(r)
	if SYS_STATELESS_SERVER == true && USER_EMAIL_ID == ADMIN_ACCOUNT {
		return true, "GRP_USER", "N", ""
	}
	//D0116
	if SYS_NOREG_FIXED_USER != "" {
		return true, "GRP_USER", "N", ""
	}
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    datastoreClient := createClientDS()
	//get cached users
	usersProcessor_CACHE := ""
	usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", USER_EMAIL_ID)
	usersProcessor_CACHE = getStrMemcacheValueByKey(w,r,usersProcessor_CACHE_KEY)	
	//log.Printf("usersProcessor_CACHE: %v", usersProcessor_CACHE)
	if usersProcessor_CACHE != "" {
        //log.Printf("usersProcessor_CACHE: %v", usersProcessor_CACHE)
		//SYS_VER	USER	COMPANY_ID	CLOUD_NAME	GROUP_ID	LOGGED_IN	LAST_LOGIN	USER_ACC_OPT	FL_QUOTA	FL_BILLED	FL_WORK	FL_WF_ID USER_ACC_TYP
		SPL := strings.Split(usersProcessor_CACHE,",")
		//cSYS_VER := SPL[0]
		cUSER := SPL[1]
		//cCOMPANY_ID := SPL[2]
		//cCLOUD_NAME := SPL[3]
		cGROUP_ID := SPL[4]
		//cLOGGED_IN := SPL[5]
		//cLAST_LOGIN := SPL[6]
		cUSER_ACC_OPT := SPL[7]
		//cFL_QUOTA := SPL[8]
		cFL_BILLED := SPL[9]
		//cFL_WORK := SPL[10]
		//cFL_WF_ID := SPL[11]
		cUSER_ACC_TYP := SPL[12]
		
		if strings.ToLower(cUSER) == strings.ToLower(USER_EMAIL_ID) {
			//check if user is blocked
			if cUSER_ACC_OPT == "Blocked" {
				
				msgDtl := "[U00088] ERROR: Access has been blocked. Please contact administrator."
				msgTyp := "error"
				msgURL := "/"
				action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to proceed to ULAPPH public homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return FL_VALID_USER, cGROUP_ID, cFL_BILLED, cUSER_ACC_TYP	
			}
			if cUSER_ACC_OPT == "Pending" {
				msgDtl := "[U00089] ERROR: Access request is currently pending. Please wait for an email confirmation."
				msgTyp := "error"
				msgURL := "/"
				action := "U00089"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return FL_VALID_USER, cGROUP_ID, cFL_BILLED, cUSER_ACC_TYP	
			}
			FL_VALID_USER = true
			switch FUNC_CODE {
				case "VALUSER":
					//c := appengine.NewContext(r)
					//laterQueueStatsIncLoggedIn(c, USER_EMAIL_ID)
                    GROUP_ID = cGROUP_ID
				case "GET_GRP_ID":
					GROUP_ID = cGROUP_ID
				case "GET_FL_BILLED":
					FL_BILLED = cFL_BILLED
				case "GET_ACC_TYP":
					USER_ACC_TYP = cUSER_ACC_TYP
					
			}
		}
 
	} else {
		//retrieve from datastore
        //!!!errors when used key
        //log.Printf("retrieve from datastore")
		//log.Panicf("[S0531]")
		users := make([]TDSUSERS, 0, 1)
		if SYS_STATELESS_SERVER == true {
			users, _ = getBoltTDSUSERSByKey(w,r,USER_EMAIL_ID)
		} else {
			q := datastore.NewQuery("TDSUSERS").Filter("USER =", USER_EMAIL_ID).Limit(1)
			if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
				//update overquota flag
				checkError(w,r,"",err,"CHK_OQ")
				 //panic(err)
			  }
			  //log.Printf("datastoreClient.Get()  [64647]")
		}
		//log.Printf("users: %v", users)
		for _, p := range users{
				if strings.ToLower(p.USER) == strings.ToLower(USER_EMAIL_ID) && strings.TrimSpace(p.USER) != "" {
				
					//check if user is blocked
					if p.USER_ACC_OPT == "Blocked" {
						
						msgDtl := "[U00090] BLOCKED: Access has been blocked. Please contact administrator."
						msgTyp := "error"
						msgURL := "/"
						action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to ULAPPH public homepage.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return FL_VALID_USER, p.GROUP_ID, p.FL_BILLED, p.USER_ACC_TYP
					}
					if p.USER_ACC_OPT == "Pending" {
						msgDtl := "[U00091] PENDING: Access request is currently pending. Kindly check your email. Please contact administrator if you didn't receive an email confirmation in 24 hours."
						msgTyp := "warning"
						msgURL := "/"
						action := "U00091"
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return FL_VALID_USER, p.GROUP_ID, p.FL_BILLED, p.USER_ACC_TYP
					}
					FL_VALID_USER = true
					
					switch FUNC_CODE {
						case "VALUSER":
							//c := appengine.NewContext(r)
                            //laterQueueStatsIncLoggedIn(c, USER_EMAIL_ID)
                            GROUP_ID = p.GROUP_ID
						case "GET_GRP_ID":
							GROUP_ID = p.GROUP_ID
						case "GET_FL_BILLED":
							FL_BILLED = p.FL_BILLED
						case "GET_ACC_TYP":
							USER_ACC_TYP = p.USER_ACC_TYP
					}
					//cache user data first time
					var buffer3 bytes.Buffer
					//SYS_VER	USER	COMPANY_ID	CLOUD_NAME	GROUP_ID	LOGGED_IN	LAST_LOGIN	USER_ACC_OPT	FL_QUOTA	FL_BILLED	FL_WORK	FL_WF_ID
					//1	ulapph@gmail.com	BSIEDV	ULAPPH	GRP_ADMIN	1	20141110193058	Normal	Y	Y	Y	Y
					buffer3.WriteString(fmt.Sprintf("%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER,	p.USER,	p.COMPANY_ID,	p.CLOUD_NAME,	p.GROUP_ID,	p.LOGGED_IN,	p.LAST_LOGIN,	p.USER_ACC_OPT,	p.FL_QUOTA,	p.FL_BILLED,	p.FL_WORK,	p.FL_WF_ID, p.USER_ACC_TYP))
					TDSUSER_CACHE := buffer3.String()
					//uid := p.USER
					putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,TDSUSER_CACHE)
					//
					break
		
				} else {
					continue
				}
				
		}
	}
    //log.Printf("FL_VALID_USER: %v", FL_VALID_USER)
    //log.Printf("GROUP_ID: %v", GROUP_ID)
    //log.Printf("USER_ACC_TYP: %v", USER_ACC_TYP)
    return FL_VALID_USER, GROUP_ID, FL_BILLED, USER_ACC_TYP
	
}
 
//TASK MEMCACHER USERS processing logic
func TASK_MEMCACHER_usersProcessor(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}	
 
	//uid := ""
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
 
	q := datastore.NewQuery("TDSUSERS").Order("USER")
	//log.Panicf("[S0532]")
	CURR_COUNT,_ := datastoreClient.Count(c,q)
 
	users := make([]TDSUSERS, 0, CURR_COUNT)
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [64738]")
	for _, p := range users{
			if strings.TrimSpace(p.USER) != "" {
				//cache user data first time
				var buffer3 bytes.Buffer
				//SYS_VER	USER	COMPANY_ID	CLOUD_NAME	GROUP_ID	LOGGED_IN	LAST_LOGIN	USER_ACC_OPT	FL_QUOTA	FL_BILLED	FL_WORK	FL_WF_ID
				//1	ulapph@gmail.com	BSIEDV	ULAPPH	GRP_ADMIN	1	20141110193058	Normal	Y	Y	Y	Y
				buffer3.WriteString(fmt.Sprintf("%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER,	p.USER,	p.COMPANY_ID,	p.CLOUD_NAME,	p.GROUP_ID,	p.LOGGED_IN,	p.LAST_LOGIN,	p.USER_ACC_OPT,	p.FL_QUOTA,	p.FL_BILLED,	p.FL_WORK,	p.FL_WF_ID, p.USER_ACC_TYP))
				TDSUSER_CACHE := buffer3.String()
				usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_CACHE_%s", p.USER)
				//uid = p.USER
				putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,TDSUSER_CACHE)
				fmt.Fprintf(w, "USER: %s<br>",  p.USER)
				fmt.Fprintf(w, "usersProcessor_CACHE_KEY: %v<br>", usersProcessor_CACHE_KEY)
				fmt.Fprintf(w, "TDSUSER_CACHE: %v<br>", TDSUSER_CACHE)
			}
			
	}
	
	//update total users
	usersProcessor_CACHE_KEY2 := fmt.Sprintf("usersProcessor_CACHE_TOTAL_USERS")
	recCount2 := fmt.Sprintf("%v",CURR_COUNT)
	putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY2,recCount2)
	fmt.Fprintf(w, "TOTAL USERS: %v<br>",  CURR_COUNT)
	
}
 
//homeProcessor for displaying recent os, user, browsers etc
func homeProcessor(w http.ResponseWriter, r *http.Request) (OnlineUsers int, MOST_RECENT_1, MOST_RECENT_2, MOST_RECENT_3, MOST_ACTIVE_1, MOST_ACTIVE_2, MOST_ACTIVE_3, MOST_POPULAR_1, MOST_POPULAR_2, MOST_POPULAR_3, MOST_OS_1, MOST_OS_2, MOST_OS_3, MOST_BROWSER_1, MOST_BROWSER_2, MOST_BROWSER_3 string) {
        //c := appengine.NewContext(r)
        c, cancel := context.WithCancel(context.Background())
        defer cancel()
        //D0086
        datastoreClient := createClientDS()
		//retrieve current users online
		q := datastore.NewQuery("TDSSTATS").Order("STAT_NAME")
		//log.Panicf("[S0533]")
		recCount,_ := datastoreClient.Count(c,q)
		stats := make([]TDSSTATS, 0, recCount)
		if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
			//check overquota error
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
 
		  }
		//log.Printf("datastoreClient.Get()  [64782]")
		for _, p := range stats{
				if p.STAT_NAME == "TOT_ONLINE" {
					//numOnlineUsers = p.VAL_NUM
					if p.VAL_NUM >= maxBubblesOnline {
						OnlineUsers = maxBubblesOnline
					} else {
						OnlineUsers = p.VAL_NUM
					}
					break
				}
				if p.STAT_NAME == "MOST_RECENT_1" {
					MOST_RECENT_1 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_RECENT_2" {
					MOST_RECENT_2 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_RECENT_3" {
					MOST_RECENT_3 = p.VAL_TXT
					//break
				}
				if p.STAT_NAME == "MOST_ACTIVE_1" {
					MOST_ACTIVE_1 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_ACTIVE_2" {
					MOST_ACTIVE_2 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_ACTIVE_3" {
					MOST_ACTIVE_3 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_POPULAR_1" {
					MOST_POPULAR_1 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_POPULAR_2" {
					MOST_POPULAR_2 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_POPULAR_3" {
					MOST_POPULAR_3 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_OS_1" {
					MOST_OS_1 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_OS_2" {
					MOST_OS_2 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_OS_3" {
					MOST_OS_3 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_BROWSER_1" {
					MOST_BROWSER_1 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_BROWSER_2" {
					MOST_BROWSER_2 = p.VAL_TXT
				}
				if p.STAT_NAME == "MOST_BROWSER_3" {
					MOST_BROWSER_3 = p.VAL_TXT
				}
		}
		
		//update memcache
		
		
		return OnlineUsers,
		MOST_RECENT_1,
		MOST_RECENT_2,
		MOST_RECENT_3,
		MOST_ACTIVE_1,
		MOST_ACTIVE_2,
		MOST_ACTIVE_3,
		MOST_POPULAR_1,
		MOST_POPULAR_2,
		MOST_POPULAR_3,
		MOST_OS_1,
		MOST_OS_2,
		MOST_OS_3,
		MOST_BROWSER_1,
		MOST_BROWSER_2,
		MOST_BROWSER_3
}
 
//get Ads and display the ads found via iframe
func getAds(w http.ResponseWriter, r *http.Request, FUNC_ID string, ADS_ID int, DESKTOP string, ruleNum int, xCountry, xRegion, xCity string) (FL_ADS_FOUND bool) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    _, uid := checkSession(w,r)
	if uid == "" {
		uid = "guest"
	}
	uReferer := r.Referer()
	
		switch FUNC_ID {
			case "AD1":
 
					if err := adsTemplate1FRAME.Execute(w, DESKTOP); err != nil {
						 panic(err)
					}
					FL_ADS_FOUND = true
 
			case "AD2":
					if err := adsTemplate2FRAME.Execute(w, DESKTOP); err != nil {
						 panic(err)
					}
					FL_ADS_FOUND = true
			case "AD3":
					if err := adsTemplate3FRAME.Execute(w, DESKTOP); err != nil {
						 panic(err)
					}
					FL_ADS_FOUND = true
			case "AD1M":
					if err := adsTemplate1Mobile.Execute(w, DESKTOP); err != nil {
						 panic(err)
					}
					FL_ADS_FOUND = true
			case "AD2M":
					if err := adsTemplate2Mobile.Execute(w, DESKTOP); err != nil {
						 panic(err)
					}
					FL_ADS_FOUND = true
			case "AD3M":
					if err := adsTemplate3Mobile.Execute(w, DESKTOP); err != nil {
						 panic(err)
					}
					FL_ADS_FOUND = true
		}
	
	//log task to log access to ads
	adsID := fmt.Sprintf("%d", ADS_ID)
	ruleNumStr := fmt.Sprintf("%d", ruleNum)
 
	//ipAdd := strings.Split(r.RemoteAddr,":")[0]
	ipAdd := getIpAdd(w,r)
	//fmt.Fprintf(w, "ipAdd: %v", ipAdd)
	uag := r.UserAgent()
	ua := user_agent.New(uag)
	uaPlatform := ua.OS()
	nameb, _ := ua.Browser()
	time.AfterFunc(5*time.Second, func() {
        laterQueueAdsLogViews(c, adsID, uid, DESKTOP, ruleNumStr, xCountry, xRegion, xCity, uaPlatform, nameb, uReferer, ipAdd)
	})
	return FL_ADS_FOUND
}
 
//get a random ads and returns the details about the ad
func getAds2(w http.ResponseWriter, r *http.Request, FUNC_ID string, ADS_ID int, DESKTOP string, xCountry, xRegion, xCity, PLATFORM, BROWSER, uReferer string) (FL_ADS_FOUND bool, ADS_TYP, IMG_URL, ADS_LINK, ADS_DEST, ADS_TITLE string) {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //u := user.Current(c)
    h := r.Header
    //D0086
    datastoreClient := createClientDS()
	uid := ""
	if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
		xCountry := h.Get("X-AppEngine-Country")
		xRegion  := h.Get("X-AppEngine-Region")
		xCity    := h.Get("X-AppEngine-City")
		//uid = randSeq2(36)
		uid = fmt.Sprintf("%s.%s.%s.%v", xCountry, xRegion, xCity, randSeq2(36))
	}else{
		//uid = uid
		_, uid = checkSession(w,r)
	}
	uReferer = html.EscapeString(uReferer)
	
	//check for cached ADS_ID details
	FL_FOUND_ADS_ID_CACHE := false
	//get memcached advertisement
	ADS_ID_CACHE := ""
	ADS_ID_CACHE_KEY := fmt.Sprintf("ADS_ID_CACHE_%v", ADS_ID)
	//cADS_CLICK := ""
	//cADS_ID := ""
	cADS_IMG := ""
	//cADS_PUB_ID := ""	
	//cADS_SIZE := ""
	//cADS_STATUS := ""	
	cADS_TITLE := ""	
	cADS_TYP := ""
	cADS_URL := ""	
	//cADS_VAL_END := ""	
	//cADS_VAL_START := ""
	//cADS_VIEW	 := ""
	//cBLOB_KEY	 := ""
	//cCATEGORY	 := ""
	//cSYS_VER := ""	
	//cUPLOAD_BY := ""	
	//cUPLOAD_DATE := ""
 
	ADS_ID_CACHE = getStrMemcacheValueByKey(w,r,ADS_ID_CACHE_KEY)
	
	if ADS_ID_CACHE != "" {
		// 0 ADS_CLICK
		// 1 ADS_ID	
		// 2 ADS_IMG	
		// 3 ADS_PUB_ID	
		// 4 ADS_SIZE	
		// 5 ADS_STATUS	
		// 6 ADS_TITLE	
		// 7 ADS_TYP	
		// 8 ADS_URL	
		// 9 ADS_VAL_END	
		// 10 ADS_VAL_START	
		// 11 ADS_VIEW	
		// 12 BLOB_KEY	
		// 13 CATEGORY	
		// 14 SYS_VER	
		// 15 UPLOAD_BY	
		// 16 UPLOAD_DATE
		FL_FOUND_ADS_ID_CACHE = true
		SPL := strings.Split(ADS_ID_CACHE,",")
		//cADS_CLICK = SPL[0]
		//cADS_ID = SPL[1]	
		cADS_IMG = SPL[2]	
		//cADS_PUB_ID = SPL[3]	
		//cADS_SIZE = SPL[4]	
		//cADS_STATUS = SPL[5]	
		cADS_TITLE = SPL[6]	
		cADS_TYP = SPL[7]	
		cADS_URL = SPL[8]	
		//cADS_VAL_END = SPL[9]	
		//cADS_VAL_START = SPL[10]	
		//cADS_VIEW	 = SPL[11]
		//cBLOB_KEY	 = SPL[12]
		//cCATEGORY	 = SPL[13]
		//cSYS_VER = SPL[14]	
		//cUPLOAD_BY = SPL[15]	
		//cUPLOAD_DATE = SPL[16]
		
	}	
	
	if FL_FOUND_ADS_ID_CACHE == false {
		dsKey := fmt.Sprintf("%s.%d", CLOUD_NAME, ADS_ID)
		key := datastore.NameKey("TDSADS", dsKey, nil)
		q := datastore.NewQuery("TDSADS").Filter("__key__ =", key)
		//log.Panicf("[S0536]")
		ads := make([]TDSADS, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &ads); err != nil {
			 panic(err)
		  }
		//log.Printf("datastoreClient.Get()  [65021]")
		for _, p := range ads{
		
			switch FUNC_ID {
				case "AD1":
					if p.ADS_IMG != "" {
 
						ADS_TYP = p.ADS_TYP
						IMG_URL = p.ADS_IMG
						ADS_LINK = fmt.Sprintf("/click-ads/?uid=%s&ADS_TITLE=%v&URL_ADD=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", uid, p.ADS_TITLE, html.EscapeString(p.ADS_URL), ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, html.EscapeString(uReferer))
						//ADS_DEST = p.ADS_URL
						ADS_DEST = fmt.Sprintf("%v@888@uid=%s&ADS_TITLE=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", p.ADS_URL, uid, p.ADS_TITLE, ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, uReferer)
						ADS_TITLE = p.ADS_TITLE
						FL_ADS_FOUND = true
						break
					}
				case "AD2":
					if p.ADS_IMG != "" {
						ADS_TYP = p.ADS_TYP
						IMG_URL = p.ADS_IMG
						ADS_LINK = fmt.Sprintf("/click-ads/?uid=%s&ADS_TITLE=%v&URL_ADD=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", uid, p.ADS_TITLE, html.EscapeString(p.ADS_URL), ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, html.EscapeString(uReferer))
						//ADS_DEST = p.ADS_URL
						ADS_DEST = fmt.Sprintf("%v@888@uid=%s&ADS_TITLE=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", p.ADS_URL, uid, p.ADS_TITLE, ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, uReferer)
						ADS_TITLE = p.ADS_TITLE
						FL_ADS_FOUND = true
						break
					}
				case "AD3":
					if p.ADS_IMG != "" {
						ADS_TYP = p.ADS_TYP
						IMG_URL = p.ADS_IMG
						ADS_LINK = fmt.Sprintf("/click-ads/?uid=%s&ADS_TITLE=%v&URL_ADD=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", uid, p.ADS_TITLE, html.EscapeString(p.ADS_URL), ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, html.EscapeString(uReferer))
						//ADS_DEST = p.ADS_URL
						ADS_DEST = fmt.Sprintf("%v@888@uid=%s&ADS_TITLE=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", p.ADS_URL, uid, p.ADS_TITLE, ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, uReferer)
						ADS_TITLE = p.ADS_TITLE
						FL_ADS_FOUND = true
						break
					}
			}
 
		//update cache for next query
		// 0 ADS_CLICK
			// 1 ADS_ID	
			// 2 ADS_IMG	
			// 3 ADS_PUB_ID	
			// 4 ADS_SIZE	
			// 5 ADS_STATUS	
			// 6 ADS_TITLE	
			// 7 ADS_TYP	
			// 8 ADS_URL	
			// 9 ADS_VAL_END	
			// 10 ADS_VAL_START	
			// 11 ADS_VIEW	
			// 12 BLOB_KEY	
			// 13 CATEGORY	
			// 14 SYS_VER	
			// 15 UPLOAD_BY	
			// 16 UPLOAD_DATE
 
			var buffer3 bytes.Buffer
			buffer3.WriteString(fmt.Sprintf("%v,%v,%v,%v,%v,%v,%v,%v,%v,%v,%v,%v,%v,%v,%v,%v,%v",
						p.ADS_CLICK,	
						p.ADS_ID,	
						p.ADS_IMG,	
						p.ADS_PUB_ID,	
						p.ADS_SIZE,	
						p.ADS_STATUS,	
						p.ADS_TITLE,	
						p.ADS_TYP,	
						p.ADS_URL,	
						p.ADS_VAL_END,	
						p.ADS_VAL_START,	
						p.ADS_VIEW,	
						p.BLOB_KEY,	
						p.CATEGORY,	
						p.SYS_VER,	
						p.UPLOAD_BY,	
						p.UPLOAD_DATE))
			
			ADS_ID_CACHE := buffer3.String()
			//ADS_ID_CACHE_KEY := fmt.Sprintf("ADS_ID_CACHE_%v", ADS_ID)
			putStrToMemcacheWithoutExp(w,r,ADS_ID_CACHE_KEY,ADS_ID_CACHE)
		}
		
	} else {
		//get details from cached data
		switch FUNC_ID {
			case "AD1":
				if cADS_IMG != "" {
					ADS_TYP = cADS_TYP
					IMG_URL = cADS_IMG
					ADS_LINK = fmt.Sprintf("/click-ads/?uid=%s&ADS_TITLE=%v&URL_ADD=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", uid,cADS_TITLE,html.EscapeString(cADS_URL), ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, html.EscapeString(uReferer))
					//ADS_DEST = cADS_URL
					ADS_DEST = fmt.Sprintf("%v@888@uid=%s&ADS_TITLE=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", cADS_URL, uid,cADS_TITLE, ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, uReferer)
					ADS_TITLE = cADS_TITLE
					FL_ADS_FOUND = true
					break
				}
			case "AD2":
				if cADS_IMG != "" {
					ADS_TYP = cADS_TYP
					IMG_URL = cADS_IMG
					ADS_LINK = fmt.Sprintf("/click-ads/?uid=%s&ADS_TITLE=%v&URL_ADD=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", uid,cADS_TITLE,html.EscapeString(cADS_URL), ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, html.EscapeString(uReferer))
					//ADS_DEST = cADS_URL
					ADS_DEST = fmt.Sprintf("%v@888@uid=%s&ADS_TITLE=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", cADS_URL, uid,cADS_TITLE, ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, uReferer)
					ADS_TITLE = cADS_TITLE
					FL_ADS_FOUND = true
					break
				}
			case "AD3":
				if cADS_IMG != "" {
					ADS_TYP = cADS_TYP
					IMG_URL = cADS_IMG
					ADS_LINK = fmt.Sprintf("/click-ads/?uid=%s&ADS_TITLE=%v&URL_ADD=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", uid, cADS_TITLE, cADS_URL, ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, uReferer)
					//ADS_DEST = cADS_URL
					ADS_DEST = fmt.Sprintf("%v@888@uid=%s&ADS_TITLE=%v&ADS_ID=%d&DESKTOP=%s&COUNTRY=%s&REGION=%s&CITY=%s&PLATFORM=%v&BROWSER=%v&REFERER=%v", html.EscapeString(cADS_URL), uid,cADS_TITLE, ADS_ID, DESKTOP, xCountry, xRegion, xCity, PLATFORM, BROWSER, html.EscapeString(uReferer))
					ADS_TITLE = cADS_TITLE
					FL_ADS_FOUND = true
					break
				}
		}	
	
	}
	
	return FL_ADS_FOUND, ADS_TYP, IMG_URL, ADS_LINK, ADS_DEST, ADS_TITLE
}
 
//handles actions when clicked-ads
func handleClickAds(w http.ResponseWriter, r *http.Request) {
	
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //u := user.Current(c)
     //D0086
    datastoreClient := createClientDS()

	var buffer bytes.Buffer
	
	uReferer := r.Referer()
	UID := r.FormValue("uid")
	uid := ""
	
	if UID == "" {
		if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
			//uid = uid
			_, uid = checkSession(w,r)
		} else {
			uid = "guest-user"
		}
	} else {
		uid = fmt.Sprintf("%v",UID)
	}
	
	AD_SRC := r.FormValue("AD_SRC")
	adsID := ""
	desktop := ""
	thisAdID := 0
	RULE_NUM_STR := ""
	thisRulNum := 0
	URL_ADD := ""
	ADS_TITLE := ""
	COUNTRY := ""
	REGION := ""
	CITY := ""
	PLATFORM := ""
	BROWSER := ""
	ipAdd := ""
		
	if AD_SRC != "R" {		
		adsID = r.FormValue("ADS_ID")
		desktop = r.FormValue("DESKTOP")
		thisAdID = str2int(adsID)
		RULE_NUM_STR = r.FormValue("RULE_NUM_STR")
		thisRulNum = str2int(RULE_NUM_STR)
		URL_ADD = r.FormValue("URL_ADD")
		ADS_TITLE = r.FormValue("ADS_TITLE")
		COUNTRY = r.FormValue("COUNTRY")
		REGION = r.FormValue("REGION")
		CITY = r.FormValue("CITY")
		PLATFORM = r.FormValue("PLATFORM")
		BROWSER = r.FormValue("BROWSER")
		//ipAdd = strings.Split(r.RemoteAddr,":")[0]
		ipAdd = getIpAdd(w,r)
		uReferer = html.UnescapeString(r.FormValue("REFERER"))
	} else {
		//if add is responsive from media gallery text file
		z, err := url.Parse(uReferer)
		if err != nil {
			panic(err)
		}
		//path := z.Path
		m, _ := url.ParseQuery(z.RawQuery)
		//duser = m["user"][0]
		//adsID := r.FormValue("ADS_ID")
		adsID = m["ADS_ID"][0]
		//desktop := r.FormValue("DESKTOP")
		desktop = m["DESKTOP"][0]
		thisAdID = str2int(adsID)
		//RULE_NUM_STR := r.FormValue("RULE_NUM_STR")
		//RULE_NUM_STR = m["RULE_NUM_STR"][0]
		RULE_NUM_STR = "0"
		thisRulNum = str2int(RULE_NUM_STR)
		//URL_ADD := r.FormValue("URL_ADD")
		//URL_ADD = m["URL_ADD"][0]
		URL_ADD = r.FormValue("URL_ADD")
		//ADS_TITLE := r.FormValue("ADS_TITLE")
		ADS_TITLE = m["ADS_TITLE"][0]
		//COUNTRY := r.FormValue("COUNTRY")
		COUNTRY = m["COUNTRY"][0]
		//REGION := r.FormValue("REGION")
		REGION = m["REGION"][0]
		//CITY := r.FormValue("CITY")
		CITY = m["CITY"][0]
		//PLATFORM := r.FormValue("PLATFORM")
		PLATFORM = m["PLATFORM"][0]
		//BROWSER := r.FormValue("BROWSER")
		BROWSER = m["BROWSER"][0]
		//ipAdd = strings.Split(r.RemoteAddr,":")[0]
		ipAdd = getIpAdd(w,r)
		uReferer = html.UnescapeString(m["REFERER"][0])
	}
	
	//uReferer := html.UnescapeString(r.FormValue("REFERER"))
	//parse page accessed
	z, err := url.Parse(uReferer)
	if err != nil {
		panic(err)
	}
	path := z.Path

	//rt := time.Now().Local()
	//timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
	timestamp := getTimestamp()
	currTimestamp := str2int(timestamp)
	
		
		p := TDSADVL{
				SYS_VER: 1,	
				ADS_ID: thisAdID,
				ADS_EVENT:  "CLICK",	
				EVENT_TSTMP:  currTimestamp,
				DESKTOP: desktop,	
				COUNTRY: COUNTRY,	
				REGION:  REGION,		
				CITY:  CITY	,
				UID_ENCRYPTED:  uid,	
				RULE_NUM:  thisRulNum,
				PLATFORM:  PLATFORM,
				BROWSER:  BROWSER,
				URL_PATH:  path,
				URL_DATA:  getSchemeUrl(w,r),
				IP_ADDRESS: ipAdd,
		
		}
		ukey := fmt.Sprintf("%d.%s.%d", thisAdID, p.ADS_EVENT, currTimestamp)
		key := datastore.NameKey("TDSADVL", ukey, nil)
		if _, err := datastoreClient.Put(c, key, &p); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Put()  [65281]")
		//log.Panicf("[S0537]")
		buffer.WriteString(fmt.Sprintf("[AD-CLICKED] AD#%v WAS CLICKED BY %v, DESKTOP: %v, COUNTRY: %v, CITY: %v, RULENUM: %d, PLATFORM: %v, BROWSER: %v, TIMESTAMP: %v, IP_ADDRESS: %v", thisAdID, uid, desktop, COUNTRY, CITY, thisRulNum, PLATFORM, BROWSER, currTimestamp, ipAdd))
		SYSMSGS := buffer.String()
		SENDADSEVENT(c, ADSMAIL, SYSMSGS, uid)
		
		//convert @888@ to &

		URL_ADD_D := strings.Replace(URL_ADD, "@888@", "&", -1)

		if URL_ADD_D == "" {
			URL_ADD_D = URL_ADD
		}
		
		//notify all users of this event via channels
		ipAdd = getIpAdd(w,r)
		geoStr := getGeoString(w,r)
		uid = fmt.Sprintf("%v-%v@%v", uid, geoStr, ipAdd)
		msgDtl3 := fmt.Sprintf("UID:%v has clicked an advertisement %v in %v <a href=\"%v\">%v</a>.", uid, thisAdID, domRefMatchS, URL_ADD_D, ADS_TITLE)
		msgDtl3b := fmt.Sprintf("UID:%v has clicked an advertisement [%v] [%v] [%v] [%v] [%v].", uid, thisAdID, domRefMatchS, URL_ADD_D, ADS_TITLE, path)
		data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ADVERTISEMENT", msgDtl3b)
		ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
		ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
		sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/click-ads",""),"")
		
		http.Redirect(w, r, URL_ADD_D, http.StatusFound)
		return			
		//break
		
}
 
//handles actions when clicked-url
func handleClickUrl(w http.ResponseWriter, r *http.Request) {
	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//h := r.Header
	//u := user.Current(c)
	
	uReferer := r.Referer()
	sl := strings.Split(uReferer, "/")
	currDesktop := sl[len(sl)-1]
	if currDesktop == "" {
		currDesktop = "Home"
	}
	////u := user.Current(c)
	uid := ""
	if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		//uid = uid
		_, uid = checkSession(w,r)
	} else {
		uid = getGeoString(w,r)
	}
	
	iconID := r.FormValue("ICON_ID")
	ICON_ID := str2int(iconID)
	ICON_NAME := r.FormValue("ICON_NAME")
	//desktop := r.FormValue("DESKTOP")
	URL_ADD := r.FormValue("URL_ADD")
	//CACHE_KEY := r.FormValue("CACHE_KEY")
	URL_TYP := r.FormValue("URL_TYP")
	DISP_TYP := r.FormValue("DISP_TYP")
	//REC_TYPE := "NEW"

	if iconID == "" ||  URL_ADD == "" {
		return
	}
	timestamp := getTimestamp()
				
		p := TDSURLC{
			SYS_VER: 1,	
			CACHE_KEY: "NULL",	
			ICON_ID: ICON_ID,	
			URL_ADD: URL_ADD,
			TOT_CKS: 1,
			URL_TYP: URL_TYP,
			DISP_TYP: DISP_TYP,	
			DESKTOP: currDesktop,
			LAST_CLICK: timestamp,
			REC_TYPE: "NEW",
			UID: uid,
		}

		//ukey := fmt.Sprintf("%d.%s.%d", ICON_ID, p.REC_TYPE, currTimestamp)
		urlKey := fmt.Sprintf("%s.%s.%d.%s", p.UID, p.REC_TYPE, p.ICON_ID, timestamp)
		key := datastore.NameKey("TDSURLC", urlKey, nil)
		if _, err := datastoreClient.Put(c, key, &p); err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Put()  [65373]")
		//log.Panicf("[S0538]")

		//notify all users of this event via channels
		shareMe := fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"%v\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", ICON_NAME, ShortenUrl(w,r,URL_ADD), ICON_NAME)
		msgDtl3 := fmt.Sprintf("UID:%v has visited <a href=\"%v\">%v</a> %v LINK: %v from %v", uid, URL_ADD, ICON_NAME, shareMe, URL_ADD, uReferer)
		msgDtl3b := fmt.Sprintf("UID:%v has visited [%v] [%v] LINK: [%v]", uid, URL_ADD, ICON_NAME, URL_ADD)
		data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "WEBSITE", msgDtl3b)
		ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
		sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/click-url",""),"")
		http.Redirect(w, r, URL_ADD, http.StatusFound)
		return
} 
var adsTemplate1FRAME = template.Must(template.New("adsTemplate1FRAME").Parse(adsTemplateHTML1FREE))
 
const adsTemplateHTML1FREE = `
<div id="finder" class="window finder">
 <nav class="control-window">
    <a href="#finder" class="close" data-rel="close">close</a>
    <a href="#" class="minimize">minimize</a>
    <a href="#" class="deactivate">deactivate</a>
    </nav>
    <h1 class="title-mac">Window</h1>
    <div class="container">
		<iframe src="/rag?d={{.}}&n=1&f=floatd" width=295 height=295 scrolling="no"></iframe>
    </div>
</div>
`
 
var adsTemplate1Mobile = template.Must(template.New("adsTemplate1Mobile").Parse(adsTemplateHTML1Mobile))
 
const adsTemplateHTML1Mobile = `
<div id="finder" class="window finder">
    <h3 class="titleInside">Advertisement</h3>
    <div class="container">
		<iframe src="/rag?d={{.}}&n=1&f=" width=295 height=295 scrolling="no"></iframe>
    </div>
</div>
`
 
 
var adsTemplate2FRAME = template.Must(template.New("adsTemplate2FRAME").Parse(adsTemplateHTML2FRAME))
 
const adsTemplateHTML2FRAME = `
<div id="about-this-cd" class="window mac">
 <nav class="control-window">
    <a href="#about-this-cd" class="close" data-rel="close">close</a>
    <a href="#" class="deactivate">deactivate</a>
    <a href="#" class="deactivate">deactivate</a>
    </nav>
    <h1 class="title-mac">Window</h1>
    <div class="container">
		<iframe src="/rag?d={{.}}&n=2&f=floatd" width=295 height=295 scrolling="no"></iframe>
    </div>
</div>
`
 
var adsTemplate2Mobile = template.Must(template.New("adsTemplate2Mobile").Parse(adsTemplateHTML2Mobile))
 
const adsTemplateHTML2Mobile = `
<div id="about-this-cd" class="window mac">
    <h3 class="titleInside">Advertisement</h3>
    <div class="container">
		<iframe src="/rag?d={{.}}&n=2&f=" width=295 height=295 scrolling="no"></iframe>
    </div>
</div>
`
 
var adsTemplate3FRAME = template.Must(template.New("adsTemplate3FRAME").Parse(adsTemplateHTML3FRAME))
 
const adsTemplateHTML3FRAME = `
<div id="finder" class="window spec">
    <h1 class="title-mac">Window</h1>
    <div class="container">
		<iframe src="/rag?d={{.}}&n=3&f=floatd" width=295 height=295 scrolling="no"></iframe>
    </div>
</div>
`
 
var adsTemplate3Mobile = template.Must(template.New("adsTemplate3Mobile").Parse(adsTemplateHTML3Mobile))
 
const adsTemplateHTML3Mobile = `
<div id="finder" class="window spec">
    <h3 class="titleInside">Advertisement</h3>
    <div class="container">
		<iframe src="/rag?d={{.}}&n=3&f=" width=295 height=295 scrolling="no"></iframe>
    </div>
</div>
`
 
var dockStartTemplate = template.Must(template.New("dockStartTemplate").Parse(dockStartTemplateHTML))
 
const dockStartTemplateHTML = `
<div id="udock" class="dock">
 <ul>
`
//check if icon/URL exists to prevent dup icons upload
func getIconDtls(w http.ResponseWriter, r *http.Request, FUNC_CODE string, ICON_ID int, URL_ADD string) (FL_ICON_EXISTS bool, ICON_ID_R int, URL_ADD_R string, ICON_NAME_R string, IMG_URL_R string) {
	//log.Printf("getIconDtls()")
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0086
    datastoreClient := createClientDS()
	FL_ICON_EXISTS = false
	
	switch FUNC_CODE {
		case "GET_ICON_ID":
			if URL_ADD == "" {
				msgDtl := fmt.Sprintf("[U00094] ERROR: func getIconDtls() FUNC_CODE: %v needs %v populated properly.", FUNC_CODE, URL_ADD)
				msgTyp := "error"
				msgURL := "/?q=home"
				action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
			q := datastore.NewQuery("TDSICONS").Filter("URL_ADD =", URL_ADD).Limit(1)
			//log.Panicf("[S0539]")
			icons := make([]TDSICONS, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				 panic(err)
			}
			//log.Printf("datastoreClient.Get()  [65497]")
			for _, x := range icons {
				FL_ICON_EXISTS = true
				ICON_ID_R = x.ICON_ID
			}
			//log.Printf("getIconDtls(): GET_ICON_ID: FL_ICON_EXISTS: %v", FL_ICON_EXISTS)
			
		case "GET_ALL":
			if ICON_ID <= 0 {
				msgDtl := fmt.Sprintf("[U00095] ERROR: func getIconDtls() FUNC_CODE: %v needs %v populated properly.", FUNC_CODE, ICON_ID)
				msgTyp := "error"
				msgURL := "/?q=home"
				action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
			dsKey := fmt.Sprintf("ICON[%d]", ICON_ID)
			key := datastore.NameKey("TDSICONS", dsKey, nil)
			q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
			//log.Panicf("[S0540]")
			icons := make([]TDSICONS, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
				 panic(err)
			}
			//log.Printf("datastoreClient.Get()  [65521]")
			for _, x := range icons {
				FL_ICON_EXISTS = true
				URL_ADD_R = x.URL_ADD
				ICON_NAME_R = x.ICON_NAME
				IMG_URL_R = x.IMG_SRC
			}
			//log.Printf("getIconDtls(): GET_ALL: FL_ICON_EXISTS: %v", FL_ICON_EXISTS)
	
	}
	
	return FL_ICON_EXISTS, ICON_ID_R, URL_ADD_R, ICON_NAME_R, IMG_URL_R
}	
 
 
//get ICONS custom
func getIcons(w http.ResponseWriter, r *http.Request, c context.Context, USER_EMAIL_ID string, deskName string) (FL_CUSTOM_ICONS bool, iconsHTML string) {
	//var buffer3 bytes.Buffer
    //D0086
    datastoreClient := createClientDS()
	if deskName != "desktop0" {
		USER_EMAIL_ID = deskName
	}
 
	//buffer3.WriteString(fmt.Sprintf("func getIcons()\n"))
	deskN := fmt.Sprintf("%s_icons", deskName)
	//buffer3.WriteString(fmt.Sprintf("UID: %s\n", USER_EMAIL_ID))
	//buffer3.WriteString(fmt.Sprintf("deskName: %s\n", deskN))
	q := datastore.NewQuery("TDSCNFG").Filter("USER =", USER_EMAIL_ID).
									   Filter("CFG_ID =", deskN).
									   Limit(1)
	//log.Panicf("[S0541]")
	if deskName == "desktop0" {
		q = datastore.NewQuery("TDSCNFG").Filter("USER =", USER_EMAIL_ID).
										   Filter("CFG_ID =", deskN).
										   Filter("NUM_VAL =", 0).
										   Limit(1)	
		//log.Panicf("[S0542]")
 
	}
	
    config := make([]TDSCNFG, 0, 1)	
    if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
         panic(err)
    }
	//log.Printf("datastoreClient.Get()  [65565]")
	iconsStr := ""
	//style = "/static/css/style.css"
	for _, p := range config {
		if p.USER == USER_EMAIL_ID {
			//style = p.TXT_VAL
			//desktop0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
			iconsStr = p.TXT_VAL
			//buffer3.WriteString(fmt.Sprintf("ICONSSTR: %s\n", iconsStr))
			
			FL_CUSTOM_ICONS = true
			//buffer3.WriteString(fmt.Sprintf("FL_CUSTOM_ICONS: %t\n", FL_CUSTOM_ICONS))
			break
		}
			
	}
 
	myCtr := 0
    if (FL_CUSTOM_ICONS == true) {
		iconsArr := strings.Split(iconsStr,",")
		if (iconsArr[0] == deskName) {
			for i := 1; i < len(iconsArr)  && i <= MAX_DOCK_ICONS; i++ {
				thisIcon := iconsArr[i]
				if thisIcon != "" {
					//myCtr++
					//buffer3.WriteString(fmt.Sprintf("iconsArr[%s]:\n", thisIcon))
					//get icon details
					thisIconNum := str2int(thisIcon)
					//buffer3.WriteString(fmt.Sprintf("iconsArr[%d]:\n", thisIconNum))
					
					dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
					key := datastore.NameKey("TDSICONS", dsKey, nil)
					q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
					//log.Panicf("[S0543]")
					recCount,_ := datastoreClient.Count(c,q)
					if recCount > 0 {
						myCtr++
					}
 
					icons := make([]TDSICONS, 0, 1)
					if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
						 panic(err)
					}
					//log.Printf("datastoreClient.Get()  [65608]")
					if err := iconsMenuTemplate.Execute(w, icons); err != nil {
						 panic(err)
					}
				}
				
			}
		}
	}
	//if no icons found
	if myCtr == 0 {
		FL_CUSTOM_ICONS = false
	}
	return FL_CUSTOM_ICONS, iconsHTML
}
 
//gets desktop icons
func getIconsDesktop(w http.ResponseWriter, r *http.Request, thisDeskNum int, TXT_VAL string) (iconsHTML string) {
	//var buffer3 bytes.Buffer
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0086
    datastoreClient := createClientDS()
	iconsArr := strings.Split(TXT_VAL,",")
	//if (iconsArr[0] == "desktop0") {
	if thisDeskNum >= 0 && len(iconsArr) > 0 {
		for i := 1; i < len(iconsArr) && i <= MAX_DOCK_ICONS; i++ {
			thisIcon := iconsArr[i]
			if thisIcon != "" {
				thisIconNum := str2int(thisIcon)
				dsKey := fmt.Sprintf("ICON[%d]", thisIconNum)
				key := datastore.NameKey("TDSICONS", dsKey, nil)
				q := datastore.NewQuery("TDSICONS").Filter("__key__ =", key)
				//log.Panicf("[S0544]")
				icons := make([]TDSICONS, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [65647]")
				if err := iconsMenuTemplateD0.Execute(w, icons); err != nil {
					 panic(err)
				}
			}
			
		}
	} else {
		msgDtl := fmt.Sprintf("[U00096] ERROR: View desktop icons cannot be processed.")
		msgTyp := "error"
		msgURL := "/?q=home"
		action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to proceed to ULAPPH Carousel homepage.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
	return iconsHTML
}
 
 
var iconsMenuTemplate = template.Must(template.New("iconsMenuTemplate").Parse(iconsMenuTemplateHTML))
 
const iconsMenuTemplateHTML = `
    {{range .}}
<li id="{{.ICON_NAME}}">
<a href="/click-url/?URL_ADD={{.URL_ADD}}&ICON_NAME={{.ICON_NAME}}&ICON_ID={{.ICON_ID}}&URL_TYP=0&DISP_TYP=D" target="{{.ICON_NAME}}">
<em><span>{{.ICON_NAME}}</span></em><br>
<img src="{{.IMG_SRC}}" title="{{.ICON_NAME}}" height=40 width=40/>
</a>
</li>	
</li>	
    {{end}}
`
 
var iconsMenuTemplateD0 = template.Must(template.New("iconsMenuTemplateD0").Parse(iconsMenuTemplateHTMLD0))
 
const iconsMenuTemplateHTMLD0 = `
    {{range .}}
<a href="/click-url/?URL_ADD={{.URL_ADD}}&ICON_NAME={{.ICON_NAME}}&ICON_ID={{.ICON_ID}}&URL_TYP=0&DISP_TYP=D" target="{{.ICON_NAME}}">
	<img src="{{.IMG_SRC}}" title="{{.ICON_NAME}}" height=40 width=40/>({{.ICON_ID}})</a>	
| <a href="/admin-icons?EditIconFunc=EditIcon&myIcon={{.ICON_ID}}">(Edit)</a><br>
    {{end}}
`
 
//rules processing logic
//caches data for a rule
func TASK_MEMCACHER_rulesProcessor(w http.ResponseWriter, r *http.Request) {
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0086
    datastoreClient := createClientDS()
	mCtr := 0
		//get from datastore
 
		q := datastore.NewQuery("TDSRULES").Order("RULE_NUM")
		//log.Panicf("[S0545]")
	  recCount,_ := datastoreClient.Count(c,q)
		rules := make([]TDSRULES, 0, recCount)
		if _, err := datastoreClient.GetAll(c,q, &rules); err != nil {
			//check overquota error
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		  }
		//log.Printf("datastoreClient.Get()  [65712]")
		//for i, p := range rules{
		for _, p := range rules{
			mCtr++
			//if p.RULE_NUM > 0 {
			
				fmt.Fprintf(w, "p.RULE_NUM: %d<br>", p.RULE_NUM)
				fmt.Fprintf(w, "mCtr: %d<br>", mCtr)
			
				if p.RULE_NUM != mCtr {
				//	//update rule nbr
					
					p.RULE_NUM = mCtr
					ruleKey := fmt.Sprintf("%s.%s.%s.%s", p.UID, p.PLATFORM, p.OS_NAME, p.BROWSER_NAME)
					fmt.Fprintf(w, "UPDATING TDSRULES: %s<br>", ruleKey)
					key := datastore.NameKey("TDSRULES", ruleKey, nil)
					_, err := datastoreClient.Put(c, key, &p)
					if err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [65732]")
					//log.Panicf("[S0546]")
 
				}
				//p.RULE_NUM = mCtr
				//cache rules data first time
				//SYS_VER	RULE_NUM	DISP_TYP	DEST_URL	TRIG_ID	ADS_ID	CAP_LIMIT_DAILY	DESKTOP_ACCESSED	URL_ACESSED	URL_REFERER	ACCESS_TIME	COUNTRY	REGION	CITY	IP_ADDRESS	IS_BOT	IS_MOBILE	OS_NAME	PLATFORM	BROWSER_NAME	BROWSER_VERSION
				//1			1			MOBILE					*		*		1000			root				*			*			*			PH		*		*		*			*		FALSE		*		Windows		Internet Explorer	*
				var buffer4 bytes.Buffer
				buffer4.WriteString(fmt.Sprintf("%d,%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER, p.RULE_NUM, p.DISP_TYP, p.DEST_URL, p.TRIG_ID, p.ADS_ID, p.CAP_LIMIT_DAILY, p.DESKTOP_ACCESSED, p.URL_ACESSED, p.URL_REFERER, p.ACCESS_TIME, p.COUNTRY, p.REGION, p.CITY, p.IP_ADDRESS, p.IS_BOT, p.IS_MOBILE, p.OS_NAME, p.PLATFORM, p.BROWSER_NAME, p.BROWSER_VERSION, p.UID))
				TDRULES_CACHE := buffer4.String()
				//rulesProcessor_CACHE_KEY := fmt.Sprintf("rulesProcessor_CACHE_%v", i)
				rulesProcessor_CACHE_KEY := fmt.Sprintf("rulesProcessor_CACHE_%v", p.RULE_NUM)
				//uid := p.UID
				putStrToMemcacheWithoutExp(w,r,rulesProcessor_CACHE_KEY,TDRULES_CACHE)
				fmt.Fprintf(w, "rulesProcessor_CACHE_KEY: %s<br>", rulesProcessor_CACHE_KEY)
				fmt.Fprintf(w, "rulesProcessor_CACHE_DATA: %s<br>", TDRULES_CACHE)
				//-----
				//mCtr++
				//lastRule = p.RULE_NUM
			//}
 
		}
 
	fmt.Fprintf(w, "rulesProcessor_CACHE_TOTAL: %d<br>", mCtr)
	mCtrStr := fmt.Sprintf("%d", mCtr)
	rulesProcessor_CACHE_KEY := fmt.Sprintf("rulesProcessor_CACHE_TOTAL")
	putStrToMemcacheWithoutExp(w,r,rulesProcessor_CACHE_KEY,mCtrStr)
	
}
 
//RULES processing logic
//gets rules from cache or database
func rulesProcessor(w http.ResponseWriter, r *http.Request, t string) (FL_FOUND_RULE bool, FL_MATCH_ALL_EXC_IP_ADD bool, PROC_ERR_MSG string, ruleNum int, dispType string, DestURL string, TrigID string, AdsID string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	FL_FOUND_RULE = false
	FL_CACHE_PROC_OK := true
	FL_MATCH_ALL_EXC_IP_ADD = false
	//default if not matched
	ruleNum = 999
	dispType = "MOBILE"
	DestURL = ""
	TrigID = "T0000"		
	AdsID = "A0000"	
	
	var val map[string]interface{}
	//////
	var buffer3 bytes.Buffer
	var buffer4 bytes.Buffer
	
	if err := json.Unmarshal([]byte(t), &val); err != nil {
         panic(err)
	}
	
	rulesProcessor_CACHE_KEY := fmt.Sprintf("rulesProcessor_CACHE_TOTAL")
 
	rulesProcessor_CACHE_TOTAL := ""
    maxRules := 0
    rulesProcessor_CACHE_TOTAL = getStrMemcacheValueByKey(w,r,rulesProcessor_CACHE_KEY)
    if rulesProcessor_CACHE_TOTAL != "" {
		maxRules = str2int(rulesProcessor_CACHE_TOTAL)
	}
	
	for i := 1; i <= maxRules; i++ {
	
		//get memcached rules
		rulesProcessor_CACHE := ""
		rulesProcessor_CACHE_KEY := fmt.Sprintf("rulesProcessor_CACHE_%v", i)
 
		rulesProcessor_CACHE = getStrMemcacheValueByKey(w,r,rulesProcessor_CACHE_KEY)
		
		if rulesProcessor_CACHE != "" {
			buffer3.WriteString(fmt.Sprintf("CACHED RULES: %s => %s\n", rulesProcessor_CACHE_KEY, rulesProcessor_CACHE))	
			//SYS_VER	RULE_NUM	DISP_TYP	DEST_URL	TRIG_ID	ADS_ID	CAP_LIMIT_DAILY	DESKTOP_ACCESSED	URL_ACESSED	URL_REFERER	ACCESS_TIME	COUNTRY	REGION	CITY	IP_ADDRESS	IS_BOT	IS_MOBILE	OS_NAME	PLATFORM	BROWSER_NAME	BROWSER_VERSION
			//1			1			MOBILE					*		*		1000			root				*			*			*			PH		*		*		*			*		FALSE		*		Windows		Internet Explorer	*
 
			SPL := strings.Split(rulesProcessor_CACHE,",")
			if len(SPL) >= 22 {
				FL_CACHE_PROC_OK = false
			} else {
				//cSYS_VER := SPL[0]	
				cRULE_NUM := str2int(SPL[1])
				cDISP_TYP := SPL[2]	
				cDEST_URL := SPL[3]	
				cTRIG_ID:= SPL[4]
				//cADS_ID := SPL[5]	
				//cCAP_LIMIT_DAILY := SPL[6]	
				cDESKTOP_ACCESSED := SPL[7]	
				cURL_ACESSED := SPL[8]	
				cURL_REFERER := SPL[9]	
				//cACCESS_TIME := SPL[10]	
				cCOUNTRY := SPL[11]	
				cREGION := SPL[12]	
				cCITY := SPL[13]	
				cIP_ADDRESS := SPL[14]	
				cIS_BOT := SPL[15]	
				//cIS_MOBILE := SPL[16]	
				cOS_NAME := SPL[17]	
				cPLATFORM := SPL[18]	
				cBROWSER_NAME := SPL[19]	
				cBROWSER_VERSION := SPL[20]
				cUID := SPL[21]
				//process rules
				FL_MATCH_ALL := false
				
 
				//	case "DESKTOP_ACCESSED":
				if cDESKTOP_ACCESSED != "*" {
				//buffer3.WriteString(fmt.Sprintf("DESKTOP_ACCESSED\n"))
				buffer3.WriteString(fmt.Sprintf(":: [%d] DESKTOP_ACCESSED :: RULE vs TRAN --> [%s] == [%s]\n", cRULE_NUM, cDESKTOP_ACCESSED, val["DESKTOP_ACCESSED"]))
					if cDESKTOP_ACCESSED == val["DESKTOP_ACCESSED"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "URL_ACESSED":
				if cURL_ACESSED != "*" {
				//buffer3.WriteString(fmt.Sprintf("URL_ACESSED\n"))
				buffer3.WriteString(fmt.Sprintf(":: URL_ACESSED :: RULE vs TRAN --> [%s] == [%s]\n", cURL_ACESSED, val["URL_ACESSED"]))
					if cURL_ACESSED == val["URL_ACESSED"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "URL_REFERER":
				if cURL_REFERER != "*" {
				//buffer3.WriteString(fmt.Sprintf("URL_REFERER\n"))
				buffer3.WriteString(fmt.Sprintf(":: URL_REFERER :: RULE vs TRAN --> [%s] == [%s]\n", cURL_REFERER, val["URL_REFERER"]))
					if cURL_REFERER == val["URL_REFERER"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				
				}
				
				//	case "COUNTRY":
				if cCOUNTRY != "*" {
				//buffer3.WriteString(fmt.Sprintf("COUNTRY\n"))	
				buffer3.WriteString(fmt.Sprintf(":: COUNTRY :: RULE vs TRAN --> [%s] == [%s]\n", cCOUNTRY, val["COUNTRY"]))
					//if strings.ToUpper(cCOUNTRY) == strings.ToUpper(val["COUNTRY"]) {
					if cCOUNTRY == val["COUNTRY"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "REGION":
				if cREGION != "*" {
				//buffer3.WriteString(fmt.Sprintf("REGION\n"))	
				buffer3.WriteString(fmt.Sprintf(":: REGION :: RULE vs TRAN --> [%s] == [%s]\n", cREGION, val["REGION"]))
					//if strings.ToUpper(cREGION) == strings.ToUpper(val["REGION"]) {
					if cREGION == val["REGION"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "CITY":
				if cCITY != "*" {
				//buffer3.WriteString(fmt.Sprintf("CITY\n"))	
				buffer3.WriteString(fmt.Sprintf(":: CITY :: RULE vs TRAN --> [%s] == [%s]\n", cCITY, val["CITY"]))
					//if strings.ToUpper(cCITY) == strings.ToUpper(val["CITY"]) {
					if cCITY == val["CITY"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
	//			//	case "IP_ADDRESS":
	//			if cIP_ADDRESS != "*" {
	//			//buffer3.WriteString(fmt.Sprintf("IP_ADDRESS\n"))	
	//			buffer3.WriteString(fmt.Sprintf(":: IP_ADDRESS :: RULE vs TRAN --> [%s] == [%s]\n", cIP_ADDRESS, val["IP_ADDRESS"]))
	//				if cIP_ADDRESS == val["IP_ADDRESS"] {
	//					FL_MATCH_ALL = true
	//				} else {
	//					continue
	//				}
	//			}
				
				//	case "IS_BOT":
				if cIS_BOT != "*" {
				//buffer3.WriteString(fmt.Sprintf("IS_BOT\n"))	
				buffer3.WriteString(fmt.Sprintf(":: IS_BOT :: RULE vs TRAN --> [%s] == [%s]\n", cIS_BOT, val["IS_BOT"]))
					if cIS_BOT == val["IS_BOT"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "OS_NAME":
				if cOS_NAME != "*" {
				//buffer3.WriteString(fmt.Sprintf("OS_NAME\n"))	
				buffer3.WriteString(fmt.Sprintf(":: OS_NAME :: RULE vs TRAN --> [%s] == [%s]\n", cOS_NAME, val["OS_NAME"]))
					//if strings ToUpper(cOS_NAME) == strings.ToUpper(val["OS_NAME"]) {
					if cOS_NAME == val["OS_NAME"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "PLATFORM":
				if cPLATFORM != "*" {
				//buffer3.WriteString(fmt.Sprintf("PLATFORM\n"))	
				buffer3.WriteString(fmt.Sprintf(":: PLATFORM :: RULE vs TRAN --> [%s] == [%s]\n", cPLATFORM, val["PLATFORM"]))
					//if strings.ToUpper(cPLATFORM) == strings.ToUpper(val["PLATFORM"]) {
					if cPLATFORM == val["PLATFORM"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "BROWSER_NAME":
				if cBROWSER_NAME != "*" {
				//buffer3.WriteString(fmt.Sprintf("BROWSER_NAME\n"))	
				buffer3.WriteString(fmt.Sprintf(":: BROWSER_NAME :: RULE vs TRAN --> [%s] == [%s]\n", cBROWSER_NAME, val["BROWSER_NAME"]))
					//if strings.ToUpper(cBROWSER_NAME) == strings.ToUpper(val["BROWSER_NAME"]) {
					if cBROWSER_NAME == val["BROWSER_NAME"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "BROWSER_VERSION":
				if cBROWSER_VERSION != "*" {
				//buffer3.WriteString(fmt.Sprintf("BROWSER_VERSION\n"))	
				buffer3.WriteString(fmt.Sprintf(":: BROWSER_VERSION :: RULE vs TRAN --> [%s] == [%s]\n", cBROWSER_VERSION, val["BROWSER_VERSION"]))
					if cBROWSER_VERSION == val["BROWSER_VERSION"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "UID":
				if cUID != "*" {
				//buffer3.WriteString(fmt.Sprintf("UID\n"))	
				buffer3.WriteString(fmt.Sprintf(":: UID :: RULE vs TRAN --> [%s] == [%s]\n", cUID, val["UID"]))
					if cUID == val["UID"] {
						FL_MATCH_ALL = true
					} else {
						continue
					}
				}
				
				//	case "IP_ADDRESS":
				if cIP_ADDRESS != "*" {
				//buffer3.WriteString(fmt.Sprintf("IP_ADDRESS\n"))	
				buffer3.WriteString(fmt.Sprintf(":: IP_ADDRESS :: RULE vs TRAN --> [%s] == [%s]\n", cIP_ADDRESS, val["IP_ADDRESS"]))
					if cIP_ADDRESS == val["IP_ADDRESS"] {
						FL_MATCH_ALL = true
					} else {
	//					continue
						if FL_MATCH_ALL == true {
							FL_MATCH_ALL_EXC_IP_ADD = true
						}
					}
				}
				
				//Evaluate rule matched
				if FL_MATCH_ALL == true || FL_MATCH_ALL_EXC_IP_ADD == true {
					//S0547 		= value[S0547]
					//RULE_NUM  		= {{.RULE_NUM}
					ruleNum = cRULE_NUM
					//DISP_TYP 		= {{.DISP_TYP}}
					dispType = cDISP_TYP
					//DEST_URL 		= {{.DEST_URL}}
					DestURL = cDEST_URL
					//TRIG_ID 		= {{.TRIG_ID}}
					TrigID = cTRIG_ID		
					//ADS_ID 			= {{.ADS_ID}}
					//AdsID = cADS_ID
					//CAP_LIMIT_DAILY	= {{.CAP_LIMIT_DAILY}}
					buffer3.WriteString(fmt.Sprintf("****************MATCHED*****************"))
 
					FL_FOUND_RULE = true
					break
				}
		
			}
		
		}
 
		//} else {
		if FL_CACHE_PROC_OK == false {
		
			buffer3.WriteString(fmt.Sprintf("DATASTORE RULES PROCESSED:\n"))
			//get from datastore
 
			q := datastore.NewQuery("TDSRULES").Filter("RULE_NUM =", i).Limit(1)
			//log.Panicf("[S0548]")
			rules := make([]TDSRULES, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &rules); err != nil {
				 panic(err)
			  }
			//log.Printf("datastoreClient.Get()  [66041]")
			//for i, p := range rules{
			for _, p := range rules{
 
				//get from datastore
				//keyb := rules[i]
				//buffer3.WriteString(fmt.Sprintf("KEYB[%s]\n", keyb))
				FL_MATCH_ALL := false
			////buffer3.WriteString(fmt.Sprintf("ARRAY[%s]\n", p))
			////buffer3.WriteString(fmt.Sprintf("****************************************"))
 
					//	case "DESKTOP_ACCESSED":
					if p.DESKTOP_ACCESSED != "*" {
					//buffer3.WriteString(fmt.Sprintf("DESKTOP_ACCESSED\n"))
					buffer3.WriteString(fmt.Sprintf(":: [%d] DESKTOP_ACCESSED :: RULE vs TRAN --> [%s] == [%s]\n", p.RULE_NUM, p.DESKTOP_ACCESSED, val["DESKTOP_ACCESSED"]))
						if p.DESKTOP_ACCESSED == val["DESKTOP_ACCESSED"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "URL_ACESSED":
					if p.URL_ACESSED != "*" {
					//buffer3.WriteString(fmt.Sprintf("URL_ACESSED\n"))
					buffer3.WriteString(fmt.Sprintf(":: URL_ACESSED :: RULE vs TRAN --> [%s] == [%s]\n", p.URL_ACESSED, val["URL_ACESSED"]))
						if p.URL_ACESSED == val["URL_ACESSED"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "URL_REFERER":
					if p.URL_REFERER != "*" {
					//buffer3.WriteString(fmt.Sprintf("URL_REFERER\n"))
					buffer3.WriteString(fmt.Sprintf(":: URL_REFERER :: RULE vs TRAN --> [%s] == [%s]\n", p.URL_REFERER, val["URL_REFERER"]))
						if p.URL_REFERER == val["URL_REFERER"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					
					}
					
					//	case "COUNTRY":
					if p.COUNTRY != "*" {
					//buffer3.WriteString(fmt.Sprintf("COUNTRY\n"))	
					buffer3.WriteString(fmt.Sprintf(":: COUNTRY :: RULE vs TRAN --> [%s] == [%s]\n", p.COUNTRY, val["COUNTRY"]))
						//if strings.ToUpper(p.COUNTRY) == strings.ToUpper(val["COUNTRY"]) {
						if p.COUNTRY == val["COUNTRY"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "REGION":
					if p.REGION != "*" {
					//buffer3.WriteString(fmt.Sprintf("REGION\n"))	
					buffer3.WriteString(fmt.Sprintf(":: REGION :: RULE vs TRAN --> [%s] == [%s]\n", p.REGION, val["REGION"]))
						//if strings.ToUpper(p.REGION) == strings.ToUpper(val["REGION"]) {
						if p.REGION == val["REGION"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "CITY":
					if p.CITY != "*" {
					//buffer3.WriteString(fmt.Sprintf("CITY\n"))	
					buffer3.WriteString(fmt.Sprintf(":: CITY :: RULE vs TRAN --> [%s] == [%s]\n", p.CITY, val["CITY"]))
						//if strings.ToUpper(p.CITY) == strings.ToUpper(val["CITY"]) {
						if p.CITY == val["CITY"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
//					//	case "IP_ADDRESS":
//					if p.IP_ADDRESS != "*" {
//					//buffer3.WriteString(fmt.Sprintf("IP_ADDRESS\n"))	
//					buffer3.WriteString(fmt.Sprintf(":: IP_ADDRESS :: RULE vs TRAN --> [%s] == [%s]\n", p.IP_ADDRESS, val["IP_ADDRESS"]))
//						if p.IP_ADDRESS == val["IP_ADDRESS"] {
//							FL_MATCH_ALL = true
//						} else {
//							continue
//						}
//					}
					
					//	case "IS_BOT":
					if p.IS_BOT != "*" {
					//buffer3.WriteString(fmt.Sprintf("IS_BOT\n"))	
					buffer3.WriteString(fmt.Sprintf(":: IS_BOT :: RULE vs TRAN --> [%s] == [%s]\n", p.IS_BOT, val["IS_BOT"]))
						if p.IS_BOT == val["IS_BOT"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "OS_NAME":
					if p.OS_NAME != "*" {
					//buffer3.WriteString(fmt.Sprintf("OS_NAME\n"))	
					buffer3.WriteString(fmt.Sprintf(":: OS_NAME :: RULE vs TRAN --> [%s] == [%s]\n", p.OS_NAME, val["OS_NAME"]))
						//if strings.ToUpper(p.OS_NAME) == strings.ToUpper(val["OS_NAME"]) {
						if p.OS_NAME == val["OS_NAME"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "PLATFORM":
					if p.PLATFORM != "*" {
					//buffer3.WriteString(fmt.Sprintf("PLATFORM\n"))	
					buffer3.WriteString(fmt.Sprintf(":: PLATFORM :: RULE vs TRAN --> [%s] == [%s]\n", p.PLATFORM, val["PLATFORM"]))
						//if strings.ToUpper(p.PLATFORM) == strings.ToUpper(val["PLATFORM"]) {
						if p.PLATFORM == val["PLATFORM"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "BROWSER_NAME":
					if p.BROWSER_NAME != "*" {
					//buffer3.WriteString(fmt.Sprintf("BROWSER_NAME\n"))	
					buffer3.WriteString(fmt.Sprintf(":: BROWSER_NAME :: RULE vs TRAN --> [%s] == [%s]\n", p.BROWSER_NAME, val["BROWSER_NAME"]))
						//if strings.ToUpper(p.BROWSER_NAME) == strings.ToUpper(val["BROWSER_NAME"]) {
						if p.BROWSER_NAME == val["BROWSER_NAME"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "BROWSER_VERSION":
					if p.BROWSER_VERSION != "*" {
					//buffer3.WriteString(fmt.Sprintf("BROWSER_VERSION\n"))	
					buffer3.WriteString(fmt.Sprintf(":: BROWSER_VERSION :: RULE vs TRAN --> [%s] == [%s]\n", p.BROWSER_VERSION, val["BROWSER_VERSION"]))
						if p.BROWSER_VERSION == val["BROWSER_VERSION"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "UID":
					if p.UID != "*" {
					//buffer3.WriteString(fmt.Sprintf("UID\n"))	
					buffer3.WriteString(fmt.Sprintf(":: UID :: RULE vs TRAN --> [%s] == [%s]\n", p.UID, val["UID"]))
						if p.UID == val["UID"] {
							FL_MATCH_ALL = true
						} else {
							continue
						}
					}
					
					//	case "IP_ADDRESS":
					if p.IP_ADDRESS != "*" {
					//buffer3.WriteString(fmt.Sprintf("IP_ADDRESS\n"))	
					buffer3.WriteString(fmt.Sprintf(":: IP_ADDRESS :: RULE vs TRAN --> [%s] == [%s]\n", p.IP_ADDRESS, val["IP_ADDRESS"]))
						if p.IP_ADDRESS == val["IP_ADDRESS"] {
							FL_MATCH_ALL = true
						} else {
//							continue
							if FL_MATCH_ALL == true {
							FL_MATCH_ALL_EXC_IP_ADD = true
							}
						}
					}
					
					//cache rules data first time
					//SYS_VER	RULE_NUM	DISP_TYP	DEST_URL	TRIG_ID	ADS_ID	CAP_LIMIT_DAILY	DESKTOP_ACCESSED	URL_ACESSED	URL_REFERER	ACCESS_TIME	COUNTRY	REGION	CITY	IP_ADDRESS	IS_BOT	IS_MOBILE	OS_NAME	PLATFORM	BROWSER_NAME	BROWSER_VERSION
					//1			1			MOBILE					*		*		1000			root				*			*			*			PH		*		*		*			*		FALSE		*		Windows		Internet Explorer	*
					buffer4.WriteString(fmt.Sprintf("%d,%d,%s,%s,%s,%s,%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", p.SYS_VER, p.RULE_NUM, p.DISP_TYP, p.DEST_URL, p.TRIG_ID, p.ADS_ID, p.CAP_LIMIT_DAILY, p.DESKTOP_ACCESSED, p.URL_ACESSED, p.URL_REFERER, p.ACCESS_TIME, p.COUNTRY, p.REGION, p.CITY, p.IP_ADDRESS, p.IS_BOT, p.IS_MOBILE, p.OS_NAME, p.PLATFORM, p.BROWSER_NAME, p.BROWSER_VERSION, p.UID))
					TDRULES_CACHE := buffer4.String()
 
					putStrToMemcacheWithoutExp(w,r,rulesProcessor_CACHE_KEY,TDRULES_CACHE)
					//-----
					
					//Evaluate rule matched
					if FL_MATCH_ALL == true || FL_MATCH_ALL_EXC_IP_ADD == true {
 
						//S0549 		= value[S0549]
						//RULE_NUM  		= {{.RULE_NUM}
						ruleNum = p.RULE_NUM
						//DISP_TYP 		= {{.DISP_TYP}}
						dispType = p.DISP_TYP
						//DEST_URL 		= {{.DEST_URL}}
						DestURL = p.DEST_URL
						//TRIG_ID 		= {{.TRIG_ID}}
						TrigID = p.TRIG_ID		
						//ADS_ID 			= {{.ADS_ID}}
						//AdsID = p.ADS_ID
						//CAP_LIMIT_DAILY	= {{.CAP_LIMIT_DAILY}}
						buffer3.WriteString(fmt.Sprintf("****************MATCHED*****************"))
						FL_FOUND_RULE = true
						break
					}
 
			}
		}
	
	}
 
	return FL_FOUND_RULE, FL_MATCH_ALL_EXC_IP_ADD, buffer3.String(), ruleNum, dispType, DestURL, TrigID, AdsID
	
}
//D0098
//format 20060102150405
func getUnixEpochByTimestamp(tm string) string {
    thetime, err := time.Parse("20060102150405", tm)
    if err != nil {
        //log.Printf("Can't parse time format")
		return ""
    }
    epoch := thetime.Unix()
	return fmt.Sprintf("%v", epoch)
}
 
//gets the current timestamp with format 20060102150405
func getTimestamp() string {
	rt := time.Now().Local()
	timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
	return timestamp
}

//gets current year w/ format 2006
func getYear() string {
	rt := time.Now().Local()
	tyear := rt.Format("2006")
	return tyear
}
//gets current year, month, day, hour
func getYMDH() (tyear, tmo, tday, th string) {
    rt := time.Now().Local()
    tyear = rt.Format("2006")
    tmo = rt.Format("01")
    tday = rt.Format("02")
    th = rt.Format("15")
    //2006-01-02 15:04:00
	return tyear, tmo, tday, th
}
 
//ads timeslots processing logic
func adslotsProcessor(w http.ResponseWriter, r *http.Request, CATEGORY string) (FL_FOUND_SLOT bool, AdsID2 string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //var buffer bytes.Buffer
    //D0086
    datastoreClient := createClientDS()
	FL_FOUND_SLOT = false	
	AdsID2 = "A0000"	
 
	timestamp := getTimestamp()
	currTimestamp := str2int(timestamp)
	rt := time.Now().Local()
	nTime := fmt.Sprintf("%v", rt)
	sDate := strings.Split(nTime, " ")[0]
	
	//if CATEGORY == "" {
	//	CATEGORY = "desktop0"
	//}
	q := datastore.NewQuery("TDSADTS").Order("ADS_TIME_SLOT")
	//log.Panicf("[S0550]")
	recCount,_ := datastoreClient.Count(c,q)
	adts := make([]TDSADTS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [66315]")
	FL_FOUND_SLOT = false
	
	for _, p := range adts{
 
		if p.ADS_TIME_SLOT != "" {		
			pDateTime := fmt.Sprintf("%s %s", sDate, p.ADS_TIME_SLOT)
			rt2, _ := time.Parse("2006-01-02 15:04:00", pDateTime)
			rTimestamp := fmt.Sprintf("%v", rt2.Format("20060102150405"))
			slotTimestamp := str2int(rTimestamp)
			if currTimestamp >= slotTimestamp {
				FL_FOUND_SLOT = true
				//AdsID2 = p.ADS_RAND_1
				sRand := fmt.Sprintf("ADS_RAND_%s", string(rTimestamp[13]))
				//buffer.WriteString(fmt.Sprintf("rTimestamp: ", rTimestamp))
				//buffer.WriteString(fmt.Sprintf("sRand: ", sRand))
 
				switch sRand  {
					case "ADS_RAND_0":
						AdsID2 = p.ADS_RAND_0
					case "ADS_RAND_1":
						AdsID2 = p.ADS_RAND_1
					case "ADS_RAND_2":
						AdsID2 = p.ADS_RAND_2
					case "ADS_RAND_3":
						AdsID2 = p.ADS_RAND_3
					case "ADS_RAND_4":
						AdsID2 = p.ADS_RAND_4
					case "ADS_RAND_5":
						AdsID2 = p.ADS_RAND_5
					case "ADS_RAND_6":
						AdsID2 = p.ADS_RAND_6
					case "ADS_RAND_7":
						AdsID2 = p.ADS_RAND_7
					case "ADS_RAND_8":
						AdsID2 = p.ADS_RAND_8
					case "ADS_RAND_9":
						AdsID2 = p.ADS_RAND_9
				}
				
				//edv 08/10/2015
				//cache the ads slot found
				putStrToMemcacheWithoutExp(w,r,"TASK_MEMCACHER_adslotsProcessor_AdsID",AdsID2)
				break
				
			} else {
				continue
			}
		}
			
	}
	return FL_FOUND_SLOT, AdsID2
	
}
 
//TASK MEMCACHER for ads timeslots processing logic
func TASK_MEMCACHER_adslotsProcessor(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//FL_FOUND_SLOT := false	
	AdsID2 := "A0000"	
	//var buffer bytes.Buffer
 
	//run only if there is someone online
	fmt.Fprintf(w, "<iframe src=\"https://freesecure.timeanddate.com/clock/i5jccu94/fs48/tcf90/pc9f0/ftbi/th2\" width=\"200\" height=\"100\" scrolling=\"no\"></iframe>")
	fmt.Fprintf(w, "<iframe src=\"https://oras.pagasa.dost.gov.ph/widget.shtml\" width=300 height=100 scrolling=no></iframe></div>")

	var buffer bytes.Buffer
	//deskName := fmt.Sprintf("desktop%d", i)
	cKey := fmt.Sprintf("TASK_MEMCACHER_adslotsProcessor_AdsID")
	fmt.Fprintf(w, "<h1>***************************************</h1>")

	rt := time.Now().Local()
	//current time
	//timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
	timestamp := getTimestamp()
	fmt.Fprintf(w, "Current UTC Time: %v<br>", timestamp)
	currTimestamp := str2int(timestamp)
	nTime := fmt.Sprintf("%v", rt)
	fmt.Fprintf(w, "nTime: %v<br>", nTime)
	sDate := strings.Split(nTime, " ")[0]
	fmt.Fprintf(w, "sDate: %v<br>", sDate)
	
	//read all timeslots
	q := datastore.NewQuery("TDSADTS").Order("-ADS_TIME_SLOT")
	//log.Panicf("[S0551]")
	recCount,err := datastoreClient.Count(c,q)
	if err != nil {
		checkError(w,r,"",err,"CHK_OQ")
		return			
	}
	
	adts := make([]TDSADTS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &adts); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	  }
    //log.Printf("datastoreClient.Get()  [66423]")
	//update overquota flag
	//--------------------
	cKey2 := "IS_OVER_QUOTA"
	putStrToMemcacheWithExp(w,r,cKey2,"N",GEN_CONTENT_EXPIRES2)
	//------------------
	if err := adtsDispTemplateHdr.Execute(w, adts); err != nil {
		 panic(err)
	}
	//FL_FOUND_SLOT := false
	for _, p := range adts{

		//if p.ADS_TIME_SLOT != "" && p.CATEGORY == deskName {
		if p.ADS_TIME_SLOT != "" {
			//FL_FOUND_SLOT = true
			//fmt.Fprintf(w, "FL_FOUND_SLOT FOR %v: %v<br>", deskName, FL_FOUND_SLOT)
			//break
			if err := adtsDispTemplateRec.Execute(w, &p); err != nil {
				 panic(err)
			}
		}
	}
	if err := adtsDispTemplateFtr.Execute(w, adts); err != nil {
		 panic(err)
	}
	
	for _, p := range adts{

		//if p.ADS_TIME_SLOT != "" && p.CATEGORY == deskName {
		if p.ADS_TIME_SLOT != "" {			
			//FL_FOUND_SLOT = true
			//fmt.Fprintf(w, "FL_FOUND_SLOT: %v<br>", FL_FOUND_SLOT)
			//fmt.Fprintf(w, "Generating random ads...<br>")
			pDateTime := fmt.Sprintf("%s %s", sDate, p.ADS_TIME_SLOT)
			//fmt.Fprintf(w, "p.ADS_TIME_SLOT: %v<br>", p.ADS_TIME_SLOT)
			//fmt.Fprintf(w, "NOTE: pDateTime = [Current Date][p.ADS_TIME_SLOT] <br>")
			//fmt.Fprintf(w, "pDateTime: %v<br>", pDateTime)
			rt2, _ := time.Parse("2006-01-02 15:04:00", pDateTime)
			rTimestamp := fmt.Sprintf("%v", rt2.Format("20060102150405"))
			slotTimestamp := str2int(rTimestamp)
			//fmt.Fprintf(w, "NOTE: currTimestamp is the current UTC timestamp<br>")
			//fmt.Fprintf(w, "currTimestamp: %v<br>", currTimestamp)
			//fmt.Fprintf(w, "slotTimestamp: %v<br>", slotTimestamp)
			
			if currTimestamp >= slotTimestamp {
				fmt.Fprintf(w, "if currTimestamp >= slotTimestamp {<br>")
				fmt.Fprintf(w, "-------------- FOUND ----------------<br>")
				//FL_FOUND_SLOT = true
				//AdsID2 = p.ADS_RAND_1
				buffer.WriteString(fmt.Sprintf("pDateTime: %s<br>", pDateTime))
				buffer.WriteString(fmt.Sprintf("p.ADS_TIME_SLOT: %s<br>", p.ADS_TIME_SLOT))
				buffer.WriteString(fmt.Sprintf("currTimestamp: %d<br>", currTimestamp))
				buffer.WriteString(fmt.Sprintf("slotTimestamp: %d<br>", slotTimestamp))
				sRand := fmt.Sprintf("ADS_RAND_%s", string(timestamp[13]))
				buffer.WriteString(fmt.Sprintf("rTimestamp: %s<br>", rTimestamp))
				buffer.WriteString(fmt.Sprintf("sRand: %s<br>", sRand))
				switch sRand  {
					case "ADS_RAND_0":
						AdsID2 = p.ADS_RAND_0
					case "ADS_RAND_1":
						AdsID2 = p.ADS_RAND_1
					case "ADS_RAND_2":
						AdsID2 = p.ADS_RAND_2
					case "ADS_RAND_3":
						AdsID2 = p.ADS_RAND_3
					case "ADS_RAND_4":
						AdsID2 = p.ADS_RAND_4
					case "ADS_RAND_5":
						AdsID2 = p.ADS_RAND_5
					case "ADS_RAND_6":
						AdsID2 = p.ADS_RAND_6
					case "ADS_RAND_7":
						AdsID2 = p.ADS_RAND_7
					case "ADS_RAND_8":
						AdsID2 = p.ADS_RAND_8
					case "ADS_RAND_9":
						AdsID2 = p.ADS_RAND_9
				}
				
				fmt.Fprintf(w, "%v: %s<br>", cKey, AdsID2)
				fmt.Fprintf(w, "RESULTS:<br> %v<br>", buffer.String())
				
				putStrToMemcacheWithoutExp(w,r,cKey,AdsID2)
				
				//display images
				fmt.Fprintf(w, "<iframe src=\"/advertisement?AD_FUNC=GETIMG&LIST=%v\" width=600 height=150 scrolling=no></iframe>", AdsID2)
				fmt.Fprintf(w, "<br>")
				fmt.Fprintf(w, "-------------- END FOUND ----------------<br>")
				
				break
			} else {
				continue
				
			}
		}
			
	}

}
 
var userAccessTemplateMobileRootSearch = template.Must(template.New("userAccessTemplateMobileRootSearch").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Search::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="/static/css/home1.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="/static/css/home2.css">
    <!--<![endif]-->
    <!--[if lt IE 9]>
        <script src="/static/js/html5shiv.js"></script>
    <![endif]-->
 <script type="text/javascript" src="/static/js/soundmanager2.js"></script>
 <script type="text/javascript" src="/static/js/vibrate.js"></script>
 <script src="/static/js/gis6vng.js"></script>
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />	
	  <link href="/static/css/bootstrap.min.css" rel="stylesheet">
	  <link href="/static/css/cd_style.css" rel="stylesheet">	
    <script src="/static/js/pulldown-site-min.js"></script>
	<script src="/static/js/idletimer.js"></script>
	<script type="text/javascript" src="/static/js/dock.js"></script>
	<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
 <script>
     try { Typekit.load(); } catch (e) {}
 </script>
 <script>
 document.title = {{.}} +  '@' + window.location.host;
 //document.title = window.location.host;
 </script>
		<style>
		#channel-area{
			width: 100%;
			position:relative;
			vertical-align: top;
			z-index:111;
			bottom:0px;
			left:0px;
			padding:6px;
			background-color:#44E61F;
		}
		</style>
	<link rel="stylesheet" href="/static/css/blockquote.css" />
 
  </head>
  <body>
<!--header id="head">
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
</header-->
    <div id="layout">
        <a href="#menu" id="menuLink" class="menu-link">
    <span></span>
</a>
 
<div id="menu">
    <div class="pure-menu pure-menu-open">
        <a class="pure-menu-heading" href="/website?q=home"><center>Home</center></a>
 
        <ul class="pure-menu-list">
`))
 
var userAccessTemplateMobileRootAll = template.Must(template.New("userAccessTemplateMobileRootAll").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />   	
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="/static/css/home1.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="/static/css/home2.css">
    <!--<![endif]-->
    <!--[if lt IE 9]>
        <script src="/static/js/html5shiv.js"></script>
    <![endif]-->
 <script type="text/javascript" src="/static/js/soundmanager2.js"></script>
 <script type="text/javascript" src="/static/js/vibrate.js"></script>
 <script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
 <script src="/static/js/gis6vng.js"></script>
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	  <link href="/static/css/bootstrap.min.css" rel="stylesheet">
	  <link href="/static/css/cd_style.css" rel="stylesheet">	
    <script src="/static/js/pulldown-site-min.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	<script src="/static/js/idletimer.js"></script>
	<script type="text/javascript" src="/static/js/dock.js"></script>
	<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
	<link rel="stylesheet" href="/static/css/font-awesome.min.css">
 <script>
     try { Typekit.load(); } catch (e) {}
 </script>
 <script>
 document.title = {{.}} +  '@' + window.location.host;
 //document.title = window.location.host;
 </script>
		<style>
		#channel-area{
			width: 100%;
			position:relative;
			vertical-align: top;
			z-index:111;
			bottom:0px;
			left:0px;
			padding:6px;
			background-color:#44E61F;
		}
		</style>
		<link rel="stylesheet" href="/static/css/blockquote.css" />
	<script type="text/javascript" src="/static/js/ajaxLoader.js"></script>
	
  </head>
  <body>
<!--header id="head">
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
</header-->
    <div id="layout">
        <a href="#menu" id="menuLink" class="menu-link">
    <span></span>
</a>
 
<div id="menu">
    <div class="pure-menu pure-menu-open">
        <a class="pure-menu-heading" href="/website?q=home"><center>Home</center></a>
 
        <ul class="pure-menu-list">
`))
 
var userAccessTemplateMobileDesktop0 = template.Must(template.New("userAccessTemplateMobileDesktop0").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Desktop0::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." /> 	
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="/static/css/home1.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="/static/css/home2.css">
    <!--<![endif]-->
    <!--[if lt IE 9]>
        <script src="/static/js/html5shiv.js"></script>
    <![endif]-->
 <script src="/static/js/gis6vng.js"></script>
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	  <link href="/static/css/bootstrap.min.css" rel="stylesheet">
	  <link href="/static/css/cd_style.css" rel="stylesheet">	
    <script src="/static/js/pulldown-site-min.js"></script>
	<script src="/static/js/idletimer.js"></script>
	<script type="text/javascript" src="/static/js/dock.js"></script>
	<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
 <script>
     try { Typekit.load(); } catch (e) {}
 </script>
 <script>
 document.title = {{.}} +  '@' + window.location.host;
 //document.title = window.location.host;
 </script>
  <link rel="stylesheet" href="/static/css/blockquote.css" />
  </head>
  <body>
 
<!--header id="head">
<!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
</header-->
    <div id="layout">
        <a href="#menu" id="menuLink" class="menu-link">
    <span></span>
</a>
 
<div id="menu">
    <div class="pure-menu pure-menu-open">
        <a class="pure-menu-heading" href="/?q=home"><center>Home</center></a>
 
        <ul class="pure-menu-list">
`))
 
var userAccessTemplateMobile2 = template.Must(template.New("userAccessTemplateMobile2").Parse(`
        <li id="Desktop">
         <a href="{{.}}">   		
             <em><span>Previous</span></em><br>
                <img src="/static/img/arrow_left.png" title="Desktop Switcher" height="40" width="40"/>
			</a>
        </li>
`))
 
var userAccessTemplateDesktop0Head1 = template.Must(template.New("userAccessTemplateDesktop0Head1").Parse(`
<!DOCTYPE HTML>
<html manifest="/cache?q=desktop0&uid={{.}}" lang="en-US" class="no-js" >
  <head>
    <title>Desktop0::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<!-- Global site tag (gtag.js) - Google Analytics -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-87908378-2"></script>
	<script>
	  window.dataLayer = window.dataLayer || [];
	  function gtag(){dataLayer.push(arguments);}
	  gtag('js', new Date());

	  gtag('config', 'UA-87908378-2');
	</script>
 	
`))
 
 
var userAccessTemplateDesktopNHead1 = template.Must(template.New("userAccessTemplateDesktopNHead1").Parse(`
<!DOCTYPE HTML>
<html manifest="/cache?q=desktopN&d={{.}}" lang="en-US" class="no-js" >
  <head>
    <title>Desktop0::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/> 
	<!-- Global site tag (gtag.js) - Google Analytics -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-87908378-2"></script>
	<script>
	  window.dataLayer = window.dataLayer || [];
	  function gtag(){dataLayer.push(arguments);}
	  gtag('js', new Date());

	  gtag('config', 'UA-87908378-2');
	</script>
`))
 
//cache files
var ulocACache = template.Must(template.New("ulocACache").Parse(`CACHE MANIFEST
#{{.}}
https://lh3.googleusercontent.com/kSr4cjtoSAIgMtfCIwP4yTX4rsNwBntXEz2aW9CKKlxCatokvQPkVUKUIQA5K9x7BQCvU9RiALTyPlVfbHRfKzza-OiP
/static/img/ulapph-icons-articles.png
/static/img/text-icon.gif
/static/img/ulapph-icons-slides.png
js/jquery-1.11.1.min.js
/css/localStorage.css
/static/js/localStorage.js
/static/img/uloc.png
/css/dock.css
 
NETWORK:
*
 
FALLBACK:
 
`))
 
//cache files
var ulocBCache = template.Must(template.New("ulocBCache").Parse(`CACHE MANIFEST
#{{.}}
https://lh3.googleusercontent.com/kSr4cjtoSAIgMtfCIwP4yTX4rsNwBntXEz2aW9CKKlxCatokvQPkVUKUIQA5K9x7BQCvU9RiALTyPlVfbHRfKzza-OiP
/static/img/ulapph-icons-articles.png
/static/img/text-icon.gif
/static/img/ulapph-icons-slides.png
/static/img/uloc.png
/css/localStorage.css
/css/bootstrap.min.css
js/jquery-1.11.1.min.js
/static/js/bootstrap.min.js
/static/js/localStorage.js
/css/dock.css
 
NETWORK:
*
 
FALLBACK:
 
`))
 
//cache files (timestamp)
var userAccessCacheDesktop0Part1 = template.Must(template.New("userAccessCacheDesktop0Part1").Parse(`CACHE MANIFEST
#{{.}}
`))
 
//cache files (login wallpaper)
var userAccessCacheDesktop0Part2 = template.Must(template.New("userAccessCacheDesktop0Part2").Parse(`CACHE:
/css/animation-webkit.css
/css/animation-moz.css
/css/dock.css
/css/window.css
/css/jquery-sticklr-1.4-light-color.css
/css/pulldown-tabzilla-min.css
/css/modalWindow.css
/css/msgs.css
/static/img/wireless-icon.png
/static/img/favicon.ico
/static/img/background.gif
/static/img/banaosystems-boot.png
/static/img/spinnerSmall.gif
/static/img/gradient.png
/static/img/wireless-icon-login.png
/static/img/banaosystems-login.png
/static/img/submit.png
/static/img/loadinfologin.gif
/static/img/deleteButton.png
/static/img/deleteButtonPressed.png
/static/img/arrow_left.png
/static/img/arrow_right.png
/css/stickies.css
{{.}}
`))
 
//cache files (main wallpaper)
var userAccessCacheDesktop0Part3 = template.Must(template.New("userAccessCacheDesktop0Part3").Parse(`{{.}}
/static/js/pulldown-site-min.js
/static/js/jquery-1.7.1.min.js
/static/js/jquery-ui-1.8.17.custom.min.js
/static/js/modernizr.js
/static/js/fix-and-clock.js
/static/js/idletimer.js
/static/js/jquery-sticklr-1.4.pack.js
/static/js/jquery.localscroll-min.js
/static/js/dock.js
/static/js/pulldown-tabzilla-dynamic.js
/static/js/tab.js
 
NETWORK:
*
 
FALLBACK:
 
`))
 
var userAccessTemplateDesktop0Part1 = template.Must(template.New("userAccessTemplateDesktop0Part1").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Desktop0::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" type="text/css" media="screen" href="{{.}}"/>
	<!-- Global site tag (gtag.js) - Google Analytics -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-87908378-2"></script>
	<script>
	  window.dataLayer = window.dataLayer || [];
	  function gtag(){dataLayer.push(arguments);}
	  gtag('js', new Date());

	  gtag('config', 'UA-87908378-2');
	</script>
`))
 
var userAccessTemplateDesktop0Part1a = template.Must(template.New("userAccessTemplateDesktop0Part1a").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Desktop0::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<!-- Global site tag (gtag.js) - Google Analytics -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-87908378-2"></script>
	<script>
	  window.dataLayer = window.dataLayer || [];
	  function gtag(){dataLayer.push(arguments);}
	  gtag('js', new Date());

	  gtag('config', 'UA-87908378-2');
	</script>
`))
var userAccessTemplateDesktop0Part2 = template.Must(template.New("userAccessTemplateDesktop0Part2").Parse(`
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />  	
    <script src="/static/js/pulldown-site-min.js"></script>
    <script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	<script src="/static/js/desktop-notifs.js"></script>
    <script type="text/javascript" src="/static/js/jquery-ui-1.8.17.custom.min.js"></script>
	<script type="text/javascript" src="/static/js/modernizr.js"></script>
    <script type="text/javascript" src="/static/js/fix-and-clock.js"></script>
	<script type="text/javascript" src="/static/js/idletimer.js"></script>
	<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/jquery-sticklr-1.4-light-color.css" />
	<script type="text/javascript" src="/static/js/jquery-sticklr-1.4.pack.js"></script>
 
		<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
	<script type="text/javascript" src="/static/js/jquery.localscroll-min.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	<script type="text/javascript" src="/static/js/dock.js"></script>
	<script type="text/javascript" src="/static/js/stickler.js"></script>
	<script type="text/javascript" src="/static/js/keyEvents.js"></script>
	 <script>
	 document.title = {{.}} +  '@' + window.location.host;
	 //document.title = window.location.host;
	 </script>
	<link rel="stylesheet" type="text/css" media="screen" href="/static/css/stickler.css"/>
	
  </head>
  <body>
`))
var userAccessTemplateDesktop0Head2 = template.Must(template.New("userAccessTemplateDesktop0Head2").Parse(`
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
    <script src="/static/js/pulldown-site-min.js"></script>
    <script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	<script src="/static/js/desktop-notifs.js"></script>
    <script type="text/javascript" src="/static/js/jquery-ui-1.8.17.custom.min.js"></script>
	<script type="text/javascript" src="/static/js/modernizr.js"></script>
    <script type="text/javascript" src="/static/js/fix-and-clock.js"></script>
	<script type="text/javascript" src="/static/js/idletimer.js"></script>
	<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/jquery-sticklr-1.4-light-color.css" />
	<script type="text/javascript" src="/static/js/jquery-sticklr-1.4.pack.js"></script>
	<script type="text/javascript" src="/static/js/jquery.localscroll-min.js"></script>
 
		<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	<style>
	   .alertify-log {
		background: {{.STR_FILLER3}};
		//background: rgba(0,0,0,.9);
		padding: 15px;
		border-radius: 4px;
		//color: #FFF;
		text-shadow: -1px -1px 0 rgba(0,0,0,.5);
		}
		.alertify-log-error {
			background: {{.STR_FILLER2}};
			//background: rgba(254,26,0,.9);
		}
		.alertify-log-success {
			background: {{.STR_FILLER1}};
			//background: rgba(92,184,17,.9);
		}
	</style>
	<script type="text/javascript" src="/static/js/dock.js"></script>	
	<script type="text/javascript" src="/static/js/stickler.js"></script>
	<script type="text/javascript" src="/static/js/keyEvents.js"></script>
	 <script>
	 document.title = {{.STR_FILLER4}} +  '@' + window.location.host;
	 //document.title = window.location.host;
	 </script>
	<link rel="stylesheet" type="text/css" media="screen" href="/static/css/stickler.css"/>
 
  </head>
  <body>
 
`))
var userAccessTemplateDesktop0Head2jswm = template.Must(template.New("userAccessTemplateDesktop0Head2jswm").Parse(`
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
    <script src="/static/js/pulldown-site-min.js"></script>
    <script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	<script src="/static/js/desktop-notifs.js"></script>
    <script type="text/javascript" src="/static/js/jquery-ui-1.8.17.custom.min.js"></script>
	<script type="text/javascript" src="/static/js/modernizr.js"></script>
	<script type="text/javascript" src="/static/js/idletimer.js"></script>
	<script type="text/javascript" src="/static/js/jquery.localscroll-min.js"></script>
 
		<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	<style>
	   .alertify-log {
		background: {{.STR_FILLER3}};
		//background: rgba(0,0,0,.9);
		padding: 15px;
		border-radius: 4px;
		//color: #FFF;
		text-shadow: -1px -1px 0 rgba(0,0,0,.5);
		}
		.alertify-log-error {
			background: {{.STR_FILLER2}};
			//background: rgba(254,26,0,.9);
		}
		.alertify-log-success {
			background: {{.STR_FILLER1}};
			//background: rgba(92,184,17,.9);
		}
	</style>
	<script type="text/javascript" src="/static/js/dock.js"></script>	
	<script type="text/javascript" src="/static/js/keyEvents.js"></script>
	 <script>
	 document.title = {{.STR_FILLER4}} +  '@' + window.location.host;
	 //document.title = window.location.host;
	 </script>
	<!-- JSWM -->
	<link rel="stylesheet" type="text/css" href="/static/css/jswm.css" />
	<script type="text/javascript" src="/static/js/jswm-prototype.js"></script>
	<script type="text/javascript" src="/static/js/jswm-scriptaculous.js?dragdrop,effects"></script>
	<script type="text/javascript" src="/static/js/jswm.js"></script>
	<!-- JSWM Firefox theme -->
`))
 
var userAccessTemplateDesktop0Head3jswm = template.Must(template.New("userAccessTemplateDesktop0Head3jswm").Parse(`	
	<script type="text/javascript" src="/static/js/jswm-config.js"></script>
	<script src="/static/js/h5utils.js"></script>
	<script src="/static/js/ping.min.js"></script>
	<script type="text/javascript" charset="utf-8">
		window.onbeforeunload = function (e) {
			e = e || window.event;
 
			// For IE and Firefox prior to version 4
			if (e) {
				e.returnValue = 'ULAPPH Window Manager';
			}
 
			// For Safari
			return 'ULAPPH Window Manager';
		};
	</script>
  </head>
  <body>
`))
 
var stickyMenuOne = template.Must(template.New("stickyMenuOne").Parse(`
    <div id="sticky">
 
        <ul id="example-1" class="sticklr">
            <li>
                <a href="#" class="icon-tag" title="ULAPPH News"></a>
                <ul>
                    <li class="sticklr-title">
                        <a href="/infodb?DB_FUNC=ULAPPH-NEWS" target="ULAPPH News">ULAPPH News</a>
                    </li>
                    <li>
                        <a href="http://www.abs-cbnnews.com/" class="icon-abs-cbn" target="news1">ABS-CBN</a>
                    </li>
                    <li>
                        <a href="http://www.inquirer.net/" class="icon-inquirer" target="news2">Inquirer</a>
                    </li>
                    <li>
                        <a href="http://www.mb.com.ph/" class="icon-mb"  target="news3">Manila Bulletin</a>
                    </li>
                    <li>
                        <a href="http://ph.news.yahoo.com/philippines/" class="icon-yahoo"  target="news4">Yahoo! News</a>
                    </li>
                </ul>
                <ul>
                    <li>
                        <a href="http://news.google.com/" class="icon-google"  target="news5">Google News</a>
                    </li>
                    <li>
                        <a href="http://www.interaksyon.com/" class="icon-tv5"  target="news6">TV5 News</a>
                    </li>
                    <li>
                        <a href="http://www.untvweb.com/news/" class="icon-untv"  target="news7">UNTV News</a>
                    </li>
                    <li>
                        <a href="http://www.philstar.com/" class="icon-star"  target="news8">Phil Star</a>
                    </li>
                    <li>
                        <a href="http://edition.cnn.com/ASIA/" class="icon-cnn"  target="news9">CNN Asia</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="#" class="icon-zoom" title="Search"></a>
                <ul>
                    <li>
						<form action="/search" method="GET" target="search-ulapph">
							<input type="hidden" name="f" value="basic"/>
							<input type="text" name="q" value="" placeholder="Search ULAPPH..." />
						</form>
                    </li>
                </ul>
            </li>
`))
 
var stickyMenuOneLogCal = template.Must(template.New("stickyMenuOneLogCal").Parse(`
            <li>
                <a href="https://www.google.com/calendar/" class="icon-calendar" title="Calendar" target="calendar"></a>
            </li>
            <li>
`))
 
var stickyMenuOneNotifNum1= template.Must(template.New("stickyMenuOneNotifNum1").Parse(`
                <a href="#" class="icon-email" title="Notification"><span class="notification-count">{{.}}</span></a>
                <ul>
`))
 
var stickyMenuOneNotifUID = template.Must(template.New("stickyMenuOneNotifUID").Parse(`
                    <li class="sticklr-title">
                        <a href="/guestbook?UID={{.}}">Notification
`))
 
var stickyMenuOneNotifNum2= template.Must(template.New("stickyMenuOneNotifNum2").Parse(`
({{.}})</a>
                    </li>
`))
 
 
var stickyMenuOneNotifGB = template.Must(template.New("stickyMenuOneNotifGB").Parse(`
{{. | html}}
`))
 
var stickyMenuOneNotifEnd = template.Must(template.New("stickyMenuOneNotifEnd").Parse(`
                </ul>
            </li>
        </ul>
`))
 
var stickyMenuOneMobile = template.Must(template.New("stickyMenuOneMobile").Parse(`
<h3>My Applications</h3>
<a href="/website?q=home">
	<img src="https://lh3.googleusercontent.com/HWsL8pcqxOagXyrB-NaXP-LnM9cjRLQuZeADT5dKsZXla-wr4x3nejJj4DvawdXRsEB2TlusJ5OCI7m3WTABcNVkni_p" height=40 width=40/>
</a>
<a href="/articles">
	<img src="/static/img/ulapph-icons-articles.png" height=40 width=40/>
</a>
<a href="/slides">
	<img src="/static/img/ulapph-icons-slides.png" height=40 width=40/>
</a>
<a href="/media">
	<img src="/static/img/ulapph-icons-media.png" height=40 width=40/>
</a>
<a href="/media?FUNC_CODE=UMP"><img src="/static/img/music-player.png" title="Music Player" width=40 height=40></a>
<a href="/media?FUNC_CODE=MDP"><img src="/static/img/midi-player.png" title="MIDI Player" width=40 height=40></a>
<a href="/media?FUNC_CODE=UVP"><img src="/static/img/video-player.png" title="Video Player" width=40 height=40></a>
<a href="/people?PEOPLE_FUNC=QUICK-VIEW"><img src="/static/img/ulapph-icons-people-icon.png" title="people" width=40 height=40></img></a>
<a href="/chat"><img src="/static/img/chat.png" title="chat"  width=40 height=40></img></a>
<a href="/infodb?DB_FUNC=ULAPPH-NOTIFICATIONS-LOG&SID=ULAPPH-NOTIFICATIONS-LOG"><img src="/static/img/notify-icon.png" width=40 height=40></img></a>
<a href="/uloc"><img src="/static/img/uloc.png" width=40 height=40></img></a>
<a class="button-secondary pure-button" href="" onclick="showTools();return false;">
	<input type="hidden" id="iconsSet" value="set1">
	<img src="/static/img/arrow-green.png" title="More tools..." height="40" width="40"></a>
`))
 
 
var stickyMenuTwoMobile = template.Must(template.New("stickyMenuTwoMobile").Parse(`
`))
 
var stickyMenuThree = template.Must(template.New("stickyMenuThree").Parse(`
        <ul id="example-2" class="sticklr">
            <li>
                <a href="" class="icon-networking32"></a>
                <ul>
                    <li class="sticklr-title">
                        <a href="#page">Google Apps</a>
                    </li>
                    <li>
                        <a href="https://drive.google.com/drive/#my-drive" class="icon-drive" target="drive">Google Drive</a>
                    </li>
                    <li>
                        <a href="http://gmail.google.com/" class="icon-gmail" target="gmail">Google Gmail</a>
                    </li>
                    <li>
                        <a href="http://plus.google.com/" class="icon-plus" target="plus">Google Plus</a>
                    </li>
                    <li>
                        <a href="http://plus.google.com/photos" class="icon-photos" target="photos">Google Photos</a>
                    </li>
                    <li>
                        <a href="https://www.google.com/calendar/" class="icon-cal" target="cal">Google Calendar</a>
                    </li>
                    <li>
                        <a href="https://www.google.com/maps" class="icon-maps" target="maps">Google Maps</a>
                    </li>
                    <li>
                        <a href="https://www.google.com.ph/intl/en/about/products/" class="google-products" target="products">All Google Products</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="http://www.linkedin.com" class="icon-linkedin" title="ULAPPH Linked In" target="linked-in"></a>
            </li>
            <li>
                <a href="http://plus.google.com" class="icon-comm" title="ULAPPH Google Plus" target="gcommunity"></a>
            </li>
            <li>
                <a href="http://www.facebook.com" class="facebook-icon" title="ULAPPH Facebook" target="fcommunity"></a>
            </li>
            <li>
                <a href="http://www.youtube.com" class="youtube-icon" title="ULAPPH Youtube" target="ycommunity"></a>
            </li>
            <li>
				<a href="http://www.twitter.com" class="icon-twitter" title="ULAPPH Twitter" target="tcommunity"></a>
            </li>
            <li>
				<a href="http://gmail.google.com" class="gmail-icon" title="Gmail" target="Google Email"></a>
            </li>
        </ul>
    </div>
`))
 
var googleAdsenseBanner = template.Must(template.New("googleAdsenseBanner").Parse(`
<h3>Sponsored Links</h3>
{{.}}
`))
 
var htmlHeaderModal = template.Must(template.New("htmlHeaderModal").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script> 	
	<style>
	body {
	  background: {{.STR_FILLER3}};
	}
	</style>
  </head>
  <body>
`))
 
var mobileControl = template.Must(template.New("mobileControl").Parse(`
<html>
<head>
    <title>MC::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link href='https://fonts.googleapis.com/css?family=Sansita+One' rel='stylesheet' type='text/css'>
	<link href='/css/mobileControl.css' rel='stylesheet' type='text/css'>
</head>
<body>
  <b>ULAPPH Remote Control</b>
  <br>
  UID: {{.STR_FILLER1}} [ <a href="/logout">LOGOUT</a> ]
  <input type="hidden" id="aUser" value="{{.STR_FILLER1}}">
  <input type="hidden" id="parm" value="{{.STR_FILLER2}}">
  <br>
<p>Touch events: <b>tap</b>, <b>dbltap</b>, <b>swipeup</b>, <b>swipedown</b>, <b>swipeleft</b>, <b>swiperight</b></p>
<dl id="data">
	<dt><strong>Event Name</strong></dt>
	<dd id="eventName"></dd>
	<dt>Event x</dt>
	<dd id="currX"></dd>
	<dt>Event y</dt>
	<dd id="currY"></dd>
	<dt>Swipe Event distance x</dt>
	<dd id="distanceX"></dd>
	<dt>Swipe Event distance y</dt>
	<dd id="distanceY"></dd>
</dl>
<div id="wrapper"><div id="test">Touch me please!</div></div>
<b>Slide Music</b>: <a href="/media?FUNC_CODE=UMP">Select Music</a><br>
<br>
<b>Select ULAPPH Site</b>:
<select id="SITE" onchange="selectSite()"><option value="">Select</option>
{{.HTM_FILLER1}}
</select>
<br>
<br>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="PRESENTER"/>
	<input type="text" name="q" value="" placeholder="Slide" />
	<input type="submit" name="submit" value="GO SLIDE"/>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="ARTICLE"/>
	<input type="text" name="q" value="" placeholder="Article" />
	<input type="submit" name="submit" value="GO ARTICLE"/>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="RC_IN_ULAPPH"/>
	<input type="text" name="q" value="" placeholder="In ULAPPH" />
	<input type="submit" name="submit" value="In ULAPPH"/><b>(List)</b>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="RC_ALL_ULAPPH"/>
	<input type="text" name="q" value="" placeholder="All ULAPPH" />
	<input type="submit" name="submit" value="All ULAPPH"/><b>(Browse only)</b>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="RC_YT_SEARCH"/>
	<input type="text" name="q" value="" placeholder="Search" />
	<input type="submit" name="submit" value="Youtube"/><b>(List)</b>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="RC_YT_SEARCH_ID"/>
	<input type="text" name="q" value="" placeholder="YT ID" />
	<input type="submit" name="submit" value="YID"/>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="RC_WEB_SEARCH"/>
	<input type="text" name="q" value="" placeholder="Search" />
	<input type="submit" name="submit" value="Web"/><b>(List)</b>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="RC_NWS_SEARCH"/>
	<input type="text" name="q" value="" placeholder="Search" />
	<input type="submit" name="submit" value="News"/>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="RC_WIKI_SEARCH"/>
	<input type="text" name="q" value="" placeholder="Search" />
	<input type="submit" name="submit" value="WikiPedia"/>
</form>
<form target="_blank" action="/search" method="GET">
	<input type="hidden" name="f" value="RC_DIC_SEARCH"/>
	<input type="text" name="q" value="" placeholder="Search" />
	<input type="submit" name="submit" value="Wiktionary"/>
</form>
<br>
<button onclick="prevSlide(); return false;">PrevSlide</button> | <button onclick="tapSlide(); return false;">Auto</button> | <button onclick="nextSlide();return false;">NextSlide</button>
<br>
<br>
<button onclick="testCon();return false;">Test Connection</button>
 
<script src="/static/js/bind.polyfill.js"></script>
<script src="/static/js/Tocca.js"></script>
<script src="/static/js/mobileControl.js"></script>
<script src="/static/js/prefixfree.min.js"></script>
</body>
</html>
`))
 
var htmlWidgetCalendar = template.Must(template.New("htmlWidgetCalendar").Parse(`
<iframe src="https://www.google.com/calendar/embed?height=300&amp;wkst=2&amp;bgcolor=%23ffffff&amp;src={{.}}&amp;color=%232952A3&amp;src=%23contacts%40group.v.calendar.google.com&amp;color=%232F6309&amp;src=tl.philippines%23holiday%40group.v.calendar.google.com&amp;color=%23875509&amp;ctz=Asia%2FManila" style="border:solid 1px #777" width="500" height="300" frameborder="0" scrolling="no"></iframe>
`))
var htmlWidgetWallMessage = template.Must(template.New("User").Parse(`
	<div>
		<h1>WALL MESSAGE</h1>
		<b>SEND MESSAGE TO ANOTHER ULAPPH WEBSITE...</b>
		<hr>
		Enter the target ULAPPH Host and target user.
		<form name="account" action="/wall" method="post">
			<select name="remHost"><option value="">Select</option>
			{{.HTM_FILLER1}}
			</select>
			<br>ULAPPH Remote User: <input type="text" name="remUser" value="" maxlength="50"/> Ex: jane@gmail.com
			<input type="hidden" name="srcHost" value="{{.STR_FILLER1}}">
			<input type="hidden" name="uid" value="{{.STR_FILLER2}}">
			<input type="hidden" name="wall_key" value="{{.STR_FILLER3}}">
			<input type="hidden" name="WALL_FUNC" value="SEND_MSG">
			<br>Message:<br>
			<textarea name="wm" rows="4" cols="40" maxlength="500"></textarea>
			<br>ULAPPH Remote Key: <input type="text" name="remKey" value="" maxlength="500"/><br>
			<input type="image" name="submit" src="/static/img/sendmsg.png" with=100 height=40>
		</form>
	</div>
`))
 
var htmlHeaderModalProfile = template.Must(template.New("htmlHeaderModalProfile").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Profile::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
  <style type='text/css'>
		.menu > li {
		display:inline-block;
		font-weight:bold;
		padding:6px 10px;
		cursor:pointer;
		border:2px solid tomato;
		margin:5px;
	}
	.container {
		border:2px solid black;
		margin:5px;
	}
	.container > div {
		display:none;
	}
	.container > div:first-child {
		display:block;
	}
  </style>
 
<script type='text/javascript'>//<![CDATA[
	window.onload=function(){
	var menu_elements = document.querySelectorAll('.menu>li'),
		menu_length = menu_elements.length;
	for (var i = 0; i < menu_length; i++) {
		menu_elements[i].addEventListener('click', function (e) {
			var target = document.querySelector('.container>.' + e.target.classList[0]); // clicked element
			Array.prototype.filter.call(target.parentNode.children, function (siblings) {
				siblings.style.display = 'none'; // hide sibling elements
			});
			target.style.display = 'block'; // show clicked element
		});
	}
	}//]]>
 
</script>
 
  </head>
  <body>
`))
 
var htmlEditorHeader = template.Must(template.New("htmlEditorHeader").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Editor::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" href="/static/css/ace-styles.css" type="text/css" media="screen" charset="utf-8">
    <script async="true" src="/static/js/ace-source-code-pro.js"></script>
    <link rel="stylesheet" href="/static/css/editor-style.css" type="text/css" media="screen" charset="utf-8">
	<script type="text/javascript" charset="utf-8">
		window.onbeforeunload = function (e) {
			e = e || window.event;
 
			// For IE and Firefox prior to version 4
			if (e) {
				e.returnValue = 'ULAPPH Editor';
			}
 
			// For Safari
			return 'ULAPPH Editor';
		};
	</script>
	<!--script src="/static/js/require.js"></script-->
  </head>
  <body>
`))
 
var htmlEditorBody = template.Must(template.New("htmlEditorBody").Parse(`
<div id="optionsPanel" style="position:absolute;height:100%;width:260px">
    <img id="c9-logo" src="/static/img/banaosystems-login.png" style="width: 172px;margin: -9px 30px -12px 51px;">
  <div style="position: absolute; overflow: hidden; top:100px; bottom:0">
  <div style="width: 120%; height:100%; overflow-y: scroll">
 
  <table id="controls">
    <tr>
      <td colspan="2">
		<!--a href="/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWARTICLE&CATEGORY=desktop0">
			<img src="/static/img/new-article.png" title="newArticle" height="40" width="40"></a>
		<a href="/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWSLIDE&CATEGORY=desktop0">
			<img src="/static/img/new-slide.png" title="newSlide" height="40" width="40"></a>
		<a href="/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0">
			<img src="/static/img/new-text.png" title="newTextFile" height="40" width="40"></a>
		<br><a href="/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD">		
			<img src="/static/img/uploader.png" title="multiUpload" height="40" width="40"></a>
		<a href="/slides?CATEGORY=desktop0">
			<img src="https://lh3.googleusercontent.com/4UHg0Hh0yAda2zpJiiAvviD5tUEWqpkCfRAaHLlfqmVmQ6QLjr-FOQU1ZfG8PvRZijmL1NpBkvwwf2bNY_uaPNJRRLv2FQ" title="Slides Home" height="40" width="40"></a>
		<a href="/articles?CATEGORY=desktop0">
			<img src="https://lh3.googleusercontent.com/7G4vkwZb9Y_jc5eZhub_RGUQeK1iMWPyviFL2inWI9yeAtMcPKIsA2VQSTCDZYy5Gujuvr1KKQ5tRJpHnD0CUsz5YwgZsg" title="Articles Home" height="40" width="40"></a>
		<a href="/media?q=desktop0"><img src="/static/img/ulapph-icons-media.png" title="Media Home" height="40" width="40"></a-->
		<a href="#" onclick="env.saveData(0); return false;"><img id="saveicon" src="/static/img/cloud-save.png" width="35" height="35" title="Update Cloud"></a>
      </td>
    </tr>
    <tr>
      <td colspan="2">
	  {{.HTM_FILLER1}}
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Update Cloud" onclick="env.saveData(0); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="View Image" onclick="env.viewImage(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="View Link" onclick="env.viewLink(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Text2Speech" onclick="env.playTTS(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
		<input type="file" id="fileInput">
		<script>
			window.onload = function() {
					var fileInput = document.getElementById('fileInput');
					fileInput.addEventListener('change', function(e) {
						var file = fileInput.files[0];
							var reader = new FileReader();
 
							reader.onload = function(e) {
								session.setValue(reader.result);
							}
							reader.readAsText(file);	
					});
			}
		</script>
      </td>
    </tr>
    <tr>
      <td>
        <label for="doc">Document</label>
      </td><td>
        <select id="doc" size="1">
        </select>
      </td>
    </tr>
    <tr>
      <td >
        <label for="mode">Mode</label>
      </td><td>
        <select id="mode" size="1">
        </select>
      </td>
    </tr>
    <tr>
      <td>
        <label for="split">Split</label>
      </td><td>
        <select id="split" size="1">
          <option value="none">None</option>
          <option value="below">Below</option>
          <option value="beside">Beside</option>
        </select>
      </td>
    </tr>
    <tr>
      <td >
        <label for="theme">Theme</label>
      </td><td>
        <select id="theme" size="1">
 
        </select>
      </td>
    </tr>
    <tr>
      <td>
        <label for="fontsize">Font Size</label>
      </td><td>
        <select id="fontsize" size="1">
          <option value="10px">10px</option>
          <option value="11px">11px</option>
          <option value="12px" selected="selected">12px</option>
          <option value="13px">13px</option>
          <option value="14px">14px</option>
          <option value="16px">16px</option>
          <option value="18px">18px</option>
          <option value="20px">20px</option>
          <option value="24px">24px</option>
		  <option value="30px">30px</option>
		  <option value="34px">34px</option>
		  <option value="40px">40px</option>
		  <option value="50px">50px</option>
		  <option value="60px">60px</option>
        </select>
      </td>
    </tr>
    <tr>
      <td>
        <label for="folding">Code Folding</label>
      </td><td>
        <select id="folding" size="1">
          <option value="manual">manual</option>
          <option value="markbegin" selected="selected">mark begin</option>
          <option value="markbeginend">mark begin and end</option>
        </select>
      </td>
    </tr>
    <tr>
      <td >
        <label for="keybinding">Key Binding</label>
      </td><td>
        <select id="keybinding" size="1">
          <option value="ace">Ace</option>
          <option value="vim">Vim</option>
          <option value="emacs">Emacs</option>
          <option value="custom">Custom</option>
        </select>
      </td>
    </tr>
    <tr>
      <td >
        <label for="soft_wrap">Soft Wrap</label>
      </td><td>
        <select id="soft_wrap" size="1">
          <option value="off">Off</option>
          <option value="40">40 Chars</option>
          <option value="80">80 Chars</option>
          <option value="free">Free</option>
        </select>
      </td>
    </tr>
 
    <tr><td colspan="2">
    <table id="more-controls">
    <tr>
      <td>
        <label for="select_style">Full Line Selection</label>
      </td><td>
        <input type="checkbox" name="select_style" id="select_style" checked>
      </td>
    </tr>
    <tr>
      <td>
        <label for="highlight_active">Highlight Active Line</label>
      </td><td>
        <input type="checkbox" name="highlight_active" id="highlight_active" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="show_hidden">Show Invisibles</label>
      </td><td>
        <input type="checkbox" name="show_hidden" id="show_hidden" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="display_indent_guides">Show Indent Guides</label>
      </td><td>
        <input type="checkbox" name="display_indent_guides" id="display_indent_guides" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="show_hscroll">Persistent HScroll</label>
      </td><td>
        <input type="checkbox" name="show_hscroll" id="show_hscroll">
		<label for="show_hscroll">VScroll</label>
        <input type="checkbox" name="show_vscroll" id="show_vscroll">
      </td>
    </tr>
    <tr>
      <td >
        <label for="animate_scroll">Animate scrolling</label>
      </td><td>
        <input type="checkbox" name="animate_scroll" id="animate_scroll">
      </td>
    </tr>
    <tr>
      <td >
        <label for="show_gutter">Show Gutter</label>
      </td><td>
        <input type="checkbox" id="show_gutter" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="show_print_margin">Show Print Margin</label>
      </td><td>
        <input type="checkbox" id="show_print_margin" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="soft_tab">Use Soft Tab</label>
      </td><td>
        <input type="checkbox" id="soft_tab" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="highlight_selected_word">Highlight selected word</label>
      </td>
      <td>
        <input type="checkbox" id="highlight_selected_word" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="enable_behaviours">Enable Behaviours</label>
      </td>
      <td>
        <input type="checkbox" id="enable_behaviours">
      </td>
    </tr>
    <tr>
      <td >
        <label for="fade_fold_widgets">Fade Fold Widgets</label>
      </td>
      <td>
        <input type="checkbox" id="fade_fold_widgets">
      </td>
    </tr>
    <tr>
      <td >
        <label for="elastic_tabstops">Enable Elastic Tabstops</label>
      </td>
      <td>
        <input type="checkbox" id="elastic_tabstops">
      </td>
    </tr>
    <tr>
      <td >
        <label for="isearch">Incremental Search</label>
      </td>
      <td>
        <input type="checkbox" id="isearch">
      </td>
    </tr>
    <tr>
      <td >
        <label for="highlight_token">Show token info</label>
      </td>
      <td>
        <input type="checkbox" id="highlight_token">
      </td>
    </tr>
    <tr>
      <td >
        <label for="read_only">Read-only</label>
      </td>
      <td>
        <input type="checkbox" id="read_only">
      </td>
    </tr>
    <tr>
      <td >
        <label for="scrollPastEnd">Scroll Past End</label>
      </td>
      <td>
        <input type="checkbox" id="scrollPastEnd" checked>
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Update Cloud" onclick="env.saveData(0); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="View Image" onclick="env.viewImage(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Run Go Program" onclick="env.playCode(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Draw Sequence Diagram" onclick="env.playMermaid(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Generate Drawing" onclick="env.genDraw(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Hide Left Menu" onclick="env.hideLeft(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Edit Snippets" onclick="env.editSnippets(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Formatting Guide" onclick="env.showGuide(); return false;">
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Help Docs" onclick="env.showHelp(); return false;">
      </td>
    </tr>
  </table>
  </td></tr>
  </table>
<div id="docURL"></div>
<section id="fullscreen">
    <img id="ace-logo" src="/static/img/banaosystems-login.png" style="width: 300px;margin: -5px 5px -5px 5px;">
  </section>
  </div>
  </div>
</div>
 
<script>
var e = document.getElementById("fullscreen");
 
e.onclick = function() {
 
	if (RunPrefixMethod(document, "FullScreen") || RunPrefixMethod(document, "IsFullScreen")) {
		RunPrefixMethod(document, "CancelFullScreen");
	}
	else {
		RunPrefixMethod(e, "RequestFullScreen");
	}
 
}
 
var pfx = ["webkit", "moz", "ms", "o", ""];
function RunPrefixMethod(obj, method) {
	
	var p = 0, m, t;
	while (p < pfx.length && !obj[m]) {
		m = method;
		if (pfx[p] == "") {
			m = m.substr(0,1).oLowerCase() + m.substr(1);
		}
		m = pfx[p] + m;
		t = typeof obj[m];
		if (t != "undefined") {
			pfx = [pfx[p]];
			return (t == "function" ? obj[m]() : obj[m]);
		}
		p++;
	}
 
}
 
</script>
<script>
	document.getElementById("optionsPanel").style.background = "{{.STR_FILLER1}}";
</script>
 
`))
 
//initial editor window
var htmlEditorContent = template.Must(template.New("htmlEditorContent").Parse(`
<div id="editor-container">Loading content...</div>
`))
 
var htmlEditorFooter = template.Must(template.New("htmlEditorFooter").Parse(`
  <script src="/static/ace/ace.js" data-ace-base="/static/ace" type="text/javascript" charset="utf-8"></script>
  <script src="/static/js/ace-keybinding-vim.js"></script>
  <script src="/static/js/ace-keybinding-emacs.js"></script>
  <script src="/static/js/ace-demo.js"></script>
  <script type="text/javascript" src="/static/js/keyEvents3.js"></script>
  <script type="text/javascript" charset="utf-8">
    require("kitchen-sink/demo");
  </script>
</body>
</html>
`))
 
 
var htmlEditorTinyMCE = template.Must(template.New("htmlEditorTinyMCE").Parse(`
<!DOCTYPE html>
<html>
<head>
  <script src="//cdn.tinymce.com/4/tinymce.min.js"></script>
  <script>
	tinymce.init({
	  selector: 'textarea',
	  theme: 'modern',
	  toolbar: "save",
	  save_onsavecallback: function () { updateCloud(); },
	  cleanup: true,
	  remove_linebreaks: true,
	  convert_newlines_to_brs: false,
	  inline_styles : false,
	  entity_encoding : "named",
	  entities: '160,nbsp,38,amp,60,lt,62,gt',
	  plugins: [
		'save advlist autolink lists link image charmap print preview hr anchor pagebreak',
		'searchreplace wordcount visualblocks visualchars code autoresize fullscreen',
		'insertdatetime media save table contextmenu directionality',
		'emoticons template paste textcolor colorpicker textpattern imagetools'
	  ],
	  toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
	  toolbar2: 'print preview media | forecolor backcolor emoticons',
	  image_advtab: true,
	  templates: [
		{ title: 'Test template 1', content: 'Test 1' },
		{ title: 'Test template 2', content: 'Test 2' }
	  ],
	  content_css: [
		'//fast.fonts.net/cssapi/e6dc9b99-64fe-4292-ad98-6974f93cd2a2.css',
		'//www.tinymce.com/css/codepen.min.css'
	  ]
	 });
  </script>
</head>
<body onload="myTinyData()">
  <textarea name="content">Loading data from cloud...</textarea>
  <img onclick="updateCloud();" src="/static/img/cloud-save.png">
  <img onclick="toggleView();" src="/static/img/toggle.png">
  <script src="/static/js/tinymce-utils.js"></script>
</body>
</html>
`))
		
var htmlEditorHeaderReader = template.Must(template.New("htmlEditorHeaderReader").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Editor::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" href="/static/css/ace-stylesReader.css" type="text/css" media="screen" charset="utf-8">
    <script async="true" src="/static/js/ace-source-code-pro.js"></script>	
	<link rel="stylesheet" href="/static/css/ace-slider-reset.css"> <!-- CSS reset -->
	<link rel="stylesheet" href="/static/css/ace-slider-style.css"> <!-- Resource style -->
	<script src="/static/js/modernizr.js"></script> <!-- Modernizr -->
	<!--script src="/static/js/require.js"></script-->
  </head>
  <body>
`))
 
//reader mode editor
var htmlEditorBodyReader = template.Must(template.New("htmlEditorBodyReader").Parse(`
<a href="#0" class="cd-btn"><img src="/static/img/ace-slider.png" width="35" height="35"></a>
<br>
<a href="#" onclick="env.saveData(0); return false;"><img id="saveicon" src="/static/img/cloud-save.png" width="35" height="35" title="Update Cloud"></a>
<br>
<a href="#" onclick="env.viewLink(); return false;"><img src="/static/img/viewlink.png" width="35" height="35" title="View Link"></a>
<br>
<a href="#" onclick="env.searchText(); return false;"><img src="/static/img/search.png" width="35" height="35" title="InDoc Search"></a>
<br>
<a href="#" onclick="env.playCode(); return false;"><img src="/static/img/gorun.png" width="35" height="35" title="Run Go Program"></a>
<br>
<a href="#" onclick="env.playJsOtto(); return false;"><img src="/static/img/js.png" width="35" height="35" title="Run Otto JS"></a>
<br>
<a href="#" onclick="env.playMermaid(); return false;"><img src="/static/img/mermaid.png" width="35" height="35" title="Draw Sequence Diagram"></a>
<br>
<a href="#" onclick="env.genDraw(); return false;"><img src="/static/img/draw.png" width="35" height="35" title="Generate Drawing"></a>
<br>
<a href="#" onclick="env.genTimeline(); return false;"><img src="/static/img/timeline.png" width="35" height="35" title="Generate Timeline"></a>
<br>
<a href="#" onclick="env.genMindmap(); return false;"><img src="/static/img/mindmap.png" width="35" height="35" title="Generate Mindmap"></a>
<br>
<a href="#" onclick="env.genTree(); return false;"><img src="/static/img/tree.png" width="35" height="35" title="Generate UI-Tree"></a>
<br>
<a href="/editor?EDIT_FUNC=READER&MEDIA_ID=0&SID=NEWTEXT&CATEGORY=desktop0"><img src="/static/img/new-text.png" title="newTextFile" width="35" height="35"></a>
<br>
<a href="/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWSLIDE&CATEGORY=desktop0"><img src="/static/img/new-slide.png" title="newSlide" width="35" height="35"></a>
<br>
<a href="/editor?EDIT_FUNC=READER&DOC_ID=0&SID=NEWARTICLE&CATEGORY=desktop0"><img src="/static/img/new-article.png" title="newArticle" width="35" height="35"></a>
<br>
<a href="#" onclick="env.textFormat(); return false;"><img src="/static/img/text-formatter.png" title="Text Formatter" width="35" height="35"></a>
<br>
<a href="#" onclick="env.encrypt(); return false;"><img src="/static/img/encrypted.png" title="Encrypt" width="35" height="35"></a>
<br>
<a href="#" onclick="env.decrypt(); return false;"><img src="/static/img/decrypted.png" title="Decrypt" width="35" height="35"></a>
<br>
<a href="#" onclick="env.familyTree(); return false;"><img src="/static/img/fam_tree.png" title="Family Tree" width="35" height="35"></a>
<br>
<a href="#" onclick="env.previousContent(); return false;"><img src="/static/img/arrow_left.png" title="Previous Content" width="35" height="35"></a>
<br>
<a href="#" onclick="env.randomContent(); return false;"><img src="/static/img/random.png" title="Random Content" width="35" height="35"></a>
<br>
<a href="#" onclick="env.nextContent(); return false;"><img src="/static/img/arrow_right.png" title="Next Content" width="35" height="35"></a>
<br>
<a href="#" onclick="env.updCode(); return false;"><img src="/static/img/update.png" width="35" height="35" title="Update Data"></a>
<br>
<a href="#" onclick="env.viewTiny(); return false;"><img src="/static/img/tinymce.png" width="35" height="35" title="View TinyMCE"></a>
<br>
<a href="#" onclick="env.playTTS(); return false;"><img src="/static/img/tts.png" width="35" height="35" title="Text to Speech"></a>
<br>
<a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop" target="Help"><img src="/static/img/help.png" title="Help" width="35" height="35"></a>
			
<main class="cd-main-content">
<div id="editor-container">Loading content...</div>	
</main>
 
 
	<div class="cd-panel from-right">
		<header class="cd-panel-header">
			<h1>View Options</h1>
			<a href="#0" class="cd-panel-close">Close</a>
		</header>
 
		<div class="cd-panel-container" id="optionsPanel">
			<div class="cd-panel-content">
			
  <a href="/" title="ULAPPH Cloud Desktop">
    <img id="c9-logo" src="/static/img/banaosystems-login.png" style="width: 172px;margin: -9px 30px -12px 51px;">
  </a>
 
  <table id="controls">
    <tr>
      <td colspan="2">
		<input type="file" id="fileInput">
		<script>
			window.onload = function() {
					var fileInput = document.getElementById('fileInput');
					fileInput.addEventListener('change', function(e) {
						var file = fileInput.files[0];
							var reader = new FileReader();
 
							reader.onload = function(e) {
								//fileDisplayArea.innerText = reader.result;
								//alert(reader.result);
								session.setValue(reader.result);
							}
							reader.readAsText(file);	
					});
			}
		</script>
      </td>
    </tr>
    <tr>
      <td>
        <label for="doc">Document</label>
      </td><td>
        <select id="doc" size="1">
        </select>
      </td>
    </tr>
    <tr>
      <td >
        <label for="mode">Mode</label>
      </td><td>
        <select id="mode" size="1">
        </select>
      </td>
    </tr>
    <tr>
      <td>
        <label for="split">Split</label>
      </td><td>
        <select id="split" size="1">
          <option value="none">None</option>
          <option value="below">Below</option>
          <option value="beside">Beside</option>
        </select>
      </td>
    </tr>
    <tr>
      <td >
        <label for="theme">Theme</label>
      </td><td>
        <select id="theme" size="1">
 
        </select>
      </td>
    </tr>
    <tr>
      <td>
        <label for="fontsize">Font Size</label>
      </td><td>
        <select id="fontsize" size="1">
          <option value="10px">10px</option>
          <option value="11px">11px</option>
          <option value="12px" selected="selected">12px</option>
          <option value="13px">13px</option>
          <option value="14px">14px</option>
          <option value="16px">16px</option>
          <option value="18px">18px</option>
          <option value="20px">20px</option>
          <option value="24px">24px</option>
		  <option value="30px">30px</option>
		  <option value="34px">34px</option>
		  <option value="40px">40px</option>
		  <option value="50px">50px</option>
		  <option value="60px">60px</option>
        </select>
      </td>
    </tr>
    <tr>
      <td>
        <label for="folding">Code Folding</label>
      </td><td>
        <select id="folding" size="1">
          <option value="manual">manual</option>
          <option value="markbegin" selected="selected">mark begin</option>
          <option value="markbeginend">mark begin and end</option>
        </select>
      </td>
    </tr>
    <tr>
      <td >
        <label for="keybinding">Key Binding</label>
      </td><td>
        <select id="keybinding" size="1">
          <option value="ace">Ace</option>
          <option value="vim">Vim</option>
          <option value="emacs">Emacs</option>
          <option value="custom">Custom</option>
        </select>
      </td>
    </tr>
    <tr>
      <td >
        <label for="soft_wrap">Soft Wrap</label>
      </td><td>
        <select id="soft_wrap" size="1">
          <option value="off">Off</option>
          <option value="40">40 Chars</option>
          <option value="80">80 Chars</option>
          <option value="free">Free</option>
        </select>
      </td>
    </tr>
 
    <tr><td colspan="2">
    <table id="more-controls">
    <tr>
      <td>
        <label for="select_style">Full Line Selection</label>
      </td><td>
        <input type="checkbox" name="select_style" id="select_style" checked>
      </td>
    </tr>
    <tr>
      <td>
        <label for="highlight_active">Highlight Active Line</label>
      </td><td>
        <input type="checkbox" name="highlight_active" id="highlight_active" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="show_hidden">Show Invisibles</label>
      </td><td>
        <input type="checkbox" name="show_hidden" id="show_hidden" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="display_indent_guides">Show Indent Guides</label>
      </td><td>
        <input type="checkbox" name="display_indent_guides" id="display_indent_guides" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="show_hscroll">Persistent HScroll</label>
      </td><td>
        <input type="checkbox" name="show_hscroll" id="show_hscroll">
		<label for="show_hscroll">VScroll</label>
        <input type="checkbox" name="show_vscroll" id="show_vscroll">
      </td>
    </tr>
    <tr>
      <td >
        <label for="animate_scroll">Animate scrolling</label>
      </td><td>
        <input type="checkbox" name="animate_scroll" id="animate_scroll">
      </td>
    </tr>
    <tr>
      <td >
        <label for="show_gutter">Show Gutter</label>
      </td><td>
        <input type="checkbox" id="show_gutter" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="show_print_margin">Show Print Margin</label>
      </td><td>
        <input type="checkbox" id="show_print_margin" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="soft_tab">Use Soft Tab</label>
      </td><td>
        <input type="checkbox" id="soft_tab" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="highlight_selected_word">Highlight selected word</label>
      </td>
      <td>
        <input type="checkbox" id="highlight_selected_word" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="enable_behaviours">Enable Behaviours</label>
      </td>
      <td>
        <input type="checkbox" id="enable_behaviours">
      </td>
    </tr>
    <tr>
      <td >
        <label for="fade_fold_widgets">Fade Fold Widgets</label>
      </td>
      <td>
        <input type="checkbox" id="fade_fold_widgets">
      </td>
    </tr>
    <tr>
      <td >
        <label for="elastic_tabstops">Enable Elastic Tabstops</label>
      </td>
      <td>
        <input type="checkbox" id="elastic_tabstops">
      </td>
    </tr>
    <tr>
      <td >
        <label for="isearch">Incremental Search</label>
      </td>
      <td>
        <input type="checkbox" id="isearch">
      </td>
    </tr>
    <tr>
      <td >
        <label for="highlight_token">Show token info</label>
      </td>
      <td>
        <input type="checkbox" id="highlight_token">
      </td>
    </tr>
    <tr>
      <td >
        <label for="read_only">Read-only</label>
      </td>
      <td>
        <input type="checkbox" id="read_only" checked>
      </td>
    </tr>
    <tr>
      <td >
        <label for="scrollPastEnd">Scroll Past End</label>
      </td>
      <td>
        <input type="checkbox" id="scrollPastEnd" checked>
      </td>
    </tr>
    <tr>
      <td colspan="2">
        <input type="button" value="Edit Snippets" onclick="env.editSnippets()">
      </td>
    </tr>
  </table>
  </td></tr>
  </table>
 
  <div id="docURL"></div>
 
  <a href="/">
    <img id="ace-logo" src="/static/img/banaosystems-login.png" style="width: 134px;margin: 46px 0px 4px 66px;">
  </a>
		</div> <!-- cd-panel-container -->
	</div> <!-- cd-panel -->
</div>
<script>
	document.getElementById("optionsPanel").style.background = "{{.STR_FILLER1}}";
</script>
`))
 
var htmlEditorContentReader = template.Must(template.New("htmlEditorContentReader").Parse(`
`))
 
var htmlEditorFooterReader = template.Must(template.New("htmlEditorFooterReader").Parse(`
  <script src="/static/ace/ace.js" data-ace-base="/static/ace" type="text/javascript" charset="utf-8"></script>
  <script src="/static/js/ace-keybinding-vim.js"></script>
  <script src="/static/js/ace-keybinding-emacs.js"></script>
  <script src="/static/js/ace-demo.js"></script>
  <script type="text/javascript" src="/static/js/keyEvents3.js"></script>
  <script type="text/javascript" charset="utf-8">
    require("kitchen-sink/demo");
  </script>
<script src="/static/js/jquery-2.1.1.js"></script>
<script src="/static/js/ace-slider-main.js"></script> <!-- Resource jQuery -->
</body>
</html>
`))
 
var htmlHeaderModalAds = template.Must(template.New("htmlHeaderModalAds").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Ads::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
	<script src="/static/js/ads.js"></script>
  </head>
  <body>
`))
 
 
var htmlHeaderAdmin = template.Must(template.New("htmlHeaderAdmin").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Admin::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/style-search.css"/>
	<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
	<script src="/static/js/pulldown-site-min.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
	<script src='/static/js/social.js'></script>
  </head>
  <body>
  <!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
`))
 
var htmlHeaderSearchGlow = template.Must(template.New("htmlHeaderSearchGlow").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Search::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
  </head>
  <body>
`))
 
var htmlHeaderFB = template.Must(template.New("htmlHeaderFB").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
  </head>
  <body>
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.5";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
 
`))
 
var htmlQuickSearchTool = template.Must(template.New("htmlQuickSearchTool").Parse(`
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Quick Launch::- www.ulapph.com - ULAPPH Cloud Desktop</title>
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/mobiSearch.css" />
<link rel="stylesheet" media="screen,projection,tv" href="/static/css/search_glowing.css"/>
</head>
<body>
	<form action="/search" method="GET" target="qv1">
		<input type="hidden" name="f" value="TDSSLIDE"/>
		<input type="text" name="q" value="" placeholder="Slide Number" />
		<input type="submit" name="submit" value="View Slide"/>
	</form>
	<form action="/search" method="GET" target="qv2">
		<input type="hidden" name="f" value="TDSARTL"/>
		<input type="text" name="q" value="" placeholder="Article Number" />
		<input type="submit" name="submit" value="View Article"/>
	</form>
	<form action="/search" method="GET" target="qv3">
		<input type="hidden" name="f" value="TDSMEDIA"/>
		<input type="text" name="q" value="" placeholder="Media Number" />
		<input type="submit" name="submit" value="View Media"/>
	</form>	
	<form action="/search" method="GET" target="qv1">
		<input type="hidden" name="f" value="TDSSLIDE-UPD"/>
		<input type="text" name="q" value="" placeholder="Slide Number" />
		<input type="submit" name="submit" value="Update Slide"/>
	</form>
	<form action="/search" method="GET" target="qv2">
		<input type="hidden" name="f" value="TDSARTL-UPD"/>
		<input type="text" name="q" value="" placeholder="Article Number" />
		<input type="submit" name="submit" value="Update Article"/>
	</form>
	<form action="/search" method="GET" target="qv3">
		<input type="hidden" name="f" value="TDSMEDIA-UPD"/>
		<input type="text" name="q" value="" placeholder="Media Number" />
		<input type="submit" name="submit" value="Update Media"/>
	</form>
</body>
</html>	
`))
 
 
 
var htmlBodySearch = template.Must(template.New("htmlBodySearch").Parse(`
	<div class="success2"><b>Search {{.}}</b></div>
 
    <div class="tabs">
 
       <div class="tab">
           <input type="radio" id="tab-1" name="tab-group-1" checked>
           <label for="tab-1">Basic</label>
 
           <div class="content">
			<h3>Basic Search</h3>
				<form action="/search" method="GET">
				<input type="hidden" name="f" value="basic"/>
				<input type="search" name="q" value="" placeholder="Search" />
			</form>
			<br>You can type a keyword here. Example, type "ULAPPH" and press Enter.
           </div>
       </div>
 
       <div class="tab">
           <input type="radio" id="tab-2" name="tab-group-1">
           <label for="tab-2">Expert</label>
 
           <div class="content">
               <p>Stuff for Expert</p>
           </div>
       </div>
 
        <div class="tab">
           <input type="radio" id="tab-3" name="tab-group-1">
           <label for="tab-3">Google</label>
 
           <div class="content">
			<h3>Google Search</h3>
				<form action="https://www.google.com/search" method="GET" target="google-search">
				<input type="search" name="q" value="" placeholder="Search" />
			</form>
           </div>
       </div>
 
    </div>
`))
 
 
var htmlBodySearchGlow = template.Must(template.New("htmlBodySearchGlow").Parse(`
	<section class="webdesigntuts-workshop">
		<img src="/static/img/search-banner.png" with=400 height=250 title="ULAPPH Search">
		<form action="/search" method="GET" target="ulapph{{.}}">		
			<input type="search" name="s" value="" placeholder="Enter keyword..." autofocus="autofocus">
			<input type="hidden" name="f" value="glow2"/>
			<br>
			<input type="hidden" name="t" value="In ULAPPH">
			<!--input type="submit" name="t" value="All ULAPPH Sites">
			<input type="submit" name="t" value="Query Plus">
			<input type="submit" name="t" value="Query Web">
			<input type="submit" name="t2" value="In Google">
			<input type="submit" name="t8" value="In Youtube">
			<input type="submit" name="t14" value="In Wikipedia">
			<input type="submit" name="t3" value="In Bing">
			<input type="submit" name="t4" value="In Ask">
			<input type="submit" name="t5" value="In AOL">
			<input type="submit" name="t6" value="In Dogpile">
			<input type="submit" name="t7" value="In Baidu">
			<input type="submit" name="t9" value="In i-Archive">
			<input type="submit" name="t10" value="In Khan">
			<input type="submit" name="t11" value="In Gutenberg">
			<input type="submit" name="t12" value="In WorldCat">
			<input type="submit" name="t13" value="In e-Lib"-->
		</form>	
	</section>
`))
 
var htmlBodySearchGlowSelf = template.Must(template.New("htmlBodySearchGlowSelf").Parse(`
	<section class="webdesigntuts-workshop">
		<img src="/static/img/search-banner.png" with=400 height=250 title="ULAPPH Search">
		<form action="/search" method="GET">		
			<input type="search" name="s" value="" placeholder="Enter keyword..." autofocus="autofocus">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="i" value="yes"/>
			<br>
			<input type="hidden" name="t" value="In ULAPPH">
			<!--input type="submit" name="t" value="All ULAPPH Sites">
			<input type="submit" name="t" value="Query Plus">
			<input type="submit" name="t" value="Query Web">
			<input type="submit" name="t2" value="In Google">
			<input type="submit" name="t8" value="In Youtube">
			<input type="submit" name="t14" value="In Wikipedia">
			<input type="submit" name="t3" value="In Bing">
			<input type="submit" name="t4" value="In Ask">
			<input type="submit" name="t5" value="In AOL">
			<input type="submit" name="t6" value="In Dogpile">
			<input type="submit" name="t7" value="In Baidu">
			<input type="submit" name="t9" value="In i-Archive">
			<input type="submit" name="t10" value="In Khan">
			<input type="submit" name="t11" value="In Gutenberg">
			<input type="submit" name="t12" value="In WorldCat">
			<input type="submit" name="t13" value="In e-Lib"-->
		</form>	
	</section>
`))

//D0042
var htmlBodySearchGlowExt = template.Must(template.New("htmlBodySearchGlowExt").Parse(`
	<section class="webdesigntuts-workshop">
		<img src="/static/img/search-banner.png" with=400 height=250 title="ULAPPH Search">
		<form action="/search" method="GET">		
			<input type="search" name="s" value="" placeholder="Enter keyword..." autofocus="autofocus">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="i" value="ext"/>
			<input type="hidden" name="t" value="All ULAPPH Sites"/>
			<input type="submit" value="Search Worldwide">
			<!--input type="submit" name="t" value="Query Plus">
			<input type="submit" name="t" value="Query Web">
			<input type="submit" name="t2" value="In Google">
			<input type="submit" name="t8" value="In Youtube">
			<input type="submit" name="t14" value="In Wikipedia">
			<input type="submit" name="t3" value="In Bing">
			<input type="submit" name="t4" value="In Ask">
			<input type="submit" name="t5" value="In AOL">
			<input type="submit" name="t6" value="In Dogpile">
			<input type="submit" name="t7" value="In Baidu">
			<input type="submit" name="t9" value="In i-Archive">
			<input type="submit" name="t10" value="In Khan">
			<input type="submit" name="t11" value="In Gutenberg">
			<input type="submit" name="t12" value="In WorldCat">
			<input type="submit" name="t13" value="In e-Lib"-->
		</form>	
	</section>
`))
 
//search?s=%v&f=glow2&t=Query Plus
 
var htmlBodySearchAPIplus = template.Must(template.New("htmlBodySearchAPIplus").Parse(`
	<a name="plus"></a>
	<section class="webdesigntuts-workshop">
		<form action="/search" method="GET" target="plus">		
			<input type="search" name="s" value="" placeholder="Enter keyword...">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="UID" value="{{.}}"/>
			<input type="submit" name="t" value="Query Plus">
		</form>	
	</section>
`))
 
 
var htmlBodySearchAPIImages = template.Must(template.New("htmlBodySearchAPIImages").Parse(`
	<a name="image"></a>
	<section class="webdesigntuts-workshop">
		<form action="/search" method="GET" target="images">		
			<input type="search" name="s" value="" placeholder="Enter keyword...">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="UID" value="{{.}}"/>
			<input type="submit" name="t" value="Query Images">
		</form>	
	</section>
`))
 
var htmlBodySearchInternal = template.Must(template.New("htmlBodySearchInternal").Parse(`
	<section class="webdesigntuts-workshop">
		<form action="/search" method="GET" target="internal">		
			<input type="search" name="s" value="{{.}}" placeholder="Enter keyword...">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="i" value="yes"/>
			<input type="submit" name="t" value="In ULAPPH">
		</form>	
	</section>
`))
 
var htmlInDocSearch = template.Must(template.New("htmlInDocSearch").Parse(`
	<center>
	<h1>In Document Search</h1>
	<section class="webdesigntuts-workshop">
		<form action="/search" method="GET">		
			<input type="search" name="q" value="{{.STR_FILLER3}}" placeholder="Enter keyword..." autofocus="autofocus">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="IDX" value="{{.STR_FILLER1}}"/>
			<input type="hidden" name="SID" value="{{.STR_FILLER2}}"/>
			<input type="submit" name="t" value="InDoc">
		</form>
	</section>
	<!--br>
	<section class="webdesigntuts-workshop">
		<form action="/search" method="GET">		
			<input type="search" name="s" value="{{.STR_FILLER3}}" placeholder="Enter keyword...">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="i" value="no"/>
			<input type="submit" name="t" value="In ULAPPH">
		</form>	
	</section-->
	<!--br>
	<section class="webdesigntuts-workshop">
		<form action="/search" method="GET">		
			<input type="search" name="s" value="{{.STR_FILLER3}}" placeholder="Enter keyword...">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="i" value="no"/>
			<input type="submit" name="t" value="All ULAPPH Sites">
		</form>	
	</section-->
	<h1>Edit Document</h1>
	<input type="submit" onclick="window.open('/editor?EDIT_FUNC=READER&SID={{.STR_FILLER2}}');" title="Edit Document" value="Edit Document">
	</center>
`))
 
var htmlBodySearchExternal = template.Must(template.New("htmlBodySearchExternal").Parse(`
	<section class="webdesigntuts-workshop">
		<form action="/search" method="GET" target="external">		
			<input type="search" name="s" value="{{.}}" placeholder="Enter keyword...">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="i" value="yes"/>
			<input type="submit" name="t" value="All ULAPPH Sites">
		</form>	
	</section>
`))
 
var htmlBodySearchGoogle = template.Must(template.New("htmlBodySearchGoogle").Parse(`
	<form action="/search" method="GET" target="qv3">
		<input type="hidden" name="f" value="EXT-GOOGLE"/>
		<input type="search" name="q" value="" placeholder="Enter keyword" />
		<input type="submit" name="submit" value="Search Google"/>
	</form>
`))

var htmlBodySearchWikipedia = template.Must(template.New("htmlBodySearchGoogle").Parse(`
	<form action="/search" method="GET" target="qv3">
		<input type="hidden" name="f" value="EXT-WIKIPEDIA"/>
		<input type="search" name="q" value="" placeholder="Enter keyword" />
		<input type="submit" name="submit" value="Search Wikipedia"/>
	</form>
`))
 
var htmlBodySearchAPIweb = template.Must(template.New("htmlBodySearchAPIweb").Parse(`
	<a name="web"></a>
	<section class="webdesigntuts-workshop">
		<form action="/search" method="GET" target="web">		
			<input type="search" name="s" value="" placeholder="Enter keyword...">
			<input type="hidden" name="f" value="glow2"/>
			<input type="hidden" name="UID" value="{{.}}"/>
			<input type="submit" name="t" value="Query Web">
		</form>	
	</section>
`))
 
var htmlQuickSearchForms = template.Must(template.New("htmlQuickSearchForms").Parse(`
	<form action="/search" method="GET" target="qv1">
		<input type="hidden" name="f" value="TDSSLIDE"/>
		<input type="search" name="q" value="" placeholder="Slide Number" autofocus="autofocus"/>
		<input type="submit" name="submit" value="View Slide"/>
	</form>
	<form action="/search" method="GET" target="qv2">
		<input type="hidden" name="f" value="TDSARTL"/>
		<input type="search" name="q" value="" placeholder="Article Number" />
		<input type="submit" name="submit" value="View Article"/>
	</form>
	<form action="/search" method="GET" target="qv3">
		<input type="hidden" name="f" value="TDSMEDIA"/>
		<input type="search" name="q" value="" placeholder="Media Number" />
		<input type="submit" name="submit" value="View Media"/>
	</form>	
	<form action="/search" method="GET" target="qv1">
		<input type="hidden" name="f" value="TDSSLIDE-UPD"/>
		<input type="search" name="q" value="" placeholder="Slide Number" />
		<input type="submit" name="submit" value="Update Slide"/>
	</form>
	<form action="/search" method="GET" target="qv2">
		<input type="hidden" name="f" value="TDSARTL-UPD"/>
		<input type="search" name="q" value="" placeholder="Article Number" />
		<input type="submit" name="submit" value="Update Article"/>
	</form>
	<form action="/search" method="GET" target="qv3">
		<input type="hidden" name="f" value="TDSMEDIA-UPD"/>
		<input type="search" name="q" value="" placeholder="Media Number" />
		<input type="submit" name="submit" value="Update Media"/>
	</form>
`))
 
var htmlFooterSearch = template.Must(template.New("htmlFooterSearch").Parse(`
	<hr>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->	
	<!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
	<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
`))
var htmlHeaderGB = template.Must(template.New("htmlHeaderGB").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Guestbook::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="/static/css/home1.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="/static/css/home2.css">
    <!--<![endif]-->
    <!--[if lt IE 9]>
        <script src="/static/js/html5shiv.js"></script>
    <![endif]-->
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
	<script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>	
  <script src="/static/js/jquery.linkify-1.0.js"></script>
  <script type="text/javascript" src="/static/js/guestbook.js"></script>
  <script>
    $(function(){
      jQuery('#warning').remove();
      jQuery('body').linkify({
          handleLinks: function (links) {
              links
                  .css('background', '#ff0')
                  //.after(function (i) { return ' (link '+(i+1)+')'; });
            }
        });
    });
  </script>
	<link rel="stylesheet" href="/static/css/blockquote2.css">
	<style>
	textarea {
	   font-size: 25px;  
	}
	</style>
  </head>
  <body>
`))
				
var htmlHeaderGBSocial = template.Must(template.New("htmlHeaderGBSocial").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Discussion::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
	<script src="/static/lib/js/commento/commento.js"></script>
    <style>
    .content-wrapper {
        margin-top: 25px;
        width: 100%;
        display: flex;
        justify-content: center;
    }

    .content {
        width: 65%;
    }

    h3 {
        text-align: center;
    }

    @media screen and (max-width: 1024px) {
        .content {
            width: 90%;
        }
    }
    </style>
  </head>
  <body onload="geoloc()">
	<input type="hidden" id="uid" value="{{.STR_FILLER1}}"/>
	<input type="hidden" id="latlon" value="{{.STR_FILLER5}}"/>
    <div class="content-wrapper">
        <div class="content">
			<h3>{{.STR_FILLER4}} ({{.STR_FILLER3}})</h3>
			<p>Join the discussion by sharing your comments for this <a href="{{.STR_FILLER2}}">content</a>! Please note that your comment will be connected to user <b>{{.STR_FILLER1}}</b> and location is as shown in this <b><a href="#" id="myloc">map</a></b>. You may also <a href="/comments?C_FUNC=export_comments&SID={{.STR_FILLER3}}&TITLE={{.STR_FILLER4}}"><b>export</b></a> these comments into a spreadsheet.</p>
            <div id="commento">
            </div>
        </div>
    </div>
	<br>
	<center>
		Powered by <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>
	</center>
  </body>
    <!--Comments-->
	<script>
	var root = location.protocol + '//' + location.host;
	console.log("root:"+root);
	Commento.init({
			serverUrl: root,
			honeypot: true
		});
	</script>
	
	<!--Geolocation-->
	<script>
	function geoloc() {
		if (navigator.geolocation) {
		  navigator.geolocation.getCurrentPosition(success, error);
		} else {
		  console.log("Geo location not supported!");
		}	
	}
	
	function success(position) {
		document.getElementById("latlon").value = position.coords.latitude + "," + position.coords.longitude;
		document.getElementById("myloc").href= "https://www.google.com.ph/maps/place/" + document.getElementById("latlon").value;
		console.log(document.getElementById("latlon").value);
		return;
	};

	function error(msg) {
		console.log("Geo location not granted by user!");
		return;
	};

	</script>
</html>
`))
var htmlHeaderGBChannel = template.Must(template.New("htmlHeaderGBChannel").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Guestbook::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="/static/css/home1.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="/static/css/home2.css">
    <!--<![endif]-->
    <!--[if lt IE 9]>
        <script src="/static/js/html5shiv.js"></script>
    <![endif]-->
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
	<script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	<!--script type="text/javascript" src="/static/js/vibrate.js"></script-->
  <script src="/static/js/jquery.linkify-1.0.js"></script>
  <script type="text/javascript" src="/static/js/guestbook.js"></script>
  <script>
    $(function(){
      jQuery('#warning').remove();
      jQuery('body').linkify({
          handleLinks: function (links) {
              links
                  .css('background', '#ff0')
                  //.after(function (i) { return ' (link '+(i+1)+')'; });
            }
        });
    });
  </script>
        <style>
        textarea {
           font-size: 25px;
        }
        </style>
	<link rel="stylesheet" href="/static/css/blockquote2.css">
  <body>
	<input type="hidden" id="chan-id" value="{{.STR_FILLER1}}">
    <input type="hidden" id="ringtone" value="{{.STR_FILLER2}}">
`))
 
var htmlHeaderModalRefresh = template.Must(template.New("htmlHeaderModalRefresh").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
	<meta http-equiv="refresh" content="{{.}}" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>	
  <link rel="stylesheet" href="/static/css/blockquote.css" />
  <link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
  </head>
  <body>
`))
 
var htmlHeaderModalRefreshNo = template.Must(template.New("htmlHeaderModalRefreshNo").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script> 	
<link rel="stylesheet" href="/static/css/blockquote.css" />
  </head>
  <body>
`))
 
var htmlHeaderModalRefreshNoHome = template.Must(template.New("htmlHeaderModalRefreshNoHome").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
	<link rel="stylesheet" href="/static/css/bootstrap.min.css">
	<script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
	<script src="/static/js/bootstrap.min.js"></script>
	<script type="text/javascript" src="/static/js/keyEvents2.js"></script>
    <link rel="stylesheet" href="/static/css/blockquote.css" />
	<script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	<script src="/static/js/ping.min.js"></script>
	<script type="text/javascript" src="/static/js/home-stat.js"></script>
	<script type="text/javascript" src="/static/lib/js/echarts/echarts.min.js"></script>
	<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
  </head>
  <!--body onload="homejs()"-->
  <body>
`))
 
var htmlHeaderModalBlink = template.Must(template.New("htmlHeaderModalBlink").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
	<meta http-equiv="refresh" content="{{.}}" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
	<style type="text/css">
	.blink_me {
		-webkit-animation-name: blinker;
		-webkit-animation-duration: 1s;
		-webkit-animation-timing-function: linear;
		-webkit-animation-iteration-count: infinite;
		
		-moz-animation-name: blinker;
		-moz-animation-duration: 1s;
		-moz-animation-timing-function: linear;
		-moz-animation-iteration-count: infinite;
		
		animation-name: blinker;
		animation-duration: 1s;
		animation-timing-function: linear;
		animation-iteration-count: infinite;
	}
 
	@-moz-keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
 
	@-webkit-keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
 
	@keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
	</style> 	
  </head>
`))
 
var htmlHeaderModalBlinkColor = template.Must(template.New("htmlHeaderModalBlinkColor").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
	<meta http-equiv="refresh" content="{{.}}" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
	<script src="/static/js/idletimer.js"></script>
	<style type="text/css">
	.blink_me {
		-webkit-animation-name: blinker;
		-webkit-animation-duration: 1s;
		-webkit-animation-timing-function: linear;
		-webkit-animation-iteration-count: infinite;
		
		-moz-animation-name: blinker;
		-moz-animation-duration: 1s;
		-moz-animation-timing-function: linear;
		-moz-animation-iteration-count: infinite;
		
		animation-name: blinker;
		animation-duration: 1s;
		animation-timing-function: linear;
		animation-iteration-count: infinite;
	}
 
	@-moz-keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
 
	@-webkit-keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
 
	@keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
	</style> 	
  </head>
  <body>
`))
 
var htmlHeaderGoogleMaps = template.Must(template.New("htmlHeaderGoogleMaps").Parse(htmlHeaderGoogleMapsC))
 
const htmlHeaderGoogleMapsC = `
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Google Maps::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
	<meta http-equiv="refresh" content="{{.}}" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<script type='text/javascript' src='https://code.jquery.com/jquery-1.4.4.min.js'></script>
`
 
var htmlHeaderGoogleMapsJSA = template.Must(template.New("htmlHeaderGoogleMapsJSA").Parse(htmlHeaderGoogleMapsJSAC))
 
const htmlHeaderGoogleMapsJSAC = `
//
    function initialize() {
        var map_options = {
            center: new google.maps.LatLng(14.676041,121.043700),
            zoom: 14,
            //mapTypeId: google.maps.MapTypeId.ROADMAP
			mapTypeId: google.maps.MapTypeId.TERRAIN
        };
 
        var google_map = new google.maps.Map(document.getElementById("map_canvas"), map_options);
 
        var info_window = new google.maps.InfoWindow({
            content: 'loading'
        });
 
        var t = [];
        var x = [];
        var y = [];
        var h = [];
`
 
 
var htmlHeaderGoogleMapsJSB = template.Must(template.New("htmlHeaderGoogleMapsJSB").Parse(htmlHeaderGoogleMapsJSBC))
 
const htmlHeaderGoogleMapsJSBC = `
//
        var i = 0;
        for ( item in t ) {
            var m = new google.maps.Marker({
                map:       google_map,
                animation: google.maps.Animation.DROP,
                title:     t[i],
                position:  new google.maps.LatLng(x[i],y[i]),
                html:      h[i]
            });
 
            google.maps.event.addListener(m, 'click', function() {
                info_window.setContent(this.html);
                info_window.open(google_map, this);
            });
            i++;
        }
    }
initialize();
});//]]>
</script>
  </head>
  <body>
  <!--script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyAV_qKxWhNC_B69MqrfypgsBe8evn6sa00"></script-->
  <script src="https://maps.google.com/maps/api/js?sensor=false" type="text/javascript"></script>
  <div id="map_canvas" style="width:800px;height:1000px;">Google Map</div>
`
 
var htmlHeaderModalBlinkColorLinkify = template.Must(template.New("htmlHeaderModalBlinkColorLinkify").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
	<meta http-equiv="refresh" content="{{.}}" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css"/>
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/msgs.css" />
	<link rel="stylesheet" href="/static/css/calendarview.css" type="text/css" />
  <link rel="stylesheet" href="/static/css/bootstrap.min.css">
  <script type="text/javascript" language="javascript" src="/static/js/jquery-1.11.1.min.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
	<script src="/static/js/idletimer.js"></script>
	<script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
    <script type="text/javascript" src="/static/js/log.js"></script> 	
	  <script src="/static/js/jquery.linkify-1.0.js"></script>
	  <script>
		$(function(){
		  jQuery('#warning').remove();
		  jQuery('body').linkify({
			  handleLinks: function (links) {
				  links
					  .css('background', '#ff0')
					  //.after(function (i) { return ' (link '+(i+1)+')'; });
				}
			});
		});
	  </script>
    <script src="/static/js/prototype.js" type="text/javascript"></script>
    <script src="/static/js/calendarview.js" type="text/javascript"></script>
    <script type="text/javascript">
      window.onload = function() {
        Calendar.setup({
          dateField     : 'date',
          parentElement : 'calendar'
        })
      }
    </script>
	<style type="text/css">
	.blink_me {
		-webkit-animation-name: blinker;
		-webkit-animation-duration: 1s;
		-webkit-animation-timing-function: linear;
		-webkit-animation-iteration-count: infinite;
		
		-moz-animation-name: blinker;
		-moz-animation-duration: 1s;
		-moz-animation-timing-function: linear;
		-moz-animation-iteration-count: infinite;
		
		animation-name: blinker;
		animation-duration: 1s;
		animation-timing-function: linear;
		animation-iteration-count: infinite;
	}
 
	@-moz-keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
 
	@-webkit-keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
 
	@keyframes blinker {
		0% { opacity: 1.0; }
		50% { opacity: 0.0; }
		100% { opacity: 1.0; }
	}
	</style> 	
  </head>
  <body>
`))
 
 
var htmlFooterBasic = template.Must(template.New("htmlFooterBasic").Parse(`
  </body>
</html>
`))
 
var htmlFooterModal = template.Must(template.New("htmlFooterModal").Parse(`
    <br>
	<br>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->
	<!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
	<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.}}"></script-->
  </body>
</html>
`))
 
var htmlFooterModalKnock = template.Must(template.New("htmlFooterModal").Parse(`
	<script>
		function knock(uid) {
			var kurl = location.protocol + '//' + location.host + '/guestbook?GB_FUNC=KNOCK&UID=' + uid;
			
			if (window.XMLHttpRequest)
			  {// code for IE7+, Firefox, Chrome, Opera, Safari
			  cxhr2=new XMLHttpRequest();
			  }
			else
			  {// code for IE6, IE5
			  cxhr2=new ActiveXObject('MSXML2.XMLHTTP.3.0');
			  }
			cxhr2.open("GET",kurl, true);
			cxhr2.send();
			alert("Knock knock has been sent!");
		};
	</script>
    <br>
	<br>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->
	<!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
	<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.}}"></script-->
  </body>
</html>
`))
 
var textCSSBody = template.Must(template.New("textCSSBody").Parse(`
<!doctype html>
<html>
	<head>
		<title>Text Formatter::www.ulapph.com - ULAPPH Cloud Desktop</title>
		<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	</head>
	<body>
			<form action="/editor?EDIT_FUNC=TEXT-CSS" method="post">
				Text: <br><textarea  name="TEXT" maxlength="2200" rows="8" cols="70">{{.}}</textarea><br>
				<input type="hidden" name="EDIT_MODE" value="NEW-CSS"/>
				<br>
				Style: <select name="CSS-TYPE">
				  <option value=".3d">3D Text</option>
				  <option value=".letterpress">Letterpress</option>
				  <option value=".trent">Trent</option>
				  <option value=".world">World</option>
				  <option value=".boardgame">Boardgame</option>
				  <option value=".boardgame2">Boardgame2</option>
				  <option value=".boardgame3">Boardgame3</option>
				  <option value=".boardgame4">Boardgame4</option>
				  <option value=".boardgame5">Boardgame5</option>
				  <option value=".boardgame6">Boardgame6</option>
				  <option value=".gloss">Gloss</option>
				  <option value=".stitched">Stitched</option>
				  <option value=".cuopon">Cuopon</option>
				  <option value=".drawn">Drawn</option>	
				  <option value=".codepen1">Code Pen 1</option>
				  <option value=".codepen2">Code Pen 2</option>
				  <option value=".codepen3">Code Pen 3</option>
				  <option value=".codepen4">Code Pen 4</option>
				  <option value=".slashed">Slashed</option>	
				  <option value=".floor">Floor</option>
				  <option value=".starwars">Star Wars</option>
				</select><br>
				Align: <select name="CSS-ALIGN">
				  <option value="left">Left-align text</option>
				  <option value="right">Right-align text</option>
				  <option value="center">Center-align text</option>
				  <option value="justify">Stretches the lines</option>
				</select><br>				
				<input type="submit" name="submit" value="Format Text"/>
			</form>
	</body>
</html>
`))
 
var textCountdownGet = template.Must(template.New("textCountdownGet").Parse(`
<!doctype html>
<html>
	<head>
		<title>Countdown Timer::www.ulapph.com - ULAPPH Cloud Desktop</title>
		<link rel="shortcut icon" href="/static/img/favicon.ico"/>
		<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
	</head>
	<body onload="addMinutes(0);">
			<form action="/tools?FUNC=WIDGET&t=CountDownWidget" method="post">
				Title: <br><input type="text" id="title" name="title" value="My Countdown" maxlength=200/>Sample: My Project Deadline<br>
				Date: <br><input type="text" id="thisdate" name="date" value="" maxlength=200/> Sample: 10/17/2016 05:00:00 AM<br>
				<input type="text" id="cmins" name="cmins" maxlength="3">		
				<input type="submit" id="cdSubmit" name="submit" value="Countdown"/>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(-1);return false;">+Custom</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(5);return false;">+5M</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(10);return false;">+10M</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(15);return false;">+15M</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(20);return false;">+20M</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(30);return false;">+30M</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(40);return false;">+40M</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(59);return false;">+60M</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(90);return false;">+90M</a>
				<a href="#" class="button button-block button-rounded button-royal button-large" onClick="addMinutes(120);return false;">+120M</a>
			</form>
	</body>
	<script type="text/javascript">
		var urlParams;
		var match,
				pl     = /\+/g,  // Regex for replacing addition symbol with a space
				search = /([^&=]+)=?([^&]*)/g,
				decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
				query  = window.location.search.substring(1);

		urlParams = {};
		while (match = search.exec(query))
		   urlParams[decode(match[1])] = decode(match[2]);
	    //sent from url if available
		if (urlParams["title"] != "" && urlParams["title"] != undefined) {
			document.getElementById('title').value = urlParams["title"];
		}
		if (urlParams["cmins"] != "" && urlParams["cmins"] != undefined) {
			document.getElementById('cmins').value = urlParams["cmins"];
		}
		var input = document.getElementById("cmins");
		input.addEventListener("keyup", function(event) {
		  if (event.keyCode === 13) {
		   event.preventDefault();
		   //document.getElementById("cdSubmit").click();
			var custMins = document.getElementById('cmins').value;
			if (custMins != "" && custMins != undefined) {
				addmins = parseInt(custMins);
				addMinutes(addmins);
			}
		  }
		});
		//function to add minutes
		function addMinutes(addmins) {
			//check if there is custom value for mins
			var custMins = document.getElementById('cmins').value;
			if (addmins == -1) {
				if (custMins == "") {
					alert("Enter the custom value in minutes!");
					return;
				}
			}
			if (custMins != "" && custMins != undefined) {
				addmins = parseInt(custMins);
			}
			var currentdate = new Date();
			currentdate.setTime(currentdate.getTime() + (addmins * 60 * 1000));
			var hours = currentdate.getHours();
			  hours = hours % 12;
			  hours = hours ? hours : 12;
			var datetime = (currentdate.getMonth()+1) + "/" + currentdate.getDate() + "/" + currentdate.getFullYear() + " " + hours + ":" + currentdate.getMinutes() + ":" + currentdate.getSeconds();
			var ampm = currentdate.getHours() >= 12 ? 'PM' : 'AM';
			document.getElementById('thisdate').value = datetime + " " + ampm;
			return;
		}
	</script>
	
</html>
`))
 
var textCryptoBody = template.Must(template.New("textCryptoBody").Parse(`
<!doctype html>
<html>
	<head>
		<title>ULAPPH Encryption::www.ulapph.com - ULAPPH Cloud Desktop</title>
		<link rel="shortcut icon" href="/static/img/favicon.ico"/>
		<link rel="stylesheet" href="/static/css/bootstrap.min.css">
	</head>
	<body>
			<form name="text-css" action="/editor?EDIT_FUNC=CRYPTO" method="post" enctype="multipart/form-data">
				Enter Text: <br><textarea  name="t" rows="5" cols="70"/></textarea><br>
				<input type="hidden" name="EDIT_MODE" value="NEW-CRYPTO"/>
				<input type="hidden" name="UID" value="{{.}}"/>
				<br>
				Or Upload File: <input type="file" id="file" name="file"><br>
				Or ULAPPH SID: <input type="text" id="sid" name="sid" maxlength="16"><br>
				Function: <select name="ct">
				  <option value="e">Encrypt Content</option>
				  <option value="d">Decrypt Content</option>
				  <option value="v">As-Is Content</option>
				</select><br>
				Output: <select name="cv">
				  <option value="d">Download as File</option>
				  <option value="t">View as Text</option>
				  <option value="s">View as Slide</option>
				  <option value="a">View as Article</option>
				</select><br>
				Secret Key(16): <input type="text" name="k" maxlength="16"/><br>
				<input type="submit" name="submit" value="Submit"/>
			</form>
	</body>
</html>
`))

//D0070
var textTimelineBodyRaw = template.Must(template.New("textDrawBodyRaw").Parse(`
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>ULAPPH Timeline::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta charset="utf-8">
    <meta name="description" content="TimelineJS Embed">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-touch-fullscreen" content="yes">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <!-- CSS-->
    <link rel="stylesheet" href="/static/timelines/css/timeline.css?v1">
    <!--FONT-->
    <link rel="stylesheet" href="/static/timelines/css/fonts/font.default.css?v1">
    <!-- Style-->
    <style>
      html, body {
	height:100%;
	width:100%;
	padding: 0px;
	margin: 0px;
      }
      .tl-timeline {
      }
    </style>
    <!-- HTML5 shim, for IE6-8 support of HTML elements-->
    <!--if lt IE 9
    script(src='https://html5shim.googlecode.com/svn/trunk/html5.js')
    -->
  </head>
  <body>
    <div id="timeline"></div>
    <!-- JavaScript-->
    <script src="/static/timelines/js/timeline.js"></script>
    <script>
      var dataObject = {{.}};  
      var timeline = new TL.Timeline('timeline', dataObject, {
      });
    </script>
  </body>
</html>
`))

var textTimelineBody = template.Must(template.New("textDrawBody").Parse(`
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>ULAPPH Timeline::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta charset="utf-8">
    <meta name="description" content="TimelineJS Embed">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-touch-fullscreen" content="yes">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <!-- CSS-->
    <link rel="stylesheet" href="/static/timelines/css/timeline.css?v1">
    <!--FONT-->
    <link rel="stylesheet" href="/static/timelines/css/fonts/font.default.css?v1">
    <!-- Style-->
    <style>
      html, body {
	height:100%;
	width:100%;
	padding: 0px;
	margin: 0px;
      }
      .tl-timeline {
      }
    </style>
    <!-- HTML5 shim, for IE6-8 support of HTML elements-->
    <!--if lt IE 9
    script(src='https://html5shim.googlecode.com/svn/trunk/html5.js')
    -->
  </head>
  <body>
    <div id="timeline"></div>
    <!-- JavaScript-->
    <script src="/static/timelines/js/timeline.js"></script>
    <script>
      var timeline = new TL.Timeline('timeline', '{{.}}', {
      });
    </script>
  </body>
</html>
`))

var textDrawBody = template.Must(template.New("textDrawBody").Parse(`
<!doctype html>
<html>
	<head>
	<title>ULAPPH Drawing::www.ulapph.com - ULAPPH Cloud Desktop</title>
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" href="/draw/better.css" type="text/css" />
    <link rel="stylesheet" href="/draw/pygments.css" type="text/css" />
 
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    'https://literallycanvas.com/',
        VERSION:     '0.4.14',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="/static/js/jquery.js"></script>
    <script type="text/javascript" src="/draw/underscore.js"></script>
    <script type="text/javascript" src="/draw/doctools.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
      <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Finger+Paint" type="text/css" />
      <link rel="stylesheet" href="/draw/style.css" type="text/css" />
      <link rel="stylesheet" href="/draw/css/literallycanvas.css" type="text/css" />
    <script src="//cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react-with-addons.js" type="text/javascript"></script>
    <script src="/draw/static/js/fastclick.js" type="text/javascript"></script>
    <script src="/draw/static/js/literallycanvas.js" type="text/javascript"></script>
    <script src="/draw/docs.js" type="text/javascript"></script>
  </head>
  <body>
    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
 
  <div class="section" id="uploading-to-imgur">
<div class="literally imgur"></div>
 
<form class="imgur-submit">
    <input type="submit" data-action="upload-to-imgur" value="Upload to Gallery">
    <input type="submit" data-action="export-as-png" value="Export as PNG">
	<input type="submit" data-action="upload-as-text" value="Save as JSON"><input type="file" id="fileInput">
</form>
<form name="draw" action="/editor?EDIT_FUNC=DRAW" method="post">
	SOURCE: <input type="text" name="SID" value="{{.}}" maxlength=50/>				
	<input type="submit" name="submit" value="Submit"/><br>
	URL: <a href="/editor?EDIT_FUNC=DRAW&SID={{.}}">Link</a>
</form>
 
<script type="text/javascript" src="/static/js/ulapph-draw.js"></script>
</div>
 
 
          </div>
        </div>
      </div>
    </div>
 
  </body>
</html>
`))
 
var textToSpeechBody = template.Must(template.New("textToSpeechBody").Parse(`
<!doctype html>
<html>
	<head>
		<title>Text To Speech::www.ulapph.com - ULAPPH Cloud Desktop</title>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<meta charset="UTF-8">
		<meta name="description" content="ULAPPH Cloud Desktop" />
		<meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
		<meta name="author" content="ULAPPH Cloud Desktop">
		<meta name="copyright" content="ULAPPH Cloud Desktop">
		<link rel="shortcut icon" href="/static/img/favicon.ico"/>
		
		<link rel="stylesheet" href="/static/css/jquery.mobile-1.4.5.min.css"/>
		
		<script src="/static/js/jquery-1.11.3.min.js"></script>
		<script src="/static/js/jquery.mobile-1.4.5.min.js"></script>
		<script src="/static/js/jquery.blockUI.js"></script>
		<script src="/static/js/speech.js?ver=0.2" type="text/javascript"></script>
		
		<script>
			var pauseResume = 'R';
			$(document).ready(function(){
				$("#doClear").click(function() {
					$("#taInput").val("");
					return false;
				});
				
				$("#doPauseResume").click(function() {
					doPauseResume();
					return false;
				});
				
				$("#doStop").click(function() {
					doStop();
					return false;
				});
				
				$("#doTTS").click(function() {
					doTTS();
					return false;
				});
			});
			
			// Initialize speech engine...
			initSpeech();
		</script>
	</head>
	
	<body>
		<div data-role="page">
			<div data-role="header">
				<h1>Text-To-Speech</h1>
				<center>
					<input type='button' id='doTTS' value='Speak!'/>
					<input type='button' id='doPauseResume' value='Pause/Resume'/>
					<input type='button' id='doStop' value='Stop'/>
					<input type='button' id='doClear' value='Clear'/>
			  	</center>
			</div>
		
			<div role="main" class="ui-content">
				<fieldset>
					<legend>Cut & Paste Text To Synthesize (or enter a URL)</legend>
					<textarea class='textareaClass' id='taInput' rows="12" cols="50">{{.}}</textarea><br/>
			  	</fieldset>
			  <div id='statusMsg'></div>
			
			  <div class="option">
			  	<label for="rate">Voice</label>
			  	<select id='voice' name='voice'>
			  	</select>
			  </div>
			
			  <div class="option">
					<label for="rate">Rate</label>
					<input type="range" min="0.1" max="10" step="0.1" name="rate" id="rate" value="1">
			  </div>
				
			  <div class="option">
					<label for="pitch">Pitch</label>
					<input type="range" min="0" max="2" step="0.1" name="pitch" id="pitch" value="1">
			  </div>
			</div>
 
			<div data-role="footer">
				  <center>
				  	<a href='https://github.com/unk1911/speech'><img src='/static/img/GitHub-Mark-64px.png' alt='GitHub Logo'></a>
				  </center>
			</div>
		</div>
		
		<script>
			setTimeout(function() {
				// Initialize the voices...
				doInitVoices();
			}, 1);
		</script>
 
	</body>
</html>
 
`))
 
var textSemaphoreBody = template.Must(template.New("textSemaphoreBody").Parse(`
<!doctype html>
<html>
	<head>
		<title>SemaphoreSMS::www.ulapph.com - ULAPPH Cloud Desktop</title>
		<link rel="shortcut icon" href="/static/img/favicon.ico"/>
		<link rel="stylesheet" href="/static/css/chat-style.css">
		<script type="text/javascript" src="/static/js/jquery-2.1.1.js"></script>
		<link rel="stylesheet" href="/static/css/sol.css">
        <script type="text/javascript" src="/static/js/sol.js"></script>
	</head>
	<body>
			<form name="text-css" action="/editor?EDIT_FUNC=SEMAPHORE" method="post">
				Send To:<br><select name="TO" multiple id="my-select">
				{{.}}
				</select><br>
				Message: <br><textarea  name="MSG" maxlength="160" rows="6" cols="60"/></textarea><br>
				<input type="hidden" name="EDIT_MODE" value="NEW-SMS"/>				
				<input type="submit" name="submit" value="Send SMS"/><br>
				<br><a href="/editor?EDIT_FUNC=SEMAPHORE">Home</a> | <a href="/editor?EDIT_FUNC=SEMAPHORE-STAT">Check Balance</a> | <a href="/editor?EDIT_FUNC=SEMAPHORE-MSG">Messages</a> | <a href="http://semaphore.co/payments">Buy Credits</a> | <a href="/people-edit?EditPeopleFunc=EDIT_CONTACTS_LIST&UID=">Contacts</a>
			</form>
            <script type="text/javascript">
                $(function() {
                    // initialize sol
                        $('#my-select').searchableOptionList({
                            maxHeight: '200px'
                        });
                });
 
            </script>
	</body>
</html>
`))
 
var textStartBody = template.Must(template.New("textStartBody").Parse(`
<!doctype html>
<html>
	<head>
		<title>Start Menu::www.ulapph.com - ULAPPH Cloud Desktop</title>
		<link rel="shortcut icon" href="/static/img/favicon.ico"/>
		<link rel="stylesheet" href="/static/css/chat-style.css">
		<script type="text/javascript" src="/static/js/jquery-2.1.1.js"></script>
		<link rel="stylesheet" href="/static/css/sol.css">
        <script type="text/javascript" src="/static/js/sol.js"></script>
	</head>
	<body>
			[<a href="#" onclick="clearLocalIndex();return false;" title="Click to reset menu">Reset</a>] [<a href="/tools?FUNC=WIDGET&t=ULAPPHStartExpanded" title="Click to expand menu">Expand</a>]
			<form name="text-css" action="/tools?FUNC=WIDGET&t=ULAPPHStart" method="post">
				<select name="TO" multiple id="my-select" onchange="myFunction()" autofocus="autofocus">
				{{.}}
				</select>
			</form>
            <script type="text/javascript">
                $(function() {
                    // initialize sol
                        $('#my-select').searchableOptionList({
                            maxHeight: '200px'
                        });
                });
				
				function myFunction() {
					var x = document.getElementById("my-select").value;
					window.open (x,'_self',false);
					
				}
 
            </script>
		  <script type="text/javascript">
			if(typeof(Storage) !== "undefined") {
				console.log("Save index to local...")
				localStorage.startStorage = '<!doctype html>' + '<html>' + window.document.documentElement.innerHTML + '</html>';
			} else {
				console.log("Error, local storage not supported...")
			}
			
			function clearLocalIndex() {
				console.log("Clearing local index...")
				localStorage.startStorage = "";
				window.location.assign("/tools?FUNC=WIDGET&t=ULAPPHStart&clear=true");
				
			}
		  </script>
	</body>
</html>
`))
 
var playGoBody = template.Must(template.New("playGoBody").Parse(`
<!doctype html>
<html>
	<head>
		<title>ULAPPH Go Playground::www.ulapph.com - ULAPPH Cloud Desktop</title>
		<link rel="shortcut icon" href="/static/img/favicon.ico"/>
		<link rel="stylesheet" href="/static/css/style-play.css">
		<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
		<script src="/static/js/jquery-linedtextarea.js"></script>
		<script src="/static/js/playground.js"></script>
		<script src="/static/js/playground-embed.js"></script>
		<script>
		$(document).ready(function() {
			playground({
				'codeEl':       '#code',
				'outputEl':     '#output',
				'runEl':        '#run, #embedRun',
				'fmtEl':        '#fmt',
				'fmtImportEl':  '#imports',
				
				'shareEl':      '#share',
				'shareURLEl':   '#shareURL',
				
				'enableHistory': true
			});
			playgroundEmbed({
				'codeEl':       '#code',
				
				'shareEl':      '#share',
				
				'embedEl':      '#embed',
				'embedLabelEl': '#embedLabel',
				'embedHTMLEl':  '#shareURL'
			});
			$('#code').linedtextarea();
			
			$('#code').attr('wrap', 'off');
			var about = $('#about');
			about.click(function(e) {
				if ($(e.target).is('a')) {
					return;
				}
				about.hide();
			});
			$('#aboutButton').click(function() {
				if (about.is(':visible')) {
					about.hide();
					return;
				}
				about.show();
			})
			
			if (readCookie('playgroundImports') == 'true')
				$('#imports').attr('checked','checked');
			$('#imports').change(function() {
				createCookie('playgroundImports', $(this).is(':checked') ? 'true' : '');
			});
			
			if (window.trackEvent) {
				$('#run').click(function() {
					window.trackEvent('playground', 'click', 'run-button');
				});
				$('#share').click(function() {
					window.trackEvent('playground', 'click', 'share-button');
				});
			}
		});
 
		function createCookie(name, value) {
			document.cookie = name+"="+value+"; path=/";
		}
 
		function readCookie(name) {
			var nameEQ = name + "=";
			var ca = document.cookie.split(';');
			for(var i=0;i < ca.length;i++) {
				var c = ca[i];
				while (c.charAt(0)==' ') c = c.substring(1,c.length);
				if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
			}
			return null;
		}
		
		function runNow() {
			document.getElementById("run").click(); // click run
		}
 
		</script>
	</head>
	<body itemscope itemtype="http://schema.org/CreativeWork" onload="runNow();">
		<input type="button" value="Run" id="embedRun">
		<div id="banner">
			<div id="head" itemprop="name">Go Playground</div>
			<div id="controls">
				<input type="button" value="Run" id="run">
			</div>
		</div>
		<div id="wrap">
			<textarea itemprop="description" id="code" name="code" autocorrect="off" autocomplete="off" autocapitalize="off" spellcheck="false">{{.}}
			</textarea>
		</div>
		<div id="output"></div>
		<img itemprop="image" src="/static/gopher.png" style="display:none">
	</body>
</html>
`))
 
var htmlFooterModalTools = template.Must(template.New("htmlFooterModalTools").Parse(`
    <br>
	<br>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->
     <!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
	 <script src="/static/js/tab5.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
  </body>
</html>
`))
 
var htmlToolsConnection = template.Must(template.New("htmlToolsConnection").Parse(`
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset=utf-8>
<meta name="viewport" content="width=620">
<title>Monitor::www.ulapph.com - ULAPPH Cloud Desktop</title>
<meta name="description" content="ULAPPH Cloud Desktop" />
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<link rel="stylesheet" href="/static/css/html5demos.css">
<script src="/static/js/h5utils.js"></script></head>
<body>
	<article>
	  <p>Current network status: <span id="status">checking...</span></p>
	  <ol id="state"></ol>
	</article>
	<script>
	var statusElem  = document.getElementById('status'),
		state 		= document.getElementById('state');
 
	function online(event) {
	  statusElem.className = navigator.onLine ? 'online' : 'offline';
	  statusElem.innerHTML = navigator.onLine ? 'online' : 'offline';
	  state.innerHTML += '<li>New event: ' + event.type + '</li>';
	}
 
	addEvent(window, 'online', online);
	addEvent(window, 'offline', online);
	online({ type: 'ready' });
	</script>
</body>
</html>
 
`))
var htmlMirror = template.Must(template.New("htmlMirror").Parse(`
 
<!doctype html>
 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>WebcamJS MirrorB - ULAPPH Cloud Desktop</title>
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
	<style type="text/css">
		body { font-family: Helvetica, sans-serif; }
		h2, h3 { margin-top:0; }
		form { margin-top: 15px; }
		form > input { margin-right: 15px; }
		#results { float:right; margin:20px; padding:20px; border:1px solid; background:#ccc; }
		#target { float:left; margin:20px; padding:20px; border:1px solid; background:#ccc; }
	</style>
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/mobitouch.css" />
	<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
</head>
<body onload="loadSettings()">
	<div id="page">
	<div id="my_camera"></div>
	</div>
	<script type="text/javascript" src="/static/js/webcam.js"></script>
	<script language="JavaScript">
		Webcam.set({
			width: 1280,
			height: 720,
			dest_width: 640,
			dest_height: 480,
			image_format: 'jpeg',
			//jpeg_quality: 90
			jpeg_quality: 100,
			constraints: { facingMode: 'environment' }
		});
		Webcam.attach( '#my_camera' );
	</script>
	
	<div id="note"></div>
		<!--button onClick="take_snapshot()"><img src="/static/img/num1.jpg" width=60 height=60/ title="Take Snapshot"></button>
		<button onClick="setTimeout(function() { take_snapshot10s(); return false;}, 10000);"><img src="/static/img/num2.png" width=60 height=60 title="Take Snapshot after 10s"/></button>
		<button onClick="take_snapshot10s1m(); return false;"><img src="/static/img/num3.jpg" width=60 height=60 title="Take Snapshot every 10s for 1m"/></button>
		<button onClick="take_snapshot1m1h(); return false;"><img src="/static/img/num4.png" width=60 height=60 title="Take Snapshot every 1m for 1h"/></button>
		<button onClick="take_snapshot30m12h(); return false;"><img src="/static/img/num5.png" width=60 height=60 title="Take Snapshot every 30m for 12h"/></button-->
		<form>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot(); return false;" class="button button-pill button-raised button-caution">1-Take Snapshot</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="setTimeout(function() { take_snapshot10s(); return false; }, 10000);" class="button button-pill button-raised button-royal">2-Take Snapshot after 10s</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot10s1m(); return false;" class="button button-pill button-raised button-highlight">3-Take Snapshot every 10s for 1m</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot1m1h(); return false;" class="button button-pill button-raised button-highlight">4-Take Snapshot every 1m for 1h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot15s12h(); return false;" class="button button-pill button-raised button-highlight">5.0-Take Snapshot every 15s for 12h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot1m12h(); return false;" class="button button-pill button-raised button-highlight">5.1-Take Snapshot every 1m for 12h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot30m12h(); return false;" class="button button-pill button-raised button-highlight">5.2-Take Snapshot every 30m for 12h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot1m24h(); return false;" class="button button-pill button-raised button-highlight">6.1-Take Snapshot every 1m for 24h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot30m24h(); return false;" class="button button-pill button-raised button-highlight">6.2-Take Snapshot every 30m for 24h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot1m1y(); return false;" class="button button-pill button-raised button-highlight">7.1-Take Snapshot every 1m for 1year</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot30m1y(); return false;" class="button button-pill button-raised button-highlight">7.2-Take Snapshot every 30m for 1year</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot15s1y(); return false;" class="button button-pill button-raised button-highlight">7.3-Take Snapshot every 15s for 1year</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot5s1y(); return false;" class="button button-pill button-raised button-highlight">7.4-Take Snapshot every 5s for 1year</a>
		</span>
		<!--a href="/tools?FUNC=MIRROR2">Small Mirror</a-->
	</form>
	<div id="target">
		ULAPPH User: <input type="text" name="uid" id="uid" value="{{.STR_FILLER1}}" maxlength=500>
		<br>PinKey: <input type="password" name="pinkey" id="pinkey" value="{{.STR_FILLER2}}" maxlength=50>
        <br>Add caption or title: <input type="text" name="title" id="title" value="{{.STR_FILLER3}}" maxlength=500>
        <br>Stream in UWM:<input type="text" name="uwm" id="uwm" value="{{.STR_FILLER4}}" maxlength=50>
        <br><b>Optional:</b>
		<br>Description: <input type="text" name="desc" id="desc" value="" maxlength=500>
		<br>Add image to TDSSLIDE-<input type="text" name="sid" id="sid" value="" maxlength=10>
		<br>Fixed Capture Interval Only: <input type="checkbox" id="fixedcap" checked>
		<br>Intruder Detection Enabled: <input type="checkbox" id="autoDetection" checked>
	</div>
	<div id="results">Your captured image will appear here...</div>
	<div id="imgdata"></div>
	<script type="text/javascript" src="/static/js/html-mirror.js"></script>
	<script src="/static/js/mobitouch2.js"></script>
	<script src="/static/js/channel-cctv.js"></script>
	<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
	<script src="/static/js/firebase-account.js"></script>
	<script src="/static/js/channel-firebase-cctv.js"></script>
	<script src="/static/js/battery-monitor-cctv.js"></script>
</body>
</html>
 
`))
var htmlMirror2 = template.Must(template.New("htmlMirror2").Parse(`
<!doctype html>
 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>WebcamJS MirrorS - ULAPPH Cloud Desktop</title>
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
	<style type="text/css">
		body { font-family: Helvetica, sans-serif; }
		h2, h3 { margin-top:0; }
		form { margin-top: 15px; }
		form > input { margin-right: 15px; }
		#results { float:right; margin:20px; padding:20px; border:1px solid; background:#ccc; }
		#target { float:left; margin:20px; padding:20px; border:1px solid; background:#ccc; }
	</style>
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/mobitouch.css" />
	<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
</head>
<body onload="loadSettings()">
	<div id="page">
	<div id="my_camera"></div>
	</div>
	<script type="text/javascript" src="/static/js/webcam.js"></script>
	<script language="JavaScript">
		Webcam.set({
			width: 320,
			height: 240,
			dest_width: 640,
			dest_height: 480,
			image_format: 'jpeg',
			//jpeg_quality: 90
			jpeg_quality: 100,
			constraints: { facingMode: 'environment' }
		});
		Webcam.attach( '#my_camera' );
	</script>
	
	<div id="note"></div>
		<!--button onClick="take_snapshot()"><img src="/static/img/num1.jpg" width=60 height=60/ title="Take Snapshot"></button>
		<button onClick="setTimeout(function() { take_snapshot10s(); return false; }, 10000);"><img src="/static/img/num2.png" width=60 height=60 title="Take Snapshot after 10s"/></button>
		<button onClick="take_snapshot10s1m(); return false;"><img src="/static/img/num3.jpg" width=60 height=60 title="Take Snapshot every 10s for 1m"/></button>
		<button onClick="take_snapshot1m1h(); return false;"><img src="/static/img/num4.png" width=60 height=60 title="Take Snapshot every 1m for 1h"/></button>
		<button onClick="take_snapshot30m12h(); return false;"><img src="/static/img/num5.png" width=60 height=60 title="Take Snapshot every 30m for 12h"/></button-->
		<form>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot(); return false;" class="button button-pill button-raised button-caution">1-Take Snapshot</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="setTimeout(function() { take_snapshot10s(); return false; }, 10000);" class="button button-pill button-raised button-royal">2-Take Snapshot after 10s</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot10s1m(); return false;" class="button button-pill button-raised button-highlight">3-Take Snapshot every 10s for 1m</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot1m1h(); return false;" class="button button-pill button-raised button-highlight">4-Take Snapshot every 1m for 1h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot15s12h(); return false;" class="button button-pill button-raised button-highlight">5.0-Take Snapshot every 15s for 12h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot1m12h(); return false;" class="button button-pill button-raised button-highlight">5.1-Take Snapshot every 1m for 12h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot30m12h(); return false;" class="button button-pill button-raised button-highlight">5.2-Take Snapshot every 30m for 12h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot1m24h(); return false;" class="button button-pill button-raised button-highlight">6.1-Take Snapshot every 1m for 24h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot30m24h(); return false;" class="button button-pill button-raised button-highlight">6.2-Take Snapshot every 30m for 24h</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot1m1y(); return false;" class="button button-pill button-raised button-highlight">7.1-Take Snapshot every 1m for 1year</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot30m1y(); return false;" class="button button-pill button-raised button-highlight">7.2-Take Snapshot every 30m for 1year</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot15s1y(); return false;" class="button button-pill button-raised button-highlight">7.3-Take Snapshot every 15s for 1year</a>
		</span>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot5s1y(); return false;" class="button button-pill button-raised button-highlight">7.4-Take Snapshot every 5s for 1year</a>
		</span>
		<!--a href="/tools?FUNC=MIRROR">Big Mirror</a-->
	</form>
	<div id="target">
		ULAPPH User: <input type="text" name="uid" id="uid" value="{{.STR_FILLER1}}" maxlength=500>
		<br>Key: <input type="password" name="pinkey" id="pinkey" value="{{.STR_FILLER2}}" maxlength=50>
        <br>Add caption or title: <input type="text" name="title" id="title" value="{{.STR_FILLER3}}" maxlength=500>
        <br>Stream in UWM:<input type="text" name="uwm" id="uwm" value="{{.STR_FILLER4}}" maxlength=50>
        <br><b>Optional:</b>
		<br>Description: <input type="text" name="desc" id="desc" value="" maxlength=500>
		<br>Add image to TDSSLIDE-<input type="text" name="sid" id="sid" value="" maxlength=10>
		<br>Fixed Capture Interval Only: <input type="checkbox" id="fixedcap" checked>
		<br>Intruder Detection Enabled: <input type="checkbox" id="autoDetection" checked>
	</div>
	<div id="results">Your captured image will appear here...</div>
	<div id="imgdata"></div>
	<input type="hidden" value="true" id="proc_flag">
	<!--script type="text/javascript" src="/static/js/html-mirror2.js"></script-->
	<script type="text/javascript" src="/static/js/html-mirror.js"></script>
	<script src="/static/js/mobitouch2.js"></script>
	<script src="/static/js/channel-cctv.js"></script>
	<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
	<script src="/static/js/firebase-account.js"></script>
	<script src="/static/js/channel-firebase-cctv.js"></script>
	<script src="/static/js/battery-monitor-cctv.js"></script>
	
</body>
</html>
`))
var htmlMirror3 = template.Must(template.New("htmlMirror3").Parse(`
<!doctype html>
 
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>WebcamJS MirrorS - ULAPPH Cloud Desktop</title>
	<link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<link rel="stylesheet" href="/static/lib/css/buttons/buttons.css">
	<style type="text/css">
		body { font-family: Helvetica, sans-serif; }
		h2, h3 { margin-top:0; }
		form { margin-top: 15px; }
		form > input { margin-right: 15px; }
		#results { float:right; margin:20px; padding:20px; border:1px solid; background:#ccc; }
		#target { float:left; margin:20px; padding:20px; border:1px solid; background:#ccc; }
	</style>
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/mobitouch.css" />
	<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
</head>
<body onload="loadSettings()">
	<div id="page">
	<div id="my_camera"></div>
	<h1>Camera: {{.STR_FILLER4}}</h1>
	</div>
	<script type="text/javascript" src="/static/js/webcam.js"></script>
	<script language="JavaScript">
		Webcam.set({
			width: 320,
			height: 240,
			dest_width: 640,
			dest_height: 480,
			image_format: 'jpeg',
			//jpeg_quality: 90
			jpeg_quality: 100,
			constraints: { facingMode: 'environment' }
		});
		Webcam.attach( '#my_camera' );
	</script>
	
	<div id="note"></div>
		<form>
		<span class="button-wrap">
		<a href="#" onClick="take_snapshot15s1y(); return false;" class="button button-pill button-raised button-highlight">Take Snapshot every 15s for 1year</a>
		</span>
	</form>
	<div id="target">
		ULAPPH User: <input type="text" name="uid" id="uid" value="{{.STR_FILLER1}}" maxlength=500>
		<br>Key: <input type="password" name="pinkey" id="pinkey" value="{{.STR_FILLER2}}" maxlength=50>
        <br>Add caption or title: <input type="text" name="title" id="title" value="{{.STR_FILLER3}}" maxlength=500>
        <br>Stream in UWM:<input type="text" name="uwm" id="uwm" value="{{.STR_FILLER4}}" maxlength=50>
        <br><b>Optional:</b>
		<br>Description: <input type="text" name="desc" id="desc" value="" maxlength=500>
		<br>Add image to TDSSLIDE-<input type="text" name="sid" id="sid" value="" maxlength=10>
		<br>Fixed Capture Interval Only: <input type="checkbox" id="fixedcap" checked>
		<br>Intruder Detection Enabled: <input type="checkbox" id="autoDetection" checked>
	</div>
	<div id="results">Your captured image will appear here...</div>
	<div id="imgdata"></div>
	<input type="hidden" value="true" id="proc_flag">
	<!--script type="text/javascript" src="/static/js/html-mirror2.js"></script-->
	<script type="text/javascript" src="/static/js/html-mirror.js"></script>
	<script src="/static/js/mobitouch2.js"></script>
	<script src="/static/js/channel-cctv.js"></script>
	<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
	<script src="/static/js/firebase-account.js"></script>
	<script src="/static/js/channel-firebase-cctv.js"></script>
	<script src="/static/js/battery-monitor-cctv.js"></script>
	
</body>
</html>
`)) 
var htmlFooterJSWM = template.Must(template.New("htmlFooterJSWM").Parse(`
	<script type="text/javascript">
		uwmArrWin();
		if ({{.STR_FILLER1}} == "cascade") {
			//cascade
			uwmArrWin();
		}


		if ({{.STR_FILLER2}} != "") {
			setTimeout(function(){
			var rn = document.getElementById("ranid");
			rn.value = "pause";
			var bgImgUrl = "{{.STR_FILLER2}}";
			document.getElementById("DEFAULT_WALLPAPER").value = bgImgUrl;
			document.getElementById('page').style.backgroundImage = "url(" + bgImgUrl + ")";
			}, 10000);
		}

		if (urlParams["toolbar"] == "cctv") {
			document.getElementById('menu-dx').style.display = 'none';
			document.getElementById('menu').style.display = 'none';
		}
		
		//#page bug fix
		document.getElementById("stm-ranid").click();

		//hide address bar url params
		  var uri = window.location.toString();
		  if (uri.indexOf("?") > 0) {
		      var clean_uri = uri.substring(0, uri.indexOf("?"));
		      if (uri.indexOf("#page") > 0) {
		          clean_uri = clean_uri + "#page";
		      }     
		      window.history.replaceState({}, document.title, clean_uri);
		      window.history.pushState("ULAPPH",  document.title, clean_uri);
		  }

	</script>
  </body>
</html>
`))
 
var htmlFooterModalClick = template.Must(template.New("htmlFooterModalClick").Parse(`
	<script type="text/javascript">
		location.href = "#advertise";
	</script>	
  </body>
</html>
`))
 
 
var userAccessTemplateDesktopNPart1 = template.Must(template.New("userAccessTemplateDesktopNPart1").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Desktop0::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
    <link rel="stylesheet" type="text/css" media="screen" href="{{.}}"/>
 
`))
 
var userAccessTemplateDesktopNPart1a = template.Must(template.New("userAccessTemplateDesktopNPart1a").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>Desktop0::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
`))
 
var userAccessTemplateUWMPart1 = template.Must(template.New("userAccessTemplateUWMPart1").Parse(`
<!DOCTYPE HTML>
<html lang="en-US" class="no-js">
  <head>
    <title>UWM::www.ulapph.com - ULAPPH Cloud Desktop</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="ULAPPH Cloud Desktop" />
    <meta name="copyright" content="Copyright 2014-2022 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Edwin D. Vinas - Personal Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
    <link rel="os-touch-icon" href="/static/images/custom_icon.ico"/>
    <link rel="shortcut icon" href="/static/img/favicon.ico"/>
	<meta name="theme-color" content="{{.STR_FILLER1}}">
	<link rel="icon" sizes="192x192" href="/static/img/banaosystems-login.png">
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/mobitouch.css" />
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/mouse-clock.css" />
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
`))
var userAccessTemplateDesktopNPart2 = template.Must(template.New("userAccessTemplateDesktopNPart2").Parse(`
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" /> 	
    <script src="/static/js/pulldown-site-min.js"></script>
    <script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	<script src="/static/js/desktop-notifs.js"></script>
    <script type="text/javascript" src="/static/js/jquery-ui-1.8.17.custom.min.js"></script>
	<script type="text/javascript" src="/static/js/modernizr.js"></script>
    <script type="text/javascript" src="/static/js/fix-and-clock.js"></script>
	<script type="text/javascript" src="/static/js/idletimer.js"></script>
 
		<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
	<link rel="stylesheet" type="text/css" media="screen,projection" href="/static/css/jquery-sticklr-1.4-light-color.css" />
	<script type="text/javascript" src="/static/js/jquery-sticklr-1.4.pack.js"></script>
	<script type="text/javascript" src="/static/js/jquery.localscroll-min.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	<style>
	   .alertify-log {
		background: {{.STR_FILLER3}};
		//background: rgba(0,0,0,.9);
		padding: 15px;
		border-radius: 4px;
		//color: #FFF;
		text-shadow: -1px -1px 0 rgba(0,0,0,.5);
		}
		.alertify-log-error {
			background: {{.STR_FILLER2}};
			//background: rgba(254,26,0,.9);
		}
		.alertify-log-success {
			background: {{.STR_FILLER1}};
			//background: rgba(92,184,17,.9);
		}
	</style>
	<script type="text/javascript" src="/static/js/dock.js"></script>	
	<script type="text/javascript" src="/static/js/stickler.js"></script>
	<script type="text/javascript" src="/static/js/keyEvents.js"></script>
	 <script>
	 document.title = {{.STR_FILLER4}} +  '@' + window.location.host;
	 //document.title = window.location.host;
	 </script>
	<link rel="stylesheet" type="text/css" media="screen" href="/static/css/stickler.css"/>	
	
  </head>
  <body>
`)) 
var userAccessTemplateDesktopNPart2jswm = template.Must(template.New("userAccessTemplateDesktopNPart2jswm").Parse(`
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/pulldown-tabzilla-min.css" />
    <link rel="stylesheet" media="screen,projection,tv" href="/static/css/modalWindow.css" />
	<script type="text/javascript" src="/static/js/blinkTitle.js"></script>
    <script src="/static/js/pulldown-site-min.js"></script>
    <script type="text/javascript" src="/static/js/jquery-1.7.1.min.js"></script>
	<script src="/static/js/desktop-notifs.js"></script>
    <script type="text/javascript" src="/static/js/jquery-ui-1.8.17.custom.min.js"></script>
	<script type="text/javascript" src="/static/js/modernizr.js"></script>
	<script type="text/javascript" src="/static/js/idletimer.js"></script>
	<script type="text/javascript" src="/static/js/soundmanager2.js"></script>
	<script type="text/javascript" src="/static/js/jquery.localscroll-min.js"></script>
	<link rel="stylesheet" href="/static/css/alertify.core.css" />
	<link rel="stylesheet" href="/static/css/alertify.default.css" id="toggleCSS" />
	<style>
	   .alertify-log {
		background: {{.STR_FILLER3}};
		//background: rgba(0,0,0,.9);
		padding: 15px;
		border-radius: 4px;
		//color: #FFF;
		text-shadow: -1px -1px 0 rgba(0,0,0,.5);
		}
		.alertify-log-error {
			background: {{.STR_FILLER2}};
			//background: rgba(254,26,0,.9);
		}
		.alertify-log-success {
			background: {{.STR_FILLER1}};
			//background: rgba(92,184,17,.9);
		}
	</style>
	<script type="text/javascript" src="/static/js/dock.js"></script>	
	<script type="text/javascript" src="/static/js/keyEvents.js"></script>
	 <script>
	 document.title = {{.STR_FILLER4}} +  '@' + window.location.host;
	 //document.title = window.location.host;
	 </script>
	<!-- JSWM -->
	<link rel="stylesheet" type="text/css" href="/static/css/jswm.css" />
	<script type="text/javascript" src="/static/js/jswm-prototype.js"></script>
	<script type="text/javascript" src="/static/js/jswm-scriptaculous.js?dragdrop,effects"></script>
	<script type="text/javascript" src="/static/js/jswm.js"></script>
	<!--script src="/static/js/pace.min.js"></script>
	<link href="/static/css/pace.css" rel="stylesheet" /-->
	<!-- JSWM Firefox theme -->
`))
 
var userAccessTemplateDesktopNPart3jswm = template.Must(template.New("userAccessTemplateDesktopNPart3jswm").Parse(`
	<link rel="stylesheet" media="screen,projection,tv" href="/static/css/float-buttons.css" />
	<script type="text/javascript" src="/static/js/jswm-config.js"></script>
	<script src="/static/js/h5utils.js"></script>
	<script src="/static/js/ping.min.js"></script>
	<script src="/static/lib/js/fingerprintjs2/fingerprint2.js"></script>
	<script type="text/javascript" charset="utf-8">
		window.onbeforeunload = function (e) {
			e = e || window.event;
 
			// For IE and Firefox prior to version 4
			if (e) {
				e.returnValue = 'ULAPPH Window Manager';
			}
 
			// For Safari
			return 'ULAPPH Window Manager';
		};
	</script>
  </head>
  <body onload="geoloc()">
`))
 
var loginUserTemplate = template.Must(template.New("loginUserTemplate").Parse(`
   <a href="%s">Sign in or register</a>
`))
 
 
var userRegistrationTemplate = template.Must(template.New("userRegistrationTemplate").Parse(`
	<p>
    <div class="success2"><h3><a href="#register">Click here</a> to register!</h3></div>
	<hr>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->
    <!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
	<br>
	<div id="register" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h2>ULAPPH Registration</h2>
			<p>Please read first our policy and disclaimer. Then check "Agree" checkbox and then click "Register" button.</p>
  <h4>Privacy policy</h4>
 
  <div class="article">
    <p>The only personal information we collect on this site is your Google email address, approximate geolocation and IP address. These information are used for user analytics so we can improve our services. These data will <b>never</b> be sold or given to a third party for any reason.</p>
 
	<h4>Disclaimer</h4>
<p>The owner of this website will not be held liable for the misuse of this site.</p>
<p>It is the user's responsibility to be aware of and abide by all laws in accordance to their geographical location or jurisdiction.</p>
 
<h4>Advertising Policy</h4>
<p>The owner of this website may place advertisements on slides, articles and desktop. Our random advertisements are either commercial or informative.</p>
</div>
			<form name="registration" action="/registration " method="post">
				<input type="hidden" name="country" value="{{.STR_FILLER1}}"/>
				<input type="hidden" name="referer" value="{{.STR_FILLER2}}"/>
				<input type="hidden" name="oprov" value="{{.STR_FILLER3}}"/>
				<input type="hidden" name="ouid" value="{{.STR_FILLER4}}"/>
				<input type="hidden" name="oemail" value="{{.STR_FILLER5}}"/>
				<input type="hidden" name="oavatar" value="{{.STR_FILLER6}}"/>
				<input type="hidden" name="regType" value="one-click"/>
				<input type="checkbox" name="registerEmail"/><span>I agree to register and understood the above policy and disclaimer.</span>
				<br>
				<p>
				<input type="submit" name="submit" value="Register"/>
			</form>
	</div>	
</body>
</html>
`))
 
 
var bootBodyTemplateRoot = template.Must(template.New("bootBodyTemplateRoot").Parse(`
<div id="pageLoading">
 <div class="loading">
  <div class="apple-logo"></div>
  <div class="spinner"></div>
 </div>
</div>
`))
 
var loginBodyTemplateRoot = template.Must(template.New("loginBodyTemplateRoot").Parse(`
 <div id="pageLogin">
 <header id="headlogin">
  <nav id="menu-dx-login">
     <ul>
       <li class="wireless"></li>
       <li class="time">
           <ul>
               <li class="hours"> </li>
               <li class="point">:</li>
               <li class="min"> </li>
           </ul>
       </li>
     </ul>
  </nav>
 </header>
 <div class="new-apple-logo"></div>
    <div class="user-avatar">
        <div id="avatar">
          <div id="cover"></div>
		  </div>
    </div>
 </div>
`))
 
 
var loginBodyTemplateRootN1 = template.Must(template.New("loginBodyTemplateRootN1").Parse(`
 <div id="pageLogin">
 <header id="headlogin">
  <nav id="menu-dx-login">
     <ul>
       <li class="wireless"></li>
       <li class="time">
           <ul>
               <li class="hours"> </li>
               <li class="point">:</li>
               <li class="min"> </li>
           </ul>
       </li>
     </ul>
  </nav>
 </header>
 <div class="new-apple-logo"></div>
    <div class="user-avatar">
        <div id="avatar">
          <a href="#hide" class="hide" id="hide"></a>
          <a href="#show" class="show" id="show"></a>
          <div id="cover"></div>
`))
 
var loginBodyTemplateRootN2 = template.Must(template.New("loginBodyTemplateRootN2").Parse(`
	  </div>
    </div>
 </div>
`))
 
var mobileBodyTemplateContentA = template.Must(template.New("mobileBodyTemplateContentA").Parse(`
        <li id="UWM">
         <a href="/uwm">
             <em><span>UWM</span></em><br>
                <img src="/static/img/jswm.png" title="UWM" height="40" width="40"/>
            </a>
        </li>
        <!--li id="QuickSearch">
         <a href="/tools?t=QUICK_SEARCH">
             <em><span>QuickSearch</span></em><br>
                <img src="/static/img/goto2.png" title="Quick Search" height="40" width="40"/>
            </a>
        </li-->
        <li id="Search">
         <a href="/search">
             <em><span>Search</span></em><br>
                <img src="/static/img/ulapph-icons-search-icons.png" title="Search" height="40" width="40"/>
            </a>
        </li>
        <li id="Login">
         <a href="/login?q=login&LFUNC=GOOGLE&TARGET_URL=/login?continue=/uwm">
             <em><span>Login</span></em><br>
                <img src="/static/img/ulapph-icons-login.png" title="Login" height="40" width="40"/>
            </a>
        </li>
	<li id="Logout">
	 <a href="/logout">
		 <em><span>Logout</span></em><br>
			<img src="/static/img/ulapph-icons-logout.png" title="Logout" height="40" width="40"/>
		</a>
	</li>
        <li id="API">
         <a href="/api-doc/">
             <em><span>API</span></em><br>
                <img src="/static/img/ulapph-icons-api.png" title="API" height="40" width="40"/>
            </a>
        </li>
        <li id="Bot">
         <a href="/chat-bubble/ulapphbot.html">
             <em><span>ChatBot</span></em><br>
                <img src="/static/img/bot.png" title="Chatbot" height="40" width="40"/>
            </a>
        </li>
        <li id="LS">
         <a href="/loc">
             <em><span>LS</span></em><br>
                <img src="/static/img/uloc.png" title="LS" height="40" width="40"/>
            </a>
        </li>
        <li id="Directory">
         <a href="/directory?DIR_FUNC=sites">
             <em><span>Directory</span></em><br>
                <img src="/static/img/directory.png" title="Directory" height="40" width="40"/>
            </a>
        </li>
        <li id="Admin">
         <a href="/admin-setup">
             <em><span>Admin</span></em><br>
                <img src="/static/img/admin-icon.png" title="Admin" height="40" width="40"/>
            </a>
        </li>
        <li id="Help">
         <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">
             <em><span>Help</span></em><br>
                <img src="/static/img/help.png" title="Help" height="40" width="40"/>
            </a>
        </li> 		
        </ul>
    </div>
</div>
`))
 
var mobileBodyTemplateContentB = template.Must(template.New("mobileBodyTemplateContentB").Parse(`
<div id="main">
<div class="hero">
    <div class="hero-titles">
		<img src="/static/img/ulapph-logo.png" title="ULAPPH Logo" width=150 height=50></img>
    </div>
 
	<div class="hero-titles" id="channel-area">
	</div>
	<input type="hidden" id="chan-id" value="{{.STR_FILLER2}}">
	<input type="hidden" id="ringtone" value="{{.STR_FILLER3}}">
 
    <div class="hero-cta">
      <pre class="code code-wrap" data-language="html"><a href="/"><code>&quot;https://www.ulapph.com&quot;</code></a></pre>
 
        <p>
            <a class="button-cta pure-button" href="#invite">Invite your friend!</a>
            <a class="button-secondary pure-button" href="#advertise">Advertise with Us!</a>
            <a class="button-secondary pure-button" href="#feedback">Send Us Feedback!</a>
		</p>
		<a href="/guestbook?GB_FUNC=REFRESH" target="ulapph-messages"><img src="{{.STR_FILLER1}}" width=200 height=200></img></a>
    </div>
</div>
 
`))
 
var mobileBodyTemplateContentB2 = template.Must(template.New("mobileBodyTemplateContentB2").Parse(`
<div id="main">
 
`))
 
var mobileBodyTemplateContentLoaderSingleItemBanner = template.Must(template.New("mobileBodyTemplateContentLoaderSingleItemBanner").Parse(`
      <div class="single_item" id="banner">
 
        <div class="left">
                      <img src="/static/img/filter.png" class="item_image_home" title="banner" width="16">
					{{.STR_FILLER1}}
                  </div>
        <div class="right">
          <ul class="item_stats">
            <li>
            </li>
            <li>
            </li>
          </ul>
        </div>
        <article>
          <img src="{{.STR_FILLER2}}" width="100%%" height="180px">
          <div class="item_overlay">
            <h3 class="title">
              {{.STR_FILLER1}}</h3>
          </div>
        </article>
	</div>
`))
 
var mobileBodyTemplateContentLoaderSingleItemBannerAds = template.Must(template.New("mobileBodyTemplateContentLoaderSingleItemBannerAds").Parse(`
      <div class="single_item" id="banner2">
 
        <div class="left">
                      <img src="/static/img/galink.png" class="item_image_home" title="banner2" width="16">
					Sponsored Links
                  </div>
        <div class="right">
          <ul class="item_stats">
            <li>
            </li>
            <li>
            </li>
          </ul>
        </div>
        <article>
			{{.}}
        </article>
	</div>
`))
 
var mobileBodyTemplateContentLoaderSingleItemA2 = template.Must(template.New("mobileBodyTemplateContentLoaderSingleItemA2").Parse(`
{{range .}}
{{if eq .FL_SHARED "Y"}}
{{if ne .DOC_STAT "Personal"}}
      <div class="single_item" id="loadera2">
 
        <div class="left">
            <img src="/static/img/ulapph-icons-articles.png" class="item_image_home" title="atop2" width="16">
			{{if eq .DOC_STAT "Premium"}}
            <a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}" class="creator_name">{{.DOC_STAT}}</a>
			{{else}}
            <a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}" class="creator_name" target="view">{{.DOC_STAT}}</a>
			{{end}}
        </div>
        <div class="right">
          <ul class="item_stats">
		    {{if eq .DOC_STAT "Premium"}}
			<li>
				<a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}"><img src="/static/img/premium-dollar.png" title="Premium Content" height="16" width="16"></a>
			</li>
			{{end}}
            <li>
              <img src="/static/img/comment-icon.png" width=16 height=16 title="Comments">
              <span>{{.NUM_COMMENTS}}</span>
            </li>
            <li>
              <img src="/static/img/like-icon.png" width=16 height=16 title="Likes">
              <span>{{.NUM_LIKES}}</span>
            </li>
            <li>
              <img src="/static/img/views-icon.png" width=16 height=16 title="Views">
              <span>{{.NUM_VIEWS}}</span>
            </li>
          </ul>
        </div>
        <article>
          <img src="{{.TAGS}}" width="100%%" height="100%%">
          <div class="item_overlay">
            <h3 class="title">
			{{.TITLE}} - {{.DESC}} </h3>
          </div>
 
          <a href="/articles?TYPE=ARTICLE&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSARTL-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}&MUSIC_ID={{.MUSIC_ID}}&FL_COUNTRY_SPECIFIC={{.FL_COUNTRY_SPECIFIC}}" target="view"></a>
        </article>
	</div>
{{end}}
{{end}}
{{end}}
`))
 
var mobileBodyTemplateContentLoaderSingleItemS2 = template.Must(template.New("mobileBodyTemplateContentLoaderSingleItemS2").Parse(`
{{range .}}
{{if eq .FL_SHARED "Y"}}
{{if ne .DOC_STAT "Personal"}}
      <div class="single_item" id="toproots2">
 
        <div class="left">
                      <img src="/static/img/ulapph-icons-slides.png" class="item_image_home" title="top4" width="16">
            <a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}" class="creator_name">{{.DOC_STAT}}</a>
                  </div>
        <div class="right">
          <ul class="item_stats">
            <li>
              <img src="/static/img/comment-icon.png" width=16 height=16 title="Comments">
              <span>{{.NUM_COMMENTS}}</span>
            </li>
            <li>
              <img src="/static/img/like-icon.png" width=16 height=16 title="Likes">
              <span>{{.NUM_LIKES}}</span>
            </li>
            <li>
              <img src="/static/img/views-icon.png" width=16 height=16 title="Views" >
              <span>{{.NUM_VIEWS}}</span>
            </li>
          </ul>
        </div>
        <article>
          <img src="{{.TAGS}}" width="100%%" height="100%%">
          <div class="item_overlay">
            <h3 class="title">
              {{.TITLE}} - {{.DESC}} </h3>
          </div>
 
          <a href="/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&TITLE={{.TITLE}}&DOC_ID={{.DOC_ID}}&BLOB_KEY={{.BLOB_URL}}&SID=TDSSLIDE-{{.DOC_ID}}&CATEGORY={{.CATEGORY}}"></a>
        </article>
	</div>
{{end}}
{{end}}
{{end}}
`))
 
var mobileBodyTemplateContentLoaderSingleItemAds = template.Must(template.New("mobileBodyTemplateContentLoaderSingleItemAds").Parse(`
<div class="single_item" id="singleads">
    <div class="left"><img src="/static/img/feed.png" class="item_image_home" title="" width="16">Advertisement</div>
<article>
<iframe src="{{.}}/rag?d=desktop0&n=1&f=tiles" width=100% height=250 scrolling="no" align=center></iframe>
</article>
</div>
<div class="single_item" id="singleads">
	<div class="left"><img src="/static/img/feed.png" class="item_image_home" title="" width="16">Advertisement</div>
<article>
<iframe src="{{.}}/rag?d=desktop0&n=2&f=tiles" width=100% height=250 scrolling="no" align=center></iframe>
</article>
</div>
<div class="single_item" id="singleads">
	<div class="left"><img src="/static/img/feed.png" class="item_image_home" title="" width="16">Advertisement</div>
<article>
<iframe src="{{.}}/rag?d=desktop0&n=3&f=tiles" width=100% height=250 scrolling="no" align=center></iframe>
</article>
</div>
`))
 
 
 
var mobileBodyTemplateContentLoaderA = template.Must(template.New("mobileBodyTemplateContentLoaderA").Parse(`
<div class="hero">
	<h1>Top Articles & Slides</h1>
    <section class="item_list">
`))
 
var mobileBodyTemplateContentLoaderA2 = template.Must(template.New("mobileBodyTemplateContentLoaderA2").Parse(`
<div id="hero">
    <section class="item_list">
`))
 
var mobileBodyTemplateContentLoaderA2Search = template.Must(template.New("mobileBodyTemplateContentLoaderA2Search").Parse(`
<div class="hero">
    <section class="item_list">
`))
 
 
var mobileBodyTemplateContentArticlesSlides = template.Must(template.New("mobileBodyTemplateContentArticlesSlides").Parse(`
	</section>
	</div>
`))
 
var mobileBodyTemplateContentLoaderB = template.Must(template.New("mobileBodyTemplateContentLoaderB").Parse(`
</div>
</div>
</div>
<!--h1 align="center"><a href="/search">Search</a> | <a href="/infodb?DB_FUNC=VIEWER-SLIDES-ALL&TYPE=SLIDE&PARM=LOOP&SECS=8">All Contents</a> | <a href="/social?SO_FUNC=show-trending">Trending</a> | <a href="/social?SO_FUNC=show-whats-new">Whats New!</a> | <a href="/directory?DIR_FUNC=sites">Directory</a> | <a href="{{.STR_FILLER1}}">Chat</a></h1-->
  <script src="/static/js/jquery.js"></script>
  <script src="/static/js/bootstrap.min.js"></script>
  <script src="/static/js/cd_main.js"></script>
  <!--script>
    var x = document.getElementsByClassName("single_item");
    for (i=0; i<= x.length; i++) {
        x[i].style.backgroundColor = "{{.STR_FILLER2}}";
    }
  </script-->
 
<script>
(function() {
  var count = 0;
 
  $.post('/notifications/count', {}, function (data) {
 
    count = data.count;
 
    if(count > 0) {
      document.title = "(" +count+ ") " + document.title;
 
      //Show the number of notifs on user dropdown
      $(".notification_d").text(count + " Notifications!");
      $(".noti_badge").text(count).css("display", "block");
    }
    else {
      $(".notification_d").remove();
    }
 
  }, 'json');
 
})();
</script>
`))
 
var mobileBodyTemplateContentFooter = template.Must(template.New("mobileBodyTemplateContentFooter").Parse(`
<script src="/static/js/home1.js"></script>
<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.}}"></script-->
`))
 
var mobileBodyTemplateContent0a = template.Must(template.New("mobileBodyTemplateContent0a").Parse(`
        <li id="Articles">
         <a href="/articles?CATEGORY=desktop0">
             <em><span>Articles</span></em><br>
                <img src="/static/img/ulapph-icons-articles.png" title="Articles" height="40" width="40"/>
            </a>
        </li>
        <li id="Slides">
         <a href="/slides?CATEGORY=desktop0">
             <em><span>Slides</span></em><br>
                <img src="/static/img/ulapph-icons-slides.png" title="Slides" height="40" width="40"/>
            </a>
        </li>
        <li id="Media">
         <a href="/media?q=desktop0">
             <em><span>Media</span></em><br>
                <img src="/static/img/ulapph-icons-media.png" title="Media" height="40" width="40"/>
            </a>
        </li>
        <li id="Chat">
         <a href="/chat">
             <em><span>Chat</span></em><br>
                <img src="/static/img/chat.png" title="Chat" height="40" width="40"/>
            </a>
        </li>
        <li id="InfoDB">
         <a href="/infodb?q=desktop0">
             <em><span>InfoDB</span></em><br>
                <img src="/static/img/ulapph-icons-infodb.png" title="InfoDB" height="40" width="40"/>
            </a>
        </li>		
        <li id="Settings">
         <a href="/settings?q=desktop0">
             <em><span>Settings</span></em><br>
                <img src="/static/img/ulapph-icons-settings.png" title="Settings" height="40" width="40"/>
            </a>
        </li>
        <li id="Admin">
         <a href="/admin-setup">
             <em><span>Admin</span></em><br>
                <img src="/static/img/admin-icon.png" title="Admin" height="40" width="40"/>
            </a>
        </li>		
        <li id="Logout">
         <a href="/logout?q=desktop0">
             <em><span>Logout</span></em><br>
                <img src="/static/img/ulapph-icons-logout.png" title="Logout" height="40" width="40"/>
            </a>
        </li>
        <li id="Desktop">
			<a href="/desktop?d=1">
             <em><span>Next</span></em><br>
                <img src="/static/img/arrow_right.png" title="Desktop Switcher" height="40" width="40"/>
				</a>
        </li>
        </ul>
    </div>
</div>
<div id="main">
`))
 
 
var mobileBodyTemplateContent0b = template.Must(template.New("mobileBodyTemplateContent0b").Parse(`
<div class="hero">
    <div class="hero-titles">
        <h1 class="hero-site">MY ULAP</h1>
        <h2 class="hero-tagline">This is your personal cloud desktop.</h2>
    </div>
 
    <div class="hero-cta">
      <pre class="code code-wrap" data-language="html"><a href="/"><code>&quot;https://www.ulapph.com&quot;</code></a></pre>
 
        <p>
            <a class="button-cta pure-button" href="#invite">Invite your friend!</a>
            <a class="button-secondary pure-button" href="#advertise">Advertise with Us!</a>
			<a class="button-secondary pure-button" href="#feedback">Send Us Feedback!</a>
        </p>
    </div>
	<div id="channel-area"></div>
</div>
 
`))
 
var mobileBodyTemplateContent120x = template.Must(template.New("mobileBodyTemplateContent120x").Parse(`
        <li id="Articles">
         <a href="/articles?CATEGORY={{.}}">
             <em><span>Articles</span></em><br>
                <img src="/static/img/ulapph-icons-articles.png" title="Articles" height="40" width="40"/>
            </a>
        </li>
        <li id="Slides">
         <a href="/slides?CATEGORY={{.}}">
             <em><span>Slides</span></em><br>
                <img src="/static/img/ulapph-icons-slides.png" title="Slides" height="40" width="40"/>
            </a>
        </li>
        <li id="Media">
         <a href="/media?q={{.}}">
             <em><span>Media</span></em><br>
                <img src="/static/img/ulapph-icons-media.png" title="Media" height="40" width="40"/>
            </a>
        </li>
        <li id="Chat">
         <a href="/chat">
             <em><span>Chat</span></em><br>
                <img src="/static/img/chat.png" title="Chat" height="40" width="40"/>
            </a>
        </li>
        <li id="InfoDB">
         <a href="/infodb?q={{.}}">
             <em><span>InfoDB</span></em><br>
                <img src="/static/img/ulapph-icons-infodb.png" title="InfoDB" height="40" width="40"/>
            </a>
        </li>		
        <li id="Settings">
         <a href="/settings?q={{.}}">
             <em><span>Settings</span></em><br>
                <img src="/static/img/ulapph-icons-settings.png" title="Settings" height="40" width="40"/>
            </a>
        </li>
        <li id="Admin">
         <a href="/admin-setup">
             <em><span>Admin</span></em><br>
                <img src="/static/img/admin-icon.png" title="Admin" height="40" width="40"/>
            </a>
        </li> 		
        <li id="Logout">
         <a href="/logout?q={{.}}" >
             <em><span>Logout</span></em><br>
                <img src="/static/img/ulapph-icons-logout.png" title="Logout" height="40" width="40"/>
            </a>
        </li>
`))
		
var mobileBodyTemplateContent120a = template.Must(template.New("mobileBodyTemplateContent120a").Parse(`
        <li id="Desktop">                                    	
		 <a href="{{.}}">
             <em><span>Next</span></em><br>
                <img src="/static/img/arrow_right.png" title="Desktop Switcher" height="40" width="40"/>
            </a>
        </li>
        </ul>
    </div>
</div>
`))
 
var mobileBodyTemplateContent120b = template.Must(template.New("mobileBodyTemplateContent120b").Parse(`
<div id="main">
<div class="hero">
    <div class="hero-titles">
        <h1 class="hero-site">{{.}}</h1>
        <h2 class="hero-tagline">This is a collection of major websites under this category.</h2>
    </div>
 
    <div class="hero-cta">
      <pre class="code code-wrap" data-language="html"><a href="/"><code>&quot;https://www.ulapph.com&quot;</code></a></pre>
 
        <p>
            <a class="button-cta pure-button" href="#invite">Invite your friend!</a>
            <a class="button-secondary pure-button" href="#advertise">Advertise with Us!</a>
			<a class="button-secondary pure-button" href="#feedback">Send Us Feedback!</a>
        </p>
    </div>
</div>
`))
 
 
var desktopBodyTemplate = template.Must(template.New("desktopBodyTemplate").Parse(`
<div id="page" ondrop="drop(event);" ondragover="return false" >
<header id="head">
`))
 
var desktopBody2Template = template.Must(template.New("desktopBody2Template").Parse(`
    <nav id="menu-dx">
     <ul>
 
		<li class="here" id="stm-ping-res">
		[<span id="ping-res"></span>]
		</li>
		
		<li class="here" id="stm-constat">
		<a href="#page" title="Connection Status"><img id="constat" src="/static/img/statc.png" width="20" height="20" title="Connection Status"></img></a>
		</li>
		
	    <li class="here" id="stm-closeall">
		<a href="" onclick="windowManager.clear();stopTalking();return false;" title="Close All Windows"><img src="/static/img/closeall.png" width="20" height="20" title="Close All Windows"></img></a>
		</li>

	    <li class="here" id="stm-uwmStat"><input type="hidden" id="uwmStat" value="off">
		<a href="" onclick="uwmOnOff();return false;" title="Expand/Collapse"><img id="uwmFlag" src="/static/img/uwm_plus.png" width="20" height="20" title="Expand/Collapse"></img></a>
		</li>

	    <li class="here" id="stm-winStat"><input type="hidden" id="winStat" value="on">
		<a href="" onclick="winOnOff();return false;" title="Show/Hide"><img id="eyeFlag" src="/static/img/jswm-shide2.png" width="20" height="20" title="Show/Hide"></img></a>
		</li>
		
	    <li class="here" id="stm-uwmArrStat"><input type="hidden" id="uwmArrStat" value="tile">
		<a href="" onclick="uwmArrWin();return false;" title="Cascade/Tile"><img id="uwmArr" src="/static/img/cascade.png" width="20" height="20" title="Cascade/Tile"></img></a>
		</li>
		
		<li class="here" id="stm-ranid"><input type="hidden" id="ranid" value="">
		<a href="" onclick="nextWp();return false;" title="Next Wallpaper"><img src="/static/img/next.png" width="20" height="20" title="Next Wallpaper"></img></a>
		</li>
		
	    <li class="here" id="stm-soundStat"><input type="hidden" id="soundStat" value="{{.STR_FILLER2}}">
		{{if eq .STR_FILLER2 "on" }}
			<a href="" onclick="soundOnOff();return false;" title="Sound On/Off"><img id="soundFlag" src="/static/img/sound-on.png" width="20" height="20" title="Sound On/Off"></img></a>
		{{else}}
			<a href="" onclick="soundOnOff();return false;" title="Sound On/Off"><img id="soundFlag" src="/static/img/sound-off.png" width="20" height="20" title="Sound On/Off"></img></a>
		{{end}}
		</li>
		
		<li class="here" id="stm-ranMusic">
		<input type="hidden" id="ranMusic" value="">
		<a href="" onclick="musicOnOff();return false;" title="Music On/Off"><img id="musicFlag" src="/static/img/musicon.png" width="20" height="20" title="Music On/Off"></img></a>
		</li>

	    <li class="here" id="stm-newNote">
		<a href="" onclick="newNote();return false;" title="Local Notes"><img src="/static/img/sticky.png" width="20" height="20"class="animated infinite {{.STR_FILLER11}}"></img></a></li>
		
		<li class="here" id="stm-Countdown">
			<input type="hidden" value="'/tools?FUNC=WIDGET&t=CountDownGet', 600, 200, 'left', 'top', {title: 'Countdown', icon: '/static/img/jswm-web.png'}" size="60" id="gocount" />
			<a href="#page" onclick="eval('windowManager.openURI(' + $('gocount').value + ');');">
				<img src="/static/img/countdown.png" width="20" height="20" title="Countdown">
				</img>
			</a>		
		</li>
		
		<li class="here" id="stm-Cal">
			<input type="hidden" value="'/tools?FUNC=WIDGET&t=AnalogClockWidget', 800, 500, 'left', 'top', {title: 'Clock & Calendar', icon: '/static/img/jswm-web.png'}" size="60" id="clockcal" />
			<a href="#page" onclick="eval('windowManager.openURI(' + $('clockcal').value + ');');">
				<img src="/static/img/cal-icon.png" width="20" height="20" title="Clock & Calendar">
				</img>
			</a>		
		</li>
		
		<li class="here" id="stm-scalc">
			<input type="hidden" value="'/media?FUNC_CODE=UMP', 800, 500, 'left', 'top', {title: 'Music Player', icon: '/static/img/jswm-web.png'}" size="60" id="scalc" />
			<a href="#page" onclick="eval('windowManager.openURI(' + $('scalc').value + ');');">
				<img src="/static/img/music-mini.png" width="20" height="20" title="Music Player">
				</img>
			</a>		
		</li>
`))
 
 var desktopXBody2Template = template.Must(template.New("desktopXBody2Template").Parse(`
    <nav id="menu-dx">
     <ul>		
	
	    <li class="here" id="stm-logout"><a href="/logout" title="Logout"><img src="/static/img/logout-mini.png" width="20" height="20" title="Logout"></a></li>
		
		<li class="here" id="stm-alldesks">
			<input type="hidden" value="'/tools?FUNC=ALL_DESKTOPS', 800, 500, 'left', 'top', {title: 'All Desktops', icon: '/static/img/jswm-web.png'}" size="60" id="alldesks" />
			<a href="#page" onclick="eval('windowManager.openURI(' + $('alldesks').value + ');');">
				<img src="/static/img/desktop.png" width="20" height="20" title="All Desktops">
				</img>
			</a>		
		</li>
		
		<li class="here" id="stm-reload">
		<a href="" onclick="reload();return false;" title="Reload"><img src="/static/img/reload.png" width="20" height="20" title="Reload"></img></a>
		</li>
		
		<li class="here" id="stm-ranid"><input type="hidden" id="ranid" value="">
		<a href="" onclick="nextWp();return false;" title="Next Wallpaper"><img src="/static/img/next.png" width="20" height="20" title="Next Wallpaper"></img></a>
		</li>
		
		<li class="here" id="stm-pauseWp">
		<a href="" onclick="pauseWp();return false;" title="Stop Wallpaper"><img src="/static/img/pausewp.png" width="20" height="20" title="Stop Wallpaper"></img></a>
		</li>
		
		
	    <li class="here" id="stm-soundStat"><input type="hidden" id="soundStat" value="{{.STR_FILLER2}}">
		{{if eq .STR_FILLER2 "on" }}
			<a href="" onclick="soundOnOff();return false;" title="Sound On/Off"><img id="soundFlag" src="/static/img/sound-on.png" width="20" height="20" title="Sound On/Off"></img></a>
		{{else}}
			<a href="" onclick="soundOnOff();return false;" title="Sound On/Off"><img id="soundFlag" src="/static/img/sound-off.png" width="20" height="20" title="Sound On/Off"></img></a>
		{{end}}
		</li>
		
		<li class="here" id="stm-ranMusic">
		<input type="hidden" id="ranMusic" value="">
		<a href="" onclick="musicOnOff();return false;" title="Music On/Off"><img id="musicFlag" src="/static/img/musicon.png" width="20" height="20" title="Music On/Off"></img></a>
		</li>
		
		{{if eq .STR_FILLER4 "false" }}
		<li class="here" id="stm-ranMusic">
		<input type="hidden" id="ranMusic" value="">
		<a href="" onclick="musicOnOff();return false;" title="Music On/Off"><img id="musicFlag" src="/static/img/musicon.png" width="20" height="20" title="Music On/Off"></img></a>
		</li>
		{{end}}
		
		{{if eq .STR_FILLER4 "false" }}
	    <li class="here" id="stm-newNote">
		<a href="" onclick="newNote();return false;" title="Local Notes"><img src="/static/img/sticky.png" width="20" height="20"class="animated infinite {{.STR_FILLER11}}"></img></a></li>
		{{end}}
		
		<li class="username">{{.STR_FILLER1}}</li>
 
        <li class="time">
         <ul>
            <li id="DateAbbr"> </li>
            <li class="hour"> </li>
            <li class="point">:</li>
            <li class="mins"> </li>
         </ul>
        </li>
        <li class="username">
`))
 
var desktopBody2TemplateNoSticky = template.Must(template.New("desktopBody2TemplateNoSticky").Parse(`
    <nav id="menu-dx">
     <ul>

	 	<li class="here" id="stm-ping-res">
		[<span id="ping-res"></span>]
		</li>
		
		<li class="here" id="stm-constat">
		<a href="#page" title="Connection Status"><img id="constat" src="/static/img/statc.png" width="20" height="20" title="Connection Status"></img></a>
		</li>
		
	    <li class="here" id="stm-closeall">
		<a href="" onclick="windowManager.clear();stopTalking();return false;" title="Close All Windows"><img src="/static/img/closeall.png" width="20" height="20" title="Close All Windows"></img></a>
		</li>

	    <li class="here" id="stm-uwmStat"><input type="hidden" id="uwmStat" value="off">
		<a href="" onclick="uwmOnOff();return false;" title="Expand/Collapse"><img id="uwmFlag" src="/static/img/uwm_plus.png" width="20" height="20" title="Expand/Collapse"></img></a>
		</li>
		
	    <li class="here" id="stm-winStat"><input type="hidden" id="winStat" value="on">
		<a href="" onclick="winOnOff();return false;" title="Show/Hide"><img id="eyeFlag" src="/static/img/jswm-shide2.png" width="20" height="20" title="Show/Hide"></img></a>
		</li>
		
	    <li class="here" id="stm-uwmArrStat"><input type="hidden" id="uwmArrStat" value="tile">
		<a href="" onclick="uwmArrWin();return false;" title="Cascade/Tile"><img id="uwmArr" src="/static/img/cascade.png" width="20" height="20" title="Cascade/Tile"></img></a>
		</li>
		
		<li class="here" id="stm-ranid"><input type="hidden" id="ranid" value="">
		<a href="" onclick="nextWp();return false;" title="Next Wallpaper"><img src="/static/img/next.png" width="20" height="20" title="Next Wallpaper"></img></a>
		</li>
		
	    <li class="here" id="stm-soundStat"><input type="hidden" id="soundStat" value="{{.STR_FILLER2}}">
		{{if eq .STR_FILLER2 "on" }}
			<a href="" onclick="soundOnOff();return false;" title="Sound On/Off"><img id="soundFlag" src="/static/img/sound-on.png" width="20" height="20" title="Sound On/Off"></img></a>
		{{else}}
			<a href="" onclick="soundOnOff();return false;" title="Sound On/Off"><img id="soundFlag" src="/static/img/sound-off.png" width="20" height="20" title="Sound On/Off"></img></a>
		{{end}}
		</li>
		
		<li class="here" id="stm-ranMusic">
		<input type="hidden" id="ranMusic" value="">
		<a href="" onclick="musicOnOff();return false;" title="Music On/Off"><img id="musicFlag" src="/static/img/musicon.png" width="20" height="20" title="Music On/Off"></img></a>
		</li>
		
		<li class="here" id="stm-Countdown">
			<input type="hidden" value="'/tools?FUNC=WIDGET&t=CountDownGet', 800, 500, 'left', 'top', {title: 'Countdown', icon: '/static/img/jswm-web.png'}" size="60" id="gocount" />
			<a href="#page" onclick="eval('windowManager.openURI(' + $('gocount').value + ');');">
				<img src="/static/img/countdown.png" width="20" height="20" title="Countdown">
				</img>
			</a>		
		</li>
		
		<li class="here" id="stm-Cal">
			<input type="hidden" value="'/tools?FUNC=WIDGET&t=AnalogClockWidget', 800, 500, 'left', 'top', {title: 'Clock & Calendar', icon: '/static/img/jswm-web.png'}" size="60" id="clockcal" />
			<a href="#page" onclick="eval('windowManager.openURI(' + $('clockcal').value + ');');">
				<img src="/static/img/cal-icon.png" width="20" height="20" title="Clock & Calendar">
				</img>
			</a>		
		</li>

		<li class="here" id="stm-scalc">
			<input type="hidden" value="'/media?FUNC_CODE=UMP', 800, 500, 'left', 'top', {title: 'Music Player', icon: '/static/img/jswm-web.png'}" size="60" id="scalc" />
			<a href="#page" onclick="eval('windowManager.openURI(' + $('scalc').value + ');');">
				<img src="/static/img/music-mini.png" width="20" height="20" title="Music Player">
				</img>
			</a>		
		</li>
`))
 
var desktopXBody2TemplateNoSticky = template.Must(template.New("desktopXBody2TemplateNoSticky").Parse(`
    <nav id="menu-dx">
     <ul>
	
		<li class="here" id="stm-logout"><a href="/logout" title="Logout"><img src="/static/img/logout-mini.png" width="20" height="20" title="Logout"></a></li>
		
		<li class="here" id="stm-alldesks">
			<input type="hidden" value="'/tools?FUNC=ALL_DESKTOPS', 800, 500, 'left', 'top', {title: 'All Desktops', icon: '/static/img/jswm-web.png'}" size="60" id="alldesks" />
			<a href="#page" onclick="eval('windowManager.openURI(' + $('alldesks').value + ');');">
				<img src="/static/img/desktop.png" width="20" height="20" title="Desktops">
				</img>
			</a>		
		</li>
	
		<li class="here" id="stm-reload">
		<a href="" onclick="reload();return false;" title="Reload"><img src="/static/img/reload.png" width="20" height="20" title="Reload"></img></a>
		</li>
		
		<li class="here" id="stm-ranid"><input type="hidden" id="ranid" value="">
		<a href="" onclick="nextWp();return false;" title="Next Wallpaper"><img src="/static/img/next.png" width="20" height="20" title="Next Wallpaper"></img></a>
		</li>
		
		<li class="here" id="stm-pauseWp">
		<a href="" onclick="pauseWp();return false;" title="Stop Wallpaper"><img src="/static/img/pausewp.png" width="20" height="20" title="Stop Wallpaper"></img></a>
		</li>
		
	    <li class="here" id="stm-soundStat"><input type="hidden" id="soundStat" value="{{.STR_FILLER2}}">
		{{if eq .STR_FILLER2 "on" }}
			<a href="" onclick="soundOnOff();return false;" title="Sound On/Off"><img id="soundFlag" src="/static/img/sound-on.png" width="20" height="20" title="Sound On/Off"></img></a>
		{{else}}
			<a href="" onclick="soundOnOff();return false;" title="Sound On/Off"><img id="soundFlag" src="/static/img/sound-off.png" width="20" height="20" title="Sound On/Off"></img></a>
		{{end}}
		</li>
		
		<li class="here" id="stm-ranMusic">
		<input type="hidden" id="ranMusic" value="">
		<a href="" onclick="musicOnOff();return false;" title="Music On/Off"><img id="musicFlag" src="/static/img/musicon.png" width="20" height="20" title="Music On/Off"></img></a>
		</li>
				
		<li class="username">{{.STR_FILLER1}}</li>
		
        <li class="time">
         <ul>
            <li id="DateAbbr"> </li>
            <li class="hour"> </li>
            <li class="point">:</li>
            <li class="mins"> </li>
         </ul>
        </li>
        <li class="username">
`))
 
var desktopBodyUnameTemplate = template.Must(template.New("desktopBodyUnameTemplate").Parse(`
         <b>{{.}}</b></li>
`))

//D0053 
//
var desktopBodyTooltipTemplate = template.Must(template.New("desktopBodyTooltipTemplate").Parse(`
<input type="hidden" value="'/tools?FUNC=WIDGET&t=ADDUWM&n={{.STR_FILLER5}}&d={{.STR_FILLER4}}({{.STR_FILLER5}})', 800, 500, 'left', 'top', {title: 'UWM Settings', icon: '/static/img/jswm-web.png'}" size="60" id="editUwm" />
<a href="#page" onclick="eval('windowManager.openURI(' + $('editUwm').value + ');');" title="{{.STR_FILLER1}} - {{.STR_FILLER3}} - {{.STR_FILLER4}} ({{.STR_FILLER5}})">
	<img src="{{.STR_FILLER2}}" style="height:20px;width:20px;" alt="{{.STR_FILLER1}} - {{.STR_FILLER3}} - {{.STR_FILLER4}} ({{.STR_FILLER5}})"/>
</a>
<input type="hidden" id="SYS_SUPER_USER" value="{{.BOOL_FILLER1}}">
<script type="text/javascript">
	var SYS_SUPER_USER = document.getElementById("SYS_SUPER_USER").value;
	if (SYS_SUPER_USER == false || SYS_SUPER_USER == "false") {
		//enable all default windows
		localStorage['god'] = "Y";
		localStorage['universe'] = "Y";
		localStorage['earth'] = "Y";
		localStorage['philippines'] = "Y";
		localStorage['global'] = "Y";
		localStorage['info'] = "Y";
		localStorage['opo'] = "Y";
		localStorage['videoke'] = "Y";
		localStorage['website'] = "Y";
		localStorage['bible'] = "Y";
		localStorage['chat'] = "Y";
		localStorage['online'] = "Y";
		localStorage['ytlive'] = "Y";
		localStorage['stream'] = "Y";
	}
</script>
<!--Request Headers Start-->
	<input type="hidden" id="X-AppEngine-Country" value="{{.STR_FILLER6}}">
	<input type="hidden" id="X-AppEngine-Region" value="{{.STR_FILLER7}}">
	<input type="hidden" id="X-AppEngine-City" value="{{.STR_FILLER8}}">
	<input type="hidden" id="X-AppEngine-CityLatLong" value="{{.STR_FILLER9}}">
	<input type="hidden" id="U-Referer" value="{{.STR_FILLER10}}">
<!--Request Headers End-->
`))
 
var MOTD_General = template.Must(template.New("MOTD_General").Parse(`
  <!--li class="username">
    <!--a href="/" id="tabzilla" data-infobar="translation">Home</a-->
	</li-->
  </ul>
 </nav>
</header>
 
<div id="home-banner2">
</div>
 
<div id="project" class="window project">
 <nav class="control-window">
    <a href="#project" class="close" data-rel="close">close</a>
    <a href="#" class="minimize">minimize</a>
    <a href="#" class="maximize">maximize</a>
    </nav>
    <h1 class="titleInside">Message of the Day</h1>
    <div class="container">
     <ul class="hardware">
	  <img src="/static/img/read.png" width=60 width=60></img>
	  <p><b>{{.}}</b></p>
`))

var MOTD_GeneralJSWM = template.Must(template.New("MOTD_GeneralJSWM").Parse(`
  </ul>
 </nav>
	<style>.w3-animate-input{transition:width 0.4s ease-in-out}.w3-animate-input:focus{width:30%!important}.w3-input{padding:8px;display:block;border:none;border-bottom:1px solid #ccc;width:30%}</style>
	<center><input id="newJSWM999" type="text" onfocus="disableKeys();" onkeypress="return searchKeyPress(event);" class="w3-input w3-animate-input" style="width:300px; border-radius: 25px; border: 10px solid {{.}}; height: 15px; font-size: 20px;" value="I'm ULAPPH Barbecue!"></center>
	<button id="myBtn" onclick="javascript:newBotMessage2('999')" style="visibility:hidden;">Send</button>
	<script>
	function disableKeys() {
		localStorage["newJSWM999"] == "active";
	}
	function searchKeyPress(e)
	{
		localStorage["newJSWM999"] = "inactive";
		//remove event listener
		removeEventListeners();
		// look for window.event in case event isnt passed in
		e = e || window.event;
		if (e.keyCode == 13)
		{
			document.getElementById('myBtn').click();
			addEventListeners();
			return false;
		}
		return true;
	}
	/*var input = document.getElementById("newJSWM999");
	input.addEventListener("keyup", function(event) {  
		if (event.keyCode === 13) {   
			event.preventDefault();   
			document.getElementById("myBtn").click();
		}
	});*/
	</script>
</header>
`))
 
var MOTD_General2 = template.Must(template.New("MOTD_General2").Parse(`
	  <p id="rantext">{{.}}</p>
	  <br>
`))
 
var MOTD_General3 = template.Must(template.New("MOTD_General3").Parse(`
	  <br><a href="{{.}}" target="generalSlidesURL" ><img src="/static/img/arrow-icon.png"></img></a><br>
     </ul>
    </div>
</div>
`))
 
var desktopBody3TemplateRootAd1 = template.Must(template.New("desktopBody3TemplateRootAd1").Parse(`
<div id="finder" class="window finder">
 <nav class="control-window">
    <a href="#finder" class="close" data-rel="close">close</a>
    <a href="#" class="minimize">minimize</a>
    <a href="#" class="deactivate">deactivate</a>
    </nav>
    <h1 class="titleInside">Advertisement 1</h1>
    <div class="container">
     <div class="container-inside">
        <img src="/static/img/banaosystems-login.png" title="ULAPPH"/>
        <div class="about-this">
        <h2>Advertisement 1</h2>
        <p>This advertisement space is vacant. Contact us to advertise with us.</p>
        </div>
        </div>
    </div>
</div>
`))
 
var desktopBody3TemplateRootAd1Mobile = template.Must(template.New("desktopBody3TemplateRootAd1Mobile").Parse(`
<div id="finder" class="window finder">
 <nav class="control-window">
    <a href="#finder" class="close" data-rel="close">close</a>
    <a href="#" class="minimize">minimize</a>
    <a href="#" class="deactivate">deactivate</a>
    </nav>
    <h1 class="titleInside">Advertisement 1</h1>
    <div class="container">
     <div class="container-inside">
        <img src="/static/img/banaosystems-login.png" title="ULAPPH"/>
        <div class="about-this">
        <h2>Advertisement 1</h2>
        <p>This advertisement space is vacant. Contact us to advertise with us.</p>
        </div>
        </div>
    </div>
</div>
`))
 
var desktopBody3TemplateRootAd2 = template.Must(template.New("desktopBody3TemplateRootAd2").Parse(`
<div id="about-this-cd" class="window mac">
 <nav class="control-window">
    <a href="#about-this-cd" class="close" data-rel="close">close</a>
    <a href="#" class="deactivate">deactivate</a>
    <a href="#" class="deactivate">deactivate</a>
    </nav>
    <h1 class="title-mac">Advertisement 2</h1>
    <div class="container">
     <div class="container-inside">
     <img src="/static/img/banaosystems-boot.png" title="Cloud Desktop"/>
     <div class="about-this">
     <p>Version 0.1</p>
        <ul class="hardware">
        <li><strong>AD SPACE AVAILABLE</strong>This advertisement space is vacant. Contact us to advertise with us.</li>
        <li><strong>Adverts</strong> Some texts here</li>
        </ul>
        <p><a class="button about" href="#">More Info...</a></p>
     <div class="copyright">
     </div>
     </div>
     </div>
    </div>
</div>
`))
 
var desktopBody3TemplateQRCode = template.Must(template.New("desktopBody3TemplateQRCode").Parse(`
<div id="about-this-cd" class="window mac">
 <nav class="control-window">
    <a href="#about-this-cd" class="close" data-rel="close">close</a>
    <a href="#" class="deactivate">deactivate</a>
    <a href="#" class="deactivate">deactivate</a>
    </nav>
    <h1 class="title-mac">Scan QR Code</h1>
    <div class="container">
     <div class="container-inside">
	 <iframe src='{{.}}' frameborder=0 scrolling=false allowtransparency=true width=270px height=270 align=center></iframe>
     </div>
    </div>
</div>
`))
 
var desktopBody3TemplateRootAd2Mobile = template.Must(template.New("desktopBody3TemplateRootAd2Mobile").Parse(`
<div id="about-this-cd" class="window mac">
    <h1 class="title-mac">Advertisement 2</h1>
    <div class="container">
     <div class="container-inside">
     <img src="/static/img/banaosystems-boot.png" title="Cloud Desktop"/>
     <div class="about-this">
     <p>Version 0.1</p>
        <ul class="hardware">
        <li><strong>AD SPACE AVAILABLE</strong>This advertisement space is vacant. Contact us to advertise with us.</li>
        <li><strong>Adverts</strong> Some texts here</li>
        </ul>
        <p><a class="button about" href="#">More Info...</a></p>
     <div class="copyright">
     </div>
     </div>
     </div>
    </div>
</div>
`))
 
var desktopBody3TemplateRootAd3 = template.Must(template.New("desktopBody3TemplateRootAd3").Parse(`
<div id="finder" class="window spec">
    <h1 class="titleInside">Advertisement 3</h1>
    <div class="container">
     <div class="container-inside">
        <div class="about-this">
        <h2>AD SPACE AVAILABLE</h2>
        <p>This advertisement space is vacant. Contact us to advertise with us.</p>
		</div>
    </div>
   </div>
</div>
`))
 
var desktopBody3TemplateRootAd3Mobile = template.Must(template.New("desktopBody3TemplateRootAd3Mobile").Parse(`
<div id="finder" class="window spec">
    <h1 class="titleInside">Advertisement 3</h1>
    <div class="container">
     <div class="container-inside">
        <div class="about-this">
        <h2>AD SPACE AVAILABLE</h2>
        <p>This advertisement space is vacant. Contact us to advertise with us.</p>
		</div>
    </div>
   </div>
</div>
`))
 

//firebase
var desktopBodyPTemplate = template.Must(template.New("desktopBodyPTemplate").Parse(`
        <li id="Desktop">
		 <input type="hidden" id="desktop" value="{{.STR_FILLER1}}">
		 <input type="hidden" id="dName" value="{{.STR_FILLER7}}">
		 <input type="hidden" id="aUser" value="{{.STR_FILLER2}}">
		 <input type="hidden" id="tok" value="{{.STR_FILLER3}}">
		 <input type="hidden" id="host" value="{{.STR_FILLER4}}">
		 <input type="hidden" id="mode" value="{{.STR_FILLER5}}">
		 <input type="hidden" id="ringtone" value="{{.STR_FILLER6}}">
		 <input type="hidden" id="dispAds" value="{{.STR_FILLER8}}">
		 <input type="hidden" id="uwmwponly" value="{{.BOOL_FILLER2}}">
		 <!---//firebase-->
		 <input type="hidden" id="jwt" value="{{.STR_FILLER10}}">
		 <input type="hidden" id="aep" value="{{.STR_FILLER11}}">
		 <input type="hidden" id="sss" value="{{.STR_FILLER12}}">
		 <div id="focusCont"></div>
         <input type="hidden" id="prevDock" value=""> 		
         <a href="" onclick="ULAPPH_UPD_DOCK_P('0');return false;">
             <em><span>Previous</span></em><br>
                <img src="/static/img/arrow_left.png" title="Desktop Switcher" height="40" width="40"/>
			</a>
        </li>
`))
var desktopBodyPTemplatejswm = template.Must(template.New("desktopBodyPTemplatejswm").Parse(`
        <li id="Desktop">
		 <input type="hidden" id="desktop" value="{{.STR_FILLER1}}">
		 <input type="hidden" id="dName" value="{{.STR_FILLER7}}">
		 <input type="hidden" id="aUser" value="{{.STR_FILLER2}}">
		 <input type="hidden" id="tok" value="{{.STR_FILLER3}}">
		 <input type="hidden" id="host" value="{{.STR_FILLER4}}">
		 <input type="hidden" id="mode" value="{{.STR_FILLER5}}">
		 <input type="hidden" id="ringtone" value="{{.STR_FILLER6}}">
		 <input type="hidden" id="dispAds" value="{{.STR_FILLER8}}">
		 <input type="hidden" id="scheme" value="{{.STR_FILLER9}}">
		 <input type="hidden" id="ushare" value="{{.STR_FILLER10}}">
		 <input type="hidden" id="uwms" value="{{.STR_FILLER11}}">
		 <input type="hidden" id="TITLE" value="{{.STR_FILLER12}}">
		 <!--//firebase !!!!!!!!!!!!!!!!!!!!!!!-->
		 <input type="hidden" id="jwt" value="{{.STR_FILLER13}}">
		 <input type="hidden" id="aep" value="{{.STR_FILLER14}}">
         <input type="hidden" id="sss" value="{{.STR_FILLER15}}">
         <input type="hidden" id="newsEn" value="{{.STR_FILLER16}}">
         <input type="hidden" id="ugrp" value="{{.STR_FILLER17}}">
		 <input type="hidden" id="sys" value="{{.STR_FILLER18}}">
		 <input type="hidden" id="startColor" value="{{.STR_FILLER19}}">
		 <input type="hidden" id="activeColor" value="{{.STR_FILLER20}}">
         <input type="hidden" id="newss" value="{{.NUM_FILLER1}}">
         <input type="hidden" id="newsf" value="{{.NUM_FILLER2}}">
		 <input type="hidden" id="isMobile" value="{{.BOOL_FILLER1}}">
		 <input type="hidden" id="uwmwponly" value="{{.BOOL_FILLER2}}">
         <input type="hidden" id="chkgbm" value="{{.BOOL_FILLER3}}">
         <input type="hidden" id="chksys1" value="{{.BOOL_FILLER4}}">
		 <input type="hidden" id="isLocal" value="{{.BOOL_FILLER5}}">
         <input type="hidden" id="cctvstream" value="{{.BOOL_FILLER6}}">
		 <input type="hidden" id="speechRecog" value="{{.BOOL_FILLER8}}">
		 <input type="hidden" id="debug" value="{{.BOOL_FILLER7}}">
		 <div id="focusCont"></div>
        </li>
		<div class="icon-bar">
		  <span class="fa-stack fa-3x" onmouseenter="playAudio();" onclick="showDesktopsList();return false;">
			<i class="fa fa-file-o fa-stack-2x"></i>
			<strong class="fa-stack-1x fa-stack-text file-text" id="locNum" title="">0</strong>
		  </span>
		  <a href="#" onclick="openChatWithUserID('/chat-bubble/ulapphbot.html'); return false;" onmouseenter="playAudio();" title="(Click) Chat with AI" class="robot"><i class="fa fa-android"></i></a> 
		  <!--a href="https://www.github.com" onmouseenter="playAudio();" target="github" title="(Drag) Open Github" class="github"><i class="fa fa-github"></i></a--> 
		  <!--a href="https://www.reddit.com/" onmouseenter="playAudio();" target="reddit" title="(Drag) Open Reddit" class="reddit"><i class="fa fa-reddit"></i></a--> 
		  <!--a href="https://mail.google.com/" onmouseenter="playAudio();" target="gmail" title="(Click) Open Gmail"  class="envelope"><i class="fa fa-envelope"></i></a-->
		  <!--a href="https://en.m.wikipedia.org/wiki/Main_Page" onmouseenter="playAudio();" target="wiki" title="(Drag) Open Wikipedia" class="wiki"><i class="fa fa-wikipedia-w"></i></a-->
		  <a href="#" onclick="nextWp();return false;" title="Random Wallpaper" class="random"><i class="fa fa-random"></i></a>
		  <!--a href="https://www.facebook.com" onmouseenter="playAudio();" target="facebook" title="(Click) Open Facebook" class="facebook"><i class="fa fa-facebook"></i></a--> 
		  <!--a href="https://www.twitter.com" onmouseenter="playAudio();" target="twitter" title="(Drag) Open Twitter"  class="twitter"><i class="fa fa-twitter"></i></a--> 
		  <!--a href="https://www.linkedin.com" onmouseenter="playAudio();" target="linkedin" title="(Drag) Open LinkedIn"  class="linkedin"><i class="fa fa-linkedin"></i></a-->
		  <!--a href="https://www.youtube.com" onmouseenter="playAudio();" target="youtube" title="(Drag) Open Youtube" class="youtube"><i class="fa fa-youtube"></i></a-->
		  <a href="#" onmouseenter="playAudio();" onclick="setQuietMode();return false;" title="(Click) Toggle Quiet Mode" class="microphone"><i class="fa fa-microphone"></i></a>
		  <a href="#" onmouseenter="playAudio();" onclick="newsStream();return false;" title="(Click) Toggle News Stream" class="newspaper"><i class="fa fa-rss-square"></i></a>
		  <a href="#" onmouseenter="playAudio();" onclick="cctvCapture();return false;" title="(Click) Capture CCTV Now"  class="camera"><i class="fa fa-camera"></i></a>
		  <!--a href="#" onmouseenter="playAudio();" onclick="cctvStream();return false;" title="(Click) Toggle CCTV Stream"  class="camera"><i class="fa fa-camera"></i></a-->
		  <!--a href="#" onmouseenter="playAudio();" onclick="musicOnOff();return false;" title="(Click) Toggle Music" class="music"><i class="fa fa-music"></i></a-->
		  <!--a href="https://www.messenger.com" onmouseenter="playAudio();" target="messenger" title="(Click) FB Messenger" class="comment"><i class="fa fa-comment"></i></a-->
		  <!--a href="#" onmouseenter="playAudio();" onclick="showTips();return false;" title="(Click) Give me some tips!" class="comment"><i class="fa fa-comment"></i></a-->
		  <!--a href="/guestbook?GB_FUNC=GB_OWNER" onmouseenter="playAudio();" title="(Drag) Open Guestbook" class="robot"><i class="fa fa-address-book"></i-->
			<!--span class='badge badge-warning' id='lblCartCount'>{{.NUM_FILLER15}}</span></a-->
		  <a href="#" onmouseenter="playAudio();" onclick="saveNotesToCloud();return false;" title="(Click) Save Notes" class="save"><i class="fa fa-save"></i></a>
		  <a href="#" onmouseenter="playAudio();" onclick="newNote();return false;" title="(Click) New Note" class="sticky-note"><i class="fa fa-sticky-note"></i></a>
		</div>
	
`))
 
var desktopBodyPTemplate1 = template.Must(template.New("desktopBodyPTemplate1").Parse(`
        <li id="Desktop">
		 <input type="hidden" id="desktop" value="{{.}}">
         <input type="hidden" id="prevDock" value=""> 		
         <a href="" onclick="ULAPPH_UPD_DOCK_P('0');return false;">
             <em><span>Previous</span></em><br>
                <img src="/static/img/arrow_left.png" title="Desktop Switcher" height="40" width="40"/>
			</a>
        </li>
`))
 
 
var desktopBody4Template = template.Must(template.New("desktopBody4Template").Parse(`
        <li id="Drive">
         <a href="https://drive.google.com/?authuser=0#my-drive" target="drive-frame">
		 <em><span>Drive</span></em><br>
                <img src="/static/img/GDrive.png" title="Google Drive" height="40" width="40"/>
            </a>
        </li>
        <li id="Docs">
         <a href="https://docs.google.com/" target="docs-frame">
             <em><span>Docs</span></em><br>
                <img src="/static/img/docs.png" title="Docs" height="40" width="40"/>
            </a>
        </li>
        <li id="Slides">
         <a href="https://docs.google.com/presentation/u/0/" target="slides-frame">
             <em><span>Slides</span></em><br>
                <img src="/static/img/slides.png" title="Slides" height="40" width="40"/>
            </a>
        </li>
        <li id="Sheets">
         <a href="https://docs.google.com/spreadsheets/u/0/" target="sheets-frame">
             <em><span>Sheets</span></em><br>
                <img src="/static/img/sheets.png" title="Sheets" height="40" width="40"/>
            </a>
        </li>
        <li id="Drawings">
         <a href="https://docs.google.com/drawings" target="drawings-frame">
             <em><span>Drawings</span></em><br>
                <img src="/static/img/drawings.png" title="Drawings" height="40" width="40"/>
            </a>
        </li>
        <li id="Forms">
         <a href="https://docs.google.com/forms/" target="forms-frame">
             <em><span>Forms</span></em><br>
                <img src="/static/img/forms.png" title="Forms" height="40" width="40"/>
            </a>
        </li>
        <li id="Notes">
         <a href="http://keep.google.com" target="notes-frame">
             <em><span>Notes</span></em><br>
                <img src="/static/img/googlekeep.png" title="Google Keep" height="40" width="40"/>
            </a>
        </li>
        <li id="Gmail">
         <a href="http://gmail.google.com/" target="gmail-frame">
             <em><span>Gmail</span></em><br>
                <img src="/static/img/Gmail.png" title="Gmail" height="40" width="40"/>
            </a>
        </li>
        <li id="Calendar">
         <a href="http://calendar.google.com/" target="calendar-frame">
             <em><span>Calendar</span></em><br>
                <img src="/static/img/GCalendar.png" title="Calendar" height="40" width="40"/>
            </a>
        </li>
        <li id="Translate">
         <a href="http://translate.google.com.ph/" target="trans-frame">
             <em><span>Translate</span></em><br>
                <img src="/static/img/translate.png" title="Translate" height="40" width="40"/>
            </a>
        </li>
        <li id="Google Maps">
         <a href="http://maps.google.com" target="google-maps">
             <em><span>Google Maps</span></em><br>
                <img src="/static/img/google-maps.png" title="Google Maps" height="40" width="40"/>
            </a>
        </li>
`))
 
var desktopBody4TemplateCUSTOM = template.Must(template.New("desktopBody4TemplateCUSTOM").Parse(`
{{. | html}}
`))
 
var desktopBody5Templatex = template.Must(template.New("desktopBody5Templatex").Parse(`
        <li id="Articles">
         <a href="/articles?CATEGORY={{.}}">
             <em><span>Articles</span></em><br>
                <img src="/static/img/ulapph-icons-articles.png" title="Articles" height="40" width="40"/>
            </a>
        </li>
        <li id="Slides">
         <a href="/slides?CATEGORY={{.}}">
             <em><span>Slides</span></em><br>
                <img src="/static/img/ulapph-icons-slides.png" title="Slides" height="40" width="40"/>
            </a>
        </li>
        <li id="Media">
         <a href="/media?q={{.}}">
             <em><span>Media</span></em><br>
                <img src="/static/img/ulapph-icons-media.png" title="Media" height="40" width="40"/>
            </a>
        </li>
        <li id="Chat">
         <a href="/chat">
             <em><span>Chat</span></em><br>
                <img src="/static/img/chat.png" title="Chat" height="40" width="40"/>
            </a>
        </li>
        <li id="InfoDB">
         <a href="/infodb?q={{.}}">
             <em><span>InfoDB</span></em><br>
                <img src="/static/img/ulapph-icons-infodb.png" title="InfoDB" height="40" width="40"/>
            </a>
        </li>		
        <li id="Settings">
         <a href="/settings?q={{.}}">
             <em><span>Settings</span></em><br>
                <img src="/static/img/ulapph-icons-settings.png" title="Settings" height="40" width="40"/>
            </a>
        </li>
        <li id="Admin">
         <a href="/admin-setup">
             <em><span>Admin</span></em><br>
                <img src="/static/img/admin-icon.png" title="Admin" height="40" width="40"/>
            </a>
        </li>
`))
		
var desktopBody5Template = template.Must(template.New("desktopBody5Template").Parse(`	
        <li id="Logout">
         <a href= {{.}} >
             <em><span>Logout</span></em><br>
                <img src="/static/img/ulapph-icons-logout.png" title="Logout" height="40" width="40"/>
            </a>
        </li>
`))
 
var desktopBodyNTemplate = template.Must(template.New("desktopBodyNTemplate").Parse(`
        <li id="Desktop">
		 <input type="hidden" id="nextDock" value=""> 	
		 <a href="" onclick="ULAPPH_UPD_DOCK_N('0');return false;">
             <em><span>Next</span></em><br>
                <img src="/static/img/arrow_right.png" title="Desktop Switcher" height="40" width="40"/>
				</a>
        </li>
    </ul>
</div>
 
</div>
`))
 
var accountEditTemplate = template.Must(template.New("accountEditTemplate").Parse(`
	<div id="account" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h2>User Account Settings</h2>
			<h3>{{.STR_FILLER1}}</h3>
			<form name="account" action="/admin-setup" method="post">
				<input type="hidden" name="ADMIN_FUNC" value="TDSUSERS-ACCOUNT-UPDATE"/>
				<input type="hidden" name="USER" value="{{.STR_FILLER1}}"/><br>
				Account Type: <select name="ACCOUNT_TYPE">
				  <option value="Free">Free</option>
				  <option value="Bronze">Bronze</option>
				  <option value="Silver">Silver</option>
				  <option value="Gold">Gold</option>
					<option selected>
					{{.STR_FILLER2}}
					</option>
				</select><br>
				User Group: <select name="USER_GROUP">
				  <option value="GRP_USER">User Privilege</option>
				  <option value="GRP_ADMIN">Admin Privilege</option>
					<option selected>
					{{.STR_FILLER3}}
					</option>
				</select><br>
				Workforce: <select name="WORKFORCE">
				  <option value="Y">Yes</option>
				  <option value="N">No</option>
					<option selected>
					{{.STR_FILLER4}}
					</option>
				</select><br>
				Workforce ID: <textarea rows="4" cols="50" name="WORKFORCE_ID" maxlength="500">{{.STR_FILLER5}}</textarea>
				<input type="submit" name="submit" value="Update Account"/>
			</form>
	    </div>
    </div>
`))
 
var accountAddTemplate = template.Must(template.New("accountAddTemplate").Parse(`
	<div id="new-user" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h2>Manual Add New User</h2>
			<form name="account" action="/admin-setup" method="post">
				<input type="hidden" name="regType" value="manual"/>
				<input type="hidden" name="ADMIN_USER" value="{{.STR_FILLER5}}"/>
				<input type="hidden" name="ADMIN_FUNC" value="TDSUSERS-ACCOUNT-ADD"/>
				Account Country: <input type="text" name="country" value="{{.STR_FILLER4}}"/>Ex: PH<br>
				Account Email: <input type="text" name="USER" value="{{.STR_FILLER1}}"/><br>
				Account Type: <select name="ACCOUNT_TYPE">
				  <option value="Free">Free</option>
				  <option value="Bronze">Bronze</option>
				  <option value="Silver">Silver</option>
				  <option value="Gold">Gold</option>
					<option selected>
					{{.STR_FILLER2}}
					</option>					
				</select><br>
				User Group: <select name="USER_GROUP">
				  <option value="GRP_USER">User Privilege</option>
				  <option value="GRP_ADMIN">Admin Privilege</option>
					<option selected>
					{{.STR_FILLER3}}
					</option>					
				</select><br>					
				<input type="submit" name="submit" value="Add New Account"/>
			</form>
	    </div>
    </div>	
`))
 
var wallIconCopyGetHostUser = template.Must(template.New("wallIconCopyGetHostUser").Parse(`
	<div id="ulapph-wall" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<img src="/static/img/ucopy.png" width=40 height=40>
			<h1>COPY ICON to ANOTHER ULAPPH WEBSITE...</h1>
			<hr>
			Enter the target ULAPPH website and email address?
			<form name="account" action="/wall" method="post">
				ULAPPH Remote Host: <input type="text" name="remHost" maxlength="50"/> Ex: http://ulap.appspot.com<br>
				ULAPPH Remote User: <input type="text" name="remUser" maxlength="50"/> Ex: myuser@gmail.com<br>
				ULAPPH Remote Key: <input type="text" name="remKey" value="" maxlength="500"/><br>
				<input type="hidden" name="iconID" value="{{.}}">
			    <input type="hidden" name="WALL_FUNC" value="ICON_COPY2">
				<input type="submit" name="submit" value="Copy Icon"/>
			</form>
	    </div>
    </div>
	<script type="text/javascript">
		location.href = "#ulapph-wall";
	</script>
`))
 
var wallContentCopyGetHostUser = template.Must(template.New("wallContentCopyGetHostUser").Parse(`
	<div id="ulapph-wall" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<img src="/static/img/ucopy.png" width=40 height=40>
			<h1>WALL COPY</h1>
			<b>Copy from one ULAPPH to another...</b>
			<hr>
			Enter the target ULAPPH Host and registered email address?
			<form name="account" action="/wall" method="post">
				<select name="remHost"><option value="">Select</option>
				{{.HTM_FILLER1}}
				</select>
				<br>ULAPPH Remote User: <input type="text" name="remUser" value="{{.STR_FILLER2}}" maxlength="50"/> Ex: myuser@gmail.com<br>
				<br>ULAPPH Remote Key: <input type="text" name="wall_key" value="" maxlength="500"/><br>
				<input type="hidden" name="SID" value="{{.STR_FILLER1}}">
			    <input type="hidden" name="WALL_FUNC" value="CONTENT_COPY">
				<input type="submit" name="submit" value="Copy Content"/>
			</form>
	    </div>
    </div>
	<script type="text/javascript">
		location.href = "#ulapph-wall";
	</script>	
`))
 
var sysmsgInfoTemplate = template.Must(template.New("sysmsgInfoTemplate").Parse(`
<div class="info">{{.}}</div>
`))
 
var sysmsgSuccessTemplate = template.Must(template.New("sysmsgSuccessTemplate").Parse(`
<div class="success">{{.}}</div>
`))
 
var sysmsgWarningTemplate = template.Must(template.New("sysmsgWarningTemplate").Parse(`
<div class="warning">{{.}}</div>
`))
 
var sysmsgOfflineTemplate = template.Must(template.New("sysmsgOfflineTemplate").Parse(`
<div class="error2">{{.}}</div>
<img src="/static/img/system-offline.png"></img><img src="/static/img/ulapph-logo.png"></img>
`))
 
var sysmsgErrorTemplate = template.Must(template.New("sysmsgErrorTemplate").Parse(`
<div class="error">{{.}}</div>
`))
 
var sysmsgReloadTemplate = template.Must(template.New("sysmsgReloadTemplate").Parse(`
<div class="loading">{{.}}</div>
`))
 
var sysmsgActionTemplate = template.Must(template.New("sysmsgActionTemplate").Parse(`
<div class="info">Please <a href="{{.}}">click here</a> to proceed. Thank you!</div>
`))
 
var sysmsgLaterTemplate = template.Must(template.New("sysmsgLaterTemplate").Parse(`
<div class="info">Please check again after 4:30PM Philippine Standard Time. Thank you!</div>
`))
 
var sysmsgActionTemplate2 = template.Must(template.New("sysmsgActionTemplate2").Parse(`
<div class="info">Please <a href="{{.}}#page">click here</a> to proceed. Thank you!</div>
`))
 
var advertiseWithUsTemplate = template.Must(template.New("advertiseWithUsTemplate").Parse(`
	<div id="advertise" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1>Do you want to advertise with us?</h1>
			<img src="https://lh3.googleusercontent.com/E_Rqg7Fiub7db_gHEmMkBjspaJEfjXyp32CAx7gPk0FI45iC4GeJfAtCSKPLFNio8Hl1qdmvdPGhDfUYpafifekfwcI0yzeM" width=80 height=80/>
			<p>Please enter your email address & contact number below and we will get back to you soon.</p>
			<form name="advertise" action="/advertisement" method="post" target="_blank">
				Email Address: <br><input type="text" name="inquireEmail" maxlength="50"/><br>
				Contact Number (Landline or Mobile): <br><input type="text" name="contactNum" maxlength="50"/><br>
				Tell us about your advsertisement?: <br><textarea  name="message" maxlength="200" rows="10" cols="60"/></textarea><br>
				<input type="hidden" name="desktop" value="{{.}}"/>
				<br>
				<input type="submit" name="submit" value="Send Ads Inquiry"/>
			</form>
	    </div>
    </div>		
`))
 
var youHaveNewMessageTemplateA = template.Must(template.New("youHaveNewMessageTemplateA").Parse(`
	<div id="gbm" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<a href="{{.}}"><img src="/static/img/newmessage.gif"></img></a>
			<h1>New Message</h1>
            <br>			
`))
 
 
 
var contactUsTemplate = template.Must(template.New("contactUsTemplate").Parse(`
	<div id="feedback" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1>We really appreciate your feedback!</h1>
			<img src="https://lh3.googleusercontent.com/49kJYzsknxq1S17NE_Hul6tEE3pXDZh-jI51Uvp3HX-E25V-frf0JR0upqont-T_GlE6CwaCypFC9foKBX2PehULOQ-9Cx-g"/>
			<p>Please enter your email address, contact number and message. We will get back to you soon.</p>
			<form name="feedback" action="/contact-us" method="post">
				Email: <input type="text" name="inquireEmail" maxlength="50"/><br>
				Contact Number: <input type="text" name="contactNum" maxlength="50"/><br>
				Message: <textarea  name="message" maxlength="200" rows="10" cols="40"/></textarea><br>
				<input type="hidden" name="message-type" value="feedback"/>
				<input type="hidden" name="desktop" value="{{.}}"/>
				<input type="submit" name="submit" value="Send Feedback"/>
			</form>
	    </div>
    </div>		
`))
 
var paypalCancelledTemplate = template.Must(template.New("paypalCancelledTemplate").Parse(`
	<div id="feedback" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1>May we know why you cancelled your Paypal payment?</h1>
			<img src="https://lh3.googleusercontent.com/49kJYzsknxq1S17NE_Hul6tEE3pXDZh-jI51Uvp3HX-E25V-frf0JR0upqont-T_GlE6CwaCypFC9foKBX2PehULOQ-9Cx-g" width=150 height=150/>
			<p>Please enter your email address, contact number and message. We will get back to you soon.</p>
			<form name="feedback" action="/contact-us" method="post">
				Email: <input type="text" name="inquireEmail" maxlength="50"/><br>
				Contact Number: <input type="text" name="contactNum" maxlength="50"/><br>
				Message: <textarea  name="message" maxlength="200" rows="4" cols="40"/></textarea><br>
				<input type="hidden" name="message-type" value="fb-cancel"/>
				<input type="hidden" name="desktop" value="desktop0"/>
				<input type="submit" name="submit" value="Send Feedback"/>
			</form>
	    </div>
    </div>
	<script type="text/javascript">
		location.href = "#feedback";
	</script>	
`))
 
var paypalPaidTemplate = template.Must(template.New("paypalPaidTemplate").Parse(`
	<div id="feedback" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1>Thank you! Your order is now being processed...</h1>
			<img src="https://lh3.googleusercontent.com/YkCFuWAkFy1j73vGVDHhVKhI4L5PSblsHLg8gOKR7T1m0HsDHGOR-1sDeaFGH4t3mF7sFv8mwLdvgyT9jXWpkgbPBkbnVgqqNQ" width=150 height=150/>
			<p>Here, you can send us additional information. Please enter your email address, contact number and additional details related to your order. We will get back to you soon in order to process your order.</p>
			<form name="feedback" action="/contact-us" method="post">
				Email: <input type="text" name="inquireEmail" maxlength="50"/><br>
				Contact Number: <input type="text" name="contactNum" maxlength="50"/><br>
				Message: <textarea  name="message" maxlength="200" rows="4" cols="40"/></textarea><br>
				<input type="hidden" name="message-type" value="fb-success"/>
				<input type="hidden" name="desktop" value="desktop0"/>
				<br>
				<input type="submit" name="submit" value="Send Info"/>
			</form>
	    </div>
    </div>
	<script type="text/javascript">
		location.href = "#feedback";
	</script>	
`))
 
 
var paypalPaidPremium = template.Must(template.New("paypalPaidPremium").Parse(`
	<div id="feedback" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1>Thank you! Your order is now being processed...</h1>
			<img src="https://lh3.googleusercontent.com/YkCFuWAkFy1j73vGVDHhVKhI4L5PSblsHLg8gOKR7T1m0HsDHGOR-1sDeaFGH4t3mF7sFv8mwLdvgyT9jXWpkgbPBkbnVgqqNQ" width=150 height=150/>
			<p>The premium content will be downloaded shortly.</p>
	    </div>
    </div>
	<script type="text/javascript">
		location.href = "#feedback";
	</script>	
`))
 
var paypalPremiumContent = template.Must(template.New("paypalPremiumContent").Parse(`
	<div id="premium" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1>Premium Access</h1>
			<p>This item contains premium contents. Click button below to proceed with payment.</p>
			<b>SID</b>: {{.STR_FILLER1}}<br>
			<b>Title</b>: {{.STR_FILLER7}}<br>
			<b>Author</b>: {{.STR_FILLER8}}<br>
			<b>Amount</b>: {{.STR_FILLER4}}<br>
			<b>Currency</b>: {{.STR_FILLER3}}<br>
			{{if ne .STR_FILLER9 "" }}
			<b>Preview</b>: <a href="{{.STR_FILLER9}}" target="preview-{{.STR_FILLER1}}">Click to see preview</a><br><br>
			{{else}}
			<b>Preview</b>: No preview available<br><br>
			{{end}}
			<p>Once payment is successful, you will get an access code which you can use to access the contents.</p>
				<script src="/static/js/paypal-button.min.js?merchant={{.STR_FILLER2}}"
					data-button="buynow"
					data-name="{{.STR_FILLER1}}@{{.STR_FILLER6}}"
					data-number="{{.STR_FILLER5}}"
					data-amount="{{.STR_FILLER4}}"
					data-currency="{{.STR_FILLER3}}"
					data-quantity="1"
					data-size="large"
					data-style="primary"
					data-callback="{{.STR_FILLER6}}store?STO_FUNC=paypal-premium-success&PRD_ID={{.STR_FILLER1}}&PRD_DESC={{.STR_FILLER1}}@{{.STR_FILLER6}}@{{.STR_FILLER5}}&PRD_AMT={{.STR_FILLER4}}"
					data-return="{{.STR_FILLER6}}store?STO_FUNC=paypal-premium-success&PRD_ID={{.STR_FILLER1}}&PRD_DESC={{.STR_FILLER1}}@{{.STR_FILLER6}}@{{.STR_FILLER5}}&PRD_AMT={{.STR_FILLER4}}"
					async
				></script>	
		</div>
    </div>
	<script type="text/javascript">
		location.href = "#premium";
	</script>
`))
 
var contactUsTemplateServices = template.Must(template.New("contactUsTemplateServices").Parse(`
	<div id="services" class="modalDialog">
		<div>
			<a href="#close" title="Close" class="close">X</a>
			<h1>ULAPPH Services Inquiry</h1>
			<img src="https://lh3.googleusercontent.com/nAFEsMhbkQW6TB99W4dBaiyU5WGB0bKt48SraWvspNNPEbvDBqiDYRVYugOSLbPGvEJMYcYMBxrCmiINXBleQ33VzHCYRdg"/>
			<p>Please enter your email address, contact number below and message. We will get back to you soon.</p>
			<form name="feedback" action="/contact-us" method="post">
				Email: <input type="text" name="inquireEmail" maxlength="50"/><br>
				Contact Number: <input type="text" name="contactNum" maxlength="50"/><br>
				Message: <textarea  name="message" maxlength="200" rows="4" cols="20"/></textarea><br>
				<input type="hidden" name="message-type" value="services"/>
				<input type="hidden" name="desktop" value="{{.}}"/>
				<input type="submit" name="submit" value="Send Inquiry"/>
			</form>
	    </div>
    </div>		
`))
 
var iconEditTemplateA = template.Must(template.New("iconEditTemplateA").Parse(`
{{range .}}
    <div class="warning"><h1>Admin - Edit Icon Details</h1></div>
	<form name="icon" action="/admin-icons" method="post">
		<div class="success2"><a href="{{.URL_ADD}}"><img src={{.IMG_SRC}} width=40 height=40></img></a> </div>
		<div class="info2">SYS_VER: {{.SYS_VER}}<input type="hidden" name="SYS_VER" value="{{.SYS_VER}}" maxlength="10"/><br></div>
		<div class="info2">ICON_ID: {{.ICON_ID}}<input type="hidden" name="ICON_ID" value="{{.ICON_ID}}" maxlength="20"/><br>
			<input type="checkbox" name="addNewIconID"/><font color=red>Note: Check if this will create a new unique ICON_ID.</font>
		</div>
		<div class="info2">URL_ID: <input type="text" name="URL_ID" value="{{.URL_ID}}" value="{{.URL_ID}}" maxlength="20"/> <br></div>
		<div class="info2">URL_ADD: <textarea name="URL_ADD" value="{{.URL_ADD}}" cols=40 rows=10 maxlength="200">{{.URL_ADD}}</textarea><br></div>
		<div class="info2">ICON_NAME: <input type="text" name="ICON_NAME" value="{{.ICON_NAME}}" maxlength="200"/> <br></div>
		<div class="info2">IMG_SRC: <input type="text" name="IMG_SRC" value="{{.IMG_SRC}}" maxlength="500"/> <br></div>
		<div class="info2">DESKTOP: <select name="DESKTOP">
 
{{end}}
	
`))
 
var iconEditTemplateB = template.Must(template.New("iconEditTemplateB").Parse(`
{{range .}}
		</select><br>Current: {{.DESKTOP}}</div>
		<div class="info2">BLOB_KEY: <input type="text" name="BLOB_KEY" value="{{.BLOB_KEY}}" maxlength="500"/> <br></div>
		<div class="success2"><input type="hidden" name="EditIconFunc" value="SaveIcon"/></div>
		<div class="success"><input type="submit" name="submit" value="Save Icon"/></div>
	</form>	
{{end}}
	
`))
 
 
var adEditTemplate = template.Must(template.New("adEditTemplate").Parse(`
{{range .}}
    <div class="warning"><h1>Admin - Edit Ads Details</h1></div>
	<form name="icon" action="/admin-ads" method="post">
		<div class="success2"><img src={{.ADS_IMG}} width=250 height=250></img></div>
		<div class="success2">CATEGORY:
		<select name="CATEGORY">
 
{{end}}
	
`))
 
var adEditTemplate2 = template.Must(template.New("adEditTemplate2").Parse(`
{{range .}}
				<option selected>
				{{.CATEGORY}}
				</option>		
		</select>Current: {{.CATEGORY}}<br>
		</div>
		<div class="validation2">IF APPLY TO ALL POSITIONS AND SLOTS: <ul>
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_ALLP&ADS_ID={{.ADS_ID}}">Make Advertisement appear on all timeslots on all desktops, all positions</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}">Make Advertisement appear on all timeslots on all desktops, position 1</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}">Make Advertisement appear on all timeslots on all desktops, position 2</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}">Make Advertisement appear on all timeslots on all desktops, position 3</a> ]
			</ul>
		</div>
		<div class="validation2">IF APPLY TO POSITION 1 AND RANDOM SLOT 0-9: <ul>
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_0">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 0</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_1">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 1</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_2">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 2</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_3">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 3</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_4">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 4</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_5">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 5</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_6">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 6</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_7">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 7</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_8">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 8</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS1&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_9">Make Advertisement appear on all timeslots on all desktops, position 1. Make this appear only on RANDOM SLOT 9</a> ]
		</div>
		<div class="validation2">IF APPLY TO POSITION 2 AND RANDOM SLOT 0-9: <ul>
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_0">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 0</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_1">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 1</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_2">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 2</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_3">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 3</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_4">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 4</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_5">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 5</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_6">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 6</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_7">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 7</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_8">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 8</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS2&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_9">Make Advertisement appear on all timeslots on all desktops, position 2. Make this appear only on RANDOM SLOT 9</a> ]
		</div>
		<div class="validation2">IF APPLY TO POSITION 3 AND RANDOM SLOT 0-9: <ul>
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_0">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 0</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_1">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 1</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_2">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 2</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_3">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 3</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_4">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 4</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_5">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 5</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_6">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 6</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_7">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 7</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_8">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 8</a> ]
			<li>[ <a href="/admin-ads?ADS_FUNC=SHOW_ALLD_POS3&ADS_ID={{.ADS_ID}}&RAN_SLOT=ADS_RAND_9">Make Advertisement appear on all timeslots on all desktops, position 3. Make this appear only on RANDOM SLOT 9</a> ]
			</ul>
		</div>
		<div class="validation2">MORE CUSTOM ACTIONS: <ul>
			<li>[ <a href="/admin-ads?ADS_FUNC=SELECT_DESKTOP_POSITION&ADS_ID={{.ADS_ID}}&ADS_IMG={{.ADS_IMG}}">Make Advertisement appear on to be selected desktop, timeslot and position...</a> ]
			</ul>
		</div>
		<div class="info2">ADS_ID: {{.ADS_ID}}<input type="hidden" name="ADS_ID" value="{{.ADS_ID}}" maxlength="20"/><br></div>
		<div class="info2">ADS_PUB_ID: <input type="text" name="ADS_PUB_ID" value="{{.ADS_PUB_ID}}" value="{{.ADS_PUB_ID}}" maxlength="20"/> <br></div>
		<div class="info2">ADS_STATUS: <input type="text" name="ADS_STATUS" value="{{.ADS_STATUS}}" maxlength="200"/> <br></div>
		<div class="info2">ADS_TITLE: <textarea rows="4" cols="50" name="ADS_TITLE" maxlength="500">{{.ADS_TITLE}}</textarea> <br></div>
		<div class="info2">UPLOAD_BY: {{.UPLOAD_BY}}<input type="hidden" name="UPLOAD_BY" value="{{.UPLOAD_BY}}" maxlength="500"/> <br></div>
		<div class="info2">ADS_URL: <textarea rows="4" cols="50" name="ADS_URL" maxlength="500">{{.ADS_URL}}</textarea><br></div>
		<div class="info2">UPLOAD_DATE: {{.UPLOAD_DATE}}<input type="hidden" name="UPLOAD_DATE" value="{{.UPLOAD_DATE}}" maxlength="500"/> <br></div>
		<div class="info2">ADS_IMG: <textarea rows="4" cols="50" name="ADS_IMG" maxlength="500">{{.ADS_IMG}}</textarea> <br></div>
		<div class="success2"><input type="hidden" name="ADS_FUNC" value="SaveAd"/></div>
		<div class="success"><input type="submit" name="submit" value="Save Ads"/></div>
	</form>	
{{end}}
	
`))
 
var adEditCustomTemplate = template.Must(template.New("adEditCustomTemplate").Parse(`
    <div class="warning"><h1>Admin - Custom Ads Placement for {{.STR_FILLER1}}</h1></div>
	<form name="icon" action="/admin-ads" method="post">
		<div class="success2"><img src={{.STR_FILLER2}} width=250 height=250></img></div>
		<div class="success2">CATEGORY:
		<select name="CATEGORY">
 
	
`))
 
var adEditCustomTemplate2 = template.Must(template.New("adEditCustomTemplate2").Parse(`
			<option selected>
			SELECT VALUE
			</option>	
		
		</select>
		</div>
		<div class="validation2">IF APPLIES TO ALL TIMESLOTS:<br>
			<select name="ADS_CUST_FUNC">
			  <option value="SHOW_SELD_ALLP">Make Advertisement appear throughout the day on this desktop, all positions</option>
			  <option value="SHOW_SELD_POS1">Make Advertisement appear throughout the day on this desktop, position 1</option>
			  <option value="SHOW_SELD_POS2">Make Advertisement appear throughout the day on this desktop, position 2</option>
			  <option value="SHOW_SELD_POS3">Make Advertisement appear throughout the day on this desktop, position 3</option>
			<option selected>
			SELECT VALUE
			</option>	
 
			</select>
		</div>
		<div class="error2">IF APPLIES TO SPECIFIC TIMESLOT:
		<select name="TIMESLOT">
`))
		
var adTimeSlots = template.Must(template.New("adTimeSlots").Parse(`
			<option value="16:00:00">[UTC-16:00:00] [PST-00:00:00]</option>
			<option value="17:00:00">[UTC-17:00:00] [PST-01:00:00]</option>
			<option value="18:00:00">[UTC-18:00:00] [PST-02:00:00]</option>
			<option value="19:00:00">[UTC-19:00:00] [PST-03:00:00]</option>
			<option value="20:00:00">[UTC-20:00:00] [PST-04:00:00]</option>
			<option value="21:00:00">[UTC-21:00:00] [PST-05:00:00]</option>
			<option value="22:00:00">[UTC-22:00:00] [PST-06:00:00]</option>
			<option value="23:00:00">[UTC-23:00:00] [PST-07:00:00]</option>
			<option value="00:00:00">[UTC-00:00:00] [PST-08:00:00]</option>
			<option value="01:00:00">[UTC-01:00:00] [PST-09:00:00]</option>
			<option value="02:00:00">[UTC-02:00:00] [PST-10:00:00]</option>
			<option value="03:00:00">[UTC-03:00:00] [PST-11:00:00]</option>
			<option value="04:00:00">[UTC-04:00:00] [PST-12:00:00]</option>
			<option value="05:00:00">[UTC-05:00:00] [PST-13:00:00]</option>
			<option value="06:00:00">[UTC-06:00:00] [PST-14:00:00]</option>
			<option value="07:00:00">[UTC-07:00:00] [PST-15:00:00]</option>
			<option value="08:00:00">[UTC-08:00:00] [PST-16:00:00]</option>
			<option value="09:00:00">[UTC-09:00:00] [PST-17:00:00]</option>
			<option value="10:00:00">[UTC-10:00:00] [PST-18:00:00]</option>
			<option value="11:00:00">[UTC-11:00:00] [PST-19:00:00]</option>
			<option value="12:00:00">[UTC-12:00:00] [PST-20:00:00]</option>
			<option value="13:00:00">[UTC-13:00:00] [PST-21:00:00]</option>
			<option value="14:00:00">[UTC-14:00:00] [PST-22:00:00]</option>
			<option value="15:00:00">[UTC-15:00:00] [PST-23:00:00]</option>
 
`)) 			
 
var adEditCustomTemplate2b = template.Must(template.New("adEditCustomTemplate2b").Parse(`
			<option selected>
			SELECT VALUE
			</option>	
		</select><br>
			<select name="ADS_CUST_FUNC2">
			  <option value="SHOW_SELD_SELT_ALLP">Make Advertisement appear only on this timeslot on this desktop, all positions</option>
			  <option value="SHOW_SELD_SELT_POS1">Make Advertisement appear only on this timeslot on this desktop, position 1</option>
			  <option value="SHOW_SELD_SELT_POS2">Make Advertisement appear only on this timeslot on this desktop, position 2</option>
			  <option value="SHOW_SELD_SELT_POS3">Make Advertisement appear only on this timeslot on this desktop, position 3</option>
				<option selected>
				SELECT VALUE
				</option>			
			</select><br>
			OPTIONALLY, SELECT RANDOM SLOT 0-9:
			<select name="RAN_SLOT">
			  <option value="ADS_RAND_0">Make this appear only on RANDOM SLOT 0</option>
			  <option value="ADS_RAND_1">Make this appear only on RANDOM SLOT 1</option>
			  <option value="ADS_RAND_2">Make this appear only on RANDOM SLOT 2</option>
			  <option value="ADS_RAND_3">Make this appear only on RANDOM SLOT 3</option>
			  <option value="ADS_RAND_4">Make this appear only on RANDOM SLOT 4</option>
			  <option value="ADS_RAND_5">Make this appear only on RANDOM SLOT 5</option>
			  <option value="ADS_RAND_6">Make this appear only on RANDOM SLOT 6</option>
			  <option value="ADS_RAND_7">Make this appear only on RANDOM SLOT 7</option>
			  <option value="ADS_RAND_8">Make this appear only on RANDOM SLOT 8</option>
			  <option value="ADS_RAND_9">Make this appear only on RANDOM SLOT 9</option>
				<option selected>
				SELECT VALUE
				</option>			
			</select>
		</div>
		<input type="hidden" name="ADS_FUNC" value="SHOW_CUST_PLCMT"/>
		<input type="hidden" name="ADS_ID" value="{{.STR_FILLER1}}"/>
		<div class="success"><input type="submit" name="submit" value="Save Custom Placement"/></div>
	</form>	
	
`))
 
var adSlotEditTemplate = template.Must(template.New("adSlotEditTemplate").Parse(`
{{range .}}
    <div class="warning"><h1>Admin - Edit Ads Time Slot Details</h1></div>
	<form name="icon" action="/admin-ads" method="post">
		<div class="validation2">CATEGORY:
		<select name="CATEGORY">
 
{{end}}
	
`))
 
var adSlotEditTemplate2 = template.Must(template.New("adSlotEditTemplate2").Parse(`
{{range .}}
		<option selected>
				{{.CATEGORY}}
				</option>		
		</select>Current: {{.CATEGORY}}<br>
		</div>
		<div class="success2">UTC TIME SLOT:
		<select name="ADS_TIME_SLOT">
{{end}}
`))
 
					
var adSlotEditTemplate2b = template.Must(template.New("adSlotEditTemplate2b").Parse(`
{{range .}}
			<option selected>
			{{.ADS_TIME_SLOT}}
			</option>	
		</select></div>
		<div class="success2">PHL TIME SLOT:
		<select name="ADS_TIME_SLOT2">
{{end}}
`))
			
var adSlotEditTemplate2c = template.Must(template.New("adSlotEditTemplate2c").Parse(`
{{range .}}
			<option selected>
			{{.ADS_TIME_SLOT2}}
			</option>	
		</select>
		</div>
		<div class="info2">ADS_RAND_0: <input type="text" name="ADS_RAND_0" value="{{.ADS_RAND_0}}" maxlength="100"/><div id="image-area-ADS_RAND_0"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('0-{{.ADS_RAND_0}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_1: <input type="text" name="ADS_RAND_1" value="{{.ADS_RAND_1}}" maxlength="100"/><div id="image-area-ADS_RAND_1"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('1-{{.ADS_RAND_1}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_2: <input type="text" name="ADS_RAND_2" value="{{.ADS_RAND_2}}" maxlength="100"/><div id="image-area-ADS_RAND_2"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('2-{{.ADS_RAND_2}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_3: <input type="text" name="ADS_RAND_3" value="{{.ADS_RAND_3}}" maxlength="100"/><div id="image-area-ADS_RAND_3"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('3-{{.ADS_RAND_3}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_4: <input type="text" name="ADS_RAND_4" value="{{.ADS_RAND_4}}" maxlength="100"/><div id="image-area-ADS_RAND_4"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('4-{{.ADS_RAND_4}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_5: <input type="text" name="ADS_RAND_5" value="{{.ADS_RAND_5}}" maxlength="100"/><div id="image-area-ADS_RAND_5"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('5-{{.ADS_RAND_5}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_6: <input type="text" name="ADS_RAND_6" value="{{.ADS_RAND_6}}" maxlength="100"/><div id="image-area-ADS_RAND_6"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('6-{{.ADS_RAND_6}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_7: <input type="text" name="ADS_RAND_7" value="{{.ADS_RAND_7}}" maxlength="100"/><div id="image-area-ADS_RAND_7"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('7-{{.ADS_RAND_7}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_8: <input type="text" name="ADS_RAND_8" value="{{.ADS_RAND_8}}" maxlength="100"/><div id="image-area-ADS_RAND_8"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('8-{{.ADS_RAND_8}}');return false;">Show Ads</a>]</div>
		<div class="info2">ADS_RAND_9: <input type="text" name="ADS_RAND_9" value="{{.ADS_RAND_9}}" maxlength="100"/><div id="image-area-ADS_RAND_9"></div>[<a href="" onclick="ULAPPH_ADS_GETIMG('9-{{.ADS_RAND_9}}');return false;">Show Ads</a>]</div>
		<div class="success2"><input type="hidden" name="ADS_FUNC" value="SaveSlot"/></div>
		<div class="success"><input type="submit" name="submit" value="Save Slot"/></div>
	</form>	
{{end}}
	
`))
 
var descEditTemplateA = template.Must(template.New("descEditTemplateA").Parse(`
{{range .}}
    <div class="warning"><h1>Desktop - Edit Icons Description</h1></div>
	<form name="icon" action="/settings-display-screen" method="post">
		<div class="success2">Enter description of this set of icons so you can set them later easily.</div>
		<div class="info2">ID: {{.NUM_VAL}}</div>
		<div class="info2">ICONS: {{.TXT_VAL}}<br></div>
		<input type="hidden" name="uid" value="{{.USER}}"/>
		<input type="hidden" name="NUM_VAL" value="{{.NUM_VAL}}"/>
{{end}}	
`))
 
var descEditTemplateB = template.Must(template.New("descEditTemplateB").Parse(`
		<input type="hidden" name="desktop-name" value="{{.}}"/>
`))
 
var descEditTemplateC = template.Must(template.New("descEditTemplateC").Parse(`
{{range .}}
		<input type="hidden" name="loadIcons" value="UpdateDesc2"/>
		<div class="info2"><textarea rows="4" cols="50" name="CFG_DESC" maxlength="500">{{.CFG_DESC}}</textarea><br>
		<input type="submit" name="submit" value="Update Description"/>
		</div>
	</form>	
	<div class="success2">[<a href="/settings-display-screen?loadIcons=SetDefault&desktop-name=desktop0&NUM_VAL={{.NUM_VAL}}&CFG_DESC={{.CFG_DESC}}&uid={{.USER}}&LOAD_DATA={{.TXT_VAL}}">Set as Default Desktop0 Icons</a>] [<a href="/settings-display-screen?loadIcons=ShareDesktopIcons&desktop-name=desktop0&NUM_VAL={{.NUM_VAL}}&CFG_DESC={{.CFG_DESC}}&uid={{.USER}}&LOAD_DATA={{.TXT_VAL}}">Share All Desktop Icons</a>]</div>
{{end}}
`))
 
var profileEditTemplate = template.Must(template.New("profileEditTemplate").Parse(`
{{range .}}
	<form name="profile" action="/people-edit" method="post">
		<div class="success2">
			<input type="hidden" name="PICTURE" value="{{.PICTURE}}"/>
			<a href="/people-edit?EditPeopleFunc=ViewPeople&UID={{.UID}}&SID={{.UID}}"><img src={{.PICTURE}} title="Preview Profile" width=120 height=150></img></a>
			[<a href="/people-edit?EditPeopleFunc=EditPic&UID={{.UID}}">Upload new picture</a>][<a href="/people-edit?EditPeopleFunc=HideUser&UID={{.UID}}">Hide Profile</a>][<a href="/people-edit?EditPeopleFunc=UnhideUser&UID={{.UID}}">Unhide Profile</a>]
		</div>
		<div class="info2">UID: {{.UID}}<input type="hidden" name="UID" value="{{.UID}}" maxlength="200"/><br></div>
  <ul class="menu">
    <li class="toggle1">Location Info</li>
    <li class="toggle2">Personal Info</li>
    <li class="toggle3">Citizenship</li>
    <li class="toggle4">FS/Selling/Offering/I Have...</li>
    <li class="toggle5">WTB/Buying/Wanted/I Need...</li>
    <li class="toggle6">Ratings</li>
    <li class="toggle7">Geolocation</li>
    <li class="toggle8">Ringtone</li>
</ul>
<div class="container">
<div class="toggle1">
		<h3>Location Info:</h3>
 
		<div class="info2">COUNTRY: {{.COUNTRY}}<input type="hidden" name="COUNTRY" value="{{.COUNTRY}}" maxlength="20"/><br></div>
		<div class="info2">REGION: <input type="text" name="REGION" value="{{.REGION}}" maxlength="20"/> <br></div>
		<div class="info2">CITY: <input type="text" name="CITY" value="{{.CITY}}" maxlength="200"/> <br></div>
		<div class="info2">MUNICIPALITY: <input type="text" name="MUNICIPALITY" value="{{.MUNICIPALITY}}" maxlength="200"/> <br></div>
		<div class="info2">BARANGAY: <input type="text" name="BARANGAY" value="{{.BARANGAY}}" maxlength="500"/> <br></div>
		<div class="info2">SUBDIVISION: <input type="text" name="SUBDIVISION" value="{{.SUBDIVISION}}" maxlength="500"/> <br></div>
</div>
<div class="toggle2">
		<h3>Personal Info:</h3>
 
		<div class="info2">BIRTH_DAY: <input type="text" name="BIRTH_DAY" value="{{.BIRTH_DAY}}" maxlength="500"/>Sample: 02/22/1980<br></div>
		<div class="info2">ELEM_SCHOOL: <input type="text" name="ELEM_SCHOOL" value="{{.ELEM_SCHOOL}}" maxlength="500"/> <br></div>
		<div class="info2">HIGH_SCHOOL: <input type="text" name="HIGH_SCHOOL" value="{{.HIGH_SCHOOL}}" maxlength="500"/> <br></div>
		<div class="info2">COLLEGE: <input type="text" name="COLLEGE" value="{{.COLLEGE}}" maxlength="500"/> <br></div>
		<div class="info2">POST_GRAD: <input type="text" name="POST_GRAD" value="{{.POST_GRAD}}" maxlength="500"/> <br></div>
		<div class="info2">PROFESSION: <input type="text" name="PROFESSION" value="{{.PROFESSION}}" maxlength="500"/> <br></div>
		<div class="info2">COMPANY: <input type="text" name="COMPANY" value="{{.COMPANY}}" maxlength="500"/> <br></div>
		<div class="info2">CONTACT_NUM: <input type="text" name="CONTACT_NUM" value="{{.CONTACT_NUM}}" maxlength="500"/> <br></div>
		<div class="info2">FACEBOOK LINK: <input type="text" name="SOCIAL_1" value="{{.SOCIAL_1}}" maxlength="500"/> <br></div>
		<div class="info2">GOOGLE+ LINK: <input type="text" name="SOCIAL_2" value="{{.SOCIAL_2}}" maxlength="500"/> <br></div>
		<div class="info2">OTHER SOCIAL SITE LINK: <input type="text" name="SOCIAL_3" value="{{.SOCIAL_3}}" maxlength="500"/> <br></div>
</div>
<div class="toggle3">
		<h3>Citizenship:</h3>
 
		<div class="info2">GOVT ID: <input type="text" name="REG_VOTER" value="{{.REG_VOTER}}" maxlength="500"/> <br></div>
		<div class="info2">ID NUMBER: <input type="text" name="ID_NUMBER" value="{{.ID_NUMBER}}" maxlength="500"/> <br></div>
</div>
<div class="toggle4">
		<h3>FS/Selling/Offering/I Have...</h3>
 
		<div class="info2"><textarea rows="10" cols="50" name="I_HAVE_TEXT" maxlength="2000" value="{{.I_HAVE_TEXT}}">{{.I_HAVE_TEXT}}</textarea>
		<span class="button-wrap"><a href="/stream?STR_FUNC=RUN_TOPICS&u=-1" class="button button-pill button-raised button-primary">Search</a></span>
		<br>Note: Keywords will be matched with other users or notify you any related contents found.<br>
		Sample:<br>
		website business<br>
		programming golang<br>
		I am selling used car<br>
		<br></div>
</div>
<div class="toggle5">
		<h3>WTB/Buying/Wanted/I Need...</h3>
 
		<div class="info2"><textarea rows="10" cols="50" name="I_NEED_TEXT" maxlength="2000" value="{{.I_NEED_TEXT}}">{{.I_NEED_TEXT}}</textarea>
		<span class="button-wrap"><a href="/stream?STR_FUNC=RUN_TOPICS&u=-2" class="button button-pill button-raised button-primary">Search</a></span>
		<br>Note: Keywords will be matched with other users or notify you any related contents found.<br>
		Sample:<br>
		house and lot in philippines<br>
		management job<br>
		household helper<br>
		<br></div>
</div>
<div class="toggle6">
		<h3>Ratings:</h3>
		<div class="info2">BADGE: {{.BADGE}}<input type="hidden" name="BADGE" value="{{.BADGE}}" maxlength="500"/> <br></div>
		<div class="info2">CRED_PTS: {{.CRED_PTS}}<input type="hidden" name="CRED_PTS" value="{{.CRED_PTS}}" maxlength="500"/> <br></div>	
		<div class="info2">POS_VOTES: {{.POS_VOTES}}<input type="hidden" name="POS_VOTES" value="{{.POS_VOTES}}" maxlength="500"/> <br></div>
		<div class="info2">NEG_VOTES: {{.NEG_VOTES}}<input type="hidden" name="NEG_VOTES" value="{{.NEG_VOTES}}" maxlength="500"/> <br></div>
		<div class="info2">LIFE_RATING: {{.LIFE_RATING}}<input type="hidden" name="LIFE_RATING" value="{{.LIFE_RATING}}" maxlength="500"/> <br></div>
</div>
<div class="toggle7">
		<h3>Geolocation:</h3>
		<div class="info2">Geolocation: <textarea rows="4" cols="50" name="FILLER_1" maxlength="500" value="{{.FILLER_1}}">{{.FILLER_1}}</textarea></div>
		<div class="info2">Latitude: <textarea rows="4" cols="50" name="FILLER_2" maxlength="500" value="{{.FILLER_2}}">{{.FILLER_2}}</textarea></div>	
		<div class="info2">Longitude: <textarea rows="4" cols="50" name="FILLER_3" maxlength="500" value="{{.FILLER_3}}">{{.FILLER_3}}</textarea></div>	
</div>
<div class="toggle8">
		<h3>Ringtone:</h3>
		<div class="info2">Ringtone: <textarea rows="4" cols="50" name="RINGTONE" maxlength="500">{{.RINGTONE}}</textarea>Sample: https://www.ulapph.com/static/audio/newmsg.ogg<br></div>
		<div class="info2">Play Ringtone: <audio controls>
									<source src="{{.RINGTONE}}" type="audio/wav">
									<source src="{{.RINGTONE}}" type="audio/mp3">
									  Your browser does not support the audio element.
								</audio></div>
</div>
</div>
		<input type="hidden" name="EditPeopleFunc" value="SaveProfile"/>
		<input type="submit" name="submit" value="Save Profile"/>
	</form>
{{end}}
`))
 
 
var profileEditTemplateNew = template.Must(template.New("profileEditTemplateNew").Parse(`
	<form name="profile" action="/people-edit" method="post">
    <div class="warning2"><h1>Create Profile Details</h1></div>
		<div class="success2">
			<img src="/static/img/emoticon-happy.png" width=40 height=40></img>
		</div>
		<div class="info2">UID: {{.}}<input type="hidden" name="UID" value="{{.}}" maxlength="200"/><br></div>
`))
 
var profileEditTemplateNew1 = template.Must(template.New("profileEditTemplateNew1").Parse(`
  <ul class="menu">
    <li class="toggle1">Location Info</li>
    <li class="toggle2">Personal Info</li>
    <li class="toggle3">Citizenship</li>
    <li class="toggle4">FS/Selling/Offering/I Have</li>
    <li class="toggle5">WTB/Buying/Wanted/I Need.</li>
    <li class="toggle6">Ratings</li>
    <li class="toggle7">Geolocation</li>
    <li class="toggle8">Ringtone</li>
</ul>
<div class="container">
<div class="toggle1">
		<h3>Location Info:</h3>
 
		<div class="info2">COUNTRY: <input type="text" name="COUNTRY" value="{{.}}" maxlength="2"/><br></div>
`))
		
var profileEditTemplateNew2 = template.Must(template.New("profileEditTemplateNew2").Parse(`
		<div class="info2">REGION: <input type="text" name="REGION" value="" maxlength="20"/> <br></div>
		<div class="info2">CITY: <input type="text" name="CITY" value="" maxlength="200"/> <br></div>
		<div class="info2">MUNICIPALITY: <input type="text" name="MUNICIPALITY" value="" maxlength="200"/> <br></div>
		<div class="info2">BARANGAY: <input type="text" name="BARANGAY" value="" maxlength="500"/> <br></div>
		<div class="info2">SUBDIVISION: <input type="text" name="SUBDIVISION" value="" maxlength="500"/> <br></div>
</div>
<div class="toggle2">
		<h3>Personal Info:</h3>
 
		<div class="info2">BIRTH_DAY: <input type="text" name="BIRTH_DAY" value="" maxlength="500"/>Sample: 02/22/1980<br></div>
		<div class="info2">ELEM_SCHOOL: <input type="text" name="ELEM_SCHOOL" value="" maxlength="500"/> <br></div>
		<div class="info2">HIGH_SCHOOL: <input type="text" name="HIGH_SCHOOL" value="" maxlength="500"/> <br></div>
		<div class="info2">COLLEGE: <input type="text" name="COLLEGE" value="" maxlength="500"/> <br></div>
		<div class="info2">POST_GRAD: <input type="text" name="POST_GRAD" value="" maxlength="500"/> <br></div>
		<div class="info2">PROFESSION: <input type="text" name="PROFESSION" value="" maxlength="500"/> <br></div>
		<div class="info2">COMPANY: <input type="text" name="COMPANY" value="" maxlength="500"/> <br></div>
		<div class="info2">CONTACT_NUM: <input type="text" name="CONTACT_NUM" value="" maxlength="500"/> <br></div>
		<div class="info2">FACEBOOK LINK: <input type="text" name="SOCIAL_1" value="" maxlength="500"/> <br></div>
		<div class="info2">GOOGLE+ LINK: <input type="text" name="SOCIAL_2" value="" maxlength="500"/> <br></div>
		<div class="info2">OTHER SOCIAL SITE LINK: <input type="text" name="SOCIAL_3" value="" maxlength="500"/> <br></div>
</div>
<div class="toggle3">
		<h3>Citizenship:</h3>
 
		<div class="info2">GOVT ID: <input type="text" name="REG_VOTER" value="" maxlength="500"/> <br></div>
		<div class="info2">ID NUMBER: <input type="text" name="ID_NUMBER" value="" maxlength="500"/> <br></div>
</div>
<div class="toggle4">
		<h3>FS/Selling/Offering/I Have...</h3>
 
		<div class="info2"><textarea rows="4" cols="50" name="I_HAVE_TEXT" maxlength="2000">I have something...</textarea>Note: You may populate later.<br></div>
</div>
<div class="toggle5">
		<h3>WTB/Buying/Wanted/I Need...</h3>
 
		<div class="info2"><textarea rows="4" cols="50" name="I_NEED_TEXT" maxlength="2000">I need something...</textarea>Note: You may populate later.<br></div>
</div>
<div class="toggle6">
		<h3>Ratings:</h3>
 
		<div class="info2">BADGE: <input type="hidden" name="BADGE" value="" maxlength="500"/> <br></div>
		<div class="info2">CRED_PTS: 0<input type="hidden" name="CRED_PTS" value="0" maxlength="500"/> <br></div>	
		<div class="info2">POS_VOTES: 0<input type="hidden" name="POS_VOTES" value="0" maxlength="500"/> <br></div>
		<div class="info2">NEG_VOTES: 0<input type="hidden" name="NEG_VOTES" value="0" maxlength="500"/> <br></div>
		<div class="info2">LIFE_RATING: 0<input type="hidden" name="LIFE_RATING" value="0" maxlength="500"/> <br></div>
</div>
<div class="toggle7">
		<h3>Geolocation:</h3>
 
		<div class="info2">Geolocation: <input type="text" name="FILLER_1" value="" maxlength="500"/></div>
		<div class="info2">Latitude: <input type="text" name="FILLER_2" value="" maxlength="500"/></div>	
		<div class="info2">Longitude: <input type="text" name="FILLER_3" value="" maxlength="500"/></div>
</div>
<div class="toggle8">
		<h3>Ringtone:</h3>
 
		<div class="info2">Ringtone: <input type="text" name="RINGTONE" value="" maxlength="500"/>Sample: https://www.ulapph.com/static/audio/newmsg.ogg <br></div>
</div>
</div>
		<input type="hidden" name="EditPeopleFunc" value="SaveProfile"/>
		<input type="hidden" name="NewProfile" value="YES"/>
		<div class="success2"><input type="submit" name="submit" value="Save Profile"/></div>		
	</form>	
	
`))
 
var desktopBodyNotesCSSTemplate = template.Must(template.New("desktopBodyNotesCSSTemplate").Parse(`
    <style>
        img#sample_site {
            width: 100%;
        }
		.note {
			background-color: {{.STR_FILLER1}};
			height: 250px;
			padding: 10px;
			position: absolute;
			width: 200px;
			-webkit-box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.5);
		}
 
		.note:hover .closebutton {
			display: block;
		}
 
		.closebutton {
			display: none;
			background-image: url(/static/img/deleteButton.png);
			height: 30px;
			position: absolute;
			left: -15px;
			top: -15px;
			width: 30px;
		}
 
		.closebutton:active {
			background-image: url(/static/img/deleteButtonPressed.png);
		}
 
		.edit {
			outline: none;
		}
 
		.timestamp {
			position: absolute;
			left: 0px;
			right: 0px;
			bottom: 0px;
			font-size: 9px;
			background-color: {{.STR_FILLER2}};
			color: white;
			border-top: 1px solid #a80;
			padding: 2px 4px;
			text-align: right;
		}
	</style>
`))
 
var desktopBodyNotesDBTemplate = template.Must(template.New("desktopBodyNotesDBTemplate").Parse(` 	
 
`))
 
var desktopBodyTabzillaTemplate = template.Must(template.New("desktopBodyTabzillaTemplate").Parse(`
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
<script src="/static/js/tab.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab2.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab3.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab4.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/tab7.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/tab8d.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab9d.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/alertify.min.js"></script>
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
<script src="/static/js/channel-desktop.js"></script>
<script src="/static/js/channel-firebase.js"></script>
<script src="/static/js/soundOnOff.js"></script>
<script src="/static/js/ranwall.js"></script>
<script src="/static/js/wall-copy.js"></script>
<script type="text/javascript">
	location.href = "#page";
</script>		
</body>
</html>
`))
 
var desktopBodyTabzillaTemplatejswm = template.Must(template.New("desktopBodyTabzillaTemplatejswm").Parse(`
<script src="/static/js/alertify.min.js"></script>
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
<script src="/static/js/email-to-name.js"></script>
<script src="/static/js/channel-uwm.js"></script>
<script src="/static/js/geostat.js"></script>
{{if ne .STR_FILLER5 "local" }}
<script src="/static/js/channel-firebase.js"></script>
{{else}}
<script src="/static/js/websocket.js"></script>
{{end}}
<script src="/static/js/uwmOnOff.js"></script>
<script src="/static/js/constat.js"></script>
<script src="/static/js/speech.js?ver=0.2" type="text/javascript"></script>
<script src="/static/js/mobitouch.js"></script>
<script src="/static/js/soundOnOff.js"></script>
{{if eq .STR_FILLER3 "noteYes" }}
<input type="hidden" id="notesrc" value="{{.NUM_FILLER1}}">
<script src="/static/js/cloud-notes.js"></script>
<script src="/static/js/cloud-notes-load.js"></script>
{{end}}
<input type="hidden" id="DEFAULT_WALLPAPER" value="{{.STR_FILLER4}}">
<script src="/static/lib/js/humanize/humanize-duration.js"></script>
<script src="/static/js/ranwall.js"></script>
<script src="/static/js/wall-copy.js"></script>
<script type="text/javascript">
    var uDesk = document.getElementById("desktop").value;
	var dName = document.getElementById("dName").value;
	if (dName == "" || dName == undefined) {
		dName = "Ulapph Desktop"
	}
    var uTitle = uDesk + "::" + dName;
    if (uDesk == "uwm") {
        uTitle = "Ulapph Desktop";
    }
 	document.title = uTitle +  ' @ ' + window.location.host;
	localStorage['mylocation-input'] = 0;
</script>
<script type="text/javascript">
	location.href = "#page";
</script>
<script type="text/javascript">
	var windowManager = new JSWM();
</script>
<script src="/static/js/mouse-clock.js"></script>
<!--script src="/static/js/get-fingerprint.js"></script-->
<script src="/static/lib/js/speechkitt/annyang.min.js"></script>
<script src="/static/lib/js/speechkitt/speechkitt.min.js"></script>
<script src="/static/lib/js/speechkitt/newsapi.js"></script>
<script src="/static/lib/js/speechkitt/ulapphsr.js"></script>
<script src="/static/js/battery-monitor.js"></script>
`))
 
 
var desktopBodyTabzillaTemplateGuest = template.Must(template.New("desktopBodyTabzillaTemplateGuest").Parse(`
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
<script src="/static/js/tab.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab2.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab3.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab4.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/tab7.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/tab8d.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab9d.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/alertify.min.js"></script>
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
<script src="/static/js/channel-desktop.js"></script>
<script src="/static/js/channel-firebase.js"></script>
<script src="/static/js/soundOnOff.js"></script>
<script src="/static/js/ranwall.js"></script>
<script src="/static/js/wall-copy.js"></script>
<script type="text/javascript">
	location.href = "#page";
</script>	
</body>
</html>
`))	
 
var desktopBodyTabzillaTemplateNotes = template.Must(template.New("desktopBodyTabzillaTemplateNotes").Parse(`
    <script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
<script src="/static/js/tab.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab2.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab3.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab4.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/tab7.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/tab8d.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab9d.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/alertify.min.js"></script>
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
<script src="/static/js/channel-desktop.js"></script>
<script src="/static/js/channel-firebase.js"></script>
<script src="/static/js/soundOnOff.js"></script>
{{if eq .STR_FILLER3 "noteYes" }}
<input type="hidden" id="notesrc" value="{{.NUM_FILLER1}}">
<script src="/static/js/cloud-notes.js"></script>
<script src="/static/js/cloud-notes-load.js"></script>
{{end}}
<script src="/static/js/ranwall.js"></script>
<script src="/static/js/wall-copy.js"></script>
<script type="text/javascript">
	location.href = "#page";
</script>	
</body>
</html>
`))
 
var desktopBodyTabzillaTemplateNotesGuest = template.Must(template.New("desktopBodyTabzillaTemplateNotesGuest").Parse(`
    <script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
<script src="/static/js/tab.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab2.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab3.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab4.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/tab7.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>
<script src="/static/js/tab8d.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/tab9d.js?alignment=left&amp;color=00BCBA" type="text/javascript"></script>	
<script src="/static/js/alertify.min.js"></script>
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
<script src="/static/js/channel-desktop.js"></script>
<script src="/static/js/channel-firebase.js"></script>
<script src="/static/js/soundOnOff.js"></script>
<script src="/static/js/cloud-notes.js"></script>
<script src="/static/js/ranwall.js"></script>
<script src="/static/js/wall-copy.js"></script>
<script type="text/javascript">
	location.href = "#page";
</script>	
</body>
</html>
`))
 
 
 
var desktopBodyTabzillaTemplateMobile = template.Must(template.New("desktopBodyTabzillaTemplateMobile").Parse(`
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
	<script src="/static/js/alertify.min.js"></script>
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
<script src="/static/js/channel-mobile.js" type="text/javascript"></script>
<script src="/static/js/channel-firebase.js"></script>
<script src="/static/js/showTools.js" type="text/javascript"></script>	
</body>
</html>
`))
 
var desktopBodyTabzillaTemplateMobilePublic = template.Must(template.New("desktopBodyTabzillaTemplateMobilePublic").Parse(`
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
</body>
</html>
`))
 
var desktopBodyTabzillaTemplateMobilePublicChan = template.Must(template.New("desktopBodyTabzillaTemplateMobilePublicChan").Parse(`
<center>&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.</center>
<center><a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop" title="ULAPPH Cloud Desktop Documentation">Powered by ULAPPH Cloud Desktop</a></center>
<br>
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
	<script src="/static/js/alertify.min.js"></script>
	<script src="/static/js/channel-public.js"></script>
	<script src="/static/js/geolatlon.js"></script>
	<!--script type="text/javascript" src="//s7.addthis.com/static/js/300/addthis_widget.js#pubid={{.}}"></script-->
</body>
</html>
`))
 
 
 
var generalFooterBodyHTMLzilla = template.Must(template.New("generalFooterBodyHTMLzilla").Parse(`
<script src="/static/js/pulldown-tabzilla-dynamic.js"></script>
	<br>
	<br>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->	
	<!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
</body>
</html>
`))
 
 
var desktopBodyNTemplate1 = template.Must(template.New("desktopBodyNTemplate1").Parse(`
        <li id="Desktop">
		 <input type="hidden" id="nextDock" value=""> 	
		 <a href="" onclick="ULAPPH_UPD_DOCK_N('0');return false;">
             <em><span>Next</span></em><br>
                <img src="/static/img/arrow_right.png" title="Desktop Switcher" height="40" width="40"/>
				</a>
        </li>
 
    </ul>
</div>
 
</div>
</body>
</html>
`))
 
var guestbookTemplateSign = template.Must(template.New("guestbookTemplateSign").Parse(`
<script src="https://apis.google.com/static/js/platform.js" async defer></script>
    <div class="warning2"><img src="{{.STR_FILLER2}}" width=80 height=60> <br><a href="/people-edit?EditPeopleFunc=EditPeople&UID={{.STR_FILLER1}}&SID={{.STR_FILLER1}}">{{.STR_FILLER1}}</a></b> [ <a href="/guestbook?UID={{.STR_FILLER1}}&GB_FUNC=FILTER">History</a> ]</div>
    <form action="/guestbook" method="post">
	  <div><input type="hidden" name="UID" value="{{.STR_FILLER1}}"></div>
      <div><input type="hidden" name="GB_FUNC" value="SIGN"></div> 	
      <div class="info2"><textarea name="content" rows="4" cols="40" maxlength="500"></textarea></div>
      <div class="success2"><input type="image" name="submit" src="/static/img/sendmsg.png" with=100 height=40></div>
    </form>
`))
 
var guestbookSendMessageToAll = template.Must(template.New("guestbookSendMessageToAll").Parse(`
    <div class="warning2"><h3>Send Message To All Users:</h3></div>
    <form action="/guestbook" method="post">
			Method: <select name="METHOD">
			  <option value="CH">Channel Messaging (All Sites)</option>
			  <option value="GB">Guestbook Messaging (This Site)</option>
			  <option value="CH2">Guestbook Messaging (All Sites)</option>
			</select>
	  <div><input type="hidden" name="UID" value="all"><div>
	  <div><input type="hidden" name="GB_FUNC" value="SIGN_ALL"></div>
	  <div class="info2"><textarea name="content" rows="4" cols="40" maxlength="500"></textarea></div>
      <div><input type="submit" value="Send To All"></div>
    </form>
	<div class="success2">Sample Messages:</div>
	<div class="info2">Please clear your browser's application cache. This is required for all users due to system-wide changes.</div>
`))	
 
var guestbookTemplateFeedback = template.Must(template.New("guestbookTemplateFeedback").Parse(`
    <div class="warning2"><h3>Send Feedback (<a href="/guestbook?GB_FUNC=FEEDBACK_VIEW">Show All</a>)</b></h3></div>
    <form action="/guestbook" method="post">
	  <div><input type="hidden" name="UID" value="{{.STR_FILLER1}}"></div>
	  <div><input type="hidden" name="SID" value="{{.STR_FILLER2}}"></div>
	  <div><input type="hidden" name="IS_FEEDBACK" value="YES"></textarea></div>
      <div><input type="hidden" name="GB_FUNC" value="SIGN"></textarea></div> 	
      <div class="info2"><textarea name="content" rows="4" cols="30" maxlength="500"></textarea></div>
	  <div class="success2"><input type="submit" value="Send Feedback"></div>
    </form>
`))	
	
var outputFooterTemplate = template.Must(template.New("outputFooterTemplate").Parse(`
    <hr>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->	
	<!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
  </body>
</html>
`))
 
var mediaMIDIPlayerA = template.Must(template.New("mediaMIDIPlayerA").Parse(`
		<style type="text/css">
.source_code { background-color: #bbbbff; color:black }	
.player { background-color: #bbbbff; color:black; border: 2px solid grey;}		</style>
 
		<div class="player">
			<p>
<a href="#example" onclick="doPlay('{{.}}');">Play MIDI</a>&nbsp; &nbsp;
			<p>
			<div style="font-size: 71%;font-size: 71%">
				MIDI Status:: <span id="msg" style="color: green">Initializing ...</span>
			</div>
		</div>
	<script type='text/javascript'>
		function doPlay(midiLink) {
			document.getElementById("msg").innerHTML = "Playing...";
			var m = new MidiPlayer(midiLink);
			m.setDebugDiv('msg');
			m.play();
		}
	</script>
`))
 
var umpFooterTemplate = template.Must(template.New("umpFooterTemplate").Parse(`
    <hr>
	<h3>[ <a href="/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD">Upload</a> ] [ <a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_{{.}}">View All {{.}}</a> ]</h3>
	<hr>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->	
	<!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
  </body>
</html>
`))
 
var outputFooterTemplateChannel = template.Must(template.New("outputFooterTemplateChannel").Parse(`
	[<a href="/guestbook?GB_FUNC=DELETE_ALL">Delete All Messages</a>] [<a href="/guestbook?GB_FUNC=READ_ALL">Mark all Read</a>]
    <hr>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->	
	<!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
	<script src="/static/js/alertify.min.js"></script>
	<!--script src="/static/js/channel.js" type="text/javascript"></script-->
	<!--script src="/static/js/soundOnOff.js" type="text/javascript"></script-->
	<script>
		setInterval( function(){checkMessages();}, 10000);
	</script>
	<script src="/static/js/geolatlon.js"></script>
  </body>
</html>
`))
 
var outputFooterTemplateToken = template.Must(template.New("outputFooterTemplateToken").Parse(`
		<!--firebase js-->
		<script src="https://www.gstatic.com/firebasejs/5.5.9/firebase.js"></script>
		<script src="/static/js/firebase-account.js"></script>
	<script src="/static/js/channel-token.js" type="text/javascript"></script>
	<script src="/static/js/channel-firebase.js"></script>
    <hr>
	&copy; 2014-2022 <a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop">ULAPPH Cloud Desktop</a>. All rights reserved.
    <br>
    <!--a href="https://github.com/edwindvinas/ULAPPH-Cloud-Desktop"><img src="https://lh3.googleusercontent.com/rWg64BhkoZePFav1Piw-3GUL8HpG0_Bz3fjhw6vbPDjcAIrkFGfJFU0E3uEOEc6xN5RfAnBxUH1sJ2onP4tnDfs9bOpn4Bs" width=50 height=50></a-->	
	<!--a href="https://golang.org/"><img src="/static/img/gopher.png" width=50 height=40></a><a href="https://cloud.google.com/"><img src="/static/img/google-cloud.png" width=50 height=50></a-->
  </body>
</html>
`))

var multiUploaderImagesHdr = template.Must(template.New("multiUploaderImagesHdr").Parse(`
<!DOCTYPE html>
 
<meta charset="utf-8">
 
<title>Dropzone::www.ulapph.com - ULAPPH Cloud Desktop</title>
<meta name="description" content="ULAPPH Cloud Desktop" />
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<script src="/static/js/dropzone.js"></script>
<link rel="stylesheet" href="/static/css/bootstrap.min.css">
<link rel="stylesheet" href="/static/css/dropzone.css">
<script src="/static/js/jquery-1.11.1.min.js"></script>
<link rel="stylesheet" href="/static/lib/css/sol/sol.css">
<script type="text/javascript" src="/static/lib/js/sol/sol.js"></script>
<body>
<a href="/website?q=home"><img src="/static/img/home.png" title="All Contents" height="40" width="40"></a> <a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT"><img src="/static/img/recent.png" title="Recent" height="40" width="40"></a> <a href="/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD"><img src="/static/img/uploader.png" title="Upload More..." height="40" width="40"></a>
<p>
  To set common media properties such as title/desc, populate below then click submit. Once done, click above Media Gallery to view the uploaded files.
</p>
  <form action="/media?FUNC_CODE=MULTI_IMAGE_UPLOAD" method="post">
  TITLE: <input type="text" id="title" name="TITLE" value="" onchange="saveTitle();return false;"><br>
  DESCRIPTION: <input type="text" id="desc" name="DESC" value="" onchange="saveDesc();return false;"><br>
  <script type="text/javascript">
    if(typeof(Storage) !== "undefined") {
        document.getElementById("title").value = localStorage.muTitleStorage;
		document.getElementById("desc").value = localStorage.muDescStorage;
    } else {
        //alert("Sorry, your browser does not support web storage... You won't be able to record or see session details.");
        //return
    }
	
	function saveTitle() {
		localStorage.muTitleStorage = document.getElementById("title").value;
	}
	function saveDesc() {
		localStorage.muDescStorage = document.getElementById("desc").value;
	}
  </script>
  DATA_TYPE: <select name="DATA_TYPE" value="auto">
	  <option value="auto">Auto-detect</option>
	  <option value="image">Image</option>
	  <option value="text">Text</option>
	  <option value="music">Music</option>
	  <option value="video">Video</option>
	</select><br>
  ADD TO WALLPAPERS: <input type="checkbox" name="FL_ADD_WP"> (For images only)<br>
  CATEGORY: <select name="CATEGORY" id="CATEGORY"><br>
			<option value="Select Category">Select Category</option>
`))

var multiUploaderImagesHdr2 = template.Must(template.New("multiUploaderImagesHdr2").Parse(`
<!DOCTYPE html>
 
<meta charset="utf-8">
 
<title>Dropzone::www.ulapph.com - ULAPPH Cloud Desktop</title>
<meta name="description" content="ULAPPH Cloud Desktop" />
<link rel="shortcut icon" href="/static/img/favicon.ico"/>
<script src="/static/js/dropzone.js"></script>
<link rel="stylesheet" href="/static/css/dropzone.css">
<body>
<a href="/website?q=home"><img src="/static/img/home.png" title="All Contents" height="40" width="40"></a> <a href="/infodb?DB_FUNC=MEDIA&CATEGORY=ALL_RECENT&LAST=50" ><img src="/static/img/recent.png" title="Recent" height="40" width="40"></a> <a href="/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD"><img src="/static/img/uploader.png" title="Upload More..." height="40" width="40"></a>
<p>
  Drag and drop one or more files for each box. Each file is being uploaded automatically.
</p>
<div id="status-area">
</div>
`))

var multiUploaderImagesForm = template.Must(template.New("multiUploaderImagesForm").Parse(`
<form action="{{.}}" class="dropzone">
`))
 
var multiUploaderImagesForm2 = template.Must(template.New("multiUploaderImagesForm2").Parse(`
<input type="hidden" name="FL_ADD_WP" value="{{.STR_FILLER5}}">
<input type="hidden" name="DATA_TYPE" value="{{.STR_FILLER4}}">
<input type="hidden" name="TITLE" value="{{.STR_FILLER1}}">
<input type="hidden" name="DESC" value="{{.STR_FILLER2}}">
<input type="hidden" name="CATEGORY" value="{{.STR_FILLER3}}">
</form>
`))
 
//BATCH JOBS
//update STATS.ACCESS statistics
func taskUpdateStatsAccess(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSUSERS").Order("USER")
	//log.Panicf("[S0552]")
	  recCount,_ := datastoreClient.Count(c,q)
	users := make([]TDSUSERS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
 
	}
	//log.Printf("datastoreClient.Get()  [73019]")
	for _, p := range users{
	
		if strings.TrimSpace(p.USER) != "" {
			//inquire counter value
			ncNameStatsAccess := fmt.Sprintf("STATS.ACCESS.%s", p.USER)
			//currCount, _ := getCount(c, ncNameStatsAccess)
			
			cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", ncNameStatsAccess)
			fmt.Fprintf(w, "cKey: %s<br>", cKey)
			TASK_MEMCACHER_CounterIncrement_CACHE := ""
			TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
			fmt.Fprintf(w, "TASK_MEMCACHER_CounterIncrement_CACHE: %s<br>", TASK_MEMCACHER_CounterIncrement_CACHE)
 
			if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
				currCount := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
				//update stats for each user
					
					p := TDSSTATS{ 		
						SYS_VER: 1,
						STAT_NAME: ncNameStatsAccess, 	
						DATA_TYPE: "NUM", 	
						VAL_NUM: currCount,
						VAL_TXT: "STATS.ACCESS",
					}
					
					key := datastore.NameKey("TDSSTATS", ncNameStatsAccess, nil)
					fmt.Fprintf(w, "%s: %v<br>", ncNameStatsAccess, currCount)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
                    }
                    //log.Printf("datastoreClient.Put()  [73050]")
					//log.Panicf("[S0553]")
 
				//}
			}	
		}	
		
	}
	
	//update MOST_ACTIVE* stats
	q = datastore.NewQuery("TDSSTATS").Order("-VAL_NUM").Limit(100)
	//log.Panicf("[S0554]")
	stats := make([]TDSSTATS, 0, 100)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		 panic(err)
	  }
      //log.Printf("datastoreClient.Get()  [73066]")
	statFnd := 0
	for _, p := range stats{
	
		if strings.Index(p.VAL_TXT, "STATS.ACCESS") != -1 {
		//if p.VAL_TXT == "STATS.ACCESS" {
			statFnd++
			
					p.DATA_TYPE = "TXT"
					maUser := strings.Split(p.STAT_NAME,"STATS.ACCESS.")[1]
					p.VAL_TXT = maUser
					statName := fmt.Sprintf("MOST_ACTIVE_%v", statFnd)
					p.STAT_NAME = statName //"MOST_ACTIVE_1"
					p.VAL_NUM = p.VAL_NUM + 1
					key := datastore.NameKey("TDSSTATS", statName, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0555]")
                    //log.Printf("datastoreClient.Put()  [73085]")
					fmt.Fprintf(w, "%v: %v<br>", statName, maUser)
					
				if statFnd == 3 {
					break
				}
			//}
		}
	}	
	
}
 
//update STATS.DESKTOP statistics
func taskUpdateStatsDesktop(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		fmt.Fprintf(w, "IS_OK_TO_RUN == false")
		return
	}	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	for i := 0; i <= 50; i++ {
		deskName := fmt.Sprintf("desktop%d", i)
	
		//inquire counter value
		ncNameStatsAccess := fmt.Sprintf("STATS.DESKTOP.%s", deskName)
		//currCount, _ := getCount(c, ncNameStatsAccess)
		
		cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", ncNameStatsAccess)
		fmt.Fprintf(w, "cKey: %s<br>", cKey)
		TASK_MEMCACHER_CounterIncrement_CACHE := ""
		TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
		fmt.Fprintf(w, "TASK_MEMCACHER_CounterIncrement_CACHE: %s<br>", TASK_MEMCACHER_CounterIncrement_CACHE)
		if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
			currCount := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
				
				p := TDSSTATS{ 		
					SYS_VER: 1,
					STAT_NAME: ncNameStatsAccess, 	
					DATA_TYPE: "NUM", 	
					VAL_NUM: currCount,
					VAL_TXT: "STATS.DESKTOP",
				}
				
				key := datastore.NameKey("TDSSTATS", ncNameStatsAccess, nil)
				if _, err := datastoreClient.Put(c, key, &p); err != nil {
					 panic(err)
				}
				//log.Panicf("[S0556]")
                //log.Printf("datastoreClient.Put()  [73139]")
				fmt.Fprintf(w, "%s: %v<br>", ncNameStatsAccess, currCount)
				//break
			//}
		}
 
		deskName = fmt.Sprintf("uwm%d", i)
	
		//inquire counter value
		ncNameStatsAccess = fmt.Sprintf("STATS.DESKTOP.%s", deskName)
		//currCount, _ := getCount(c, ncNameStatsAccess)
		
		cKey = fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", ncNameStatsAccess)
		fmt.Fprintf(w, "cKey: %s<br>", cKey)
		//TASK_MEMCACHER_CounterIncrement_CACHE := ""
		TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
		fmt.Fprintf(w, "TASK_MEMCACHER_CounterIncrement_CACHE: %s<br>", TASK_MEMCACHER_CounterIncrement_CACHE)
		if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
			currCount := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
				
				p := TDSSTATS{ 		
					SYS_VER: 1,
					STAT_NAME: ncNameStatsAccess, 	
					DATA_TYPE: "NUM", 	
					VAL_NUM: currCount,
					VAL_TXT: "STATS.DESKTOP",
				}
				
				key := datastore.NameKey("TDSSTATS", ncNameStatsAccess, nil)
				if _, err := datastoreClient.Put(c, key, &p); err != nil {
					 panic(err)
				}
				//log.Panicf("[S0557]")
                //log.Printf("datastoreClient.Put()  [73172]")
				fmt.Fprintf(w, "%s: %v<br>", ncNameStatsAccess, currCount)
				//break
			//}
		}
		
		
	}
	
	//update MOST_ACTIVE* stats
	q := datastore.NewQuery("TDSSTATS").Order("-VAL_NUM").Limit(100)
	//log.Panicf("[S0558]")
	
	stats := make([]TDSSTATS, 0, 100)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [73191]")
	
	statFnd := 0
	for _, p := range stats{
	
		if strings.Index(p.VAL_TXT, "STATS.DESKTOP") != -1 {
		//if p.VAL_TXT == "STATS.DESKTOP" {
			statFnd++
			
					p.DATA_TYPE = "TXT"
					maUser := strings.Split(p.STAT_NAME,"STATS.DESKTOP.")[1]
					p.VAL_TXT = maUser
					statName := fmt.Sprintf("MOST_POPULAR_%v", statFnd)
					p.STAT_NAME = statName //"MOST_POPULAR_1"
					p.VAL_NUM = p.VAL_NUM + 1
					key := datastore.NameKey("TDSSTATS", statName, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0559]")
                    //log.Printf("datastoreClient.Put()  [73211]")
					fmt.Fprintf(w, "%v: %v<br>", statName, maUser)
					
				if statFnd == 3 {
					break
				}
			//}
		}
	}
 
	//update country stats
	//get list of countries	
	//statFnd = 0
	for _, v := range xCountry2Name{
	
		//ctry := k
		cname := v
		ncNameStatsAccess := fmt.Sprintf("STATS.COUNTRY.%v", cname)
		
		cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", ncNameStatsAccess)
		fmt.Fprintf(w, "cKey: %s<br>", cKey)
		TASK_MEMCACHER_CounterIncrement_CACHE := ""
		TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
		fmt.Fprintf(w, "TASK_MEMCACHER_CounterIncrement_CACHE: %s<br>", TASK_MEMCACHER_CounterIncrement_CACHE)
		if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
			currCount := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
				
				p := TDSSTATS{ 		
					SYS_VER: 1,
					STAT_NAME: ncNameStatsAccess, 	
					DATA_TYPE: "NUM", 	
					VAL_NUM: currCount,
					VAL_TXT: "STATS.COUNTRY",
				}
				
				key := datastore.NameKey("TDSSTATS", ncNameStatsAccess, nil)
				if _, err := datastoreClient.Put(c, key, &p); err != nil {
					 panic(err)
				}
				//log.Panicf("[S0560]")
                //log.Printf("datastoreClient.Put()  [73251]")
				fmt.Fprintf(w, "%s: %v<br>", ncNameStatsAccess, currCount)
				//break
			//}
		}
	}
 
	//update content stats
	q = datastore.NewQuery("TDSSLIDE").Order("-NUM_VIEWS").Limit(10)
	//log.Panicf("[S0561]")
	recCount,_ := datastoreClient.Count(c,q)
	slides := make([]TDSSLIDE, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
		 panic(err)
	}
	//log.Printf("datastoreClient.Get()  [73266]")
	for _, m := range slides{
		
		SID := fmt.Sprintf("TDSSLIDE-%v", m.DOC_ID)
		ncNameStatsAccess := fmt.Sprintf("STATS.CONTENT.%v", SID)
		
		p := TDSSTATS{ 		
			SYS_VER: 1,
			STAT_NAME: ncNameStatsAccess, 	
			DATA_TYPE: "NUM", 	
			VAL_NUM: int(m.NUM_VIEWS),
			VAL_TXT: "STATS.CONTENT",
		}
		
		key := datastore.NameKey("TDSSTATS", ncNameStatsAccess, nil)
		if _, err := datastoreClient.Put(c, key, &p); err != nil {
			 panic(err)
		}
		//log.Panicf("[S0562]")
        //log.Printf("datastoreClient.Put()  [73285]")
		fmt.Fprintf(w, "%s: %v<br>", ncNameStatsAccess, m.NUM_VIEWS)
	}
				
 
	q = datastore.NewQuery("TDSARTL").Order("-NUM_VIEWS").Limit(10)
	//log.Panicf("[S0563]")
	recCount,_ = datastoreClient.Count(c,q)
	articles := make([]TDSARTL, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
		 panic(err)
	}
	//log.Printf("datastoreClient.Get()  [73297]")
	for _, m := range articles{
		
		SID := fmt.Sprintf("TDSARTL-%v", m.DOC_ID)
		ncNameStatsAccess := fmt.Sprintf("STATS.CONTENT.%v", SID)
		
		p := TDSSTATS{ 		
			SYS_VER: 1,
			STAT_NAME: ncNameStatsAccess, 	
			DATA_TYPE: "NUM", 	
			VAL_NUM: int(m.NUM_VIEWS),
			VAL_TXT: "STATS.CONTENT",
		}
		
		key := datastore.NameKey("TDSSTATS", ncNameStatsAccess, nil)
		if _, err := datastoreClient.Put(c, key, &p); err != nil {
			 panic(err)
		}
		//log.Panicf("[S0564]")
        //log.Printf("datastoreClient.Put()  [73316]")
		fmt.Fprintf(w, "%s: %v<br>", ncNameStatsAccess, m.NUM_VIEWS)
	}
	
}
 
//clean-up inactive users
func taskCleanupInactiveUsers(w http.ResponseWriter, r *http.Request) {
 
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//CLEAN-UP USERS TABLE/////////////////////////////
	//get os from TDSSTATS
	fmt.Fprintf(w, "CLEANING UP TDSUSERS...<br>")
	q := datastore.NewQuery("TDSUSERS").Filter("LOGGED_IN= ", 1)
	//log.Panicf("[S0565]")
 
	//temp	
	recCount,_ := datastoreClient.Count(c,q)
	fmt.Fprintf(w, "TDSUSERS TOTAL: %v<br>", recCount)
	users := make([]TDSUSERS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	 }
	//log.Printf("datastoreClient.Get()  [73345]")
	for _, p := range users{
		
		if p.LAST_LOGIN != "" && strings.TrimSpace(p.USER) != "" {
		
			//rt2, _ := time.Parse("2006-01-02 15:04:00", pDateTime)
			//rTimestamp := fmt.Sprintf("%v", rt2.Format("20060102150405"))
			//timeFormat := "2006-01-02 15:04 MST"
			timeFormat := "20060102150405"
			fmt.Fprintf(w, "USER: %v<br>", p.USER)
			fmt.Fprintf(w, "timeFormat: %v<br>", p.LAST_LOGIN)
			//v := "20060102150405"
			then, err := time.Parse(timeFormat, p.LAST_LOGIN)
			if err != nil {
				 panic(err)
			}
			duration := time.Since(then)
			fmt.Fprintf(w, "DURATION(hrs): %v<br>", duration.Hours())
			if duration.Hours() > LOGIN_HOURS_EXPR {
				IS_ACTIVE := getActiveStatus(w,r,p.USER)
				if IS_ACTIVE == "N" {		
					fmt.Fprintf(w, "USER IS INACTIVE!<br>")
					//set user as inactive
					p.LOGGED_IN = 0
					key := datastore.NameKey("TDSUSERS", p.USER, nil)
					_, err := datastoreClient.Put(c, key, &p)
					if err != nil {
						 panic(err)
					}
					//log.Panicf("[S0566]")
                    //log.Printf("datastoreClient.Put()  [73375]")
					//delete user from channel store
					//datastoreClient.Delete(c, getKeyChannel(c,p.USER))
					//set user as offline
					//also update memcache for IS_LOGGED_IN status
					usersProcessor_CACHE_KEY := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", p.USER)
					putStrToMemcacheWithoutExp(w,r,usersProcessor_CACHE_KEY,"N")
					//remove inactive flag					
					//------
					fmt.Fprintf(w, "USERS TABLE CLEAN-UP ok...<br>")
				}
			}
		}
	}
	
	//CLEAN-UP CHANNELS TABLE/////////////////////////////////
 
	q = datastore.NewQuery("channel")
	//log.Panicf("[S0567]")
	recCount,_ = datastoreClient.Count(c,q)
	fmt.Fprintf(w, "channel TOTAL: %v<br>", recCount)
 
	ch := make([]Channelstore, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &ch); err != nil {
		//update overquota flag
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	}
	//log.Printf("datastoreClient.Get()  [73402]")
	USER_LIST := ""
	for _, p := range ch {
		//i := strings.Index(ChanID, "@")
		
	  //check activeness of the user
	  if p.DateCreated != "" {
		timeFormat := "20060102150405"
		then, err := time.Parse(timeFormat, p.DateCreated)
		if err != nil {
			 panic(err)
		}
		duration := time.Since(then)
		if duration.Hours() > CHAN_HOURS_EXPR {
			IS_ACTIVE := getActiveStatus(w,r,p.ChanID)
			if IS_ACTIVE == "N" {
				//delete old channel here
				datastoreClient.Delete(c, getKeyChannel(c,p.ChanID))
				p.ChanID = ""	
			}
		}
	  }
		
		//if i != -1 {
		if p.ChanID != "" {
			//fuCtr++
			//channel.Send(c,p.ChanID,MSG)
			USER_LIST = fmt.Sprintf("%v,%v", USER_LIST, p.ChanID)
		}
	
	}
	
	//update users online cache
	USERS_ONLINE_CACHE_KEY := "USERS_ONLINE_LIST"
	putStrToMemcacheWithoutExp(w,r,USERS_ONLINE_CACHE_KEY,USER_LIST)
	
	fmt.Fprintf(w, "CHANNELS TABLE CLEAN-UP ok...<br>")
	
	//CLEAN-UP TDSLOGS TABLE/////////////////////////////////
	q = datastore.NewQuery("TDSLOGS").Order("ACCESS_LOG_DATE").Limit(1000)
	//log.Panicf("[S0568]")
	recCount,_ = datastoreClient.Count(c,q)
	fmt.Fprintf(w, "TDSLOGS TOTAL: %v<br>", recCount)
 
	logs := make([]TDSLOGS, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &logs); err != nil {
		//update overquota flag
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	}
	//log.Printf("datastoreClient.Get()  [73452]")
	for _, p := range logs {
	
	  s := strings.Index(p.ACCESS_LOG_DATE, "TDSSLIDE-")
	  a := strings.Index(p.ACCESS_LOG_DATE, "TDSARTL-")
	  m := strings.Index(p.ACCESS_LOG_DATE, "TDSMEDIA-")
 
	  if p.ACCESS_LOG_DATE != "" && p.ACCESS_LOG_DATE != "FAM_TRACKER" && s == -1 && a == -1 && m == -1 {
		timeFormat := "20060102150405"
		//2015-07-11
		
		nDate := strings.Replace(p.ACCESS_LOG_DATE, "-", "", -1)
		nDate2 := fmt.Sprintf("%v000000", nDate)
		then, err := time.Parse(timeFormat, nDate2)
		if err != nil {
			 panic(err)
		}
		duration := time.Since(then)
		if duration.Hours() > 730 {
			//delete
			accessLogKey := fmt.Sprintf("%v.%v", p.ACCESS_LOG_DATE, p.ACCESS_LOG_SEQ)
			datastoreClient.Delete(c, getKeyAccess(c,accessLogKey))
			fmt.Fprintf(w, "DELETED LOG: %v<br>", accessLogKey)
		}
	  }
	
	}
	
	fmt.Fprintf(w, "TDSLOGS TABLE CLEAN-UP ok...<br>")	
	
}

//checks system quota 
func checkQuotaSystem(w http.ResponseWriter, r *http.Request) (FL_PROC_OK bool) {
	//c := appengine.NewContext(r)
	
	FL_PROC_OK = true
	IS_OVER_QUOTA := ""
	cKey := "IS_OVER_QUOTA"
	IS_OVER_QUOTA = getStrMemcacheValueByKey(w,r,cKey)
	
	if IS_OVER_QUOTA == "Y" {
		FL_PROC_OK = false
		//w.WriteHeader(http.StatusFound)
		renderOverQuotaErrorTemplates(w,r)
		//w.WriteHeader(http.StatusFound)
		//os.Exit(1)
	}
	return FL_PROC_OK
}

//checks slides quota 
func checkQuotaSlides(w http.ResponseWriter, r *http.Request, uid string) {
	//c := appengine.NewContext(r)
	if FL_CHECK_SAM_QUOTA == false {
		return
	}
		
	NUM_QUOTA := 0
	//get acct type
	//FUNC_CODE := "GET_ACC_TYP"
	FUNC_CODE := "GET_GRP_ID"
	
	FL_VALID_USER, GROUP_ID, _  , USER_ACC_TYP := usersProcessor(w, r, "au", uid, FUNC_CODE)
	
	if FL_VALID_USER == true && GROUP_ID != "GRP_ADMIN" {
	
		//get quota limit
		switch USER_ACC_TYP {
		
			case "Free":
				NUM_QUOTA = freeAccess["QUOTA_SLIDES"]
			case "Bronze":
				NUM_QUOTA = bronzeAccess["QUOTA_SLIDES"]			
			case "Silver":
				NUM_QUOTA = silverAccess["QUOTA_SLIDES"]
			case "Gold":
				NUM_QUOTA = goldAccess["QUOTA_SLIDES"]
		}
		
		//get current count
		CURR_COUNT := countData(w, r, "SLIDES", uid)
		
		//validate
		if CURR_COUNT > NUM_QUOTA {
			//prevent operation
			
			msgDtl := fmt.Sprintf("[U00114] ERROR: Quota for slides has been reached. Please upgrade your account.")
			msgTyp := "error"
			msgURL := "/?q=home"
			action := "U00114"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		
	}
	
}

//check articles quota 
func checkQuotaArticles(w http.ResponseWriter, r *http.Request, uid string) {
	//c := appengine.NewContext(r)
	if FL_CHECK_SAM_QUOTA == false {
		return
	}		
	NUM_QUOTA := 0
	//get acct type
	FUNC_CODE := "GET_ACC_TYP"
	FL_VALID_USER, _, _  , USER_ACC_TYP := usersProcessor(w, r, "au", uid, FUNC_CODE)
	
	if FL_VALID_USER == true {
	
		//get quota limit
		switch USER_ACC_TYP {
		
			case "Free":
				NUM_QUOTA = freeAccess["QUOTA_ARTICLES"]
			case "Bronze":
				NUM_QUOTA = bronzeAccess["QUOTA_ARTICLES"]			
			case "Silver":
				NUM_QUOTA = silverAccess["QUOTA_ARTICLES"]
			case "Gold":
				NUM_QUOTA = goldAccess["QUOTA_ARTICLES"]
		}
		
		//get current count
		CURR_COUNT := countData(w, r, "ARTICLES", uid)
		
		//validate
		if CURR_COUNT > NUM_QUOTA {
			//prevent operation
			
			msgDtl := fmt.Sprintf("[U00115] ERROR: Quota for articles has been reached. Please upgrade your account.")
			msgTyp := "error"
			msgURL := "/?q=home"
			action := "U00115"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		
	}
	
}

//checks media quota 
func checkQuotaMedia(w http.ResponseWriter, r *http.Request, uid string) {
	//c := appengine.NewContext(r)
	if FL_CHECK_SAM_QUOTA == false {
		return
	}		
	NUM_QUOTA := 0
	//get acct type
	FUNC_CODE := "GET_ACC_TYP"
	FL_VALID_USER, _, _  , USER_ACC_TYP := usersProcessor(w, r, "au", uid, FUNC_CODE)
	
	if FL_VALID_USER == true {
	
		//get quota limit
		switch USER_ACC_TYP {
		
			case "Free":
				NUM_QUOTA = freeAccess["QUOTA_MEDIA"]
			case "Bronze":
				NUM_QUOTA = bronzeAccess["QUOTA_MEDIA"]			
			case "Silver":
				NUM_QUOTA = silverAccess["QUOTA_MEDIA"]
			case "Gold":
				NUM_QUOTA = goldAccess["QUOTA_MEDIA"]
		}
		
		//get current count
		CURR_COUNT := countData(w, r, "MEDIA", uid)
		//log.Printf("NUM_QUOTA: %v", NUM_QUOTA)
		//log.Printf("CURR_COUNT: %v", CURR_COUNT)
		
		//validate
		if CURR_COUNT > NUM_QUOTA {
			//log.Printf("CURR_COUNT > NUM_QUOTA")
			//prevent operation
			msgDtl := fmt.Sprintf("[U00116] ERROR: Quota for media has been reached. Please upgrade your account. USER_ACC_TYP: %v, NUM_QUOTA: %v, CURR_COUNT: %v", USER_ACC_TYP, NUM_QUOTA, CURR_COUNT)
			//send message
			
			msgTyp := "error"
			msgURL := "/?q=home"
			action := "U00116"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		
	}
	
}

//counts data for slides, articles or media 
func countData(w http.ResponseWriter, r *http.Request, TARGET, UID string) (CURR_COUNT int) {
 
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//log.Printf("countData...")
	//log.Printf("UID: %v", UID)
 
	switch TARGET {
		case "SLIDES":
			q := datastore.NewQuery("TDSSLIDE").Filter("AUTHOR =", UID)
			//log.Panicf("[S0569]")
			CURR_COUNT, _ = datastoreClient.Count(c,q)
			
		case "ARTICLES":
			q := datastore.NewQuery("TDSARTL").Filter("AUTHOR =", UID)
			//log.Panicf("[S0570]")
			CURR_COUNT, _ = datastoreClient.Count(c,q)
			
		case "MEDIA":
			q := datastore.NewQuery("TDSMEDIA").Filter("AUTHOR =", UID)
			//log.Panicf("[S0571]")
			CURR_COUNT, _ = datastoreClient.Count(c,q)
			
		default:
			//OPTIMIZE THIS
			CURR_COUNT = 999999
	}
	//log.Printf("CURR_COUNT: %v", CURR_COUNT)
	return CURR_COUNT
}

//checks country which originated the http request 
//this is not accurate as some browsers can appear to come from different country
func countryChecker(w http.ResponseWriter, r *http.Request) (FL_PROC_OK bool){
	if SYS_STATELESS_SERVER == true {
		return true
	}
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
        defer cancel()
    h := r.Header
	////u := user.Current(c)
	FL_PROC_OK = true
	//return FL_PROC_OK
	uid := ""
	if SYS_CHECK_COUNTRY == true {
		xCountry := h.Get("X-AppEngine-Country")
		xRegion  := h.Get("X-AppEngine-Region")
		xCity    := h.Get("X-AppEngine-City")
		//increment
		ncCountry := fmt.Sprintf("STATS.COUNTRY.%s", xCountry2Name[xCountry])
		time.AfterFunc(5*time.Second, func() {
            laterQueueCounterIncrement(c, ncCountry)
		})
        //check if this is a search engine
		xsef := fmt.Sprintf("%v.%v.%v", xCountry, xRegion, xCity)
		ipStr := getIpAdd(w,r)
		//check if blocked
		if isIpAddressBlocked(w,r,ipStr) == true {
			//log.Printf("isIpAddressBlocked == true")
			FL_PROC_OK = false
		} else {
			//if from a blocked range
			if SYS_SEARCHABLE == false {
				for k, v := range ipNotOk {
					if strings.Index(ipStr, k) != -1 && v == true {
						//block ip
						blockIP(w,r,uid,ipStr,"auto")
						//log.Printf("blockIP == true")
						FL_PROC_OK = false
						break
					}
				}
			}
		}
		if FL_PROC_OK == true {
			switch {
				case xCountry == "PH" && xRegion == "?" && xCity == "?"  && isBot(w,r) != true:
					FL_PROC_OK = true
				case len(isCountryAllowed) != 0 && xRegion != "?" && xCity != "?" && xCountry != "?" && xCountry != "":
					//only allow valid countries
					if isCountryAllowed[xCountry] == true {
						//allow
						FL_PROC_OK = true
					} else {
						//FL_PROC_OK = false
						FL_PROC_OK = checkInBoundAppidAllowed(w,r)
						//log.Printf("checkInBoundAppidAllowed")
					}
				case isCountryNotAllowed[xCountry] == true:
					//log.Printf("isCountryNotAllowed")
					FL_PROC_OK = false
				case xRegion == "?" && xCity == "?"  && isBot(w,r) != true:
					FL_PROC_OK = true
				case xRegion == "?" && xCity == "?" && isSearchEngineAllowed[xsef] == false:
					//FL_PROC_OK = false
					FL_PROC_OK = checkInBoundAppidAllowed(w,r)
					//log.Printf("checkInBoundAppidAllowed2")
				case isIpAddressBlocked(w,r,ipStr) == true:
					msgDtl := fmt.Sprintf("[U88888] ERROR: Access from your IP address %v has been temporarily blocked due to high usage which appears to be a robot.", ipStr)
					msgTyp := "error"
					msgURL := "https://whatismyipaddress.com/"
					action := "U88888"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return
				case SYS_SEARCHABLE == true && isSearchEngineAllowed[xsef] == true:
					//usually search engines are COUNTRY.?.?
					//check allowed time for searching
					rt := time.Now().Local()
					//timestamp := fmt.Sprintf("%v", rt.Format("20060102150405"))
					timestamp := getTimestamp()
					currTimestamp := str2int(timestamp)
					nTime := fmt.Sprintf("%v", rt)
					sDate := strings.Split(nTime, " ")[0]
					pDateTime := fmt.Sprintf("%s %s", sDate, SYS_SEARCH_BEF_TIME)
					rt2, _ := time.Parse("2006-01-02 15:04:00", pDateTime)
					rTimestamp := fmt.Sprintf("%v", rt2.Format("20060102150405"))
					slotTimestamp := str2int(rTimestamp)
					//allow searching before the config timeslot
					if currTimestamp <= slotTimestamp {
						//allow this
						//return true
					} else {
						FL_PROC_OK = checkInBoundAppidAllowed(w,r)
					}
				case len(isCountryAllowed) != 0:
					//only allow valid countries
					if isCountryAllowed[xCountry] == true {
						//allow
					} else {
						//dont allow
						FL_PROC_OK = checkInBoundAppidAllowed(w,r)
					}
				case xCountry == "ZZ" && xRegion == "?" && xCity == "?":
					//check if valid country
					FL_PROC_OK = checkInBoundAppidAllowed(w,r)
				default:
					FL_PROC_OK = true
					//return
			}
		}
		if FL_PROC_OK == false {
			geoAcc := getAccessString(w,r,"")
			msgDtl := fmt.Sprintf("[U99999c] Access from your country (%s) region (%v) city (%v) is not allowed at this time %v", xCountry, xRegion, xCity, geoAcc)
			msgTyp := "error"
			msgURL := "https://www.google.com"
			action := "U99999"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
	}
	return FL_PROC_OK
}

//checks if inbound request is vald
func checkInBoundAppidAllowed(w http.ResponseWriter, r *http.Request) bool {
	if SYS_STATELESS_SERVER == true {
		return true
	}

    if SYS_CHECK_COUNTRY == false {
        return true
    }
	//c := appengine.NewContext(r)
	//u := user.Current(c)
	h := r.Header

	//D0085
	//allow fb
	if r.FormValue("bFunc") == "facebook" {
		ua := r.Header.Get("User-Agent")
		if strings.Index(ua, "facebook") != -1 {
			return true
		}
	}

	if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		//uid = uid
		_, uid := checkSession(w,r)
		if uid != "" {
			return true
		}
	}
	
	//if this is a call from another appengine-id
	FL_PROC_OK := true
	xInAppid := h.Get("X-Appengine-Inbound-Appid")

	//if isInBoundAppidAllowed(w,r,xInAppid) != "Y" || xInAppid == "" {
	//bug!
	if xInAppid == "" {
		xCountry := h.Get("X-AppEngine-Country")
		xRegion  := h.Get("X-AppEngine-Region")
		xCity    := h.Get("X-AppEngine-City")
		
		uid := ""
		if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
			//uid = uid
			_, uid = checkSession(w,r)
		} else {
			//uid = "guest"
			geoStr := getGeoString(w,r)
			uid = geoStr
		}
		FL_PROC_OK = false
		
		msgDtl := fmt.Sprintf("[U99999i] ERROR: Hi %v! Access from your country (%s) region (%v) city (%v) is not allowed at this time.", uid, xCountry, xRegion, xCity)
		msgTyp := "error"
		msgURL := "https://www.google.com"
		action := "U99999"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
	}
	return FL_PROC_OK
	
}
//D0092
// getCurrentWeather gets the current weather for the provided location in
// the units provided.
func getCurrentWeather(xlatlon, location, units, lang string) (*openweathermap.CurrentWeatherData, error) {
    //log.Printf("getCurrentWeather()")
    l := new(openweathermap.Coordinates)
    if xlatlon != "" {
        SPL := strings.Split(xlatlon, ",")
        lat, err := strconv.ParseFloat(SPL[0], 64)
        if err != nil {
            lat = 0.0
        }
        lon, err := strconv.ParseFloat(SPL[1], 64)
        if err != nil {
            lon = 0.0
        }
        l.Latitude = lat
        l.Longitude = lon
    }
    //log.Printf("openweathermap.NewCurrent()")
    //log.Printf("Coordinates: %v", l)
	w, err := openweathermap.NewCurrent(units, lang, OWM_API_KEY) // Create the instance with the given unit
	if err != nil {
		return nil, err
    }
    if location == "" {
        w.CurrentByCoordinates(l) // Get the actual data for the given location
        //log.Printf("w.CurrentByCoordinates()")
    } else {
        w.CurrentByName(location) // Get the actual data for the given location
        //log.Printf("w.CurrentByName()")
    }
	return w, nil
}
//gets map link of the access 
func getMapLink(w http.ResponseWriter, r *http.Request, USER_TYPE, TARGET_URL, SID string) (mapURL string) {
	//c := appengine.NewContext(r)
	h := r.Header
	xLatLong := h.Get("X-AppEngine-CityLatLong")
	xLatLong = strings.Replace(xLatLong, ",", "+", -1)
	//https://www.google.com.ph/maps/place/37.386051,-122.083851
	mapURL = fmt.Sprintf("https://www.google.com.ph/maps/place/%v", xLatLong)
	//store coordinates
	if xLatLong != "0.000000+0.000000" {
		//disable mapping of access
		//viaStr := getAccessString(w,r,"")
		//queueLogMapCoors(w,r,xLatLong,USER_TYPE,TARGET_URL,viaStr,SID)
		return mapURL
	}
	return ""
}

//checks the referrer of the request 
func checkReferrer(w http.ResponseWriter, r *http.Request) {
	if SYS_NOREG_FIXED_USER != "" {
		return
	}
	if SYS_STATELESS_SERVER == true {
		return
	}
	//skip this if user is logged in as valid user
	if isLoggedIn(w,r) == true {
		return
	}
	
	uReferer := r.Referer()

	if SYS_CHECK_REFERER == true {
	
		myRefGenG  := strings.HasPrefix(uReferer, domRefMatchG)
		myRefGenS  := strings.HasPrefix(uReferer, domRefMatchS)
		myRefGoogleG  := strings.HasPrefix(uReferer, googleRefMatchG)
		myRefGoogleS  := strings.HasPrefix(uReferer, googleRefMatchS)
		myRefOauth  := strings.HasPrefix(uReferer, "/callback?")
		
		if (myRefGenG == false && myRefGenS == false && myRefGoogleG == false && myRefGoogleS == false && myRefOauth == false)  {
			
			msgDtl := fmt.Sprintf("[U00098] ERROR: Apologies, this URL/page cannot be accessed directly. It has to be referred/accessed from www.ulapph.com. Referer: %v", uReferer)
			msgTyp := "error"
			msgURL := "/?q=home"
			action := "U00098"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			//return
		}
	
	}
	
}

//checks if okay to run or not 
//checks if user is online
func checkIfOkToRun(w http.ResponseWriter, r *http.Request) (IS_OK_TO_RUN bool) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//IS_OK_TO_RUN = false
	IS_OK_TO_RUN = true
	if SYS_CHECK_OK_TO_TUN == true {
	
		cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", "TOT_ONLINE_DELAY")
		TOT_ONLINE_DELAY := ""
		TOT_ONLINE_DELAY = getStrMemcacheValueByKey(w,r,cKey)
		
		if TOT_ONLINE_DELAY == "" {
		
			q := datastore.NewQuery("TDSUSERS").Filter("LOGGED_IN =", 1)
			//log.Panicf("[S0572]")
			recCount,_ := datastoreClient.Count(c,q)
			users := make([]TDSUSERS, 0, recCount)
			if _, err := datastoreClient.GetAll(c,q, &users); err != nil {
				//panic(err)
			 }
			//recCount,_ := datastoreClient.Count(c,q)
			//log.Printf("datastoreClient.Get()  [73985]")
			//IS_OK_TO_RUN = true
			TOT_ONLINE := recCount
						
			p := TDSSTATS{
					SYS_VER: 1,
					STAT_NAME: "TOT_ONLINE",
					DATA_TYPE: "NUM",
					VAL_NUM: TOT_ONLINE,
					VAL_TXT: "",
			}
 
			key := datastore.NameKey("TDSSTATS", "TOT_ONLINE", nil)
			if _, err := datastoreClient.Put(c, key, &p); err != nil {
				//panic(err)
			}
			//log.Panicf("[S0573]")
            //log.Printf("datastoreClient.Put()  [74002]")
			cKey = fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", "TOT_ONLINE")
			strCtrVal := fmt.Sprintf("%d", recCount)
			putStrToMemcacheWithoutExp(w,r,cKey,strCtrVal)
 
			//indicator that when still in cache, no need to recheck tot online
			cKey = fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", "TOT_ONLINE_DELAY")
			strCtrVal = fmt.Sprintf("%d", recCount)
			putStrToMemcacheWithExp(w,r,cKey,strCtrVal,TOT_ONLINE_EXPIRES_MIN)
						
			
			if TOT_ONLINE > 0 {
				IS_OK_TO_RUN = true
			} else {
				IS_OK_TO_RUN = false
			}
		} else {
			IS_OK_TO_RUN = true
		}
		
	} else {
		fmt.Fprintf(w, "SYS_CHECK_OK_TO_TUN == false")
		IS_OK_TO_RUN = false
	}
	
	return IS_OK_TO_RUN
}

//D0063
func taskUpdateSearchIndex(w http.ResponseWriter, r *http.Request) {
	//check unindexed slides
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//log.Printf("taskUpdateSearchIndex()")
	q := datastore.NewQuery("TDSSLIDE").Order("DOC_ID")
	recCount, _  := datastoreClient.Count(c,q)
	//log.Printf("recCount: %v", recCount)
	slide := make([]TDSSLIDE, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
		 panic(err)
     }
     //log.Printf("datastoreClient.Get()  [74046]")
	for _, p := range slide {
		if p.FL_SHARED == "Y" && p.SYS_VER != 666 && p.SYS_VER != 777 {	
			//check if index exists
			isIndexed := isIndexed(w,r,"IDX_TDSSLIDE",fmt.Sprintf("TDSSLIDE-%v",p.DOC_ID))
			if isIndexed == false {
				fmt.Fprintf(w, "Indexed %v<br>", fmt.Sprintf("TDSSLIDE-%v",p.DOC_ID))
				tstamp := getTimestamp()
				thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", p.DOC_ID)
				thisIdxURL := fmt.Sprintf("%vslides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", getSchemeUrl(w,r), p.DOC_ID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
				//blobChan := make(chan string)
				//go getBlobTextChan(w, r,blobChan, p.BLOB_URL)
				//blobText := <- blobChan
				//blobText := ""
				slideIdx := &IDX_TDSSLIDE{
					DOC_KEY: 			thisIdxKey,
					SEARCH_TYPE: 		"SLIDES",
					SOURCE_TYPE: 		"ULAPPH",	
					SOURCE_TBL:  		"TDSSLIDE",	
					DESKTOP: 			p.CATEGORY,
					FL_SHARED:			p.FL_SHARED,
					DOC_STAT:			p.DOC_STAT,
					DOC_SCOPE_OVERALL:	"",
					DOC_SCOPE_COUNTRY:  "",
					DOC_SCOPE_REGION:  	"",
					DOC_SCOPE_CITY: 	"",
					DOC_SCOPE_BARANGAY: "",
					DOC_TITLE: 			p.TITLE,	
					DOC_DESC: 			p.DESC,
					DOC_AUTHOR:         p.AUTHOR,					
                    //DOC_CONTENT_TEXT: 	blobText,
                    DOC_CONTENT_TEXT: 	"",
					DOC_CONTENT_HTML: 	"",	
					DOC_CONTENT_ATOM: 	"",	
					DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
					DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
					DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
					CONTENT_URL: 		thisIdxURL,
					IMG_URL: 			p.TAGS,
					DATE_UPDATED: 		tstamp,
				}
                
				putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
				//log.Printf("Cron indexed TDSSLIDE-%v", p.DOC_ID) 
			}
		}
	}

	//check unindexed articles
	q = datastore.NewQuery("TDSARTL").Order("-DOC_ID")
	recCount,_ = datastoreClient.Count(c,q)
	//log.Printf("recCount: %v", recCount)

	articles := make([]TDSARTL, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [74103]")
	for _, p := range articles{
		if p.FL_SHARED == "Y" && p.SYS_VER != 666 && p.SYS_VER != 777 {	
			//check if index exists
			isIndexed := isIndexed(w,r,"IDX_TDSARTL",fmt.Sprintf("TDSARTL-%v",p.DOC_ID))
			if isIndexed == false {
				fmt.Fprintf(w, "Indexed %v<br>", fmt.Sprintf("TDSARTL-%v",p.DOC_ID))
				tstamp := getTimestamp()
				thisIdxKey := fmt.Sprintf("TDSARTL-%d", p.DOC_ID)
				thisIdxURL := fmt.Sprintf("%varticles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v", getSchemeUrl(w,r), p.DOC_ID, thisIdxKey, p.CATEGORY)
				//blobChan := make(chan string)
				//go getBlobTextChan(w, r,blobChan, p.BLOB_URL)
				//blobText := <- blobChan
				blobText := ""
				articleIdx := &IDX_TDSARTL{
					DOC_KEY: 			thisIdxKey,
					SEARCH_TYPE: 		"ARTICLES",
					SOURCE_TYPE: 		"ULAPPH",	
					SOURCE_TBL:  		"TDSARTL",	
					DESKTOP: 			p.CATEGORY,
					FL_SHARED:			p.FL_SHARED,
					DOC_STAT:			p.DOC_STAT,
					DOC_SCOPE_OVERALL:	"",
					DOC_SCOPE_COUNTRY:  "",
					DOC_SCOPE_REGION:  	"",
					DOC_SCOPE_CITY: 	"",
					DOC_SCOPE_BARANGAY: "",
					DOC_TITLE: 			p.TITLE,	
					DOC_DESC: 			p.DESC,
					DOC_AUTHOR:         p.AUTHOR,
					DOC_CONTENT_TEXT: 	blobText,
					DOC_CONTENT_HTML: 	"",	
					DOC_CONTENT_ATOM: 	"",	
					DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
					DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
					DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
					CONTENT_URL: 		thisIdxURL,
					IMG_URL: 			p.TAGS,
					DATE_UPDATED: 		tstamp,
				}
                
				putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
				//log.Printf("Cron indexed TDSARTL-%v", p.DOC_ID)
			}

		}
	}
//check unindexed media
	//TBD
}
 
//update STATS.OS & STATS.BROWSER statistics
func taskUpdateStatsOsBr(w http.ResponseWriter, r *http.Request) {
 
	IS_OK_TO_RUN := checkIfOkToRun(w, r)
	if IS_OK_TO_RUN == false {
		//donothing
		return
	}	
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
        defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//get os from TDSSTATS
	fmt.Fprintf(w, "SCANNING OS MEMCACHE...<br>")
	q := datastore.NewQuery("TDSSTATS").Order("-VAL_NUM").Limit(100)
	//log.Panicf("[S0574]")
	stats := make([]TDSSTATS, 0, 100)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		//check overquota error
		checkError(w,r,"",err,"CHK_OQ")
		 //panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [74177]")
	statFnd := 0
	for _, p := range stats{
		
		if p.VAL_TXT == "STATS.OS" {
 
			cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", p.STAT_NAME)
			fmt.Fprintf(w, "cKey: %s<br>", cKey)
			TASK_MEMCACHER_CounterIncrement_CACHE := ""
			TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
			fmt.Fprintf(w, "TASK_MEMCACHER_CounterIncrement_CACHE: %s<br>", TASK_MEMCACHER_CounterIncrement_CACHE)
			if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
				currCount := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
 
					p.VAL_NUM = currCount
					key := datastore.NameKey("TDSSTATS", p.STAT_NAME, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0575]")
                    //log.Printf("datastoreClient.Put()  [74197]")
					fmt.Fprintf(w, "%s: %v<br>", p.STAT_NAME, currCount)
					break
			}	
		}
	}
	
	
	//get browsers list from TDSSTATS
	fmt.Fprintf(w, "SCANNING BROWSER MEMCACHE...<br>")
	q = datastore.NewQuery("TDSSTATS").Order("-VAL_NUM").Limit(100)
	//log.Panicf("[S0576]")
	stats = make([]TDSSTATS, 0, 100)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [74213]")
	statFnd = 0
	for _, p := range stats{
		
		if p.VAL_TXT == "STATS.BROWSER" {
 
			cKey := fmt.Sprintf("TASK_MEMCACHER_CounterIncrement_%s", p.STAT_NAME)
			fmt.Fprintf(w, "cKey: %s<br>", cKey)
			TASK_MEMCACHER_CounterIncrement_CACHE := ""
			TASK_MEMCACHER_CounterIncrement_CACHE = getStrMemcacheValueByKey(w,r,cKey)
			fmt.Fprintf(w, "TASK_MEMCACHER_CounterIncrement_CACHE: %s<br>", TASK_MEMCACHER_CounterIncrement_CACHE)
			if TASK_MEMCACHER_CounterIncrement_CACHE != "" {
				currCount := str2int(TASK_MEMCACHER_CounterIncrement_CACHE)
 
					p.VAL_NUM = currCount
					key := datastore.NameKey("TDSSTATS", p.STAT_NAME, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0577]")
                    //log.Printf("datastoreClient.Put()  [74233]")
					fmt.Fprintf(w, "%s: %v<br>", p.STAT_NAME, currCount)
					break
			}	
		}
	}
		
	//update MOST_OS* stats
	fmt.Fprintf(w, "SCANNING POPULAR OS...<br>")
	q = datastore.NewQuery("TDSSTATS").Order("-VAL_NUM").Limit(100)
	//log.Panicf("[S0578]")
	stats = make([]TDSSTATS, 0, 100)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [74248]")
	statFnd = 0
	for _, p := range stats{
	
		if strings.Index(p.VAL_TXT, "STATS.OS") != -1 {
		//if p.VAL_TXT == "STATS.OS" {
			statFnd++
			//switch statFnd {
				//case 1:
					p.DATA_TYPE = "TXT"
					maUser := strings.Split(p.STAT_NAME,"STATS.OS.")[1]
					p.VAL_TXT = maUser
					statName := fmt.Sprintf("MOST_OS_%v", statFnd)
					p.STAT_NAME = statName
					p.VAL_NUM = p.VAL_NUM + 1
					key := datastore.NameKey("TDSSTATS", statName, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0579]")
                    //log.Printf("datastoreClient.Put()  [74268]")
					fmt.Fprintf(w, "%v: %v<br>", statName, maUser)
					if statFnd == 3 {
						break
					}
		}
	}
 
	//update MOST_BROWSER* stats
	fmt.Fprintf(w, "SCANNING POPULAR BROWSER...<br>")
	q = datastore.NewQuery("TDSSTATS").Order("-VAL_NUM").Limit(100)
	//log.Panicf("[S0580]")
	stats = make([]TDSSTATS, 0, 100)
	if _, err := datastoreClient.GetAll(c,q, &stats); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [74284]")
	statFnd = 0
	for _, p := range stats{
	
		//if p.VAL_TXT == "STATS.BROWSER" {
		if strings.Index(p.VAL_TXT, "STATS.BROWSER") != -1 {
			statFnd++
			
					p.DATA_TYPE = "TXT"
					maUser := strings.Split(p.STAT_NAME,"STATS.BROWSER.")[1]
					p.VAL_TXT = maUser
					statName := fmt.Sprintf("MOST_BROWSER_%v", statFnd)
					p.STAT_NAME = statName
					p.VAL_NUM = p.VAL_NUM + 1
					key := datastore.NameKey("TDSSTATS", statName, nil)
					if _, err := datastoreClient.Put(c, key, &p); err != nil {
						 panic(err)
					}
					//log.Panicf("[S0581]")
                    //log.Printf("datastoreClient.Put()  [74303]")
					fmt.Fprintf(w, "%v: %v<br>", statName, maUser)
					
					if statFnd == 3 {
						break
					}
					
		}
	}		
	
}
 
//serves newly uploaded blobstore-icons
func handleServe(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//prevent access from other than ulapph pages
	checkReferrer(w,r)
        //c := appengine.NewContext(r)
        c, cancel := context.WithCancel(context.Background())
	    defer cancel()
        //D0086
        datastoreClient := createClientDS()
		_, uid := checkSession(w,r)
		//uidO := uid
        blobkey := r.FormValue("blobKey")
        thisURL := r.FormValue("murl")
		ICON_NAME_R := r.FormValue("ICON_NAME")
		ICON_NAME_R2 := strings.Replace(ICON_NAME_R, "[", "", -1)
		ICON_NAME := strings.Replace(ICON_NAME_R2, "]", "", -1)
		URL_ADD_R := r.FormValue("URL_ADD")
		URL_ADD_R2 := strings.Replace(URL_ADD_R, "[", "", -1)
		URL_ADD_R3 := strings.Replace(URL_ADD_R2, "]", "", -1)
		URL_ADD := strings.Replace(URL_ADD_R3, "@@@", "&", -1)
		validateURL(w,r,URL_ADD)
		DESKTOP_R := r.FormValue("DESKTOP")
		DESKTOP_R2 := strings.Replace(DESKTOP_R, "[", "", -1)
		DESKTOP := strings.Replace(DESKTOP_R2, "]", "", -1)
		//detect if icon/url already exists
		FUNC_CODE := "GET_ICON_ID"
		ICON_ID := 0
		FL_ICON_EXISTS, ICON_ID_R, URL_ADD_R, _, _  := getIconDtls(w, r, FUNC_CODE, ICON_ID, URL_ADD)
		if FL_ICON_EXISTS == true {
			msgDtl := fmt.Sprintf("[U00099] ERROR: Operation not permitted. (%v) already exists. Please see existing ICON_ID (%d).", URL_ADD, ICON_ID_R)
			msgTyp := "error"
			msgURL := "/settings"
			action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to search the icons directory and see the existing ICON_ID.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		//get user privilege
		FUNC_CODE = "GET_GRP_ID"
		FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		if FL_VALID_USER == true {
			if GROUP_ID == "GRP_ADMIN" && DESKTOP != "desktop0" {
				uid = DESKTOP
			}
		}
		q := datastore.NewQuery("TDSICONS").Order("-ICON_ID").Limit(1)
		//log.Panicf("[S0582]")
		icons := make([]TDSICONS, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
			 panic(err)
          }
          //log.Printf("datastoreClient.Get()  [74367]")
		for _, p := range icons{
			thisID := p.ICON_ID + 1
			p.SYS_VER = SYS_VERSION
			p.ICON_ID = thisID
			p.URL_ID =  0
			p.URL_ADD = URL_ADD
			p.ICON_NAME = ICON_NAME
			p.IMG_SRC = thisURL
			p.DESKTOP = uid
			p.BLOB_KEY = blobkey
			thisKey := fmt.Sprintf("ICON[%d]", thisID)
			key := datastore.NameKey("TDSICONS", thisKey, nil)
			_, err := datastoreClient.Put(c, key, &p)
			if err != nil {
				 panic(err)
            }
            //log.Printf("datastoreClient.Put()  [74384]")
			//log.Panicf("[S0583]")
			thisIdxKey := fmt.Sprintf("TDSICONS-%d", thisID)
			//t := time.Now().Local()
			//tstamp := t.Format("20060102150405")
			tstamp := getTimestamp()
			slideIdx := &IDX_TDSICONS{
				DOC_KEY: 			thisIdxKey,
				SEARCH_TYPE: 		"ICONS",
				SOURCE_TYPE: 		"ULAPPH",	
				SOURCE_TBL:  		"TDSICONS",	
				DESKTOP: 			uid,
				FL_SHARED:			"Y",
				DOC_STAT:			"ULAPPH Only",
				DOC_SCOPE_OVERALL:	"",
				DOC_SCOPE_COUNTRY:  "",
				DOC_SCOPE_REGION:  	"",
				DOC_SCOPE_CITY: 	"",
				DOC_SCOPE_BARANGAY: "",
				DOC_TITLE: 			ICON_NAME,	
				DOC_DESC: 			ICON_NAME,
				DOC_AUTHOR:         uid,
				DOC_CONTENT_TEXT: 	ICON_NAME,
				DOC_CONTENT_HTML: 	"",	
				DOC_CONTENT_ATOM: 	"",	
				CONTENT_URL: 		URL_ADD,
				IMG_URL: 			thisURL,
				DATE_ADDED: 		tstamp,
				DATE_UPDATED: 		tstamp,
            }
            
			putSearchIndexI(w,r,"IDX_TDSICONS",thisIdxKey,slideIdx)
			//clear icons cache
			memcacheDelete(w,r, "ALL_ICONS")

			//clear all icons cache
			memcacheDelete(w,r, "ICONS_LIST_JSON")
			//notify all users of this event via channels
			msgDtl3 := fmt.Sprintf("UID:%v has added website <a href=\"%v\">%v</a> LINK: %v from desktop %v %v", uid, URL_ADD, ICON_NAME, URL_ADD, DESKTOP, getAccessString(w,r,""))
			sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,uid,"/settings",""),"")
			break
		}
		msgDtl := fmt.Sprintf("[U00101] SUCCESS: New icon has been uploaded. You need to go to Settings again to add the icon to your desktop. NOTE: Image URL=%s", thisURL)
		msgTyp := "success"
		msgURL := fmt.Sprintf("/%v#page", DESKTOP)
		action := "U00101"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		//TASK_MEMCACHER_settingsAllIcons(w,r)
		time.AfterFunc(5*time.Second, func() {
            laterSettingsIcons(c, "")
		})
        return
}
//saves links to icons db
func addLinkToIcons(w http.ResponseWriter, r *http.Request, tName, tUrl, tDesk, apiKey string) {
	//log.Printf("addLinkToIcons()")
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//prevent access from other than ulapph pages
	//checkReferrer(w,r)
	
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	_, uid := checkSession(w,r)
	//log.Printf("uid: %v", uid)
	//detect if icon/url already exists
	URL_ADD, _ := url.QueryUnescape(tUrl)
	ICON_NAME := tName
	DESKTOP := tDesk
	FUNC_CODE := "GET_ICON_ID"
	ICON_ID := 0
	//FL_ICON_EXISTS, ICON_ID_R, _, _, _  := getIconDtls(w, r, FUNC_CODE, ICON_ID, URL_ADD)
	FL_ICON_EXISTS, _, _, _, _  := getIconDtls(w, r, FUNC_CODE, ICON_ID, URL_ADD)
	
	if FL_ICON_EXISTS == true {
		//msgDtl := fmt.Sprintf("[U00099] ERROR: Operation not permitted. (%v) already exists. Please see existing ICON_ID (%d).", URL_ADD, ICON_ID_R)
		/*msgTyp := "error"
		msgURL := "/settings"
		action := fmt.Sprintf("Really sorry for this issue! <a href=\"%v\">Click here</a> to search the icons directory and see the existing ICON_ID.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		*/
		//fmt.Fprintf(w, "%v", msgDtl)
		return
	}
	
	//get user privilege
	FUNC_CODE = "GET_GRP_ID"
	FL_VALID_USER, _, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
	
	if FL_VALID_USER == false {
		//if GROUP_ID == "GRP_ADMIN" && DESKTOP != "desktop0" {
		//	uid = DESKTOP
		//}
		//D0106
		if apiKey != CMD_API_KEY {
			//log.Printf("apiKey: %v", apiKey)
			//log.Printf("FL_VALID_USER: %v", FL_VALID_USER)
			fmt.Fprintf(w, "Invalid user")
			return
		}
	}
	q := datastore.NewQuery("TDSICONS").Order("-ICON_ID").Limit(1)
	//log.Panicf("[S0582]")
	icons := make([]TDSICONS, 0, 1)
	if _, err := datastoreClient.GetAll(c,q, &icons); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [74491]")
	for _, p := range icons{
		//thisID := p.ICON_ID + 1
		//D0106
		tstamp := getTimestamp()
		p.SYS_VER = SYS_VERSION
		thisID := str2int(tstamp)
		p.ICON_ID = thisID		
		p.URL_ID =  thisID
		p.URL_ADD = URL_ADD
		p.ICON_NAME = ICON_NAME
		p.IMG_SRC = "/static/img/galink.png"
		p.DESKTOP = DESKTOP
		p.BLOB_KEY = ""
		//thisKey := fmt.Sprintf("ICON[%d]", thisID)
		thisKey := fmt.Sprintf("ICON[%d]", thisID)
		key := datastore.NameKey("TDSICONS", thisKey, nil)
		_, err := datastoreClient.Put(c, key, &p)
		if err != nil {
			 panic(err)
		}
		//log.Panicf("[S0583]")
        //log.Printf("datastoreClient.Put()  [74509]")
		thisIdxKey := fmt.Sprintf("TDSICONS-%d", thisID)
		//tstamp := getTimestamp()

		slideIdx := &IDX_TDSICONS{
			DOC_KEY: 			thisIdxKey,
			SEARCH_TYPE: 		"ICONS",
			SOURCE_TYPE: 		"ULAPPH",	
			SOURCE_TBL:  		"TDSICONS",	
			DESKTOP: 			DESKTOP,
			FL_SHARED:			"Y",
			DOC_STAT:			"ULAPPH Only",
			DOC_SCOPE_OVERALL:	"",
			DOC_SCOPE_COUNTRY:  "",
			DOC_SCOPE_REGION:  	"",
			DOC_SCOPE_CITY: 	"",
			DOC_SCOPE_BARANGAY: "",
			DOC_TITLE: 			ICON_NAME,	
			DOC_DESC: 			ICON_NAME,
			DOC_AUTHOR:         uid,
			DOC_CONTENT_TEXT: 	ICON_NAME,
			DOC_CONTENT_HTML: 	"",	
			DOC_CONTENT_ATOM: 	"",	
			CONTENT_URL: 		URL_ADD,
			IMG_URL: 			tUrl,
			DATE_ADDED: 		tstamp,
			DATE_UPDATED: 		tstamp,
		}
        
		putSearchIndexI(w,r,"IDX_TDSICONS",thisIdxKey,slideIdx)
		
		//clear icons cache
		memcacheDelete(w,r, "ALL_ICONS")

		//clear all icons cache
		memcacheDelete(w,r, "ICONS_LIST_JSON")

		break
	}
	msgDtl := fmt.Sprintf("[U00101] SUCCESS: New link has been added to database [%v] [%v].", tName, tUrl)
	/*msgTyp := "success"
	msgURL := fmt.Sprintf("/%v#page", DESKTOP)
	action := "U00101"
	sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
	//log.Printf("msgDtl: %v", msgDtl)
	http.Redirect(w, r, sysReq, http.StatusFound)
	time.AfterFunc(5*time.Second, func() {
        laterSettingsIcons(c, "")
	})*/
	//log.Printf("msgDtl: %v", msgDtl)
	fmt.Fprintf(w, "%v", msgDtl)
    return
}

//handles newly uploaded blobstore-profile pic
func handleServePeople(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//prevent access from other than ulapph pages
	checkReferrer(w,r)
		//c := appengine.NewContext(r)
        c, cancel := context.WithCancel(context.Background())
	    defer cancel()
        //D0086
        datastoreClient := createClientDS()
		_, uid := checkSession(w,r)
		//blobkey := r.FormValue("blobKey3")
		//opts := imageApi.ServingURLOptions{Secure: true}
        thisURL := r.FormValue("murl")
		UID_R := r.FormValue("UID")
		UID_R2 := strings.Replace(UID_R, "[", "", -1)
		UID := strings.Replace(UID_R2, "]", "", -1)
        PFUNC_R := r.FormValue("PFUNC")
		PFUNC_R2 := strings.Replace(PFUNC_R, "[", "", -1)
		PFUNC := strings.Replace(PFUNC_R2, "]", "", -1)
 
		switch PFUNC {
			case "UploadPic":
				//get user privilege
				FUNC_CODE := "GET_GRP_ID"
				FL_VALID_USER, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
				
				if FL_VALID_USER == true {
				
					if (GROUP_ID != "GRP_ADMIN" && GROUP_ID != "GRP_USER") && uid != UID {
						msgDtl := fmt.Sprintf("[U00102] ERROR: Upload picture not allowed.")
						msgTyp := "error"
						msgURL := fmt.Sprintf("/people-edit?EditPeopleFunc=EditPeople&UID=%v", UID)
						action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to your People profile.", msgURL)
						sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
						http.Redirect(w, r, sysReq, http.StatusFound)
						return
					}
				}
				q := datastore.NewQuery("TDSPROF").Filter("UID =", UID).Limit(1)
				//log.Panicf("[S0584]")
				//recCount,_ := datastoreClient.Count(c,q)	
				profile := make([]TDSPROF, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &profile); err != nil {
					 panic(err)
                }
                //log.Printf("datastoreClient.Get()  [74607]")
				for _, p := range profile{
					//fmt.Fprintf(w, "p.PICTURE: %v", thisURL)
					p.PICTURE = thisURL
					thisKey := fmt.Sprintf("%s", UID)
					key := datastore.NameKey("TDSPROF", thisKey, nil)
					_, err := datastoreClient.Put(c, key, &p)
					if err != nil {
						 panic(err)
					}
					//log.Printf("datastoreClient.Put()  [74617]")
					//insert profile into search idx
					thisIdxKey := fmt.Sprintf("TDSPROF-%v", UID)
					thisIdxURL := fmt.Sprintf("%vpeople-edit?EditPeopleFunc=ViewPeople&UID=%s&SID=%s", getSchemeUrl(w,r), UID, UID)
					thisCusText := fmt.Sprintf("%v, %v, %v, %v, %v, %v", p.COUNTRY, p.REGION, p.CITY, p.MUNICIPALITY, p.BARANGAY, p.SUBDIVISION)
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					tstamp := getTimestamp()
 
					searchIdxp := &IDX_TDSPROF{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"PEOPLE",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSPROF",	
						DESKTOP: 			"PEOPLE",
						FL_SHARED:			"Y",
						DOC_STAT:			"ULAPPH Only",
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			UID,	
						DOC_DESC: 			p.COUNTRY,
						DOC_AUTHOR:         uid,
						DOC_CONTENT_TEXT: 	thisCusText,
						//DOC_CONTENT_TEXT:   "",
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			p.PICTURE,
						DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
                    }
                    
					putSearchIndexP(w,r,"IDX_TDSPROF",thisIdxKey,searchIdxp)					
					
					break
					
				}
 
				//cache profile pic
				cKey := fmt.Sprintf("PROFILE_PIC_%v", UID)
				putStrToMemcacheWithoutExp(w,r,cKey,thisURL)
				sysReq := fmt.Sprintf("/people-edit?EditPeopleFunc=EditPeople&UID=%v", UID)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
				
			default:
				msgDtl := fmt.Sprintf("[U00104] ERROR: Error in uploading picture.")
				msgTyp := "error"
				msgURL := fmt.Sprintf("/people-edit?EditPeopleFunc=EditPeople&UID=%v", UID)
				action := fmt.Sprintf("Sorry for this error! <a href=\"%v\">Click here</a> to go to your People profile.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
		}
}
//handles newly uploaded blobs 
func handleUpload(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
        //c := appengine.NewContext(r)
        _, uid := checkSession(w,r)
        if uid == "" && r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
            uid = r.Header.Get("X-Goog-Authenticated-User-Email")
        }
        gcsObjectUrl := ""
        gcsMediaUrl := ""
        IS_FILE_OK := true
        r.ParseMultipartForm(32 << 20)
        file, _, err := r.FormFile("file")
        if err != nil {
            IS_FILE_OK = false
        }
        if IS_FILE_OK == true {
            defer file.Close()
            data, err := ioutil.ReadAll(file)
            if err != nil {
                IS_FILE_OK = false
            }
            //if string(data) != "" && IS_FILE_OK == true {
            if IS_FILE_OK == true {
                //text = string(data)
                //fileName = handler.Filename+".txt"
                //D0086
                //save to GCS
                ctx := context.Background()
                inpData := strings.NewReader(string(data))
                public := false
                UUID := generateUUID(w,r,uid,"TDSMEDIA")
                //log.Printf("UUID: %v", UUID)
                //_, objAttrs, err := uploadGcsObject(ctx, inpData, UUID, public)
                _, _, err := uploadGcsObject(ctx, inpData, UUID, public)
                if err != nil {
                    switch err {
                    case storage.ErrBucketNotExist:
                        log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
                    default:
                        log.Fatalf("ERROR: %v", err)
                    }
                }

                //log.Printf("URL: %s", objectURL(objAttrs))
                //log.Printf("MediaURL: %s", objAttrs.MediaLink)
                //log.Printf("Size: %d", objAttrs.Size)
                //log.Printf("MD5: %x", objAttrs.MD5)
                //log.Printf("objAttrs: %+v", objAttrs)
                //log.Printf("UUID: %v", UUID)
                //save object url
                //gcsObjectUrl = objectURL(objAttrs)
                gcsObjectUrl = UUID
                gcsMediaUrl = mediaURL(UUID)
            }
        } else {
            log.Fatalf("Error uploading media.")
        }

		ICON_NAME := r.FormValue("ICON_NAME")
		//URL_ADD_R := pVals["URL_ADD"]
		URL_ADD_R := fmt.Sprintf("%v", r.FormValue("URL_ADD"))
		URL_ADD := strings.Replace(URL_ADD_R, "&", "@@@", -1)
		DESKTOP := r.FormValue("DESKTOP")
				
		reqStr := fmt.Sprintf("/serve/?DESKTOP=%s&ICON_NAME=%s&URL_ADD=%s&blobKey=%v&murl=%v", DESKTOP, ICON_NAME, URL_ADD, gcsObjectUrl, gcsMediaUrl)
		http.Redirect(w, r, reqStr, http.StatusFound)
		return
}

//handles newly uploaded people pics 
func handleUploadPeople(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
        //c := appengine.NewContext(r)
        _, uid := checkSession(w,r)
        if uid == "" && r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
            uid = r.Header.Get("X-Goog-Authenticated-User-Email")
        }
        gcsObjectUrl := ""
        gcsMediaUrl := ""
        IS_FILE_OK := true
        r.ParseMultipartForm(32 << 20)
        file, _, err := r.FormFile("file")
        if err != nil {
            IS_FILE_OK = false
        }
        if IS_FILE_OK == true {
            defer file.Close()
            data, err := ioutil.ReadAll(file)
            if err != nil {
                IS_FILE_OK = false
            }
            //if string(data) != "" && IS_FILE_OK == true {
            if IS_FILE_OK == true {
                //text = string(data)
                //fileName = handler.Filename+".txt"
                //D0086
                //save to GCS
                ctx := context.Background()
                inpData := strings.NewReader(string(data))
                public := false
                UUID := generateUUID(w,r,uid,"TDSMEDIA")
                //log.Printf("UUID: %v", UUID)
                //_, objAttrs, err := uploadGcsObject(ctx, inpData, UUID, public)
                _, _, err := uploadGcsObject(ctx, inpData, UUID, public)
                if err != nil {
                    switch err {
                    case storage.ErrBucketNotExist:
                        log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
                    default:
                        log.Fatalf("ERROR: %v", err)
                    }
                }

                //log.Printf("URL: %s", objectURL(objAttrs))
                //log.Printf("MediaURL: %s", objAttrs.MediaLink)
                //log.Printf("Size: %d", objAttrs.Size)
                //log.Printf("MD5: %x", objAttrs.MD5)
                //log.Printf("objAttrs: %+v", objAttrs)
                //log.Printf("UUID: %v", UUID)
                //save object url
                //gcsObjectUrl = objectURL(objAttrs)
                gcsObjectUrl = UUID
                gcsMediaUrl = mediaURL(UUID)
            }
        } else {
            log.Fatalf("Error uploading media.")
        }
 
		UID := r.FormValue("UID")
		URL_ADD := r.FormValue("URL_ADD")
		PFUNC := r.FormValue("PFUNC")
		reqStr := fmt.Sprintf("/serve-people/?PFUNC=%s&UID=%s&URL_ADD=%s&blobKey3=%v&murl=%v", PFUNC, UID, URL_ADD, gcsObjectUrl, gcsMediaUrl)
		http.Redirect(w, r, reqStr, http.StatusFound)
		return
}
 
//handles newly uploaded blobstore-ads
func handleServeAds(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	//prevent access from other than ulapph pages
	checkReferrer(w,r)
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	_, uid := checkSession(w,r)
	blobkey := r.FormValue("blobKey2")
    thisURL := r.FormValue("murl")
	ADS_TITLE_R := r.FormValue("ADS_TITLE")
	ADS_TITLE_R2 := strings.Replace(ADS_TITLE_R, "[", "", -1)
	ADS_TITLE := strings.Replace(ADS_TITLE_R2, "]", "", -1)
	URL_ADD_R := r.FormValue("URL_ADD")
	URL_ADD_R2 := strings.Replace(URL_ADD_R, "[", "", -1)
	URL_ADD := strings.Replace(URL_ADD_R2, "]", "", -1)
	
	validateURL(w,r,URL_ADD)
	
	DESKTOP_R := r.FormValue("DESKTOP")
	DESKTOP_R2 := strings.Replace(DESKTOP_R, "[", "", -1)
	DESKTOP := strings.Replace(DESKTOP_R2, "]", "", -1)
 
	if DESKTOP == "" {
		DESKTOP = "desktop0"
	}

	tstamp := getTimestamp()
	
	q := datastore.NewQuery("TDSADS").Order("-ADS_ID").Limit(1)
	//log.Panicf("[S0586]")
	ads := make([]TDSADS, 0, 1)
	if _, err := datastoreClient.GetAll(c,q, &ads); err != nil {
		 panic(err)
	  }
	//log.Printf("datastoreClient.Get()  [74851]")
	thisID := 0
	for _, p := range ads{
		thisID = p.ADS_ID + 1
		p.SYS_VER = SYS_VERSION
		p.ADS_ID = thisID
		p.ADS_STATUS = 1
		p.ADS_PUB_ID = "ULAPPH"
		p.ADS_TYP = "IMG"
		p.UPLOAD_BY = uid
		p.UPLOAD_DATE = tstamp
		p.CATEGORY = DESKTOP
		p.ADS_SIZE = ""
		p.ADS_VIEW = 0
		p.ADS_CLICK = 0
		p.ADS_VAL_START = 0
		p.ADS_VAL_END = 0
		p.ADS_TITLE = ADS_TITLE
		p.ADS_IMG = thisURL
		p.ADS_URL = URL_ADD
		p.BLOB_KEY = blobkey
		thisKey := fmt.Sprintf("%s.%d", p.ADS_PUB_ID, p.ADS_ID)
		key := datastore.NameKey("TDSADS", thisKey, nil)
		_, err := datastoreClient.Put(c, key, &p)
		if err != nil {
			 panic(err)
        }
        //log.Printf("datastoreClient.Put()  [74878]")
		//log.Panicf("[S0587]")
		//clear ads id cache
		ADS_ID_CACHE_KEY := fmt.Sprintf("ADS_ID_CACHE_%v", p.ADS_ID)
		putStrToMemcacheWithoutExp(w,r,ADS_ID_CACHE_KEY,"")
		
		break
	}
	redURL := fmt.Sprintf("/admin-ads?ADS_FUNC=EditAd&ADS_ID=%d", thisID)
	http.Redirect(w, r, redURL, http.StatusFound)
	return
}
//handles newly uploaded slides 
func handleServeSlides(w http.ResponseWriter, r *http.Request) {
	ulapphDebug(w,r, "info", fmt.Sprintf("handleServeSlides() %v", ""))
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	//D0098
	ulapphDebug(w,r, "info", fmt.Sprintf("OPT: %v", r.FormValue("OPT")))
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true && r.FormValue("OPT") == "SWFS" {
		ulapphDebug(w,r, "info", fmt.Sprintf("handleServeSlides(): OPT: %v", r.FormValue("OPT")))
		//create collection
		err := tiedotCreateCol(w,r,"TDSSLIDE")
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotCreateCol(): %v", err))
			return
		}
		//prepare media
		ulapphDebug(w,r, "info", fmt.Sprintf("Preparing slide struct: %v", ""))
        //blobkey := r.FormValue("blobKey5")
        //log.Printf("blobkey: %v", blobkey)
        thisURL := r.FormValue("murl")
		TITLE := r.FormValue("TITLE")
		//DATA_TYPE := r.FormValue("DATA_TYPE")
		//DOC_ID := r.FormValue("DOC_ID")
		UID := r.FormValue("UID")
		//DOC_ID2 := str2int(DOC_ID)
		//PROP := r.FormValue("PROP")
		//FL_ADD_WP := r.FormValue("FL_ADD_WP")
		//FILE_NAME := r.FormValue("FILE_NAME")
		//MIME_TYPE := r.FormValue("MIME_TYPE")
		//MIME_EXT := ""
		//EMBED := r.FormValue("EMBED")
		//PINKEY := r.FormValue("PINKEY")
		//STRUWM := r.FormValue("STRUWM")
		//D0074
		//STRUWMI := r.FormValue("STRUWMI")
		//D0076
		//AUTOML := r.FormValue("AUTOML")
        //OPT := r.FormValue("OPT")
        //log.Printf("OPT: %v", OPT)
		DESC := r.FormValue("DESC")
		CATEGORY := r.FormValue("CATEGORY")
		//FL_SHARED := r.FormValue("FL_SHARED")
		//DOC_STAT := r.FormValue("DOC_STAT")
		//if OPT == "CCTV" && (PINKEY != PIN_KEY) {
            //ignore
			//ulapphDebug(w,r, "info", fmt.Sprintf("PINKEY & PIN_KEY did not match! %v", ""))
           // //log.Printf("PINKEY & PIN_KEY did not match!")
			//return
		//}
		timeNow := getTimestamp()
		p := TDSSLIDE {
                FL_COUNTRY_SPECIFIC: "",
                SYS_VER: 0,
                DOC_ID: str2int(timeNow),
				//DOC_ID: time.Now().Unix(),
                DOC_STAT: "",
                TITLE: TITLE,
                DESC: DESC,
                AUTHOR: UID,
                YEAR: getYear(),
                CATEGORY: CATEGORY,
                TAGS: "",
                FL_SHARED: "",
                SHARED_TO: "",
                BLOB_URL: thisURL,
                DT_UPLOAD: str2int(timeNow),
                NUM_LIKES: 0,
                NUM_COMMENTS: 0,
                LIKED_BY: "",
                COMMENTS_BY: "",
                NUM_VIEWS: int64(0),
                MUSIC_ID: 0,
                GET_NEXT: "",
		}
		//insert media
		ulapphDebug(w,r, "info", fmt.Sprintf("INSERTING SLIDE: %#v", p))
		docID, err := tiedotInsertSlide(w,r,p)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotInsertSlide(): %v", err))
			return
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("INSERTED: docID: %v tiedotInsertSlide: %#v", docID, p))

		ulapphDebug(w,r, "info", fmt.Sprintf("UPDATING SLIDE: %#v", p))
		docIDint, _ := strconv.Atoi(docID)
		p.DOC_ID = docIDint
		err = tiedotUpdateSlide(w,r,p)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotUpdateSlide(): %v", err))
			return
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("UPDATED: docID: %v tiedotUpdateSlide: %#v", docID, p))
		return
	}
	//prevent access from other than ulapph pages
	checkReferrer(w,r)
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	_, uid := checkSession(w,r)
	updateUserActiveData(w, r, c, uid, "/serve-slides")
	FUNC_CODE := "GET_GRP_ID"
	_, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		blobkey := r.FormValue("blobKey4")
		TITLE := r.FormValue("TITLE")
        CATEGORY := r.FormValue("CATEGORY")
        FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
		if FL_COUNTRY_SPECIFIC == "" {
			FL_COUNTRY_SPECIFIC = "N"
		}
 
		//fmt.Fprintf(w, "blobkey: %v<br>", blobkey)
		DESC := r.FormValue("DESC")
        DOC_STAT := r.FormValue("DOC_STAT")
        TAGS := r.FormValue("TAGS")
        FL_SHARED := r.FormValue("FL_SHARED")
		if FL_SHARED == "" {
			FL_SHARED = "N"
		}

		tstamp := getTimestamp()
        //tyear := t.Format("2006")	
		tyear := getYear()
		//fmt.Fprintf(w, "tyear: %v<br>", tyear)
		q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(1)
		//log.Panicf("[S0588]")
		slides := make([]TDSSLIDE, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
			 //panic(err)
            //return
            //log.Printf("ERROR: %v", err)
          }
          //log.Printf("datastoreClient.Get()  [75014]")
		thisID := 0
		//SYS_VER := SYS_VERSION
		NUM_LIKES := float64(0)
		NUM_COMMENTS := float64(0)
        NUM_VIEWS := float64(0)
        recCount, _  := datastoreClient.Count(c,q)
        if recCount == 0 {
            p := TDSSLIDE {
                FL_COUNTRY_SPECIFIC: "",
                SYS_VER: 0,
                DOC_ID: 1,
                DOC_STAT: "",
                TITLE: "",
                DESC: "",
                AUTHOR: "",
                YEAR: "",
                CATEGORY: "",
                TAGS: "",
                FL_SHARED: "",
                SHARED_TO: "",
                BLOB_URL: "",
                //DT_UPLOAD: "",
                DT_UPLOAD: 0,
                NUM_LIKES: 0,
                NUM_COMMENTS: 0,
                LIKED_BY: "",
                COMMENTS_BY: "",
                NUM_VIEWS: int64(0),
                MUSIC_ID: 0,
                GET_NEXT: "",
            }
            slides = append(slides, p)
        }
		for _, p := range slides{
			thisID = p.DOC_ID + 1
			p.SYS_VER = SYS_VERSION
			p.DOC_ID = thisID	
			p.DOC_STAT = DOC_STAT	
			p.TITLE	= TITLE
			p.DESC	= DESC
			p.AUTHOR = uid	
			p.YEAR	= tyear
			p.CATEGORY	= CATEGORY
			p.TAGS = TAGS	
			p.FL_SHARED	= FL_SHARED
			p.BLOB_URL = blobkey	
			p.DT_UPLOAD	= str2int(tstamp)
			p.NUM_LIKES	= 0
			p.NUM_COMMENTS = 0
			p.NUM_VIEWS = 0			
			p.LIKED_BY = ""	
			p.COMMENTS_BY = ""
			p.FL_COUNTRY_SPECIFIC = FL_COUNTRY_SPECIFIC
			p.SHARED_TO = ""
			p.MUSIC_ID = 0
			NUM_LIKES = float64(p.NUM_LIKES)
			NUM_COMMENTS = float64(p.NUM_COMMENTS)
			NUM_VIEWS = float64(p.NUM_VIEWS)
			thisKey := fmt.Sprintf("%d", p.DOC_ID)
			//fmt.Fprintf(w, "thisKey: %v<br>", thisKey)
			key := datastore.NameKey("TDSSLIDE", thisKey, nil)
			_, err := datastoreClient.Put(c, key, &p)
			if err != nil {
				 panic(err)
				//return
            }
            //log.Printf("datastoreClient.Put()  [75080]")
			//cache details
			TDSSLIDE_Cacher(w,r,uid,thisID,blobkey,DOC_STAT,FL_SHARED,uid,FL_COUNTRY_SPECIFIC,TITLE,TAGS,"",0,"")
			break
		}
		//---------------
		//put data to memcache
		SID := fmt.Sprintf("TDSSLIDE-%d", thisID)
		st, doc, err := Parse3(w, r, blobkey, TITLE, 0, CATEGORY, SID, "ONLINE", uid, DOC_STAT, FL_SHARED)
		if err != nil {
			//could be a linked content
			i := strings.Index(blobkey, "GET_WALL:")
			if i != -1 {
				SPL := strings.Split(blobkey,"GET_WALL:")
				if len(SPL) > 1 {
					linkedUrl := SPL[1]
					linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
					http.Redirect(w, r, linkedUrl, http.StatusFound)
					return
				}
				
			} else {
				//panic(err)
				msgDtl := fmt.Sprintf("[U00148] Critical error. Parse3 error %v", err)
				msgTyp := "error"
				action := "U00148"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
				////log.Panicf("error: %v", err)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		}
		//fmt.Fprintf(w, "doc: %v<br>", doc)
		var buf bytes.Buffer
		title2 := fmt.Sprintf("%v.slide", TITLE)
		SL_TMP := "S"
		//renderPresentation(&buf, title2, doc)
		if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
			//panic(err)
			msgDtl := fmt.Sprintf("[U00148] Critical error. renderPresentation error %v", err)
			msgTyp := "error"
			action := "U00148"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			////log.Panicf("error: %v", err)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}
		
		SLIDES_CACHE_KEY := ""
		SLIDES_CACHE_KEY = fmt.Sprintf("SLIDES_CACHE_%v", blobkey)
 
		if st != "r" {
			putBytesToMemcacheWithExp(w,r,SLIDES_CACHE_KEY,buf.Bytes(),MC_ADS_EXPIRES_30_MIN)
 
		}

		//insert slide into search idx
		thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", thisID)
		thisIdxURL := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", thisID, thisIdxKey, CATEGORY, 0)
		
		TITLE2 := strings.Replace(TITLE, "_", " ", -1)
		DESC2 := strings.Replace(DESC, "_", " ", -1)
		slideIdx := &IDX_TDSSLIDE{
			DOC_KEY: 			thisIdxKey,
			SEARCH_TYPE: 		"SLIDES",
			SOURCE_TYPE: 		"ULAPPH",	
			SOURCE_TBL:  		"TDSSLIDE",	
			DESKTOP: 			CATEGORY,
			FL_SHARED:			FL_SHARED,
			DOC_STAT:			DOC_STAT,
			DOC_SCOPE_OVERALL:	"",
			DOC_SCOPE_COUNTRY:  "",
			DOC_SCOPE_REGION:  	"",
			DOC_SCOPE_CITY: 	"",
			DOC_SCOPE_BARANGAY: "",
			DOC_TITLE: 			TITLE2,	
			DOC_DESC: 			DESC2,
			DOC_AUTHOR:         uid,
            //DOC_CONTENT_TEXT: 	blobText,
            DOC_CONTENT_TEXT: 	"",
			DOC_CONTENT_HTML: 	"",	
			DOC_CONTENT_ATOM: 	"",	
			DOC_NUM_LIKES:		NUM_LIKES,		
			DOC_NUM_COMMENTS:	NUM_COMMENTS,
			DOC_NUM_VIEWS:		NUM_VIEWS,	
			CONTENT_URL: 		thisIdxURL,
			IMG_URL: 			TAGS,
			DATE_ADDED: 		tstamp,
			DATE_UPDATED: 		tstamp,
        }
        
		putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
 
		if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" {
		sysReq := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", thisID, TITLE, blobkey, CATEGORY)	
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
		}
 
}
//handles newly uploaded articles 
func handleServeArticles(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	//D0098
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true && r.FormValue("OPT") == "SWFS" {
		ulapphDebug(w,r, "info", fmt.Sprintf("handleServeSlides(): %v", r.FormValue("OPT")))
		//create collection
		err := tiedotCreateCol(w,r,"TDSARTL")
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotCreateCol(): %v", err))
			return
		}
		//prepare media
		ulapphDebug(w,r, "info", fmt.Sprintf("Preparing article struct: %v", ""))
        //blobkey := r.FormValue("blobKey5")
        //log.Printf("blobkey: %v", blobkey)
        thisURL := r.FormValue("murl")
		TITLE := r.FormValue("TITLE")
		//DATA_TYPE := r.FormValue("DATA_TYPE")
		//DOC_ID := r.FormValue("DOC_ID")
		UID := r.FormValue("UID")
		//DOC_ID2 := str2int(DOC_ID)
		//PROP := r.FormValue("PROP")
		//FL_ADD_WP := r.FormValue("FL_ADD_WP")
		//FILE_NAME := r.FormValue("FILE_NAME")
		//MIME_TYPE := r.FormValue("MIME_TYPE")
		//MIME_EXT := ""
		//EMBED := r.FormValue("EMBED")
		//PINKEY := r.FormValue("PINKEY")
		//STRUWM := r.FormValue("STRUWM")
		//D0074
		//STRUWMI := r.FormValue("STRUWMI")
		//D0076
		//AUTOML := r.FormValue("AUTOML")
        //OPT := r.FormValue("OPT")
        //log.Printf("OPT: %v", OPT)
		DESC := r.FormValue("DESC")
		CATEGORY := r.FormValue("CATEGORY")
		//FL_SHARED := r.FormValue("FL_SHARED")
		//DOC_STAT := r.FormValue("DOC_STAT")
		//if OPT == "CCTV" && (PINKEY != PIN_KEY) {
            //ignore
			//ulapphDebug(w,r, "info", fmt.Sprintf("PINKEY & PIN_KEY did not match! %v", ""))
           // //log.Printf("PINKEY & PIN_KEY did not match!")
			//return
		//}
		timeNow := getTimestamp()
		p := TDSARTL {
                FL_COUNTRY_SPECIFIC: "",
                SYS_VER: 0,
                DOC_ID: str2int(timeNow),
				//DOC_ID: time.Now().Unix(),
                DOC_STAT: "",
                TITLE: TITLE,
                DESC: DESC,
                AUTHOR: UID,
                YEAR: getYear(),
                CATEGORY: CATEGORY,
                TAGS: "",
                FL_SHARED: "",
                SHARED_TO: "",
                BLOB_URL: thisURL,
                DT_UPLOAD: str2int(timeNow),
                NUM_LIKES: 0,
                NUM_COMMENTS: 0,
                LIKED_BY: "",
                COMMENTS_BY: "",
                NUM_VIEWS: int64(0),
                MUSIC_ID: 0,
                //GET_NEXT: "",
		}
		//insert media
		ulapphDebug(w,r, "info", fmt.Sprintf("INSERTING ARTICLE: %#v", p))
		docID, err := tiedotInsertArticle(w,r,p)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotInsertArticle(): %v", err))
			return
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("INSERTED: docID: %v tiedotInsertArticle: %#v", docID, p))

		ulapphDebug(w,r, "info", fmt.Sprintf("UPDATING ARTICLE: %#v", p))
		docIDint, _ := strconv.Atoi(docID)
		p.DOC_ID = docIDint
		err = tiedotUpdateArticle(w,r,p)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotUpdateArticle(): %v", err))
			return
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("INSERTED: docID: %v tiedotUpdateArticle: %#v", docID, p))
		return
	}
	//prevent access from other than ulapph pages
	checkReferrer(w,r)
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	_, uid := checkSession(w,r)
	updateUserActiveData(w, r, c, uid, "/serve-articles")
	FUNC_CODE := "GET_GRP_ID"
	_, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
		blobkey := r.FormValue("blobKey4")
		TITLE := r.FormValue("TITLE")
        CATEGORY := r.FormValue("CATEGORY")
        FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
		DESC := r.FormValue("DESC")
        DOC_STAT := r.FormValue("DOC_STAT")
        TAGS := r.FormValue("TAGS")
        FL_SHARED := r.FormValue("FL_SHARED")
		if FL_SHARED == "" {
			FL_SHARED = "N"
		}
		tstamp := getTimestamp()
		tyear := getYear()
		//fmt.Fprintf(w, "tyear: %v<br>", tyear)
		q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(1)
		//log.Panicf("[S0590]")
		articles := make([]TDSARTL, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
             //panic(err)
             //log.Printf("ERROR: %v", err)
			//return
          }
          //log.Printf("datastoreClient.Get()  [75296]")
		thisID := 0
		NUM_LIKES := float64(0)
		NUM_COMMENTS := float64(0)
        NUM_VIEWS := float64(0)
        recCount, _  := datastoreClient.Count(c,q)
        if recCount == 0 {
            p := TDSARTL {
                FL_COUNTRY_SPECIFIC: "",
                SYS_VER: 0,
                DOC_ID: 1,
                DOC_STAT: "",
                TITLE: "",
                DESC: "",
                AUTHOR: "",
                YEAR: "",
                CATEGORY: "",
                TAGS: "",
                FL_SHARED: "",
                SHARED_TO: "",
                BLOB_URL: "",
                //DT_UPLOAD: "",
                DT_UPLOAD: 0,
                NUM_LIKES: 0,
                NUM_COMMENTS: 0,
                LIKED_BY: "",
                COMMENTS_BY: "",
                NUM_VIEWS: int64(0),
                MUSIC_ID: 0,
            }
            articles = append(articles, p)
        }
		for _, p := range articles{
			thisID = p.DOC_ID + 1
			p.SYS_VER = SYS_VERSION
			p.DOC_ID = thisID	
			p.DOC_STAT = DOC_STAT	
			p.TITLE	= TITLE
			p.DESC	= DESC
			p.AUTHOR = uid	
			p.YEAR	= tyear
			p.CATEGORY	= CATEGORY
			p.TAGS = TAGS	
			p.FL_SHARED	= FL_SHARED
			p.BLOB_URL = blobkey	
			p.DT_UPLOAD	= str2int(tstamp)
			p.NUM_LIKES	= 0
			p.NUM_COMMENTS = 0
			p.NUM_VIEWS	= 0		
			p.LIKED_BY = ""	
			p.COMMENTS_BY = ""
			p.FL_COUNTRY_SPECIFIC = FL_COUNTRY_SPECIFIC
			p.SHARED_TO = ""
			p.MUSIC_ID = 0
			NUM_LIKES = float64(p.NUM_LIKES)
			NUM_COMMENTS = float64(p.NUM_COMMENTS)
			NUM_VIEWS = float64(p.NUM_VIEWS)
			thisKey := fmt.Sprintf("%d", p.DOC_ID)
			//fmt.Fprintf(w, "thisKey: %v<br>", thisKey)
			key := datastore.NameKey("TDSARTL", thisKey, nil)
			_, err := datastoreClient.Put(c, key, &p)
			if err != nil {
				 panic(err)
				//return
            }
            //log.Printf("datastoreClient.Put()  [75360]")
			//log.Panicf("[S0591]")
			//update article cache
			TDSARTL_Cacher(w,r,uid,thisID, blobkey, DOC_STAT, FL_SHARED, uid, FL_COUNTRY_SPECIFIC, TITLE, TAGS, "", p.MUSIC_ID)
			break
		}
		//---------------
		//put data to memcache
		SID := fmt.Sprintf("TDSARTL-%d", thisID)
		st, doc, err := Parse3(w, r, blobkey, TITLE, 0, CATEGORY, SID, "ONLINE", uid, DOC_STAT, FL_SHARED)
		if err != nil {
			i := strings.Index(blobkey, "GET_WALL:")
			if i != -1 {
				SPL := strings.Split(blobkey,"GET_WALL:")
				if len(SPL) > 1 {
					linkedUrl := SPL[1]
					linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
					http.Redirect(w, r, linkedUrl, http.StatusFound)
					return
				}
			} else {
				//panic(err)
				msgDtl := fmt.Sprintf("[U00185] Critical error. Parse3 error: %v", err)
				msgTyp := "error"
				action := "U00185"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
				////log.Panicf("error: %v", err)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		}
		//fmt.Fprintf(w, "doc: %v<br>", doc)
		var buf bytes.Buffer
		title2 := fmt.Sprintf("%v.article", TITLE)
		SL_TMP := "A"
		//renderPresentation(&buf, title2, doc)
		if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
			//panic(err)
			msgDtl := fmt.Sprintf("[U00185] Critical error. renderPresentation error: %v", err)
			msgTyp := "error"
			action := "U00185"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		}

		ARTICLES_CACHE_KEY := ""
		ARTICLES_CACHE_KEY = fmt.Sprintf("ARTICLES_CACHE_%v", blobkey)
		if st != "r" {
			putBytesToMemcacheWithExp(w,r,ARTICLES_CACHE_KEY,buf.Bytes(),MC_ADS_EXPIRES_30_MIN)
		}
		//insert article into search idx
		thisIdxKey := fmt.Sprintf("TDSARTL-%d", thisID)
		thisIdxURL := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", thisID, thisIdxKey, CATEGORY, 0)
		//blobText := getBlobText(w, r, blobkey)
		blobChan := make(chan string)
		go getBlobTextChan(w, r,blobChan, blobkey)
		blobText := <- blobChan
		if err != nil {
			panic(err)
		}
		TITLE2 := strings.Replace(TITLE, "_", " ", -1)
		DESC2 := strings.Replace(DESC, "_", " ", -1)
		articleIdx := &IDX_TDSARTL{
			DOC_KEY: 			thisIdxKey,
			SEARCH_TYPE: 		"ARTICLES",
			SOURCE_TYPE: 		"ULAPPH",	
			SOURCE_TBL:  		"TDSARTL",	
			DESKTOP: 			CATEGORY,
			FL_SHARED:			FL_SHARED,
			DOC_STAT:			DOC_STAT,
			DOC_SCOPE_OVERALL:	"",
			DOC_SCOPE_COUNTRY:  "",
			DOC_SCOPE_REGION:  	"",
			DOC_SCOPE_CITY: 	"",
			DOC_SCOPE_BARANGAY: "",
			DOC_TITLE: 			TITLE2,	
			DOC_DESC: 			DESC2,
			DOC_AUTHOR:         uid,
			DOC_CONTENT_TEXT: 	blobText,
			DOC_CONTENT_HTML: 	"",	
			DOC_CONTENT_ATOM: 	"",	
			DOC_NUM_LIKES:		NUM_LIKES,		
			DOC_NUM_COMMENTS:	NUM_COMMENTS,
			DOC_NUM_VIEWS:		NUM_VIEWS,
			CONTENT_URL: 		thisIdxURL,
			IMG_URL: 			TAGS,
			DATE_ADDED: 		tstamp,
			DATE_UPDATED: 		tstamp,
		}
        
		putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
		if GROUP_ID == "GRP_ADMIN" || GROUP_ID == "GRP_USER" {
		sysReq := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", thisID, TITLE, blobkey, CATEGORY)	
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
		}
}
//D0099
func nsqProduceMessage(w http.ResponseWriter, r *http.Request, msg string) error {
	ulapphDebug(w,r, "info", fmt.Sprintf("nsqProduceMessage() %v", ""))
	//data, _ := json.Marshal(p)
	//ulapphDebug(w,r, "info", fmt.Sprintf("data: %v", string(data)))
	//post resp status to url
	//bodyString := string(data)
	//ulapphDebug(w,r, "info", fmt.Sprintf("bodyString: %v", bodyString))
	ulapphDebug(w,r, "info", fmt.Sprintf("MESSAGE: %v", msg))
	topicName := SYS_NSQ_CCTV_TOPIC
	ulapphDebug(w,r, "info", fmt.Sprintf("TOPIC: %v", topicName))
	NSQ_SERVER := fmt.Sprintf("%v/pub?topic=%v", SYS_NSQ_HOST_PORT, SYS_NSQ_CCTV_TOPIC)
	ulapphDebug(w,r, "info", fmt.Sprintf("NSQ_SERVER: %v", NSQ_SERVER))
	req, err := http.NewRequest("POST", NSQ_SERVER, strings.NewReader(msg))
	if err != nil {
		ulapphDebug(w,r, "critical", fmt.Sprintf("http.NewRequest() %v", err))
		return err
	}
	thisLength := strconv.Itoa(len(msg))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		ulapphDebug(w,r, "critical", fmt.Sprintf("client.Do() %v", err))
		return err
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	return nil
}
func tiedotMediaQueryByMediaId(w http.ResponseWriter, r *http.Request) ([]TDSMEDIA, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotMediaQueryByMediaId() %v", ""))
	MEDIA_ID := r.FormValue("MEDIA_ID")
	ulapphDebug(w,r, "info", fmt.Sprintf("MEDIA_ID: %v", MEDIA_ID))
	data := fmt.Sprintf(`[{"eq":"%v","in":["MEDIA_ID"]}]`, MEDIA_ID)
	ulapphDebug(w,r, "info", fmt.Sprintf("prepare data: %v", data))
	
	//http://localhost:6060/query?col=TDSMEDIA
	queryURL := fmt.Sprintf("%v/query?col=TDSMEDIA&q=%v", SYS_TIEDOT_DB_URL, data) 
	ulapphDebug(w,r, "info", fmt.Sprintf("queryURL: %v", queryURL))
	req, err := http.NewRequest("POST", queryURL, nil)
	ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("client.Do() ERROR: %v", err))
		//panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	var qcol []TDSMEDIA 
	var qcolRaw map[string]interface{} 
	err = json.Unmarshal(bodyBytes,&qcolRaw)
	if err != nil {
		ulapphDebug(w,r, "critical", fmt.Sprintf("json.Unmarshal() ERROR: %v", err))
		return qcol, err
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("qcolRaw: %v", qcolRaw))
	for _, v := range qcolRaw {
	    // convert map to json
	    jsonString, _ := json.Marshal(v)
	    // convert json to struct
	    s := TDSMEDIA{}
	    json.Unmarshal(jsonString, &s)
	    ulapphDebug(w,r, "info", fmt.Sprintf("s: %v", s))
	    qcol = append(qcol, s)
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("qcol: %v", qcol))
	return qcol, nil
}
func tiedotArticleQueryByDocId(w http.ResponseWriter, r *http.Request, DOC_ID int) ([]TDSARTL, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotArticleQueryByDocId() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("DOC_ID: %v", DOC_ID))
	data := fmt.Sprintf(`[{"eq":"%v","in":["DOC_ID"]}]`, DOC_ID)
	ulapphDebug(w,r, "info", fmt.Sprintf("prepare data: %v", data))
	
	//http://localhost:6060/query?col=TDSARTL
	queryURL := fmt.Sprintf("%v/query?col=TDSARTL&q=%v", SYS_TIEDOT_DB_URL, data) 
	ulapphDebug(w,r, "info", fmt.Sprintf("queryURL: %v", queryURL))
	//req, err := http.NewRequest("POST", queryURL, nil)
	req, err := http.NewRequest("GET", queryURL, nil)
	ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("client.Do() ERROR: %v", err))
		//panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	var qcol []TDSARTL
	var qcolRaw map[string]interface{} 
	err = json.Unmarshal(bodyBytes,&qcolRaw)
	if err != nil {
		ulapphDebug(w,r, "critical", fmt.Sprintf("json.Unmarshal() ERROR: %v", err))
		return qcol, err
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("qcolRaw: %v", qcolRaw))
	for _, v := range qcolRaw {
	    // convert map to json
	    jsonString, _ := json.Marshal(v)
	    // convert json to struct
	    s := TDSARTL{}
	    json.Unmarshal(jsonString, &s)
	    ulapphDebug(w,r, "info", fmt.Sprintf("s: %v", s))
	    qcol = append(qcol, s)
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("qcol: %v", qcol))
	return qcol, nil
}
//D0098
//curl --data-ascii q='{"n": [{"int-from": 20200302014426, "int-to": 20200302024426, "in": ["MEDIA_ID"]}]}' "http://localhost:6060/query?col=TDSMEDIA"
func tiedotMediaCustomQuery(w http.ResponseWriter, r *http.Request) ([]TDSMEDIA, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotMediaCustomQuery() %v", ""))
	//parse given dates
	ulapphDebug(w,r, "info", fmt.Sprintf("parse given date parameters %v", ""))
	start_date := r.FormValue("start_date")
	start_time := r.FormValue("start_time")
	end_date := r.FormValue("end_date")
	end_time := r.FormValue("end_time")
	//contType := r.FormValue("cont_type")
	//contCat := r.FormValue("cont_cat")
	kword := r.FormValue("kword")
	cat := fmt.Sprintf("desktop%v", kword)
	//get year
	//SPL := strings.Split(start_date, ", ")
	//start_year := SPL[1]
	//log.Printf("start_year: %v", start_year)
	//log.Printf("start_date: %v", start_date)
	//log.Printf("start_time: %v", start_time)
	//log.Printf("end_date: %v", end_date)
	//log.Printf("end_time: %v", end_time)
	//log.Printf("contType: %v", contType)
	//log.Printf("contCat: %v", contCat)
	//compose timestamp
	start_tstmp := fmt.Sprintf("%v %v", start_date, start_time)
	end_tstmp := fmt.Sprintf("%v %v", end_date, end_time)
	//log.Printf("start_tstmp: %v", start_tstmp)
	//log.Printf("end_tstmp: %v", end_tstmp)
	rt1, _ := time.Parse("_2 January, 2006 3:04 PM", start_tstmp)
	start_rt1 := fmt.Sprintf("%v", rt1.Format("20060102150405"))
	rt2, _ := time.Parse("_2 January, 2006 3:04 PM", end_tstmp)
	start_rt2 := fmt.Sprintf("%v", rt2.Format("20060102150405"))
	//log.Printf("start_rt1: %v", start_rt1)
	//log.Printf("start_rt2: %v", start_rt2)
	start := str2int(start_rt1)
	end := str2int(start_rt2)
	//--end parse data
	//prep data
	//'{"n": [{"int-from": 20200302014426, "int-to": 20200302024426, "in": ["MEDIA_ID"]}]}'
	//data := fmt.Sprintf("q='{\"n\": [{\"int-from\": %v, \"int-to\": %v, \"in\": [\"MEDIA_ID\"]}]}'", start, end)
	//data := fmt.Sprintf(`q=[{"n": [{"int-from": %v, "int-to": %v, "in": ["MEDIA_ID"]}]}]`, start, end)
	data := ""
	if kword == "" {
		//data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["MEDIA_ID"]}]}]`, start, end)
		data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DT_UPLOAD"]}]}]`, start, end)
	} else {
		//data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["MEDIA_ID"]},{"in":["CATEGORY"],"eq":"%v"}]}]`, start, end, cat)
		data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DT_UPLOAD"]},{"in":["CATEGORY"],"eq":"%v"}]}]`, start, end, cat)
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("prepare data: %v", data))
	//bodyString := string(data)
	//http://localhost:6060/query?col=TDSMEDIA
	queryURL := fmt.Sprintf("%v/query?col=TDSMEDIA&q=%v", SYS_TIEDOT_DB_URL, data) 
	//queryURL := fmt.Sprintf("%v/query?col=TDSMEDIA", SYS_TIEDOT_DB_URL) 
	ulapphDebug(w,r, "info", fmt.Sprintf("queryURL: %v", queryURL))
	//req, err := http.NewRequest("POST", queryURL, strings.NewReader(data))
	req, err := http.NewRequest("POST", queryURL, nil)
	ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("client.Do() ERROR: %v", err))
		//panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	//ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: length = %v", len(bodyBytes)))
	//{"count":1,"fid":"3,01637037d6","url":"127.0.0.1:8080","publicUrl":"localhost:8080"}
	//FETCH_URL := string(bodyBytes)
	//var qcol []TDSMEDIA
	//qcol := make([]TD_TDSMEDIA, 0, 1000)
	//var qcol map[string]interface{}
	//var qcol []TIEDOT_MEDIA 
	var qcol []TDSMEDIA 
	var qcolRaw map[string]interface{} 
	err = json.Unmarshal(bodyBytes,&qcolRaw)
	if err != nil {
		//ulapphDebug(w,r, "critical", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
		ulapphDebug(w,r, "critical", fmt.Sprintf("json.Unmarshal() ERROR: %v", err))
		return qcol, err
	}
	//for k := range n {
	//	a = append(a, k)
	//}
	ulapphDebug(w,r, "info", fmt.Sprintf("qcolRaw: %v", qcolRaw))
	for _, v := range qcolRaw {
	    // convert map to json
	    jsonString, _ := json.Marshal(v)

	    // convert json to struct
	    s := TDSMEDIA{}
	    json.Unmarshal(jsonString, &s)
	    ulapphDebug(w,r, "info", fmt.Sprintf("s: %v", s))
	    qcol = append(qcol, s)

	}
	//ulapphDebug(w,r, "info", fmt.Sprintf("list collections: %#v", qcol))
	ulapphDebug(w,r, "info", fmt.Sprintf("qcol: %v", qcol))
	return qcol, nil
}
//D0098
//curl --data-ascii q='{"n": [{"int-from": 20200302014426, "int-to": 20200302024426, "in": ["DOC_ID"]}]}' "http://localhost:6060/query?col=TDSSLIDE"
func tiedotSlideCustomQuery(w http.ResponseWriter, r *http.Request) ([]TDSSLIDE, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotSlideCustomQuery() %v", ""))
	//parse given dates
	ulapphDebug(w,r, "info", fmt.Sprintf("parse given date parameters %v", ""))
	start_date := r.FormValue("start_date")
	start_time := r.FormValue("start_time")
	end_date := r.FormValue("end_date")
	end_time := r.FormValue("end_time")
	//contType := r.FormValue("cont_type")
	//contCat := r.FormValue("cont_cat")
	kword := r.FormValue("kword")
	cat := fmt.Sprintf("desktop%v", kword)
	//get year
	//SPL := strings.Split(start_date, ", ")
	//start_year := SPL[1]
	//log.Printf("start_year: %v", start_year)
	//log.Printf("start_date: %v", start_date)
	//log.Printf("start_time: %v", start_time)
	//log.Printf("end_date: %v", end_date)
	//log.Printf("end_time: %v", end_time)
	//log.Printf("contType: %v", contType)
	//log.Printf("contCat: %v", contCat)
	//compose timestamp
	start_tstmp := fmt.Sprintf("%v %v", start_date, start_time)
	end_tstmp := fmt.Sprintf("%v %v", end_date, end_time)
	//log.Printf("start_tstmp: %v", start_tstmp)
	//log.Printf("end_tstmp: %v", end_tstmp)
	rt1, _ := time.Parse("_2 January, 2006 3:04 PM", start_tstmp)
	start_rt1 := fmt.Sprintf("%v", rt1.Format("20060102150405"))
	rt2, _ := time.Parse("_2 January, 2006 3:04 PM", end_tstmp)
	start_rt2 := fmt.Sprintf("%v", rt2.Format("20060102150405"))
	//log.Printf("start_rt1: %v", start_rt1)
	//log.Printf("start_rt2: %v", start_rt2)
	start := str2int(start_rt1)
	end := str2int(start_rt2)
	//--end parse data
	//prep data
	data := ""
	if kword == "" {
		//data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DOC_ID"]}]}]`, start, end)
		data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DT_UPLOAD"]}]}]`, start, end)
	} else {
		data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DT_UPLOAD"]},{"in":["CATEGORY"],"eq":"%v"}]}]`, start, end, cat)
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("prepare data: %v", data))
	//bodyString := string(data)
	//http://localhost:6060/query?col=TDSSLIDE
	queryURL := fmt.Sprintf("%v/query?col=TDSSLIDE&q=%v", SYS_TIEDOT_DB_URL, data) 
	//queryURL := fmt.Sprintf("%v/query?col=TDSMEDIA", SYS_TIEDOT_DB_URL) 
	ulapphDebug(w,r, "info", fmt.Sprintf("queryURL: %v", queryURL))
	//req, err := http.NewRequest("POST", queryURL, strings.NewReader(data))
	req, err := http.NewRequest("POST", queryURL, nil)
	ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("client.Do() ERROR: %v", err))
		//panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	//ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: length = %v", len(bodyBytes)))
	//{"count":1,"fid":"3,01637037d6","url":"127.0.0.1:8080","publicUrl":"localhost:8080"}
	var qcol []TDSSLIDE 
	var qcolRaw map[string]interface{} 
	err = json.Unmarshal(bodyBytes,&qcolRaw)
	if err != nil {
		//ulapphDebug(w,r, "critical", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
		ulapphDebug(w,r, "critical", fmt.Sprintf("json.Unmarshal() ERROR: %v", err))
		return qcol, err
	}
	for _, v := range qcolRaw {
	    // convert map to json
	    jsonString, _ := json.Marshal(v)

	    // convert json to struct
	    s := TDSSLIDE{}
	    json.Unmarshal(jsonString, &s)
	    ulapphDebug(w,r, "info", fmt.Sprintf("s: %v", s))
	    qcol = append(qcol, s)

	}
	//ulapphDebug(w,r, "info", fmt.Sprintf("list collections: %#v", qcol))
	ulapphDebug(w,r, "info", fmt.Sprintf("qcol: %v", qcol))
	return qcol, nil
}
//D0098
//curl --data-ascii q='{"n": [{"int-from": 20200302014426, "int-to": 20200302024426, "in": ["DOC_ID"]}]}' "http://localhost:6060/query?col=TDSARTL"
func tiedotArticleCustomQuery(w http.ResponseWriter, r *http.Request) ([]TDSARTL, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotArticleCustomQuery() %v", ""))
	//parse given dates
	ulapphDebug(w,r, "info", fmt.Sprintf("parse given date parameters %v", ""))
	start_date := r.FormValue("start_date")
	start_time := r.FormValue("start_time")
	end_date := r.FormValue("end_date")
	end_time := r.FormValue("end_time")
	//contType := r.FormValue("cont_type")
	//contCat := r.FormValue("cont_cat")
	kword := r.FormValue("kword")
	cat := fmt.Sprintf("desktop%v", kword)
	//get year
	//SPL := strings.Split(start_date, ", ")
	//start_year := SPL[1]
	//log.Printf("start_year: %v", start_year)
	//log.Printf("start_date: %v", start_date)
	//log.Printf("start_time: %v", start_time)
	//log.Printf("end_date: %v", end_date)
	//log.Printf("end_time: %v", end_time)
	//log.Printf("contType: %v", contType)
	//log.Printf("contCat: %v", contCat)
	//compose timestamp
	start_tstmp := fmt.Sprintf("%v %v", start_date, start_time)
	end_tstmp := fmt.Sprintf("%v %v", end_date, end_time)
	//log.Printf("start_tstmp: %v", start_tstmp)
	//log.Printf("end_tstmp: %v", end_tstmp)
	rt1, _ := time.Parse("_2 January, 2006 3:04 PM", start_tstmp)
	start_rt1 := fmt.Sprintf("%v", rt1.Format("20060102150405"))
	rt2, _ := time.Parse("_2 January, 2006 3:04 PM", end_tstmp)
	start_rt2 := fmt.Sprintf("%v", rt2.Format("20060102150405"))
	//log.Printf("start_rt1: %v", start_rt1)
	//log.Printf("start_rt2: %v", start_rt2)
	start := str2int(start_rt1)
	end := str2int(start_rt2)
	//--end parse data
	//prep data
	data := ""
	if kword == "" {
		//data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DOC_ID"]}]}]`, start, end)
		data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DT_UPLOAD"]}]}]`, start, end)
	} else {
		//data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DOC_ID"]},{"in":["CATEGORY"],"eq":"%v"}]}]`, start, end, cat)
		data = fmt.Sprintf(`[{"n":[{"int-from":%v,"int-to":%v,"in":["DT_UPLOAD"]},{"in":["CATEGORY"],"eq":"%v"}]}]`, start, end, cat)
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("prepare data: %v", data))
	//bodyString := string(data)
	//http://localhost:6060/query?col=TDSARTL
	queryURL := fmt.Sprintf("%v/query?col=TDSARTL&q=%v", SYS_TIEDOT_DB_URL, data) 
	//queryURL := fmt.Sprintf("%v/query?col=TDSMEDIA", SYS_TIEDOT_DB_URL) 
	ulapphDebug(w,r, "info", fmt.Sprintf("queryURL: %v", queryURL))
	//req, err := http.NewRequest("POST", queryURL, strings.NewReader(data))
	req, err := http.NewRequest("POST", queryURL, nil)
	ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("client.Do() ERROR: %v", err))
		//panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	//ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: length = %v", len(bodyBytes)))
	//{"count":1,"fid":"3,01637037d6","url":"127.0.0.1:8080","publicUrl":"localhost:8080"}
	var qcol []TDSARTL
	var qcolRaw map[string]interface{} 
	err = json.Unmarshal(bodyBytes,&qcolRaw)
	if err != nil {
		//ulapphDebug(w,r, "critical", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
		ulapphDebug(w,r, "critical", fmt.Sprintf("json.Unmarshal() ERROR: %v", err))
		return qcol, err
	}
	for _, v := range qcolRaw {
	    // convert map to json
	    jsonString, _ := json.Marshal(v)

	    // convert json to struct
	    s := TDSARTL{}
	    json.Unmarshal(jsonString, &s)
	    ulapphDebug(w,r, "info", fmt.Sprintf("s: %v", s))
	    qcol = append(qcol, s)

	}
	//ulapphDebug(w,r, "info", fmt.Sprintf("list collections: %#v", qcol))
	ulapphDebug(w,r, "info", fmt.Sprintf("qcol: %v", qcol))
	return qcol, nil
}
//D0098
func tiedotListColls(w http.ResponseWriter, r *http.Request) ([]string, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotListColls() %v", ""))
	//> curl "http://localhost:8080/all"
	//["Feeds","Votes"]
	req, err := http.NewRequest("POST", SYS_TIEDOT_DB_URL+"/all", nil)
	ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	//{"count":1,"fid":"3,01637037d6","url":"127.0.0.1:8080","publicUrl":"localhost:8080"}
	//FETCH_URL := string(bodyBytes)
	var scol []string
	err = json.Unmarshal(bodyBytes,&scol)
	if err != nil {
		ulapphDebug(w,r, "critical", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
		return nil, err
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("list collections: %#v", scol))
	return scol, nil
}
//D0098
func tiedotCreateCol(w http.ResponseWriter, r *http.Request, cname string) error {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotCreateCol() %v", ""))
	//> curl "http://localhost:6060/create?col=Feeds"
	req, err := http.NewRequest("POST", SYS_TIEDOT_DB_URL+"/create?col="+cname, nil)
	ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
	client := &http.Client{}
	_, err = client.Do(req)
	if err != nil {
		//ignore any error
		//panic(err)
	}
	return nil
}
//D0098
func tiedotInsertMedia(w http.ResponseWriter, r *http.Request, p TDSMEDIA) (string, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotInsertMedia() %v", ""))
	//> curl --data-ascii doc='{"a": 1, "b": 2}' "http://localhost:6060/insert?col=Feeds"
	//791206372389179361 # the new document's unique ID
	//ulapphDebug(w,r, "info", fmt.Sprintf("TDSMEDIA: %#v", p))
	data, _ := json.Marshal(p)
	ulapphDebug(w,r, "info", fmt.Sprintf("data: %v", string(data)))
	//post resp status to url
	bodyString := string(data)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyString: %v", bodyString))
	req, _ := http.NewRequest("POST", SYS_TIEDOT_DB_URL+"/insert?col=TDSMEDIA", strings.NewReader(bodyString))
	thisLength := strconv.Itoa(len(data))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	docID := string(bodyBytes)
	return docID, nil
}
func tiedotUpdateMedia(w http.ResponseWriter, r *http.Request, p TDSMEDIA) (error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotUpdateMedia() %v", ""))
	data, _ := json.Marshal(p)
	ulapphDebug(w,r, "info", fmt.Sprintf("data: %v", string(data)))
	//post resp status to url
	bodyString := string(data)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyString: %v", bodyString))
	req, _ := http.NewRequest("POST", fmt.Sprintf("%v/update?col=TDSMEDIA&id=%v", SYS_TIEDOT_DB_URL, p.MEDIA_ID), strings.NewReader(bodyString))
	thisLength := strconv.Itoa(len(data))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		//panic(err)
		return err
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	return nil
}
func tiedotInsertSlide(w http.ResponseWriter, r *http.Request, p TDSSLIDE) (string, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotInsertSlide() %v", ""))
	//> curl --data-ascii doc='{"a": 1, "b": 2}' "http://localhost:6060/insert?col=Feeds"
	//791206372389179361 # the new document's unique ID
	ulapphDebug(w,r, "info", fmt.Sprintf("TDSSLIDE: %#v", p))
	data, _ := json.Marshal(p)
	ulapphDebug(w,r, "info", fmt.Sprintf("data: %v", string(data)))
	//post resp status to url
	bodyString := string(data)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyString: %v", bodyString))
	req, _ := http.NewRequest("POST", SYS_TIEDOT_DB_URL+"/insert?col=TDSSLIDE", strings.NewReader(bodyString))
	thisLength := strconv.Itoa(len(data))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	docID := string(bodyBytes)
	return docID, nil
}
func tiedotUpdateSlide(w http.ResponseWriter, r *http.Request, p TDSSLIDE) (error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotUpdateSlide() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("TDSSLIDE: %#v", p))
	data, _ := json.Marshal(p)
	ulapphDebug(w,r, "info", fmt.Sprintf("data: %v", string(data)))
	//post resp status to url
	bodyString := string(data)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyString: %v", bodyString))
	req, _ := http.NewRequest("POST", fmt.Sprintf("%v/update?col=TDSSLIDE&id=%v", SYS_TIEDOT_DB_URL, p.DOC_ID), strings.NewReader(bodyString))
	thisLength := strconv.Itoa(len(data))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		//panic(err)
		return err
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	return nil
}
func tiedotDeleteSlide(w http.ResponseWriter, r *http.Request, docID int) (error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotDeleteSlide() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("TDSSLIDE: %v", docID))
	//post resp status to url
	//req, _ := http.NewRequest("POST", fmt.Sprintf("%v/delete?col=TDSSLIDE&id=%v", SYS_TIEDOT_DB_URL, docID), nil)
	req, _ := http.NewRequest("GET", fmt.Sprintf("%v/delete?col=TDSSLIDE&id=%v", SYS_TIEDOT_DB_URL, docID), nil)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		//panic(err)
		ulapphDebug(w,r, "info", fmt.Sprintf("ERROR: %v", err))
		return err
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	return nil
}
func tiedotInsertArticle(w http.ResponseWriter, r *http.Request, p TDSARTL) (string, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotInsertArticle() %v", ""))
	//> curl --data-ascii doc='{"a": 1, "b": 2}' "http://localhost:6060/insert?col=Feeds"
	//791206372389179361 # the new document's unique ID
	ulapphDebug(w,r, "info", fmt.Sprintf("TDSARTL: %#v", p))
	data, _ := json.Marshal(p)
	ulapphDebug(w,r, "info", fmt.Sprintf("data: %v", string(data)))
	//post resp status to url
	bodyString := string(data)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyString: %v", bodyString))
	req, _ := http.NewRequest("POST", SYS_TIEDOT_DB_URL+"/insert?col=TDSARTL", strings.NewReader(bodyString))
	thisLength := strconv.Itoa(len(data))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	docID := string(bodyBytes)
	return docID, nil
}
func tiedotUpdateArticle(w http.ResponseWriter, r *http.Request, p TDSARTL) (error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotUpdateArticle() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("TDSARTL: %#v", p))
	data, _ := json.Marshal(p)
	ulapphDebug(w,r, "info", fmt.Sprintf("data: %v", string(data)))
	//post resp status to url
	bodyString := string(data)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyString: %v", bodyString))
	req, _ := http.NewRequest("POST", fmt.Sprintf("%v/update?col=TDSARTL&id=%v", SYS_TIEDOT_DB_URL, p.DOC_ID), strings.NewReader(bodyString))
	thisLength := strconv.Itoa(len(data))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		//panic(err)
		return err
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	return nil
}
func tiedotDeleteArticle(w http.ResponseWriter, r *http.Request, docID int) (error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotDeleteArticle() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("TDSARTL: %v", docID))
	//req, _ := http.NewRequest("POST", fmt.Sprintf("%v/delete?col=TDSARTL&id=%v", SYS_TIEDOT_DB_URL, docID), nil)
	req, _ := http.NewRequest("GET", fmt.Sprintf("%v/delete?col=TDSARTL&id=%v", SYS_TIEDOT_DB_URL, docID), nil)
	req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		//panic(err)
		ulapphDebug(w,r, "info", fmt.Sprintf("ERROR: %v", err))
		return err
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	return nil
}
//D0098
func tiedotDeleteMedia(w http.ResponseWriter, r *http.Request, docID string) error {
	ulapphDebug(w,r, "info", fmt.Sprintf("tiedotDeleteMedia() %v", ""))
	//> curl "http://localhost:8080/delete?col=Feeds&id=791206372389179361"
	//791206372389179361 # the new document's unique ID
	ulapphDebug(w,r, "info", fmt.Sprintf("docID: %#v", docID))
	delUrl := fmt.Sprintf("%v/delete?col=TDSMEDIA&id=%v", SYS_TIEDOT_DB_URL, docID)
	req, _ := http.NewRequest("GET", delUrl, nil)
	//thisLength := strconv.Itoa(len(data))
	//req.Header.Set("Content-Length", thisLength)
	//req.Header.Set("Content-Type", "application/json")
	//r.Header.Set("Authorization", "")
	client := &http.Client{}
	_, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	//bodyBytes, _ := ioutil.ReadAll(resp.Body)
	//ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	return nil
}
//handles new uploaded media files 
func handleServeMedia(w http.ResponseWriter, r *http.Request) {
    //log.Printf("handleServeMedia()")
	ulapphDebug(w,r, "info", fmt.Sprintf("handleServeMedia() %v", ""))
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	//D0098
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true && r.FormValue("OPT") == "SWFS" {
		ulapphDebug(w,r, "info", fmt.Sprintf("handleServeMedia(): %v", r.FormValue("OPT")))
		//create collection
		err := tiedotCreateCol(w,r,"TDSMEDIA")
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotCreateCol(): %v", err))
			return
		}
		//prepare media
		ulapphDebug(w,r, "info", fmt.Sprintf("Preparing media struct: %v", ""))
        blobkey := r.FormValue("blobKey5")
        //log.Printf("blobkey: %v", blobkey)
        thisURL := r.FormValue("murl")
		TITLE := r.FormValue("TITLE")
		DATA_TYPE := r.FormValue("DATA_TYPE")
		//DOC_ID := r.FormValue("DOC_ID")
		UID := r.FormValue("UID")
		//DOC_ID2 := str2int(DOC_ID)
		PROP := r.FormValue("PROP")
		//FL_ADD_WP := r.FormValue("FL_ADD_WP")
		//FILE_NAME := r.FormValue("FILE_NAME")
		MIME_TYPE := r.FormValue("MIME_TYPE")
		//MIME_EXT := ""
		//EMBED := r.FormValue("EMBED")
		PINKEY := r.FormValue("PINKEY")
		STRUWM := r.FormValue("STRUWM")
		//D0074
		STRUWMI := r.FormValue("STRUWMI")
		//D0076
		//AUTOML := r.FormValue("AUTOML")
        OPT := r.FormValue("OPT")
        //log.Printf("OPT: %v", OPT)
		OPT2 := r.FormValue("OPT2")
		if OPT2 == "CCTV" {
			PROP = "CCTV"
		}
		DESC := r.FormValue("DESC")
		CATEGORY := r.FormValue("CATEGORY")
		FL_SHARED := r.FormValue("FL_SHARED")
		DOC_STAT := r.FormValue("DOC_STAT")
		if OPT == "CCTV" && (PINKEY != PIN_KEY) {
            //ignore
			ulapphDebug(w,r, "info", fmt.Sprintf("PINKEY & PIN_KEY did not match! %v", ""))
            //log.Printf("PINKEY & PIN_KEY did not match!")
			return
		}
		//uid := ""
		if strings.TrimSpace(STRUWM) != "" && DATA_TYPE == "image" {
			//log.Printf("Struwm checking...")
            //D0076
			//Last timestamp
			tstamp := getTimestamp()
			cKeyClu := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", CATEGORY)
			putStrToMemcacheWithExp(w,r,cKeyClu,tstamp,GEN_CONTENT_EXPIRES4)
			ulapphDebug(w,r, "info", fmt.Sprintf("cKeyClu: %v", cKeyClu))
			//last cat/camera per user
			cKeyClc := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v_%v", CATEGORY, UID)
			putStrToMemcacheWithExp(w,r,cKeyClc,tstamp,GEN_CONTENT_EXPIRES4)
			ulapphDebug(w,r, "info", fmt.Sprintf("cKeyClc: %v", cKeyClc))
			//last cat name
			cKeyCN := fmt.Sprintf("TDSMEDIA_CAT_LAST_NAME_%v", CATEGORY)
			putStrToMemcacheWithExp(w,r,cKeyCN,DESC,GEN_CONTENT_EXPIRES4)
			ulapphDebug(w,r, "info", fmt.Sprintf("cKeyCN: %v", cKeyCN))
			//Previous image
			cKey := fmt.Sprintf("STRUWM-%v-previous-image", CATEGORY)
			prevUrl := getStrMemcacheValueByKey(w,r,cKey)
			ulapphDebug(w,r, "info", fmt.Sprintf("prevUrl: %v", prevUrl))
			//D0098
			//update list of cameras
			cKeyS := fmt.Sprintf("LIST_ALL_CCTV_ACTIVE_%v", SYS_SERVER_NAME)
			//log.Printf("cKey: %v", cKey)
			cctv_list := getStrMemcacheValueByKey(w,r,cKeyS)
			ulapphDebug(w,r, "info", fmt.Sprintf("cctv_list: %v", cctv_list))
			if strings.TrimSpace(cctv_list) == "" {
				//cfgName := fmt.Sprintf("PERSONAL_CCTV_LIST_%v", uid)
				cctv_list := fmt.Sprintf("%v@888@", CATEGORY)
				//cctv_list = CATEGORY
				putStrToMemcacheWithoutExp(w,r,cKeyS,cctv_list)
			}
			SPL := strings.Split(cctv_list, "@888@")
			FL_CAT_FOUND := false
			for i:=0;i<len(SPL);i++ {
				if SPL[i]==CATEGORY {
					FL_CAT_FOUND = true
					ulapphDebug(w,r, "info", fmt.Sprintf("FL_CAT_FOUND == true: %v", ""))
					continue
				} else {
					//donothing
				}
			}
			if FL_CAT_FOUND == false {
				//append
				ulapphDebug(w,r, "info", fmt.Sprintf("FL_CAT_FOUND == false: %v", ""))
				cctvla2 := fmt.Sprintf("%v@888@%v", cctv_list, CATEGORY)
				putStrToMemcacheWithoutExp(w,r,cKeyS,cctvla2)
			}
			FL_IMAGE_CHANGED := false
			//
			FL_IMAGE_CHANGED = struwmPreviousImageCompareSwfs(w, r, prevUrl, thisURL)
			if FL_IMAGE_CHANGED ==  false {
				ulapphDebug(w,r, "info", fmt.Sprintf("FL_IMAGE_CHANGED: %v", FL_IMAGE_CHANGED))
                //log.Printf("FL_IMAGE_CHANGED = false")
                //log.Printf("blobkey: %v", blobkey)
				cKey := fmt.Sprintf("STRUWM-%v-previous-image-id", CATEGORY)
				prevDocID := getStrMemcacheValueByKey(w,r,cKey)
				ulapphDebug(w,r, "info", fmt.Sprintf("DELETED PREVIOUS IMG: %v", prevDocID))
				_ = tiedotDeleteMedia(w,r,prevDocID)
				//log.Printf("Image did not change. Deleted image. %v-%v", CATEGORY, TITLE)
				//D0074
				if STRUWMI == "Y" {
                    //log.Printf("STRUWMI...")
                    //laterUpdateCctvList(c, uid, CATEGORY)
					c, cancel := context.WithCancel(context.Background())
					defer cancel()
                    laterUpdateCctvList(c, UID, CATEGORY)
                }
				w.WriteHeader(200)
                w.Write([]byte("false"))
                //log.Printf("return")
				return
			} else {
				//D0104
				//Gorilla websockets
				if SYS_RUNTIME_PLATFORM == "local" {
					ulapphDebug(w,r, "info", "Save latest image...")
					payload := socketPayload{
						Category: CATEGORY,
						URL:  thisURL,
					}
					data, _ := json.Marshal(payload)		

					err := ioutil.WriteFile(cctvTempFile, data, 0)

					if err != nil {
						log.Fatal(err)
					}
	
					ulapphDebug(w,r, "info", fmt.Sprintf("Saved latest image: %v", data))
				}
			}
        }
		timeNow := getTimestamp()
		MEDIA_ID := ""
		MEDIA_ID2 := 0
		if PROP != "CCTV" {
			MEDIA_ID = timeNow
			MEDIA_ID2 = str2int(MEDIA_ID)
		} else {
			MEDIA_ID2 = str2int(TITLE)
		}
		p := TDSMEDIA {
				SYS_VER: 0,	
				MEDIA_ID: MEDIA_ID2,	
				//MEDIA_ID: time.Now().Unix(),
				DOC_ID: 0,	
				DATA_TYPE: DATA_TYPE,
				PROP: PROP,	
				//TITLE: TITLE,
				TITLE: DESC,
				DESC: DESC,
				AUTHOR: UID,			
				YEAR: getYear(),	
				CATEGORY: CATEGORY,	
				DOC_STAT: DOC_STAT,
				FL_SHARED: FL_SHARED,
				SHARED_TO: "",
				IMG_URL: thisURL,
				BLOB_KEY: blobkey,	
				DT_UPLOAD: str2int(timeNow),
				NUM_LIKES: 0,	
				NUM_COMMENTS: 0,	
				LIKED_BY: "",	
				COMMENTS_BY: "",
				NUM_VIEWS: 0,
				MIME_TYPE: MIME_TYPE,
		}
		//insert media
		//ulapphDebug(w,r, "info", fmt.Sprintf("INSERTING MEDIA: %#v", p))
		ulapphDebug(w,r, "info", fmt.Sprintf("INSERTING MEDIA..."))
		docID, err := tiedotInsertMedia(w,r,p)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotInsertMedia(): %v", err))
			return
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("INSERTED: tiedotInsertMedia..."))

		ulapphDebug(w,r, "info", fmt.Sprintf("UPDATING MEDIA..."))

		docIDint, _ := strconv.Atoi(docID)
		p.MEDIA_ID = docIDint
		err = tiedotUpdateMedia(w,r,p)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: tiedotUpdateMedia(): %v", err))
			return
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("UPDATED: tiedotUpdateMedia... docID: %v", p.MEDIA_ID))


		//notify clients
		data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_STRUWM_DESKTOP@888@%v@888@%v@888@%v@888@%v@888@%v", SYS_SERVER_NAME, STRUWM, thisURL, TITLE, UID)
		if SYS_NSQ_MESSAGING == true {
			err = nsqProduceMessage(w,r,data)
			if err != nil {
				ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR: nsqProduceMessage(): %v", err))
				return
			}
		} else {
			sendChannelMessage(w,r,"cctv-stream",data)
		}
		//save as previous image
		cKey := fmt.Sprintf("STRUWM-%v-previous-image", CATEGORY)
		ulapphDebug(w,r, "info", fmt.Sprintf("cKey: %v", cKey))
		putStrToMemcacheWithExp(w,r,cKey,thisURL,GEN_CONTENT_EXPIRES)
		cKeyID := fmt.Sprintf("STRUWM-%v-previous-image-id", CATEGORY)
		ulapphDebug(w,r, "info", fmt.Sprintf("cKeyID: %v", cKeyID))
		putStrToMemcacheWithExp(w,r,cKeyID,docID,GEN_CONTENT_EXPIRES)
		return
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("Appengine logic handleServeMedia() %v", ""))
        //c := appengine.NewContext(r)
        c, cancel := context.WithCancel(context.Background())
	    defer cancel()
        //D0086
        datastoreClient := createClientDS()
		//u := user.Current(c)
		UID := r.FormValue("UID")
		uid := ""
		if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
			//uid = uid
			_, uid = checkSession(w,r)
			updateUserActiveData(w, r, c, uid, "/serve-media")
		} else {
			uid = UID
        }
		if SYS_NOREG_FIXED_USER != "" {
			uid = SYS_NOREG_FIXED_USER
		}		
        //log.Printf("uid: %v", uid)
        blobkey := r.FormValue("blobKey5")
        //log.Printf("blobkey: %v", blobkey)
        thisURL := r.FormValue("murl")
		TITLE := r.FormValue("TITLE")
		DATA_TYPE := r.FormValue("DATA_TYPE")
		DOC_ID := r.FormValue("DOC_ID")
		DOC_ID2 := str2int(DOC_ID)
		PROP := r.FormValue("PROP")
		FL_ADD_WP := r.FormValue("FL_ADD_WP")
		FILE_NAME := r.FormValue("FILE_NAME")
		MIME_TYPE := r.FormValue("MIME_TYPE")
		MIME_EXT := ""
		EMBED := r.FormValue("EMBED")
		PINKEY := r.FormValue("PINKEY")
		STRUWM := r.FormValue("STRUWM")
		//D0074
		STRUWMI := r.FormValue("STRUWMI")
		//D0076
		AUTOML := r.FormValue("AUTOML")
        OPT := r.FormValue("OPT")
        //log.Printf("OPT: %v", OPT)
		DESC := r.FormValue("DESC")
		CATEGORY := r.FormValue("CATEGORY")
		FL_SHARED := r.FormValue("FL_SHARED")
		DOC_STAT := r.FormValue("DOC_STAT")
		if OPT == "CCTV" && (PINKEY != PIN_KEY) {
            //ignore
            //log.Printf("PINKEY & PIN_KEY did not match!")
			return
		}
		FL_IMAGE_CHANGED := false
		if strings.TrimSpace(STRUWM) != "" && DATA_TYPE == "image" && OPT == "CCTV" {
			ulapphDebug(w,r, "info", fmt.Sprintf("Struwm checking... %v", ""))
			//log.Printf("Struwm checking...")
            //D0076
			//
			FL_IMAGE_CHANGED = struwmPreviousImageCompare(w, r, uid, blobkey, STRUWM, AUTOML, CATEGORY, thisURL, TITLE)
			if FL_IMAGE_CHANGED ==  false {
				ulapphDebug(w,r, "info", fmt.Sprintf("FL_IMAGE_CHANGED = false %v", ""))
                //log.Printf("FL_IMAGE_CHANGED = false")
                //log.Printf("blobkey: %v", blobkey)
				err := deleteGcsObject(c, blobkey)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
				//log.Printf("Image did not change. Deleted image. %v-%v", CATEGORY, TITLE)
				//D0074
				tstamp := getTimestamp()
				cKeyClu := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", CATEGORY)
				//log.Printf("cKeyClu: %v", cKeyClu)
				//log.Printf("tstamp: %v", tstamp)
				putStrToMemcacheWithExp(w,r,cKeyClu,tstamp,GEN_CONTENT_EXPIRES4)
				//last cat/camera per user
				cKeyClc := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v_%v", CATEGORY, uid)
				putStrToMemcacheWithExp(w,r,cKeyClc,tstamp,GEN_CONTENT_EXPIRES4)
				ulapphDebug(w,r, "info", fmt.Sprintf("cKeyClc: %v", cKeyClc))
				if STRUWMI == "Y" {
                    //log.Printf("STRUWMI...")
                    //laterUpdateCctvList(c, uid, CATEGORY)
                    laterUpdateCctvList(c, uid, CATEGORY)
                }
				w.WriteHeader(200)
                w.Write([]byte("false"))
                //log.Printf("return")
				return
			}
        }
        //log.Printf("Processing media...")
		//thisURL := ""
		switch {
			case DATA_TYPE == "auto":
				if strings.Index(MIME_TYPE, "image/") != -1 {
					DATA_TYPE = "image"
				} else {
					switch {
					case MIME_TYPE != "":
                            _, MIME_EXT = getMimeType(w,r,path.Ext(FILE_NAME))
                            //log.Printf("MIME_EXT: %v", MIME_EXT)
							switch {
								case strings.Index(MIME_TYPE, "text/") != -1:
									DATA_TYPE = "text"
									thisURL = "/static/img/text-icon.gif"
								case strings.Index(MIME_TYPE, "audio/midi") != -1:
									thisURL = "/static/img/music.png"
									DATA_TYPE = "midi"
								case strings.Index(MIME_TYPE, "audio/") != -1:
									thisURL = "/static/img/music.png"
                                    DATA_TYPE = "music"
								case strings.Index(MIME_TYPE, "/ogg") != -1:
									thisURL = "/static/img/music.png"
                                    DATA_TYPE = "music"
								case strings.Index(MIME_TYPE, "/mp3") != -1:
									thisURL = "/static/img/music.png"
									DATA_TYPE = "music"
								case strings.Index(MIME_TYPE, "video/") != -1:
									thisURL = "/static/img/video.png"
                                    DATA_TYPE = "video"
								case strings.Index(MIME_TYPE, "/mp4") != -1:
									thisURL = "/static/img/video.png"
									DATA_TYPE = "video"
								default:
									DATA_TYPE = "unknown extension"
									thisURL = "/static/img/unknown.png"
							}
							if DATA_TYPE == "auto" || DATA_TYPE == "" {
								DATA_TYPE = MIME_EXT
							}
							if MIME_EXT != "" {
								thisURL = fmt.Sprintf("/static/img/files/%v-icon-128x128.png", MIME_EXT)
							} else {
								thisURL = "/static/img/file-icon.png"
							}
					case path.Ext(FILE_NAME) == "":
						switch {
							case strings.Index(MIME_TYPE, "text/") != -1:
								//DATA_TYPE = MIME_TYPE
								DATA_TYPE = "text"
								thisURL = "/static/img/text-icon.gif"
							case strings.Index(MIME_TYPE, "audio/midi") != -1:
								thisURL = "/static/img/music.png"
								//DATA_TYPE = MIME_TYPE
								DATA_TYPE = "midi"
							case strings.Index(MIME_TYPE, "audio/") != -1:
								thisURL = "/static/img/music.png"
								//DATA_TYPE = MIME_TYPE
								DATA_TYPE = "music"
							case strings.Index(MIME_TYPE, "video/") != -1:
								thisURL = "/static/img/video.png"
								//DATA_TYPE = MIME_TYPE
								DATA_TYPE = "video"
							default:
								DATA_TYPE = "unknown extension"
								thisURL = "/static/img/unknown.png"
						}
					default:
                        MIME_TYPE, MIME_EXT = getMimeType(w,r,path.Ext(FILE_NAME))
						switch {
							case strings.Index(MIME_TYPE, "image/") != -1:
								//DATA_TYPE = MIME_TYPE
								DATA_TYPE = "image"
							default:
								switch {
									case strings.Index(MIME_TYPE, "text/") != -1:
										DATA_TYPE = "text"
									case strings.Index(MIME_TYPE, "audio/midi") != -1:
										DATA_TYPE = "midi"
									case strings.Index(MIME_TYPE, "audio/") != -1:
										DATA_TYPE = "music"
									case strings.Index(MIME_TYPE, "video/") != -1:
										DATA_TYPE = "video"
									default:
										DATA_TYPE = "unknown"
								}
								if MIME_TYPE != "" {
									//DATA_TYPE = MIME_TYPE
									//thisURL = "/static/img/file-icon.png"
									if DATA_TYPE == "unknown" || DATA_TYPE == "" {
										DATA_TYPE = MIME_EXT
									}
									if MIME_EXT != "" {
										thisURL = fmt.Sprintf("/static/img/files/%v-icon-128x128.png", MIME_EXT)
									} else {
										thisURL = "/static/img/file-icon.png"
									}
								} else {
									if MIME_EXT != "" {
										thisURL = fmt.Sprintf("/static/img/files/%v-icon-128x128.png", MIME_EXT)
									} else {
										//thisURL = "/static/img/file-icon.png"
										thisURL = "/static/img/unknown.png"
									}
									//DATA_TYPE = "unknown mime-type"
									//thisURL = "/static/img/unknown.png"
								}
						}
						////
					}
				}
            case DATA_TYPE == "image":
                //log.Printf("DATA_TYPE = image")
                thisURL = mediaURL(blobkey)
				//sURL, _ := imageApi.ServingURL(c, appengine.BlobKey(blobkey), nil)
				//thisURL = sURL.String()
				//thisURL = getSchemeNewUrl(w,r,thisURL)
			case DATA_TYPE == "text":
				thisURL = "/static/img/text-icon.gif"
			case DATA_TYPE == "music":
				thisURL = "/static/img/music.png"
				//PROP = MIME_TYPE
				//DATA_TYPE = "music"
			case DATA_TYPE == "video":
				thisURL = "/static/img/video.png"
				//PROP = MIME_TYPE
			default:
				thisURL = "/static/img/unknown.png"
				PROP = "unknown"
				DATA_TYPE = "unknown"
		}

		if TITLE == "" {
			TITLE = "No title"
		}
		if DESC == "" {
			DESC = "No description"
		}
		if CATEGORY == "" {
			CATEGORY = "desktop0"
		}
		if FL_SHARED == "" {
			FL_SHARED = "Y"
		}
		if DOC_STAT == "" {
			DOC_STAT = "Personal"
		}
        //log.Printf("thisURL: %v", thisURL)
		tstamp := getTimestamp()
		tyear := getYear()
		q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID").Limit(1)
		//log.Panicf("[S0592]")
		media := make([]TDSMEDIA, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
			 panic(err)
			//return
          }
          //log.Printf("datastoreClient.Get()  [76333]")
		thisID := 0
		if FILE_NAME != "" {
			DESC = fmt.Sprintf("%v [%v]", DESC, FILE_NAME)
			TITLE = fmt.Sprintf("%v [%v]", TITLE, FILE_NAME)
		}
		NUM_LIKES := float64(0)
		NUM_COMMENTS := float64(0)
        NUM_VIEWS := float64(0)
        recCount, _  := datastoreClient.Count(c,q)
        if recCount == 0 {
            p := TDSMEDIA {
                    SYS_VER: 0,	
                    MEDIA_ID: 0,	
                    DOC_ID: 0,	
                    DATA_TYPE: "",
                    PROP: "",	
                    TITLE: "",
                    DESC: "",
                    AUTHOR: "",	
                    YEAR: "",	
                    CATEGORY: "",	
                    DOC_STAT: "",
                    FL_SHARED: "",
                    SHARED_TO: "",
                    IMG_URL: "",
                    BLOB_KEY: "",	
                    //DT_UPLOAD: "",
                    DT_UPLOAD: 0,
                    NUM_LIKES: 0,	
                    NUM_COMMENTS: 0,	
                    LIKED_BY: "",	
                    COMMENTS_BY: "",
                    NUM_VIEWS: 0,
                    MIME_TYPE: "",
            }
            media = append(media, p)
        }
		for _, p := range media{
			thisID = p.MEDIA_ID + 1
			p.SYS_VER = SYS_VERSION
			p.MEDIA_ID = thisID
			p.DOC_ID = DOC_ID2
			p.DATA_TYPE	 = DATA_TYPE
			if FL_ADD_WP == "on" && DATA_TYPE == "image" {
				FUNC_CODE := "GET_GRP_ID"
				_, GROUP_ID, _  , _ := usersProcessor(w, r, "au", uid, FUNC_CODE)
				if SYS_WALLP_ADMIN_ONLY == true && GROUP_ID == "GRP_ADMIN" {
					p.PROP = "big_wp2"
					//clear wp cache
                    putStrToMemcacheWithoutExp(w,r,fmt.Sprintf("WALLPAPERS_LIST_%v", "admin"),"")
                    putStrToMemcacheWithoutExp(w,r,fmt.Sprintf("WALLPAPERS_TOTAL_%v", uid),"")
				} else {
					p.PROP = "big_wp"
					//clear wp cache
                    putStrToMemcacheWithoutExp(w,r,fmt.Sprintf("WALLPAPERS_LIST_%v", uid),"")
                    putStrToMemcacheWithoutExp(w,r,fmt.Sprintf("WALLPAPERS_TOTAL_%v", uid),"")
				}
			} else {
				p.PROP = PROP
			}
			p.TITLE	= TITLE
			p.DESC	= DESC
			p.AUTHOR = uid	
			p.YEAR	= tyear
			p.CATEGORY	= CATEGORY	
			p.FL_SHARED	= FL_SHARED
			p.DOC_STAT = DOC_STAT
			p.IMG_URL = thisURL
			p.BLOB_KEY = blobkey	
			p.DT_UPLOAD	= str2int(tstamp)
			p.NUM_LIKES	= 0
			p.NUM_COMMENTS = 0	
			p.NUM_VIEWS = 0
			p.LIKED_BY = ""	
			p.COMMENTS_BY = ""
			p.MIME_TYPE = MIME_TYPE
			p.SHARED_TO = ""
			NUM_LIKES = float64(p.NUM_LIKES)
			NUM_COMMENTS = float64(p.NUM_COMMENTS)
			NUM_VIEWS = float64(p.NUM_VIEWS)
			thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
            key := datastore.NameKey("TDSMEDIA", thisKey, nil)
            //skip CCTV images from creating TDSMEDIA entries
            if r.FormValue("OPT") != "CCTV" {
                _, err := datastoreClient.Put(c, key, &p)
                if err != nil {
                    panic(err)
                    //return
                }
            }
            //log.Printf("datastoreClient.Put()  [76423]")
			//log.Panicf("[S0593]")
			break
		}
        //log.Printf("Insert to search idx")
		//insert media into search idx
		thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", thisID)
		thisIdxURL := fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%d&IMG_URL=%v", thisID, thisURL)
		TITLE = strings.Replace(TITLE, "_", " ", -1)
		DESC = strings.Replace(DESC, "_", " ", -1)
		thisCont := ""
		if DATA_TYPE == "text" {
			blobChan := make(chan string)
			go getBlobTextChan(w, r,blobChan, blobkey)
			thisCont = <- blobChan
		} else {
			thisCont = fmt.Sprintf("%v - %v", TITLE, DESC)
		}
		searchIdx := &IDX_TDSMEDIA{
			DOC_KEY: 			thisIdxKey,
			SEARCH_TYPE: 		"MEDIA",
			SOURCE_TYPE: 		DATA_TYPE,	
			SOURCE_TBL:  		"TDSMEDIA",	
			DESKTOP: 			CATEGORY,
			FL_SHARED:			FL_SHARED,
			DOC_STAT:			DOC_STAT,
			DOC_SCOPE_OVERALL:	"",
			DOC_SCOPE_COUNTRY:  "",
			DOC_SCOPE_REGION:  	"",
			DOC_SCOPE_CITY: 	"",
			DOC_SCOPE_BARANGAY: "",
			DOC_TITLE: 			TITLE,	
			DOC_DESC: 			DESC,
			DOC_AUTHOR:         uid,
			DOC_CONTENT_TEXT: 	thisCont,
			DOC_CONTENT_HTML: 	"",	
			DOC_CONTENT_ATOM: 	"",	
			DOC_NUM_LIKES:		NUM_LIKES,		
			DOC_NUM_COMMENTS:	NUM_COMMENTS,
			DOC_NUM_VIEWS:		NUM_VIEWS,
			CONTENT_URL: 		thisIdxURL,
			IMG_URL: 			thisURL,
			DATE_ADDED: 		tstamp,
			DATE_UPDATED: 		tstamp,
        }
        
		putSearchIndexM(w,r,"IDX_TDSMEDIA",thisIdxKey,searchIdx)
		nStat := ""
		nMediaID := 0
		if strings.TrimSpace(EMBED) == "" {
			cKeyAll := fmt.Sprintf("DEFAULT_SLIDE_CACHE_%v", uid)
            DEFAULT_SLIDE_CACHE := ""
            DEFAULT_SLIDE_CACHE = getStrMemcacheValueByKey(w,r,cKeyAll)
            if DEFAULT_SLIDE_CACHE != "" {
				nMediaID = str2int(DEFAULT_SLIDE_CACHE)
				if nMediaID > 0 {
					nStat = "OK"
				} else {
					DEFAULT_SLIDE_CACHE = ""
				}
			}
			if strings.TrimSpace(DEFAULT_SLIDE_CACHE) == "" {
				//query TDSCNFG			
				cfgName := fmt.Sprintf("PERSONAL_Default_Slide_Media_ID_%v", uid)
				_, nMediaID = getTDSCNFG(w,r,1,cfgName)
				if nMediaID <= 0 {
					nStat = "NOT FOUND"
					cKey := fmt.Sprintf("DEFAULT_SLIDE_CACHE_%v", uid)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
				} else {
					nStat = "OK"
				}
			}
        }
        //log.Printf("EMBED checking")
		//if EMBED is populated; add image to target slide
		if strings.TrimSpace(EMBED) != "" && DATA_TYPE == "image" {
            time.AfterFunc(5*time.Second, func() {
                laterAddToDefaultSid(c, "ATS-IMAGE", uid, EMBED, DATA_TYPE, thisURL, TITLE)
            })
		} else {
			if nStat == "OK" && nMediaID > 0 {
				//send to default slide
				EMBED := fmt.Sprintf("TDSSLIDE-%v", nMediaID)
                TITLE := thisIdxKey
                time.AfterFunc(5*time.Second, func() {
                    laterAddToDefaultSid(c, "ATS-IMAGE", uid, EMBED, DATA_TYPE, thisURL, TITLE)
                })
			}
		}
        //D0066
        //log.Printf("STRUWM checking")
		//if stream mirror images to uwm?
		if strings.TrimSpace(STRUWM) != "" && DATA_TYPE == "image" && FL_IMAGE_CHANGED == true {
			ulapphDebug(w,r, "info", fmt.Sprintf("if stream mirror images to uwm... %v", ""))
            //laterMirrorStreamUwm(c, "STRUWM-IMAGE", uid, STRUWM, DATA_TYPE, thisURL, TITLE, CATEGORY)
			struwmStreamMirrorToUwm(w, r, uid, STRUWM, CATEGORY, thisURL, TITLE)
			//D0071
			//check this image against the previous image (cctv feature usage)
			//MEDIA_ID := fmt.Sprintf("%v", thisID)
			//laterMirrorStreamPreviousCompare(c, "STRUWM-COMPARE", uid, STRUWM, thisURL, TITLE, CATEGORY, blobkey, MEDIA_ID)
			tstamp := getTimestamp()
			cKeyClu := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", CATEGORY)
			//log.Printf("cKeyClu: %v", cKeyClu)
			//log.Printf("tstamp: %v", tstamp)
			putStrToMemcacheWithExp(w,r,cKeyClu,tstamp,GEN_CONTENT_EXPIRES4)
			//last cat/camera per user
			cKeyClc := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v_%v", CATEGORY, uid)
			putStrToMemcacheWithExp(w,r,cKeyClc,tstamp,GEN_CONTENT_EXPIRES4)
			ulapphDebug(w,r, "info", fmt.Sprintf("cKeyClc: %v", cKeyClc))
			//D0074
			if STRUWMI == "Y" {
				//log.Printf("STRUWMI...")
                //laterUpdateCctvList(c, uid, CATEGORY)
                laterUpdateCctvList(c, uid, CATEGORY)
			}
		}
		//abort if target is encrypted
		if isEncrypted(w,r,EMBED) == true {
			panic(fmt.Errorf("cannot append to encrypted file..."))
			//return
        }
        //log.Printf("Send link to desktop")
		ulapphDebug(w,r, "info", fmt.Sprintf("Send link to desktop %v", ""))
		//send a link to desktop
		//contentMsg := fmt.Sprintf("TDSMEDIA-%d <br><img src=\"%v\" width=200 height=200> <br><a href=\"%v\">%v</a>", thisID, thisURL, thisURL, thisURL)
		contentMsg := fmt.Sprintf("%v<br><img src=\"%v\" width=200 height=200> <br><a href=\"%v\" target=\"dLink\">%v</a>", TITLE, thisURL, thisURL, thisURL)
		//sendEvent(w,r,uid,contentMsg)
		//when a media uploaded
		sendChannelMessage(w,r,uid,contentMsg)
		if DATA_TYPE == "image" {
			cKey := fmt.Sprintf("PHOTO_ALBUM_%s",  uid)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
		}
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")

		//log.Printf("OPT: %v", OPT)
		if OPT == "OpenScreenshots" {
			w.WriteHeader(200)
			w.Write([]byte(thisURL))
		} else if (FL_IMAGE_CHANGED == true) {
			w.WriteHeader(200)
			w.Write([]byte("recapture"))
		} else {
			sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d&IMG_URL=%v", thisID, thisURL)
			http.Redirect(w, r, sysReq, http.StatusFound)
		}
		return
}
//gets the mimetype given a file extension 
func getMimeType(w http.ResponseWriter, r *http.Request, ext string) (F_MIME_TYPE, F_MIME_EXT string) {
    //log.Printf("getMimeType()")
	//c := appengine.NewContext(r)
	//_, uid := checkSession(w,r)
	extF := strings.Replace(ext, ".", "", -1)
	//get cache of common extension/mime types
	cKey1 := fmt.Sprintf("MIME_TYPE_NAME_%v", extF)
	cKey2 := fmt.Sprintf("MIME_TYPE_EXT_%v", extF)
	MIME_TYPE_NAME := ""
	MIME_TYPE_NAME = getStrMemcacheValueByKey(w,r,cKey1)
	MIME_TYPE_EXT := ""
	MIME_TYPE_EXT = getStrMemcacheValueByKey(w,r,cKey2)
	if MIME_TYPE_NAME != "" && MIME_TYPE_EXT != "" {
		return MIME_TYPE_NAME, MIME_TYPE_EXT
	}
	//if no cache yet for this extension
	cKey := fmt.Sprintf("MIME_TYPES_LIST")
	MIME_TYPES_LIST := []byte("")
	MIME_TYPES_LIST = getBytMemcacheValueByKey(w,r,cKey)
	if MIME_TYPES_LIST == nil {
		//client := urlfetch.Client(c)
		if err := r.ParseForm(); err != nil {
			panic(err)
		}
		//log.Printf("MIME_TYPES_LIST_URL: %v", MIME_TYPES_LIST_URL)
		//bodyString := fetchURL(w,r,MIME_TYPES_LIST_URL)
        //MIME_TYPES_LIST = bodyString
        bodyBytes := readDefaultMenu(w,r,"golang-mime-types.txt")
		if bodyBytes != nil {
			cKey := fmt.Sprintf("MIME_TYPES_LIST")
			putBytesToMemcacheWithoutExp(w,r,cKey,bodyBytes)
		} else {
			cKey := fmt.Sprintf("MIME_TYPES_LIST")
			putBytesToMemcacheWithoutExp(w,r,cKey,nil)
		}
	}
	if MIME_TYPES_LIST != nil {
		tempArr := strings.Split(string(MIME_TYPES_LIST),"\n")
		F_MIME_EXT = strings.ToLower(extF)
		if len(tempArr) > 0 {
			for j := 0; j < len(tempArr); j++ {
				i := strings.Index(strings.ToLower(tempArr[j]), strings.ToLower(extF))
				if i != -1 {
					//templ := strings.Split(tempArr[j]," ")
					words := strings.Fields(tempArr[j])
					//double-check
					for k := 0; k < len(words); k++ {
						if strings.ToLower(words[k]) == strings.ToLower(extF) {
							F_MIME_TYPE = words[0]
							break
						}
					}
				}
			}
		}
	} else {
		redURL := fmt.Sprintf("/media?FUNC_CODE=SET_MULTI_IMAGE_UPLOAD")
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	//cache this
	putStrToMemcacheWithoutExp(w,r,cKey1,F_MIME_TYPE)
	putStrToMemcacheWithoutExp(w,r,cKey2,F_MIME_EXT)
	return F_MIME_TYPE, F_MIME_EXT
}
//handles ads uploads 
func handleUploadAds(w http.ResponseWriter, r *http.Request) {
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
        //c := appengine.NewContext(r)
        _, uid := checkSession(w,r)
        if uid == "" && r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
            uid = r.Header.Get("X-Goog-Authenticated-User-Email")
        }
        gcsObjectUrl := ""
        gcsMediaUrl := ""
        IS_FILE_OK := true
        r.ParseMultipartForm(32 << 20)
        file, _, err := r.FormFile("file")
        if err != nil {
            IS_FILE_OK = false
        }
        if IS_FILE_OK == true {
            defer file.Close()
            data, err := ioutil.ReadAll(file)
            if err != nil {
                IS_FILE_OK = false
            }
            //if string(data) != "" && IS_FILE_OK == true {
            if IS_FILE_OK == true {
                //text = string(data)
                //fileName = handler.Filename+".txt"
                //D0086
                //save to GCS
                ctx := context.Background()
                inpData := strings.NewReader(string(data))
                public := false
                UUID := generateUUID(w,r,uid,"TDSMEDIA")
                //log.Printf("UUID: %v", UUID)
                //_, objAttrs, err := uploadGcsObject(ctx, inpData, UUID, public)
                _, _, err := uploadGcsObject(ctx, inpData, UUID, public)
                if err != nil {
                    switch err {
                    case storage.ErrBucketNotExist:
                        log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
                    default:
                        log.Fatalf("ERROR: %v", err)
                    }
                }

                //log.Printf("URL: %s", objectURL(objAttrs))
                //log.Printf("MediaURL: %s", objAttrs.MediaLink)
                //log.Printf("Size: %d", objAttrs.Size)
                //log.Printf("MD5: %x", objAttrs.MD5)
                //log.Printf("objAttrs: %+v", objAttrs)
                //log.Printf("UUID: %v", UUID)
                //save object url
                //gcsObjectUrl = objectURL(objAttrs)
                gcsObjectUrl = UUID
                gcsMediaUrl = mediaURL(UUID)
            }
        } else {
            log.Fatalf("Error uploading media.")
        }
		ADS_TITLE := r.FormValue("ADS_TITLE")
		URL_ADD_P :=  fmt.Sprintf("%v", r.FormValue("URL_ADD"))
		//encode URL_ADD to string
		URL_ADD := strings.Replace(URL_ADD_P, "&", "@888@", -1)
		DESKTOP := r.FormValue("DESKTOP")
		reqStr := fmt.Sprintf("/serve-ads/?DESKTOP=%s&ADS_TITLE=%s&URL_ADD=%s&blobKey2=%v&murl=%v", DESKTOP, ADS_TITLE, URL_ADD, gcsObjectUrl, gcsMediaUrl)
		http.Redirect(w, r, reqStr, http.StatusFound)
		return
}

//handles slides uploads 
func handleUploadSlides(w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
		//D0098
		//seaweedfs storage
		_, uid := checkSession(w,r)
		ulapphDebug(w,r, "info", fmt.Sprintf("handleUploadSlides() %v", ""))
		ulapphDebug(w,r, "info", fmt.Sprintf("uid: %v", uid))
		//if this upload pertains to an existing blob
		BLOB_KEY := r.FormValue("BLOB_KEY")
		SID := r.FormValue("SID")
		ulapphDebug(w,r, "info", fmt.Sprintf("BLOB_KEY: %v", BLOB_KEY))
		ulapphDebug(w,r, "info", fmt.Sprintf("SID: %v", SID))
		gsf := new(SeaweedFid)
		if SID == "SWFSBLOB" {
			SPL := strings.Split(BLOB_KEY, "/")
			fidID := SPL[3]
			gsf.Count = 1
			gsf.Fid = fidID
			gsf.Url = fmt.Sprintf("%v:7070", SYS_FIXED_IP_ADDRESS)
			gsf.PublicUrl = "localhost:8080"
			ulapphDebug(w,r, "info", fmt.Sprintf("gsf: %v", gsf))

		} else {
			//get the seaweed server url
			gsf = getSeaweedFid(w,r)
			ulapphDebug(w,r, "info", fmt.Sprintf("gsf: %v", gsf))
		}
		//{"count":1,"fid":"3,01637037d6","url":"127.0.0.1:8080","publicUrl":"localhost:8080"}
		if gsf.Url != "" {
			//post to url
			ssd, err := putSeaweedStorage(w,r,uid,"TDSSLIDE",gsf)
			if err != nil {
				ulapphDebug(w,r, "info", fmt.Sprintf("ERROR uploading to SWFS: %v", err))
			}
			//serve media
			gsfStoreUrl := fmt.Sprintf("http://%v/%v", gsf.PublicUrl, gsf.Fid)
			ulapphDebug(w,r, "info", fmt.Sprintf("gsfStoreUrl: %v", gsfStoreUrl))
			err = serveSeaweedSlide(w,r,uid,gsf.Fid,ssd.Name,gsfStoreUrl)
			if err != nil {
				ulapphDebug(w,r, "critical", fmt.Sprintf("ERROR serveSeaweedSlide(): %v", err))
			}
		} else {
			ulapphDebug(w,r, "ERROR", fmt.Sprintf("ERROR getting FID URL %v", ""))
		}
		return
	}
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//u := user.Current(c)
	//uid := uid
	_, uid := checkSession(w,r)
	if uid == "" && r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		uid = r.Header.Get("X-Goog-Authenticated-User-Email")
	}
	checkQuotaSlides(w,r,uid)
    defer func() { //catch or finally
        if err := recover(); err != nil { //catch
            fmt.Fprintf(os.Stderr, "Exception: %v\n", err)
			//send panic message in desktop
			geoStr := getGeoString(w,r)
			contentMsg := fmt.Sprintf("[ULAPPH] ERROR in handleUploadSlides(): %v >>> %v from %v", uid, getSchemeUrl(w,r), geoStr)
			time.AfterFunc(5*time.Second, func() {
                laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, contentMsg, uid)
            })
            os.Exit(1)
        }
    }()
        gcsObjectUrl := ""
        //gcsMediaUrl := ""
	    IS_FILE_OK := true
	    r.ParseMultipartForm(32 << 20)
	    file, _, err := r.FormFile("file")
	    if err != nil {
		IS_FILE_OK = false
	    }
	    if IS_FILE_OK == true {
		defer file.Close()
		data, err := ioutil.ReadAll(file)
		if err != nil {
		    IS_FILE_OK = false
		}
		if string(data) != "" && IS_FILE_OK == true {
		    //save to GCS
		    ctx := context.Background()
		    inpData := strings.NewReader(string(data))
		    public := false
		    UUID := generateUUID(w,r,uid,"TDSSLIDE")
		    //_, objAttrs, err := uploadGcsObject(ctx, inpData, UUID, public)
            _, _, err := uploadGcsObject(ctx, inpData, UUID, public)
            if err != nil {
                switch err {
                case storage.ErrBucketNotExist:
                    log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
                default:
                    log.Fatalf("ERROR: %v", err)
                }
		    }

            //log.Printf("URL: %s", objectURL(objAttrs))
            //log.Printf("MediaURL: %s", objAttrs.MediaLink)
		    //log.Printf("Size: %d", objAttrs.Size)
		    //log.Printf("MD5: %x", objAttrs.MD5)
		    //log.Printf("objAttrs: %+v", objAttrs)
		    //log.Printf("UUID: %v", UUID)
		    //save object url
		    //gcsObjectUrl = objectURL(objAttrs)
            gcsObjectUrl = UUID
            //gcsMediaUrl = mediaURL(UUID)
            //log.Printf("gcsMediaUrl: %v", gcsMediaUrl)
		} else {
		    log.Fatalf("Please check file. It's either empty or error in uploading.")
		}
	    } else {
		log.Fatalf("Error uploading slides.")
	    }
	//FUNC_CODE_R := fmt.Sprintf("%v", pVals["FUNC_CODE"])
	//FUNC_CODE_R2 := strings.Replace(FUNC_CODE_R, "[", "", -1)
	//FUNC_CODE := strings.Replace(FUNC_CODE_R2, "]", "", -1)
	FUNC_CODE := r.FormValue("FUNC_CODE")
	switch FUNC_CODE {

		//for slides
		case "UPD-FROM-EDITOR":
			//DESKTOP := pVals["DESKTOP"]
			//blobkey := string(file[0].BlobKey)
			blobkey := gcsObjectUrl
			SID := r.FormValue("SID")
			UID := r.FormValue("UID")
			if uid == "" {
				uid = UID
			}
			DOC_ID := 0
			SPL := strings.Split(SID,"-")
			FL_SUCCESS := false
			if len(SPL) > 1 {
				//TARGET := SPL[0]
				DOC_nn := SPL[1]
				DOC_ID = str2int(DOC_nn)
				dsKey := fmt.Sprintf("%d", DOC_ID)
				key := datastore.NameKey("TDSSLIDE", dsKey, nil)
				q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
				//log.Panicf("[S0595]")
				slide := make([]TDSSLIDE, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
					 panic(err)
					//return
                  }
                  //log.Printf("datastoreClient.Get()  [76841]")
				thisID := 0
				for _, p := range slide{
					oldBlob := p.BLOB_URL
					p.BLOB_URL = blobkey
					//copy existing fields
					TITLE := p.TITLE
					FL_SHARED := p.FL_SHARED
					DOC_STAT := p.DOC_STAT
					TAGS := ""
					if p.TAGS == "/static/img/NoImageAvailable.png" {
						thisImgUrl := getBlobTextFirstImageUrl(w,r,blobkey)
						if thisImgUrl != "" {
							TAGS = thisImgUrl
							p.TAGS = thisImgUrl
						} else {
							TAGS = p.TAGS
						}
					}
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					tstamp := getTimestamp()
					p.DT_UPLOAD = str2int(tstamp) 
					cKeyClu := fmt.Sprintf("TDSSLIDE_CAT_LAST_UPLOAD_%v", p.CATEGORY)
					//log.Printf("cKeyClu: %v", cKeyClu)
					//log.Printf("tstamp: %v", tstamp)
					putStrToMemcacheWithoutExp(w,r,cKeyClu,tstamp)
					FL_COUNTRY_SPECIFIC := p.FL_COUNTRY_SPECIFIC
					thisID = p.DOC_ID
					thisKey := fmt.Sprintf("%d", p.DOC_ID)
					key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [76873]")
					if err != nil {
						 panic(err)
						//return
					}
					//log.Panicf("[S0596]")
					//delete old blob
					//blobstore.Delete(c, appengine.BlobKey(oldBlob))
				        err = deleteGcsObject(c, oldBlob)
				        if err != nil {
						log.Fatalf("ERROR: deleteGcsObject() %v", err)
				        }
					//clear caches
					SLIDES_CACHE_KEY := fmt.Sprintf("SLIDES_CACHE_%v", oldBlob)
					memcacheDelete(w,r,SLIDES_CACHE_KEY)
					ARTICLES_CACHE_KEY := fmt.Sprintf("ARTICLES_CACHE_%v", oldBlob)
					memcacheDelete(w,r,ARTICLES_CACHE_KEY)
					//clear uloc cache
					cKey := fmt.Sprintf("CACHE_ULOC_TDSSLIDE_%v", thisID)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear template cache if any
					cKey = fmt.Sprintf("GO_TEMPLATE_TDSSLIDE-%v", thisID)
					memcacheDelete(w,r,cKey)
					clearCachedSlideWebContents(w,r)
					//update cached details
					if uid == "" && UID != "" {
						uid = UID
					}
					if uid == "" {
						uid = p.AUTHOR
					}
					TDSSLIDE_Cacher(w,r,uid,thisID,blobkey,DOC_STAT,FL_SHARED,p.AUTHOR,FL_COUNTRY_SPECIFIC,TITLE,TAGS,p.SHARED_TO,p.MUSIC_ID,p.GET_NEXT)
					//fmt.Fprintf(w, "Updated SID: %v BLOBKEY: %v.", SID, blobkey)
					FL_SUCCESS = true
					go sendBroadcastsUpdSlide(w,r,uid,DOC_STAT, SID, TITLE, p.DESC, TAGS, p.CATEGORY)
					//update slide in existing search idx
					thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", thisID)
					thisIdxURL := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", thisID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
					//use go routine
					TITLE2 := strings.Replace(TITLE, "_", " ", -1)
					DESC2 := strings.Replace(p.DESC, "_", " ", -1)
					slideIdx := &IDX_TDSSLIDE{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"SLIDES",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSSLIDE",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			FL_SHARED,
						DOC_STAT:			DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE2,	
						DOC_DESC: 			DESC2,
						DOC_AUTHOR:         p.AUTHOR,					
						//DOC_CONTENT_TEXT: 	blobText,
                        DOC_CONTENT_TEXT: 	"",
                        DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),						
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			TAGS,
						//DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
                    }
                    
					putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
					//redURL := fmt.Sprintf("/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%v&SID=TDSSLIDE-%v", thisID, thisID)
					redURL := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", thisID, p.TITLE, p.BLOB_URL, p.CATEGORY)
					fmt.Fprintf(w, "%v", redURL)
					break
				}
			} else {
				TITLE := r.FormValue("TITLE")
				if TITLE == "" {
					TITLE = "No title"
				}
				DESC := r.FormValue("DESC")
				CATEGORY := r.FormValue("CATEGORY")
				if CATEGORY == "" {
					CATEGORY = "desktop0"
				}
				q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(1)
				//log.Panicf("[S0597]")
				slide := make([]TDSSLIDE, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
					 //panic(err)
                    //return
                    //log.Printf("ERROR: %v", err)
                }
                //log.Printf("datastoreClient.Get()  [76967]")
                thisID := 0
                recCount, _  := datastoreClient.Count(c,q)
                if recCount == 0 {
                    p := TDSSLIDE {
                        FL_COUNTRY_SPECIFIC: "",
                        SYS_VER: 0,
                        DOC_ID: 1,
                        DOC_STAT: "",
                        TITLE: "",
                        DESC: "",
                        AUTHOR: "",
                        YEAR: "",
                        CATEGORY: "",
                        TAGS: "",
                        FL_SHARED: "",
                        SHARED_TO: "",
                        BLOB_URL: "",
                        //DT_UPLOAD: "",
                        DT_UPLOAD: 0,
                        NUM_LIKES: 0,
                        NUM_COMMENTS: 0,
                        LIKED_BY: "",
                        COMMENTS_BY: "",
                        NUM_VIEWS: int64(0),
                        MUSIC_ID: 0,
                        GET_NEXT: "",
                    }
                    slide = append(slide, p)
                }
				for _, p := range slide{
					thisID = p.DOC_ID + 1
					p.SYS_VER = SYS_VERSION
					p.DOC_ID = thisID
					p.BLOB_URL = blobkey
					//copy existing fields
					p.TITLE = TITLE
					p.DESC = DESC
					p.FL_SHARED = "N"
					p.DOC_STAT = "Personal"
					//p.TAGS = "/static/img/NoImageAvailable.png"
					thisImgUrl := getBlobTextFirstImageUrl(w,r,blobkey)
					if thisImgUrl != "" {
						p.TAGS = thisImgUrl
					} else {
						p.TAGS = "/static/img/NoImageAvailable.png"
					}
					p.FL_COUNTRY_SPECIFIC = ""
					p.AUTHOR = uid
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					tstamp := getTimestamp()
					//fmt.Fprintf(w, "tstamp: %v<br>", tstamp)
					//tyear := t.Format("2006")
					tyear := getYear()
					p.YEAR = tyear
					//p.CATEGORY = "desktop0"
					p.CATEGORY = CATEGORY
					p.DT_UPLOAD = str2int(tstamp) 
					p.NUM_LIKES = 0
					p.NUM_COMMENTS = 0
					p.NUM_VIEWS = 0
					p.LIKED_BY = ""
					p.COMMENTS_BY = ""
					p.SHARED_TO = ""
					p.MUSIC_ID = 0
					thisKey := fmt.Sprintf("%d", thisID)
					key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [77035]")
					if err != nil {
						 panic(err)
						//return
					}
					//log.Panicf("[S0598]")
					//clear autocomps
					cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
					putStrToMemcacheWithoutExp(w,r,cKeyAll,"")

					clearCachedSlideWebContents(w,r)
					FL_SUCCESS = true
					//update cached details
					TDSSLIDE_Cacher(w,r,uid,thisID,blobkey,p.DOC_STAT,p.FL_SHARED,uid,p.FL_COUNTRY_SPECIFIC,p.TITLE,p.TAGS,"",0,"")
					go sendBroadcastsUpdSlide(w,r,uid,p.DOC_STAT, fmt.Sprintf("TDSSLIDE-%v", thisID), p.TITLE, DESC, p.TAGS, p.CATEGORY)
					//update slide in existing search idx
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", thisID)
					thisIdxURL := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", thisID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
					TITLE2 := strings.Replace(TITLE, "_", " ", -1)
					DESC2 := strings.Replace(p.DESC, "_", " ", -1)
					slideIdx := &IDX_TDSSLIDE{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"SLIDES",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSSLIDE",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			p.FL_SHARED,
						DOC_STAT:			p.DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE2,	
						DOC_DESC: 			DESC2,
						DOC_AUTHOR:         p.AUTHOR,					
						//DOC_CONTENT_TEXT: 	blobText,
                        DOC_CONTENT_TEXT: 	"",
                        DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			p.TAGS,
						//DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
                    }
                    
					putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
					redURL := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", thisID, p.TITLE, p.BLOB_URL, p.CATEGORY)
					fmt.Fprintf(w, "%v", redURL)
					break
				}
			}
			//D0106
			//For each URL, add to ICONS DB
			//time.AfterFunc(5*time.Second, func() {
				//laterAddIconsToDB(w, r, uid, blobkey)
			//}) 
			if FL_SUCCESS == false {
				msgDtl := fmt.Sprintf("[U00174] ERROR: Problem with inserting or updating content. Consult system administrator.")
				msgTyp := "error"
				msgURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=")
				action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		case "UPDATE":
			//update slides 
			//blobkey := string(file[0].BlobKey)
			blobkey := gcsObjectUrl
			TITLE := r.FormValue("TITLE")
			DESC := r.FormValue("DESC")
			DOC_ID2 := r.FormValue("DOC_ID")
			DOC_ID := str2int(DOC_ID2)
			MUSIC_ID2 := r.FormValue("MUSIC_ID")
			MUSIC_ID := str2int(MUSIC_ID2)
			GET_NEXT := r.FormValue("GET_NEXT")
			CATEGORY := r.FormValue("CATEGORY")
			TAGS := r.FormValue("TAGS")
			if TAGS == "" {
				TAGS = "/static/img/NoImageAvailable.png"
			}
			DOC_STAT := r.FormValue("DOC_STAT")
			FL_SHARED := r.FormValue("FL_SHARED")
			FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC_R2")
			dsKey := fmt.Sprintf("%d", DOC_ID)
			key := datastore.NameKey("TDSSLIDE", dsKey, nil)
			q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)	
			//log.Panicf("[S0599]")
			slide := make([]TDSSLIDE, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
				 panic(err)
				//return
              }
              //log.Printf("datastoreClient.Get()  [77129]")
			thisID := 0
			thisAuthor := ""
			//SYS_VER := 0
			NUM_LIKES := float64(0)
			NUM_COMMENTS := float64(0)
			NUM_VIEWS := float64(0)
			for _, p := range slide{
				oldBlob := p.BLOB_URL
				p.TITLE	= TITLE
				p.DESC	= DESC
				p.CATEGORY	= CATEGORY	
				p.FL_SHARED	= FL_SHARED
				p.DOC_STAT	= DOC_STAT
				p.TAGS	= TAGS
				p.BLOB_URL = blobkey
				p.FL_COUNTRY_SPECIFIC = FL_COUNTRY_SPECIFIC
				if MUSIC_ID > 0 {
					p.MUSIC_ID = MUSIC_ID
				}
				NUM_LIKES = float64(p.NUM_LIKES)
				NUM_COMMENTS = float64(p.NUM_COMMENTS)
				NUM_VIEWS = float64(p.NUM_VIEWS)
				//t := time.Now().Local()
				//tstamp := t.Format("20060102150405")
				tstamp := getTimestamp()
				p.DT_UPLOAD = str2int(tstamp) 
				//SYS_VER := p.SYS_VER
				thisID = p.DOC_ID
				thisAuthor = p.AUTHOR
				thisKey := fmt.Sprintf("%d", p.DOC_ID)
				key := datastore.NameKey("TDSSLIDE", thisKey, nil)
                _, err := datastoreClient.Put(c, key, &p)
                //log.Printf("datastoreClient.Put()  [77162]")
				if err != nil {
					 panic(err)
					//return
				}
				//log.Panicf("[S0600]")
				//delete old blob
				//blobstore.Delete(c, appengine.BlobKey(oldBlob))
				err = deleteGcsObject(c, oldBlob)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
				//update cached details
				TDSSLIDE_Cacher(w,r,uid,thisID,blobkey,DOC_STAT,FL_SHARED,uid,FL_COUNTRY_SPECIFIC,TITLE,TAGS,"",p.MUSIC_ID,GET_NEXT)	
				break
			}
			if CATEGORY == "ULAPPH" {
				cKey := fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ULAPPH_HELP")
				putStrToMemcacheWithoutExp(w,r,cKey,"")
			}
			cKey := fmt.Sprintf("IDB_SLEEP_VIEW_SLIDES_ALL")
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//clear cache contentsAll
			cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v", CATEGORY)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//cache contentsAll home
			cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES")
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//cache contentsAll desktop0
			cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_%v_%v", "desktop0", uid)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//clear contentsAll all recent
			cKey = fmt.Sprintf("CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT")
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//clear slides count for desktop
			cKey = fmt.Sprintf("TDSSLIDE_TOTAL_%v", CATEGORY)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//clear slides count for overall
			cKey = fmt.Sprintf("TDSSLIDE_TOTAL")
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//clear uloc cache
			cKey = fmt.Sprintf("CACHE_ULOC_TDSSLIDE_%v", DOC_ID)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//update slide in existing search idx
			tstamp := getTimestamp()
			thisIdxKey := fmt.Sprintf("TDSSLIDE-%d", thisID)
			thisIdxURL := fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&MODE=NORMAL&PARM=LOOP&SECS=8&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", thisID, thisIdxKey, CATEGORY, MUSIC_ID)
			TITLE2 := strings.Replace(TITLE, "_", " ", -1)
			DESC2 := strings.Replace(DESC, "_", " ", -1)
			slideIdx := &IDX_TDSSLIDE{
				DOC_KEY: 			thisIdxKey,
				SEARCH_TYPE: 		"SLIDES",
				SOURCE_TYPE: 		"ULAPPH",	
				SOURCE_TBL:  		"TDSSLIDE",	
				DESKTOP: 			CATEGORY,
				FL_SHARED:			FL_SHARED,
				DOC_STAT:			DOC_STAT,
				DOC_SCOPE_OVERALL:	"",
				DOC_SCOPE_COUNTRY:  "",
				DOC_SCOPE_REGION:  	"",
				DOC_SCOPE_CITY: 	"",
				DOC_SCOPE_BARANGAY: "",
				DOC_TITLE: 			TITLE2,	
				DOC_DESC: 			DESC2,
				DOC_AUTHOR:         thisAuthor,					
				//DOC_CONTENT_TEXT: 	blobText,
                DOC_CONTENT_TEXT: 	"",
                DOC_CONTENT_HTML: 	"",	
				DOC_CONTENT_ATOM: 	"",	
				DOC_NUM_LIKES:		NUM_LIKES,		
				DOC_NUM_COMMENTS:	NUM_COMMENTS,
				DOC_NUM_VIEWS:		NUM_VIEWS,	
				CONTENT_URL: 		thisIdxURL,
				IMG_URL: 			TAGS,
				//DATE_ADDED: 		tstamp,
				DATE_UPDATED: 		tstamp,
			}
            
			putSearchIndexS(w,r,"IDX_TDSSLIDE",thisIdxKey,slideIdx)
			sysReq := fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, TITLE, blobkey, CATEGORY)	
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		default:
			TITLE := r.FormValue("TITLE")
			DESC := r.FormValue("DESC")
			CATEGORY := r.FormValue("CATEGORY")
			//bKey := string(file[0].BlobKey)
			bKey := gcsObjectUrl
			reqStr := fmt.Sprintf("/serve-slides/?TITLE=%s&DESC=%s&CATEGORY=%s&blobKey4=%v", TITLE, DESC, CATEGORY, bKey)
			http.Redirect(w, r, reqStr, http.StatusFound)
			return
	}
}
//clear cached contents for slides
func clearCachedSlideWebContents(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	//memcache := cache.New(cache.DefaultExpiration, 0)
    //memcacheDelete(w,r,"CACHE_TDSSLIDE_NUM_LIKES")
	memcacheDelete(w,r,"CACHE_TDSSLIDE_LATEST")
	memcacheDelete(w,r,"CACHE_SLIDES_CONTENTS_ALL_TILES_RECENT")
	//memcacheDelete(w,r,"CACHE_SLIDES_CONTENTS_PINNED")
	memcacheDelete(w,r,"CACHE_SLIDES_CONTENTS_ALL_TILES")
}

//clear cached contents for articles
func clearCachedArticleWebContents(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	//memcacheDelete(w,r,"CACHE_TDSARTL_NUM_LIKES")
	memcacheDelete(w,r,"CACHE_TDSARTL_LATEST")
	memcacheDelete(w,r,"CACHE_ARTICLES_CONTENTS_ALL_TILES_RECENT")
	//memcacheDelete(w,r,"CACHE_ARTICLES_CONTENTS_PINNED")
	memcacheDelete(w,r,"CACHE_ARTICLES_CONTENTS_ALL_TILES")	
}

//handles upload of articles 
func handleUploadArticles(w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
		//D0098
		//seaweedfs storage
		_, uid := checkSession(w,r)
		ulapphDebug(w,r, "info", fmt.Sprintf("handleUploadMedia() %v", ""))
		ulapphDebug(w,r, "info", fmt.Sprintf("uid: %v", uid))
		//get the seaweed server url
		gsf := getSeaweedFid(w,r)
		//{"count":1,"fid":"3,01637037d6","url":"127.0.0.1:8080","publicUrl":"localhost:8080"}
		if gsf.Url != "" {
			//post to url
			ssd, err := putSeaweedStorage(w,r,uid,"TDSARTL",gsf)
			if err != nil {
				ulapphDebug(w,r, "info", fmt.Sprintf("ERROR uploading to SWFS: %v", err))
			}
			//serve media
			gsfStoreUrl := fmt.Sprintf("http://%v/%v", gsf.PublicUrl, gsf.Fid)
			ulapphDebug(w,r, "info", fmt.Sprintf("gsfStoreUrl: %v", gsfStoreUrl))
			err = serveSeaweedArticle(w,r,uid,gsf.Fid,ssd.Name,gsfStoreUrl)
			if err != nil {
				ulapphDebug(w,r, "info", fmt.Sprintf("ERROR serveSeaweedArticle(): %v", err))
			}
		} else {
			ulapphDebug(w,r, "ERROR", fmt.Sprintf("ERROR getting FID URL %v", ""))
		}
		return
	}
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//u := user.Current(c)
	_, uid := checkSession(w,r)
	if uid == "" && r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
		uid = r.Header.Get("X-Goog-Authenticated-User-Email")
	}
	checkQuotaArticles(w,r,uid)
    defer func() { //catch or finally
        if err := recover(); err != nil { //catch
            fmt.Fprintf(os.Stderr, "Exception: %v\n", err)
			//send panic message in desktop
			geoStr := getGeoString(w,r)
			contentMsg := fmt.Sprintf("[ULAPPH] ERROR in handleUploadArticles(): %v >>> %v from %v", uid, getSchemeUrl(w,r), geoStr)
			time.AfterFunc(5*time.Second, func() {
                laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, contentMsg, uid)
            })
            os.Exit(1)
        }
    }()
        gcsObjectUrl := ""
        //gcsMediaUrl := ""
	    IS_FILE_OK := true
	    r.ParseMultipartForm(32 << 20)
	    file, _, err := r.FormFile("file")
	    if err != nil {
		IS_FILE_OK = false
	    }
	    if IS_FILE_OK == true {
		defer file.Close()
		data, err := ioutil.ReadAll(file)
		if err != nil {
		    IS_FILE_OK = false
		}
		if string(data) != "" && IS_FILE_OK == true {
		    //save to GCS
		    ctx := context.Background()
		    inpData := strings.NewReader(string(data))
		    public := false
		    UUID := generateUUID(w,r,uid,"TDSARTL")
		    //_, objAttrs, err := uploadGcsObject(ctx, inpData, UUID, public)
            _, _, err := uploadGcsObject(ctx, inpData, UUID, public)
            if err != nil {
			switch err {
			case storage.ErrBucketNotExist:
			    log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
			default:
			    log.Fatalf("ERROR: %v", err)
			}
		    }

            //log.Printf("URL: %s", objectURL(objAttrs))
            //log.Printf("MediaURL: %s", objAttrs.MediaLink)
		    //log.Printf("Size: %d", objAttrs.Size)
		    //log.Printf("MD5: %x", objAttrs.MD5)
		    //log.Printf("objAttrs: %+v", objAttrs)
		    //log.Printf("UUID: %v", UUID)
		    //save object url
		    //gcsObjectUrl = objectURL(objAttrs)
            gcsObjectUrl = UUID
            //gcsMediaUrl = mediaURL(UUID)
            //log.Printf("gcsMediaUrl: %v", gcsMediaUrl)
		} else {
		    log.Fatalf("Please check file. It's either empty or error in uploading.")
		}
	    } else {
		log.Fatalf("Error uploading articles.")
	    }
	FUNC_CODE := r.FormValue("FUNC_CODE")
	//fmt.Fprintf(w, "FUNC_CODE: %v<br>", FUNC_CODE)
	switch FUNC_CODE {

		//for articles
		case "UPD-FROM-EDITOR":
			//blobkey := string(file[0].BlobKey)
			blobkey := gcsObjectUrl
			SID := r.FormValue("SID")
			UID := r.FormValue("UID")
			if uid == "" {
				uid = UID
			}
			DOC_ID := 0
			SPL := strings.Split(SID,"-")
			FL_SUCCESS := false
			if len(SPL) > 1 {
				//TARGET := SPL[0]
				DOC_nn := SPL[1]
				DOC_ID = str2int(DOC_nn)
				dsKey := fmt.Sprintf("%d", DOC_ID)
				key := datastore.NameKey("TDSARTL", dsKey, nil)
				q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
				//log.Panicf("[S0601]")
				article := make([]TDSARTL, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
					 panic(err)
					//return
                  }
                  //log.Printf("datastoreClient.Get()  [77411]")
				thisID := 0
				AUTHOR := ""
				for _, p := range article{
					oldBlob := p.BLOB_URL
					p.BLOB_URL = blobkey
					//copy existing fields
					TITLE := p.TITLE
					FL_SHARED := p.FL_SHARED
					DOC_STAT := p.DOC_STAT
					TAGS := "" 
					if p.TAGS == "/static/img/NoImageAvailable.png" {
						thisImgUrl := getBlobTextFirstImageUrl(w,r,blobkey)
						if thisImgUrl != "" {
							TAGS = thisImgUrl
							p.TAGS = thisImgUrl
						} else {
							TAGS = p.TAGS
						}
					}
					AUTHOR = p.AUTHOR
					FL_COUNTRY_SPECIFIC := p.FL_COUNTRY_SPECIFIC
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					tstamp := getTimestamp()
					p.DT_UPLOAD = str2int(tstamp) 
					cKeyClu := fmt.Sprintf("TDSARTL_CAT_LAST_UPLOAD_%v", p.CATEGORY)
					//log.Printf("cKeyClu: %v", cKeyClu)
					//log.Printf("tstamp: %v", tstamp)
					putStrToMemcacheWithoutExp(w,r,cKeyClu,tstamp)
					thisID = p.DOC_ID
					thisKey := fmt.Sprintf("%d", p.DOC_ID)
					key := datastore.NameKey("TDSARTL", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [77445]")
					if err != nil {
						 panic(err)
						//return
					}
					//log.Panicf("[S0602]")
					//delete old blob
					//blobstore.Delete(c, appengine.BlobKey(oldBlob))
					err = deleteGcsObject(c, oldBlob)
					if err != nil {
						log.Fatalf("ERROR: deleteGcsObject() %v", err)
					}
					SLIDES_CACHE_KEY := fmt.Sprintf("SLIDES_CACHE_%v", oldBlob)
					memcacheDelete(w,r,SLIDES_CACHE_KEY)	
					ARTICLES_CACHE_KEY := fmt.Sprintf("ARTICLES_CACHE_%v", oldBlob)
					memcacheDelete(w,r,ARTICLES_CACHE_KEY)
					//clear uloc cache
					cKey := fmt.Sprintf("CACHE_ULOC_TDSARTL_%v", thisID)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear template cache if any
					cKey = fmt.Sprintf("GO_TEMPLATE_TDSARTL-%v", thisID)
					memcacheDelete(w,r,cKey)

					clearCachedArticleWebContents(w,r)
					//update article cache
					if uid == "" && UID != "" {
						uid = UID
					}
					if uid == "" {
						uid = AUTHOR
					}
					TDSARTL_Cacher(w,r,uid,DOC_ID, blobkey, DOC_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, TAGS, p.SHARED_TO, p.MUSIC_ID)
					go sendBroadcastsUpdArticle(w,r,uid,DOC_STAT, SID, TITLE, p.DESC, TAGS, p.CATEGORY)
					//update article in existing search idx
					thisIdxKey := fmt.Sprintf("TDSARTL-%d", p.DOC_ID)
					thisIdxURL := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", p.DOC_ID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
					//blobText := ""
					//blobText = getBlobText(w, r, blobkey)
					blobChan := make(chan string)
					go getBlobTextChan(w, r,blobChan, blobkey)
					blobText := <- blobChan
					//if p.SYS_VER == 666 {
					if p.SYS_VER == 777 {
						cStr := encrypter2(w,r,blobText,ENCRYPTION_KEY)
						blobText = string(cStr)
					}
					TITLE2 := strings.Replace(p.TITLE, "_", " ", -1)
					DESC2 := strings.Replace(p.DESC, "_", " ", -1)
					articleIdx := &IDX_TDSARTL{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"ARTICLES",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSARTL",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			p.FL_SHARED,
						DOC_STAT:			p.DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE2,	
						DOC_DESC: 			DESC2,
						DOC_AUTHOR:         p.AUTHOR,
						DOC_CONTENT_TEXT: 	blobText,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			p.TAGS,
						//DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
                    }
                    
					putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
					FL_SUCCESS = true
					//redURL := fmt.Sprintf("/articles?TYPE=ARTICLE&DOC_ID=%v&SID=TDSARTL-%v", thisID, thisID)
					redURL := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%v&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v&MUSIC_ID=%v", thisID, p.TITLE, p.BLOB_URL, p.CATEGORY, p.MUSIC_ID)
					fmt.Fprintf(w, "%v", redURL)
					break
				}
			} else {
				TITLE := r.FormValue("TITLE")
				if TITLE == "" {
					TITLE = "No title"
				}
				DESC := r.FormValue("DESC")
				CATEGORY := r.FormValue("CATEGORY")
				if CATEGORY == "" {
					CATEGORY = "desktop0"
				}
				q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(1)
				//log.Panicf("[S0603]")
				article := make([]TDSARTL, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
                     //panic(err)
                     //log.Printf("ERROR: %v", err)
					//return
                  }
                  //log.Printf("datastoreClient.Get()  [77546]")
                thisID := 0
                recCount, _  := datastoreClient.Count(c,q)
                if recCount == 0 {
                    p := TDSARTL {
                        FL_COUNTRY_SPECIFIC: "",
                        SYS_VER: 0,
                        DOC_ID: 1,
                        DOC_STAT: "",
                        TITLE: "",
                        DESC: "",
                        AUTHOR: "",
                        YEAR: "",
                        CATEGORY: "",
                        TAGS: "",
                        FL_SHARED: "",
                        SHARED_TO: "",
                        BLOB_URL: "",
                        //DT_UPLOAD: "",
                        DT_UPLOAD: 0,
                        NUM_LIKES: 0,
                        NUM_COMMENTS: 0,
                        LIKED_BY: "",
                        COMMENTS_BY: "",
                        NUM_VIEWS: int64(0),
                        MUSIC_ID: 0,
                    }
                    article = append(article, p)
                }
				for _, p := range article{
					thisID = p.DOC_ID + 1
					p.SYS_VER = SYS_VERSION
					p.DOC_ID = thisID
					p.BLOB_URL = blobkey
					//copy existing fields
					p.TITLE = TITLE
					p.DESC = DESC
					p.FL_SHARED = "N"
					p.DOC_STAT = "Personal"
					thisImgUrl := getBlobTextFirstImageUrl(w,r,blobkey)
					if thisImgUrl != "" {
						p.TAGS = thisImgUrl
					} else {
						p.TAGS = "/static/img/NoImageAvailable.png"
					}
					p.FL_COUNTRY_SPECIFIC = "N"
					p.AUTHOR = uid
					tstamp := getTimestamp()
					tyear := getYear()
					p.YEAR = tyear
					//p.CATEGORY = "desktop0"
					p.CATEGORY = CATEGORY
					p.DT_UPLOAD = str2int(tstamp) 
					p.NUM_LIKES = 0
					p.NUM_COMMENTS = 0
					p.NUM_VIEWS = 0
					p.LIKED_BY = ""
					p.COMMENTS_BY = ""
					p.SHARED_TO = ""
					p.MUSIC_ID = 0
					//thisID = p.DOC_ID
					thisKey := fmt.Sprintf("%d", thisID)
					key := datastore.NameKey("TDSARTL", thisKey, nil)
                    _, err := datastoreClient.Put(c, key, &p)
                    //log.Printf("datastoreClient.Put()  [77609]")
					if err != nil {
						 panic(err)
						//return
					}
					//log.Panicf("[S0604]")
					//clear autocomps
					cKeyAll := fmt.Sprintf("AUTOCOMP_CACHE_%v", uid)
					putStrToMemcacheWithoutExp(w,r,cKeyAll,"")

					clearCachedArticleWebContents(w,r)
					FL_SUCCESS = true
					//update article cache
					TDSARTL_Cacher(w,r,uid,thisID, blobkey, p.DOC_STAT, p.FL_SHARED, uid, p.FL_COUNTRY_SPECIFIC, p.TITLE, p.TAGS, "", p.MUSIC_ID)
					sendBroadcastsUpdArticle(w,r,uid,p.DOC_STAT, fmt.Sprintf("TDSARTL-%v", thisID), p.TITLE, p.DESC, p.TAGS, p.CATEGORY)
					//update article in existing search idx
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					thisIdxKey := fmt.Sprintf("TDSARTL-%d", p.DOC_ID)
					thisIdxURL := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", p.DOC_ID, thisIdxKey, p.CATEGORY, p.MUSIC_ID)
					blobChan := make(chan string)
					go getBlobTextChan(w, r,blobChan, blobkey)
					blobText := <- blobChan
					if p.SYS_VER == 777 {
						cStr := encrypter2(w,r,blobText,ENCRYPTION_KEY)
						blobText = string(cStr)
					}
					TITLE2 := strings.Replace(p.TITLE, "_", " ", -1)
					DESC2 := strings.Replace(p.DESC, "_", " ", -1)
					articleIdx := &IDX_TDSARTL{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"ARTICLES",
						SOURCE_TYPE: 		"ULAPPH",	
						SOURCE_TBL:  		"TDSARTL",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			p.FL_SHARED,
						DOC_STAT:			p.DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			TITLE2,	
						DOC_DESC: 			DESC2,
						DOC_AUTHOR:         p.AUTHOR,
						DOC_CONTENT_TEXT: 	blobText,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			p.TAGS,
						//DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
                    }
                    
					putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)
					redURL := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%v&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", thisID, p.TITLE, p.BLOB_URL, p.CATEGORY)
					fmt.Fprintf(w, "%v", redURL)
					break
				}
			}
			//D0106
			//For each URL, add to ICONS DB
			//time.AfterFunc(5*time.Second, func() {
				//laterAddIconsToDB(w, r, uid, blobkey)
			//}) 
			if FL_SUCCESS == false {
				msgDtl := fmt.Sprintf("[U00175] ERROR: Problem with inserting or updating content. Consult system administrator.")
				msgTyp := "error"
				msgURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=")
				action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return				
			}
		case "UPDATE":
			//update articles
			//blobkey := string(file[0].BlobKey)
			blobkey := gcsObjectUrl
			TITLE := r.FormValue("TITLE")
			DESC := r.FormValue("DESC")
			DOC_ID2 := r.FormValue("DOC_ID")
			DOC_ID := str2int(DOC_ID2)
			MUSIC_ID2 := r.FormValue("MUSIC_ID")
			MUSIC_ID := str2int(MUSIC_ID2)
			CATEGORY := r.FormValue("CATEGORY")
			TAGS := r.FormValue("TAGS")
			if TAGS == "" {
				TAGS = "/static/img/NoImageAvailable.png"
			}
			DOC_STAT := r.FormValue("DOC_STAT")
			FL_SHARED := r.FormValue("FL_SHARED")
			FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
			dsKey := fmt.Sprintf("%d", DOC_ID)
			key := datastore.NameKey("TDSARTL", dsKey, nil)
			q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)	
			//log.Panicf("[S0605]")
			article := make([]TDSARTL, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
				 panic(err)
				//return
              }
              //log.Printf("datastoreClient.Get()  [77708]")
			thisAuthor := ""
			SYS_VER := 0
			NUM_LIKES := float64(0)
			NUM_COMMENTS := float64(0)
			NUM_VIEWS := float64(0)
			for _, p := range article{
				oldBlob := p.BLOB_URL
				p.TITLE	= TITLE
				p.DESC	= DESC
				p.CATEGORY	= CATEGORY	
				p.FL_SHARED	= FL_SHARED
				p.DOC_STAT	= DOC_STAT
				p.TAGS	= TAGS
				p.BLOB_URL = blobkey
				p.FL_COUNTRY_SPECIFIC = FL_COUNTRY_SPECIFIC
				SYS_VER = p.SYS_VER
				thisAuthor = p.AUTHOR
				NUM_LIKES = float64(p.NUM_LIKES)
				NUM_COMMENTS = float64(p.NUM_COMMENTS)
				NUM_VIEWS = float64(p.NUM_VIEWS)
				thisKey := fmt.Sprintf("%d", p.DOC_ID)
				key := datastore.NameKey("TDSARTL", thisKey, nil)
                _, err := datastoreClient.Put(c, key, &p)
                //log.Printf("datastoreClient.Put()  [77732]")
				if err != nil {
					 panic(err)
					//return
				}
				//log.Panicf("[S0606]")
				//delete old blob
				//blobstore.Delete(c, appengine.BlobKey(oldBlob))
				err = deleteGcsObject(c, oldBlob)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
				break
			}
			if CATEGORY == "ULAPPH" {
				cKey := fmt.Sprintf("IDB_SLEEP_VIEW_ARTICLES_ULAPPH_HELP")
				putStrToMemcacheWithoutExp(w,r,cKey,"")
			}
			cKey := fmt.Sprintf("IDB_SLEEP_VIEW_ARTICLES_ALL")
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//update article cache
			TDSARTL_Cacher(w,r,uid,DOC_ID, blobkey, DOC_STAT, FL_SHARED, uid, FL_COUNTRY_SPECIFIC, TITLE, TAGS, "", MUSIC_ID)
			//clear cache contentsAll
			cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v", CATEGORY)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//cache contentsAll home
			cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES")
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//cache contentsAll desktop0
			cKey = fmt.Sprintf("CACHE_ARTICLES_CONTENTS_ALL_TILES_%v_%v", "desktop0", uid)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//clear uloc cache
			cKey = fmt.Sprintf("CACHE_ULOC_TDSARTL_%v", DOC_ID)
			putStrToMemcacheWithoutExp(w,r,cKey,"")
			//update article in existing search idx
			tstamp := getTimestamp()
			thisIdxKey := fmt.Sprintf("TDSARTL-%d", DOC_ID)
			thisIdxURL := fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%d&SID=%v&CATEGORY=%v&MUSIC_ID=%v", DOC_ID, thisIdxKey, CATEGORY, MUSIC_ID)
			//blobText := ""
			//blobText = getBlobText(w, r, blobkey)
			blobChan := make(chan string)
			go getBlobTextChan(w, r,blobChan, blobkey)
			blobText := <- blobChan
			//if SYS_VER == 666 {
			if SYS_VER == 777 {
				cStr := encrypter2(w,r,blobText,ENCRYPTION_KEY)
				blobText = string(cStr)
			}
			TITLE2 := strings.Replace(TITLE, "_", " ", -1)
			DESC2 := strings.Replace(DESC, "_", " ", -1)
			articleIdx := &IDX_TDSARTL{
				DOC_KEY: 			thisIdxKey,
				SEARCH_TYPE: 		"ARTICLES",
				SOURCE_TYPE: 		"ULAPPH",	
				SOURCE_TBL:  		"TDSARTL",	
				DESKTOP: 			CATEGORY,
				FL_SHARED:			FL_SHARED,
				DOC_STAT:			DOC_STAT,
				DOC_SCOPE_OVERALL:	"",
				DOC_SCOPE_COUNTRY:  "",
				DOC_SCOPE_REGION:  	"",
				DOC_SCOPE_CITY: 	"",
				DOC_SCOPE_BARANGAY: "",
				DOC_TITLE: 			TITLE2,	
				DOC_DESC: 			DESC2,
				DOC_AUTHOR:         thisAuthor,
				DOC_CONTENT_TEXT: 	blobText,
				DOC_CONTENT_HTML: 	"",	
				DOC_CONTENT_ATOM: 	"",	
				DOC_NUM_LIKES:		NUM_LIKES,		
				DOC_NUM_COMMENTS:	NUM_COMMENTS,
				DOC_NUM_VIEWS:		NUM_VIEWS,
				CONTENT_URL: 		thisIdxURL,
				IMG_URL: 			TAGS,
				//DATE_ADDED: 		tstamp,
				DATE_UPDATED: 		tstamp,
			}
            
			putSearchIndexA(w,r,"IDX_TDSARTL",thisIdxKey,articleIdx)			
			sysReq := fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%d&TITLE=%v&BLOB_KEY=%v&CATEGORY=%v", DOC_ID, TITLE, blobkey, CATEGORY)	
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		default:
			TITLE := r.FormValue("TITLE")
			DESC := r.FormValue("DESC")
			CATEGORY := r.FormValue("CATEGORY")
			//bKey := string(file[0].BlobKey)
			bKey := gcsObjectUrl
			reqStr := fmt.Sprintf("/serve-articles/?TITLE=%s&DESC=%s&CATEGORY=%s&blobKey4=%v", TITLE, DESC, CATEGORY, bKey)
			http.Redirect(w, r, reqStr, http.StatusFound)
			return
	}
}
//D0086
//generate unique id for GCS objects
func generateUUID(w http.ResponseWriter, r *http.Request, uid, dType string) string {
    if uid == "" {
		uid = r.FormValue("UID")
		if uid == "" {
			//log.Printf("UID is empty: %v", uid)
			uid = "unknown"
		}
    }
    OPT := r.FormValue("OPT")
    STRUWM := r.FormValue("STRUWM")
    switch {
        case OPT == "CCTV" && STRUWM != "":
            //CCTV/1/Y2020/M01/D26/H00
            //CCTV/1/previous
            y,m,d,h := getYMDH()
            spstr := fmt.Sprintf("%v/%v/CCTV/%v/Y%v/M%v/D%v/H%v", uid, dType, STRUWM, y,m,d,h)
            //use timestamp
            uuidstr := getTimestamp()
            return fmt.Sprintf("%v/%v", spstr, uuidstr)
        default: 
            /*uuidstr, err := uuid.NewV4()
            if err != nil {
                log.Fatalf("Something went wrong: %s", err)
            }*/
			uuidstr := uuid.NewV4()
            return fmt.Sprintf("%v/%v/%v", uid, dType, uuidstr)
    }
    //return ""    
}
//D0098
func getSeaweedFid(w http.ResponseWriter, r *http.Request) *SeaweedFid {
	ulapphDebug(w,r, "info", fmt.Sprintf("getSeaweedFid() %v", ""))
	//http://localhost:9333/dir/assign
	req, err := http.NewRequest("POST", SYS_SWFS_URL_FID, nil)
	//ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	//ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	//{"count":1,"fid":"3,01637037d6","url":"127.0.0.1:8080","publicUrl":"localhost:8080"}
	//FETCH_URL := string(bodyBytes)
	sfid := new(SeaweedFid)
	err = json.Unmarshal(bodyBytes,sfid)
	if err != nil {
		ulapphDebug(w,r, "critical", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
		return sfid
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("sfid.PublicUrl: %v", sfid.PublicUrl))
	//return sfid.PublicUrl
	return sfid
}
func deleteSeaweedStorage(w http.ResponseWriter, r *http.Request, path string) (error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("deleteSeaweedStorage() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("path: %#v", path))
	req, _ := http.NewRequest("DELETE", path, nil)
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		//panic(err)
		ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: %v", err))
		return err
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
	return nil
}
//D0098
func putSeaweedStorage(w http.ResponseWriter, r *http.Request, uid, cType string, gsf *SeaweedFid) (*SeaweedStore, error) {
	ulapphDebug(w,r, "info", fmt.Sprintf("putSeaweedStorage() %v", ""))
    IS_FILE_OK := true
    r.ParseMultipartForm(32 << 20)
    file, _, err := r.FormFile("file")
    if err != nil {
        IS_FILE_OK = false
    }
    if IS_FILE_OK == true {
        defer file.Close()
		ulapphDebug(w,r, "info", fmt.Sprintf("ioutil.ReadAll()"))
        data, err := ioutil.ReadAll(file)
        if err != nil {
            IS_FILE_OK = false
        }
        if IS_FILE_OK == true {
			ulapphDebug(w,r, "info", fmt.Sprintf("IS_FILE_OK: %v", IS_FILE_OK))
            //ctx := context.Background()
            //inpData := strings.NewReader(string(data))
			//curl -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6
			gsfStoreUrl := fmt.Sprintf("http://%v/%v", gsf.PublicUrl, gsf.Fid)
			var m bytes.Buffer
			fw := multipart.NewWriter(&m)
			//UUID := generateUUID(w,r,uid,"TDSMEDIA")
			UUID := generateUUID(w,r,uid,cType)
			ulapphDebug(w,r, "info", fmt.Sprintf("UUID: %v", UUID))
			file, err := fw.CreateFormFile("file", UUID)
			if err != nil {
				return nil, err
			}
			if _, err = file.Write(data); err != nil {
				return nil, err
			}
			//_ = fw.WriteField("FUNC_CODE", "ACB")
			//_ = fw.WriteField("API_KEY", CMD_GEN_KEY)
			_ = fw.WriteField("UID", uid)
			fw.Close()
			req, err := http.NewRequest("POST", gsfStoreUrl, &m)
			if err != nil {
				return nil, err
			}
			req.Header.Set("Content-Type", fw.FormDataContentType())
			ulapphDebug(w,r, "info", fmt.Sprintf("req: %#v", req))
			client := &http.Client{}
			resp, err := client.Do(req)
			if err != nil {
				//panic(err)
				ulapphDebug(w,r, "critical", fmt.Sprintf("client.Do() %v", ""))
				return nil, err
			}
			bodyBytes, _ := ioutil.ReadAll(resp.Body)
			ulapphDebug(w,r, "info", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
			//{"name":"myphoto.jpg","size":43234,"eTag":"1cc0118e"}
			//FETCH_URL := string(bodyBytes)
			sdata := new(SeaweedStore)
			err = json.Unmarshal(bodyBytes,sdata)
			if err != nil {
				ulapphDebug(w,r, "critical", fmt.Sprintf("bodyBytes: %v", string(bodyBytes)))
				return nil, err
			}
			ulapphDebug(w,r, "info", fmt.Sprintf("sdata.Name: %v", sdata.Name))
			ulapphDebug(w,r, "info", fmt.Sprintf("sdata.URL: %v", gsfStoreUrl))
			return sdata, nil
		}
	}
	return nil, fmt.Errorf("error putting swfs data: file not found")
}
//D0098
//err = serveSeaweedMedia(w,r,uid,gsf.fid,ssd.Name,gsfStoreUrl)
func serveSeaweedMedia(w http.ResponseWriter, r *http.Request, uid, mfid, mname, murl string) error {
	ulapphDebug(w,r, "info", fmt.Sprintf("serveSeaweedMedia() %v", ""))
	//log.Printf("Redirecting to serve-media...")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
	//UID := r.FormValue("UID")
	UID := uid
	TYPE := r.FormValue("DATA_TYPE")
	//TITLE := r.FormValue("TITLE")
	TITLE := mname
	DESC := r.FormValue("DESC")
	//DESC := r.FormValue("TITLE")
	OPT2 := ""
	if r.FormValue("OPT") == "CCTV" {
		OPT2 = "CCTV"
	}
	CATEGORY := r.FormValue("CATEGORY")
	FL_SHARED := r.FormValue("FL_SHARED")
	FILE_NAME := r.FormValue("FILE_NAME")
	MIME_TYPE := r.FormValue("MIME_TYPE")
	FL_ADD_WP := r.FormValue("FL_ADD_WP")
	DOC_STAT := r.FormValue("DOC_STAT")
	EMBED := r.FormValue("EMBED")
	//D0066
	STRUWM := r.FormValue("STRUWM")
	STRUWMI := r.FormValue("STRUWMI")
	AUTOML := r.FormValue("AUTOML")
	PINKEY := r.FormValue("PINKEY")
	//OPT := r.FormValue("OPT")
	OPT := "SWFS"
	//bKey := string(file[0].BlobKey)
	//bKey := mfid
	bKey := murl
	mUrl := murl
	reqStr := fmt.Sprintf("/serve-media/?DATA_TYPE=%s&TITLE=%s&DESC=%s&CATEGORY=%s&blobKey5=%v&FL_SHARED=%v&FILE_NAME=%v&MIME_TYPE=%v&FL_ADD_WP=%v&UID=%v&DOC_STAT=%v&EMBED=%v&OPT=%v&STRUWM=%v&STRUWMI=%v&AUTOML=%v&PINKEY=%v&murl=%v&OPT2=%v", TYPE, TITLE, DESC, CATEGORY, bKey, FL_SHARED, FILE_NAME, MIME_TYPE, FL_ADD_WP, UID, DOC_STAT, EMBED, OPT, STRUWM, STRUWMI, AUTOML, PINKEY, mUrl, OPT2)
	http.Redirect(w, r, reqStr, http.StatusFound)
	return nil
}
//Serves a seaweed slide file
func serveSeaweedSlide(w http.ResponseWriter, r *http.Request, uid, mfid, mname, murl string) error {
	ulapphDebug(w,r, "info", fmt.Sprintf("serveSeaweedSlide() %v", ""))
	//log.Printf("Redirecting to serve-media...")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
	TITLE := r.FormValue("TITLE")
	//TITLE := mname
	//UID := uid
	//UID := r.FormValue("UID")
	//UID := uid
	//OPT := r.FormValue("OPT")
	OPT := "SWFS"
	//bKey := string(file[0].BlobKey)
	bKey := mfid
	mUrl := murl
	//TITLE := r.FormValue("TITLE")
	DESC := r.FormValue("DESC")
	CATEGORY := r.FormValue("CATEGORY")
	//bKey := string(file[0].BlobKey)
	//bKey := mfid
	reqStr := fmt.Sprintf("/serve-slides/?TITLE=%s&DESC=%s&CATEGORY=%s&blobKey4=%v&OPT=%v&murl=%v", TITLE, DESC, CATEGORY, bKey, OPT, mUrl)
	http.Redirect(w, r, reqStr, http.StatusFound)
	return nil
}
//Serves as seaweed article file
func serveSeaweedArticle(w http.ResponseWriter, r *http.Request, uid, mfid, mname, murl string) error {
	ulapphDebug(w,r, "info", fmt.Sprintf("serveSeaweedArticle() %v", ""))
	//log.Printf("Redirecting to serve-media...")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
	//UID := r.FormValue("UID")
	//UID := uid
	//OPT := r.FormValue("OPT")
	OPT := "SWFS"
	//bKey := string(file[0].BlobKey)
	bKey := mfid
	mUrl := murl
	TITLE := r.FormValue("TITLE")
	DESC := r.FormValue("DESC")
	CATEGORY := r.FormValue("CATEGORY")
	//bKey := string(file[0].BlobKey)
	//bKey := mfid
	reqStr := fmt.Sprintf("/serve-articles/?TITLE=%s&DESC=%s&CATEGORY=%s&blobKey4=%v&OPT=%v&murl=%v", TITLE, DESC, CATEGORY, bKey, OPT, mUrl)
	http.Redirect(w, r, reqStr, http.StatusFound)
	return nil
}
//handles uploads of media 
func handleUploadMedia(w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
		//D0098
		//seaweedfs storage
		_, uid := checkSession(w,r)
		ulapphDebug(w,r, "info", fmt.Sprintf("handleUploadMedia() %v", ""))
		ulapphDebug(w,r, "info", fmt.Sprintf("uid: %v", uid))
		//get the seaweed server url
		gsf := getSeaweedFid(w,r)
		//{"count":1,"fid":"3,01637037d6","url":"127.0.0.1:8080","publicUrl":"localhost:8080"}
		if gsf.Url != "" {
			//post to url
			ssd, err := putSeaweedStorage(w,r,uid,"TDSMEDIA",gsf)
			if err != nil {
				ulapphDebug(w,r, "info", fmt.Sprintf("ERROR uploading to SWFS: %v", err))
			}
			//serve media
			gsfStoreUrl := fmt.Sprintf("http://%v/%v", gsf.PublicUrl, gsf.Fid)
			ulapphDebug(w,r, "info", fmt.Sprintf("gsfStoreUrl: %v", gsfStoreUrl))
			err = serveSeaweedMedia(w,r,uid,gsf.Fid,ssd.Name,gsfStoreUrl)
			if err != nil {
				ulapphDebug(w,r, "info", fmt.Sprintf("ERROR serveSeaweedMedia(): %v", err))
			}
		} else {
			ulapphDebug(w,r, "ERROR", fmt.Sprintf("ERROR getting FID URL %v", ""))
		}
		return
	}
    //log.Printf("handleUploadMedia()")
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
    //u := user.Current(c)
    _, uid := checkSession(w,r)
    if uid == "" && r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
        uid = r.Header.Get("X-Goog-Authenticated-User-Email")
    }
    //log.Printf("uid: %v", uid)
    checkQuotaMedia(w,r,uid)
    defer func() { //catch or finally
        if err := recover(); err != nil { //catch
            fmt.Fprintf(os.Stderr, "Exception: %v\n", err)
			//send panic message in desktop
			//log.Printf("ERROR: %v", err)
			geoStr := getGeoString(w,r)
			contentMsg := fmt.Sprintf("[ULAPPH] ERROR in handleUploadMedia(): %v >>> %v from %v", uid, getSchemeUrl(w,r), geoStr)
			time.AfterFunc(5*time.Second, func() {
                laterNotifyGB(c, "autoNotifyPeopleGB", ADMMAIL, contentMsg, uid)
            })
            os.Exit(1)
        }
    }()
    gcsObjectUrl := ""
    gcsMediaUrl := ""
    IS_FILE_OK := true
    r.ParseMultipartForm(32 << 20)
    file, _, err := r.FormFile("file")
    if err != nil {
        IS_FILE_OK = false
    }
    if IS_FILE_OK == true {
        defer file.Close()
        data, err := ioutil.ReadAll(file)
        if err != nil {
            IS_FILE_OK = false
        }
        //if string(data) != "" && IS_FILE_OK == true {
        if IS_FILE_OK == true {
            //text = string(data)
            //fileName = handler.Filename+".txt"
	        //D0086
            //save to GCS
            ctx := context.Background()
            inpData := strings.NewReader(string(data))
            public := false
			if SYS_NOREG_FIXED_USER != "" {
				public = true
			}
            UUID := generateUUID(w,r,uid,"TDSMEDIA")
            //log.Printf("UUID: %v", UUID)
            //_, objAttrs, err := uploadGcsObject(ctx, inpData, UUID, public)
            _, _, err := uploadGcsObject(ctx, inpData, UUID, public)
            if err != nil {
                switch err {
                case storage.ErrBucketNotExist:
                    log.Fatalf("Please create the bucket first e.g. with `gsutil mb`")
                default:
                    log.Fatalf("ERROR: %v", err)
                }
            }

            //log.Printf("URL: %s", objectURL(objAttrs))
            //log.Printf("MediaURL: %s", objAttrs.MediaLink)
            //log.Printf("Size: %d", objAttrs.Size)
            //log.Printf("MD5: %x", objAttrs.MD5)
            //log.Printf("objAttrs: %+v", objAttrs)
            //log.Printf("UUID: %v", UUID)
            //save object url
            //gcsObjectUrl = objectURL(objAttrs)
            gcsObjectUrl = UUID
            gcsMediaUrl = mediaURL(UUID)
        }
    } else {
        log.Fatalf("Error uploading media.")
    }
    FUNC_CODE := r.FormValue("FUNC_CODE")
    API_KEY := r.FormValue("API_KEY")
    UID := r.FormValue("UID")
    MSID := r.FormValue("MSID")
	//uid := UID
	switch FUNC_CODE {
		//D0082
		case "MAP":
			//delete existing blob
			//log.Printf("MAP")
			if API_KEY != CMD_GEN_KEY {
				//log.Printf("Invalid api key")
				return
			}
			uid = UID

			cKeySR := fmt.Sprintf("MAPS_BROADCAST_LOCATIONS_BLOB")
			SR_BLOB := ""
			var g TDSCNFG
			SR_BLOB = getStrMemcacheValueByKey(w,r,cKeySR)
			thisKey := fmt.Sprintf("MAPS_BROADCAST_LOCATIONS")
			if SR_BLOB == "" {
                key := datastore.NameKey("TDSCNFG", thisKey, nil)
                //D0086
                datastoreClient := createClientDS()
				if err := datastoreClient.Get(c, key, &g); err != nil {
					//return
                }
                //log.Printf("datastoreClient.Get()  [78210]")
				SR_BLOB = g.TXT_VAL
			}
			//log.Printf("SR_BLOB: %v", SR_BLOB)
			if SR_BLOB != "" {
				//blobstore.Delete(c, appengine.BlobKey(SR_BLOB))
				err := deleteGcsObject(c, SR_BLOB)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
			}
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl
			//log.Printf("blobkey: %v", blobkey)
			g = TDSCNFG{
					SYS_VER: 1,
					USER: uid,
					CFG_ID: thisKey,
					DAT_TYP: "TXT",
					NUM_VAL: 0,
					TXT_VAL: blobkey,
					CFG_DESC: "Set via code",
			}
			key := datastore.NameKey("TDSCNFG", thisKey, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
					panic(err)
					//return
            }
            //log.Printf("datastoreClient.Put()  [78238]")
			//log.Panicf("[S0607]")
			putStrToMemcacheWithoutExp(w,r,cKeySR,blobkey)
			//log.Printf("save map blobstore")
		case "CONVO":
			//delete existing blob
			//log.Printf("CONVO")
			if API_KEY != CMD_GEN_KEY {
				return
			}
            BOT := r.FormValue("BOT")
            DID := r.FormValue("DID")
			//cKeySR := fmt.Sprintf("CONVO_BLOB_%v_%v", UID, BOT, DID)
			SR_BLOB := ""
			var g TDSCNFG
			//SR_BLOB = getStrMemcacheValueByKey(w,r,cKeySR)
			thisKey := fmt.Sprintf("CONVO_REC_%v_%v_%v", UID, BOT, DID)
			if SR_BLOB == "" {
                key := datastore.NameKey("TDSCNFG", thisKey, nil)
                //D0086
                datastoreClient := createClientDS()
				if err := datastoreClient.Get(c, key, &g); err != nil {
					//return
                }
                //log.Printf("datastoreClient.Get()  [78262]")
				SR_BLOB = g.TXT_VAL
				//log.Printf("Existing SR_BLOB: %v", SR_BLOB)
			}
			////log.Printf("SR_BLOB: %v", SR_BLOB)
			if SR_BLOB != "" {
				//log.Printf("Deleting SR_BLOB: %v", SR_BLOB)
				//blobstore.Delete(c, appengine.BlobKey(SR_BLOB))
				err := deleteGcsObject(c, SR_BLOB)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
			}
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl
			//log.Printf("blobkey: %v", blobkey)
			//log.Printf("thisKey: %v", thisKey)
			g = TDSCNFG{
					SYS_VER: 1,
					USER: uid,
					CFG_ID: thisKey,
					DAT_TYP: "TXT",
					NUM_VAL: 0,
					TXT_VAL: blobkey,
					CFG_DESC: "Set via code",
			}
			key := datastore.NameKey("TDSCNFG", thisKey, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
					panic(err)
					//return
            }
            //log.Printf("datastoreClient.Put()  [78293]")
			//log.Panicf("[S0607]")
			//memcacheDelete(w,r,cKeySR)
			//putStrToMemcacheWithoutExp(w,r,cKeySR,blobkey)
			//log.Printf("convo rec saved")
		case "EDUC":
			//delete existing blob
			////log.Printf("EDUC")
			//D0068
			if API_KEY != CMD_GEN_KEY {
				////log.Printf("Invalid api key")
				return
			}
			uid = UID

			cKeySR := fmt.Sprintf("STUDENT_REC_BLOB_%v_%v", MSID, uid)
			SR_BLOB := ""
			var g TDSCNFG
			SR_BLOB = getStrMemcacheValueByKey(w,r,cKeySR)
			thisKey := fmt.Sprintf("STUDENT_REC_%v_%v", MSID, uid)
			if SR_BLOB == "" {
                key := datastore.NameKey("TDSCNFG", thisKey, nil)
                //D0086
                datastoreClient := createClientDS()
				if err := datastoreClient.Get(c, key, &g); err != nil {
					//return
                }
                //log.Printf("datastoreClient.Get()  [78320]")
				SR_BLOB = g.TXT_VAL
			}
			////log.Printf("SR_BLOB: %v", SR_BLOB)
			if SR_BLOB != "" {
				//blobstore.Delete(c, appengine.BlobKey(SR_BLOB))
				err := deleteGcsObject(c, SR_BLOB)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
			}
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl
			////log.Printf("blobkey: %v", blobkey)
			////log.Printf("uid: %v", uid)
			g = TDSCNFG{
					SYS_VER: 1,
					USER: uid,
					CFG_ID: thisKey,
					DAT_TYP: "TXT",
					NUM_VAL: 0,
					TXT_VAL: blobkey,
					CFG_DESC: "Set via code",
			}
			key := datastore.NameKey("TDSCNFG", thisKey, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
					panic(err)
					//return
            }
            //log.Printf("datastoreClient.Put()  [78349]")
			//log.Panicf("[S0607]")
			putStrToMemcacheWithoutExp(w,r,cKeySR,blobkey)
			////log.Printf("student rec saved")
		case "EDUC2":
			//delete existing blob
			////log.Printf("EDUC2")
			//D0068
			if API_KEY != CMD_GEN_KEY {
				////log.Printf("Invalid api key")
				return
			}

			cKeySR := fmt.Sprintf("SCHOOL_REC_BLOB_%v", MSID)
			SR_BLOB := ""
			var g TDSCNFG
			SR_BLOB = getStrMemcacheValueByKey(w,r,cKeySR)
			thisKey := fmt.Sprintf("SCHOOL_REC_%v", MSID)
			if SR_BLOB == "" {
                key := datastore.NameKey("TDSCNFG", thisKey, nil)
                //D0086
                datastoreClient := createClientDS()
				if err := datastoreClient.Get(c, key, &g); err != nil {
					//return
                }
                //log.Printf("datastoreClient.Get()  [78374]")
				SR_BLOB = g.TXT_VAL
			}
			////log.Printf("SR_BLOB: %v", SR_BLOB)
			if SR_BLOB != "" {
				//blobstore.Delete(c, appengine.BlobKey(SR_BLOB))
				err := deleteGcsObject(c, SR_BLOB)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
			}
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl
			////log.Printf("blobkey: %v", blobkey)
			////log.Printf("uid: %v", uid)
			g = TDSCNFG{
					SYS_VER: 1,
					USER: ADMMAIL,
					CFG_ID: thisKey,
					DAT_TYP: "TXT",
					NUM_VAL: 0,
					TXT_VAL: blobkey,
					CFG_DESC: "Set via code",
			}
			key := datastore.NameKey("TDSCNFG", thisKey, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
					panic(err)
					//return
            }
            //log.Printf("datastoreClient.Put()  [78403]")
			//log.Panicf("[S0607]")
			putStrToMemcacheWithoutExp(w,r,cKeySR,blobkey)

		case "ACB":
			//delete existing blob
			////log.Printf("ACB")
			//D0068
			if API_KEY != CMD_GEN_KEY {
				////log.Printf("Invalid api key")
				return
			}
			uid = UID

			cKeyACB := fmt.Sprintf("ACB_BLOB_%v", uid)
			ACB_BLOB := ""
			var g TDSCNFG
			ACB_BLOB = getStrMemcacheValueByKey(w,r,cKeyACB)
			if ACB_BLOB == "" {
				thisKey := fmt.Sprintf("SYSTEM_ACB_%v", uid)
                key := datastore.NameKey("TDSCNFG", thisKey, nil)
                //D0086
                datastoreClient := createClientDS()
				if err := datastoreClient.Get(c, key, &g); err != nil {			
					//return
                }
                //log.Printf("datastoreClient.Get()  [78429]")
				ACB_BLOB = g.TXT_VAL
			}
			////log.Printf("ACB_BLOB: %v", ACB_BLOB)
			if ACB_BLOB != "" {
				//blobstore.Delete(c, appengine.BlobKey(ACB_BLOB))
				err := deleteGcsObject(c, ACB_BLOB)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
			}
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl	
			////log.Printf("blobkey: %v", blobkey)
			////log.Printf("uid: %v", uid)
			thisKey := fmt.Sprintf("SYSTEM_ACB_%v", uid)
			g = TDSCNFG{
					SYS_VER: 1,
					USER: uid,
					CFG_ID: thisKey,
					DAT_TYP: "TXT",
					NUM_VAL: 0,
					TXT_VAL: blobkey,
					CFG_DESC: "Set via code",
			}
			key := datastore.NameKey("TDSCNFG", thisKey, nil)
			if _, err := datastoreClient.Put(c, key, &g); err != nil {
					panic(err)
					//return
            }
            //log.Printf("datastoreClient.Put()  [78459]")
			//log.Panicf("[S0607]")
			putStrToMemcacheWithoutExp(w,r,cKeyACB,blobkey)
			////log.Printf("acb saved")
			return
		//for external clouds
		case "UPD-FROM-EDITOR2":
			//GITHUB_CONTENT@888@%v@888@%v@888@%v@888@%v
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl
            SID := r.FormValue("SID")
            DESC := r.FormValue("DESC")
			if DESC == "" {
				DESC = "-- Updated from ULAPPH Cloud Desktop by "+uid
			}
			//commit to cloud
			switch {
				case strings.Index(SID, "GITHUB_CONTENT@888@") != -1:
					//GITHUB_CONTENT@888@%v@888@%v@888@%v@888@%v
					SPL := strings.Split(SID, "@888@")
					if len(SPL) == 7 {
						guid := SPL[1]
						//get github user
						GITHUB_USER_NAME, err := getGithubUser(w,r)
						if err != nil {
							fmt.Fprintf(w, "[Authorization Error] No github user set")
							return
						}
						if guid != GITHUB_USER_NAME {
							fmt.Fprintf(w,"Unauthorized operation")
							return
						}
 
						gbra := SPL[2]
						grepo := SPL[3]
						gpath := SPL[4]
						gsha := SPL[5]
						gsha2 := SPL[6]
						//commit now
						err = updateGithubContent(w,r,guid,gbra,grepo,gpath,gsha,gsha2,blobkey,DESC)
						if err != nil {
							serveError(c,w,err)
						}
						return
					}
			}
			return
		//for media
		case "UPD-FROM-EDITOR":
			////log.Printf("UPD-FROM-EDITOR")
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl
            SID := r.FormValue("SID")
            UID := r.FormValue("UID")
			if uid == "" {
				uid = UID
			}
            SPC_OPT := r.FormValue("SPC_OPT")
			MEDIA_ID := 0
			SPL := strings.Split(SID,"-")
			if len(SPL) > 1 {
				//TARGET := SPL[0]
				MEDIA_nn := SPL[1]
				MEDIA_ID = str2int(MEDIA_nn)

				dsKey := fmt.Sprintf("%d", MEDIA_ID)
				key := datastore.NameKey("TDSMEDIA", dsKey, nil)
				q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
				//log.Panicf("[S0608]")

				media := make([]TDSMEDIA, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
					 panic(err)
					//return
				  }
				//thisID := 0
				for _, p := range media{
					oldBlob := p.BLOB_KEY
					p.BLOB_KEY = blobkey
					p.AUTHOR = uid
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					tstamp := getTimestamp()
					p.DT_UPLOAD = str2int(tstamp) 
					cKeyClu := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", p.CATEGORY)
					////log.Printf("cKeyClu: %v", cKeyClu)
					////log.Printf("tstamp: %v", tstamp)
					putStrToMemcacheWithExp(w,r,cKeyClu,tstamp,GEN_CONTENT_EXPIRES4)
					//last cat/camera per user
					cKeyClc := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v_%v", p.CATEGORY, uid)
					putStrToMemcacheWithExp(w,r,cKeyClc,tstamp,GEN_CONTENT_EXPIRES4)
					ulapphDebug(w,r, "info", fmt.Sprintf("cKeyClc: %v", cKeyClc))
					//D0068
					thisCont := ""
					TITLE := strings.Replace(p.TITLE, "_", " ", -1)
					DESC := strings.Replace(p.DESC, "_", " ", -1)
					if p.DATA_TYPE == "text" {
						////log.Printf("text")
						blobChan := make(chan string)
						go getBlobTextChan(w, r,blobChan, p.BLOB_KEY)
						thisCont = <- blobChan
						if p.SYS_VER == 777 {
							cStr := encrypter2(w,r,thisCont,ENCRYPTION_KEY)
							thisCont = string(cStr)
						}
						//check mime type
						if p.MIME_TYPE == "" {
							////log.Printf("p.MIME_TYPE = blank")
							if isJSON(thisCont) == true {
								p.MIME_TYPE = "application/json"
							} else {
								p.MIME_TYPE = http.DetectContentType([]byte(thisCont))
							}
						}
						////log.Printf("p.MIME_TYPE = %v", p.MIME_TYPE)
						nT1 := strings.Index(p.MIME_TYPE, "image/jpeg")
						if p.IMG_URL == "/static/img/text-icon.gif" || p.IMG_URL == "/static/img/unknown.png" && p.MIME_TYPE != "" && p.MIME_TYPE != "text/plain" && nT1 == -1 {
							SPL := strings.Split(p.MIME_TYPE, "/")
							if len(SPL) > 0 {
								thisURL := fmt.Sprintf("/static/img/files/%v-icon-128x128.png", SPL[1])
								p.IMG_URL = thisURL
							}else {
								thisURL := fmt.Sprintf("/static/img/files/%v-icon-128x128.png", p.DATA_TYPE)
								p.IMG_URL = thisURL
							}
						}
						if p.IMG_URL == "" || nT1 == -1 {
							p.IMG_URL = "/static/img/text-icon.gif"
						}
						////log.Printf("p.IMG_URL = %v", p.IMG_URL)

					} else {
						thisCont = fmt.Sprintf("%v - %v", TITLE, DESC)
					}
					thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
					key := datastore.NameKey("TDSMEDIA", thisKey, nil)
					_, err := datastoreClient.Put(c, key, &p)
					if err != nil {
						 panic(err)
						//return
                    }
                    //log.Printf("datastoreClient.Put()  [78596]")
					//log.Panicf("[S0609]")
					//delete old blob
				        //blobstore.Delete(c, appengine.BlobKey(oldBlob))
				        //log.Printf("oldBlob: %v", oldBlob)
				        //BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
				        err = deleteGcsObject(c, oldBlob)
				        if err != nil {
						log.Fatalf("ERROR: deleteGcsObject() %v", err)
				        }
					//clear media cache
					cKey := fmt.Sprintf("TDSMEDIA_MEDID_CACHE_%v", MEDIA_ID)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					//clear template cache if any
					cKey = fmt.Sprintf("GO_TEMPLATE_TDSMEDIA-%v", MEDIA_ID)
					memcacheDelete(w,r,cKey)
					//D0075
					//clear nlp cache if any
					cKey = fmt.Sprintf("ULAPPH_NLP_TDSMEDIA-%v", MEDIA_ID)
					memcacheDelete(w,r,cKey)
					//t := time.Now().Local()
					//tstamp := t.Format("20060102150405")
					//insert media into search idx
					thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", p.MEDIA_ID)
					thisIdxURL := fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%d&IMG_URL=%v", p.MEDIA_ID, p.IMG_URL)
					searchIdx := &IDX_TDSMEDIA{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"MEDIA",
						SOURCE_TYPE: 		p.DATA_TYPE,	
						SOURCE_TBL:  		"TDSMEDIA",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			p.FL_SHARED,
						DOC_STAT:			p.DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			p.TITLE,	
						DOC_DESC: 			p.DESC,
						DOC_AUTHOR:         uid,
						DOC_CONTENT_TEXT: 	thisCont,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			p.IMG_URL,
						DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
                    }
                    
					putSearchIndexM(w,r,"IDX_TDSMEDIA",thisIdxKey,searchIdx)
					//determine if this media is a config setting
					switch SPC_OPT {
						case "EDIT_TOP_LIST_MENU_MINE":
							//SPC_OPT to /people-edit?EditPeopleFunc=SET_TOP_LIST_MENU_MINE_SOURCE&MEDIA_ID=787				
							sysReq := fmt.Sprintf("/people-edit?EditPeopleFunc=SET_TOP_LIST_MENU_MINE_SOURCE&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)	

						case "EDIT_WINDOWS_MINE":
							//SPC_OPT to /people-edit?EditPeopleFunc=SET_WINDOWS_MINE_SOURCE&MEDIA_ID=787
							sysReq := fmt.Sprintf("/people-edit?EditPeopleFunc=SET_WINDOWS_MINE_SOURCE&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						//D0113
						case "EDIT_CUSTOM_SEARCH_MINE":
							//SPC_OPT to /people-edit?EditPeopleFunc=SET_CUSTOM_SEARCH_MINE_SOURCE&MEDIA_ID=787
							sysReq := fmt.Sprintf("/people-edit?EditPeopleFunc=SET_CUSTOM_SEARCH_MINE_SOURCE&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						case "UpdateURLFETCHList":
							//SPC_OPT to /media?FUNC_CODE=SET_URLFETCH_LIST&MEDIA_ID=nn
							sysReq := fmt.Sprintf("/media?FUNC_CODE=SET_URLFETCH_LIST&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						//newconfigtemplate
						case "EDIT_CONTACTS_LIST":
							//SPC_OPT to /media?FUNC_CODE=SET_CONTACTS_LIST&MEDIA_ID=nn
							//sysReq := fmt.Sprintf("/media?FUNC_CODE=SET_CONTACTS_LIST&MEDIA_ID=%v", MEDIA_ID)	
							sysReq := fmt.Sprintf("/people-edit?EditPeopleFunc=SET_CONTACTS_LIST&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						//newconfigtemplate	
						case "EDIT_PUB_WP_LIST":
							//SPC_OPT to /media?FUNC_CODE=SET_CONTACTS_LIST&MEDIA_ID=nn
							//sysReq := fmt.Sprintf("/media?FUNC_CODE=SET_CONTACTS_LIST&MEDIA_ID=%v", MEDIA_ID)	
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_PUBWP_LIST&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						//newconfigtemplate
						case "EDIT_PUB_UWM":
							//SPC_OPT to /media?FUNC_CODE=SET_CONTACTS_LIST&MEDIA_ID=nn
							//sysReq := fmt.Sprintf("/media?FUNC_CODE=SET_CONTACTS_LIST&MEDIA_ID=%v", MEDIA_ID)	
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_PUB_UWM&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
 
						case "EDIT_TABZILLA_SOURCE":
							//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_TABZILLA_SOURCE&MEDIA_ID=787
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_TABZILLA_SOURCE&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						case "EDIT_LEFT_MENU_SOURCE":
							//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_LEFT_MENU_SOURCE&MEDIA_ID=787
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_LEFT_MENU_SOURCE&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						case "EDIT_CATEGORY_LIST":
							//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_CATEGORY_LIST&MEDIA_ID=787
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_CATEGORY_LIST&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						case "EDIT_TOP_LIST_MENU":
							//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_TOP_LIST_MENU_SOURCE&MEDIA_ID=787
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_TOP_LIST_MENU_SOURCE&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						case "EDIT_SEARCH_HOST_LIST":
							//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_HOST_LIST&MEDIA_ID=787
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_HOST_LIST&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						case "EDIT_USERS_HOST_LIST":
							//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_HOST_LIST2&MEDIA_ID=787
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_HOST_LIST2&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						case "EDIT_ADS_SLOTS_LIST":
							//SPC_OPT to /admin-setup?ADMIN_FUNC=SET_ADS_TS&MEDIA_ID=787
							sysReq := fmt.Sprintf("/admin-setup?ADMIN_FUNC=SET_ADS_TS&MEDIA_ID=%v", MEDIA_ID)	
							fmt.Fprintf(w, "%v", sysReq)
						default:
							sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d&DATA_TYPE=%s&TITLE=%v&BLOB_KEY=%v&IMG_URL=%v", MEDIA_ID, p.DATA_TYPE, p.TITLE, blobkey, p.IMG_URL)	
							fmt.Fprintf(w, "%v", sysReq)
					}
					break
				}
 
			} else {
                TITLE := r.FormValue("TITLE")
				if TITLE == "" {
					TITLE = "No title"
				}
                DESC := r.FormValue("DESC")
				if DESC == "" {
					DESC = "No desc"
				}
                CATEGORY := r.FormValue("CATEGORY")
				if CATEGORY == "" {
					CATEGORY = "desktop0"
				}
				q := datastore.NewQuery("TDSMEDIA").Order("-MEDIA_ID").Limit(1)
				//log.Panicf("[S0610]")
				media := make([]TDSMEDIA, 0, 1)
				if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
					 panic(err)
					//return
                  }
                  //log.Printf("datastoreClient.Get()  [78739]")
                thisID := 0
                recCount, _  := datastoreClient.Count(c,q)
                if recCount == 0 {
                    p := TDSMEDIA {
                            SYS_VER: 0,	
                            MEDIA_ID: 0,	
                            DOC_ID: 0,	
                            DATA_TYPE: "",
                            PROP: "",	
                            TITLE: "",
                            DESC: "",
                            AUTHOR: "",	
                            YEAR: "",	
                            CATEGORY: "",	
                            DOC_STAT: "",
                            FL_SHARED: "",
                            SHARED_TO: "",
                            IMG_URL: "",
                            BLOB_KEY: "",	
                            //DT_UPLOAD: "",
                            DT_UPLOAD: 0,
                            NUM_LIKES: 0,	
                            NUM_COMMENTS: 0,	
                            LIKED_BY: "",	
                            COMMENTS_BY: "",
                            NUM_VIEWS: 0,
                            MIME_TYPE: "",
                    }
                    media = append(media, p)
                }
				for _, p := range media{
					thisID = p.MEDIA_ID + 1
					p.MEDIA_ID = thisID
					p.DATA_TYPE	 = "text"
					p.MIME_TYPE = ""
					p.PROP = ""
					p.TITLE	= TITLE
					p.DESC	= DESC
					//p.CATEGORY	= "desktop0"
					p.CATEGORY	= CATEGORY
					p.DOC_STAT = "Personal"
					p.FL_SHARED	= "N"
					p.IMG_URL = "/static/img/text-icon.gif"
					p.BLOB_KEY = blobkey
					p.AUTHOR = uid
					p.SYS_VER = SYS_VERSION
					//t := time.Now().Local()
					//tyear := t.Format("2006")
					tyear := getYear()
					p.YEAR = tyear
					//tstamp := t.Format("20060102150405")
					tstamp := getTimestamp()
					p.DT_UPLOAD = str2int(tstamp) 
					//D0073
					cKeyClu := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v", CATEGORY)
					////log.Printf("cKeyClu: %v", cKeyClu)
					////log.Printf("tstamp: %v", tstamp)
					putStrToMemcacheWithExp(w,r,cKeyClu,tstamp,GEN_CONTENT_EXPIRES4)
					//last cat/camera per user
					cKeyClc := fmt.Sprintf("TDSMEDIA_CAT_LAST_UPLOAD_%v_%v", CATEGORY, uid)
					putStrToMemcacheWithExp(w,r,cKeyClc,tstamp,GEN_CONTENT_EXPIRES4)
					ulapphDebug(w,r, "info", fmt.Sprintf("cKeyClc: %v", cKeyClc))
					p.NUM_LIKES = 0
					p.NUM_COMMENTS = 0
					p.LIKED_BY = ""
					p.COMMENTS_BY = ""
					p.NUM_VIEWS = 0
					//p.MIME_TYPE = ""
					thisCont := ""
					TITLE := strings.Replace(p.TITLE, "_", " ", -1)
					DESC := strings.Replace(p.DESC, "_", " ", -1)
					if p.DATA_TYPE == "text" {
                        blobChan := make(chan string)
						go getBlobTextChan(w, r,blobChan, p.BLOB_KEY)
						thisCont = <- blobChan
						if p.SYS_VER == 777 {
							cStr := encrypter2(w,r,thisCont,ENCRYPTION_KEY)
							thisCont = string(cStr)
						}
						//check mime type
						if p.MIME_TYPE == "" {
							if isJSON(thisCont) == true {
								p.MIME_TYPE = "application/json"
							} else {
								p.MIME_TYPE = http.DetectContentType([]byte(thisCont))
							}
						}
						////log.Printf("p.MIME_TYPE = %v", p.MIME_TYPE)
						nT1 := strings.Index(p.MIME_TYPE, "image/jpeg")
						if p.IMG_URL == "/static/img/text-icon.gif" || p.IMG_URL == "/static/img/unknown.png" && nT1 == -1 {
							SPL := strings.Split(p.MIME_TYPE, "/")
							if len(SPL) > 0 {
								thisURL := fmt.Sprintf("/static/img/files/%v-icon-128x128.png", SPL[1])
								p.IMG_URL = thisURL
							}else {
								thisURL := fmt.Sprintf("/static/img/files/%v-icon-128x128.png", p.DATA_TYPE)
								p.IMG_URL = thisURL
							}
						}
						if p.IMG_URL == "" || nT1 != -1 {
							p.IMG_URL = "/static/img/text-icon.gif"
						}

					} else {
						thisCont = fmt.Sprintf("%v - %v", TITLE, DESC)
					}
					////log.Printf("p.IMG_URL = %v", p.IMG_URL)
					thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
					key := datastore.NameKey("TDSMEDIA", thisKey, nil)
					_, err := datastoreClient.Put(c, key, &p)
					if err != nil {
						 panic(err)
						//return
					}
					//log.Printf("datastoreClient.Put: OK %v", thisKey)
					//log.Panicf("[S0611]")
					//clear media cache
					cKey := fmt.Sprintf("TDSMEDIA_MEDID_CACHE_%v", p.MEDIA_ID)
					//log.Printf("cKey: %v", cKey)
					putStrToMemcacheWithoutExp(w,r,cKey,"")
					thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", p.MEDIA_ID)
					thisIdxURL := fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%d&IMG_URL=%v", p.MEDIA_ID, p.IMG_URL)
					searchIdx := &IDX_TDSMEDIA{
						DOC_KEY: 			thisIdxKey,
						SEARCH_TYPE: 		"MEDIA",
						SOURCE_TYPE: 		p.DATA_TYPE,	
						SOURCE_TBL:  		"TDSMEDIA",	
						DESKTOP: 			p.CATEGORY,
						FL_SHARED:			p.FL_SHARED,
						DOC_STAT:			p.DOC_STAT,
						DOC_SCOPE_OVERALL:	"",
						DOC_SCOPE_COUNTRY:  "",
						DOC_SCOPE_REGION:  	"",
						DOC_SCOPE_CITY: 	"",
						DOC_SCOPE_BARANGAY: "",
						DOC_TITLE: 			p.TITLE,	
						DOC_DESC: 			p.DESC,
						DOC_AUTHOR:         uid,
						DOC_CONTENT_TEXT: 	thisCont,
						DOC_CONTENT_HTML: 	"",	
						DOC_CONTENT_ATOM: 	"",	
						DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
						DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
						DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
						CONTENT_URL: 		thisIdxURL,
						IMG_URL: 			p.IMG_URL,
						DATE_ADDED: 		tstamp,
						DATE_UPDATED: 		tstamp,
					}
					putSearchIndexM(w,r,"IDX_TDSMEDIA",thisIdxKey,searchIdx)
					sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d&DATA_TYPE=%s&TITLE=%v&BLOB_KEY=%v&IMG_URL=%v", p.MEDIA_ID, p.DATA_TYPE, p.TITLE, blobkey, p.IMG_URL)	
					//http.Redirect(w, r, sysReq, http.StatusFound)
					fmt.Fprintf(w, "%v", sysReq)
					break
				}
			}
		case "UPDATE":
			//update media
			//blobkey := r.FormValue("blobKey5")
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl
            DATA_TYPE := r.FormValue("DATA_TYPE")
            IMG_URL := r.FormValue("IMG_URL")
            TITLE := r.FormValue("TITLE")
            DESC := r.FormValue("DESC")
            DOC_STAT := r.FormValue("DOC_STAT")
            MEDIA_ID := r.FormValue("MEDIA_ID")
            PROP := r.FormValue("PROP")

			thisURL := ""
			switch {
				case DATA_TYPE == "image":
                    thisURL = gcsMediaUrl
				case DATA_TYPE == "text":
					//thisURL = "/static/img/text-icon.gif"
				case DATA_TYPE == "music":
					//thisURL = "/static/img/music.png"
				case DATA_TYPE == "video":
					//thisURL = "/static/img/video.png"
			}
            CATEGORY := r.FormValue("CATEGORY")
            FL_SHARED := r.FormValue("FL_SHARED")
	
			dsKey := fmt.Sprintf("%v", MEDIA_ID)
			key := datastore.NameKey("TDSMEDIA", dsKey, nil)
			q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
			//log.Panicf("[S0612]")
 
			media := make([]TDSMEDIA, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
				 panic(err)
				//return
              }
              //log.Printf("datastoreClient.Get()  [78928]")
 
			NUM_LIKES := float64(0)
			NUM_COMMENTS := float64(0)
			NUM_VIEWS := float64(0)
 
			for _, p := range media{
				oldBlob := p.BLOB_KEY
				p.DATA_TYPE	 = DATA_TYPE
				p.PROP = PROP
				p.TITLE	= TITLE
				p.DESC	= DESC
				p.DOC_STAT = DOC_STAT
				p.CATEGORY	= CATEGORY	
				p.FL_SHARED	= FL_SHARED
				if DATA_TYPE == "image" {
					p.IMG_URL = thisURL
				} else {
					p.IMG_URL = IMG_URL
				}
				p.BLOB_KEY = blobkey	
				//t := time.Now().Local()
				//tstamp := t.Format("20060102150405")
				tstamp := getTimestamp()
				p.DT_UPLOAD = str2int(tstamp) 
 
				NUM_LIKES = float64(p.NUM_LIKES)
				NUM_COMMENTS = float64(p.NUM_COMMENTS)
				NUM_VIEWS = float64(p.NUM_VIEWS)
						
				thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
				key := datastore.NameKey("TDSMEDIA", thisKey, nil)
				_, err := datastoreClient.Put(c, key, &p)
				if err != nil {
					 panic(err)
					//return
                }
                //log.Printf("datastoreClient.Put()  [78965]")
				err = deleteGcsObject(c, oldBlob)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
				//insert media into search idx
				thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", p.MEDIA_ID)
				thisIdxURL := fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%d&IMG_URL=%v", p.MEDIA_ID, thisURL)
				TITLE := strings.Replace(p.TITLE, "_", " ", -1)
				DESC := strings.Replace(p.DESC, "_", " ", -1)
				//thisCont := fmt.Sprintf("%v - %v", TITLE, DESC)
				thisCont := ""
				if DATA_TYPE == "text" {
					//thisCont = getBlobText(w, r, p.BLOB_KEY)
					blobChan := make(chan string)
					go getBlobTextChan(w, r,blobChan, p.BLOB_KEY)
					thisCont = <- blobChan
					//if p.SYS_VER == 666 {
					if p.SYS_VER == 777 {
						cStr := encrypter2(w,r,thisCont,ENCRYPTION_KEY)
						thisCont = string(cStr)
					}
					
				} else {
					thisCont = fmt.Sprintf("%v - %v", TITLE, DESC)
				}
				searchIdx := &IDX_TDSMEDIA{
					DOC_KEY: 			thisIdxKey,
					SEARCH_TYPE: 		"MEDIA",
					SOURCE_TYPE: 		DATA_TYPE,	
					SOURCE_TBL:  		"TDSMEDIA",	
					DESKTOP: 			CATEGORY,
					FL_SHARED:			FL_SHARED,
					DOC_STAT:			DOC_STAT,
					DOC_SCOPE_OVERALL:	"",
					DOC_SCOPE_COUNTRY:  "",
					DOC_SCOPE_REGION:  	"",
					DOC_SCOPE_CITY: 	"",
					DOC_SCOPE_BARANGAY: "",
					DOC_TITLE: 			TITLE,	
					DOC_DESC: 			DESC,
					DOC_AUTHOR:         uid,
					DOC_CONTENT_TEXT: 	thisCont,
					DOC_CONTENT_HTML: 	"",	
					DOC_CONTENT_ATOM: 	"",	
					DOC_NUM_LIKES:		NUM_LIKES,		
					DOC_NUM_COMMENTS:	NUM_COMMENTS,
					DOC_NUM_VIEWS:		NUM_VIEWS,
					CONTENT_URL: 		thisIdxURL,
					IMG_URL: 			thisURL,
					DATE_ADDED: 		tstamp,
					DATE_UPDATED: 		tstamp,
				}
				putSearchIndexM(w,r,"IDX_TDSMEDIA",thisIdxKey,searchIdx)
			}
			sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%v&DATA_TYPE=%s&TITLE=%v&BLOB_KEY=%v&IMG_URL=%v", MEDIA_ID, DATA_TYPE, TITLE, blobkey, thisURL)	
			http.Redirect(w, r, sysReq, http.StatusFound)
			//return
			
		case "UPLOAD-REP-MEDIA":
            //blobkey := string(file[0].BlobKey)
            blobkey := gcsObjectUrl
            MEDIA_ID2 := r.FormValue("MEDIA_ID")
			MEDIA_ID := str2int(MEDIA_ID2)
            DATA_TYPE := r.FormValue("DATA_TYPE")
            UID := r.FormValue("UID")
			if uid == "" {
				uid = UID
			}
			thisURL := ""
			switch {
				case DATA_TYPE == "image":
                    thisURL = gcsMediaUrl
				case DATA_TYPE == "text":
					//thisURL = "/static/img/text-icon.gif"
				case DATA_TYPE == "music":
					//thisURL = "/static/img/music.png"
				case DATA_TYPE == "video":
					//thisURL = "/static/img/video.png"
			}
			dsKey := fmt.Sprintf("%d", MEDIA_ID)
			key := datastore.NameKey("TDSMEDIA", dsKey, nil)
			q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
			//log.Panicf("[S0614]")
			media := make([]TDSMEDIA, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
				 panic(err)
				//return
              }
              //log.Printf("datastoreClient.Get()  [79054]")
			for _, p := range media {
				oldBlob := p.BLOB_KEY
				if DATA_TYPE == "image" {
					p.IMG_URL = thisURL
				}
				p.BLOB_KEY = blobkey	
				
				thisKey := fmt.Sprintf("%d", p.MEDIA_ID)
				key := datastore.NameKey("TDSMEDIA", thisKey, nil)
				_, err := datastoreClient.Put(c, key, &p)
				if err != nil {
					 panic(err)
					//return
                }
                //log.Printf("datastoreClient.Put()  [79069]")
				err = deleteGcsObject(c, oldBlob)
				if err != nil {
					log.Fatalf("ERROR: deleteGcsObject() %v", err)
				}
				tstamp := getTimestamp()
				//insert media into search idx
				thisIdxKey := fmt.Sprintf("TDSMEDIA-%d", p.MEDIA_ID)
				thisIdxURL := fmt.Sprintf("https://www.ulapph.com/media?FUNC_CODE=VIEW&MEDIA_ID=%d&IMG_URL=%v", p.MEDIA_ID, thisURL)
				thisCont := ""
				if DATA_TYPE == "text" {
					//thisCont = getBlobText(w, r, p.BLOB_KEY)
					blobChan := make(chan string)
					go getBlobTextChan(w, r,blobChan, p.BLOB_KEY)
					thisCont = <- blobChan
					//if p.SYS_VER == 666 {
					if p.SYS_VER == 777 {
						cStr := encrypter2(w,r,thisCont,ENCRYPTION_KEY)
						thisCont = string(cStr)
					}
				}
				searchIdx := &IDX_TDSMEDIA{
					DOC_KEY: 			thisIdxKey,
					SEARCH_TYPE: 		"MEDIA",
					SOURCE_TYPE: 		DATA_TYPE,	
					SOURCE_TBL:  		"TDSMEDIA",	
					DOC_AUTHOR:         uid,
					DOC_CONTENT_TEXT: 	thisCont,
					DOC_CONTENT_HTML: 	"",	
					DOC_CONTENT_ATOM: 	"",	
					DOC_NUM_LIKES:		float64(p.NUM_LIKES),		
					DOC_NUM_COMMENTS:	float64(p.NUM_COMMENTS),
					DOC_NUM_VIEWS:		float64(p.NUM_VIEWS),
					CONTENT_URL: 		thisIdxURL,
					IMG_URL: 			thisURL,
					DATE_ADDED: 		tstamp,
					DATE_UPDATED: 		tstamp,
				}

				putSearchIndexM(w,r,"IDX_TDSMEDIA",thisIdxKey,searchIdx)
				break
			}
			sysReq := fmt.Sprintf("/media?FUNC_CODE=VIEW&MEDIA_ID=%d&DATA_TYPE=%s&BLOB_KEY=%v&IMG_URL=%v", MEDIA_ID, DATA_TYPE, blobkey, thisURL)	
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
        default:
            //log.Printf("Redirecting to serve-media...")
			w.Header().Set("Access-Control-Allow-Origin", "*")
			w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT")
			UID := r.FormValue("UID")
			TYPE := r.FormValue("DATA_TYPE")
			TITLE := r.FormValue("TITLE")
			DESC := r.FormValue("DESC")
			CATEGORY := r.FormValue("CATEGORY")
			FL_SHARED := r.FormValue("FL_SHARED")
			FILE_NAME := r.FormValue("FILE_NAME")
			MIME_TYPE := r.FormValue("MIME_TYPE")
			FL_ADD_WP := r.FormValue("FL_ADD_WP")
			DOC_STAT := r.FormValue("DOC_STAT")
			EMBED := r.FormValue("EMBED")
			//D0066
			STRUWM := r.FormValue("STRUWM")
			STRUWMI := r.FormValue("STRUWMI")
			AUTOML := r.FormValue("AUTOML")
			PINKEY := r.FormValue("PINKEY")
			OPT := r.FormValue("OPT")
            //bKey := string(file[0].BlobKey)
            bKey := gcsObjectUrl
            mUrl := gcsMediaUrl
			reqStr := fmt.Sprintf("/serve-media/?DATA_TYPE=%s&TITLE=%s&DESC=%s&CATEGORY=%s&blobKey5=%v&FL_SHARED=%v&FILE_NAME=%v&MIME_TYPE=%v&FL_ADD_WP=%v&UID=%v&DOC_STAT=%v&EMBED=%v&OPT=%v&STRUWM=%v&STRUWMI=%v&AUTOML=%v&PINKEY=%v&murl=%v", TYPE, TITLE, DESC, CATEGORY, bKey, FL_SHARED, FILE_NAME, MIME_TYPE, FL_ADD_WP, UID, DOC_STAT, EMBED, OPT, STRUWM, STRUWMI, AUTOML, PINKEY, mUrl)
			http.Redirect(w, r, reqStr, http.StatusFound)
	}
}

//common for serving errors 
func serveError(c context.Context, w http.ResponseWriter, err error) {
        w.WriteHeader(http.StatusInternalServerError)
        w.Header().Set("Content-Type", "text/plain")
        io.WriteString(w, "Internal Server Error")
        ////log.Panicf("%v", err)
}
 
//golang SLIDES
//checks if play is enabled inside a slide
func playable(c Code) bool {
	return PlayEnabled && c.Play
}

//gets available themes
func getAvailThemes(w http.ResponseWriter, r *http.Request, SID, con_url string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
	//_, uid := checkSession(w,r)
    datastoreClient := createClientDS()
	////log.Printf("getAvailThemes()")
	cKey := "SYSTEM_AVAIL_THEMES"
	cKey2 := fmt.Sprintf("SYSTEM_AVAIL_THEMES_CACHE_%v", SID)
	cKey3 := "SYSTEM_AVAIL_THEMES_CACHE_GEN"
	
	FL_WIDGET := false
	if SID == "" && con_url == "" {
		////log.Printf("getBytMemcacheValueByKey(cKey3)")
		tc := getBytMemcacheValueByKey(w,r,cKey3)
		if tc != nil {
			w.Write(tc)
			return
		}
	
		FL_WIDGET = true
		//return
	}
	////log.Printf("getBytMemcacheValueByKey(cKey3)")
	tc := getBytMemcacheValueByKey(w,r,cKey3)
	if tc != nil && FL_WIDGET == false {
		w.Write(tc)
		return
	}
	////log.Printf("getBytMemcacheValueByKey(cKey)")
	tlist := getStrMemcacheValueByKey(w,r,cKey)
	
	if tlist == "" {
		////log.Printf("datastore.NameKey(tlist)")
		key := datastore.NameKey("TDSCNFG", cKey, nil)
		//get current config
		q := datastore.NewQuery("TDSCNFG").Filter("__key__ =", key)
		//log.Panicf("[S0616]")
		config := make([]TDSCNFG, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
			//panic(err)
        }
        //log.Printf("datastoreClient.Get()  [79200]")
		for _, x := range config {
			tlist = x.TXT_VAL
			////log.Printf("putStrToMemcacheWithoutExp(tlist)")
			putStrToMemcacheWithoutExp(w,r,cKey,tlist)
			break
		}
	}
 
	//display simple list of themes
	SPL := strings.Split(tlist, ",")
	if len(SPL) > 0 {
		////log.Printf("display simple list of themes")
		var buf bytes.Buffer
		if FL_WIDGET == false {
			buf.WriteString("<h1>Select your theme...<h1>")
		} else {
			//ok
		}
		
		for i:=0; i < len(SPL); i++ {
			if SPL[i] != "" {
				docID := str2int(strings.TrimSpace(SPL[i]))
				if docID > 0 {
					_, _, TITLE, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, DESC, _ := getTDSMEDIABlobKey(w, r, docID)
					if FL_WIDGET == false {
						buf.WriteString(fmt.Sprintf("<h2><a href=\"%v&theme_media_id=%v\"><img src=\"/static/img/theme.png\" width=50 height=50 title=\"Apply theme\">%v - %v</a></h2>", con_url, docID, TITLE, DESC))
						buf.WriteString(fmt.Sprintf("<h4>[SID: TDSMEDIA-%v] [By: %v] [Accessible: %v] [Shared: %v]</h4>", docID, AUTHOR, DOC_STAT, FL_SHARED))	
					} else {
						buf.WriteString(fmt.Sprintf("<h2>%v - %v</h2>", TITLE, DESC))
						buf.WriteString(fmt.Sprintf("<h4>[SID: TDSMEDIA-%v] [By: %v] [Accessible: %v] [Shared: %v] [Option: --THEME_MEDIA_ID=%v]</h4>", docID, AUTHOR, DOC_STAT, FL_SHARED, docID))						
					}
				}	
			}
		}
		if FL_WIDGET == false {
			putBytesToMemcacheWithoutExp(w,r,cKey2,buf.Bytes())
		} else {
			putBytesToMemcacheWithoutExp(w,r,cKey3,buf.Bytes())
		}
		w.Write(buf.Bytes())
	} else {
		fmt.Fprintf(w, "No themes available")
	}
	
}
//gets slides template 
func getSlidesTemplate(w http.ResponseWriter, r *http.Request) string {
	if SYS_STATELESS_SERVER == true {
		return ""
	}
	//_, uid := checkSession(w,r)
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	cKey := "SYSTEM_SLIDES_TEMPLATE"
	templ := ""
	
	utemp := r.FormValue("theme_url")
	if utemp != "" {
		templ = fetchURL(w,r,utemp)
		return templ
	}
	stemp := r.FormValue("theme_media_id")
	FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
	if stemp == "" && FL_COUNTRY_SPECIFIC != "" {
		stemp = checkSpecialOptions(w,r,"T",FL_COUNTRY_SPECIFIC)	
	}
	
	isDemo := false
	if stemp != "" {
		isDemo = true
	} else {
		templ = getStrMemcacheValueByKey(w,r,cKey)
	}
	cfgName := "SYSTEM_SLIDES_SETTINGS"
	if strings.TrimSpace(templ) == "" && isDemo == false {
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		//get current config
		q := datastore.NewQuery("TDSCNFG").Filter("__key__ =", key)
		//log.Panicf("[S0616]")
		config := make([]TDSCNFG, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
			//panic(err)
        }
        //log.Printf("datastoreClient.Get()  [79286]")
		for _, x := range config {
			stemp = fmt.Sprintf("%v",x.NUM_VAL)
			putStrToMemcacheWithoutExp(w,r,cfgName,stemp)
			break
		}
	}
	//D0069
	if stemp != "" && (isDemo == true || templ == "") {
		sid := "TDSMEDIA-"+stemp
		BLOB_KEY := contentCheckSid(w,r,sid)
		templ = getBlobText(w, r, BLOB_KEY)	
	}
	if isDemo == false {
		putStrToMemcacheWithoutExp(w,r,cKey,templ)
	}
	return templ
}
//D0116
//gets slides template
//for locally served templates from goserve 
func getSlidesTemplateLocal(w http.ResponseWriter, r *http.Request, fname string) string {
	if SYS_STATELESS_SERVER == true {
		return ""
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("Opening Template: %v", fname))
    file, err := os.Open(fname)
    if err != nil {
        log.Fatal(err)
    }
    defer file.Close()
    tempRaw, err := ioutil.ReadAll(file)
    if err != nil {
        log.Fatal(err)
    }
	return string(tempRaw)
}
//gets article template 
func getArticlesTemplate(w http.ResponseWriter, r *http.Request) string {
	if SYS_STATELESS_SERVER == true {
		return ""
	}
	//_, uid := checkSession(w,r)
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	cKey := "SYSTEM_ARTICLES_TEMPLATE"
	templ := ""
	
	utemp := r.FormValue("theme_url")
	if utemp != "" {
		templ = fetchURL(w,r,utemp)
		return templ
	}
	atemp := r.FormValue("theme_media_id")
	FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
	if atemp == "" && FL_COUNTRY_SPECIFIC != "" {
		atemp = checkSpecialOptions(w,r,"T",FL_COUNTRY_SPECIFIC)	
	}
	isDemo := false
	if atemp != "" {
		isDemo = true
	} else {
		templ = getStrMemcacheValueByKey(w,r,cKey)
	}
	cfgName := "SYSTEM_ARTICLES_SETTINGS"
	if strings.TrimSpace(templ) == "" && isDemo == false {
		key := datastore.NameKey("TDSCNFG", cfgName, nil)
		//get current config
		q := datastore.NewQuery("TDSCNFG").Filter("__key__ =", key)
		//log.Panicf("[S0616]")
		config := make([]TDSCNFG, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &config); err != nil {
			//panic(err)
        }
        //log.Printf("datastoreClient.Get()  [79344]")
		for _, x := range config {
			atemp = fmt.Sprintf("%v",x.NUM_VAL)
			putStrToMemcacheWithoutExp(w,r,cfgName,atemp)
			break
		}
	}
	if atemp != "" && (isDemo == true || templ == "") {
		sid := "TDSMEDIA-"+atemp
 
		BLOB_KEY := contentCheckSid(w,r,sid)
		templ = getBlobText(w, r, BLOB_KEY)
 
	}
	if isDemo == false {
		putStrToMemcacheWithoutExp(w,r,cKey,templ)
	}
 
	return templ
}
//D0116
//gets article template for locally served templates from goserve
func getArticlesTemplateLocal(w http.ResponseWriter, r *http.Request, fname string) string {
	if SYS_STATELESS_SERVER == true {
		return ""
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("Opening Template: %v", fname))
    file, err := os.Open(fname)
    if err != nil {
        log.Fatal(err)
    }
    defer file.Close()
    tempRaw, err := ioutil.ReadAll(file)
    if err != nil {
        log.Fatal(err)
    }
	return string(tempRaw)
}
//parses a template 
func parsePresentTemplate(name string) *template.Template {
	t := Template()
	t = t.Funcs(template.FuncMap{"playable": playable})
	if _, err := t.ParseFiles("templates/"+name, "templates/action-template.txt"); err != nil {
		panic(err)
	}
	t = t.Lookup("root")
	if t == nil {
		panic("root template not found for " + name)
	}
	return t
}

//D0064
//parses a template 
func parsePresentTemplate2(name string) *template.Template {
	t := Template()
	t = t.Funcs(template.FuncMap{"playable": playable})
	if _, err := t.ParseFiles("templates/"+name, "templates/action-template-turnjs.txt"); err != nil {
		panic(err)
	}
	t = t.Lookup("root")
	if t == nil {
		panic("root template not found for " + name)
	}
	return t
}

//parses a custom template
func parseCustomTemplatePres(tempt string) *template.Template {
	t := Template()
	t = t.Funcs(template.FuncMap{"playable": playable})
	if _, err := t.Parse(tempt); err != nil {
		//panic(err)
		return nil
	}
	t = t.Lookup("root")
	if t == nil {
		return nil
	}
	return t
}

//renders a custom template
func renderCustomTemplates(w http.ResponseWriter, r *http.Request, mode, cKey, text, mid string) error {
	//c := appengine.NewContext(r)
	////log.Printf("renderCustomTemplates")
	tempt := ""
	switch {
		case mode == "gotId" && mid != "":
			////log.Printf("gotId...")
			sid := "TDSMEDIA-"+mid
			BLOB_KEY := contentCheckSid(w,r,sid)
			////log.Printf("BLOB_KEY: %v", BLOB_KEY)
			tempt = getBlobText(w, r, BLOB_KEY)
		default:
			log.Panicf("invalid mode")
			return errors.New("template error: mode error")
	}
	if tempt == "" {
		log.Panicf("blob error")
		return errors.New("template error: blob empty")
	}
	t := Template()
	////log.Printf("parseCustomTemplateReg...")
	t = parseCustomTemplateReg(tempt)
	if t == nil {
		log.Panicf("template error")
		return errors.New("template error: parse error")
	}
	var doc *Doc
	data := struct {
		*Doc
		Template    *template.Template
		PlayEnabled bool
	}{
		doc,
		t,
		true,
	}
	////log.Printf("data: %v", data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return err
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	return err
}

//parses regular templates 
func parseCustomTemplateReg(tempt string) *template.Template {
	t := Template()
	//t = t.Funcs(template.FuncMap{"playable": playable})
	t = t.Funcs(sprig.FuncMap())
	if _, err := t.Parse(tempt); err != nil {
		panic(err)
	}
	t = t.Lookup("root")
	if t == nil {
		panic("root template not found for custom")
	}
	return t
}
//renders slides or articles
//in ulapph cloud desktop, content is separated from templates
//it automatically renders data given the slide/article templates 
func renderPresentation(w http.ResponseWriter, r *http.Request, y io.Writer, fname string, doc *Doc, sl_tmp string) error {
	//log.Printf("renderPresentation()")
	//c := appengine.NewContext(r)
	t := Template()
	////log.Printf("renderPresentation")
	////log.Printf("sl_tmp: %v", sl_tmp)
	if sl_tmp != "" && SYS_ENABLE_TEMPLATES == true && SYS_STATELESS_SERVER == false {
		////log.Printf("SYS_ENABLE_TEMPLATES")
		tempt := ""
		switch sl_tmp {
			case "S":
				////log.Printf("getSlidesTemplate")
				tempt = getSlidesTemplate(w,r)
			case "A":
				////log.Printf("getArticlesTemplate")
				tempt = getArticlesTemplate(w,r)
			//D0116
			//support for goserve locally served slides/articles
			case "SL":
				////log.Printf("getSlidesTemplate")
				tempt = getSlidesTemplateLocal(w,r,fname)
			case "AL":
				////log.Printf("getArticlesTemplate")
				tempt = getArticlesTemplateLocal(w,r,fname)
		}
		if tempt != "" {
			////log.Printf("tempt: %v", tempt)
			t = parseCustomTemplatePres(tempt)
			if t == nil {
				t = presentTemplates[path.Ext(fname)]
			}
		} else {
			////log.Printf("fname: %v", fname)
			t = presentTemplates[path.Ext(fname)]
		}
	} else {
		////log.Printf("fname: %v", fname)
		t = presentTemplates[path.Ext(fname)]
	}
	if t == nil {
		//return errors.New("unknown template extension")
		log.Panicf("template error")
		return errors.New("template error")
	}
	data := struct {
		*Doc
		Template    *template.Template
		PlayEnabled bool
	}{
		doc,
		t,
		true,
	}
	//fmt.Fprintf(w, "data: %v<br>", data)
	//D0043
	//return t.Execute(y, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00186] Template error: %v", err))
		msgTyp := "error"
		action := "U00186"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return err
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(y)
	}
	return err
}

//renders custom css style templates 
func renderStyleCssTemplates(w http.ResponseWriter, r *http.Request, extName, TASK_MEMCACHER_desktopWP_loginWP, TASK_MEMCACHER_desktopWP_bigWP string) {
	//fmt.Fprintf(w, "renderPresentation: %v<br>", doc)
	//fmt.Fprintf(w, "fname: %v<br>", fname)
	t := presentTemplates[path.Ext(extName)]
	if t == nil {
		panic(t)
	}
 
	//doc := new(TEMPSTRUCT2)
	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= TASK_MEMCACHER_desktopWP_loginWP
	doc.STR_FILLER2 = TASK_MEMCACHER_desktopWP_bigWP
		
	data := struct {
		
		*TEMPSTRUCT
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		//http.Error(w, fmt.Sprintf("%v", err), http.StatusBadRequest) // HTTP 400 status
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	
}

//gets basic random colors 
func getBasicColors(w http.ResponseWriter, r *http.Request) *TEMPSTRUCT {
	col := new(TEMPSTRUCT)
	col.STR_FILLER1 = getStartColor(w,r)
	col.STR_FILLER2 = getInActiveColor(w,r)
	col.STR_FILLER3 = getActiveColor(w,r)
	col.STR_FILLER4 = ""
	return col
}

//checks if user specified to randomized colors 
func isRandomColors(w http.ResponseWriter, r *http.Request, uid string) string {
	if SYS_UWM_RAN_COLORS == true {
		return "Y"
	}
	cfgName := "SYS_UWM_RAN_COLORS_"+uid
	sysConf := getStrMemcacheValueByKey(w,r,cfgName)
	if sysConf == "Y" {
		return sysConf
	} else {
		if sysConf == "" {
			//get from config
			sysConf, _ = getTDSCNFG(w,r,0,cfgName)
		}
	}
	return sysConf
}

//gets the start color 
func getStartColor(w http.ResponseWriter, r *http.Request) string {
	//getStartMenu color
	_, uid := checkSession(w,r)
	if isRandomColors(w,r,uid) == "Y" {
		color1, _, _ := getRandomColors()
		return color1
	}
	cKey := fmt.Sprintf("START_MENU_COLOR_%v", uid)
	color := ""
	color = getStrMemcacheValueByKey(w,r,cKey)
	if strings.TrimSpace(color) == "" {
		cfgName := fmt.Sprintf("PERSONAL_StartMenu_Color_%v", uid)
		color, _ = getTDSCNFG(w,r,0,cfgName)
		cKey := fmt.Sprintf("START_MENU_COLOR_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,color)
	}
	if color == "" {
		color = fmt.Sprintf("#%v", SYS_SLIDE_COLOR)
	}
	return color
}

//renders custom style css template 
func renderStyleCssTemplates2(w http.ResponseWriter, r *http.Request) {
	color := getStartColor(w,r)
	t := presentTemplates[path.Ext(".style-css2")]
	if t == nil {
		panic(t)
	}
    if color == "#" {
        color, _, _ = getRandomColors()
    }
	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= color
	_, _, thisRanWp := getRandomWp()
    doc.STR_FILLER2	= thisRanWp
	
	data := struct {
		
		*TEMPSTRUCT
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}

//renders custom style css template 
func renderStaticTemplatesTree(w http.ResponseWriter, r *http.Request, SID, TITLE, DISP string) {
        t := presentTemplates[path.Ext(".ui-tree")]
        if t == nil {
                panic(t)
        }
        doc := new(TEMPSTRUCT)
        doc.STR_FILLER1 = SID
        doc.STR_FILLER2 = TITLE
        doc.STR_FILLER3 = DISP
        data := struct {
                *TEMPSTRUCT
                Template    *template.Template
        }{
                doc,
                t,
        }
        //t.Execute(w, &data)
        buf := &bytes.Buffer{}
        err := t.Execute(buf, &data)
        if err != nil {
                // Send back error message, for example:
                msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
                msgTyp := "error"
                action := "U00187"
                sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
                http.Redirect(w, r, sysReq, http.StatusFound)
                return
        } else {
                // No error, send the content, HTTP 200 response status implied
                buf.WriteTo(w)
        }
}
//D0098
// MediaSorter sorts TDSMEDIA by MEDIA_ID.
type MediaSorter []TDSMEDIA

func (a MediaSorter) Len() int           { return len(a) }
func (a MediaSorter) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
//func (a MediaSorter) Less(i, j int) bool { return a[i].MEDIA_ID < a[j].MEDIA_ID }
func (a MediaSorter) Less(i, j int) bool { return a[i].DT_UPLOAD < a[j].DT_UPLOAD }
//D0098
//renders custom style css template 
func renderStaticTemplatesCctv(w http.ResponseWriter, r *http.Request) {
        t := presentTemplates[path.Ext(".cctv-stream-local")]
        if t == nil {
                panic(t)
        }
        doc := new(TEMPSTRUCT)
		//get database
		//curl --data-ascii q='{"n": [{"int-from": 20200302014426, "int-to": 20200302024426, "in": ["MEDIA_ID"]}]}' "http://localhost:6060/query?col=TDSMEDIA"
		tmedia, err := tiedotMediaCustomQuery(w,r)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("tiedotMediaCustomQuery() ERROR: %v", err))
			return
		}
        //doc.STR_FILLER1 = SID
        //doc.STR_FILLER2 = TITLE
        //doc.STR_FILLER3 = DISP
		//compose the cctv stream string
		//christine-cunanan(Cat Room)@888@https://link@888@1583088714@777@christine-cunanan(Cat Room)@888@https://link@888@1583088700@777@
		cctvStream := ""
		tot := 0
		var media []TDSMEDIA
		for k, v := range tmedia {
			ulapphDebug(w,r, "info", fmt.Sprintf("k: %v", k))
			ulapphDebug(w,r, "info", fmt.Sprintf("v: %v", v))
			thisItem := v
			ulapphDebug(w,r, "info", fmt.Sprintf("thisItem: %v", thisItem))
			p := TDSMEDIA {
				MEDIA_ID: thisItem.MEDIA_ID,
				TITLE: thisItem.TITLE,
				IMG_URL: thisItem.IMG_URL,
				DT_UPLOAD: thisItem.DT_UPLOAD,
			}
			media = append(media, p)
			//thisStr := fmt.Sprintf("%v@888@%v@888@%v", thisItem["TITLE"].(string), thisItem["IMG_URL"].(string), getUnixEpochByTimestamp(thisItem["DT_UPLOAD"].(string)))
			//cctvStream = fmt.Sprintf("%v@777@%v", cctvStream, thisStr)
			//tot++
		}
		//sort by media ID
		sort.Sort(MediaSorter(media))
		for _, p := range media {
			thisItem := fmt.Sprintf("%v@888@%v@888@%v", p.TITLE, p.IMG_URL, getUnixEpochByTimestamp(strconv.Itoa(p.DT_UPLOAD)))
			cctvStream = fmt.Sprintf("%v@777@%v", cctvStream, thisItem)
			tot++
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("cctvStream total: %v", tot))
		doc.STR_FILLER1 = cctvStream
        data := struct {
                *TEMPSTRUCT
                Template    *template.Template
        }{
                doc,
                t,
        }
        //t.Execute(w, &data)
        buf := &bytes.Buffer{}
        err = t.Execute(buf, &data)
        if err != nil {
                // Send back error message, for example:
                msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
                msgTyp := "error"
                action := "U00187"
                sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
                http.Redirect(w, r, sysReq, http.StatusFound)
                return
        } else {
                // No error, send the content, HTTP 200 response status implied
                buf.WriteTo(w)
        }
}
//renders custom style css template 
func renderStaticTemplatesMedia(w http.ResponseWriter, r *http.Request) {
        //t := presentTemplates[path.Ext(".slides-local")]
        //if t == nil {
        //        panic(t)
        //}
        //doc := new(TEMPSTRUCT)
		//get database
		//curl --data-ascii q='{"n": [{"int-from": 20200302014426, "int-to": 20200302024426, "in": ["MEDIA_ID"]}]}' "http://localhost:6060/query?col=TDSMEDIA"
		tmedia, err := tiedotMediaCustomQuery(w,r)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("tiedotMediaCustomQuery() ERROR: %v", err))
			return
		}
        //doc.STR_FILLER1 = SID
        //doc.STR_FILLER2 = TITLE
        //doc.STR_FILLER3 = DISP
		//compose the cctv stream string
		//christine-cunanan(Cat Room)@888@https://link@888@1583088714@777@christine-cunanan(Cat Room)@888@https://link@888@1583088700@777@
		//cctvStream := ""
		LIMIT := 0
		if r.FormValue("VIEW") == "RECENT" {
			LAST := r.FormValue("LAST")
			if LAST == "" {
				LIMIT = 2000
			} else {
				LIMIT = str2int(LAST)
			}
		}
		tot := 0
		var media []TDSMEDIA
		for k, v := range tmedia {
			ulapphDebug(w,r, "info", fmt.Sprintf("k: %v", k))
			ulapphDebug(w,r, "info", fmt.Sprintf("v: %v", v))
			thisItem := v
			//thisItem := v.(TDSMEDIA)
			ulapphDebug(w,r, "info", fmt.Sprintf("thisItem: %v", thisItem))
			p := TDSMEDIA {
				SYS_VER: 0,	
				MEDIA_ID: thisItem.MEDIA_ID,	
				//MEDIA_ID: time.Now().Unix(),
				DOC_ID: 0,	
				DATA_TYPE: thisItem.DATA_TYPE,
				PROP: thisItem.PROP,	
				//TITLE: TITLE,
				TITLE: thisItem.TITLE,
				DESC: thisItem.DESC,
				AUTHOR: thisItem.AUTHOR,			
				YEAR: thisItem.YEAR,	
				CATEGORY: thisItem.CATEGORY,	
				DOC_STAT: thisItem.DOC_STAT,
				FL_SHARED: thisItem.FL_SHARED,
				SHARED_TO: thisItem.SHARED_TO,
				IMG_URL: thisItem.IMG_URL,
				BLOB_KEY:  thisItem.BLOB_KEY,	
				DT_UPLOAD: thisItem.DT_UPLOAD,	
				NUM_LIKES: 0,	
				NUM_COMMENTS: 0,	
				LIKED_BY: "",	
				COMMENTS_BY: "",
				NUM_VIEWS: 0,
				MIME_TYPE: thisItem.MIME_TYPE,
			}
			//p = thisItem
			media = append(media, p)
			//thisStr := fmt.Sprintf("%v@888@%v@888@%v", thisItem["TITLE"].(string), thisItem["IMG_URL"].(string), getUnixEpochByTimestamp(thisItem["DT_UPLOAD"].(string)))
			//cctvStream = fmt.Sprintf("%v@777@%v", cctvStream, thisStr)
			tot++
			if tot >= LIMIT {
				break
			}
		}
		//sort by media ID
		sort.Sort(MediaSorter(media))
				//if mobile
				//FL_DESKTOP := checkDesktop(w,r)
				CATEGORY := fmt.Sprintf("%v",r.FormValue("CATEGORY"))
				//YEAR := r.FormValue("YEAR")
					if err := iconsSettingsTemplateHeaderMDAdmin.Execute(w, ""); err != nil {
						 panic(err)
					}
					//getCategories(w,r,uid)
					if err := rootTemplateMediaCategoryC.Execute(w, ""); err != nil {
						 panic(err)
					}
				uploadURL2 := "/upload-media"
				//w.Header().Set("Content-Type", "text/html")
				err = rootTemplateMediaA.Execute(w, uploadURL2)
				if err != nil {
						////log.Panicf("%v", err)
				}
				//getCategories(w,r,uid)
				err = rootTemplateMediaA2.Execute(w, CATEGORY)
				if err != nil {
						////log.Panicf("%v", err)
				}
				uploadURL3 := "/upload-media"
				err = rootTemplateMediaB.Execute(w, uploadURL3)
				if err != nil {
						////log.Panicf("%v", err)
				}
				//getCategories(w,r,uid)
				err = rootTemplateMediaB2.Execute(w, CATEGORY)
				if err != nil {
						////log.Panicf("%v", err)
					if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
					 panic(err)
					}
				}
				if err := mediaDispTemplateAdminHdr.Execute(w, media); err != nil {
					 panic(err)
				}
				for _, p := range media{
					ulapphDebug(w,r, "info", fmt.Sprintf("[row]: %v", p))
					//if p.AUTHOR == uid {
					if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
						if err := mediaDispTemplateAdminSwfs.Execute(w, &p); err != nil {
							 //panic(err)
							ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: %v", err))
						}
					} else {
						if err := mediaDispTemplateAdminRecs.Execute(w, &p); err != nil {
							 //panic(err)
							ulapphDebug(w,r, "error", fmt.Sprintf("ERROR: %v", err))
						}
					}
				}
				if err := infoDBTemplateTableFooter.Execute(w, ""); err != nil {
					 panic(err)
				}
		ulapphDebug(w,r, "info", fmt.Sprintf("Media total: %v", len(media)))

}
//D0098
// SlideSorter sorts TDSMEDIA by MEDIA_ID.
type SlideSorter []TDSSLIDE

func (a SlideSorter) Len() int           { return len(a) }
func (a SlideSorter) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
//func (a SlideSorter) Less(i, j int) bool { return a[i].MEDIA_ID < a[j].MEDIA_ID }
func (a SlideSorter) Less(i, j int) bool { return a[i].DT_UPLOAD < a[j].DT_UPLOAD }
//D0098
//renders custom style css template 
func renderStaticTemplatesSlides(w http.ResponseWriter, r *http.Request) {
        //t := presentTemplates[path.Ext(".slides-local")]
        //if t == nil {
        //        panic(t)
        //}
        //doc := new(TEMPSTRUCT)
		//get database
		//curl --data-ascii q='{"n": [{"int-from": 20200302014426, "int-to": 20200302024426, "in": ["MEDIA_ID"]}]}' "http://localhost:6060/query?col=TDSMEDIA"
		tslide, err := tiedotSlideCustomQuery(w,r)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("tiedotSlideCustomQuery() ERROR: %v", err))
			return
		}
        //doc.STR_FILLER1 = SID
        //doc.STR_FILLER2 = TITLE
        //doc.STR_FILLER3 = DISP
		//compose the cctv stream string
		//christine-cunanan(Cat Room)@888@https://link@888@1583088714@777@christine-cunanan(Cat Room)@888@https://link@888@1583088700@777@
		//cctvStream := ""
		LIMIT := 0
		if r.FormValue("VIEW") == "RECENT" {
			LAST := r.FormValue("LAST")
			if LAST == "" {
				LIMIT = 2000
			} else {
				LIMIT = str2int(LAST)
			}
		}
		tot := 0
		var slides []TDSSLIDE
		for k, v := range tslide {
			ulapphDebug(w,r, "info", fmt.Sprintf("k: %v", k))
			ulapphDebug(w,r, "info", fmt.Sprintf("v: %v", v))
			thisItem := v
			//thisItem := v.(TDSSLIDE)
			ulapphDebug(w,r, "info", fmt.Sprintf("thisItem: %v", thisItem))
			//thisFval := thisItem["DOC_ID"].(float64)
			DT_UPLOAD := thisItem.DT_UPLOAD 
			p := TDSSLIDE {
				TITLE: thisItem.TITLE,
				DT_UPLOAD: DT_UPLOAD,
				FL_COUNTRY_SPECIFIC: thisItem.FL_COUNTRY_SPECIFIC,
				SYS_VER: 0,
				DOC_ID: thisItem.DOC_ID,
				DOC_STAT: thisItem.DOC_STAT,
				DESC: thisItem.DESC,
				AUTHOR: thisItem.AUTHOR,
				YEAR: thisItem.YEAR,
				CATEGORY: thisItem.CATEGORY,
				TAGS: thisItem.TAGS,
				FL_SHARED: thisItem.FL_SHARED,
				SHARED_TO: thisItem.SHARED_TO,
				BLOB_URL: thisItem.BLOB_URL,
				//DT_UPLOAD: "",
				//NUM_LIKES: thisItem["NUM_LIKES"].(int),
				NUM_LIKES: 0,
				//NUM_COMMENTS: thisItem["NUM_COMMENTS"].(int),
				NUM_COMMENTS: 0,
				LIKED_BY: thisItem.LIKED_BY,
				COMMENTS_BY: thisItem.COMMENTS_BY,
				//NUM_VIEWS: thisItem["NUM_VIEWS"].(int64),
				NUM_VIEWS: int64(0),
				//MUSIC_ID: thisItem["MUSIC_ID"].(int),
				MUSIC_ID: 0,
				GET_NEXT: thisItem.GET_NEXT,
			}
			//p := thisItem
			slides = append(slides, p)
			//thisStr := fmt.Sprintf("%v@888@%v@888@%v", thisItem["TITLE"].(string), thisItem["IMG_URL"].(string), getUnixEpochByTimestamp(thisItem["DT_UPLOAD"].(string)))
			//cctvStream = fmt.Sprintf("%v@777@%v", cctvStream, thisStr)
			tot++
			if tot >= LIMIT {
				break
			}
		}
		//sort by slides ID
		sort.Sort(SlideSorter(slides))
		//for _, p := range slides {
			//thisItem := fmt.Sprintf("%v@888@%v@888@%v", p.TITLE, p.IMG_URL, getUnixEpochByTimestamp(p.DT_UPLOAD))
			//cctvStream = fmt.Sprintf("%v@777@%v", cctvStream, thisItem)
			//if r.FormValue("VIEW") == "RECENT" {
			//	LAST := r.FormValue("LAST")
			//	LIMIT := 0
			//	if LAST == "" {
			//		LIMIT = 2000
			//	} else {
			//		LIMIT = str2int(LAST)
			//	}
					
				//q := datastore.NewQuery("TDSSLIDE").Order("-DOC_ID").Limit(LIMIT)
				//log.Panicf("[S0168]")
				//recCount, _  := datastoreClient.Count(c,q)
				//slides := make([]TDSSLIDE, 0, recCount)
				//log.Printf("datastoreClient.Get() [27047]")
				//if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
				//	 panic(err)
				//}	
				//dummy
				CATEGORY := ""
				if err := infoDBTemplateHeaderSlidesAdmin.Execute(w, CATEGORY); err != nil {
					 panic(err)
				}	
				if err := rootTemplateSlidesCategory.Execute(w, CATEGORY); err != nil {
					 panic(err)
				}
				//getCategories(w,r,uid)
				if err := rootTemplateSlidesCategoryB.Execute(w, CATEGORY); err != nil {
					 panic(err)
				}
				csn2 := getUpUrlString(w,r,"/upload-slides")
				uploadURL2 := csn2
				err = rootTemplateSlidesA.Execute(w, uploadURL2)
				if err != nil {
						////log.Panicf("%v", err)
				}
				//getCategories(w,r,uid)
				err = rootTemplateSlidesB.Execute(w, CATEGORY)
				if err != nil {
						////log.Panicf("%v", err)
				}
				//display slides w/ music
					if err := slidesDispTemplateAdminHdr.Execute(w, slides); err != nil {
					 panic(err)
				}
				for _, p := range slides{
					//if p.AUTHOR == uid {
						if err := slidesDispTemplateAdminRecsMineRecent.Execute(w, &p); err != nil {
							 panic(err)
						}
					//}
				}
				if err := infoDBTemplateTableFooter.Execute(w, ""); err != nil {
					 panic(err)
				}
			//}
			//tot++
		//}
		ulapphDebug(w,r, "info", fmt.Sprintf("Slides total: %v", len(slides)))
}
//D0098
// ArticleSorter sorts TDSMEDIA by MEDIA_ID.
type ArticleSorter []TDSARTL

func (a ArticleSorter) Len() int           { return len(a) }
func (a ArticleSorter) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
//func (a ArticleSorter) Less(i, j int) bool { return a[i].MEDIA_ID < a[j].MEDIA_ID }
func (a ArticleSorter) Less(i, j int) bool { return a[i].DT_UPLOAD < a[j].DT_UPLOAD }
//D0098
//renders custom style css template 
func renderStaticTemplatesArticles(w http.ResponseWriter, r *http.Request) {
        //t := presentTemplates[path.Ext(".articles-local")]
        //if t == nil {
        //        panic(t)
        //}
        //doc := new(TEMPSTRUCT)
		//get database
		//curl --data-ascii q='{"n": [{"int-from": 20200302014426, "int-to": 20200302024426, "in": ["MEDIA_ID"]}]}' "http://localhost:6060/query?col=TDSMEDIA"
		tarticle, err := tiedotArticleCustomQuery(w,r)
		if err != nil {
			ulapphDebug(w,r, "critical", fmt.Sprintf("tiedotArticleCustomQuery() ERROR: %v", err))
			return
		}
        //doc.STR_FILLER1 = SID
        //doc.STR_FILLER2 = TITLE
        //doc.STR_FILLER3 = DISP
		//compose the cctv stream string
		//christine-cunanan(Cat Room)@888@https://link@888@1583088714@777@christine-cunanan(Cat Room)@888@https://link@888@1583088700@777@
		//cctvStream := ""
		LIMIT := 0
		if r.FormValue("VIEW") == "RECENT" {
			LAST := r.FormValue("LAST")
			if LAST == "" {
				LIMIT = 2000
			} else {
				LIMIT = str2int(LAST)
			}
		}
		tot := 0
		var articles []TDSARTL
		for k, v := range tarticle {
			ulapphDebug(w,r, "info", fmt.Sprintf("k: %v", k))
			ulapphDebug(w,r, "info", fmt.Sprintf("v: %v", v))
			thisItem := v
			//thisItem := v.(TDSARTL)
			ulapphDebug(w,r, "info", fmt.Sprintf("thisItem: %v", thisItem))
			DT_UPLOAD := thisItem.DT_UPLOAD 
			p := TDSARTL {
				TITLE: thisItem.TITLE,
				DT_UPLOAD: DT_UPLOAD,
				FL_COUNTRY_SPECIFIC: thisItem.FL_COUNTRY_SPECIFIC,
				SYS_VER: 0,
				DOC_ID: thisItem.DOC_ID,
				DOC_STAT: thisItem.DOC_STAT,
				DESC: thisItem.DESC,
				AUTHOR: thisItem.AUTHOR,
				YEAR: thisItem.YEAR,
				CATEGORY: thisItem.CATEGORY,
				TAGS: thisItem.TAGS,
				FL_SHARED: thisItem.FL_SHARED,
				SHARED_TO: thisItem.SHARED_TO,
				BLOB_URL: thisItem.BLOB_URL,
				NUM_LIKES: 0,
				NUM_COMMENTS: 0,
				LIKED_BY: thisItem.LIKED_BY,
				COMMENTS_BY: thisItem.COMMENTS_BY,
				NUM_VIEWS: int64(0),
				MUSIC_ID: 0,
			}
			//p := thisItem
			articles = append(articles, p)
			//thisStr := fmt.Sprintf("%v@888@%v@888@%v", thisItem["TITLE"].(string), thisItem["IMG_URL"].(string), getUnixEpochByTimestamp(thisItem["DT_UPLOAD"].(string)))
			//cctvStream = fmt.Sprintf("%v@777@%v", cctvStream, thisStr)
			tot++
			if tot >= LIMIT {
				break
			}
		}
		//sort by articles ID
		sort.Sort(ArticleSorter(articles))
		//for _, p := range articles {
			//thisItem := fmt.Sprintf("%v@888@%v@888@%v", p.TITLE, p.IMG_URL, getUnixEpochByTimestamp(p.DT_UPLOAD))
			//cctvStream = fmt.Sprintf("%v@777@%v", cctvStream, thisItem)
			//if r.FormValue("VIEW") == "RECENT" {
			//	LAST := r.FormValue("LAST")
			//	LIMIT := 0
			//	if LAST == "" {
			//		LIMIT = 2000
			//	} else {
			//		LIMIT = str2int(LAST)
			//	}
					
				//q := datastore.NewQuery("TDSARTL").Order("-DOC_ID").Limit(LIMIT)
				//log.Panicf("[S0168]")
				//recCount, _  := datastoreClient.Count(c,q)
				//articles := make([]TDSARTL, 0, recCount)
				//log.Printf("datastoreClient.Get() [27047]")
				//if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
				//	 panic(err)
				//}	
				CATEGORY := ""
				if err := infoDBTemplateHeaderArticlesAdmin.Execute(w, CATEGORY); err != nil {
					 panic(err)
				}	
				if err := rootTemplateArticlesCategory.Execute(w, CATEGORY); err != nil {
					 panic(err)
				}
				//getCategories(w,r,uid)
				if err := rootTemplateArticlesCategoryB.Execute(w, CATEGORY); err != nil {
					 panic(err)
				}
				csn2 := getUpUrlString(w,r,"/upload-articles")
				uploadURL2 := csn2
				err = rootTemplateArticlesA.Execute(w, uploadURL2)
				if err != nil {
						////log.Panicf("%v", err)
				}
				//getCategories(w,r,uid)
				err = rootTemplateArticlesB.Execute(w, CATEGORY)
				if err != nil {
						////log.Panicf("%v", err)
				}
				if err := articlesDispTemplateAdminHdr.Execute(w, articles); err != nil {
					 panic(err)
				}
				for _, p := range articles{
					//if p.AUTHOR == uid {
						if err := articlesDispTemplateAdminRecsMineRecent.Execute(w, &p); err != nil {
							 panic(err)
						}
					//}
				}
				if err := infoDBTemplateTableFooter.Execute(w, ""); err != nil {
					 panic(err)
				}
			//}
			//tot++
		//}
		ulapphDebug(w,r, "info", fmt.Sprintf("Articles total: %v", len(articles)))
}
//render style css with random colors 
func renderStyleCssColored(w http.ResponseWriter, r *http.Request, name string) {
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= getStartColor(w,r)
	doc.STR_FILLER2	= getActiveColor(w,r)
	doc.STR_FILLER3	= getInActiveColor(w,r)
		
	data := struct {
		
		*TEMPSTRUCT
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	
}

//renders countdown timer page 
func renderCountdownPage(w http.ResponseWriter, r *http.Request, name, title, date, color1, color2, color3 string) {
 
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}
 
	doc := new(TEMPSTRUCT2)
	doc.STR_FILLER1	= title
	doc.STR_FILLER2	= date
	doc.STR_FILLER3	= color1
	doc.STR_FILLER4	= color2
	doc.STR_FILLER5	= color3
		
	data := struct {
		*TEMPSTRUCT2
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	
}

//renders a button link for uwm
func renderButtonLink(w http.ResponseWriter, r *http.Request, name, turl, title string) {
 
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}
 
	doc := new(TEMPSTRUCT2)
	doc.STR_FILLER1	= title
	doc.STR_FILLER2	= turl
		
	data := struct {
		*TEMPSTRUCT2
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	
}
//D0070
//this template handles how we generate timelines 
func renderTimelineForm(w http.ResponseWriter, r *http.Request, name, keyword string, cats []byte) {
	//c := appengine.NewContext(r)
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT)
	doc.HTM_FILLER1 = template.HTML(string(cats))
	tc := time.Now()
	doc.STR_FILLER1 = fmt.Sprintf("%v", tc.Format("Mon Jan _2 15:04:05 2006"))
    doc.STR_FILLER2 = keyword 
	data := struct {
		*TEMPSTRUCT
		Template    *template.Template
	}{
		doc,
		t,
	}
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}

//renders add to uwm page
//this template handles how we add new windows in a uwm desktop 
func renderAddUWMPage(w http.ResponseWriter, r *http.Request, name, uid, n, d string) {
	//c := appengine.NewContext(r)
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= d
	doc.STR_FILLER2	= n
	doc.STR_FILLER3	= uid
	doc.BOOL_FILLER1 = true
	//get cache
	cKeyAll2 := fmt.Sprintf("STARTWIN_CACHE_%v", uid)
	mens := getBytMemcacheValueByKey(w,r,cKeyAll2)
	if mens == nil {
		//force refresh
		doc.BOOL_FILLER1 = false
	}
	doc.HTM_FILLER1 = template.HTML(string(mens))
	data := struct {
		*TEMPSTRUCT
		Template    *template.Template
	}{
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}

//D0044
//renders installer page
func renderInstallerPage(w http.ResponseWriter, r *http.Request, name, uid string) {
	t := presentTemplates[path.Ext(name)]
	if t == nil {
		panic(t)
	}
 
	//doc := new(TEMPSTRUCT2)
	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= uid
	//D0047
	doc.STR_FILLER2	= sillyname.GenerateStupidName()
	//get cache
		
	data := struct {
		
		*TEMPSTRUCT
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	
}

//gets active color 
func getActiveColor(w http.ResponseWriter, r *http.Request) string {
	//c := appengine.NewContext(r)
	_, uid := checkSession(w,r)
	if isRandomColors(w,r,uid) == "Y" {
		_, color2, _ := getRandomColors()
		return color2	
	}
	
	cKey := fmt.Sprintf("ACT_WIN_COLOR_%v", uid)
	actColor := ""
	actColor = getStrMemcacheValueByKey(w,r,cKey)
	
	if strings.TrimSpace(actColor) == "" {
		cfgName := fmt.Sprintf("PERSONAL_ActiveWindows_Color_%v", uid)
		actColor, _ = getTDSCNFG(w,r,0,cfgName)
		cKey := fmt.Sprintf("ACT_WIN_COLOR_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,actColor)
	}
	
	if actColor == "" {
		//actColor = "#06c9c9"
		actColor = fmt.Sprintf("#%v", SYS_SLIDE_FROM)
	}
	
	return actColor
}

//gets inactive color 
func getInActiveColor(w http.ResponseWriter, r *http.Request) string {
	//c := appengine.NewContext(r)
	_, uid := checkSession(w,r)
	if isRandomColors(w,r,uid) == "Y" {
		_, _, color3 := getRandomColors()
		return color3
	}
	
	cKey := fmt.Sprintf("INACT_WIN_COLOR_%v", uid)
	inActColor := ""
	inActColor = getStrMemcacheValueByKey(w,r,cKey)
	
	if strings.TrimSpace(inActColor) == "" {
		cfgName := fmt.Sprintf("PERSONAL_InActiveWindows_Color_%v", uid)
		inActColor, _ = getTDSCNFG(w,r,0,cfgName)
		cKey := fmt.Sprintf("INACT_WIN_COLOR_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,inActColor)
	}
	
	if inActColor == "" {
		//inActColor = "#056f6f"
		inActColor = fmt.Sprintf("#%v", SYS_SLIDE_TO)
	}
	
	return inActColor
}
//gets the preferred service provider
//either Google or Microsoft 
func getAppsProvider(w http.ResponseWriter, r *http.Request) string {
	//c := appengine.NewContext(r)
	var bSrc bytes.Buffer
    if SYS_ALL_PROVIDERS == true {
        //show the consolidate cloud menu
        SYS_PROV_MENU := readDefaultMenu(w,r,"ulapph-cloud-menu.txt")
		//bSrc.WriteString(fmt.Sprintf("%v", SYS_PROV_MENU))
		bSrc.Write(SYS_PROV_MENU)
        //return string(SYS_PROV_MENU)
    }
    if SYS_AI_INTENTS == true {
        //show the ai menu
        SYS_AI_MENU := readDefaultMenu(w,r,"ulapph-ai-menu.txt")
		bSrc.Write(SYS_AI_MENU)
		//bSrc.WriteString(fmt.Sprintf("%v", SYS_AI_MENU))
        //return string(SYS_PROV_MENU)
    }
	if SYS_ALL_PROVIDERS == true {
		return bSrc.String()
	}
	_, uid := checkSession(w,r)
	cKey := fmt.Sprintf("APPS_PROVIDER_%v", uid)
	appsProv := ""
	appsProv = getStrMemcacheValueByKey(w,r,cKey)
 
	if appsProv == "" {
		cfgName := fmt.Sprintf("PERSONAL_Apps_Provider_%v", uid)
		appsProv, _ = getTDSCNFG(w,r,0,cfgName)
		cKey := fmt.Sprintf("APPS_PROVIDER_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,appsProv)
	}
	
	appsProvText := ""
 
	switch appsProv {
		case "MSFT":
			cKey := fmt.Sprintf("PROVIDER_APPS_MSFT")
			//appsProvText := ""
			appsProvText = getStrMemcacheValueByKey(w,r,cKey)
			if appsProvText == "" {
 
				appsProvText = fetchURL(w,r,GITURL_PROVIDER_MSFT)
				putStrToMemcacheWithoutExp(w,r,cKey,appsProvText)
			}
		
		
		case "DB":
			
			cKey := fmt.Sprintf("PROVIDER_APPS_DB")
			//appsProvText := ""
			appsProvText = getStrMemcacheValueByKey(w,r,cKey)
			if appsProvText == "" {
 
				appsProvText = fetchURL(w,r,GITURL_PROVIDER_DB)
				putStrToMemcacheWithoutExp(w,r,cKey,appsProvText)
			}
			
		default:
			
			cKey := fmt.Sprintf("PROVIDER_APPS_GOGL")
			//appsProvText := ""
			appsProvText = getStrMemcacheValueByKey(w,r,cKey)
			if appsProvText == "" {
 
				appsProvText = fetchURL(w,r,GITURL_PROVIDER_GOGL)
				putStrToMemcacheWithoutExp(w,r,cKey,appsProvText)
			}
	}
 
	return appsProvText
	
}

//gets user privacy settings
//user can become incognito in ulapph cloud desktop 
func userPrivacy(w http.ResponseWriter, r *http.Request) string {
	//c := appengine.NewContext(r)
	
	_, uid := checkSession(w,r)
	cKey := fmt.Sprintf("PERSONAL_PRIVACY_%v", uid)
	userPriv := ""
	userPriv = getStrMemcacheValueByKey(w,r,cKey)
	
	if userPriv == "" {
		cfgName := fmt.Sprintf("PERSONAL_Privacy_%v", uid)
		userPriv, _ = getTDSCNFG(w,r,0,cfgName)
		cKey := fmt.Sprintf("PERSONAL_PRIVACY_%v", uid)
		putStrToMemcacheWithoutExp(w,r,cKey,userPriv)
	}
	if userPriv == "" {
		userPriv = "NORMAL"
	}
	return userPriv
	
}

//renders JSWM css templates 
func renderJSWMStyleCssTemplates(w http.ResponseWriter, r *http.Request) {
 
	actColor := getActiveColor(w,r)	
	
	inActColor := getInActiveColor(w,r)
	
	t := presentTemplates[path.Ext(".jswm-style-css")]
	if t == nil {
		panic(t)
	}
    if actColor == "#" || inActColor == "#" {
        _, actColor, inActColor = getRandomColors()
    }
	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= actColor
	doc.STR_FILLER2 = inActColor
		
	data := struct {
		
		*TEMPSTRUCT
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	
}

//renders social sharing template 
func renderSocialSharing(w http.ResponseWriter, r *http.Request, title, turl string) {
	t := presentTemplates[path.Ext(".social-sharing")]
	if t == nil {
		panic(t)
	}
	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= turl
	doc.STR_FILLER2 = title
	data := struct {
		*TEMPSTRUCT
		Template    *template.Template
	}{
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}

//render 3d message
func renderMessage3D(w http.ResponseWriter, r *http.Request, message string) {
 
	t := presentTemplates[path.Ext(".3d-message")]
	if t == nil {
		panic(t)
	}
 
	//doc := new(TEMPSTRUCT2)
	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= message
		
	data := struct {
		
		*TEMPSTRUCT
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}

//renders static templates 
func renderStaticTemplates(w http.ResponseWriter, r *http.Request, extName string) {
	t := presentTemplates[path.Ext(extName)]
	if t == nil {
		panic(t)
	}

	doc := new(TEMPSTRUCT)	
	data := struct {
		*TEMPSTRUCT
		Template    *template.Template
	}{
		doc,
		t,
	}
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
}
//D0078
//renders static templates 
func renderStaticNewsSources(w http.ResponseWriter, r *http.Request, sources []byte) {
	//c := appengine.NewContext(r)
	//log.Printf("renderStaticNewsSources...")
	ns := new(NewsApiSources)
	err := json.Unmarshal(sources,ns)
	if err != nil {
		log.Panicf("ns: %v", ns)
		return
	}
	doc := new(Doc)
	if len(ns.Sources) > 0 {
		for i := 0; i < len(ns.Sources); i++ {
			//privacy := fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-privacy", ns.Sources[i].ID))
			g := GotoMyUlapphs {
				Picture: ns.Sources[i].Country,
				UserID: ns.Sources[i].Name,
				Url: ns.Sources[i].ID,
				Privacy: "",
			}
			doc.Ulapphs = append(doc.Ulapphs, g)
		}
	} else {
		fmt.Fprintf(w, "Apologies, no sources found!")
		return
	}
	//parse template
        t := presentTemplates[path.Ext(".news-sources")]
        if t == nil {
                panic(t)
        }
        data := struct {
                *Doc
                Template    *template.Template
        }{
                doc,
                t,
        }
        //t.Execute(w, &data)
        buf := &bytes.Buffer{}
        err = t.Execute(buf, &data)
        if err != nil {
                // Send back error message, for example:
                msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
                msgTyp := "error"
                action := "U00187"
                sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
                http.Redirect(w, r, sysReq, http.StatusFound)
                return
        } else {
                // No error, send the content, HTTP 200 response status implied
                buf.WriteTo(w)
        }
}
//renders static templates 
func renderStaticTrackerSelectUser(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	////u := user.Current(c)
	IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
	//if this server is not sites server
	if IS_SEARCH_SERVER == "Y" {
		fmt.Fprintf(w, "Invalid operation")
		return
	}
	urlStr := fmt.Sprintf("%v/search?f=GET_MAP_LIST&esk=%v", SEARCH_SERVER, EXT_SEARCH_GEN_KEY)
	//log.Printf("urlStr: %v", urlStr) 
	//client := urlfetch.Client(c)
	if err := r.ParseForm(); err != nil {
		log.Panicf("ERROR ParseForm(): %v", err) 
		panic(err)
	}
	resp, err := http.Get(urlStr)
	if err != nil {
		log.Panicf("ERROR client.Get: %v", err) 
		panic(err)
	}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	//log.Printf("bodyBytes: %v", bodyBytes)
	doc := new(Doc)
	var g []UlapphDesktops
	err = json.Unmarshal(bodyBytes, &g)
	if err != nil {
		panic(err)
	}
	doc.Desktops = g
	//parse template
        t := presentTemplates[path.Ext(".tracker-select")]
        if t == nil {
                panic(t)
        }
        data := struct {
                *Doc
                Template    *template.Template
        }{
                doc,
                t,
        }
        //t.Execute(w, &data)
        buf := &bytes.Buffer{}
        err = t.Execute(buf, &data)
        if err != nil {
                // Send back error message, for example:
                msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
                msgTyp := "error"
                action := "U00187"
                sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
                http.Redirect(w, r, sysReq, http.StatusFound)
                return
        } else {
                // No error, send the content, HTTP 200 response status implied
                buf.WriteTo(w)
        }
}

//renders static templates 
func renderStaticGotoMyUlapphs(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	////u := user.Current(c)
    //log.Printf("renderStaticGotoMyUlapphs...")
	mode := r.FormValue("m")
	urlArr := getMyULAPPH(w,r,mode)
	//log.Printf("urlArr: %v", urlArr)
	doc := new(Doc)
	if len(urlArr) > 0 {
		for i := 0; i < len(urlArr); i++ {
			SPX := strings.Split(urlArr[i], "|")
			//D0080
			pix := fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-logo", SPX[1]))
			privacy := fetchURL(w,r,fmt.Sprintf("%v/social?SO_FUNC=get-privacy", SPX[1]))
			if len(SPX) == 5 {
				pix = SPX[4]
			}
			g := GotoMyUlapphs {
				Picture: pix,
				UserID: SPX[0],
				Url: SPX[1],
				Privacy: privacy,
			}
			doc.Ulapphs = append(doc.Ulapphs, g)
		}
	} else {
		fmt.Fprintf(w, "<b>Hello</b>, <font color=red>your account is not yet connected</font> to any ULAPPH server. <br><a href=\"https://github.com/edwindvinas/ULAPPH-Cloud-Desktop\">Click here</a> to install your own cloud desktop for free. <br>If not interested, kindly <a href=\"/logout\">logout</a>.")
		fmt.Fprintf(w, "<br>For questions, you can also chat with a human by clicking this <a href=\"http://bit.ly/2VXdh1g\">chat link</a>. Just note that the chat agent is not always online!")
	}
	//parse template
        t := presentTemplates[path.Ext(".goto-ulapph")]
        if t == nil {
                panic(t)
        }
        data := struct {
                *Doc
                Template    *template.Template
        }{
                doc,
                t,
        }
        //t.Execute(w, &data)
        buf := &bytes.Buffer{}
        err := t.Execute(buf, &data)
        if err != nil {
                // Send back error message, for example:
                msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
                msgTyp := "error"
                action := "U00187"
                sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
                http.Redirect(w, r, sysReq, http.StatusFound)
                return
        } else {
                // No error, send the content, HTTP 200 response status implied
                buf.WriteTo(w)
        }
}

//renders static templates 
func renderStaticWithTEMPSTRUCT2(w http.ResponseWriter, r *http.Request, doc *TEMPSTRUCT2, extName string) {
	t := presentTemplates[path.Ext(extName)]
	if t == nil {
		panic(t)
	}
	data := struct {
		*TEMPSTRUCT2
		Template    *template.Template
	}{
		doc,
		t,
	}
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	
}
 
//render overquota error message template
func renderOverQuotaErrorTemplates(w http.ResponseWriter, r *http.Request) {
	t := presentTemplates[path.Ext(".overquota")]
	if t == nil {
		panic(t)
	}
 
	doc := new(TEMPSTRUCT)
	doc.STR_FILLER1	= getSchemeUrl(w,r)
	doc.STR_FILLER2 = html.UnescapeString(ADDTL_QUOTA_ERR_MSG)
		
	data := struct {
		
		*TEMPSTRUCT
		Template    *template.Template
	}{	
		doc,
		t,
	}
	//fmt.Fprintf(w, "%v", data)
	//t.Execute(w, &data)
	buf := &bytes.Buffer{}
	err := t.Execute(buf, &data)
	if err != nil {
		// Send back error message, for example:
		msgDtl := url.QueryEscape(fmt.Sprintf("[U00187] Template error: %v", err))
		msgTyp := "error"
		action := "U00187"
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	} else {
		// No error, send the content, HTTP 200 response status implied
		buf.WriteTo(w)
	}
	
}
 
 
type presFileNotFoundError string

//returns profile not found 
func (s presFileNotFoundError) Error() string { return fmt.Sprintf("File %s not found.", string(s)) }
 
//writes a usual 200 HTML header
func writeHTMLHeader(w http.ResponseWriter, status int) {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.WriteHeader(status)
}

//writes a text plain html header 
func writeTextHeader(w http.ResponseWriter, status int) {
	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
	w.WriteHeader(status)
}
 
type transport2 struct {
	rt http.RoundTripper
	ua string
}

//return roundtrip 
func (t transport2) RoundTrip(r *http.Request) (*http.Response, error) {
	r.Header.Set("User-Agent", t.ua)
	if r.URL.Host == "api.github.com" && gitHubCredentials != "" {
		if r.URL.RawQuery == "" {
			r.URL.RawQuery = gitHubCredentials
		} else {
			r.URL.RawQuery += "&" + gitHubCredentials
		}
	}
	return t.rt.RoundTrip(r)
}
//returns media details given a media id
func getTDSMEDIABlobKey(w http.ResponseWriter, r *http.Request, MEDIA_ID int) (BLOB_KEY, PROP, TITLE, AUTHOR, DOC_STAT, FL_SHARED, IMG_URL, DATA_TYPE, MIME_TYPE, DESC, SHARED_TO string) {
	//_, uid := checkSession(w,r)
	//billing fix
	if MEDIA_ID <= 0 {
		return
    }
    //D0086
    datastoreClient := createClientDS()
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
        defer cancel()
    cKey := fmt.Sprintf("TDSMEDIA_MEDID_CACHE_%v", MEDIA_ID)
	TDSMEDIA_MEDID_CACHE := ""
	FL_PROC_CACHE_OK := false
	TDSMEDIA_MEDID_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if TDSMEDIA_MEDID_CACHE != "" {
		//get from cache
		SPL := strings.Split(TDSMEDIA_MEDID_CACHE, CACHE_STORE_DELIM)
		if len(SPL) > 5 {
			BLOB_KEY = SPL[0]
			PROP = SPL[1]
			TITLE = SPL[2]
			AUTHOR = SPL[3]
			DOC_STAT = SPL[4]
			FL_SHARED = SPL[5]
			IMG_URL = SPL[6]
			DATA_TYPE = SPL[7]
			MIME_TYPE = SPL[8]
			DESC = SPL[9]
			SHARED_TO = SPL[10]
			
			FL_PROC_CACHE_OK = true
		}
	
	}
	
	if FL_PROC_CACHE_OK == false {
		dsKey := fmt.Sprintf("%d", MEDIA_ID)
		key := datastore.NameKey("TDSMEDIA", dsKey, nil)
		q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
		//log.Panicf("[S0621]")
 
		media := make([]TDSMEDIA, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		}
        //log.Printf("datastoreClient.Get()  [81064]")
		for _, p := range media{
 
			BLOB_KEY = p.BLOB_KEY
			PROP = p.PROP
			TITLE = p.TITLE
			AUTHOR = p.AUTHOR
			DOC_STAT = p.DOC_STAT
			FL_SHARED = p.FL_SHARED
			IMG_URL = p.IMG_URL
			DATA_TYPE = p.DATA_TYPE
			MIME_TYPE = p.MIME_TYPE
			DESC = p.DESC
			SHARED_TO = p.SHARED_TO
			
			//fmt.Fprintf(w, "BLOB_KEY: %v<br>", BLOB_KEY)
 
			TDSMEDIA_ARRAY := fmt.Sprintf("%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v",
											BLOB_KEY, 		CACHE_STORE_DELIM,
											PROP, 			CACHE_STORE_DELIM,
											TITLE, 		    CACHE_STORE_DELIM,
											AUTHOR, 		CACHE_STORE_DELIM,
											DOC_STAT, 		CACHE_STORE_DELIM,
											FL_SHARED, 		CACHE_STORE_DELIM,
											IMG_URL, 		CACHE_STORE_DELIM,
											DATA_TYPE,      CACHE_STORE_DELIM,
											MIME_TYPE,      CACHE_STORE_DELIM,
											DESC,      		CACHE_STORE_DELIM,
											SHARED_TO)
			putStrToMemcacheWithoutExp(w,r,cKey,TDSMEDIA_ARRAY)
			
			break
		}
	}
	return 	BLOB_KEY,
			PROP,
			TITLE,
			AUTHOR,
			DOC_STAT,
			FL_SHARED,
			IMG_URL,
			DATA_TYPE,
			MIME_TYPE,
			DESC,
			SHARED_TO
 
}
 
//returns slide details given a blobKey
func getTDSSLIDEBlobKey(w http.ResponseWriter, r *http.Request, DOC_ID int) (BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL, SHARED_TO, MUSIC_ID, GET_NEXT string) {
	//_, uid := checkSession(w,r)
	//billing fix
	if DOC_ID <= 0 {
		return
    }
    //D0086
    datastoreClient := createClientDS()
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //query media
	cKey := fmt.Sprintf("TDSSLIDE_DOCID_CACHE_%v", DOC_ID)
	TDSSLIDE_DOCID_CACHE := ""
	FL_PROC_CACHE_OK := false
	TDSSLIDE_DOCID_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if TDSSLIDE_DOCID_CACHE != "" {
		//get from cache
		SPL := strings.Split(TDSSLIDE_DOCID_CACHE, CACHE_STORE_DELIM)
		//BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL
		if len(SPL) > 9 {
			BLOB_KEY = SPL[0]
			PUB_STAT = SPL[1]
			FL_SHARED = SPL[2]
			AUTHOR = SPL[3]
			FL_COUNTRY_SPECIFIC = SPL[4]
			TITLE = SPL[5]
			IMG_URL = SPL[6]
			SHARED_TO = SPL[7]
			MUSIC_ID = SPL[8]
			GET_NEXT = SPL[9]
			FL_PROC_CACHE_OK = true
		}
	
	}
	
	if FL_PROC_CACHE_OK == false {
	
		dsKey := fmt.Sprintf("%d", DOC_ID)
		key := datastore.NameKey("TDSSLIDE", dsKey, nil)
		q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
		//log.Panicf("[S0622]")
		slide := make([]TDSSLIDE, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
			//check quota
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		}
        //log.Printf("datastoreClient.Get()  [81161]")
		for _, p := range slide{
			BLOB_KEY = p.BLOB_URL
			PUB_STAT = p.DOC_STAT
			FL_SHARED = p.FL_SHARED
			AUTHOR = p.AUTHOR
			FL_COUNTRY_SPECIFIC = p.FL_COUNTRY_SPECIFIC
			TITLE = p.TITLE
			IMG_URL = p.TAGS
			SHARED_TO = p.SHARED_TO
			MUSIC_ID = string(p.MUSIC_ID)
			GET_NEXT = p.GET_NEXT
			//fmt.Fprintf(w, "BLOB_KEY: %v<br>", BLOB_KEY)
			
			//create cache
			TDSSLIDE_ARRAY := fmt.Sprintf("%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v",
														BLOB_KEY,
															CACHE_STORE_DELIM,
														PUB_STAT,
															CACHE_STORE_DELIM,
														FL_SHARED,
															CACHE_STORE_DELIM,
														AUTHOR,
															CACHE_STORE_DELIM,
														FL_COUNTRY_SPECIFIC,
															CACHE_STORE_DELIM,
														TITLE,
															CACHE_STORE_DELIM,
														IMG_URL,
															CACHE_STORE_DELIM,
														SHARED_TO,
															CACHE_STORE_DELIM,
														MUSIC_ID,
															CACHE_STORE_DELIM,
														GET_NEXT)
			putStrToMemcacheWithoutExp(w,r,cKey,TDSSLIDE_ARRAY)
			
			break
		}
	}
	
	return BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL, SHARED_TO, MUSIC_ID, GET_NEXT
 
}
//returns articles details given a doc id 
func getTDSARTLBlobKey(w http.ResponseWriter, r *http.Request, DOC_ID int) (BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, IMG_URL, MUSIC_ID string) {
	ulapphDebug(w,r, "info", fmt.Sprintf("getTDSARTLBlobKey() %v", ""))
	ulapphDebug(w,r, "info", fmt.Sprintf("DOC_ID: %v", DOC_ID))
	//_, uid := checkSession(w,r)
	//billing fix
	if DOC_ID <= 0 {
		return
	}
    //D0086
    datastoreClient := createClientDS()
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //query media
	cKey := fmt.Sprintf("TDSARTL_DOCID_CACHE_%v", DOC_ID)
	TDSARTL_DOCID_CACHE := ""
	FL_PROC_CACHE_OK := false
	TDSARTL_DOCID_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if TDSARTL_DOCID_CACHE != "" {
		//get from cache
		SPL := strings.Split(TDSARTL_DOCID_CACHE, CACHE_STORE_DELIM)
		//BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL
		if len(SPL) > 5 {
			BLOB_KEY = SPL[0]
			PUB_STAT = SPL[1]
			FL_SHARED = SPL[2]
			AUTHOR = SPL[3]
			FL_COUNTRY_SPECIFIC = SPL[4]
			TITLE = SPL[5]
			IMG_URL = SPL[6]
			SHARED_TO = SPL[7]
			MUSIC_ID = SPL[8]
			FL_PROC_CACHE_OK = true
		}
	
	}
	
	if FL_PROC_CACHE_OK == false {
		article := make([]TDSARTL, 0, 1)
		if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
			article, _ = tiedotArticleQueryByDocId(w,r, DOC_ID)
		} else {
		dsKey := fmt.Sprintf("%d", DOC_ID)
		key := datastore.NameKey("TDSARTL", dsKey, nil)
		q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
		//log.Panicf("[S0623]")
		if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		}
		}
        //log.Printf("datastoreClient.Get()  [81252]")
		for _, p := range article{
			BLOB_KEY = p.BLOB_URL
			PUB_STAT = p.DOC_STAT
			FL_SHARED = p.FL_SHARED
			AUTHOR = p.AUTHOR
			SHARED_TO = p.SHARED_TO
			TITLE = p.TITLE
			IMG_URL = p.TAGS
			FL_COUNTRY_SPECIFIC = p.FL_COUNTRY_SPECIFIC
			MUSIC_ID = string(p.MUSIC_ID)
			//fmt.Fprintf(w, "BLOB_KEY: %v<br>", BLOB_KEY)
			
			TDSARTL_ARRAY := fmt.Sprintf("%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v",
													BLOB_KEY,
														CACHE_STORE_DELIM,
													PUB_STAT,
														CACHE_STORE_DELIM,
													FL_SHARED,
														CACHE_STORE_DELIM,
													AUTHOR,
														CACHE_STORE_DELIM,
													FL_COUNTRY_SPECIFIC,
														CACHE_STORE_DELIM,
													p.TITLE,
														CACHE_STORE_DELIM,
													p.TAGS,
														CACHE_STORE_DELIM,
													p.SHARED_TO,
														CACHE_STORE_DELIM,
													p.MUSIC_ID)
			putStrToMemcacheWithoutExp(w,r,cKey,TDSARTL_ARRAY)
			
			break
		}
	}
	return BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, IMG_URL, MUSIC_ID
 
}

//returns slide details given a blob key
func getTDSSLIDEDocID(w http.ResponseWriter, r *http.Request, BLOB_KEY string) (DOC_ID int, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, MUSIC_ID, GET_NEXT string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
	//_, uid := checkSession(w,r)
    datastoreClient := createClientDS()
	cKey := fmt.Sprintf("TDSSLIDE_BLOBKEY_CACHE_%v", BLOB_KEY)
	TDSSLIDE_BLOBKEY_CACHE := ""
	IMG_URL := ""
	FL_PROC_CACHE_OK := false
	TDSSLIDE_BLOBKEY_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if TDSSLIDE_BLOBKEY_CACHE != "" {
		//get from cache
		SPL := strings.Split(TDSSLIDE_BLOBKEY_CACHE, CACHE_STORE_DELIM)
		//BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL
		if len(SPL) > 9 {
			DOC_ID = str2int(SPL[0])
			PUB_STAT = SPL[1]
			FL_SHARED = SPL[2]
			AUTHOR = SPL[3]
			FL_COUNTRY_SPECIFIC = SPL[4]
			TITLE = SPL[5]
			IMG_URL = SPL[6]
			SHARED_TO = SPL[7]
			MUSIC_ID = SPL[8]
			GET_NEXT = SPL[9]
			FL_PROC_CACHE_OK = true
		}
	
	}
	
	if FL_PROC_CACHE_OK == false {
	
		q := datastore.NewQuery("TDSSLIDE").Filter("BLOB_URL =", BLOB_KEY).Limit(1)
		//log.Panicf("[S0624]")
		slide := make([]TDSSLIDE, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		}
        //log.Printf("datastoreClient.Get()  [81333]")
		for _, p := range slide{
			//BLOB_KEY = p.BLOB_URL
			DOC_ID = p.DOC_ID
			PUB_STAT = p.DOC_STAT
			FL_SHARED = p.FL_SHARED
			AUTHOR = p.AUTHOR
			FL_COUNTRY_SPECIFIC = p.FL_COUNTRY_SPECIFIC
			TITLE = p.TITLE
			IMG_URL = p.TAGS
			SHARED_TO = p.SHARED_TO
			MUSIC_ID = string(p.MUSIC_ID)
			GET_NEXT = p.GET_NEXT
			//fmt.Fprintf(w, "BLOB_KEY: %v<br>", BLOB_KEY)
			
			//create cache
			TDSSLIDE_ARRAY := fmt.Sprintf("%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v",
													DOC_ID,
														CACHE_STORE_DELIM,
													PUB_STAT,
														CACHE_STORE_DELIM,
													FL_SHARED,
														CACHE_STORE_DELIM,
													AUTHOR,
														CACHE_STORE_DELIM,
													FL_COUNTRY_SPECIFIC,
														CACHE_STORE_DELIM,
													TITLE,
														CACHE_STORE_DELIM,
													IMG_URL,
														CACHE_STORE_DELIM,
													SHARED_TO,
														CACHE_STORE_DELIM,
													MUSIC_ID,
														CACHE_STORE_DELIM,
													GET_NEXT)
			putStrToMemcacheWithoutExp(w,r,cKey,TDSSLIDE_ARRAY)
			
			break
		}
		
	}
		
	return DOC_ID, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, MUSIC_ID, GET_NEXT
 
}

//returns article details given a doc id 
func getTDSARTLDocID(w http.ResponseWriter, r *http.Request, BLOB_KEY string) (DOC_ID int, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, IMG_URL, MUSIC_ID string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    //D0086
	//_, uid := checkSession(w,r)
    datastoreClient := createClientDS()
	cKey := fmt.Sprintf("TDSARTL_BLOBKEY_CACHE_%v", BLOB_KEY)
	TDSARTL_BLOBKEY_CACHE := ""
	FL_PROC_CACHE_OK := false
	//IMG_URL := ""
	TDSARTL_BLOBKEY_CACHE = getStrMemcacheValueByKey(w,r,cKey)
	if TDSARTL_BLOBKEY_CACHE != "" {
		//get from cache
		SPL := strings.Split(TDSARTL_BLOBKEY_CACHE, CACHE_STORE_DELIM)
		//BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL
		if len(SPL) > 5 {
			//BLOB_KEY = SPL[0]
			DOC_ID = str2int(SPL[0])
			PUB_STAT = SPL[1]
			FL_SHARED = SPL[2]
			AUTHOR = SPL[3]
			FL_COUNTRY_SPECIFIC = SPL[4]
			TITLE = SPL[5]
			IMG_URL = SPL[6]
			SHARED_TO = SPL[7]
			MUSIC_ID = SPL[8]
			FL_PROC_CACHE_OK = true
		}
	
	}
	
	if FL_PROC_CACHE_OK == false {
 
		q := datastore.NewQuery("TDSARTL").Filter("BLOB_URL =", BLOB_KEY).Limit(1)
		//log.Panicf("[S0625]")
		article := make([]TDSARTL, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
			checkError(w,r,"",err,"CHK_OQ")
			 //panic(err)
		}
        //log.Printf("datastoreClient.Get()  [81421]")
		for _, p := range article{
			//BLOB_KEY = p.BLOB_URL
			DOC_ID = p.DOC_ID
			PUB_STAT = p.DOC_STAT
			FL_SHARED = p.FL_SHARED
			AUTHOR = p.AUTHOR
			SHARED_TO = p.SHARED_TO
			TITLE = p.TITLE
			FL_COUNTRY_SPECIFIC = p.FL_COUNTRY_SPECIFIC
			MUSIC_ID = string(p.MUSIC_ID)
			IMG_URL = p.TAGS
			//fmt.Fprintf(w, "BLOB_KEY: %v<br>", BLOB_KEY)
			
			TDSARTL_ARRAY := fmt.Sprintf("%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%v%s%d",
													DOC_ID,
														CACHE_STORE_DELIM,
													PUB_STAT,
														CACHE_STORE_DELIM,
													FL_SHARED,
														CACHE_STORE_DELIM,
													AUTHOR,
														CACHE_STORE_DELIM,
													FL_COUNTRY_SPECIFIC,
														CACHE_STORE_DELIM,
													p.TITLE,
														CACHE_STORE_DELIM,
													p.TAGS,
														CACHE_STORE_DELIM,
													p.SHARED_TO,
														CACHE_STORE_DELIM,
													p.TAGS,
														CACHE_STORE_DELIM,
													p.MUSIC_ID)
			putStrToMemcacheWithoutExp(w,r,cKey,TDSARTL_ARRAY)
			
			break
		}
	
	}
	
	return DOC_ID, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, IMG_URL, MUSIC_ID
 
}

//checks special options
//used FL_COUNTRY_SPECIFIC but it handles more than coutry specific checks
func checkSpecialOptions(w http.ResponseWriter, r *http.Request, mode, FL_COUNTRY_SPECIFIC string) (res string) {
	//c := appengine.NewContext(r)
	if strings.TrimSpace(FL_COUNTRY_SPECIFIC) == "" {
		return
	}
	switch mode {
		case "R":
			//if to be redirected
			if strings.Index(FL_COUNTRY_SPECIFIC, "--REDIRECT=") != -1 {
				SPL := strings.Split(FL_COUNTRY_SPECIFIC,"--")
				for i:=0; i < len(SPL); i++ {
					str := strings.TrimSpace(SPL[i])
					if str != "" {
						if strings.Index(str, "REDIRECT=") != -1 {
							SPR := strings.Split(str,"=")
							if len(SPR) > 1 {
								TARGET := SPR[1]
								validateURL(w,r,TARGET)
								res = TARGET
								break
							}					
						}
					}
				}
			}
		
		case "T":
			//if to be redirected
			if strings.Index(FL_COUNTRY_SPECIFIC, "--THEME_MEDIA_ID=") != -1 {
				SPL := strings.Split(FL_COUNTRY_SPECIFIC,"--")
				for i:=0; i < len(SPL); i++ {
					str := strings.TrimSpace(SPL[i])
					if str != "" {
						if strings.Index(str, "THEME_MEDIA_ID=") != -1 {
							SPR := strings.Split(str,"=")
							if len(SPR) > 1 {
								THEME_ID := SPR[1]
								res = THEME_ID
								break
							}					
						}
					}
				}
			}
	}
	return res
 
}

//handles /slides handler
//displays slides from http requests
//it serves owner and public requests to automatically render slides
func slides(w http.ResponseWriter, r *http.Request) {
	ulapphDebug(w,r, "info", fmt.Sprintf("slides() %v", ""))
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	checkHTTPS(w,r)
	//fmt.Fprintf(w, "func: slides<br>")
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    ////u := user.Current(c)
	uReferer := r.Referer()
	//h := r.Header
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	//if slides are redirected
	_, uid := checkSession(w,r)
	ulapphDebug(w,r, "info", fmt.Sprintf("uid: %v", uid))
	SID := r.FormValue("SID")
	//when fls in query
	FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
	SPC_RED := checkSpecialOptions(w,r,"R",FL_COUNTRY_SPECIFIC)
	if SPC_RED != "" && FL_COUNTRY_SPECIFIC != "" {
		http.Redirect(w, r, SPC_RED, http.StatusFound)
		return
	}
	BLOB_KEY := r.FormValue("BLOB_KEY")
	i := strings.Index(BLOB_KEY, "GET_WALL:")
	if i != -1 {
		//log num views
		time.AfterFunc(5*time.Second, func() {
            laterIncNumViewsSocial(c, "", SID, "SO_INC_NUM_VIEWS")
        })
        SPL := strings.Split(BLOB_KEY,"GET_WALL:")
		if len(SPL) > 1 {
			linkedUrl := SPL[1]
			linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
			http.Redirect(w, r, linkedUrl, http.StatusFound)
			return
		}
	}
	DESKTOP := r.FormValue("CATEGORY")
	if deskNum2Name(w,r,uid,DESKTOP) == "" {
		DESKTOP = "desktop0"
	}
	TYPE := r.FormValue("TYPE")
	TITLE := r.FormValue("TITLE")
	//BLOB_KEY := r.FormValue("BLOB_KEY")
	DOC_ID := r.FormValue("DOC_ID")
	//SID := r.FormValue("SID")
	FORCE := r.FormValue("FORCE")
	SOUND := r.FormValue("SOUND")
	MODE := r.FormValue("MODE")
	PARM := r.FormValue("PARM")
	SECS := r.FormValue("SECS")
	GOTO := r.FormValue("GOTO")


	PRESENTER_SESSION_KEY := r.FormValue("PRESENTER_SESSION_KEY")
	i = strings.Index(r.URL.String(), "@888@")
	if i != -1 {
		targetURL := strings.Replace(r.URL.String(), "@888@", "&", -1)
		z, err := url.Parse(targetURL)
		if err != nil {
			panic(err)
		}
		m, _ := url.ParseQuery(z.RawQuery)
		DOC_ID = m["DOC_ID"][0]	
		SID = m["SID"][0]
	}
	i = strings.Index(DOC_ID, "@888@")
	if i != -1 {
		SPL := strings.Split(DOC_ID,"@888@")
		DOC_ID = SPL[0]
		if SID == "" {
			SID = fmt.Sprintf("TDSSLIDE-%v", DOC_ID)
		}
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("BLOB_KEY: %v", BLOB_KEY))
	if BLOB_KEY == "" && DOC_ID == "" {
		redURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=%v", DESKTOP)
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	//SID := r.FormValue("SID")
	DOC_ID2 := 0
	if DOC_ID != "" {
		DOC_ID2 = str2int(DOC_ID)
	}
	//CTYPE := "SLIDES"
	PUB_STAT := ""
	FL_SHARED := ""
	SHARED_TO := ""
	AUTHOR := ""
	//FL_COUNTRY_SPECIFIC := ""
	IMG_URL := ""
	MUSIC_ID := ""
	GET_NEXT := ""
	SL_TMP := ""
	if SYS_RUNTIME_PLATFORM == "local" {
		ulapphDebug(w,r, "info", fmt.Sprintf("Calling servePresentation() %v", ""))
		servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, SOUND, DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, MUSIC_ID, GET_NEXT, AUTHOR, PUB_STAT, FL_SHARED)
		return
	}
	if DOC_ID != "" {
		//get blob key
		i := strings.Index(SID, "TDSSLIDE")
		if i == -1 {
			BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, IMG_URL, MUSIC_ID = getTDSARTLBlobKey(w, r, DOC_ID2)
		} else {
			BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, IMG_URL, SHARED_TO, MUSIC_ID, GET_NEXT = getTDSSLIDEBlobKey(w, r, DOC_ID2)
		}
		if BLOB_KEY == "" {
			http.Redirect(w, r, r.Referer(), http.StatusFound)	
			return
		}
	} else {
		i := strings.Index(SID, "TDSSLIDE")
		if i == -1 {
			_, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, IMG_URL, MUSIC_ID = getTDSARTLDocID(w, r, BLOB_KEY)
		} else {
			_, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, MUSIC_ID, GET_NEXT = getTDSSLIDEDocID(w, r, BLOB_KEY)
		}
	}
	SPC_RED = checkSpecialOptions(w,r,"R",FL_COUNTRY_SPECIFIC)
	if SPC_RED != "" && FL_COUNTRY_SPECIFIC != "" {
		http.Redirect(w, r, SPC_RED, http.StatusFound)
		return
	}
	//notify all users of this event via channels
	viaStr := getAccessString(w,r,"")
	msg := ""
	msgDtl3 := ""
	msgDtl3b := ""
	reqStr := ""
	//_, uid := checkSession(w,r)
	if uid == "" {
		msg = getGeoString(w,r)
		reqStr = fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&DOC_ID=%v&SID=%v&FORCE=%v&MODE=%v&PARM=%v&SECS=%v&TITLE=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=ON", DOC_ID, SID, FORCE, MODE, PARM, SECS, TITLE, MUSIC_ID, GET_NEXT)
		shareMe := fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"SLIDE-%v\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", TITLE, ShortenUrl(w,r,reqStr), TITLE)
		msgDtl3 = fmt.Sprintf("UID:%v has viewed SLIDE (<a href=\"%v\" target=\"preview\">%v <img src=\"%v\" width=100 height=70></a>) %v %v [%v]", msg, reqStr, TITLE, IMG_URL, shareMe, SID, viaStr)
		msgDtl3b = fmt.Sprintf("UID:%v has viewed SLIDE %v entitled \"%v\" [%v] LINK: %v", msg, SID, TITLE, viaStr, ShortenUrl(w,r,reqStr))
	}else{
		msg = uid
		reqStr = fmt.Sprintf("https://www.ulapph.com/slides?TYPE=SLIDE&DOC_ID=%v&SID=%v&FORCE=%v&MODE=%v&PARM=%v&SECS=%v&TITLE=%v&MUSIC_ID=%v&GET_NEXT=%v&SOUND=ON", DOC_ID, SID, FORCE, MODE, PARM, SECS, TITLE, MUSIC_ID, GET_NEXT)
		shareMe := fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"SLIDE-%v\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", TITLE, ShortenUrl(w,r,reqStr), TITLE)
		msgDtl3 = fmt.Sprintf("UID:%v has viewed SLIDE (<a href=\"%v\" target=\"preview\">%v <img src=\"%v\" width=100 height=70></a>) %v %v [%v]", msg, reqStr, TITLE, IMG_URL, shareMe, SID, viaStr)
		msgDtl3b = fmt.Sprintf("UID:%v has viewed SLIDE %v entitled \"%v\" [%v] LINK: %v", msg, SID, TITLE, viaStr, ShortenUrl(w,r,reqStr))
	}
	updateUserActiveData(w, r, c, msg, SID)
	FL_PROC_OK := false
	switch {
		case r.FormValue("auth") == "p" && validatePasscode(w,r,"slides",SHARED_TO, r.FormValue("passcode")) == true:
			FL_PROC_OK = true
		case PUB_STAT == "Premium" && uid != AUTHOR:
			auth := r.FormValue("auth")
			passcode := r.FormValue("passcode")
			sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=%v&auth=%v&passcode=%v", SID, auth, passcode)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		case FL_SHARED == "N":
			//c := appengine.NewContext(r)
			_, uid := checkSession(w,r)
			FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {return}
			if uid != AUTHOR {
				msgDtl := fmt.Sprintf("[U00106] ERROR: This slide DOC_ID (%s) is accessible only by the author.", DOC_ID)
				msgTyp := "error"
				msgURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=")
				action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
			}
			FL_PROC_OK = true
		case PUB_STAT == "Personal" && AUTHOR == uid:
			//break
			FL_PROC_OK = true
		case PUB_STAT == "Personal":
			//c := appengine.NewContext(r)
			//u := user.Current(c)
			uid := ""
			if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
				//uid = uid
				_, uid = checkSession(w,r)
			} else {
				uid = "@888@"
			}
			pc := r.FormValue("passcode")
			auth := r.FormValue("auth")
			if auth == "p" && pc != "" {
				uid = pc
			} else {
				uid = "@888@"
			}
			if auth == "p" && validatePasscode(w,r,"slides",SHARED_TO, pc) == true {
				//break
				FL_PROC_OK = true
			} else if (uid != AUTHOR) {
				msgDtl := fmt.Sprintf("[U00149] ERROR: This document (%s) is accessible only to select individuals. Kindly request access from author (%v).", SID, AUTHOR)
				//msgURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=")
				msgURL := r.URL.String()
				msgTyp := "error"
				action := "U00149"
				sysReq := fmt.Sprintf("/sysmsg?SID=%v&msgTyp=%v&message=%v&msgURL=%v&action=%v", SID, msgTyp, msgDtl, url.QueryEscape(msgURL), action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
			}
		case PUB_STAT == "ULAPPH Only":
			FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",uReferer)
			if FL_PROC_OK == false {
				return
			}
		case PUB_STAT == "Worldwide" && FL_SHARED == "Y":
			//send broadcast message
			encMsg := url.QueryEscape(msgDtl3)
			data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "SLIDE", msgDtl3b)
			ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
			time.AfterFunc(5*time.Second, func() {
                laterBroadcastContentsAll(c, encMsg)
			})
            FL_PROC_OK = true
	}
	if FL_PROC_OK == false {
		return
	}
	sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,msg,reqStr,SID),SID)
	//log num views
	time.AfterFunc(5*time.Second, func() {
        laterIncNumViewsSocial(c, "", SID, "SO_INC_NUM_VIEWS")
    })
    if SLIDE_SOUND_SET == "OFF" || SLIDE_SOUND_SET == "" {
		SOUND = "OFF"
	} else {
		SOUND = "ON"
	}
	switch {
	case r.Method != "GET" && r.Method != "HEAD":
		writeTextHeader(w, 405)
		io.WriteString(w, "Method not supported.")
	case r.URL.Path == "/":
		servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, SOUND, DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, MUSIC_ID, GET_NEXT, AUTHOR, PUB_STAT, FL_SHARED)
	default:
		servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, SOUND, DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, MUSIC_ID, GET_NEXT, AUTHOR, PUB_STAT, FL_SHARED)
	}
}
 
//handles /articles handler
//displays articles from http requests
//it serves owner and public requests to automatically render articles
func articles(w http.ResponseWriter, r *http.Request) {
	if SYS_DOWN_ENABLE == true {
        w.WriteHeader(200)
        w.Write([]byte("ULAPPH Cloud Desktop: Apologies, this site has been set by Admin to not serve any requests."))
		return
	}
	checkHTTPS(w,r)
	
	//fmt.Fprintf(w, "func: articles<br>")
	if FL_PROC_OK := checkQuotaSystem(w, r); FL_PROC_OK != true {return}
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
	    defer cancel()
    if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	_, uid := checkSession(w,r)
	FL_COUNTRY_SPECIFIC := r.FormValue("FL_COUNTRY_SPECIFIC")
	SPC_RED := checkSpecialOptions(w,r,"R",FL_COUNTRY_SPECIFIC)
	if SPC_RED != "" && FL_COUNTRY_SPECIFIC != "" {
		http.Redirect(w, r, SPC_RED, http.StatusFound)
		return		
	}
	
	BLOB_KEY := r.FormValue("BLOB_KEY")
	i := strings.Index(BLOB_KEY, "GET_WALL:")
	if i != -1 {
		SPL := strings.Split(BLOB_KEY,"GET_WALL:")
		if len(SPL) > 1 {
			linkedUrl := SPL[1]
			linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
			http.Redirect(w, r, linkedUrl, http.StatusFound)
			return
		}
		
	}
	
	DESKTOP := r.FormValue("CATEGORY")
	if deskNum2Name(w,r,uid,DESKTOP) == "" {
		DESKTOP = "desktop0"
	}
	TYPE := r.FormValue("TYPE")
	TITLE := r.FormValue("TITLE")
	BLOB_KEY = r.FormValue("BLOB_KEY")
	DOC_ID := r.FormValue("DOC_ID")
	FORCE := r.FormValue("FORCE")
	if BLOB_KEY == "" && DOC_ID == "" {
		redURL := fmt.Sprintf("/infodb?DB_FUNC=ARTICLES&CATEGORY=%v", DESKTOP)
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	SID := r.FormValue("SID")
	DOC_ID2 := 0
	if DOC_ID != "" {
		DOC_ID2 = str2int(DOC_ID)
	}
	MODE := r.FormValue("MODE")
	PARM := r.FormValue("PARM")
	SECS := r.FormValue("SECS")
	GOTO := r.FormValue("GOTO")
	PRESENTER_SESSION_KEY := r.FormValue("PRESENTER_SESSION_KEY")
	//CTYPE := "ARTICLES"
	PUB_STAT := ""
	FL_SHARED := ""
	SHARED_TO := ""
	AUTHOR := ""
	//FL_COUNTRY_SPECIFIC := ""
	IMG_URL := ""
	MUSIC_ID := ""
        SL_TMP := ""
	
	if SYS_RUNTIME_PLATFORM == "local" {
		ulapphDebug(w,r, "info", fmt.Sprintf("Calling servePresentation() %v", ""))
		servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, "", DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, "", "", AUTHOR, PUB_STAT, FL_SHARED)
		return
	}
	if DOC_ID != "" {
		//get blob key
		i := strings.Index(SID, "TDSARTL")
		if i == -1 {
			BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, _, IMG_URL, SHARED_TO, _, _ = getTDSSLIDEBlobKey(w, r, DOC_ID2)
			
		} else {
			BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE,  SHARED_TO, IMG_URL, MUSIC_ID = getTDSARTLBlobKey(w, r, DOC_ID2)
		}
		
		if BLOB_KEY == "" {
			http.Redirect(w, r, r.Referer(), http.StatusFound)	
			return
		}
	} else {
		//fmt.Fprintf(w, "DOC_ID == \"\"; DOC_ID2: %v<br>", DOC_ID2)
		_, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, IMG_URL, MUSIC_ID = getTDSARTLDocID(w, r, BLOB_KEY)
	}
	
	SPC_RED = checkSpecialOptions(w,r,"R",FL_COUNTRY_SPECIFIC)
	if SPC_RED != "" && FL_COUNTRY_SPECIFIC != "" {
		http.Redirect(w, r, SPC_RED, http.StatusFound)
		return		
	}
	
	//notify all users of this event via channels
	viaStr := getAccessString(w,r,"")
 	msg := ""
	msgDtl3 := ""
	msgDtl3b := ""
	reqStr := ""
	//_, uid := checkSession(w,r)
	if uid == "" {
		msg := getGeoString(w,r)
		reqStr = fmt.Sprintf("https://www.ulapph.com/articles?TYPE=ARTICLE&DOC_ID=%v&SID=%v&FORCE=%v&TITLE=%v&MUSIC_ID=%v", DOC_ID, SID, FORCE, TITLE, MUSIC_ID)
		shareMe := fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"ARTICLE-%v\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", TITLE, ShortenUrl(w,r,reqStr), TITLE)
		msgDtl3 = fmt.Sprintf("UID:%v has viewed ARTICLE (<a href=\"%v\" target=\"preview\">%v <img src=\"%v\" width=100 height=70></a>) %v %v [%v]", msg, reqStr, TITLE, IMG_URL, shareMe, SID, viaStr)
		msgDtl3b = fmt.Sprintf("UID:%v has viewed ARTICLE %v entitled \"%v\" [%v] LINK: %v", msg, SID, TITLE, viaStr, ShortenUrl(w,r,reqStr))
	}else{
		msg = uid
		reqStr = fmt.Sprintf("https://www.ulapph.com/slides?TYPE=ARTICLE&DOC_ID=%v&SID=%v&FORCE=%v&TITLE=%v", DOC_ID, SID, FORCE, TITLE)
		shareMe := fmt.Sprintf("<a href=\"https://www.ulapph.com/share?SH_FUNC=all&title=%v&url=%v\" target=\"ARTICLE-%v\" title=\"Share to social networks!\"><img src=\"/static/img/sharethis.png\" width=40 height=40></a>", TITLE, ShortenUrl(w,r,reqStr), TITLE)
		msgDtl3 = fmt.Sprintf("UID:%v has viewed ARTICLE (<a href=\"%v\" target=\"preview\">%v <img src=\"%v\" width=100 height=70></a>) %v %v [%v]", msg, reqStr, TITLE, IMG_URL, shareMe, SID, viaStr)
		msgDtl3b = fmt.Sprintf("UID:%v has viewed ARTICLE %v entitled \"%v\" [%v] LINK: %v", msg, SID, TITLE, viaStr, ShortenUrl(w,r,reqStr))
	 }
	 updateUserActiveData(w, r, c, msg, SID)
	 sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,msg,reqStr,SID),SID)
 
	FL_PROC_OK := false
	
	switch {
		case r.FormValue("auth") == "p" && validatePasscode(w,r,"articles",SHARED_TO, r.FormValue("passcode")) == true:
			FL_PROC_OK = true
 
		case PUB_STAT == "Premium" && uid != AUTHOR:
			auth := r.FormValue("auth")
			passcode := r.FormValue("passcode")
			sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=%v&auth=%v&passcode=%v", SID, auth, passcode)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
	
		case FL_SHARED == "N":
			_, uid := checkSession(w,r)
			FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			if uid != AUTHOR {
				msgDtl := fmt.Sprintf("[U00108] ERROR: This article DOC_ID (%s) is accessible only by the author.", DOC_ID)
				//sendEvent(w,r,FDBKMAIL,msgDtl)
				msgTyp := "error"
				msgURL := fmt.Sprintf("/infodb?DB_FUNC=ARTICLES&CATEGORY=")
				action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing articles.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
			FL_PROC_OK = true
 
		case PUB_STAT == "Personal" && AUTHOR == uid:
			//break
			FL_PROC_OK = true
			
		case PUB_STAT == "Personal":
 
			//fmt.Fprintf(w, "PUB_STAT == \"Personal\"")
			//c := appengine.NewContext(r)
			//u := user.Current(c)
 
			uid := ""
			if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
				//uid = uid
				_, uid = checkSession(w,r)
			} else {
				uid = "@888@"
			}
			pc := r.FormValue("passcode")
			auth := r.FormValue("auth")
			if auth == "p" && pc != "" {
				uid = pc
			} else {
				uid = "@888@"
			}
 
			if auth == "p" && validatePasscode(w,r,"articles",SHARED_TO, pc) == true {
				//break
				FL_PROC_OK = true
			} else if (uid != AUTHOR) {
				msgDtl := fmt.Sprintf("[U00151a] ERROR: This DOC_ID (%s) is accessible only to select individuals. Kindly request access from author.", DOC_ID)
				//msgTyp := "error"
				msgURL := fmt.Sprintf("/infodb?DB_FUNC=ARTICLE&CATEGORY=")
				//action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing articles.", msgURL)
				msgTyp := "error"
				action := "U00151"
				sysReq := fmt.Sprintf("/sysmsg?SID=%v&msgTyp=%v&message=%v&msgURL=%v&action=%v", SID, msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
			}
			
		case PUB_STAT == "ULAPPH Only":
			FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {
				return
			}
			
		case PUB_STAT == "Worldwide" && FL_SHARED == "Y":
			//send broadcast message
			encMsg := url.QueryEscape(msgDtl3)
			data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ARTICLE", msgDtl3b)
			ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
			time.AfterFunc(5*time.Second, func() {
                laterBroadcastContentsAll(c, encMsg)
            })
            FL_PROC_OK = true
	
	}
 
	if FL_PROC_OK == false {
		return
	}
	sendMessage(w, r, ADMMAIL, "CH_MSG_NOTIFY_EVENTS", msgDtl3, "", getMapLink(w,r,msg,reqStr,SID),SID)
	
	//log num views
	time.AfterFunc(5*time.Second, func() {
        laterIncNumViewsSocial(c, "", SID, "SO_INC_NUM_VIEWS")
    })
	switch {
	case r.Method != "GET" && r.Method != "HEAD":
		writeTextHeader(w, 405)
		io.WriteString(w, "Method not supported.")
	case r.URL.Path == "/":
		servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, "", DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, "", "", AUTHOR, PUB_STAT, FL_SHARED)
	default:
		servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, "", DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, "", "", AUTHOR, PUB_STAT, FL_SHARED)
	}
}

//handles rendering of slides if presenter mode
func presenter(w http.ResponseWriter, r *http.Request) {
	checkHTTPS(w,r)
	
	SL_TMP := ""
	//c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
	//    defer cancel()
    //u := user.Current(c)
	_, uid := checkSession(w,r)
	h := r.Header
	if FL_PROC_OK := countryChecker(w,r); FL_PROC_OK != true {return}
	DESKTOP := r.FormValue("CATEGORY")
	if deskNum2Name(w,r,uid,DESKTOP) == "" {
		DESKTOP = "desktop0"
	}	
	TYPE := r.FormValue("TYPE")
	GOTO := r.FormValue("GOTO")
	TITLE := r.FormValue("TITLE")
	BLOB_KEY := r.FormValue("BLOB_KEY")
	UID := fmt.Sprintf("%v",r.FormValue("UID"))
	DOC_ID := r.FormValue("DOC_ID")
	FORCE := r.FormValue("FORCE")
	SID := r.FormValue("SID")
	SOUND := r.FormValue("SOUND")
	MUSIC_ID := r.FormValue("MUSIC_ID")
	GET_NEXT := r.FormValue("GET-NEXT")
	DOC_ID2 := 0
	if DOC_ID != "" {
		DOC_ID2 = str2int(DOC_ID)
	}
	MODE := r.FormValue("MODE")
	PARM := r.FormValue("PARM")
	SECS := r.FormValue("SECS")
	SLEN := r.FormValue("SLEN")
	PRESENTER_SESSION_KEY := r.FormValue("PRESENTER_SESSION_KEY")
	PRESENTER_FUNC := r.FormValue("PRESENTER_FUNC")
	PRESENTER_VAL := r.FormValue("PRESENTER_VAL")
	//CTYPE := "PRESENTER"
	//fmt.Fprintf(w, "MODE: %s<br>", MODE)
	PUB_STAT := ""
	FL_SHARED := ""
	SHARED_TO := ""
	AUTHOR := ""
	FL_COUNTRY_SPECIFIC := ""
	SESSION_FUNC := ""
	IMG_URL := ""
 
	cm := strings.Index(MODE, "@888@")
	if cm != -1 {
		
		_, uid := checkSession(w,r)
		SPL := strings.Split(MODE, "@888@")
		
		SYS_RC_HOST_LIST := getWallHosts(w,r)
		
		TEMPDATA := TEMPSTRUCT2{
			STR_FILLER1: uid,
			//STR_FILLER2: SPL[7],
			STR_FILLER2: SPL[1],
			HTM_FILLER1: template.HTML(SYS_RC_HOST_LIST),
		}
		
		if err := mobileControl.Execute(w, &TEMPDATA); err != nil {
			 panic(err)
		}
		//when remote control
		sendChannelMessage(w,r,uid,"<img src=\"/static/img/swipe.png\" width=128 height=128>")
		//auto-open viewer
		data := fmt.Sprintf("@888@ULAPPH-SYS-UPD@888@SYS_OPEN_WINDOW@888@/tools?FUNC=WIDGET&t=RemoteControl")
		sendChannelMessage(w,r,uid,data)
		
		return
		
	}
	
	if MODE == "PRESENTER" && PRESENTER_SESSION_KEY == ""{
		//get presentation key to be shared
		//key = uid + blobkey
		SESSION_FUNC = "NEW_KEY"
	}
	
	//if MODE == "PRESENTER" && PRESENTER_FUNC == "UPDATE" {
	if MODE == "PRESENTER" && PRESENTER_FUNC == "UPDATE" && PRESENTER_SESSION_KEY != ""{
		SESSION_FUNC = "UPDATE_SESSION"
	}
	
	if MODE == "VIEWER" && PRESENTER_FUNC == "GET_COUNTER" && PRESENTER_SESSION_KEY != ""{
		SESSION_FUNC = "GET_UPDATED_COUNTER"
	}
 
	if MODE == "" && PRESENTER_SESSION_KEY == ""{
		//get presentation key to be shared
		//key = uid + blobkey
		SESSION_FUNC = "VIEW"
	}
	
	if MODE == "VIEWER" && PRESENTER_SESSION_KEY == ""{
		//get presentation key to be shared
		//key = uid + blobkey
		SESSION_FUNC = "VIEW"
	}
	
	if MODE == "VIEWER" && PRESENTER_SESSION_KEY != ""{
		//get presentation key to be shared
		//key = uid + blobkey
		SESSION_FUNC = "FOLLOW"
	}
	
	if MODE == "VIEWER" && PARM == "AUTO" {
		SESSION_FUNC = "PLAY"
	}
	
	if PARM == "AUTO" && SECS == "" {
		SECS = "10"
	}
	
	if GOTO != "" {
		SESSION_FUNC = "VIEW"
	}
	
	////log.Printf("PRESENTER_SESSION_KEY: %v", PRESENTER_SESSION_KEY)
	if PRESENTER_SESSION_KEY == "undefined" {
		msgDtl := fmt.Sprintf("[U00109a] ERROR: Error in presenter module. %v", SID)
		msgTyp := "error"
		msgURL := fmt.Sprintf("/login")
		action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
	
	//check that key exists
	PRESENTER_SESSION_KEY_EXISTS := ""
	PRESENTER_SESSION_KEY_EXISTS = getStrMemcacheValueByKey(w,r,PRESENTER_SESSION_KEY)
	if PRESENTER_SESSION_KEY_EXISTS == "" && MODE != "PRESENTER" {
		msgDtl := fmt.Sprintf("[U00109b] ERROR: Error in presenter module. %v", SID)
		msgTyp := "error"
		msgURL := fmt.Sprintf("/login")
		action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return		
	}
	//check that blob exists
	//thisCont := getBlobByte(w, r, BLOB_KEY)
	blobChan := make(chan []byte)
	go getBlobByteChan(w, r,blobChan, BLOB_KEY)
	thisCont := <- blobChan
	if thisCont == nil && MODE != "PRESENTER" {
		msgDtl := fmt.Sprintf("[U00112] ERROR: Blob key not found!")
		msgTyp := "error"
		msgURL := fmt.Sprintf("/login")
		action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
	
	//if BLOB_KEY not given
	//if BLOB_KEY == "" && DOC_ID != "" {
	if DOC_ID != "" {
	
		//get blob key
		BLOB_KEY, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, _, IMG_URL, SHARED_TO, MUSIC_ID, GET_NEXT = getTDSSLIDEBlobKey(w, r, DOC_ID2)
		//fmt.Fprintf(w, "BLOB_KEY: %v<br>", BLOB_KEY)
		if BLOB_KEY == "" {
			msgDtl := fmt.Sprintf("[U00110] ERROR: No blob key found for doc ID %s!", DOC_ID)
			msgTyp := "error"
			msgURL := fmt.Sprintf("/login")
			action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
			http.Redirect(w, r, sysReq, http.StatusFound)	
			return
		}
		
	} else {
		_, PUB_STAT, FL_SHARED, AUTHOR, FL_COUNTRY_SPECIFIC, TITLE, SHARED_TO, MUSIC_ID, GET_NEXT = getTDSSLIDEDocID(w, r, BLOB_KEY)
	}
	
	//_, uid := checkSession(w,r)
	
	switch {
 
		case PUB_STAT == "Premium" && uid != AUTHOR:
			auth := r.FormValue("auth")
			passcode := r.FormValue("passcode")
			sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=%v&auth=%v&passcode=%v", SID, auth, passcode)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
			
		case FL_SHARED == "N":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			
			if uid != AUTHOR {
				//updateUserActiveData(w, r, c, uid, "Error: access of personal content (presenter)")
				msgDtl := fmt.Sprintf("[U00111] ERROR: This slide DOC_ID (%s) is accessible only by the author.", DOC_ID)
				//sendEvent(w,r, FDBKMAIL, msgDtl)
				msgTyp := "error"
				msgURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=")
				action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
			}
			
		case PUB_STAT == "ULAPPH Only":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			
		case PUB_STAT == "Personal" && uid != AUTHOR:
			//c := appengine.NewContext(r)
			//u := user.Current(c)
 
			uid := ""
			if r.Header.Get("X-Goog-Authenticated-User-Email") != "" {
				//uid = uid
				_, uid = checkSession(w,r)
			} else {
				uid = "@888@"
			}
			pc := r.FormValue("passcode")
			auth := r.FormValue("auth")
			if auth == "p" && pc != "" {
				uid = pc
			} else {
				uid = "@888@"
			}
 
			if auth == "p" && validatePasscode(w,r,"slides",SHARED_TO, pc) == true {
				//ok
			} else if (uid != AUTHOR) {
				msgDtl := fmt.Sprintf("[U00149b] ERROR: This document (%s) is accessible only to select individuals. Kindly request access from author (%v).", SID, AUTHOR)
				//msgURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=")
				msgURL := r.URL.String()
				msgTyp := "error"
				action := "U00149"
				sysReq := fmt.Sprintf("/sysmsg?SID=%v&msgTyp=%v&message=%v&msgURL=%v&action=%v", SID, msgTyp, msgDtl, url.QueryEscape(msgURL), action)
				http.Redirect(w, r, sysReq, http.StatusFound)	
				return
			}
	
	}
	
	//make sure blobkey is populated
	if BLOB_KEY == "" {
		msgDtl := fmt.Sprintf("[U00112] ERROR: No blob key found!")
		msgTyp := "error"
		msgURL := fmt.Sprintf("/infodb?DB_FUNC=SLIDES&CATEGORY=")
		action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other existing slides.", msgURL)
		sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
		http.Redirect(w, r, sysReq, http.StatusFound)
		return
	}
	
	//uid := ""
	if r.Header.Get("X-Goog-Authenticated-User-Email") == "" {
		xCountry := h.Get("X-AppEngine-Country")
		xRegion  := h.Get("X-AppEngine-Region")
		xCity    := h.Get("X-AppEngine-City")
		//uid = randSeq2(36)
		uid = fmt.Sprintf("%s.%s.%s.%v", xCountry, xRegion, xCity, randSeq2(36))
	}else{
		//uid = uid
		_, uid = checkSession(w,r)
	}
	
	switch SESSION_FUNC {
	
		case "VIEW":
			
			switch {
			case r.Method != "GET" && r.Method != "HEAD":
				writeTextHeader(w, 405)
				io.WriteString(w, "Method not supported.")
 
			case r.URL.Path == "/":
 
				servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, SOUND, DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, MUSIC_ID, GET_NEXT, AUTHOR, PUB_STAT, FL_SHARED)
			default:
 
				servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, SOUND, DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, MUSIC_ID, GET_NEXT, AUTHOR, PUB_STAT, FL_SHARED)
			}
 
		case "NEW_KEY":
			//PRESENTER_SESSION_KEY := fmt.Sprintf("%v-%v", uid, BLOB_KEY)
			PRESENTER_SESSION_KEY := fmt.Sprintf("%v-%v-%v", uid, BLOB_KEY, randSeq2(36))
			
			putStrToMemcacheWithoutExp(w,r,PRESENTER_SESSION_KEY,"1")
			
			redURL := ""
			redURL2 := ""
			ctrURL := ""
			if PARM != "" {
				redURL = fmt.Sprintf("/presenter?TYPE=SLIDE&MODE=PRESENTER&DOC_ID=%v&PARM=%s&SECS=%s&TITLE=%v&BLOB_KEY=%v&UID=%s&PRESENTER_SESSION_KEY=%v&SID=%s&&CATEGORY=%v&FL_COUNTRY_SPECIFIC=%v", DOC_ID, PARM, SECS, TITLE, BLOB_KEY, uid, PRESENTER_SESSION_KEY, SID, DESKTOP, FL_COUNTRY_SPECIFIC) 	
				redURL2 = fmt.Sprintf("/presenter?TYPE=SLIDE&MODE=AUDIENCE&DOC_ID=%v&PARM=%s&SECS=%s&TITLE=%v&BLOB_KEY=%v&UID=%s&PRESENTER_SESSION_KEY=%v&SID=%s&&CATEGORY=%v&FL_COUNTRY_SPECIFIC=%v", DOC_ID, PARM, SECS, TITLE, BLOB_KEY, "viewer@ulapph.com", PRESENTER_SESSION_KEY, SID, DESKTOP, FL_COUNTRY_SPECIFIC) 						
				ctrURL = fmt.Sprintf("%vpresenter?MODE=CONTROL@888@PRESENTER_SESSION_KEY=%v", getSchemeUrl(w,r), PRESENTER_SESSION_KEY) 	
			} else {
				redURL = fmt.Sprintf("/presenter?TYPE=SLIDE&MODE=PRESENTER&DOC_ID=%v&TITLE=%v&BLOB_KEY=%v&UID=%s&PRESENTER_SESSION_KEY=%v&SID=%s&CATEGORY=%v&FL_COUNTRY_SPECIFIC=%v", DOC_ID, TITLE, BLOB_KEY, uid, PRESENTER_SESSION_KEY, SID, DESKTOP, FL_COUNTRY_SPECIFIC)
				redURL2 = fmt.Sprintf("/presenter?TYPE=SLIDE&MODE=AUDIENCE&DOC_ID=%v&TITLE=%v&BLOB_KEY=%v&UID=%s&PRESENTER_SESSION_KEY=%v&SID=%s&CATEGORY=%v&FL_COUNTRY_SPECIFIC=%v", DOC_ID, TITLE, BLOB_KEY, "viewer@ulapph.com", PRESENTER_SESSION_KEY, SID, DESKTOP, FL_COUNTRY_SPECIFIC)
				ctrURL = fmt.Sprintf("%vpresenter?MODE=CONTROL@888@PRESENTER_SESSION_KEY=%v", getSchemeUrl(w,r), PRESENTER_SESSION_KEY) 	
			}
			rLoad := fmt.Sprintf("30;%v", redURL)
			if err := htmlHeaderModalRefresh.Execute(w, rLoad); err != nil {
			 panic(err)
			}
			fmt.Fprintf(w, "<h3>[S0627] TITLE: %v", TITLE)
			fmt.Fprintf(w, "<h3>STEP 1: Send link to participants.</h3><a href=\"%v%v\">Audience Link</a>", getSchemeUrl(w,r), redURL2)
			fmt.Fprintf(w, "<h3>STEP 2: Scan QR for mobile controller.</h3>")
			apiLink := fmt.Sprintf("https://chart.googleapis.com/chart?cht=qr&chs=340x340&chl=%v&choe=UTF-8", ctrURL)
			
			thisFrame := fmt.Sprintf("<iframe src='%v' frameborder=0 scrolling=false allowtransparency=true width=345px height=345px align=center></iframe>", apiLink)
			fmt.Fprintf(w, "%v", thisFrame)
			fmt.Fprintf(w, "<h3>STEP 3: Open the presenter link.</h3>")
			fmt.Fprintf(w, "<a href=\"%v%v\">Presenter Link</a>", getSchemeUrl(w,r), redURL)
			if err := htmlFooterModal.Execute(w, ""); err != nil {
			  panic(err)
			}
			return
 
		case "UPDATE_SESSION":
			data := fmt.Sprintf("@888@ULAPPH-PRESENTER@888@%v@888@%v", PRESENTER_SESSION_KEY, PRESENTER_VAL)
			//ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS", data, "")
			sendChannelMessage(w,r,"public",data)
			
			
		case "GET_UPDATED_COUNTER":
			
            PRESENTER_SESSION_KEY_VIEWS := fmt.Sprintf("%v-VIEWS", PRESENTER_SESSION_KEY)
            PRESENTER_SESSION_KEY_VIEWS_STR := getStrMemcacheValueByKey(w,r,PRESENTER_SESSION_KEY_VIEWS)
            if PRESENTER_SESSION_KEY_VIEWS_STR != "" {
				writeHTMLHeader(w, 200)
				w.Write([]byte(PRESENTER_SESSION_KEY_VIEWS_STR))
				return
			}
			
		case "PLAY":
			PRESENTER_SESSION_VAL := ""
            PRESENTER_SESSION_VAL = getStrMemcacheValueByKey(w,r,PRESENTER_SESSION_KEY)
            if PRESENTER_SESSION_VAL != "" {
				PRESENTER_SESSION_VAL_NUM := str2int(PRESENTER_SESSION_VAL)
				NEW_VAL := fmt.Sprintf("%d", PRESENTER_SESSION_VAL_NUM + 1)
				SLEN2 := str2int(SLEN)
				if (PRESENTER_SESSION_VAL_NUM + 1) > SLEN2 {
					NEW_VAL = "1"
				}
				checkUID  := strings.HasPrefix(PRESENTER_SESSION_KEY, UID)
				if checkUID == true {
					putStrToMemcacheWithoutExp(w,r,PRESENTER_SESSION_KEY,NEW_VAL)
				}
				
				//increment views counter
                PRESENTER_SESSION_KEY_VIEWS := fmt.Sprintf("%v-VIEWS", PRESENTER_SESSION_KEY)
                PRESENTER_SESSION_KEY_VIEWS_STR := getStrMemcacheValueByKey(w,r,PRESENTER_SESSION_KEY_VIEWS)
                if PRESENTER_SESSION_KEY_VIEWS_STR != "" {
					PRESENTER_SESSION_KEY_VIEWS_NUM := str2int(PRESENTER_SESSION_KEY_VIEWS_STR)
					PRESENTER_SESSION_KEY_VIEWS_NUM = PRESENTER_SESSION_KEY_VIEWS_NUM + 1
					PRESENTER_SESSION_KEY_VIEWS_STR = fmt.Sprintf("%v", PRESENTER_SESSION_KEY_VIEWS_NUM)
					putStrToMemcacheWithoutExp(w,r,PRESENTER_SESSION_KEY_VIEWS,PRESENTER_SESSION_KEY_VIEWS_STR)
				}
				
				writeHTMLHeader(w, 200)
				w.Write([]byte(NEW_VAL))
			
				return
			}
		case "FOLLOW":
			//PRESENTER_SESSION_KEY := fmt.Sprintf("%v-%v", uid, BLOB_KEY)
			PRESENTER_SESSION_VAL := []byte("")
			PRESENTER_SESSION_VAL = getBytMemcacheValueByKey(w,r,PRESENTER_SESSION_KEY)
            if PRESENTER_SESSION_VAL != nil {
				writeHTMLHeader(w, 200)
				w.Write(PRESENTER_SESSION_VAL)
				return
			}
			
		default:
			switch {		
			case r.Method != "GET" && r.Method != "HEAD":
				writeTextHeader(w, 405)
				io.WriteString(w, "Method not supported.")
			case r.URL.Path == "/":
				servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, SOUND, DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, MUSIC_ID, GET_NEXT, AUTHOR, PUB_STAT, FL_SHARED)
			default:
				servePresentation(w, r, TYPE, MODE,  PARM, SECS, TITLE, BLOB_KEY, SL_TMP, SID, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, SOUND, DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, MUSIC_ID, GET_NEXT, AUTHOR, PUB_STAT, FL_SHARED)
			}
		
	}
}

//serves presentation of a slide or article 
//it can handle auto switching between slides and articles depending on device type
func servePresentation(w http.ResponseWriter, r *http.Request, TYPE string, MODE string, PARM string, SECS string, TITLE string, blobkey string, SL_TMP string, SID string, FORCE, FL_COUNTRY_SPECIFIC, DESKTOP, SOUND, DOC_ID, IMG_URL, GOTO, PRESENTER_SESSION_KEY, MUSIC_ID, GET_NEXT, AUTHOR, PUB_STAT, FL_SHARED string) error {
	//h := r.Header
	//c := appengine.NewContext(r)
	ulapphDebug(w,r, "info", fmt.Sprintf("servePresentation() %v", ""))
	TARGET_CACHE_CONTENT := []byte("")
	SLIDES_CACHE_KEY := ""
	ARTICLES_CACHE_KEY := ""
	//_, uid := checkSession(w,r)
	//D0064
	APP := r.FormValue("APP")
	if DESKTOP == "" {
		DESKTOP = "desktop0"
	}
	if SYS_CHK_AUTO_SL2ART == true {
	//if check to force slide to article for mobile devices
		if (TYPE == "SLIDE" || TYPE == "") && MODE != "PRESENTER" && PARM != "AUTO" {
			//overwrite disp type
			uag := r.UserAgent()
			ua := user_agent.New(uag)
			uaPlatform := ua.Platform()
			nameb, _ := ua.Browser()
			dispStr := fmt.Sprintf("%s.%s", uaPlatform, nameb)
			if isSlidable[dispStr] != true && FORCE != "Y" {
				TYPE = "ARTICLE"
			}
		
			if FORCE == "Y" {
				if TYPE == "SLIDE" {
					TYPE = "ARTICLE"
				} else {
					if TYPE == "ARTICLE" {
						TYPE = "SLIDE"
					}
				
				}				
			}
 
		
		}
	}
	
	if TYPE == "" {
		TYPE = "SLIDE"
	}
	
	switch TYPE {
	
		case "SLIDE":
			SLIDES_CACHE_KEY = fmt.Sprintf("SLIDES_CACHE_%v", blobkey)
			
			utemp := r.FormValue("theme_url")
			stemp := r.FormValue("theme_media_id")
			if utemp != "" {
				//force regenerate of content
				SLIDES_CACHE_KEY = fmt.Sprintf("SLIDES_CACHE_%v_%v", blobkey, utemp)
			}
			if stemp != "" {
				//force regenerate of content
				SLIDES_CACHE_KEY = fmt.Sprintf("SLIDES_CACHE_%v_%v", blobkey, stemp)
			}
			//D0064
			if APP == "turnjs" {
				////log.Printf("type SLIDE, APP=turnjs")
				SLIDES_CACHE_KEY = fmt.Sprintf("SLIDES_TURNJS_%v", blobkey)
			}
 
			//TARGET_CACHE_CONTENT := []byte("")
			TARGET_CACHE_CONTENT = getBytMemcacheValueByKey(w,r,SLIDES_CACHE_KEY)
			
		case "ARTICLE":
			ARTICLES_CACHE_KEY = fmt.Sprintf("ARTICLES_CACHE_%v", blobkey)
			
			utemp := r.FormValue("theme_url")
			stemp := r.FormValue("theme_media_id")
			if utemp != "" {
				//force regenerate of content
				ARTICLES_CACHE_KEY = fmt.Sprintf("ARTICLES_CACHE_%v_%v", blobkey, utemp)
			}
			if stemp != "" {
				//force regenerate of content
				ARTICLES_CACHE_KEY = fmt.Sprintf("ARTICLES_CACHE_%v_%v", blobkey, stemp)
			}
			//D0064
			if APP == "turnjs" {
				////log.Printf("type ARTICLE, APP=turnjs")
				ARTICLES_CACHE_KEY = fmt.Sprintf("ARTICLES_TURNJS_%v", blobkey)
			}
			
			//TARGET_CACHE_CONTENT := []byte("")
			TARGET_CACHE_CONTENT = getBytMemcacheValueByKey(w,r,ARTICLES_CACHE_KEY)
	}
	
	if string(TARGET_CACHE_CONTENT) == "" {
		////log.Printf("TARGET_CACHE_CONTENT is blank")
		ulapphDebug(w,r, "info", fmt.Sprintf("TARGET_CACHE_CONTENT is blank %v", ""))
		//---------------
		//put data to memcache
		_, doc, err := Parse3(w, r, blobkey, TITLE, 0, DESKTOP, SID, "ONLINE", AUTHOR, PUB_STAT, FL_SHARED)
		ulapphDebug(w,r, "error", fmt.Sprintf("After Parse3() %v", ""))
		if err != nil {
			//could be a linked content
			i := strings.Index(blobkey, "GET_WALL:")
			if i != -1 {
				SPL := strings.Split(blobkey,"GET_WALL:")
				if len(SPL) > 1 {
					linkedUrl := SPL[1]
					linkedUrl = strings.Replace(linkedUrl, "@888@", "&", -1)
					http.Redirect(w, r, linkedUrl, http.StatusFound)
					return err
				}
				
			} else {
				//check if this is encrypted
				if isEncrypted(w,r,SID) == true {
					
					TARGET := ""
					DOC_ID := ""
					SPL := strings.Split(SID,"-")
					if len(SPL) > 1 {
						TARGET = SPL[0]
						DOC_ID = SPL[1]
					}
					reqStr := ""
					switch TARGET {
						case "TDSSLIDE":
							reqStr = fmt.Sprintf("/admin-slides?FUNC_CODE=VIEW&DOC_ID=%v", DOC_ID)
						case "TDSARTL":
							reqStr = fmt.Sprintf("/admin-articles?FUNC_CODE=VIEW&DOC_ID=%v", DOC_ID)
					}
					http.Redirect(w, r, reqStr, http.StatusFound)
					return err					
				
				} else {
					//panic(err)
 
					msgDtl := fmt.Sprintf("[U00147] Critical error. Parse3 error. [ERROR: %v] [KEY: %v] (SID:%v) [S0628]", err, blobkey, SID)
					msgTyp := "error"
					action := "U00147"
					sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
					////log.Panicf("error: %v", err)
					http.Redirect(w, r, sysReq, http.StatusFound)
					return err
				}
			}
		}
 
		//fmt.Fprintf(w, "doc: %v<br>", doc)
		ulapphDebug(w,r, "info", fmt.Sprintf("doc: %v", doc))
		var buf bytes.Buffer
		title2 := ""
		switch TYPE {
		
			case "SLIDE":
				title2 = fmt.Sprintf("%v.slide", TITLE)
				SL_TMP = "S"
			case "ARTICLE":
				title2 = fmt.Sprintf("%v.article", TITLE)
				SL_TMP = "A"
			default:
				title2 = fmt.Sprintf("%v.slide", TITLE)
				SL_TMP = "S"
		}
 
		//renderPresentation(&buf, title2, doc)
		////log.Printf("Calling renderPresentation()")
		//D0064
		if APP == "turnjs" {
			SL_TMP = ""
			title2 = ".turnjs"
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("Calling renderPresentation: SL_TMP: %v", SL_TMP))
		if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
			//panic(err)
			msgDtl := fmt.Sprintf("[U00147] Critical error. renderPresentation error. [ERROR: %v] [KEY: %v] (SID:%v) [S0628]", err, blobkey, SID)
			msgTyp := "error"
			action := "U00147"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			////log.Panicf("error: %v", err)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return err
		}
		////log.Printf("renderPresentation()")
		switch TYPE {
			case "SLIDE":
				title2 = fmt.Sprintf("%v.slide", TITLE)
				putBytesToMemcacheWithExp(w,r,SLIDES_CACHE_KEY,buf.Bytes(),MC_ADS_EXPIRES_30_MIN)
			case "ARTICLE":
				title2 = fmt.Sprintf("%v.article", TITLE)
				putBytesToMemcacheWithExp(w,r,ARTICLES_CACHE_KEY,buf.Bytes(),MC_ADS_EXPIRES_30_MIN)
		}
		TARGET_CACHE_CONTENT = buf.Bytes()
	}
	writeHTMLHeader(w, 200)
	_, err := w.Write(TARGET_CACHE_CONTENT)
	return err
}

//D0044 
//Handles installer logic
//Aims to automatically ulapph cloud desktop by calling the admin APIs
//THIS DOESNT WORK YET!
func serveCompile(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	////log.Printf("serveCompile()...")
	COM_FUN := r.FormValue("COM_FUN")
	////log.Printf("COM_FUN: %v", COM_FUN)
	
	//D0051
	switch COM_FUN {
		case "INSTALL-NOW":
			//////log.Printf("INSTALL-NOW")
			_, uid := checkSession(w,r)
			tok := r.FormValue("tok")
			UID := html.UnescapeString(r.FormValue("uid"))
			if uid != UID {
				////log.Printf("uid: %v", uid)
				log.Panicf("uid != UID")
				fmt.Fprintf(w, "Unauthorized operation")
				return
			}
			////log.Printf("uid: %v", uid)
			////log.Printf("tok: %v", tok)
			////log.Printf("referrer: %v", referrer)
			//Createthe project ID
			pid := r.FormValue("pid")
			////log.Printf("pid: %v", pid)
			////log.Printf("createProjectID...")
			err := createProjectID(w,r,pid,tok,uid)
			if err != nil {
				log.Panicf("err: %v", err)
				fmt.Fprintf(w,"Error creating project ID")
				return
			} else {
				////log.Printf("createProjectID...successful!")
			}
			
			
			//delay first
			////log.Printf("delaySecond...")
			delaySecond(15)
			
			//Initialize appengine project
			////log.Printf("initializeProjectID...")
			err = initializeProjectID(w,r,pid,tok,uid)
			if err != nil {
				log.Panicf("err: %v", err)
				fmt.Fprintf(w,"Error initializing appengine project")
				return
			} else {
				////log.Printf("initializeProjectID...successful!")
			}
			
			
			//delay first
			////log.Printf("delaySecond...")
			//delaySecond(30)
			
			//delay first
			////log.Printf("delaySecond...")
			delaySecond(30)
			
			//render installer page
			//////log.Printf("display installer page")
			renderInstallerPage(w,r,".install", uid)
			
		case "INSTALL":
			//////log.Printf("INSTALL")
			_, uid := checkSession(w,r)
			//////log.Printf("uid: %v", uid)
			//BROADCAST
			//broadcast event in chat world
			msgDtl := fmt.Sprintf("New ULAPPH Cloud Desktop installed by %v", uid)
			data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "ULAPPH-INSTALLER", msgDtl)
			ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
			
			//Get user
			FL_PAID := r.FormValue("FL_PAID")
			//////log.Printf("FL_PAID: %v", FL_PAID)
			//Check first if user is not yet existing in the users list
			//ask user to login
			//then redirect to INSTALL with FL_VERIFIED=true
			//https://ulapph-installer.appspot.com/?q=login&LFUNC=GOOGLE&TARGET_URL=https://ulapph-installer.appspot.com/compile?COM_FUN=INSTALL
			if isLoggedIn(w,r) != true {
					////log.Printf("Redirect user to login!")
					//redURL := fmt.Sprintf("https://ulapph-installer.appspot.com/?q=login&LFUNC=GOOGLE&TARGET_URL=https://ulapph-installer.appspot.com/compile?COM_FUN=INSTALL")
					//http.Redirect(w, r, redURL, http.StatusFound)
					//loginGoogle(w,r,"https://ulapph-installer.appspot.com/compile?COM_FUN=INSTALL")
					return					
			}
			//verify if user is registered
			//https://ulapph-cloud-desktop.appspot.com/?q=login&LFUNC=GOOGLE&TARGET_URL=https://ulapph-sites.appspot.com/directory?DIR_FUNC=GOTO_MY_ULAPPH
			////log.Printf("Check if ulapph exists for this user!")
			urlStr := fmt.Sprintf("https://ulapph-sites.appspot.com/directory?DIR_FUNC=FL_ULAPPH_EXISTS&m=auto")
			//////log.Printf("urlStr: %v", urlStr)
			//client := urlfetch.Client(c)
			if err := r.ParseForm(); err != nil {
				panic(err)
			}
			
			resp, err := http.Get(urlStr)
			if err != nil {
				panic(err)
			}
			//bodyBytes, _ := ioutil.ReadAll(resp.Body)
			////log.Printf("bodyBytes: %v", string(bodyBytes))
			////log.Printf("resp.StatusCode: %v", resp.StatusCode)
			//if bodyBytes == nil || resp.StatusCode != 200 {
			if resp.StatusCode != 200 {
				//meaning user not esists
				////log.Printf("uid: %v", uid)
				////log.Printf("User has no ulapph yet!")
				////log.Printf("Lets install ULAPPH Cloud Desktop!")
				//How about the payment?
				if FL_PAID == "Y" {
					//////log.Printf("User is paid!")
					oauth2GaeAdminCall(w,r,"auth")
				} else {
					//ask for payment
					//D0044
					//////log.Printf("uid: %v", uid)
 					//////log.Printf("Redirect user to paypal!")
					//redURL := fmt.Sprintf("https://ulapph-corporation.appspot.com/media?FUNC_CODE=GET_MEDIA&MEDIA_ID=66&SID=TDSMEDIA-66")
					//http.Redirect(w, r, redURL, http.StatusFound)
					//return
					//D0040-temp
					//////log.Printf("Dummy - Redirect installer page!")
					redURL := fmt.Sprintf("https://ulapph-installer.appspot.com/compile?COM_FUN=INSTALL&FL_PAID=Y")
					http.Redirect(w, r, redURL, http.StatusFound)
					return
				}
			} else {
				////log.Printf("uid: %v", uid)
				////log.Printf("bodyBytes: %v", string(bodyBytes))
				////log.Printf("It seems you already have an ulapph!")
				fmt.Fprintf(w, "Something is not right... it seems you already have an ULAPPH! Contact admin for more info.")
			}
			
        default:
            //c, cancel := context.WithCancel(context.Background())
            //       defer cancel()
			//client := urlfetch.Client(appengine.NewContext(r))
            //client := urlfetch.Client(c)
            client := &http.Client{}
            if err := r.ParseForm(); err != nil {
				panic(err)
			}
			resp, err := client.PostForm("https://play.golang.org/compile", r.Form)
			if err != nil {
				panic(err)
			}
			defer resp.Body.Close()
			w.Header().Set("Content-Type", resp.Header.Get("Content-Type"))
			_, err = io.Copy(w, resp.Body)
			if err != nil {
				panic(err)
			}
	}
}

//create google appengine project id
func createProjectID(w http.ResponseWriter, r *http.Request, pid, tok, uid string) error {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    var encbuf bytes.Buffer
	enc := json.NewEncoder(&encbuf)
	err := enc.Encode(map[string]string{
			  //"createTime": fmt.Sprintf("%v", time.Now()),
			  "createTime": "2017-08-06T01:01:23.045123456Z",
			  "lifecycleState": "ACTIVE",
			  //"labels": "",
			  //"name": fmt.Sprintf("Project %v", pid),
			  "name": pid,
			  "projectId": pid,
			})
	if err != nil {
		log.Panicf("client.Do err: %v", err)
		return err
	}
	req, _ := http.NewRequest("POST", "https://cloudresourcemanager.googleapis.com/v1/projects", strings.NewReader(encbuf.String()))
	thisLength := strconv.Itoa(len(encbuf.Bytes()))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Authorization", "Bearer "+tok)
	//client := urlfetch.Client(c)

    ////log.Printf("req: %v", req)
    client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		log.Panicf("client.Do err: %v", err)
		return err
	}
	if res.StatusCode != 200 {
		//err = os.NewError("failed to post")
		//return
		log.Panicf("res.StatusCode: %v", res.StatusCode)
		//fmt.Fprintf(w, "Response code: %v", res.StatusCode)
		return err
 
	}
	//b, err := ioutil.ReadAll(res.Body)
	_, err = ioutil.ReadAll(res.Body)
	if err != nil {
		//return
		log.Panicf("ioutil.ReadAll err: %v", err)
		return err
 
	}
	//send email to user
	geoStr := getGeoString(w,r)
	geoAcc := getAccessString(w,r,"")
	MESSAGE := fmt.Sprintf("[ULAPPH] Hi %v! Your cloud project ID has been created: %v [%v %v]. Go to https://github.com/edwindvinas/ULAPPH-Cloud-Desktop for additional details.", uid, pid, geoStr, geoAcc)
	subject := fmt.Sprintf("Your cloud project ID (%v) has been created", pid)
    time.AfterFunc(5*time.Second, func() {
        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": uid, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
    })
	
	//send email to admin
	MESSAGE = fmt.Sprintf("[ULAPPH] A cloud project ID has been created by %v - %v [%v %v]", uid, pid, geoStr, geoAcc)
	subject = fmt.Sprintf("New cloud project ID (%v) has been created", pid)
    time.AfterFunc(5*time.Second, func() {
        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
    })
	////log.Printf("b: %v", b)
	return err
}

//D0051
//create google appengine project id
func initializeProjectID(w http.ResponseWriter, r *http.Request, pid, tok, uid string) error {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
	var encbuf bytes.Buffer
	enc := json.NewEncoder(&encbuf)
	err := enc.Encode(map[string]string{
			  "id": pid,
			  "locationId": "asia-northeast1",				
			})
	if err != nil {
		log.Panicf("client.Do err: %v", err)
		return err
 
	}
	
	req, _ := http.NewRequest("POST", "https://appengine.googleapis.com/v1/apps", strings.NewReader(encbuf.String()))
	thisLength := strconv.Itoa(len(encbuf.Bytes()))
	req.Header.Set("Content-Length", thisLength)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Authorization", "Bearer "+tok)
	//client := urlfetch.Client(c)

    ////log.Printf("req: %v", req)
    client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		log.Panicf("client.Do err: %v", err)
		return err
	}
	if res.StatusCode != 200 {
		err = fmt.Errorf("error in post; invalid response code: %v", res.StatusCode)
		log.Panicf("res.StatusCode: %v", res.StatusCode)
		return err
 
	}
	//b, err := ioutil.ReadAll(res.Body)
	_, err = ioutil.ReadAll(res.Body)
	if err != nil {
		log.Panicf("ioutil.ReadAll err: %v", err)
		return err
 
	}
	//send email to user
	geoStr := getGeoString(w,r)
	geoAcc := getAccessString(w,r,"")
	MESSAGE := fmt.Sprintf("[ULAPPH] Hi %v! Your cloud project ID has been initialized: %v [%v %v]", uid, pid, geoStr, geoAcc)
	subject := fmt.Sprintf("Your cloud project ID (%v) has been initialized", pid)
    time.AfterFunc(5*time.Second, func() {
        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": uid, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
    })
	
	//send email to admin
	MESSAGE = fmt.Sprintf("[ULAPPH] A cloud project ID has been initialized for %v - %v [%v %v]", uid, pid, geoStr, geoAcc)
	subject = fmt.Sprintf("New cloud project ID (%v) has been initialized", pid)
    time.AfterFunc(5*time.Second, func() {
        laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": ADMMAIL, "MESSAGE": MESSAGE})
    })
	////log.Printf("b: %v", b)
	return err
}

//validates passcode for a shared content 
func validatePasscode(w http.ResponseWriter, r *http.Request, refs, sharedList, passCode string) (isValid bool) {
	isValid = false
	s := bufio.NewScanner(strings.NewReader(sharedList))
	for s.Scan() {
		thisStr := fmt.Sprintf("%v", s.Text())
		if string(thisStr[0]) != "#" {
			if strings.TrimSpace(passCode) == strings.TrimSpace(thisStr) {
				isValid = true
 
				break
			}
		}
	}
	return isValid
}
 
//-PARSE----
var (
	parsers = make(map[string]ParseFunc)
)
 
// Template returns an empty template with the action functions in its FuncMap.
func Template() *template.Template {
	return template.New("").Funcs(funcs)
}
 
// Render renders the doc to the given writer using the provided template.
func (d *Doc) Render(y io.Writer, t *template.Template) error {
	data := struct {
		*Doc
		Template    *template.Template
		PlayEnabled bool
	}{d, t, PlayEnabled}
	return t.ExecuteTemplate(y, "root", data)
}
 
// Render renders the section to the given writer using the provided template.
func (s *Section) Render(y io.Writer, t *template.Template) error {
	data := struct {
		*Section
		Template    *template.Template
		PlayEnabled bool
	}{s, t, PlayEnabled}
	return t.ExecuteTemplate(y, "section", data)
}
 
type ParseFunc func(w http.ResponseWriter, r *http.Request, fileName string, lineNumber int, inputLine string) (Elem, error)
 
// Register binds the named action, which does not begin with a period, to the
// specified parser to be invoked when the name, with a period, appears in the
// present input text.
func Register(name string, parser ParseFunc) {
	if len(name) == 0 || name[0] == ';' {
		panic("bad name in Register: " + name)
	}
	parsers["."+name] = parser
}
 
//OPTIMIZE add Description field
// Doc represents an entire document.
type Doc struct {
	DOC_STAT string	
	FL_SHARED string
	Title    string
	Subtitle string
	SlideTone string
	//DocURL string
	Host string
	SID string
	DocID string
	Build string
	//slide theme
	ColorFrom string
	ColorTo string
	SlideColor string
	SocialSMS string
	SocialLinkPlus string
	SocialLinkFB string
	SocialLinkTwitter string
	SocialLinkLinkedIn string
	SocialLinkYoutube string
	FeedbackMail string
	//addthis
	AddThisPubId string
	AutoSlide2Article bool
	Adverts template.HTML
	Adverts2 template.HTML
	Adverts3 template.HTML
	Adverts4 template.HTML
	//D0048
	ShowComments bool
	ShowAuthors bool
	ShowAbout bool
	ShowSocialMedia bool
	SocialFBCommentOn string
	PageAccessDispOn string
	DispLastPageOn string
	SYS_OPEN_AUTO string
	//dispAds bool
	AboutUs  string
	Time     time.Time
	Authors  []Author
	Sections []Section
	//D0077
	Ulapphs []GotoMyUlapphs
	Desktops []UlapphDesktops
	Tags     []string
	Images	 []string
	//IsMobile bool
	SocialComments string
	NumViews string
	NumLikes string
	NumComments string
	//edv 9/7/2017
	//ReCaptchaKey string
}
 
// Author represents the person who wrote and/or is presenting the document.
type Author struct {
	Elem []Elem
}
 
// TextElem returns the first text elements of the author details.
// This is used to display the author' name, job title, and company
// without the contact details.
func (p *Author) TextElem() (elems []Elem) {
	for _, el := range p.Elem {
		if _, ok := el.(Text); !ok {
			break
		}
		elems = append(elems, el)
	}
	return
}
 
// Section represents a section of a document (such as a presentation slide)
// comprising a title and a list of elements.
type Section struct {
	Number []int
	Title  string
	Elem   []Elem
}
 
func (s Section) Sections() (sections []Section) {
	for _, e := range s.Elem {
		if section, ok := e.(Section); ok {
			sections = append(sections, section)
		}
	}
	return
}
 
// Level returns the level of the given section.
// The document title is level 1, main section 2, etc.
func (s Section) Level() int {
	return len(s.Number) + 1
}
 
// FormattedNumber returns a string containing the concatenation of the
// numbers identifying a Section.
func (s Section) FormattedNumber() string {
	b := &bytes.Buffer{}
	for _, n := range s.Number {
		fmt.Fprintf(b, "%v.", n)
	}
	return b.String()
}
 
func (s Section) TemplateName() string { return "section" }
 
// Elem defines the interface for a present element. That is, something that
// can provide the name of the template used to render the element.
type Elem interface {
	TemplateName() string
}
 
// renderElem implements the elem template function, used to render
// sub-templates.
func renderElem(t *template.Template, e Elem) (template.HTML, error) {
	var data interface{} = e
	if s, ok := e.(Section); ok {
		data = struct {
			Section
			Template *template.Template
		}{s, t}
	}
	return execTemplate(t, e.TemplateName(), data)
}
 
// execTemplate is a helper to execute a template and return the output as a
// template.HTML value.
func execTemplate(t *template.Template, name string, data interface{}) (template.HTML, error) {
	b := new(bytes.Buffer)
	err := t.ExecuteTemplate(b, name, data)
	if err != nil {
		return "", err
	}
	return template.HTML(b.String()), nil
}
 
// Text represents an optionally preformatted paragraph.
type Text struct {
	Lines []string
	Pre   bool
}
 
func (t Text) TemplateName() string { return "text" }
 
// List represents a bulleted list.
type List struct {
	Bullet []string
}
 
func (l List) TemplateName() string { return "list" }
 
// Lines is a helper for parsing line-based input.
type Lines struct {
	line int // 0 indexed, so has 1-indexed number of last line returned
	text []string
}

//reads the given SID content and parse them line by line
//used for rending slides or articles 
func readLines3(w http.ResponseWriter, r *http.Request, blobkey, DESKTOP, SID string, OnOffLine, AUTHOR string) (string, *Lines, error) {
	//c := appengine.NewContext(r)
	//_, uid := checkSession(w,r)
	var bLine bytes.Buffer
	if OnOffLine == "OFFLINE" {
		bLine.WriteString(fmt.Sprintf("CACHE MANIFEST\n"))
	}
	var lines []string
	rcm := bytes.NewReader([]byte("")) 
	if SYS_RUNTIME_PLATFORM == "local" {
		ulapphDebug(w,r, "info", fmt.Sprintf("SYS_RUNTIME_PLATFORM: %v", "local"))
		if SYS_SWFS_ENABLED == true {
		    //read from swfs/tiedot
		    //simply read the output of blobKey URL
		    ulapphDebug(w,r, "info", fmt.Sprintf("Reading from blobKey: %v", blobkey))
		    urlRespBytes, err := fetchURLB(w,r,blobkey)
		    if urlRespBytes == nil {
			    ulapphDebug(w,r, "error", fmt.Sprintf("Error reading from SWFS blobKey: %v ERROR: %v", blobkey, err))
		    }
		    ulapphDebug(w,r, "info", fmt.Sprintf("urlRespBytes: %v", string(urlRespBytes)))
		    rcm = bytes.NewReader(urlRespBytes) 
		}
	} else {
		//reader := blobstore.NewReader(c, appengine.BlobKey(blobkey))
		ctx := context.Background()
		client, err := storage.NewClient(ctx)
		if err != nil {
			log.Fatalf("ERROR: %v", err)
		}
		BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
		rc, err := client.Bucket(BUCKET_NAME).Object(blobkey).NewReader(ctx)
		if err != nil {
			panic(err)
			//return nil, err
			//log.Fatalf("readLines3() ERROR: client.Bucket() read error: %v", err)
		}
		defer rc.Close()
		data, err := ioutil.ReadAll(rc)
		if err != nil {
			//return nil, err
			ulapphDebug(w,r, "error", fmt.Sprintf("Error reading from GCS blobKey: %v ERROR: %v", blobkey, err))
		}
		rcm = bytes.NewReader(data) 
	}
	ulapphDebug(w,r, "info", fmt.Sprintf("bufio.NewScanner(): %v", ""))
	s := bufio.NewScanner(rcm)
	FL_ADS_SERVED := false
	secCtr := 0
	for s.Scan() {

		if strings.HasPrefix(s.Text(), "#NOCOMMENTS") {
			FL_SHOW_CMTS = false
		}
		if strings.HasPrefix(s.Text(), "#NOAUTHORS") {
			FL_SHOW_AUTH = false
		}
		if strings.HasPrefix(s.Text(), "#NOABOUT") || strings.HasPrefix(s.Text(), "#NOABOUTS") {
			FL_SHOW_ABOUT = false
		}
		if strings.HasPrefix(s.Text(), "#NOSOCIALS") {
			FL_SHOW_SOCIAL = false
		}
		if strings.HasPrefix(s.Text(), "#APPEND_URL_DATA: ") || strings.HasPrefix(s.Text(), "#APPEND_URL_DATA ") {
			SPL := strings.Split(s.Text()," ")
			if len(SPL) > 1 {
				TARGET := SPL[1]
				validateURL(w,r,TARGET)
				//fetch contents of url and append
				urlData := fetchURL(w,r,TARGET)
				if urlData != "" {
					scanner := bufio.NewScanner(strings.NewReader(urlData))
					for scanner.Scan() {
						msg := scanner.Text()
						lines = append(lines, fmt.Sprintf("%v", msg))
					}
				}
			}
		}
		//D0079
		//if readlines contain #DISABLED or #DISABLE
		if strings.HasPrefix(s.Text(), "#DISABLED") || strings.HasPrefix(s.Text(), "#DISABLE") {
			msgDtl := fmt.Sprintf("[U00193] This content %v is currently disabled by the author.", SID)
			msgTyp := "error"
			action := "U00193"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return "r", &Lines{0, lines}, nil
		}
		//if readlines contain #REDIRECT
		if strings.HasPrefix(s.Text(), "#REDIRECT ") || strings.HasPrefix(s.Text(), "#REDIRECT: ") {
			SPL := strings.Split(s.Text()," ")
			if len(SPL) > 1 {
				URL := SPL[1]
				validateURL(w,r,URL)
				http.Redirect(w, r, URL, http.StatusFound)
				return "r", &Lines{0, lines}, nil
			}
		}
		if strings.HasPrefix(s.Text(), "#NOADS") {
			//dont display ads
			FL_ADS_SERVED = true
		}
		if strings.HasPrefix(s.Text(), "* ") {
			secCtr++
			//put ad in every 3 slides
			if secCtr >= ADS_EVERY_X_SLIDES && FL_ADS_SERVED == false {
				if OnOffLine == "ONLINE" {
					if SYS_DISP_ADS_CONTENT == true {
						//put ads
						for i := 1; i < 4; i++ {
							//append ads
							lines = append(lines, " ")
							//thisAd := fmt.Sprintf("* ")
							thisAd := fmt.Sprintf("* Advertisement")
							lines = append(lines, thisAd)
							thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
							lines = append(lines, fmt.Sprintf("%v", thisFrame))
							lines = append(lines, " ")
							lines = append(lines, " ")
						}
					}
				}
				FL_ADS_SERVED = true
				secCtr = 0
			}
		}
		lines = append(lines, s.Text())
		i := strings.Index(s.Text(), ".image ")
		if OnOffLine == "OFFLINE" && i != -1 {
			args := strings.Fields(s.Text())
			//img := Image{URL: args[1]}
			bLine.WriteString(fmt.Sprintf("%v\n", args[1]))
		}
	}
	//for slides that are few
	if FL_ADS_SERVED == false && OnOffLine == "ONLINE" {
		if SYS_DISP_ADS_CONTENT == true {
			//put ads
			for i := 1; i < 4; i++ {
				//append ads
				lines = append(lines, " ")
				//thisAd := fmt.Sprintf("* ")
				thisAd := fmt.Sprintf("* Advertisement")
				lines = append(lines, thisAd)
				thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
				lines = append(lines, fmt.Sprintf("%v", thisFrame))
				lines = append(lines, " ")
				lines = append(lines, " ")
			
			}
		}
	}
	
	//cache manifest end lines
	if OnOffLine == "OFFLINE" {
		bLine.WriteString(fmt.Sprintf("\n"))
		bLine.WriteString(fmt.Sprintf("NETWORK:\n"))
		bLine.WriteString(fmt.Sprintf("*\n"))
		bLine.WriteString(fmt.Sprintf("\n"))
		bLine.WriteString(fmt.Sprintf("FALLBACK:\n"))
		bLine.WriteString(fmt.Sprintf("\n"))
 
		//save to cache
		ulapphDebug(w,r, "info", fmt.Sprintf("save to cache: %v", ""))
		cKey := fmt.Sprintf("CACHE_MANIFEST_%s", SID)
		putBytesToMemcacheWithoutExp(w,r,cKey,bLine.Bytes())
		
	}
	
	if err := s.Err(); err != nil {
		ulapphDebug(w,r, "error", fmt.Sprintf("s.Err(): %v", err))
		return "", nil, err
	}
	return "", &Lines{0, lines}, nil
}
//D0086
//reads te content of a given blobKey
//used for rendering slides or articles 
func readBytesFromGcsFileText(w http.ResponseWriter, r *http.Request, blobkey string) ([]byte, error) {
    ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
    }
    BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(blobkey).NewReader(ctx)
	if err != nil {
        panic(err)
		//log.Fatalf("client.Bucket() read error: %v", err)
	}
	defer rc.Close()

	data, err := ioutil.ReadAll(rc)
	if err != nil {
		return nil, err
	}
	return data, nil
}
//reads te content of a given blobKey
//used for rendering slides or articles 
func readLines4(w http.ResponseWriter, r *http.Request, blobkey string) (string, *Lines, error) {
	//c := appengine.NewContext(r)
	
    var lines []string
    //D0086
    //reader := blobstore.NewReader(c, appengine.BlobKey(blobkey))
    ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
    }
    BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(blobkey).NewReader(ctx)
	if err != nil {
        //return nil, err
        panic(err)
		//log.Fatalf("client.Bucket() read error: %v", err)
	}
	defer rc.Close()

	s := bufio.NewScanner(rc)
	var bLine bytes.Buffer
	var bSrc bytes.Buffer
	////buffer.WriteString(fmt.Sprintf("uString: %s\n", uString))
	bLine.WriteString(fmt.Sprintf("<pre class=\"LineNumbers\">"))
	bSrc.WriteString(fmt.Sprintf("<pre class=\"Source\">"))
	bLineCtr := 0
	ct := ""
	for s.Scan() {
		bLineCtr++
		if bLineCtr <= 1000 {
			lines = append(lines, s.Text())
			bLine.WriteString(fmt.Sprintf("%d<br>", bLineCtr))
			//i := strings.Index(s.Text(), "/static/css/")
			//i := strings.Index(s.Text(), "<link rel=")
			k := strings.Index(s.Text(), "package main")
			if k != -1 && ct == "" {
 
				ct = "golang"
			}
			
			i := strings.Index(s.Text(), "<!doctype html>")
			j := strings.Index(s.Text(), "<html>")
			l := strings.Index(s.Text(), "<script ")
			m := strings.Index(s.Text(), "<!DOCTYPE html>")
			if i != -1 || j != -1 || l != -1 || m != -1 {
				bLine.WriteString(fmt.Sprintf("%d<br>", bLineCtr))
				bSrc.WriteString(fmt.Sprintf("%v<br>", "**** HTML DATA NOT DISPLAYED ****"))
				break
			} else {
				bSrc.WriteString(fmt.Sprintf("%v<br>", s.Text()))
			}
		} else {
			bLine.WriteString(fmt.Sprintf("%d<br>", bLineCtr))
			bSrc.WriteString(fmt.Sprintf("%v<br>", "**** SOME DATA NOT DISPLAYED ****"))
			break
		}
	}
	bLine.WriteString(fmt.Sprintf("</pre>"))
	bSrc.WriteString(fmt.Sprintf("</pre>"))
	fmt.Fprintf(w, "%v", bLine.String())
	fmt.Fprintf(w, "%v", bSrc.String())
	
	if err := s.Err(); err != nil {
		return ct, nil, err
	}
	return ct, &Lines{0, lines}, nil
}
//gets the contents of a given blobkey 
//#GET_REMOTE_DATA
//#APPEND_URL_DATA
//#APPEND_LOCAL_DATA
func getBlobText(w http.ResponseWriter, r *http.Request, blobkey string) (blobText string) {
    //c := appengine.NewContext(r)
    if blobkey == "" {
        return ""
    }
	i := strings.Index(blobkey, "GET_WALL:")
	if i != -1 {
		return ""
	}
	//var lines []string
	var bSrc bytes.Buffer
    //reader := blobstore.NewReader(c, appengine.BlobKey(blobkey))
    //D0086
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
	}
	BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(blobkey).NewReader(ctx)
	if err != nil {
        //return nil, err
		//log.Printf("getBlobText() ERROR: client.Bucket() read error: %v - %v", blobkey, err)
        panic(err)
		//log.Fatalf("getBlobText() ERROR: client.Bucket() read error: %v", err)
	}
    defer rc.Close()
	s := bufio.NewScanner(rc)
	sbuf := make([]byte, 0, 64*1024)
	s.Buffer(sbuf, 1024*1024)
	STR_GET_REMOTE_DATA := ""
	myloop: for s.Scan() {
		//---------------------
		//Check if we need to include data from remote URL
		//if contains "#GET_REMOTE_DATA: https://ulapph-sites.appspot.com/media?FUNC_CODE=PLAY&MEDIA_ID=7&SID=TDSMEDIA-7" && host is not self
		switch {
		case strings.HasPrefix(s.Text(), "#GET_REMOTE_DATA ") || strings.HasPrefix(s.Text(), "#GET_REMOTE_DATA: "):
            //log.Printf("#GET_REMOTE_DATA")
            SPL := strings.Split(s.Text()," ")
			thisStr := fmt.Sprintf("%v", s.Text())
			if len(SPL) > 1 && string(thisStr[0]) == "#" {
                STR_GET_REMOTE_DATA = SPL[1]
                //log.Printf("STR_GET_REMOTE_DATA: %v", STR_GET_REMOTE_DATA)
				break myloop
			}
			if STR_GET_REMOTE_DATA == "" {
				bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		case strings.HasPrefix(s.Text(), "#APPEND_URL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_URL_DATA: "):
			STR_APPEND_REMOTE_DATA := ""
			SPL := strings.Split(s.Text()," ")
			thisStr := fmt.Sprintf("%v", s.Text())
			if len(SPL) > 1 && string(thisStr[0]) == "#" {
				STR_APPEND_REMOTE_DATA = SPL[1]
                //append it now
				validateURL(w,r,STR_APPEND_REMOTE_DATA)
				//fetch contents of url and append
				urlData := fetchURL(w,r,STR_APPEND_REMOTE_DATA)
				if urlData != "" {
					scanner := bufio.NewScanner(strings.NewReader(urlData))	
					for scanner.Scan() {
						msg := scanner.Text()
						bSrc.WriteString(fmt.Sprintf("%v\n", msg))
					}
				}
			}
			if STR_APPEND_REMOTE_DATA == "" {
				bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		//D0037
		//---------------------
		//Check if we need to include data from local content
		//if contains "#APPEND_LOCAL_DATA: TDSMEDIA-22"
		case strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA: "):
			STR_APPEND_LOCAL_DATA := ""
			SPL := strings.Split(s.Text()," ")
			thisStr := fmt.Sprintf("%v", s.Text())
			if len(SPL) > 1 && string(thisStr[0]) == "#" {
				STR_APPEND_LOCAL_DATA = SPL[1]
				//append it now
				BLOB_KEY := contentCheckSid(w,r,STR_APPEND_LOCAL_DATA)
				appText := getBlobText(w, r, BLOB_KEY)
				bSrc.WriteString(fmt.Sprintf("%v\n", appText))
			}
			if STR_APPEND_LOCAL_DATA == "" {
				bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		default:
			bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
		}
	}
	
	//---------
    //If there is a remote data url found; include that data
	if STR_GET_REMOTE_DATA != "" {
		REM_DATA := fetchURL(w,r,STR_GET_REMOTE_DATA)
		bSrc.WriteString(fmt.Sprintf("%v\n", REM_DATA))
	}
	
	blobText = bSrc.String()
	////log.Printf("blobText: %v", blobText)
	
	if err := s.Err(); err != nil {
		//!!! panic is required here
		panic(err)
		//blobText = "Error retrieving content..."
    }
    //log.Printf("blobText: %v", blobText)
	return blobText
}

//gets the contents of a given blobkey
//no checks of special keywords
func getBlobTextNoComms(w http.ResponseWriter, r *http.Request, blobkey string) (blobText string) {
    //c := appengine.NewContext(r)
    if blobkey == "" {
        return ""
    }
	i := strings.Index(blobkey, "GET_WALL:")
	if i != -1 {
		return ""
	}
	//var lines []string
	var bSrc bytes.Buffer
    //reader := blobstore.NewReader(c, appengine.BlobKey(blobkey))
    //D0086
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
    }
	BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(blobkey).NewReader(ctx)
	if err != nil {
        //return nil, err
        panic(err)
		//log.Fatalf("getBlobTextNoComms() ERROR: client.Bucket() read error: %v", err)
	}
    defer rc.Close()
	s := bufio.NewScanner(rc)
	sbuf := make([]byte, 0, 64*1024)
	s.Buffer(sbuf, 1024*1024)
	//STR_GET_REMOTE_DATA := ""
	STR_GET_REMOTE_DATA := ""
	myloop: for s.Scan() {
		//---------------------
		//Check if we need to include data from remote URL
		//if contains "#GET_REMOTE_DATA: https://ulapph-sites.appspot.com/media?FUNC_CODE=PLAY&MEDIA_ID=7&SID=TDSMEDIA-7" && host is not self
		switch {
		case strings.HasPrefix(s.Text(), "#GET_REMOTE_DATA ") || strings.HasPrefix(s.Text(), "#GET_REMOTE_DATA: "):
			SPL := strings.Split(s.Text()," ")
			thisStr := fmt.Sprintf("%v", s.Text())
			if len(SPL) > 1 && string(thisStr[0]) == "#" {
				STR_GET_REMOTE_DATA = SPL[1]
				break myloop
			}
			if STR_GET_REMOTE_DATA == "" {
				bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		case strings.HasPrefix(s.Text(), "#APPEND_URL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_URL_DATA: "):
			STR_APPEND_REMOTE_DATA := ""
			SPL := strings.Split(s.Text()," ")
			thisStr := fmt.Sprintf("%v", s.Text())
			if len(SPL) > 1 && string(thisStr[0]) == "#" {
				STR_APPEND_REMOTE_DATA = SPL[1]
				//append it now
				validateURL(w,r,STR_APPEND_REMOTE_DATA)
				//fetch contents of url and append
				urlData := fetchURL(w,r,STR_APPEND_REMOTE_DATA)
				if urlData != "" {
					scanner := bufio.NewScanner(strings.NewReader(urlData))	
					for scanner.Scan() {
						msg := scanner.Text()
						bSrc.WriteString(fmt.Sprintf("%v\n", msg))
					}
				}
			}
			if STR_APPEND_REMOTE_DATA == "" {
				bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		//D0037
		//---------------------
		//Check if we need to include data from local content
		//if contains "#APPEND_LOCAL_DATA: TDSMEDIA-22"
		case strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA ") || strings.HasPrefix(s.Text(), "#APPEND_LOCAL_DATA: "):
			STR_APPEND_LOCAL_DATA := ""
			SPL := strings.Split(s.Text()," ")
			thisStr := fmt.Sprintf("%v", s.Text())
			if len(SPL) > 1 && string(thisStr[0]) == "#" {
				STR_APPEND_LOCAL_DATA = SPL[1]
				//append it now
				BLOB_KEY := contentCheckSid(w,r,STR_APPEND_LOCAL_DATA)
				appText := getBlobTextNoComms(w, r, BLOB_KEY)
				bSrc.WriteString(fmt.Sprintf("%v\n", appText))
			}
			if STR_APPEND_LOCAL_DATA == "" {
				bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
			}
		default:
			//bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
			thisStr := fmt.Sprintf("%v", s.Text())
			if len(thisStr) > 0 {
				if string(thisStr[0]) != "#" {
					bSrc.WriteString(fmt.Sprintf("%v\n", s.Text()))
				}
			}
		}
	}
	//---------
	//If there is a remote data url found; include that data
	if STR_GET_REMOTE_DATA != "" {
		REM_DATA := fetchURL(w,r,STR_GET_REMOTE_DATA)
		bSrc.WriteString(fmt.Sprintf("%v\n", REM_DATA))
	}
	blobText = bSrc.String()
	////log.Printf("blobText: %v", blobText)
	if err := s.Err(); err != nil {
		//!!! panic is required here
		panic(err)
		//blobText = "Error retrieving content..."
	}
	return blobText
}
//gets content of a given blobkey and return data to channel
func getBlobTextChan(w http.ResponseWriter, r *http.Request, blobChan chan string, blobkey string){
    //c := appengine.NewContext(r)
    if blobkey == "" {
        blobChan <- ""
    }
	i := strings.Index(blobkey, "GET_WALL:")
	if i != -1 {
		blobChan <- ""
    }
    //D0086
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
    }
    BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(blobkey).NewReader(ctx)
	if err != nil {
        //return nil, err
        panic(err)
		//log.Fatalf("getBlobTextChan() ERROR: client.Bucket() read error: %v", err)
	}
	defer rc.Close()

	data, err := ioutil.ReadAll(rc)
	if err != nil {
        //return nil, err
        log.Fatalf("ERROR: ioutil.ReadAll() ioutil error: %v", err)
    }
	//return data, nil
    blobText := string(data)
    //return blobText
	blobChan <- blobText
}
//gets contents of a blobkey and parse to get the first image encountered 
func getBlobTextFirstImageUrl(w http.ResponseWriter, r *http.Request, BLOB_KEY string) (imgUrl string) {
    //c := appengine.NewContext(r)
    if BLOB_KEY == "" {
        return ""
    }
	i := strings.Index(BLOB_KEY, "GET_WALL:")
	if i != -1 {
		return ""
	}
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
	for s.Scan() {
		if strings.Index(s.Text(), ".image ") != -1 {
			thisUrls := xurls.Strict().FindAllString(s.Text(), -1)
			if len(thisUrls) > 0 {
				return thisUrls[0]
			}
		}
	}
	if err := s.Err(); err != nil {
		imgUrl = ""
	}
	return imgUrl
}
//gets contents of a blobkey and parse to get the list of links 
func getBlobTextGetLinks(w http.ResponseWriter, r *http.Request, BLOB_KEY string) []*Scraper {
    //c := appengine.NewContext(r)
	//log.Printf("getBlobTextGetLinks()")
	var pl []*Scraper
    if BLOB_KEY == "" {
        return nil
    }
	i := strings.Index(BLOB_KEY, "GET_WALL:")
	if i != -1 {
		return nil
	}
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
	for s.Scan() {
		if strings.Index(s.Text(), ".link ") != -1 {
			//log.Printf("s.Text(): %v", s.Text())
			thisUrls := xurls.Strict().FindAllString(s.Text(), -1)
			if len(thisUrls) > 0 {
				SPL := strings.Split(s.Text(), " ")
				myText := SPL[2:]
				myText2 := strings.Join(myText, " ")
				p := new(Scraper)
				p.Title = myText2
				p.URL = thisUrls[0]
				p.Image = ""
				p.Text = ""			
				pl = append(pl, p)
				//log.Printf("p: %v", p)
			}
		}
	}
	if err := s.Err(); err != nil {
		return nil
	}
	//log.Printf("pl: %v", pl)
	return pl
}
//gets contents of a blobkey and parse to get the premium cost custom for the content 
func getBlobTextPremiumCost(w http.ResponseWriter, r *http.Request, BLOB_KEY string) (premCost string) {
    //c := appengine.NewContext(r)
    if BLOB_KEY == "" {
        return ""
    }
	i := strings.Index(BLOB_KEY, "GET_WALL:")
	if i != -1 {
		return ""
	}
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
	for s.Scan() {
		if strings.HasPrefix(s.Text(), "#CUSTOM-PREMIUM-COST: ") {
			SPL := strings.Split(s.Text(), ":")
			if len(SPL) > 0 {
				premCost = strings.TrimSpace(SPL[1])
			}
			break
		}
	}
	if err := s.Err(); err != nil {
		premCost = "error"
	}
	return premCost
}
//process quiz submit button
func getBlobTextQuiz(w http.ResponseWriter, r *http.Request, SID, DATA string) (res string, pass bool, TITLE string, cAns string, tot int, totq int, rmwTot int,  err error) {
    //c := appengine.NewContext(r)
	SPD := strings.Split(DATA,"$")
	//tot := 0
	//totq := 0
	totAns := 0
	pass = false
	SPL := strings.Split(SID,"-")
	TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
	BLOB_KEY := ""
	var buf bytes.Buffer
	switch TARGET {
		case "TDSSLIDE":
			BLOB_KEY, _, _, _, _, TITLE, _, _, _, _  = getTDSSLIDEBlobKey(w, r, docID)
		case "TDSARTL":
			BLOB_KEY, _, _, _, _, TITLE, _, _, _ = getTDSARTLBlobKey(w, r, docID)
		default:
			return res, false, "", "", 0, 0, 0, fmt.Errorf("invalid operation")
	}
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
	for s.Scan() {
		if strings.HasPrefix(s.Text(), "#") {
			if strings.Index(s.Text(), "NUM_CORRECT_ANSWERS:") != -1 {
				//log.Printf("NCA: %v", s.Text())
				SPN := strings.Split(s.Text(),":")
				//log.Printf("SPN: %v", SPN)
				if len(SPN) > 0 {
					//log.Printf("value: %v", SPN[1])
					totq = str2int(strings.TrimSpace(SPN[1]))
					//log.Printf("totq: %v", totq)
				}
			}
			for i:=0; i < len(SPD); i++ {
				//is item found
				//$id:answer
				if SPD[i] != "" {
					if strings.Index(s.Text(), SPD[i]) != -1 {
						buf.WriteString(fmt.Sprintf("%v = %v<br>\n", s.Text(), SPD[i]))
						tot++
					}
				}
			}
		}
	}
	if err := s.Err(); err != nil {
		return res, false, "", "", 0, 0, 0, fmt.Errorf("error operation")
	}
	//right-minus wrong
	for i:=0; i < len(SPD); i++ {
		if strings.Index(SPD[i], "true") != -1 {
			totAns++
		}
	}
	if totq > 0 && totAns > totq {
		rmwTot = totAns - totq
		tot = tot - rmwTot
	}
	//compute
	//pct := percent.PercentOf(tot, len(SPD) - 1)
	if totq == 0 {
		res = fmt.Sprintf("%v out of unknown total answers", tot) 
	} else {
		pct := percent.PercentOf(tot, totq)
		res = fmt.Sprintf("%.2f", pct)
		if pct >= 75 {
			pass = true
		}
		if rmwTot > 0 {
			res = fmt.Sprintf("%v due to %v deductions", res, rmwTot) 
		}
	}
	cAns = buf.String()
	return res, pass, TITLE, cAns, tot, totq, rmwTot, nil
}

//gets the contents of blobkey as preview 
func getBlobTextPremiumPreview(w http.ResponseWriter, r *http.Request, BLOB_KEY string) (preview string) {
	//c := appengine.NewContext(r)
	i := strings.Index(BLOB_KEY, "GET_WALL:")
	if i != -1 {
		return ""
	}
    bData, err := readGcsObject(BLOB_KEY)
    if err != nil {
        panic(err)
    }
    s := bufio.NewScanner(bytes.NewReader(bData))
	for s.Scan() {
		if strings.HasPrefix(s.Text(), "#CUSTOM-PREMIUM-PREVIEW-URL:") {
			prev := strings.Replace(s.Text(), "#CUSTOM-PREMIUM-PREVIEW-URL:", "", -1)
			if len(prev) > 0 {
				preview = strings.TrimSpace(prev)
			}
			break
		}
	}
	if err := s.Err(); err != nil {
		preview = "#error"
	}
	return preview
}

//gets the bytes contents of a blobkey 
func getBlobByte(w http.ResponseWriter, r *http.Request, blobkey string) (blobByte []byte) {
	//c := appengine.NewContext(r)
    //reader := blobstore.NewReader(c, appengine.BlobKey(blobkey))
    //D0086
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
    }
	
	BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(blobkey).NewReader(ctx)
	if err != nil {
        //return nil, err
        panic(err)
		//log.Fatalf("getBlobByte() ERROR: client.Bucket() read error: %v", err)
	}
    defer rc.Close()
	blobByte, err = ioutil.ReadAll(rc)
	if err != nil {
		//log.Fatalf("ERROR: %v", err)
	}
	return blobByte
}
 
//gets the bytes contents of a blobkey and return data to channel
func getBlobByteChan(w http.ResponseWriter, r *http.Request, blobChan chan []byte, blobkey string) {
	//c := appengine.NewContext(r)
	//var lines []string
    //reader := blobstore.NewReader(c, appengine.BlobKey(blobkey))
    //D0086
	ctx := context.Background()
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatalf("ERROR: %v", err)
    }
	
	BUCKET_NAME := fmt.Sprintf("%v.appspot.com", SYS_SERVER_NAME)
	rc, err := client.Bucket(BUCKET_NAME).Object(blobkey).NewReader(ctx)
	if err != nil {
        //return nil, err
        panic(err)
		//log.Fatalf("getBlobByteChan() ERROR: client.Bucket() read error: %v", err)
	}
    defer rc.Close()
	blobByte, err := ioutil.ReadAll(rc)
	if err != nil {
		//log.Fatalf("ERROR: %v", err)
	}
	blobChan <- blobByte
}
 

 //reads next line
func (l *Lines) next() (text string, ok bool) {
	for {
		current := l.line
		l.line++
		if current >= len(l.text) {
			return "", false
		}
		text = l.text[current]
		// Lines starting with # are comments.
		if len(text) == 0 || text[0] != '#' {
			ok = true
			break
		}
	}
	return
}

//go back to previous line
func (l *Lines) back() {
	l.line--
}
 
func (l *Lines) nextNonEmpty() (text string, ok bool) {
	for {
		text, ok = l.next()
		if !ok {
			return
		}
		if len(text) > 0 {
			break
		}
	}
	return
}
 
// ParseMode represents flags for the Parse function.
type ParseMode int
 
const (
	// If set, parse only the title and subtitle.
	TitlesOnly ParseMode = 1
)

//parses the given SID and returns the parsed document
//used for rendering slides and articles 
func Parse3(w http.ResponseWriter, r *http.Request, blobkey string, name string, mode ParseMode, DESKTOP, SID string, OnOffLine, AUTHOR, PUB_STAT, FL_SHARED string) (string, *Doc, error) {
	//c := appengine.NewContext(r)
	ulapphDebug(w,r, "info", fmt.Sprintf("Parse3() %v", ""))
	doc := new(Doc)
	st, lines, err := readLines3(w, r, blobkey, DESKTOP, SID, OnOffLine, AUTHOR)
	ulapphDebug(w,r, "info", fmt.Sprintf("After calling readLines3() %v", err))
	FL_PROC_OK := true
	if err != nil {
		//try to get from SID
		FL_PROC_OK = false
		if SID != "" {
			//var lines []string
			SPL := strings.Split(SID,"-")
			if len(SPL) > 1 {
				DOC_ID := SPL[1]
				TARGET := SPL[0]
				docID := str2int(DOC_ID)
				
				switch TARGET {
					case "TDSSLIDE":
						blobkey, _, _, _, _, _, _, _, _, _ = getTDSSLIDEBlobKey(w, r, docID)
						FL_PROC_OK = true
					case "TDSARTL":
						blobkey, _, _, _, _, _, _, _, _ = getTDSARTLBlobKey(w, r, docID)
						FL_PROC_OK = true
				}
		
			}
		} else {
			//panic(err)
			msgDtl := fmt.Sprintf("[U00146] Critical error. Parse3 error. [ERROR: %v] [KEY: %v] (SID: %v) [S0632]", err, blobkey, SID)
			msgTyp := "error"
			action := "U00146"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return st, nil, err
		}
		
	}	
	//fmt.Fprintf(w, "lines: %v<br>", lines)
	ulapphDebug(w,r, "info", fmt.Sprintf("lines: %v", lines))
	if FL_PROC_OK == true {
		if err != nil {
			return st, nil, err
		}	
		ulapphDebug(w,r, "info", fmt.Sprintf("parseHeader() %v", ""))
		err = parseHeader(w,r,doc, lines, SID, PUB_STAT, FL_SHARED)
		if err != nil {
			return st, nil, err
		}
		if mode&TitlesOnly != 0 {
			return st, doc, nil
		}
		// Authors
		ulapphDebug(w,r, "info", fmt.Sprintf("parseAuthors() %v", ""))
		if doc.Authors, err = parseAuthors(lines); err != nil {
			return st, nil, err
		}
		ulapphDebug(w,r, "info", fmt.Sprintf("parseSections() %v", ""))
		if doc.Sections, doc.Images, err = parseSections3(w, r, name, lines, []int{}, doc); err != nil {
			return st, nil, err
		}
	}
	return st, doc, nil
}

//parses the given lines of text and returns the document 
func Parse4(w http.ResponseWriter, r *http.Request, lines *Lines, name string, mode ParseMode) (*Doc, error) {
 
	doc := new(Doc)
	err := parseHeader(w,r,doc, lines, "", "Worldwide", "Y")
	if err != nil {
		return nil, err
	}
	if mode&TitlesOnly != 0 {
		return doc, nil
	}
	// Authors
	if doc.Authors, err = parseAuthors(lines); err != nil {
		return nil, err
	}
	if doc.Sections, doc.Images, err = parseSections3(w, r, name, lines, []int{}, doc); err != nil {
		return nil, err
	}
	return doc, nil
}
 
// isHeading matches any section heading.
var isHeading = regexp.MustCompile(`^\*+ `)
 
// lesserHeading returns true if text is a heading of a lesser or equal level
// than that denoted by prefix.
func lesserHeading(text, prefix string) bool {
	return isHeading.MatchString(text) && !strings.HasPrefix(text, prefix+"*")
}
 
// parseSections parses Sections from lines for the section level indicated by
// number (a nil number indicates the top level).
func parseSections3(w http.ResponseWriter, r *http.Request, name string, lines *Lines, number []int, doc *Doc) ([]Section, []string, error) {
	var sections []Section
	var images []string
	for i := 1; ; i++ {
		// Next non-empty line is title.
		text, ok := lines.nextNonEmpty()
		for ok && text == "" {
			text, ok = lines.next()
		}
		if !ok {
			break
		}
		prefix := strings.Repeat("*", len(number)+1)
		if !strings.HasPrefix(text, prefix+" ") {
			lines.back()
			break
		}
		section := Section{
			Number: append(append([]int{}, number...), i),
			Title:  text[len(prefix)+1:],
		}
		text, ok = lines.nextNonEmpty()
		for ok && !lesserHeading(text, prefix) {
			var e Elem
			y, _ := utf8.DecodeRuneInString(text)
			switch {
			case unicode.IsSpace(y):
				i := strings.IndexFunc(text, func(y rune) bool {
					return !unicode.IsSpace(y)
				})
				if i < 0 {
					break
				}
				indent := text[:i]
				var s []string
				for ok && (strings.HasPrefix(text, indent) || text == "") {
					if text != "" {
						text = text[i:]
					}
					s = append(s, text)
					text, ok = lines.next()
				}
				lines.back()
				pre := strings.Join(s, "\n")
				pre = strings.Replace(pre, "\t", "    ", -1) // browsers treat tabs badly
				pre = strings.TrimRightFunc(pre, unicode.IsSpace)
				e = Text{Lines: []string{pre}, Pre: true}
			case strings.HasPrefix(text, "- "):
				var b []string
				for ok && strings.HasPrefix(text, "- ") {
					b = append(b, text[2:])
					text, ok = lines.next()
				}
				lines.back()
				e = List{Bullet: b}
			case strings.HasPrefix(text, prefix+"* "):
				lines.back()
				subsecs, _, err := parseSections3(w, r, name, lines, section.Number, doc)
				if err != nil {
					return nil, nil, err
				}
				for _, ss := range subsecs {
					section.Elem = append(section.Elem, ss)
				}
			case strings.HasPrefix(text, "."):
				args := strings.Fields(text)
				parser := parsers[args[0]]
				if parser == nil {
					return nil, nil, fmt.Errorf("%s:%d: unknown command %q\n", name, lines.line, text)
				}
				t, err := parser(w, r, name, lines.line, text)
				if err != nil {
					return nil, nil, err
				}
				//collect all images to struct
				if args[0] == ".image" {
					images = append(images, args[1])
				}
				e = t
			default:
				var l []string
				for ok && strings.TrimSpace(text) != "" {
					if text[0] == '.' { // Command breaks text block.
						break
					}
					if strings.HasPrefix(text, `\.`) { // Backslash escapes initial period.
						text = text[1:]
					}
					l = append(l, text)
					text, ok = lines.next()
				}
				if len(l) > 0 {
					e = Text{Lines: l}
				}
			}
			if e != nil {
				section.Elem = append(section.Elem, e)
			}
			text, ok = lines.nextNonEmpty()
		}
		if isHeading.MatchString(text) {
			lines.back()
		}
		sections = append(sections, section)
	}
	if len(images) <= 0 {
		//put default image
		images = append(images, fmt.Sprintf("%vimg/NoImageAvailable.png", domRefMatchS))
	}
	return sections, images, nil
}
 
//parses the header lines of an article or slide
func parseHeader(w http.ResponseWriter, r *http.Request, doc *Doc, lines *Lines, SID, PUB_STAT, FL_SHARED string) error {
	var ok bool
	// First non-empty line starts header.
	doc.DOC_STAT = PUB_STAT
	doc.FL_SHARED = FL_SHARED
	doc.Title, ok = lines.nextNonEmpty()
	//_, uid := checkSession(w,r)
	if !ok {
		return errors.New("unexpected EOF; expected title")
	}
	for {
		text, ok := lines.next()
		if !ok {
			return errors.New("unexpected EOF")
		}
		if text == "" {
			break
		}
		const tagPrefix = "Tags:"
		if strings.HasPrefix(text, tagPrefix) {
			tags := strings.Split(text[len(tagPrefix):], ",")
			for i := range tags {
				tags[i] = strings.TrimSpace(tags[i])
			}
			doc.Tags = append(doc.Tags, tags...)
		} else if t, ok := parseTime(text); ok {
			doc.Time = t
		} else if doc.Subtitle == "" {
			doc.Subtitle = text
		} else {
			return fmt.Errorf("unexpected header line: %q", text)
		}
	}
 
	//slide theme
	if SYS_UWM_RAN_COLORS == true {
		doc.SlideColor = getStartColor(w,r)
		doc.ColorFrom = getInActiveColor(w,r) 
		doc.ColorTo = getActiveColor(w,r) 
	} else {
		doc.SlideColor = fmt.Sprintf("#%v", SYS_SLIDE_COLOR)
		doc.ColorFrom = fmt.Sprintf("#%v", SYS_SLIDE_FROM)
		doc.ColorTo = fmt.Sprintf("#%v", SYS_SLIDE_TO)
	}
	
	//15/10/2015 - edv - add custom slide tone
	doc.SlideTone = fmt.Sprintf("%v%v", getSchemeUrl(w,r), DEFAULT_SLIDE_TONE)
	if GA_AD_SERVE == true {
		doc.Adverts = GA_AD_CODE_RESP
		doc.Adverts2 = GA_AD_CODE_FTR
		doc.Adverts3 = GA_AD_CODE_TBR
		doc.Adverts4 = GA_AD_CODE_SDW
	}
	//D0048
	doc.ShowComments = FL_SHOW_CMTS
	doc.ShowAuthors = FL_SHOW_AUTH
	doc.ShowAbout = FL_SHOW_ABOUT
	doc.ShowSocialMedia = FL_SHOW_SOCIAL

	doc.SocialFBCommentOn = SOCIAL_FB_COMMENT_ON
	doc.PageAccessDispOn = PAGE_ACCESS_DISP_ON
	doc.DispLastPageOn = LAST_PAGE_DISP_ON
	doc.AboutUs = INFO_ABOUT_US
	doc.SYS_OPEN_AUTO = SYS_OPEN_AUTO
	//doc.DocURL = fmt.Sprintf("Host: %v SID: %v", getSchemeUrl(w,r), SID)
	doc.Host = getSchemeUrl(w,r)
	DOC_ID := ""
	SPL := strings.Split(SID,"-")
	if len(SPL[0]) > 1 {
		DOC_ID = SPL[1]
	}
	doc.SID = SID
	doc.DocID = DOC_ID
	doc.Build = UCD_BUILD_STR
	doc.SocialSMS = SMS_CONTACT_NBR
	doc.SocialLinkPlus = SOCIAL_LINK_PLUS
	doc.SocialLinkFB = SOCIAL_LINK_FB
	doc.SocialLinkTwitter = SOCIAL_LINK_TWITTER
	doc.SocialLinkLinkedIn = SOCIAL_LINK_LINKEDIN
	doc.SocialLinkYoutube = SOCIAL_LINK_YOUTUBE
	doc.FeedbackMail = FDBKMAIL
	doc.AutoSlide2Article = SYS_CHK_AUTO_SL2ART
	//doc.IsMobile = checkMobile(w,r)
	doc.AddThisPubId = SYS_ADD_THIS_PUB_ID
	//edv 9/7/2017
	//doc.ReCaptchaKey = SYS_RECAPTCHA_KEY
 
	if SID != "" {
		cKey := fmt.Sprintf("VIEW_LIKE_COM_%v", SID)
		statData := getStrMemcacheValueByKey(w,r,cKey)
		if statData == "" {
			thisChan := make(chan string)
			thisChanDone := make(chan bool)
			go getSocStats(w,r,thisChan,thisChanDone,SID)
			thisStat := <- thisChan	
			<-thisChanDone
			statData = thisStat
		}
		SPL := strings.Split(statData, ",")
		if len(SPL) == 3 {
			doc.NumViews = SPL[0]
			doc.NumLikes = SPL[1]
			doc.NumComments = SPL[2]
			putStrToMemcacheWithoutExp(w,r,cKey,statData)
		} else {
			doc.NumViews = "1"
			doc.NumLikes = "0"
			doc.NumComments = "0"				
		}
		
		thisChan2 := make(chan string)
		thisChan2Done := make(chan bool)
		go getSocComStat(w,r,thisChan2,thisChan2Done,SID)
		stat := <- thisChan2
		doc.SocialComments = stat
		<-thisChan2Done
	}
 
	return nil
}
//Get views/likes/comments stas for the given SID
func getSocStats(w http.ResponseWriter, r *http.Request, thisChan chan string, thisChanDone chan bool, SID string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    stats := ""
    if SYS_RUNTIME_PLATFORM == "local" {
	thisChan <- stats
	thisChanDone <- true
	return
    }
    //D0086
    datastoreClient := createClientDS()
	SPL := strings.Split(SID, "-")
	if len(SPL) > 0 {
			
		if SPL[0] == "TDSSLIDE" {
			dsKey := fmt.Sprintf("%v", SPL[1])
			key := datastore.NameKey("TDSSLIDE", dsKey, nil)
			q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
			//log.Panicf("[S0076]")
			slides := make([]TDSSLIDE, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &slides); err != nil {
				 panic(err)
			}
            //log.Printf("datastoreClient.Get()  [84209]")
			for _, p := range slides{
				stats = fmt.Sprintf("%v,%v,%v", p.NUM_VIEWS, p.NUM_LIKES, p.NUM_COMMENTS)
				break
			}			
		} else if SPL[0] == "TDSARTL" {
			dsKey := fmt.Sprintf("%v", SPL[1])
			key := datastore.NameKey("TDSARTL", dsKey, nil)
			q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
			//log.Panicf("[S0076]")
			articles := make([]TDSARTL, 0, 1)
			if _, err := datastoreClient.GetAll(c,q, &articles); err != nil {
				 panic(err)
			}
            //log.Printf("datastoreClient.Get()  [84223]")
			for _, p := range articles{
				stats = fmt.Sprintf("%v,%v,%v", p.NUM_VIEWS, p.NUM_LIKES, p.NUM_COMMENTS)
				break
			}			
		}
		
	}
 
	thisChan <- stats
	thisChanDone <- true
}

//D0040
//gets social comments status
func getSocComStat(w http.ResponseWriter, r *http.Request, thisChan chan string, thisChanDone chan bool, SID string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    gsc := ""
    if SYS_RUNTIME_PLATFORM == "local" {
	thisChan <- gsc 
	thisChanDone <- true
	return
    }
    //D0086
    datastoreClient := createClientDS()
	//90% rating, 12k comments
	
	q := datastore.NewQuery("TDSCOMMENT").Filter("SID =", SID)
	recCount,_ := datastoreClient.Count(c,q)
	
	gsc = fmt.Sprintf("%v comments", humanize.Comma(int64(recCount)))
	
	//return gsc
	thisChan <- gsc
	thisChanDone <- true
}

//parses author lines of a slide or article
func parseAuthors(lines *Lines) (authors []Author, err error) {
	// This grammar demarcates authors with blanks.
 
	// Skip blank lines.
	if _, ok := lines.nextNonEmpty(); !ok {
		return nil, errors.New("unexpected EOF")
	}
	lines.back()
 
	var a *Author
	for {
		text, ok := lines.next()
		if !ok {
			return nil, errors.New("unexpected EOF")
		}
 
		// If we find a section heading, we're done.
		if strings.HasPrefix(text, "* ") {
			lines.back()
			break
		}
 
		// If we encounter a blank we're done with this author.
		if a != nil && len(text) == 0 {
			authors = append(authors, *a)
			a = nil
			continue
		}
		if a == nil {
			a = new(Author)
		}
 
		// Parse the line. Those that
		// - begin with @ are twitter names,
		// - contain slashes are links, or
		// - contain an @ symbol are an email address.
		// The rest is just text.
		var el Elem
		switch {
		case strings.HasPrefix(text, "@"):
			el = parseURL("http://twitter.com/" + text[1:])
		case strings.Contains(text, ":"):
			el = parseURL(text)
		case strings.Contains(text, "@"):
			el = parseURL("mailto:" + text)
		}
		if l, ok := el.(Link); ok {
			l.Label = text
			el = l
		}
		if el == nil {
			el = Text{Lines: []string{text}}
		}
		a.Elem = append(a.Elem, el)
	}
	if a != nil {
		authors = append(authors, *a)
	}
	return authors, nil
}
 
//parses url from a given text
func parseURL(text string) Elem {
	u, err := url.Parse(text)
	if err != nil {
		//log.Printf("Parse(%q): %v", text, err)
		return nil
	}
	return Link{URL: u}
}

//parses time from a given text
func parseTime(text string) (t time.Time, ok bool) {
	t, err := time.Parse("15:04 2 Jan 2006", text)
	if err == nil {
		return t, true
	}
	t, err = time.Parse("2 Jan 2006", text)
	if err == nil {
		// at 11am UTC it is the same date everywhere
		t = t.Add(time.Hour * 11)
		return t, true
	}
	return time.Time{}, false
}

type Link struct {
	URL   *url.URL
	Label string
}

//a link template
func (l Link) TemplateName() string { return "link" }
 
//parses a given link and return the html element
func parseLink(w http.ResponseWriter, r *http.Request, fileName string, lineno int, text string) (Elem, error) {
	//c := appengine.NewContext(r)
	
    defer func() { //catch or finally
        if err := recover(); err != nil { //catch
            log.Panicf("panic error in procesing: %q", text)
			os.Exit(1)
        }
    }()
	
	args := strings.Fields(text)
	//D0106
	//log.Printf("parseLink: text: %v<br>", text)
	//log.Printf("parseLink: fileName: %v<br>", fileName)
	//url := ""
	url, err := url.Parse(args[1])
	if err != nil {
		return nil, err
	}
	label := ""
	if len(args) > 2 {
		label = strings.Join(args[2:], " ")
	} else {
		scheme := url.Scheme + "://"
		if url.Scheme == "mailto" {
			scheme = "mailto:"
		}
		label = strings.Replace(url.String(), scheme, "", 1)
	}
	return Link{url, label}, nil
}
 
type Checkbox struct {
	Name   string
	Label string
}

//check box template
func (b Checkbox) TemplateName() string { return "checkbox" }

//parses a given checkbox and return the html element 
func parseCheckbox(w http.ResponseWriter, r *http.Request, fileName string, lineno int, text string) (Elem, error) {
	//c := appengine.NewContext(r)
	args := strings.Fields(text)
	//fmt.Fprintf(w, "parseLink: text: %v<br>", text)
	//url := ""
	name := args[1]
	if name == "" {
		////log.Panicf("invalid checkbox name")
		return nil, fmt.Errorf("invalid checkbox name")
	}
	//get label
	label := ""
	for i:=2; i < len(args); i++ {
		if i == 2 {
			label = args[2]
		} else {
			label = fmt.Sprintf("%v %v", label, args[i])
		}
	}
	
	if label == "" {
		////log.Panicf("invalid checkbox label")
		return nil, fmt.Errorf("invalid checkbox label")
	}
	b := Checkbox{Name: name, Label: label}
	////log.Panicf("Checkbox: %v", b)
	
	return b, nil
}
 
type Radio struct {
	Name   string
	Label string
}

//a radio template 
func (b Radio) TemplateName() string { return "radio" }

//parses a given radio and return the html element 
func parseRadio(w http.ResponseWriter, r *http.Request, fileName string, lineno int, text string) (Elem, error) {
	//c := appengine.NewContext(r)
	args := strings.Fields(text)
 
	name := args[1]
	if name == "" {
		return nil, fmt.Errorf("invalid radio name")
	}
	//get label
	label := ""
	for i:=2; i < len(args); i++ {
		if i == 2 {
			label = args[2]
		} else {
			label = fmt.Sprintf("%v %v", label, args[i])
		}
	}
	
	if label == "" {
		return nil, fmt.Errorf("invalid radio label")
	}
	b := Radio{Name: name, Label: label}
	
	return b, nil
}
 
type Input struct {
	Name   string
	Value string
}
 
//input text box template
func (b Input) TemplateName() string { return "input" }
 
//parses a given input box and return the html element
func parseInput(w http.ResponseWriter, r *http.Request, fileName string, lineno int, text string) (Elem, error) {
 
	args := strings.Fields(text)
	name := args[1]
	if name == "" {
		return nil, fmt.Errorf("invalid input name")
	}
 
	value := ""
	for i:=2; i < len(args); i++ {
		if i == 2 {
			value = args[2]
		} else {
			value = fmt.Sprintf("%v %v", value, args[i])
		}
	}
	
	if value == "" {
		return nil, fmt.Errorf("invalid input value")
	}
	b := Input{Name: name, Value: value}
	
	return b, nil
}
 
type Submit struct {
	Mode   string
	Caption string
}

//a submit button template
func (b Submit) TemplateName() string { return "submit" }
 
//parses a given submit button and return the html element
func parseSubmit(w http.ResponseWriter, r *http.Request, fileName string, lineno int, text string) (Elem, error) {
 
	args := strings.Fields(text)
	mode := args[1]
	if mode == "" {
		return nil, fmt.Errorf("invalid submit mode")
	}
 
	value := ""
	for i:=2; i < len(args); i++ {
		if i == 2 {
			value = args[2]
		} else {
			value = fmt.Sprintf("%v %v", value, args[i])
		}
	}
	
	if value == "" {
		return nil, fmt.Errorf("invalid submit value")
	}
	b := Submit{Mode: mode, Caption: value}
	
	return b, nil
}

//redners a link html tags
func renderLink(href, text string) string {
	text = font(text)
	if text == "" {
		text = href
	}
	//D0048
	//bug - doesnt work on slides
	if strings.Index(href, "anchor") != -1 {
		target := "_self"
		anc := strings.Replace(href,"#","",-1)
		return fmt.Sprintf(`<a href="#" onclick="gotoAnchor('%s')" target="%s">%s</a>`, anc, target, text)
	} 
	// Open links in new window only when their url is absolute.
	target := "_blank"
	if u, err := url.Parse(href); err != nil {
		//log.Println("rendernLink parsing url:", err)
	} else if !u.IsAbs() || u.Scheme == "javascript" {
		target = "_self"
	}
	return fmt.Sprintf(`<a href="%s" target="%s">%s</a>`, href, target, text)
}
 
// parseInlineLink parses an inline link at the start of s, and returns
// a rendered HTML link and the total length of the raw inline link.
// If no inline link is present, it returns all zeroes.
func parseInlineLink(s string) (link string, length int) {
	if !strings.HasPrefix(s, "[[") {
		return
	}
	end := strings.Index(s, "]]")
	if end == -1 {
		return
	}
	urlEnd := strings.Index(s, "]")
	rawURL := s[2:urlEnd]
	const badURLChars = `<>"{}|\^[] ` + "`" // per RFC2396 section 2.4.3
	if strings.ContainsAny(rawURL, badURLChars) {
		return
	}
	if urlEnd == end {
		simpleUrl := ""
		url, err := url.Parse(rawURL)
		if err == nil {
			// If the URL is http://foo.com, drop the http://
			// In other words, render [[https://golang.org]] as:
			//   <a href="https://golang.org">golang.org</a>
			
			if strings.HasPrefix(rawURL, url.Scheme+"://") {
				simpleUrl = strings.TrimPrefix(rawURL, url.Scheme+"://")
			} else if strings.HasPrefix(rawURL, url.Scheme+":") {
				simpleUrl = strings.TrimPrefix(rawURL, url.Scheme+":")
			}
		}
		return renderLink(rawURL, simpleUrl), end + 2
	}
	if s[urlEnd:urlEnd+2] != "][" {
		return
	}
	text := s[urlEnd+2 : end]
	return renderLink(rawURL, text), end + 2
}
 
//LINK end--
 
//IFRAME --
 
type Iframe struct {
	URL    string
	Width  int
	Height int
}

//handles iframe template
func (i Iframe) TemplateName() string { return "iframe" }

//parses a given iframe and return html element
func parseIframe(w http.ResponseWriter, r *http.Request, fileName string, lineno int, text string) (Elem, error) {
	args := strings.Fields(text)
	i := Iframe{URL: args[1]}
 
	a, err := parseArgs(fileName, lineno, args[2:])
	if err != nil {
		return nil, err
	}
	switch len(a) {
	case 0:
		// no size parameters
	case 2:
		if v, ok := a[0].(int); ok {
			i.Height = v
		}
		if v, ok := a[1].(int); ok {
			i.Width = v
		}
	default:
		return nil, fmt.Errorf("incorrect image invocation: %q", text)
	}
	return i, nil
}
//IFRAME end--
 
//CAPTION --
type Caption struct {
	Text string
}
 
//caption template
func (c Caption) TemplateName() string { return "caption" }
 
//parses a given caption and return html element
func parseCaption(w http.ResponseWriter, r *http.Request, _ string, _ int, text string) (Elem, error) {
	text = strings.TrimSpace(strings.TrimPrefix(text, ".caption"))
	return Caption{text}, nil
}
//CAPTION end --
 
//BLOCKQUOTE
type Blockquote struct {
	Text string
}

//blockquote template
func (c Blockquote) TemplateName() string { return "blockquote" }
 
//parses a given blockquote and return html element
func parseBlockquote(w http.ResponseWriter, r *http.Request, _ string, _ int, text string) (Elem, error) {
	text = strings.TrimSpace(strings.TrimPrefix(text, ".blockquote"))
	return Blockquote{text}, nil
}

//ANCHOR
type Anchor struct {
	Name string
}

//anchor template 
func (c Anchor) TemplateName() string { return "anchor" }
 
//parses a given anchor and return html element
func parseAnchor(w http.ResponseWriter, r *http.Request, _ string, _ int, text string) (Elem, error) {
	text = strings.TrimSpace(strings.TrimPrefix(text, ".anchor"))
	return Anchor{text}, nil
}

//D0052
//OPEN
type OpenLink struct {
	URL string
}
//D0052
//open url template 
func (c OpenLink) TemplateName() string { return "open" }
//D0052 
//parses a given url to open as new window
func parseOpen(w http.ResponseWriter, r *http.Request, _ string, _ int, text string) (Elem, error) {
	text = strings.TrimSpace(strings.TrimPrefix(text, ".open"))
	return OpenLink{text}, nil
}
 
//IMAGE --
 
type Image struct {
	URL    string
	Width  int
	Height int
}
 
//image template
func (i Image) TemplateName() string { return "image" }
 
//parses a given image and return html element
func parseImage(w http.ResponseWriter, r *http.Request, fileName string, lineno int, text string) (Elem, error) {
	//c := appengine.NewContext(r)
	
    defer func() { //catch or finally
        if err := recover(); err != nil { //catch
            log.Panicf("panic error in procesing: %q", text)
			os.Exit(1)
        }
    }()
	
	args := strings.Fields(text)
	img := Image{URL: args[1]}
 
	a, err := parseArgs(fileName, lineno, args[2:])
	if err != nil {
		return nil, err
	}
	switch len(a) {
	case 0:
		// no size parameters
	case 2:
		// If a parameter is empty (underscore) or invalid
		// leave the field set to zero. The "image" action
		// template will then omit that img tag attribute and
		// the browser will calculate the value to preserve
		// the aspect ratio.
		if v, ok := a[0].(int); ok {
			img.Height = v
		}
		if v, ok := a[1].(int); ok {
			img.Width = v
		}
	default:
		return nil, fmt.Errorf("incorrect image invocation: %q", text)
	}
	return img, nil
}
 
//IMAGE end --
 
type Code struct {
	Text     template.HTML
	Play     bool   // runnable code
	FileName string // file name
	Ext      string // file extension
	Raw      []byte // content of the file
}
 
//code template
func (c Code) TemplateName() string { return "code" }
 
// The input line is a .code or .play entry with a file name and an optional HLfoo marker on the end.
// Anything between the file and HL (if any) is an address expression, which we treat as a string here.
// We pick off the HL first, for easy parsing.
var (
	highlightRE = regexp.MustCompile(`\s+HL([a-zA-Z0-9_]+)?$`)
	hlCommentRE = regexp.MustCompile(`(.+) // HL(.*)$`)
	codeRE      = regexp.MustCompile(`\.(code|play)\s+((?:(?:-edit|-numbers)\s+)*)([^\s]+)(?:\s+(.*))?$`)
)
 
// parseCode parses a code present directive. Its syntax:
//   .code [-numbers] [-edit] <filename> [address] [highlight]
// The directive may also be ".play" if the snippet is executable.
func parseCode(w http.ResponseWriter, r *http.Request, sourceFile string, sourceLine int, cmd string) (Elem, error) {
	
	cmd = strings.TrimSpace(cmd)
 
	// Pull off the HL, if any, from the end of the input line.
	highlight := ""
	if hl := highlightRE.FindStringSubmatchIndex(cmd); len(hl) == 4 {
		highlight = cmd[hl[2]:hl[3]]
		cmd = cmd[:hl[2]-2]
	}
 
	// Parse the remaining command line.
	// Arguments:
	// args[0]: whole match
	// args[1]:  .code/.play
	// args[2]: flags ("-edit -numbers")
	// args[3]: file name
	// args[4]: optional address
	args := codeRE.FindStringSubmatch(cmd)
	if len(args) != 5 {
		return nil, fmt.Errorf("%s:%d: syntax error for .code/.play invocation", sourceFile, sourceLine)
	}
	//command, flags, file, addr := args[1], args[2], args[3], strings.TrimSpace(args[4])
	command, flags, mediaID, addr := args[1], args[2], args[3], strings.TrimSpace(args[4])
	play := command == "play" && PlayEnabled
 
	// Read in code file and (optionally) match address.
	//filename := filepath.Join(filepath.Dir(sourceFile), file)
	filename := mediaID
	//textBytes, err := ioutil.ReadFile(filename)
	mediaID2 := str2int(mediaID)
	textBytes, err := readBlobText(w, r, mediaID2)
	if err != nil {
		return nil, fmt.Errorf("%s:%d: %v", sourceFile, sourceLine, err)
		
	}
	lo, hi, err := addrToByteRange(addr, 0, textBytes)
	if err != nil {
		return nil, fmt.Errorf("%s:%d: %v", sourceFile, sourceLine, err)
	}
 
	// Acme pattern matches can stop mid-line,
	// so run to end of line in both directions if not at line start/end.
	for lo > 0 && textBytes[lo-1] != '\n' {
		lo--
	}
	if hi > 0 {
		for hi < len(textBytes) && textBytes[hi-1] != '\n' {
			hi++
		}
	}
 
	lines := codeLines(textBytes, lo, hi)
 
	data := &codeTemplateData{
		Lines:   formatLines(lines, highlight),
		Edit:    strings.Contains(flags, "-edit"),
		Numbers: strings.Contains(flags, "-numbers"),
	}
 
	// Include before and after in a hidden span for playground code.
	if play {
		data.Prefix = textBytes[:lo]
		data.Suffix = textBytes[hi:]
	}
 
	var buf bytes.Buffer
	if err := codeTemplate.Execute(&buf, data); err != nil {
		return nil, err
	}
	return Code{
		Text:     template.HTML(buf.String()),
		Play:     play,
		FileName: filepath.Base(filename),
		Ext:      filepath.Ext(filename),
		Raw:      rawCode(lines),
	}, nil
}

//reads a content of a given media ID 
//return the bytes of that content
func readBlobText(w http.ResponseWriter, r *http.Request, mediaID int) (bText []byte, err2 error) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
	//_, uid := checkSession(w,r)
    //D0086
    datastoreClient := createClientDS()
	//query media
	dsKey := fmt.Sprintf("%d", mediaID)
	key := datastore.NameKey("TDSMEDIA", dsKey, nil)
	q := datastore.NewQuery("TDSMEDIA").Filter("__key__ =", key)
	//log.Panicf("[S0634]")
	media := make([]TDSMEDIA, 0, 1)
	if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
		 panic(err)
		//return
	}
    //log.Printf("datastoreClient.Get()  [84857]")
	BLOB_KEY := ""
	for _, p := range media{
		BLOB_KEY = p.BLOB_KEY
		//fmt.Fprintf(w, "BLOB_KEY: %v<br>", BLOB_KEY)
		break
	}
 
	BLOB_KEY_CACHE := fmt.Sprintf("BLOB_KEY_CACHE_%v", BLOB_KEY)
    BLOB_KEY_CACHE_TXT := []byte("")
    BLOB_KEY_CACHE_TXT = getBytMemcacheValueByKey(w,r,BLOB_KEY_CACHE)
    if BLOB_KEY_CACHE_TXT != nil {
		bText = BLOB_KEY_CACHE_TXT
	}
	
	if string(BLOB_KEY_CACHE_TXT) == "" {
        bText, err := readGcsObject(BLOB_KEY)
        if err != nil {
            panic(err)
        }
		//fmt.Fprintf(w, "bText: %v<br>", bText)
		//BLOB_KEY_CACHE := fmt.Sprintf("usersProcessor_IS_LOGGED_IN_%s", uid)
		putBytesToMemcacheWithoutExp(w,r,BLOB_KEY_CACHE,bText)
	}
	return bText, nil
}
 
// formatLines returns a new slice of codeLine with the given lines
// replacing tabs with spaces and adding highlighting where needed.
func formatLines(lines []codeLine, highlight string) []codeLine {
	formatted := make([]codeLine, len(lines))
	for i, line := range lines {
		// Replace tabs with spaces, which work better in HTML.
		line.L = strings.Replace(line.L, "\t", "    ", -1)
 
		// Highlight lines that end with "// HL[highlight]"
		// and strip the magic comment.
		if m := hlCommentRE.FindStringSubmatch(line.L); m != nil {
			line.L = m[1]
			line.HL = m[2] == highlight
		}
 
		formatted[i] = line
	}
	return formatted
}
 
// rawCode returns the code represented by the given codeLines without any kind
// of formatting.
func rawCode(lines []codeLine) []byte {
	b := new(bytes.Buffer)
	for _, line := range lines {
		b.WriteString(line.L)
		b.WriteByte('\n')
	}
	return b.Bytes()
}
 
type codeTemplateData struct {
	Lines          []codeLine
	Prefix, Suffix []byte
	Edit, Numbers  bool
}
 
var leadingSpaceRE = regexp.MustCompile(`^[ \t]*`)
 
var codeTemplate = template.Must(template.New("codeTemplate").Funcs(template.FuncMap{
	"trimSpace":    strings.TrimSpace,
	"leadingSpace": leadingSpaceRE.FindString,
}).Parse(codeTemplateHTML))
 
const codeTemplateHTML = `
{{with .Prefix}}<pre style="display: none"><span>{{printf "%s" .}}</span></pre>{{end}}
 
<pre{{if .Edit}} contenteditable="true" spellcheck="false"{{end}}{{if .Numbers}} class="numbers"{{end}}>{{/*
	*/}}{{range .Lines}}<span num="{{.N}}">{{/*
	*/}}{{if .HL}}{{leadingSpace .L}}<b>{{trimSpace .L}}</b>{{/*
	*/}}{{else}}{{.L}}{{end}}{{/*
*/}}</span>
{{end}}</pre>
 
{{with .Suffix}}<pre style="display: none"><span>{{printf "%s" .}}</span></pre>{{end}}
`
 
// codeLine represents a line of code extracted from a source file.
type codeLine struct {
	L  string // The line of code.
	N  int    // The line number from the source file.
	HL bool   // Whether the line should be highlighted.
}
 
// codeLines takes a source file and returns the lines that
// span the byte range specified by start and end.
// It discards lines that end in "OMIT".
func codeLines(src []byte, start, end int) (lines []codeLine) {
	startLine := 1
	for i, b := range src {
		if i == start {
			break
		}
		if b == '\n' {
			startLine++
		}
	}
	s := bufio.NewScanner(bytes.NewReader(src[start:end]))
	for n := startLine; s.Scan(); n++ {
		l := s.Text()
		if strings.HasSuffix(l, "OMIT") {
			continue
		}
		lines = append(lines, codeLine{L: l, N: n})
	}
	// Trim leading and trailing blank lines.
	for len(lines) > 0 && len(lines[0].L) == 0 {
		lines = lines[1:]
	}
	for len(lines) > 0 && len(lines[len(lines)-1].L) == 0 {
		lines = lines[:len(lines)-1]
	}
	return
}
 
//parses given arguments
func parseArgs(name string, line int, args []string) (res []interface{}, err error) {
	res = make([]interface{}, len(args))
	for i, v := range args {
		if len(v) == 0 {
			return nil, fmt.Errorf("%s:%d bad code argument %q", name, line, v)
		}
		switch v[0] {
		case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
			n, err := strconv.Atoi(v)
			if err != nil {
				return nil, fmt.Errorf("%s:%d bad code argument %q", name, line, v)
			}
			res[i] = n
		case '/':
			if len(v) < 2 || v[len(v)-1] != '/' {
				return nil, fmt.Errorf("%s:%d bad code argument %q", name, line, v)
			}
			res[i] = v
		case '$':
			res[i] = "$"
		case '_':
			if len(v) == 1 {
				// Do nothing; "_" indicates an intentionally empty parameter.
				break
			}
			fallthrough
		default:
			return nil, fmt.Errorf("%s:%d bad code argument %q", name, line, v)
		}
	}
	return
}
 
// parseArg returns the integer or string value of the argument and tells which it is.
func parseArg(arg interface{}, max int) (ival int, sval string, isInt bool, err error) {
	switch n := arg.(type) {
	case int:
		if n <= 0 || n > max {
			return 0, "", false, fmt.Errorf("%d is out of range", n)
		}
		return n, "", true, nil
	case string:
		return 0, n, false, nil
	}
	return 0, "", false, fmt.Errorf("unrecognized argument %v type %T", arg, arg)
}
 
// match identifies the input line that matches the pattern in a code invocation.
// If start>0, match lines starting there rather than at the beginning.
// The return value is 1-indexed.
func match(file string, start int, lines []string, pattern string) (int, error) {
	// $ matches the end of the file.
	if pattern == "$" {
		if len(lines) == 0 {
			return 0, fmt.Errorf("%q: empty file", file)
		}
		return len(lines), nil
	}
	// /regexp/ matches the line that matches the regexp.
	if len(pattern) > 2 && pattern[0] == '/' && pattern[len(pattern)-1] == '/' {
		re, err := regexp.Compile(pattern[1 : len(pattern)-1])
		if err != nil {
			return 0, err
		}
		for i := start; i < len(lines); i++ {
			if re.MatchString(lines[i]) {
				return i + 1, nil
			}
		}
		return 0, fmt.Errorf("%s: no match for %#q", file, pattern)
	}
	return 0, fmt.Errorf("unrecognized pattern: %q", pattern)
}
 
// Style returns s with HTML entities escaped and font indicators turned into
// HTML font tags.
func Style(s string) template.HTML {
	return template.HTML(font(html.EscapeString(s)))
}
 
// font returns s with font indicators turned into HTML font tags.
func font(s string) string {
	if strings.IndexAny(s, "[`_*") == -1 {
		return s
	}
	words := split(s)
	var b bytes.Buffer
Word:
	for w, word := range words {
		if len(word) < 2 {
			continue Word
		}
		if link, _ := parseInlineLink(word); link != "" {
			words[w] = link
			continue Word
		}
		const punctuation = `.,;:()!?--'"`
		const marker = "_*`"
		// Initial punctuation is OK but must be peeled off.
		first := strings.IndexAny(word, marker)
		if first == -1 {
			continue Word
		}
		// Is the marker prefixed only by punctuation?
		for _, r := range word[:first] {
			if !strings.ContainsRune(punctuation, r) {
				continue Word
			}
		}
		open, word := word[:first], word[first:]
		char := word[0] // ASCII is OK.
		close := ""
		switch char {
		default:
			continue Word
		case '_':
			open += "<i>"
			close = "</i>"
		case '*':
			open += "<b>"
			close = "</b>"
		case '`':
			open += "<code>"
			close = "</code>"
		}
		// Terminal punctuation is OK but must be peeled off.
		last := strings.LastIndex(word, word[:1])
		if last == 0 {
			continue Word
		}
		head, tail := word[:last+1], word[last+1:]
		for _, r := range tail {
			if !strings.ContainsRune(punctuation, r) {
				continue Word
			}
		}
		b.Reset()
		b.WriteString(open)
		var wid int
		for i := 1; i < len(head)-1; i += wid {
			var r rune
			r, wid = utf8.DecodeRuneInString(head[i:])
			if r != rune(char) {
				// Ordinary character.
				b.WriteRune(r)
				continue
			}
			if head[i+1] != char {
				// Inner char becomes space.
				b.WriteRune(' ')
				continue
			}
			// Doubled char becomes real char.
			// Not worth worrying about "_x__".
			b.WriteByte(char)
			wid++ // Consumed two chars, both ASCII.
		}
		b.WriteString(close) // Write closing tag.
		b.WriteString(tail)  // Restore trailing punctuation.
		words[w] = b.String()
	}
	return strings.Join(words, "")
}
 
// split is like strings.Fields but also returns the runs of spaces
// and treats inline links as distinct words.
func split(s string) []string {
	var (
		words = make([]string, 0, 10)
		start = 0
	)
 
	// appendWord appends the string s[start:end] to the words slice.
	// If the word contains the beginning of a link, the non-link portion
	// of the word and the entire link are appended as separate words,
	// and the start index is advanced to the end of the link.
	appendWord := func(end int) {
		if j := strings.Index(s[start:end], "[["); j > -1 {
			if _, l := parseInlineLink(s[start+j:]); l > 0 {
				// Append portion before link, if any.
				if j > 0 {
					words = append(words, s[start:start+j])
				}
				// Append link itself.
				words = append(words, s[start+j:start+j+l])
				// Advance start index to end of link.
				start = start + j + l
				return
			}
		}
		// No link; just add the word.
		words = append(words, s[start:end])
		start = end
	}
 
	wasSpace := false
	for i, r := range s {
		isSpace := unicode.IsSpace(r)
		if i > start && isSpace != wasSpace {
			appendWord(i)
		}
		wasSpace = isSpace
	}
	for start < len(s) {
		appendWord(len(s))
	}
	return words
}
 
// addrToByte evaluates the given address starting at offset start in data.
// It returns the lo and hi byte offset of the matched region within data.
func addrToByteRange(addr string, start int, data []byte) (lo, hi int, err error) {
	if addr == "" {
		lo, hi = start, len(data)
		return
	}
	var (
		dir        byte
		prevc      byte
		charOffset bool
	)
	lo = start
	hi = start
	for addr != "" && err == nil {
		c := addr[0]
		switch c {
		default:
			err = errors.New("invalid address syntax near " + string(c))
		case ',':
			if len(addr) == 1 {
				hi = len(data)
			} else {
				_, hi, err = addrToByteRange(addr[1:], hi, data)
			}
			return
 
		case '+', '-':
			if prevc == '+' || prevc == '-' {
				lo, hi, err = addrNumber(data, lo, hi, prevc, 1, charOffset)
			}
			dir = c
 
		case '$':
			lo = len(data)
			hi = len(data)
			if len(addr) > 1 {
				dir = '+'
			}
 
		case '#':
			charOffset = true
 
		case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
			var i int
			for i = 1; i < len(addr); i++ {
				if addr[i] < '0' || addr[i] > '9' {
					break
				}
			}
			var n int
			n, err = strconv.Atoi(addr[0:i])
			if err != nil {
				break
			}
			lo, hi, err = addrNumber(data, lo, hi, dir, n, charOffset)
			dir = 0
			charOffset = false
			prevc = c
			addr = addr[i:]
			continue
 
		case '/':
			var i, j int
		Regexp:
			for i = 1; i < len(addr); i++ {
				switch addr[i] {
				case '\\':
					i++
				case '/':
					j = i + 1
					break Regexp
				}
			}
			if j == 0 {
				j = i
			}
			pattern := addr[1:i]
			lo, hi, err = addrRegexp(data, lo, hi, dir, pattern)
			prevc = c
			addr = addr[j:]
			continue
		}
		prevc = c
		addr = addr[1:]
	}
 
	if err == nil && dir != 0 {
		lo, hi, err = addrNumber(data, lo, hi, dir, 1, charOffset)
	}
	if err != nil {
		return 0, 0, err
	}
	return lo, hi, nil
}
 
// addrNumber applies the given dir, n, and charOffset to the address lo, hi.
func addrNumber(data []byte, lo, hi int, dir byte, n int, charOffset bool) (int, int, error) {
	switch dir {
	case 0:
		lo = 0
		hi = 0
		fallthrough
 
	case '+':
		if charOffset {
			pos := hi
			for ; n > 0 && pos < len(data); n-- {
				_, size := utf8.DecodeRune(data[pos:])
				pos += size
			}
			if n == 0 {
				return pos, pos, nil
			}
			break
		}
		// find next beginning of line
		if hi > 0 {
			for hi < len(data) && data[hi-1] != '\n' {
				hi++
			}
		}
		lo = hi
		if n == 0 {
			return lo, hi, nil
		}
		for ; hi < len(data); hi++ {
			if data[hi] != '\n' {
				continue
			}
			switch n--; n {
			case 1:
				lo = hi + 1
			case 0:
				return lo, hi + 1, nil
			}
		}
 
	case '-':
		if charOffset {
			// Scan backward for bytes that are not UTF-8 continuation bytes.
			pos := lo
			for ; pos > 0 && n > 0; pos-- {
				if data[pos]&0xc0 != 0x80 {
					n--
				}
			}
			if n == 0 {
				return pos, pos, nil
			}
			break
		}
		// find earlier beginning of line
		for lo > 0 && data[lo-1] != '\n' {
			lo--
		}
		hi = lo
		if n == 0 {
			return lo, hi, nil
		}
		for ; lo >= 0; lo-- {
			if lo > 0 && data[lo-1] != '\n' {
				continue
			}
			switch n--; n {
			case 1:
				hi = lo
			case 0:
				return lo, hi, nil
			}
		}
	}
 
	return 0, 0, errors.New("address out of range")
}
 
// addrRegexp searches for pattern in the given direction starting at lo, hi.
// The direction dir is '+' (search forward from hi) or '-' (search backward from lo).
// Backward searches are unimplemented.
func addrRegexp(data []byte, lo, hi int, dir byte, pattern string) (int, int, error) {
	// We want ^ and $ to work as in sam/acme, so use ?m.
	re, err := regexp.Compile("(?m:" + pattern + ")")
	if err != nil {
		return 0, 0, err
	}
	if dir == '-' {
		// Could implement reverse search using binary search
		// through file, but that seems like overkill.
		return 0, 0, errors.New("reverse search not implemented")
	}
	m := re.FindIndex(data[hi:])
	if len(m) > 0 {
		m[0] += hi
		m[1] += hi
	} else if hi > 0 {
		// No match.  Wrap to beginning of data.
		m = re.FindIndex(data)
	}
	if len(m) == 0 {
		return 0, 0, errors.New("no match for " + pattern)
	}
	return m[0], m[1], nil
}
 
//parses an html string and returns elements
func parseHTML(w http.ResponseWriter, r *http.Request, fileName string, lineno int, text string) (Elem, error) {
	
	p := strings.Fields(text)
	if len(p) != 2 {
		return nil, errors.New("invalid .html args")
	}
	name := filepath.Join(filepath.Dir(fileName), p[1])
	b, err := ioutil.ReadFile(name)
	if err != nil {
		return nil, err
		//textBytes2 := fmt.Sprintf("%s: %v", fileName, err)
		//b = []byte(textBytes2)
	}
	return HTML{template.HTML(b)}, nil
}
 
type HTML struct {
	template.HTML
}
 
//html template
func (s HTML) TemplateName() string { return "html" }
 
//generates a random number given start and end ranges
func randNum(min, max int) int {
    //rand.Seed(time.Now().Unix())
	rand.Seed(time.Now().UTC().UnixNano())
	//rand.Seed(time.Now().UnixNano())
    return rand.Intn(max - min) + min
}
 
//generate random password given a desired length
func randSeq(n int) string {
    rand.Seed(time.Now().UTC().UnixNano())
    b := make([]rune, n)
    for i := range b {
        b[i] = letters[rand.Intn(len(letters))]
    }
    return strings.ToLower(string(b))
}
 
//generate random presenter uid
func randSeq2(n int) string {
    rand.Seed(time.Now().UTC().UnixNano())
    b := make([]rune, n)
    for i := range b {
        b[i] = lettersNumbers[rand.Intn(len(lettersNumbers))]
    }
    return strings.ToLower(string(b))
}
 
//generate random map randomizer
func randSeqM(n int) string {
    rand.Seed(time.Now().UTC().UnixNano())
    b := make([]rune, n)
    for i := range b {
        b[i] = mapNumbers[rand.Intn(len(mapNumbers))]
    }
    return strings.ToLower(string(b))
}
//Google Search API (for overall content search of Google data)
// Search sends query to Google search and returns the results.
func API_gsearch(w http.ResponseWriter, r *http.Request) {
	FUNC_CODE := r.FormValue("FUNC_CODE")
	UID := r.FormValue("UID")
	SEARCH_KEY := r.FormValue("SEARCH_KEY")
	MODE := r.FormValue("MODE")
	//uid := UID
	switch FUNC_CODE {
								
		case "SNWS":
			redURL := fmt.Sprintf("/gsearch?FUNC_CODE=VIEW&UID=%v&SEARCH_KEY=%v&MODE=D&SRC=n", UID, SEARCH_KEY)
			http.Redirect(w, r, redURL, http.StatusFound)
			return
			
		case "VIEW":
				URL := r.FormValue("URL")
				SRC := r.FormValue("SRC")
				cKey := ""
				switch SRC {	
					case "n":
						URL = fmt.Sprintf("https://www.google.com.ph/search?q=%v&tbm=nws&source=lnms&tbs=qdr:m", strings.Replace(SEARCH_KEY, " ", "+", -1))
						cKey = fmt.Sprintf("ULAPPH_GWEBS_NEWS_%v", strings.Replace(SEARCH_KEY, " ", "", -1))
						
					default:
						cKey = fmt.Sprintf("ULAPPH_GWEBS_%v", URL)
				}
				
				///////////////////////////////////////////////////
				//CREATE AUTO SEARCH CONTENT FOR THIS KEYWORD
				var lines []string
				lines = append(lines, fmt.Sprintf("Visit URL"))
				lines = append(lines, fmt.Sprintf("\"%v\"", URL))
				const layout = "2 Jan 2006"
				t := time.Now().Local()
				lines = append(lines, fmt.Sprintf("%v", t.Format(layout)))
				lines = append(lines, fmt.Sprintf(""))
				lines = append(lines, fmt.Sprintf(""))
				//lines = append(lines, fmt.Sprintf("ULAPPH Slides"))
				//lines = append(lines, fmt.Sprintf("ULAPPH Cloud Desktop"))
				lines = append(lines, fmt.Sprintf("%v", APP_DESC))
				lines = append(lines, fmt.Sprintf("%v", getSchemeUrl(w,r)))
				lines = append(lines, fmt.Sprintf(""))
 
				if SYS_DISP_ADS_CONTENT == true {
					//put ads
					for i := 1; i < 4; i++ {
						//append ads
						lines = append(lines, " ")
						//thisAd := fmt.Sprintf("* ")
						thisAd := fmt.Sprintf("* Advertisement")
						lines = append(lines, thisAd)
						thisFrame := fmt.Sprintf(".iframe %v/rag?d=%s&n=%d 600 900", SYS_DISP_ADS_HOST, "desktop0", i)
						lines = append(lines, fmt.Sprintf("%v", thisFrame))
						lines = append(lines, " ")
						lines = append(lines, " ")
					
					}
				}
				
				if URL == "" {
 
					return
				}
				lines = append(lines, fmt.Sprintf("* "))
				lines = append(lines, fmt.Sprintf(""))
				fUrl := fmt.Sprintf("/search?f=fetch-url&URL=%v", URL)
				lines = append(lines, fmt.Sprintf(".iframe %v 600 900", fUrl))
				lines = append(lines, fmt.Sprintf(""))
									
				//append in auto-slides-------------
				lines = append(lines, fmt.Sprintf("* Last Updated"))
				lines = append(lines, fmt.Sprintf("- %v", time.Now()))
				lines = append(lines, fmt.Sprintf(""))
				//------------
					
				//--------------------------
				doc, err := Parse4(w, r, &Lines{0, lines}, "GWEB", 0)
				if err != nil {
					panic(err)
				}
				
				//FL_DESKTOP := checkDesktop(w,r)
				
				FL_DESKTOP := true
				if FL_DESKTOP == true {
					//fmt.Fprintf(w, "doc: %v<br>", doc)
					var buf bytes.Buffer
					title2 := fmt.Sprintf("%v.slide", "GWEB")
					SL_TMP := "S"
					//renderPresentation(&buf, title2, doc)
					if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
						panic(err)
					}		
					//fmt.Fprintf(w, "lines:<br> %v<br>", buf.Bytes())
					putBytesToMemcacheWithExp(w,r,cKey,buf.Bytes(),GEN_CONTENT_EXPIRES3)
 
				}
 
				if MODE == "D" {
					redURL := fmt.Sprintf("/search?f=get-auto-content&cKey=%v&mode=vu", cKey)
					http.Redirect(w, r, redURL, http.StatusFound)
					return		
				}
			return
 
		case "SEARCH-ACTS-YTB":
			if SYS_CSE_ENABLED == false {
				fmt.Fprintf(w, "Google Custom Search is diabled!")
				return
			}
			urlStr := fmt.Sprintf("%vutube?YT_FUNC=1&SEARCH_KEY=%v&UID=%v&order=%v&duration=%v&MODE=D", getSchemeUrl(w,r), SEARCH_KEY, UID, "date", "any")
			http.Redirect(w, r, urlStr, http.StatusFound)
			return			
	}
}

//D0044
//handles automated installer of ulapph cloud desktop
//handles callbacks and displays installer page
func handlerGaeAdminCallback(w http.ResponseWriter, r *http.Request) {
	_, uid := checkSession(w,r)
	renderInstallerPage(w,r,".install", uid)
}
//D0033
//handles Google call backs after an API call using Oauth2
func handlerOauth2GoogleCallback(w http.ResponseWriter, r *http.Request) {
	//log.Printf("handlerOauth2GoogleCallback()")
	//c := appengine.NewContext(r)
	code := r.FormValue("code")
	state := r.FormValue("state")
	error := r.FormValue("error")
	//_, uid := checkSession(w,r)
	if error != "" {
		fmt.Fprintf(w, "[ERROR: %v] Request not processed.", error)	
		return
	}
	if state == GOOGLE_OAUTH2_STATE {
		//log.Printf("valid state...")
		turl := GOOGLE_OAUTH2_TOKEN
		values := url.Values{
		 "code": {code},
		 "client_id": {GOOGLE_OAUTH2_CLIENTID},
		 "client_secret": {GOOGLE_OAUTH2_SECRET},
		 "redirect_uri": {"https://www.ulapph.com/oauth2/google/callback"},
		 "grant_type": {"authorization_code"},
		}
		req, _ := http.NewRequest("POST", turl, strings.NewReader(values.Encode()))
		thisLength := strconv.Itoa(len(values))
		req.Header.Set("Content-Length", thisLength)
		req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		client := &http.Client{}
		res, err := client.Do(req)
		if err != nil {
			panic(err)
			//return
		}
		bodyBytes, _ := ioutil.ReadAll(res.Body)
		if res.StatusCode == 200 {
			gr := new(GoogleToken)
			err = json.Unmarshal(bodyBytes, gr)
			if err != nil {
				//log.Panicf("[json.Unmarshal] error: %v", err)
			} else {
                gTok := gr.AccessToken
                //log.Printf("AccessToken: %v", gTok)
                if gTok == "" {
                    panic(fmt.Errorf("Token was not found!"))
                    //return
                }
                //verify token and get details
                uid := ""
				cKey := fmt.Sprintf("GDRIVE_TOKEN_CACHE_%v", uid)
				putBytesToMemcacheWithExp(w,r,cKey,bodyBytes,GEN_CONTENT_EXPIRES)
				fmt.Fprintf(w, "[Response OK] You can close this window.<br>")
				const closetab = `
				<script>
					setTimeout("window.close()", 1000);
				</script>
				`
				fmt.Fprintf(w, "%v", closetab)
			}
		} else {
			fmt.Fprintf(w, "[Response Code] %v<br>", res.StatusCode)
			fmt.Fprintf(w, "[Response Body] %v<br>", string(bodyBytes))
		}
	} else {
	}
}
//D0033
//handles Oauth2 callback from Github
func handlerOauth2GithubCallback(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
 
	code := r.FormValue("code")
	state := r.FormValue("state")
	error := r.FormValue("error")
	//_, uid := checkSession(w,r)
 
	if error != "" {
		fmt.Fprintf(w, "[ERROR: %v] Request not processed.", error)	
		return
	}
	if state == GITHUB_OAUTH2_STATE {
 
		turl := GITHUB_TOKEN_URL
		values := url.Values{
		 "code": {code},
		 "state": {state},
		 "client_id": {GITHUB_CLIENT_ID},
		 "client_secret": {GITHUB_CLIENT_SECRET},
		 "redirect_uri": {"https://www.ulapph.com/oauth2/github/callback"},
		}
		
		req, _ := http.NewRequest("POST", turl, strings.NewReader(values.Encode()))
		thisLength := strconv.Itoa(len(values))
		req.Header.Set("Content-Length", thisLength)
		req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		req.Header.Set("Accept", "application/json")
		//client := urlfetch.Client(c)
        client := &http.Client{}
		res, err := client.Do(req)
		if err != nil {
 
			return
		}
 
		bodyBytes, _ := ioutil.ReadAll(res.Body)
		
		if res.StatusCode == 200 {
			gr := new(GithubToken)
			err = json.Unmarshal(bodyBytes, gr)
			if err != nil {
				//log.Panicf("[json.Unmarshal] error: %v", err)
			} else {
 
 
 
 
				//save
				_, uid := checkSession(w,r)
				//check quota
				if uid == "" {
					fmt.Fprintf(w, "[Error] User not found<br>")
					return
				}
				
				//get github user
				GITHUB_USER_NAME, err := getGithubUser(w,r)
				if err != nil {
					fmt.Fprintf(w, "[Authorization Error] No github user set")
					return		
				}
	
				//cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", uid)
				cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", GITHUB_USER_NAME)
				putBytesToMemcacheWithExp(w,r,cKey,bodyBytes,GEN_CONTENT_EXPIRES)
				fmt.Fprintf(w, "[Response OK] You can close this window.<br>")
				const closetab = `
				<script>
					setTimeout("window.close()", 1000);
				</script>
				`
				fmt.Fprintf(w, "%v", closetab)
			}			
		} else {
			fmt.Fprintf(w, "[Response Code] %v<br>", res.StatusCode)	
			fmt.Fprintf(w, "[Response Body] %v<br>", string(bodyBytes))
		}
	} else {
 
	}
			
}

//D0058
//handles Oauth2 callback from Microsoft Graph
func handlerOauth2MicrosoftCallback(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	//_, uid := checkSession(w,r)
	code := r.FormValue("code")
	state := r.FormValue("state")
	error := r.FormValue("error")
	////log.Printf("code: %v", code)
	////log.Printf("state: %v", state)
	////log.Printf("error: %v", error) 
 
	if error != "" {
		fmt.Fprintf(w, "[ERROR: %v] Request not processed.", error)	
		return
	}
	if state == MICROSOFT_OAUTH2_STATE {
 
		turl := MICROSOFT_TOKEN_URL
		values := url.Values{
		 "code": {code},
		 "state": {state},
		 "client_id": {MICROSOFT_CLIENT_ID},
		 "client_secret": {MICROSOFT_CLIENT_SECRET},
		 "redirect_uri": {"https://www.ulapph.com/oauth2/microsoft/callback"},
		}
		
		req, _ := http.NewRequest("POST", turl, strings.NewReader(values.Encode()))
		thisLength := strconv.Itoa(len(values))
		req.Header.Set("Content-Length", thisLength)
		req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		req.Header.Set("Accept", "application/json")
		//client := urlfetch.Client(c)
        client := &http.Client{}
		res, err := client.Do(req)
		if err != nil {
 
			return
		}
 
		bodyBytes, _ := ioutil.ReadAll(res.Body)
		////log.Printf("%v", string(bodyBytes))
		
		if res.StatusCode == 200 {
			gr := new(MicrosoftToken)
			err = json.Unmarshal(bodyBytes, gr)
			if err != nil {
				//log.Panicf("[json.Unmarshal] error: %v", err)
			} else {

				//save
				_, uid := checkSession(w,r)
				//check quota
				if uid == "" {
					fmt.Fprintf(w, "[Error] User not found<br>")
					return
				}
	
				//cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", uid)
				cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", MICROSOFT_USER_NAME)
				putBytesToMemcacheWithExp(w,r,cKey,bodyBytes,GEN_CONTENT_EXPIRES)
				fmt.Fprintf(w, "[Response OK] You can close this window.<br>")
				const closetab = `
				<script>
					setTimeout("window.close()", 1000);
				</script>
				`
				fmt.Fprintf(w, "%v", closetab)
			}			
		} else {
			fmt.Fprintf(w, "[Response Code] %v<br>", res.StatusCode)	
			fmt.Fprintf(w, "[Response Body] %v<br>", string(bodyBytes))
		}
	} else {
 
	}
			
}

 
//Url Shortener
//shortens a URL based on Google url shortener service
//an integration with the Google Shortner API
func ShortenUrl(w http.ResponseWriter, r *http.Request, longUrl string) (shortenUrl string) {
	//c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
    //defer cancel()
	if SYS_ENABLE_URL_SHORTENER  == false {
		return url.QueryEscape(longUrl)
	}
	return url.QueryEscape(longUrl)
}
//D0040
//gets the GAE given longitude and latitude
func getGaeLatLon(w http.ResponseWriter, r *http.Request) string {
	rh := r.Header
	oLatLong := rh.Get("X-AppEngine-CityLatLong")
	return oLatLong
}
 
// GPS Tracker
//tracks the GPS locations
func ulapphGPS(w http.ResponseWriter, r *http.Request) {
	if SYS_STATELESS_SERVER == true {
		w.WriteHeader(200)
		w.Write([]byte("OK"))
		return
	}
	_, uid := checkSession(w,r)
	GPS_FUNC := r.FormValue("GPS_FUNC")
	switch GPS_FUNC {
		default:
			//when client successfully detects lat/lon
			latstring := r.FormValue("lat")
			lonstring := r.FormValue("lon")
			lat, err := strconv.ParseFloat(latstring, 64)
			if err != nil {
				lat = 0.0
			}
			lon, err := strconv.ParseFloat(lonstring, 64)
			if err != nil {
				lon = 0.0
			}
			if lat != 0.0 && lon != 0.0 {
				xLatLong := fmt.Sprintf("%v+%v", lat, lon)
				xURL := fmt.Sprintf("https://www.google.com.ph/maps/@%v,%v", lat, lon)
				viaStr := getAccessString(w,r,"")
				currenttime := time.Now().Local()
				TSTMP := currenttime.Format("2006-01-02 15:04:05 +0800")
				tviaStr := fmt.Sprintf("%v on %v", viaStr, TSTMP)
				//log.Printf("[UID: %v][LOCATION: %v][URL: %v][VIA: %v]", uid,xLatLong,xURL,tviaStr)
				ulapphDebug(w,r, "info", fmt.Sprintf("[UID: %v][LOCATION: %v][URL: %v][VIA: %v]", uid,xLatLong,xURL,tviaStr))
				//queueLogMapCoors(w,r,xLatLong,uid,xURL,tviaStr,"FAM_TRACKER")
				//add logic for global map
				//procBroadcastUserLoc(w,r,uid,fmt.Sprintf("%v,%v", lat, lon))
			}
			w.Write([]byte("OK"))
	}
}
 
//marshal json and return the datapoints
//used for GPS tracking
func (d datapoint) MarshalJSON() ([]byte, error) {
	lat := fmt.Sprintf("%f", d.Lat)
	lon := fmt.Sprintf("%f", d.Lon)
	jsonResult :=  `{"latitude":"` + lat + `", "longitude":"` + lon + `", "time":"` + d.Time + `"}`
	return []byte(jsonResult), nil
}
 
//creates data points for gps tracking
func createdatapoint(lat float64, lon float64, time string) datapoint {
	return datapoint{Lat: lat, Lon: lon, Time: time}
}
 
//Bible Randomizer
//randomly outputs Bible verses
func ulapphBible(w http.ResponseWriter, r *http.Request) {
	BIB_FUNC := r.FormValue("BIB_FUNC")
	ranBib := ""
	
	switch BIB_FUNC {
 
		case "biblegateway":
			//get random book
			mybook := randNum(1, xBibleTot)
			
			ctr := 0
		    for k, v := range xBibleAll {
				ctr++
				if ctr >= mybook {
					//fmt.Println("k:", k, "v:", v)
					bName := k
					bVal := v
					//random verse
					myverse := randNum(1, bVal)
					ranBib = fmt.Sprintf("%v.%v", bName, myverse)
					break
				}
		    }
			
			//redirect to random bible
			if ranBib == "" {
				ranBib = "Gen.1"
			}
			//https://www.biblegateway.com/audio/dramatized/niv/Gen.1
			//redURL := fmt.Sprintf("https://www.biblegateway.com/static/audio/mclean/kjv/%v", ranBib)
			redURL := fmt.Sprintf("https://www.biblegateway.com/audio/dramatized/kjv/%v", ranBib)
			http.Redirect(w, r, redURL, http.StatusFound)
			return	
			
		default:
			redURL := fmt.Sprintf("https://www.sandersweb.net/bible/verse.php")
			http.Redirect(w, r, redURL, http.StatusFound)
			return	
	}
}
 
//semaphore for determining minimum
func min(a, b int) int {
    if a <= b {
        return a
    }
    return b
}
//encrypter
//encrypts a given SID and an encryption key
func encrypter(w http.ResponseWriter, r *http.Request, SID, ENCRYPTION_KEY string) (encStr []byte) {
    //log.Printf("encrypter")
	_, uid := checkSession(w,r)
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    updateUserActiveData(w, r, c, uid, "encryption")
	SPL := strings.Split(SID,"-")
	TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
	BLOB_KEY := ""
	TITLE := ""
	idx := ""
	DOC_STAT := ""
	FL_SHARED := ""
	AUTHOR := ""
	SHARED_TO := ""
	switch TARGET {
		case "TDSSLIDE":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, TITLE, _, SHARED_TO, _, _ = getTDSSLIDEBlobKey(w, r, docID)
			idx = "IDX_TDSSLIDE"
		case "TDSARTL":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, TITLE, SHARED_TO, _, _ = getTDSARTLBlobKey(w, r, docID)
			idx = "IDX_TDSARTL"
		case "TDSMEDIA":
			BLOB_KEY, _, TITLE, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, SHARED_TO = getTDSMEDIABlobKey(w, r, docID)
			idx = "IDX_TDSMEDIA"
	}
	FL_PROC_OK := false
	switch {
		case uid == AUTHOR:
			FL_PROC_OK = true
		case DOC_STAT == "Premium" && uid != AUTHOR:
			sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=%v", SID)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		case (FL_SHARED == "N" || DOC_STAT == "Personal" || (FL_SHARED == "Y" && DOC_STAT == "Personal")) && SHARED_TO == "":
			isOk := checkPersonalAuthor(w,r,AUTHOR,SID,docID)
			if isOk == true {
				FL_PROC_OK = true
			}
		case DOC_STAT == "Personal" && SHARED_TO != "":
			isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, SID, docID)
			if isAllowed == true {
				//break
				FL_PROC_OK = true
			}
		case DOC_STAT == "ULAPPH Only":
			FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {
				return
			}
		case DOC_STAT == "Worldwide" && FL_SHARED == "Y":
			//allow
			FL_PROC_OK = true
	}
	if FL_PROC_OK == false {
		return
	}
	//thisCont := getBlobText(w, r, BLOB_KEY)
	blobChan := make(chan string)
	go getBlobTextChan(w, r,blobChan, BLOB_KEY)
    thisCont := <- blobChan
    //log.Printf("len(thisCont): %v", len(thisCont))
	//encrypt content
	block, err := aes.NewCipher([]byte(ENCRYPTION_KEY))
	if err != nil {
        //log.Printf("aes.NewCipher: %v", err)
        panic(err)
	}
	b := base64.URLEncoding.EncodeToString([]byte(thisCont))
	ciphertext := make([]byte, aes.BlockSize+len(b))
	iv := ciphertext[:aes.BlockSize]
	if _, err = io.ReadFull(crand.Reader, iv); err != nil {
        //log.Printf("io.ReadFull: %v", err)
		panic(err)
		//return
	}
	cfb := cipher.NewCFBEncrypter(block, iv)
	cfb.XORKeyStream(ciphertext[aes.BlockSize:], []byte(b))
	myEncStr := ciphertext
	csn2 := getUpUrlString(w,r,"/upload-slides")
    	u := csn2
	switch TARGET {
		case "TDSSLIDE":
			//csn2 := fmt.Sprintf("%v/upload-slides", csn)
			csn2 := getUpUrlString(w,r,"/upload-slides")
			u = csn2
		case "TDSARTL":
			//csn2 := fmt.Sprintf("%v/upload-articles", csn)
			csn2 := getUpUrlString(w,r,"/upload-articles")
			u = csn2
		case "TDSMEDIA":
			//csn2 := fmt.Sprintf("%v/upload-media", csn)
			csn2 := getUpUrlString(w,r,"/upload-media")
			u = csn2
	}
    // Now you can prepare a form that you will submit to that URL.
    var m bytes.Buffer
    fw := multipart.NewWriter(&m)
    // Do not change the form field, it must be "file"!
    // You are free to change the filename though, it will be stored in the BlobInfo.
    file, err := fw.CreateFormFile("file", SID)
    if err != nil {
        panic(err)
		//return
    }
	str := base64.StdEncoding.EncodeToString(myEncStr)
	if _, err = file.Write([]byte(str)); err != nil {
		panic(err)
		//return
    }
	_ = fw.WriteField("EDIT_FUNC2", "SAVE_TEXT")
	_ = fw.WriteField("SID", SID)
	_ = fw.WriteField("CATEGORY", "desktop0")
	_ = fw.WriteField("FUNC_CODE", "UPD-FROM-EDITOR")
	_ = fw.WriteField("SPC_OPT", "")
	_ = fw.WriteField("SPC_OPT", "")
	_ = fw.WriteField("TITLE", TITLE)
	_ = fw.WriteField("UID", uid)
    // Don't forget to close the multipart writer.
    // If you don't close it, your request will be missing the terminating boundary.
    fw.Close()
    // Now that you have a form, you can submit it to your handler.
    req, err := http.NewRequest("POST", u, &m)
    if err != nil {
        //log.Printf("ERROR: %v", err)
        return
    }
    // Don't forget to set the content type, this will contain the boundary.
    req.Header.Set("Content-Type", fw.FormDataContentType())
    // Now submit the request.
    //client := urlfetch.Client(c)
    client := &http.Client{}
    res, err := client.Do(req)
    //log.Printf("res: %v", res)
    if err != nil {
        //log.Printf("ERROR: %v", err)
        return
    }
    // Check the response status, it should be whatever you return in the `/upload` handler.
    if res.StatusCode != http.StatusCreated {
        return
    }
	//delete search index
	deleteSearchIndex(w,r,idx,SID)
 
	return ciphertext
	
}
 
//decrypter
//decrypts a SID given an encryption key
func decrypter(w http.ResponseWriter, r *http.Request, SID, ENCRYPTION_KEY string) (decStr []byte) {
	//switch
	_, uid := checkSession(w,r)
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    updateUserActiveData(w, r, c, uid, "encryption")
 
	SPL := strings.Split(SID,"-")
	TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
	BLOB_KEY := ""
	TITLE := ""
	DOC_STAT := ""
	FL_SHARED := ""
	AUTHOR := ""
	SHARED_TO := ""
	
	switch TARGET {
		case "TDSSLIDE":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, TITLE, _, SHARED_TO, _, _ = getTDSSLIDEBlobKey(w, r, docID)
		case "TDSARTL":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, TITLE, SHARED_TO, _, _ = getTDSARTLBlobKey(w, r, docID)
		case "TDSMEDIA":
			BLOB_KEY, _, TITLE, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, SHARED_TO = getTDSMEDIABlobKey(w, r, docID)	
	}
 
	FL_PROC_OK := false
	
	switch {
 
		case DOC_STAT == "Premium" && uid != AUTHOR:
			
			sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=%v", SID)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
			
		case uid == AUTHOR:
			FL_PROC_OK = true
	
		case (FL_SHARED == "N" || DOC_STAT == "Personal" || (FL_SHARED == "Y" && DOC_STAT == "Personal")) && SHARED_TO == "":
			isOk := checkPersonalAuthor(w,r,AUTHOR,SID,docID)
			if isOk == true {
				FL_PROC_OK = true
			}
				
		case DOC_STAT == "Personal" && SHARED_TO != "" && uid != AUTHOR:
			isAllowed := checkPersonalAccess(w,r, AUTHOR, SHARED_TO, SID, docID)
			if isAllowed == true {
				//break
				FL_PROC_OK = true
			}
			
		case DOC_STAT == "ULAPPH Only":
			FL_PROC_OK = validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {
				return
			}
 
		case DOC_STAT == "Worldwide" && FL_SHARED == "Y":
			//allow
			FL_PROC_OK = true
		
	}
	
	if FL_PROC_OK == false {
		return
	}
	
	//thisCont := getBlobText(w, r, BLOB_KEY)
	//thisCont := getBlobByte(w, r, BLOB_KEY)
	blobChan := make(chan []byte)
	go getBlobByteChan(w, r,blobChan, BLOB_KEY)
	thisCont := <- blobChan
 
	//decode again
	thisCont, err := base64.StdEncoding.DecodeString(string(thisCont))
	if err != nil {
	panic(err)
	//return
	}
 
	//text := []byte(thisCont)
	text := thisCont
	//decrypt content
	block, err := aes.NewCipher([]byte(ENCRYPTION_KEY))
	if err != nil {
		panic(err)
		//return
	}
 
	iv := text[:aes.BlockSize]
	text = text[aes.BlockSize:]
	cfb := cipher.NewCFBDecrypter(block, iv)
	cfb.XORKeyStream(text, text)
	ciphertext, err := base64.URLEncoding.DecodeString(string(text))
	if err != nil {
		panic(err)
		//return
	}
	myEncStr := ciphertext
	csn2 := getUpUrlString(w,r,"/upload-slides")
	u := csn2
	switch TARGET {
		case "TDSSLIDE":
			//csn2 := fmt.Sprintf("%v/upload-slides", csn)
			csn2 := getUpUrlString(w,r,"/upload-slides")
			u = csn2
		case "TDSARTL":
			//csn2 := fmt.Sprintf("%v/upload-articles", csn)
			csn2 := getUpUrlString(w,r,"/upload-articles")
			u = csn2
		case "TDSMEDIA":
			//csn2 := fmt.Sprintf("%v/upload-media", csn)
			csn2 := getUpUrlString(w,r,"/upload-media")
			u = csn2
	}
 
    // Now you can prepare a form that you will submit to that URL.
    var m bytes.Buffer
    fw := multipart.NewWriter(&m)
    // Do not change the form field, it must be "file"!
    // You are free to change the filename though, it will be stored in the BlobInfo.
    file, err := fw.CreateFormFile("file", SID)
    if err != nil {
        panic(err)
		//return
    }
 
	//if _, err = file.Write([]byte(str)); err != nil {
	if _, err = file.Write([]byte(myEncStr)); err != nil {
        panic(err)
		//return
    }
	
	_ = fw.WriteField("EDIT_FUNC2", "SAVE_TEXT")
	_ = fw.WriteField("SID", SID)
	_ = fw.WriteField("CATEGORY", "desktop0")
	_ = fw.WriteField("FUNC_CODE", "UPD-FROM-EDITOR")
	_ = fw.WriteField("SPC_OPT", "")
	_ = fw.WriteField("TITLE", TITLE)
	_ = fw.WriteField("UID", uid)
	
    // Don't forget to close the multipart writer.
    // If you don't close it, your request will be missing the terminating boundary.
    fw.Close()
 
    // Now that you have a form, you can submit it to your handler.
    req, err := http.NewRequest("POST", u, &m)
    if err != nil {
        return
    }
    // Don't forget to set the content type, this will contain the boundary.
    req.Header.Set("Content-Type", fw.FormDataContentType())
    // Now submit the request.
    //client := urlfetch.Client(c)
    client := &http.Client{}
    res, err := client.Do(req)
    if err != nil {
        return
    }
    // Check the response status, it should be whatever you return in the `/upload` handler.
    if res.StatusCode != http.StatusCreated {
        return
    }
	return ciphertext	
	
}
 
//isEncrypted checks if a media/slide/article is encrypted
func isEncrypted(w http.ResponseWriter, r *http.Request, SID string) (FL_ENC bool) {
	//c := appengine.NewContext(r)
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
		return false
	}
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	FL_ENC = false
 
	SPL := strings.Split(SID,"-")
	TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)	
 
	switch TARGET {
		
	case "TDSSLIDE":
		dsKey := fmt.Sprintf("%d", docID)
		key := datastore.NameKey("TDSSLIDE", dsKey, nil)
		q := datastore.NewQuery("TDSSLIDE").Filter("__key__ =", key)
		//log.Panicf("[S0635]")
		slide := make([]TDSSLIDE, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
			 panic(err)
			 //return
		  }
          //log.Printf("datastoreClient.Get()  [86909]")
		for _, p := range slide{
				
			if p.SYS_VER == 777 {
				FL_ENC = true
			}
			break
		}
		return FL_ENC
		
	case "TDSARTL":
		dsKey := fmt.Sprintf("%d", docID)
		key := datastore.NameKey("TDSARTL", dsKey, nil)
		q := datastore.NewQuery("TDSARTL").Filter("__key__ =", key)
		//log.Panicf("[S0636]")
		article := make([]TDSARTL, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
			 panic(err)
			 //return
		  }
		//log.Printf("datastoreClient.Get()  [86929]")
		for _, p := range article{
				
			if p.SYS_VER == 777 {
				FL_ENC = true
			}
			break
		}
		return FL_ENC
	}
	return FL_ENC
}
//delete search index once encrypted
func deleteSearchIndex(w http.ResponseWriter, r *http.Request, idx, idxKey string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
	index, err := search.Open(idx)
	if err != nil {
			return
	}
 
	err = index.Delete(c, idxKey)
	if err != nil {
			return
	}	
}
//encrypter
//encrypts a given text and an encryption key
func encrypter2(w http.ResponseWriter, r *http.Request, TEXT, thisKey string) (encStr []byte) {
	_, uid := checkSession(w,r)
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    updateUserActiveData(w, r, c, uid, "encryption-custom")
	thisCont := TEXT
	//encrypt content
	block, _ := aes.NewCipher([]byte(thisKey))
	b := base64.URLEncoding.EncodeToString([]byte(thisCont))
	ciphertext := make([]byte, aes.BlockSize+len(b))
	iv := ciphertext[:aes.BlockSize]
	if _, err := io.ReadFull(crand.Reader, iv); err != nil {
		//panic(err)
		return nil
	}
	cfb := cipher.NewCFBEncrypter(block, iv)
	cfb.XORKeyStream(ciphertext[aes.BlockSize:], []byte(b))
	str := base64.StdEncoding.EncodeToString(ciphertext)
	ciphertext = []byte(str)
	return ciphertext
}
//decrypter
//decrypts a given text and an decryption key
func decrypter2(w http.ResponseWriter, r *http.Request, TEXT, thisKey string) (decStr []byte) {
	//switch
	_, uid := checkSession(w,r)
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    updateUserActiveData(w, r, c, uid, "encryption-custom")
	text := []byte(TEXT)
	text, _ = base64.StdEncoding.DecodeString(string(text))
	//decrypt content
	block, _ := aes.NewCipher([]byte(thisKey))
	iv := text[:aes.BlockSize]
	text = text[aes.BlockSize:]
	cfb := cipher.NewCFBDecrypter(block, iv)
	cfb.XORKeyStream(text, text)
	ciphertext, _ := base64.URLEncoding.DecodeString(string(text))
	return ciphertext	
	
}
//gets the upload string
func getUpUrlString(w http.ResponseWriter, r *http.Request, tpath string) (ustr string) {
	if SYS_STATELESS_SERVER == true && SYS_SWFS_ENABLED == true {
		return fmt.Sprintf("%v?UID=%v", tpath, r.FormValue("UID"))
	}
	//csn := fmt.Sprintf("%v//%v.appspot.com", getScheme(w,r), SYS_SERVER_NAME)
	csn := fmt.Sprintf("https://%v/", r.Host)
	csn2 := fmt.Sprintf("%v%v", csn, tpath)
	return csn2	
}
//gets the current scheme if http or https					
func getScheme(w http.ResponseWriter, r *http.Request) (scheme string) {
    scheme = "https:"
	return scheme
}	
//gets the complete scheme url
func getSchemeUrl(w http.ResponseWriter, r *http.Request) (scheme string) {
    return domRefMatchS
}

//gets the new scheme url
func getSchemeNewUrl(w http.ResponseWriter, r *http.Request, turl string) (url string) {
	turl = strings.Replace(turl, "http://", "https://", -1)	
	return turl
}

//checks if the request is https or not
func checkHTTPS(w http.ResponseWriter, r *http.Request) {
	
	if SYS_CHG_HTTPS == false {
		return
	}
	
	s := getScheme(w,r)
	isChecked := r.FormValue("checkHTTPS")
	isMobile := checkMobile(w,r)
	
	if isChecked == "yes" {
		return
	}
	
	switch  {
		case SYS_HTTPS == false && strings.Index(r.URL.String(), "https://") != -1:
 
			k, _ := url.Parse(r.URL.String())
			hs := fmt.Sprintf("https://%v/", k.Host)
 
			url := strings.Replace(r.URL.String(), hs, domRefMatchS, -1)
			if strings.Index(url, "?") != -1 || strings.Index(url, "&#63;") != -1 || strings.Index(url, "&#x3f;") != -1 {
				url = fmt.Sprintf("%v&checkHTTPS=yes&isMobile=%v", url, isMobile)
			} else {
				url = fmt.Sprintf("%v?checkHTTPS=yes&isMobile=%v", url, isMobile)
			}
 
 
			http.Redirect(w, r, url, http.StatusFound)
			return	
 
		case SYS_HTTPS == false && strings.Index(r.URL.String(), "https://") == -1:
 
			k, _ := url.Parse(r.URL.String())
			hs := fmt.Sprintf("https://%v/", k.Host)
			url := strings.Replace(r.URL.String(), "http://", "https://", -1)
 
			url = strings.Replace(url, hs, domRefMatchS, -1)
			if strings.Index(url, "?") != -1 || strings.Index(url, "&#63;") != -1 || strings.Index(url, "&#x3f;") != -1 {
				url = fmt.Sprintf("%v&checkHTTPS=yes&isMobile=%v", url, isMobile)
			} else {
				url = fmt.Sprintf("%v?checkHTTPS=yes&isMobile=%v", url, isMobile)
			}
 
 
			http.Redirect(w, r, url, http.StatusFound)
			return				
			
		case SYS_HTTPS == false && (s != "https:" || strings.Index(r.URL.String(), "http://") != -1):
 
			k, _ := url.Parse(r.URL.String())
			hs := fmt.Sprintf("https://%v/", k.Host)
			url := strings.Replace(r.URL.String(), "http://", "https://", -1)
 
			url = strings.Replace(url, hs, domRefMatchS, -1)
			if strings.Index(url, "?") != -1 || strings.Index(url, "&#63;") != -1 || strings.Index(url, "&#x3f;") != -1 {
				url = fmt.Sprintf("%v&checkHTTPS=yes&isMobile=%v", url, isMobile)
			} else {
				url = fmt.Sprintf("%v?checkHTTPS=yes&isMobile=%v", url, isMobile)
			}
 
 
			http.Redirect(w, r, url, http.StatusFound)
			return	
			
		case SYS_HTTPS == true && strings.Index(r.URL.String(), "http://") != -1:
 
			url := strings.Replace(r.URL.String(), "http://", "https://", -1)
			if strings.Index(url, "?") != -1 || strings.Index(url, "&#63;") != -1 || strings.Index(url, "&#x3f;") != -1 {
				url = fmt.Sprintf("%v&checkHTTPS=yes&isMobile=%v", url, isMobile)
			} else {
				url = fmt.Sprintf("%v?checkHTTPS=yes&isMobile=%v", url, isMobile)
			}
 
			http.Redirect(w, r, url, http.StatusFound)
			return			
			
	}
 
}

//checks the request if https or not
func checkHTTPS2(w http.ResponseWriter, r *http.Request) {
	if SYS_CHG_HTTPS == false {
		return
	}
	s := getScheme(w,r)
	
	isChecked := r.FormValue("checkHTTPS")
	
	if isChecked == "yes" {
		return
	}
	if s != "https:" {
		switch {
			case SYS_HTTPS == false && s != "https:":
				k, _ := url.Parse(r.URL.String())
				hs := fmt.Sprintf("https://%v/", k.Host)
				url := strings.Replace(r.URL.String(), "http://", "https://", -1)
				url = strings.Replace(url, hs, domRefMatchS, -1)
				url = fmt.Sprintf("%v?checkHTTPS=yes", url)
				http.Redirect(w, r, url, http.StatusFound)
				return				
				
			case SYS_HTTPS == true && s != "https:":
				k, _ := url.Parse(r.URL.String())
				hs := fmt.Sprintf("https://%v/", k.Host)
				url := strings.Replace(r.URL.String(), "http://", "https://", -1)
				url = strings.Replace(url, hs, domRefMatchS, -1)
				url = fmt.Sprintf("%v?checkHTTPS=yes", url)
				http.Redirect(w, r, url, http.StatusFound)
				return	
		}
	}
}
 
//display list of files tagged as decrypted
func warnSecurityIssue(w http.ResponseWriter, r *http.Request, uid string) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	secList := ""
	FL_SEC_FND := false
	q := datastore.NewQuery("TDSSLIDE").Filter("SYS_VER =", 666)
	//log.Panicf("[S0637]")
	recCount := 0
	slide := make([]TDSSLIDE, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &slide); err != nil {
		 panic(err)
		//return
	}
	//log.Printf("datastoreClient.Get()  [87161]")
	for _, p := range slide{
		if p.SYS_VER == 666 && p.AUTHOR == uid {
			recCount++
			if recCount > 0 && FL_SEC_FND == false {
                fmt.Fprintf(w, "<div class=\"validation2\"><h1>Please secure & backup your data while you are away.</h1><div id=\"enc_all\">" +
                "<a href=\"#\" onclick=\"encryptDataAll();return false;\" class=\"button button-glow button-rounded button-highlight\">Encrypt All</a></div></div>")
				FL_SEC_FND = true
			}
            fmt.Fprintf(w, "<div class=\"info2\"><img id=\"TDSSLIDE-%v\" src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img>" +
                    " <a href=\"#\" onclick=\"encryptData('/admin-slides?FUNC_CODE=ENC_SLIDE&P=777&DOC_ID=%v','TDSSLIDE-%v');return false;\" " +
                    "class=\"button button-glow button-border button-rounded button-primary\">Encrypt</a> <a download=\"TDSSLIDE-%v-%v.txt\" " +
                    "href=\"/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSLIDE-%v\" class=\"button button-glow button-rounded button-raised button-primary\">" +
                    "Backup Encrypted File</a> TDSSLIDE-%v-%v </div>", p.DOC_ID, p.DOC_ID, p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID, p.DOC_ID, p.TITLE)	
			secList = fmt.Sprintf("%v,/admin-slides?FUNC_CODE=ENC_SLIDE&P=777&DOC_ID=%v", secList, p.DOC_ID)
		}
	}
	//articles
	q = datastore.NewQuery("TDSARTL").Filter("SYS_VER =", 666)
	//log.Panicf("[S0638]")
	article := make([]TDSARTL, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &article); err != nil {
		 panic(err)
		//return
	}
	//log.Printf("datastoreClient.Get()  [87186]")
	for _, p := range article{
		if p.SYS_VER == 666 && p.AUTHOR == uid {
			recCount++
			if recCount > 0 && FL_SEC_FND == false {
                fmt.Fprintf(w, "<div class=\"validation2\"><h1>Please secure & backup your data while you are away.</h1>"+
                "<div id=\"enc_all\"><a href=\"#\" onclick=\"encryptDataAll();return false;\" class=\"button button-glow button-rounded button-highlight\">"+
                "Encrypt All</a></div></div>")
				FL_SEC_FND = true
			}
            fmt.Fprintf(w, "<div class=\"info2\"><img id=\"TDSARTL-%v\" src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img> "+
            "<a href=\"#\" onclick=\"encryptData('/admin-articles?FUNC_CODE=ENC_ARTICLE&P=777&DOC_ID=%v','TDSARTL-%v');return false;\" "+
            "class=\"button button-glow button-border button-rounded button-primary\">Encrypt</a> <a download=\"TDSARTL-%v-%v.txt\" "+
            "href=\"/editor?EDIT_FUNC=GET_TEXT&KEY_TEXT=TDSSARTL-%v\" class=\"button button-glow button-rounded button-raised button-primary\">"+
            "Backup Encrypted File</a> TDSARTL-%v-%v</div>", p.DOC_ID, p.DOC_ID, p.DOC_ID, p.DOC_ID, p.TITLE, p.DOC_ID, p.DOC_ID, p.TITLE)
			secList = fmt.Sprintf("%v,/admin-articles?FUNC_CODE=ENC_ARTICLE&P=777&DOC_ID=%v", secList, p.DOC_ID)
		}		
	}
	//media
	q = datastore.NewQuery("TDSMEDIA").Filter("SYS_VER =", 666)
	//log.Panicf("[S0639]")
	media := make([]TDSMEDIA, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &media); err != nil {
		 panic(err)
		//return
	}
	//log.Printf("datastoreClient.Get()  [87212]")
	for _, p := range media{
		if p.SYS_VER == 666 && p.AUTHOR == uid {
			recCount++
			if recCount > 0 && FL_SEC_FND == false {
                fmt.Fprintf(w, "<div class=\"validation2\"><h1>Please secure & backup your data while you are away.</h1><div id=\"enc_all\">"+
                                "<a href=\"#\" onclick=\"encryptDataAll();return false;\" class=\"button button-glow button-rounded button-highlight\">"+
                                "Encrypt All</a></div></div>")
				FL_SEC_FND = true
			}
            fmt.Fprintf(w, "<div class=\"info2\"><img id=\"TDSMEDIA-%v\" src=\"/static/img/decrypted.png\" width=\"40\" height=\"40\"></img> "+
                            "<a href=\"#\" onclick=\"encryptData('/media?FUNC_CODE=ENC_MEDIA&P=777&MEDIA_ID=%v','TDSMEDIA-%v');return false;\" "+
                            "class=\"button button-glow button-border button-rounded button-primary\">Encrypt</a> "+
                            "<a download=\"TDSMEDIA-%v-%v.txt\" href=\"/media?FUNC_CODE=PLAY&MEDIA_ID=%v&SID=TDSMEDIA-%v\" "+
                            "class=\"button button-glow button-rounded button-raised button-primary\">Backup Encrypted File</a> TDSMEDIA-%v-%v</div>", p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.TITLE, p.MEDIA_ID, p.MEDIA_ID, p.MEDIA_ID, p.TITLE)
			secList = fmt.Sprintf("%v,/media?FUNC_CODE=ENC_MEDIA&P=777&MEDIA_ID=%v", secList, p.MEDIA_ID)
		}
	}
	
	if FL_SEC_FND != false {
		fmt.Fprintf(w, "<div class=\"validation2\">There are %v files to be encrypted. Please click \"Encrypt All\" above to encrypt all of them.</div>", recCount)
		fmt.Fprintf(w, "<input type=\"hidden\" id=\"SEC_LIST\" name=\"SEC_LIST\" value=\"%v\"/>", secList)
		fmt.Fprintf(w, "<input type=\"hidden\" id=\"SEC_FND\" name=\"SEC_FND\" value=\"Y\"/>")
	} else {
		fmt.Fprintf(w, "<input type=\"hidden\" id=\"SEC_FND\" name=\"SEC_FND\" value=\"N\"/>")
	}
	fmt.Fprintf(w, "<script src=\"/static/js/encrypt.js\"></script>")
	fmt.Fprintf(w, "<div class=\"success2\"><b>TIP:</a> After logout, please <b>clear your browser's cache</b> to prevent others from accessing your local data.</div>")
}
 
//checks if string is base64 encoded
func IsBase64(s string) bool {
	_, err := base64.StdEncoding.DecodeString(s)
	return err == nil
}
//checks content of SID and perform security validations before a blobkey is returned
func contentCheckSid(w http.ResponseWriter, r *http.Request, sid string) (blobKey string) {
	//c := appengine.NewContext(r)
	if sid == "" {
		return ""
	}
	SPL := strings.Split(sid,"-")
	TARGET := SPL[0]
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
	BLOB_KEY := ""
	DOC_STAT := ""
	FL_SHARED := ""
	AUTHOR := ""
    SHARED_TO := ""
	switch TARGET {
		case "TDSSLIDE":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, _, SHARED_TO, _, _ = getTDSSLIDEBlobKey(w, r, docID)
		case "TDSARTL":
			BLOB_KEY, DOC_STAT, FL_SHARED, AUTHOR, _, _, SHARED_TO, _, _ = getTDSARTLBlobKey(w, r, docID)
		case "TDSMEDIA":
			BLOB_KEY, _, _, AUTHOR, DOC_STAT, FL_SHARED, _, _, _, _, SHARED_TO = getTDSMEDIABlobKey(w, r, docID)	
	}
    _, uid := checkSession(w,r)
	switch {
		case DOC_STAT == "Premium" && uid != AUTHOR:
			auth := r.FormValue("auth")
			passcode := r.FormValue("passcode")
			sysReq := fmt.Sprintf("/store?STO_FUNC=Premium&SID=%v&auth=%v&passcode=%v", sid, auth, passcode)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return
		case DOC_STAT == "Personal" && uid == AUTHOR:
			//allow
		case (FL_SHARED == "N" || DOC_STAT == "Personal") && SHARED_TO == "" :
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
			if uid != AUTHOR && isValidApiCall(w,r) == false {
				//updateUserActiveData(w, r, c, uid, "Error: access of personal content (checkSID)")
				msgDtl := fmt.Sprintf("[U00167] ERROR: This document ID (%s) is accessible only by the author (%v) or by admin.", sid, AUTHOR)
				//sendEvent(w,r, FDBKMAIL, msgDtl)
				msgTyp := "error"
				msgURL := fmt.Sprintf("https://www.ulapph.com/infodb?DB_FUNC=MEDIA&CATEGORY=")
				action := fmt.Sprintf("Apologies for this issue! <a href=\"%v\">Click here</a> to proceed to view other media.", msgURL)
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, msgURL, action)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return
			}
		case DOC_STAT == "Personal" && SHARED_TO != "":
			isAllowed :=  checkPersonalAccess(w,r, AUTHOR, SHARED_TO, sid, docID)
			if isAllowed == true {
				break
			}
		case DOC_STAT == "ULAPPH Only":
			FL_PROC_OK := validateAccess(w, r, "IS_VALID_USER",r.URL.String())
			if FL_PROC_OK == false {return}
		case DOC_STAT == "Worldwide" && FL_SHARED == "Y":
			//allow
    }
    //log.Printf("BLOB_KEY: %v", BLOB_KEY)
	return BLOB_KEY
}

//downloads an article
//used for local storage where it saves local contents in browser
func downloadArticle(w http.ResponseWriter, r *http.Request, sid string) string {
	//c := appengine.NewContext(r)
	
	SPL := strings.Split(sid,"-")
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
	
	blobkey, PUB_STAT, FL_SHARED, AUTHOR, _, TITLE, _, _, _ := getTDSARTLBlobKey(w, r, docID)
	_, doc, err := Parse3(w, r, blobkey, TITLE, 0, "desktop0", sid, "OFFLINE", AUTHOR, PUB_STAT, FL_SHARED)
	if err != nil {
		i := strings.Index(blobkey, "GET_WALL:")
		if i != -1 {
			SPL := strings.Split(blobkey,"GET_WALL:")
			if len(SPL) > 1 {
				msgDtl := fmt.Sprintf("[U00184] Linked document cannot be copied. Go to the source site instead.")
				msgTyp := "error"
				action := "U00184"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
				////log.Panicf("error: %v", err)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return ""
			}
			
		} else {
			msgDtl := fmt.Sprintf("[U00184] Critical error. Parse3 error: %v", err)
			msgTyp := "error"
			action := "U00184"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			////log.Panicf("error: %v", err)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return ""
		}
	}
	var buf bytes.Buffer
	title2 := fmt.Sprintf("%v.article-offline", TITLE)
	SL_TMP := ""
	if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
		panic(err)
	}
	var bufc bytes.Buffer
	s := bufio.NewScanner(&buf)
	s.Scan()
	for s.Scan() {
 
		i := strings.Index(s.Text(), "<img src=")
		if i != -1 {
			SPL := strings.Split(s.Text(),"<img src=\"")
			SPL = strings.Split(SPL[1],"\"")
			if len(SPL) > 1 {
				//client := urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
				
				thisImgUrl := ""
				SPLU := strings.Split(SPL[0],"http:")
				SPLX := strings.Split(SPL[0],"https:")
				if len(SPLU) > 1 || len(SPLX) > 1 {
					thisImgUrl = SPL[0]
				} else {
					thisImgUrl = fmt.Sprintf("%v%v", getSchemeUrl(w,r), SPL[0])
				}
				
				resp, err := http.Get(thisImgUrl)
				if err != nil {
					//panic(err)
				}
				bodyBytes, _ := ioutil.ReadAll(resp.Body)
				ct := resp.Header.Get("Content-Type")
				
				enc := encode(bodyBytes)
				img64 := format(enc, ct)
				repImg := strings.Replace(s.Text(), SPL[0], img64, -1)
				bufc.WriteString(fmt.Sprintf("%v\n", repImg))
 
			}
		} else {
			bufc.WriteString(fmt.Sprintf("%v\n", s.Text()))
		}
	}
	return bufc.String()	
}

//downloads a slide
//used for local storage where it saves local contents in browser
func downloadSlide(w http.ResponseWriter, r *http.Request, sid string) string {
	//c := appengine.NewContext(r)
	SPL := strings.Split(sid,"-")
	DOC_ID := "0"
	if len(SPL) > 1 {
		DOC_ID = SPL[1]
	}
	docID := str2int(DOC_ID)
	
	blobkey, PUB_STAT, FL_SHARED, AUTHOR, _, TITLE, _, _, _, _  := getTDSSLIDEBlobKey(w, r, docID)
	_, doc, err := Parse3(w, r, blobkey, TITLE, 0, "desktop0", sid, "OFFLINE", AUTHOR, PUB_STAT, FL_SHARED)
	if err != nil {
		i := strings.Index(blobkey, "GET_WALL:")
		if i != -1 {
			SPL := strings.Split(blobkey,"GET_WALL:")
			if len(SPL) > 1 {
				msgDtl := fmt.Sprintf("[U00148] Linked document cannot be copied. Go to the source site instead.")
				msgTyp := "error"
				action := "U00148"
				sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
				////log.Panicf("error: %v", err)
				http.Redirect(w, r, sysReq, http.StatusFound)
				return ""
			}
 
		} else {
			msgDtl := fmt.Sprintf("[U00180] Critical error. Parse3 error. %v", err)
			msgTyp := "error"
			action := "U00180"
			sysReq := fmt.Sprintf("/sysmsg?msgTyp=%v&message=%v&msgURL=%v&action=%v", msgTyp, msgDtl, "", action)
			////log.Panicf("error: %v", err)
			http.Redirect(w, r, sysReq, http.StatusFound)
			return ""
		}
	}
	var buf bytes.Buffer
	
	FL_DESKTOP := checkDesktop(w,r)
	title2 := ""
	if FL_DESKTOP == true {
		title2 = fmt.Sprintf("%v.slide-offline", TITLE)
	} else {
		title2 = fmt.Sprintf("%v.article-offline", TITLE)
	}
	SL_TMP := ""
	if err := renderPresentation(w,r,&buf, title2, doc, SL_TMP); err != nil {
		panic(err)
	}
	var bufc bytes.Buffer
	s := bufio.NewScanner(&buf)
	s.Scan()
	for s.Scan() {
 
		i := strings.Index(s.Text(), "<img src=")
		if i != -1 {
			SPL := strings.Split(s.Text(),"<img src=\"")
			SPL = strings.Split(SPL[1],"\"")
			if len(SPL) > 1 {
				//client := urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
				
				thisImgUrl := ""
				SPLU := strings.Split(SPL[0],"http:")
				SPLX := strings.Split(SPL[0],"https:")
				if len(SPLU) > 1 || len(SPLX) > 1 {
					thisImgUrl = SPL[0]
				} else {
					thisImgUrl = fmt.Sprintf("%v%v", getSchemeUrl(w,r), SPL[0])
				}
				
				resp, err := http.Get(thisImgUrl)
				if err != nil {
					//panic(err)
				}
				bodyBytes, _ := ioutil.ReadAll(resp.Body)
				ct := resp.Header.Get("Content-Type")
				
				enc := encode(bodyBytes)
 
				img64 := format(enc, ct)
				
 
				repImg := strings.Replace(s.Text(), SPL[0], img64, -1)
				bufc.WriteString(fmt.Sprintf("%v\n", repImg))
 
			}
		} else {
			bufc.WriteString(fmt.Sprintf("%v\n", s.Text()))
		}
	}
	return bufc.String()
}

//creates a http client with timeouts
func createClient(ctx context.Context, t time.Duration) *http.Client {
    ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(60 * time.Second))
    defer cancel()
    //return &http.Client{Transport: &http.Transport{Context:  ctx}}
    client := &http.Client{
            Timeout: 60 * time.Second,
    }
    return client
}

//D0029
//Todos manager handler for /todos
//user can create and manage TODOs using the AngularJS interface
func ulapphTodos(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	c, cancel := context.WithCancel(context.Background())
    defer cancel()
	_, uid := checkSession(w,r)
	if uid == "" {
		return
	}
	
	if r.FormValue("t") == "delete-all" {
		//xpims cleanup
		deleteTodos(w,r,uid)
		redURL := fmt.Sprintf("/tools?FUNC=WIDGET&t=TODO&uid=%v&UID=%v", uid, uid)
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	if r.FormValue("t") == "archive-done" {
		//xpims cleanup
		archiveDoneTodos(w,r,uid)
		redURL := fmt.Sprintf("/tools?FUNC=WIDGET&t=TODO&uid=%v&UID=%v", uid, uid)
		http.Redirect(w, r, redURL, http.StatusFound)
		return
	}
	
	val, err := handleTodos(w, r, c, uid)
	if err == nil {
		err = json.NewEncoder(w).Encode(val)
	}
	if err != nil {
		////log.Panicf("todo error: %#v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
} 
//handles TODOs processing
func handleTodos(w http.ResponseWriter, r *http.Request, c context.Context, uid string) (interface{}, error) {
	switch r.Method {
	case "POST":
		todo, err := decodeTodo(r.Body)
		if err != nil {
			return nil, err
		}
		if todo.Done == true {
			todo.delete(w,r,c,uid)
			//redURL := fmt.Sprintf("/tools?FUNC=WIDGET&t=TODO&uid=%v&UID=%v", uid, uid)
			//http.Redirect(w, r, redURL, http.StatusFound)
			//return
			//return todo.delete(w,r,c,uid)
		}
		return todo.save(w,r,c,uid)
    case "GET":
		return getAllTodos(w,r,uid)
	case "DELETE":
		return nil, deleteDoneTodos(w,r,uid)
	}
	return nil, fmt.Errorf("method not implemented")
}
 
//retrieves default todo list
func defaultTodoList(c context.Context, uid string) *datastore.Key {
	//return datastore.NameKey("TodoList", "default", nil)
	return datastore.NameKey("TodoList", uid, nil)
}
//gets the key for a todo item
func (t *Todo) key(c context.Context, uid string) *datastore.Key {
	if t.Id == 0 {
        t.Created = time.Now()
		return datastore.IncompleteKey("Todo", defaultTodoList(c,uid))
	}
    //return datastore.NameKey("Todo", "", t.Id, defaultTodoList(c,uid))
	//return datastore.NameKey("Todo", defaultTodoList(c,uid), nil)
    //return datastore.NameKey("Todo", "", nil)
	//return datastore.NameKey("Todo", fmt.Sprintf("%v", t.Id), defaultTodoList(c,uid))
	return datastore.NameKey("Todo", "", defaultTodoList(c,uid))
}
 
//saves the details of a todo item
func (t *Todo) save(w http.ResponseWriter, r *http.Request, c context.Context,uid string) (*Todo, error) {
    //D0086
    datastoreClient := createClientDS()
    k, err := datastoreClient.Put(c, t.key(c,uid), t)
    //log.Printf("datastoreClient.Put()  [87576]")
	//log.Panicf("[S0640]")
	if err != nil {
		return nil, err
	}
	t.Id = k.ID
	return t, nil
}
//deletes the details of a todo item
func (t *Todo) delete(w http.ResponseWriter, r *http.Request, c context.Context,uid string) (*Todo, error) {
    //D0086
    datastoreClient := createClientDS()
	key := datastore.IDKey("Todo", int64(t.Id), defaultTodoList(c,uid))
    //k, err := datastoreClient.Put(c, key, t)
    //log.Printf("datastoreClient.Put()  [87576]")
	//log.Panicf("[S0640]")
	datastoreClient.Delete(c, key)
	return t, nil
}
 
//decode a todo data
func decodeTodo(r io.ReadCloser) (*Todo, error) {
	defer r.Close()
	var todo Todo
	err := json.NewDecoder(r).Decode(&todo)
	return &todo, err
}
//gets all todos
func getAllTodos(w http.ResponseWriter, r *http.Request, uid string) ([]Todo, error) {
    //D0086
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    datastoreClient := createClientDS()
    //todos := []Todo{}
    //q := datastore.NewQuery("Todo").Ancestor(defaultTodoList(c, uid)).Order("Created")
	q := datastore.NewQuery("Todo").Order("Created")
	recCount,_ := datastoreClient.Count(c,q)
	//log.Printf("recCount: %v", recCount)
    todos := make([]Todo, 0, recCount)
    ks, err := datastoreClient.GetAll(c,q, &todos)
	if err != nil {
		 panic(err)
	}
	for i := 0; i < len(todos); i++ {
		todos[i].Id = ks[i].ID
	}
	return todos, nil
}
 
//deletes done todos
func deleteDoneTodos(w http.ResponseWriter, r *http.Request, uid string) error {
    //D0086
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    datastoreClient := createClientDS()
	_, err := datastoreClient.RunInTransaction(c, func(tx *datastore.Transaction) error {
        q := datastore.NewQuery("Todo").KeysOnly().Ancestor(defaultTodoList(c,uid)).Filter("Done=", true).KeysOnly()
        //recCount,_ := datastoreClient.Count(c,q)
        //todos := make([]Todo, 0, recCount)
        ks, err := datastoreClient.GetAll(c,q, nil)
        if err != nil {
            panic(err)
        }
        //log.Printf("datastoreClient.Get()  [87635]")
		//ks, err := datastoreClient.NewQuery("Todo").KeysOnly().Ancestor(defaultTodoList(c,uid)).Filter("Done=", true).GetAll(c, nil)
		//log.Panicf("[S0642]")
		//if err != nil {
		//	return err
		//}
        //return datastoreClient.DeleteMulti(c, ks)
        if err := datastoreClient.DeleteMulti(c, ks); err != nil {
            panic(err)
        }
        return err
    })
    return err
}
var todosHTML = template.Must(template.New("todosHTMLA").Parse(`
	<!doctype html>
	<html ng-app="todo">
	  <head>
		<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js"></script>
		<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular-resource.min.js"></script>
		<script src="/static/js/todo.js"></script>
		<link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.no-icons.min.css" rel="stylesheet">
		<link href="/static/css/todo.css" rel="stylesheet">
		<style>
		body {
		  background-color: {{.STR_FILLER1}};
		}
		div {
		  background-color: {{.STR_FILLER1}};
		}
		.btn-primary2 {
			background-color: {{.STR_FILLER2}};
		}		
		</style>
	  </head>
	  <body>
		<div>
		  <h2><a href="/tools?FUNC=WIDGET&t=TODO&desktop={{"{{"}}desktop{{"}}"}}">TODOs</a></h2>
		  <div ng-controller="TodoCtrl">
			<p><span>{{"{{"}}remaining(){{"}}"}} of {{"{{"}}todos.length{{"}}"}} remaining</span>
			[ <a href="/todos?t=archive-done">ArchiveDone</a> ] [ <a href="/todos?t=delete-all">DeleteAll</a> ]</p>
			<form ng-submit="addTodo()">
			  <input type="text" ng-model="todoText"  size="30"
					 placeholder="add new todo here">
			  <input class="btn-primary2" type="submit" value="add">
			</form>
			<ul class="unstyled">
			  <li class="{{"{{"}}todo.state{{"}}"}}" ng-repeat="todo in todos | filter:todoText">
				<input id="todo-{{"{{"}}todo.id{{"}}"}}" type="checkbox" ng-model="todo.done" ng-change="change(todo)" ng-disabled="disabled(todo)">
				<label for="todo-{{"{{"}}todo.id{{"}}"}}" class="done-{{"{{"}}todo.done{{"}}"}}">{{"{{"}}todo.text{{"}}"}}</label>
			  </li>
			</ul>
			<form ng-submit="addTodo()">
			  <input type="text" ng-model="todoText"  size="30"
					 placeholder="add new todo here">
			  <input class="btn-primary2" type="submit" value="add">
			</form>
		  </div>
		</div>
	  </body>
	</html>
`))
 
var eChartsPopular = template.Must(template.New("htmlHeaderModal").Parse(`
    <script type="text/javascript">
        var myChart = echarts.init(document.getElementById('{{.Element}}'));
		
		myChart.setOption({
			title: {
				text: '{{.Name}}'
			},
			//roseType: 'angle',
			itemStyle: {
				normal: {
					// shadow size
					shadowBlur: 200,
					// horizontal offset of shadow
					shadowOffsetX: 0,
					// vertical offset of shadow
					shadowOffsetY: 0,
					// shadow color
					shadowColor: 'rgba(0, 0, 0, 0.5)'
				}
			},
			tooltip: {},
			series : [
				{
					name: '{{.Name}}',
					type: 'pie',
					radius: '60%',
					data:{{.Items}}
				}
			]
		})
 
    </script>
`))
 
var eChartsHits = template.Must(template.New("htmlHeaderModal").Parse(`
    <script type="text/javascript">
        var myChart = echarts.init(document.getElementById('{{.STR_FILLER3}}'));
		
		myChart.setOption({
			title : {
				text: '{{.STR_FILLER1}}',
				subtext: 'Access Hits'
			},
			tooltip : {
				trigger: 'axis'
			},
			toolbox: {
				show : true,
				feature : {
					mark : {show: true},
					dataView : {show: true, readOnly: false},
					magicType : {show: true, type: ['line', 'bar']},
					restore : {show: true},
					saveAsImage : {show: true}
				}
			},
			calculable : true,
			xAxis : [
				{
					type : 'category',
					data : ['0:00','1:00','2:00','3:00','4:00','5:00','6:00','7:00','8:00','9:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00','21:00','22:00','23:00']
				}
			],
			yAxis : [
				{
					type : 'value'
				}
			],
			series : [
				{
					name:'Hits',
					type:'bar',
					data:{{.STR_FILLER2}},
					markPoint : {
						data : [
							{type : 'max', name: 'Max'},
							{type : 'min', name: 'Min'}
						]
					},
					markLine : {
						data : [
							{type : 'average', name: 'Ave'}
						]
					}
				}
			]
		})
 
    </script>
`))

//D0042
//remove duplicates from an array of string
func removeDuplicates(elements []string) []string {
    // Use map to record duplicates as we find them.
    encountered := map[string]bool{}
    result := []string{}

    for v := range elements {
        if encountered[elements[v]] == true {
            // Do not add duplicate.
        } else {
            // Record this element as an encountered element.
            encountered[elements[v]] = true
            // Append to result slice.
            result = append(result, elements[v])
        }
    }
    // Return the new slice.
    return result
}
 
//sort array map
func get_words_from(text string) []string{
    words:= regexp.MustCompile("\\w+")
    return words.FindAllString(text, -1)
}

//sort and count words in a given array of strings
func count_words (words []string) map[string]int{
    word_counts := make(map[string]int)
    for _, word :=range words{
        word_counts[word]++
    }
    return word_counts;
}

//sort and display music tages given a list of keywords
func display_music_tags (w http.ResponseWriter, r *http.Request, uid string, word_counts map[string]int){
	var buf bytes.Buffer
	cKey := fmt.Sprintf("UMP_CACHE_MUSIC_%s", uid)
	buf.WriteString(fmt.Sprintf("<h3>---------------</h3>"))
	buf.WriteString(fmt.Sprintf("<div id=\"music_tags\"><b>Music Tags</b></div>"))
	n := map[int][]string{}
	var a []int
	for k, v := range word_counts {
		n[v] = append(n[v], k)
	}
	for k := range n {
		a = append(a, k)
	}
	sort.Sort(sort.Reverse(sort.IntSlice(a)))
	for _, k := range a {
		for _, s := range n[k] {
			buf.WriteString(fmt.Sprintf("<b><a href=\"/media?FUNC_CODE=UMP&FILTER=%v\" title=\"Click to filter\">%s</a></b> (%d counts)<br>", s, s, k))
		}
	}
	buf.WriteString(fmt.Sprintf("<h3>---------------</h3>"))
	fmt.Fprintf(w, "%v", buf.String())
	putStrToMemcacheWithExp(w,r,cKey,buf.String(), GEN_CONTENT_EXPIRES4)
}
 
//D0033
//sync with Google drive contents
func syncGoogleDrive(w http.ResponseWriter, r *http.Request, uid string) {
	//c := appengine.NewContext(r)
	//get access token
	cKey := fmt.Sprintf("GDRIVE_TOKEN_CACHE_%v", uid)
	TOKENCACHE := getBytMemcacheValueByKey(w,r,cKey)
	if TOKENCACHE == nil {
		//authorize needed
		fmt.Fprintf(w, "[Authorization Required] <a href=\"/tools?FUNC=DRIVES&t=MYDRIVE_GOOGLE&ACT=A\" target=\"google-drive\">Click here</a> to authorize. You may close this window.<br>")
		return
	}
	gr := new(GoogleToken)
	err := json.Unmarshal(TOKENCACHE, gr)
	if err != nil {
		//log.Panicf("[json.Unmarshal] error: %v", err)
	} else {
		turl := fmt.Sprintf("https://www.googleapis.com/drive/v3/files?orderBy=%v&pageSize=%v&fields=%v", url.QueryEscape("recency desc"), 1000, url.QueryEscape("files(iconLink,name,webViewLink)")) //note 1000 is max!
		req, _ := http.NewRequest("GET", turl, nil)
		req.Header.Set("Authorization", "Bearer "+gr.AccessToken)
		//client := urlfetch.Client(c)
        client := &http.Client{}
		res, err := client.Do(req)
		if err != nil {
 
			return
		}
 
		bodyBytes, _ := ioutil.ReadAll(res.Body)
		
		if res.StatusCode == 200 {
			//fmt.Fprintf(w, "[S0643] You may close this window. <hr>%v<br>", string(bodyBytes))
			//save to cache
			cKey := fmt.Sprintf("GDRIVE_FILES_CACHE_%v", uid)
			putBytesToMemcacheWithExp(w,r,cKey,bodyBytes,GEN_CONTENT_EXPIRES4) //4hours
			
			df := new(DriveFiles)
			err = json.Unmarshal(bodyBytes, df)
			if err != nil {
				//log.Panicf("[json.Unmarshal] error: %v", err)
			} else {
				if err := htmlDriveJSONtoTable.Execute(w, df.Files); err != nil {
				  panic(err)
				}
				if err := outputFooterTemplate.Execute(w, ""); err != nil {
					 panic(err)
				}
			}
	
		} else {
			fmt.Fprintf(w, "[Response Code] %v<br>", res.StatusCode)	
			fmt.Fprintf(w, "[Response Body] %v<br>", string(bodyBytes))
		}
	}
 
}
 
//D0033
//updates a github content or repo
func updateGithubContent(w http.ResponseWriter, r *http.Request, guid,gbra,grepo,gpath,gsha,gsha2,blobKey,msg string) (err error) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
	//get github user
	GITHUB_USER_NAME, err := getGithubUser(w,r)
	if err != nil {
		fmt.Fprintf(w, "[Authorization Error] No github user set")
		return		
	}
	
	//get access token
	cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", GITHUB_USER_NAME)
	TOKENCACHE := getBytMemcacheValueByKey(w,r,cKey)
	
	if TOKENCACHE == nil {
		//authorize needed
		fmt.Fprintf(w, "[Authorization Required] <a href=\"/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=A\" target=\"github-drive\">Click here</a> to authorize. You may close this window.<br>")
		return fmt.Errorf("Authorization Required")
	}
	
	gr := new(GithubToken)
	err = json.Unmarshal(TOKENCACHE, gr)
	if err != nil {
		//log.Panicf("[json.Unmarshal] error: %v", err)
		return err
	} else {
		
		//ctx := newappengine.NewContext(r)
		ts := oauth2.StaticTokenSource(
			&oauth2.Token{AccessToken: gr.AccessToken},
		)
		//tc := oauth2.NewClient(ctx, ts)
        tc := oauth2.NewClient(c, ts)
		client := github.NewClient(tc)
		
		blobChan := make(chan []byte)
		go getBlobByteChan(w, r,blobChan, blobKey)
		thisCont := <- blobChan
	
		opt := &github.RepositoryContentFileOptions{
			Message: &msg,
			//Content: getBlobByte(w, r, blobKey),
			Content: thisCont,
			SHA: &gsha2,
			Branch: &gbra,
		}
 
		_, resp, err := client.Repositories.UpdateFile(c, GITHUB_USER_NAME, grepo, gpath, opt)
		if err != nil {
			//return err
			return err
		}
		if _, ok := err.(*github.RateLimitError); ok {
 
			return err
		}
 
		if resp.StatusCode == 200 {
 
 
 
			return nil
		}		
		
	}
	return err
			
}
 
//D0033
//gets a github repo content
func getGithubContent(w http.ResponseWriter, r *http.Request, bra,repo,opath,sha,sha2 string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //get github user
	GITHUB_USER_NAME, err := getGithubUser(w,r)
	if err != nil {
		fmt.Fprintf(w, "[Authorization Error] No github user set")
		return		
	}
	//_, uid := checkSession(w,r)
	//get access token
	cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", GITHUB_USER_NAME)
	TOKENCACHE := getBytMemcacheValueByKey(w,r,cKey)
	
	if TOKENCACHE == nil {
		//authorize needed
		fmt.Fprintf(w, "[Authorization Required] <a href=\"/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=A\" target=\"github-drive\">Click here</a> to authorize. You may close this window.<br>")
		return
	}
	
	gr := new(GithubToken)
	err = json.Unmarshal(TOKENCACHE, gr)
	if err != nil {
		//log.Panicf("[json.Unmarshal] error: %v", err)
	} else {
		
		//ctx := newappengine.NewContext(r)
		ts := oauth2.StaticTokenSource(
			&oauth2.Token{AccessToken: gr.AccessToken},
		)
		//tc := oauth2.NewClient(ctx, ts)
        tc := oauth2.NewClient(c, ts)

		client := github.NewClient(tc)
		opt := &github.RepositoryContentGetOptions{
			Ref : sha,
		}
		// list all tree for the repo
		fileCon, dirCon, resp, err := client.Repositories.GetContents(c, GITHUB_USER_NAME, repo, opath, opt)
		if err != nil {
			//return err
			fmt.Fprintf(w, "[Response Code] %v<br>", resp.StatusCode)
			fmt.Fprintf(w, "[Response Error] %v<br>", err)			
			fmt.Fprintf(w, "[File Content] %v<br>", fileCon)
			fmt.Fprintf(w, "[Dir Content] %v<br>", dirCon)
			return
		}
		if _, ok := err.(*github.RateLimitError); ok {
			fmt.Fprintf(w, "[Error] Rate Limit: %v<br>", err)	
			return
		}
 
		if resp.StatusCode == 200 {
			switch {
				case fileCon != nil:
					content, err := fileCon.GetContent()
					if err != nil {
						//fmt.Println(err)
						fmt.Fprintf(w, "[Content Error] %v<br>", err)	
						return
					}
					if len(content) > 0 {
						cKey := fmt.Sprintf("GITHUB_CONTENT@888@%v@888@%v@888@%v@888@%v@888@%v@888@%v", GITHUB_USER_NAME, bra, repo, opath, sha, sha2)
						//putBytesToMemcacheWithExp(w,r,cKey,dec,600)
						putStrToMemcacheWithExp(w,r,cKey,content,600)
						//redirect to editor
						redURL := fmt.Sprintf("/editor?EDIT_FUNC=READER&SID=%v", cKey)
						http.Redirect(w, r, redURL, http.StatusFound)
						return
					}
					
				case dirCon != nil:
					//fmt.Fprintf(w, "[GOT DIR!]<br>")
					//display dir contents
					fmt.Fprintf(w, "<h3>github.com/%v/%v/%v</h3>", GITHUB_USER_NAME, repo, opath)
					if len(dirCon) > 0 {
						var trees []GithubTrees
						
						for _, tree := range dirCon {
							
							tpath := ""
							if tree.Path != nil {
								tpath = *tree.Path
							}
							
							icon := "/static/img/github.png"
							if tree.Type != nil {
								switch *tree.Type {
									case "dir":
										icon = "/static/img/folder2.png"
									case "file":
										//icon = "/static/img/file-icon.png"
										_, MIME_EXT := getMimeType(w,r,path.Ext(tpath))
										if MIME_EXT != "" {
											icon = fmt.Sprintf("/static/img/files/%v-icon-128x128.png", MIME_EXT)
										} else {
											icon = "/static/img/file-icon.png"
										}
									case "symlink":
										icon = "/static/img/symlink.png"
									case "submodule":
										icon = "/static/img/submodule.png"
								}
							}
 
							sha2 := ""
							if tree.SHA != nil {
								sha2 = *tree.SHA
							}
							mode := ""
							size := ""
							if tree.Size != nil {
								size = humanize.Bytes(uint64(*tree.Size))
							}
 
							p := GithubTrees {
								Branch:			bra,
								Repo:			repo,
								Icon:			icon,
								Path: 			tpath,
								SHA: 			sha,
								SHA2: 			sha2,
								Mode: 			mode,
								Size:			size,			
							}
							trees = append(trees, p)
						}
						if err := htmlGithubJSONtoTableB.Execute(w, &trees); err != nil {
						  panic(err)
						}
						fmt.Fprintf(w, "<h3><a href=\"https://github.com/%v/%v\" title=\"Create new file or folder via Github website\" target=\"newdirorfile\">New File</a> | <a href=\"https://github.com/%v/%v\" title=\"Create new file or folder via Github website\" target=\"newdirorfile\">New Folder</a></h3>", GITHUB_USER_NAME, repo, GITHUB_USER_NAME, repo)
						if err := outputFooterTemplate.Execute(w, ""); err != nil {
							 panic(err)
						}			
						
					}
					
				default:
					fmt.Fprintf(w, "[UNKNOWN CONTENT!]<br>")
					
			}
 
		}
			
	}		
			
}
 
//D0033
//gets a github tree
func getGithubTree(w http.ResponseWriter, r *http.Request, bra, repo, sha string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //get github user
	GITHUB_USER_NAME, err := getGithubUser(w,r)
	if err != nil {
		fmt.Fprintf(w, "[Authorization Error] No github user set")
		return		
	}
	
	//get access token
	cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", GITHUB_USER_NAME)
	TOKENCACHE := getBytMemcacheValueByKey(w,r,cKey)
	
	if TOKENCACHE == nil {
		//authorize needed
		fmt.Fprintf(w, "[Authorization Required] <a href=\"/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=A\" target=\"github-drive\">Click here</a> to authorize. You may close this window.<br>")
		return
	}
	
	gr := new(GithubToken)
	err = json.Unmarshal(TOKENCACHE, gr)
	if err != nil {
		//log.Panicf("[json.Unmarshal] error: %v", err)
	} else {
		
		//ctx := newappengine.NewContext(r)
		ts := oauth2.StaticTokenSource(
			&oauth2.Token{AccessToken: gr.AccessToken},
		)
        //tc := oauth2.NewClient(ctx, ts)
        tc := oauth2.NewClient(c, ts)
 
		client := github.NewClient(tc)
		
		fmt.Fprintf(w, "<h3>github.com/%v/%v</h3>", GITHUB_USER_NAME, repo)
		repos, resp, err := client.Git.GetTree(c, GITHUB_USER_NAME, repo, sha, true)
		if err != nil {
			//return err
			fmt.Fprintf(w, "[Response Code] %v<br>", resp.StatusCode)
			fmt.Fprintf(w, "[Response Error] %v<br>", err)			
			fmt.Fprintf(w, "[Response Body] %v<br>", repos)
			return
		}
		if _, ok := err.(*github.RateLimitError); ok {
			fmt.Fprintf(w, "[Error] Rate Limit: %v<br>", err)	
			return
		}
 
		if resp.StatusCode == 200 {
			//display tree entries
			if len(repos.Entries) > 0 {
				var trees []GithubTrees
				
				for _, tree := range repos.Entries {
					
					tpath := ""
					if tree.Path != nil {
						tpath = *tree.Path
					}
					
					icon := "/static/img/github.png"
					if tree.Type != nil {
						switch *tree.Type {
							case "tree":
								icon = "/static/img/folder2.png"
							case "blob":
								//icon = "/static/img/file-icon.png"
								_, MIME_EXT := getMimeType(w,r,path.Ext(tpath))
								if MIME_EXT != "" {
									icon = fmt.Sprintf("/static/img/files/%v-icon-128x128.png", MIME_EXT)
								} else {
									icon = "/static/img/file-icon.png"
								}
						}
					}
 
					sha2 := ""
					if tree.SHA != nil {
						sha2 = *tree.SHA
					}
					mode := ""
					if tree.Mode != nil {
						mode = *tree.Mode
					}
					//size := 0
					size :=  ""
					if tree.Size != nil {
						size = humanize.Bytes(uint64(*tree.Size))
					}
 
					p := GithubTrees {
						Branch:			bra,
						Repo:			repo,
						Icon:			icon,
						Path: 			tpath,
						SHA: 			sha,
						SHA2: 			sha2,
						Mode: 			mode,
						Size:			size,			
					}
					trees = append(trees, p)
				}
 
				if err := htmlGithubJSONtoTableB.Execute(w, &trees); err != nil {
				  panic(err)
				}
				fmt.Fprintf(w, "<h3><a href=\"https://github.com/%v/%v\" title=\"Create new file or folder via Github website\" target=\"newdirorfile\">New File</a> | <a href=\"https://github.com/%v/%v\" title=\"Create new file or folder via Github website\" target=\"newdirorfile\">New Folder</a></h3>", GITHUB_USER_NAME, repo, GITHUB_USER_NAME, repo)
				if err := outputFooterTemplate.Execute(w, ""); err != nil {
					 panic(err)
				}
			}
		}
	}
}
//D0033
//gets a github user
func getGithubUser(w http.ResponseWriter, r *http.Request) (DEFAULT_GITHUB_USER string, err error) {

	//c := appengine.NewContext(r)
    //c, cancel := context.WithCancel(context.Background())
    //defer cancel()
    _, uid := checkSession(w,r)
	if uid == "" {
		fmt.Fprintf(w,"Invalid user!")
		return "", fmt.Errorf("invalid user")
	}
    cKeyAll := fmt.Sprintf("DEFAULT_GITHUB_USER_%v", uid)
    DEFAULT_GITHUB_USER = getStrMemcacheValueByKey(w,r,cKeyAll)
	if strings.TrimSpace(DEFAULT_GITHUB_USER) == "" {
		//try from ds
		//query TDSCNFG			
		cfgName := fmt.Sprintf("PERSONAL_Github_User_%v", uid)	
		DEFAULT_GITHUB_USER, _ = getTDSCNFG(w,r,0,cfgName)
	}
	
	if strings.TrimSpace(DEFAULT_GITHUB_USER) == "" {
		fmt.Fprintf(w,"No github user settings")
		return "", fmt.Errorf("no github user found")	
	}
	
	return DEFAULT_GITHUB_USER, nil
				
}
 
//D0033
//gets a github branch
func getGithubBranches(w http.ResponseWriter, r *http.Request, repo string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //get github user
	GITHUB_USER_NAME, err := getGithubUser(w,r)
	if err != nil {
		fmt.Fprintf(w, "[Authorization Error] No github user set")
		return		
	}
	//get access token
	cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", GITHUB_USER_NAME)
	TOKENCACHE := getBytMemcacheValueByKey(w,r,cKey)
	
	if TOKENCACHE == nil {
		//authorize needed
		fmt.Fprintf(w, "[Authorization Required] <a href=\"/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=A\" target=\"github-drive\">Click here</a> to authorize. You may close this window.<br>")
		return
	}
	
	gr := new(GithubToken)
	err = json.Unmarshal(TOKENCACHE, gr)
	if err != nil {
		//log.Panicf("[json.Unmarshal] error: %v", err)
	} else {
		
		//ctx := newappengine.NewContext(r)
		ts := oauth2.StaticTokenSource(
			&oauth2.Token{AccessToken: gr.AccessToken},
		)
        //tc := oauth2.NewClient(ctx, ts)
        tc := oauth2.NewClient(c, ts)
 
		client := github.NewClient(tc)
		
		// list all branches for the repo
		repos, resp, err := client.Repositories.ListBranches(c, GITHUB_USER_NAME, repo, nil)
		if err != nil {
			//return err
			fmt.Fprintf(w, "[Response Code] %v<br>", resp.StatusCode)
			fmt.Fprintf(w, "[Response Error] %v<br>", err)			
			fmt.Fprintf(w, "[Response Body] %v<br>", repos)
			return
		}
		if _, ok := err.(*github.RateLimitError); ok {
			fmt.Fprintf(w, "[Error] Rate Limit: %v<br>", err)	
			return
		}
 
		if resp.StatusCode == 200 {
			if len(repos) > 0 {
				fmt.Fprintf(w, "<h3>github.com/%v/%v</h3>", GITHUB_USER_NAME, repo)
				fmt.Fprintf(w, "<h4>Select Branch:</h4>")
				for _, br := range repos {
					fmt.Fprintf(w, "<h4><a href=\"#\" onClick=\"window.postMessage('ULAPPH-SYS-UPD@888@%v@888@/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=R&bra=%v&repo=%v&sha=%v', 'https://www.ulapph.com'); return false;\">%v (SHA=%v)</a></h4>", repo, *br.Name, repo, *br.Commit.SHA, *br.Name, *br.Commit.SHA)
				}	
			} else {
				//redirect to content
				fmt.Fprintf(w, "<h3>github.com/%v/%v</h3>", GITHUB_USER_NAME, repo)
				fmt.Fprintf(w, "<h4>No branches found!</h4>")
				fmt.Fprintf(w, "<h4><a href=\"https://github.com/%v/%v\" title=\"Create new file or folder via Github website\" target=\"newdirorfile\">New File</a> | <a href=\"https://github.com/%v/%v\" title=\"Create new file or folder via Github website\" target=\"newdirorfile\">New Folder</a></h4>", GITHUB_USER_NAME, repo, GITHUB_USER_NAME, repo)
			}
			
		}		
		
	}
			
}
 
//D0033
//sync to a github repo owned by user
func syncGithubDrive(w http.ResponseWriter, r *http.Request, uid string) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //get github user
	GITHUB_USER_NAME, err := getGithubUser(w,r)
	if err != nil {
		fmt.Fprintf(w, "[Authorization Error] No github user set")
		return		
	}
	//get access token
	//cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", uid)
	cKey := fmt.Sprintf("GITHUB_TOKEN_CACHE_%v", GITHUB_USER_NAME)
	TOKENCACHE := getBytMemcacheValueByKey(w,r,cKey)
	
	if TOKENCACHE == nil {
		//authorize needed
		fmt.Fprintf(w, "[Authorization Required] <a href=\"/tools?FUNC=DRIVES&t=MYDRIVE_GITHUB&ACT=A\" target=\"github-drive\">Click here</a> to authorize. You may close this window.<br>")
		return
	}
	
	gr := new(GithubToken)
	err = json.Unmarshal(TOKENCACHE, gr)
	if err != nil {
		//log.Panicf("[json.Unmarshal] error: %v", err)
	} else {
		
		//ctx := newappengine.NewContext(r)
		ts := oauth2.StaticTokenSource(
			&oauth2.Token{AccessToken: gr.AccessToken},
		)
		//tc := oauth2.NewClient(ctx, ts)
        tc := oauth2.NewClient(c, ts)

		client := github.NewClient(tc)
		
		// list all repositories for the authenticated user
		user := GITHUB_USER_NAME
		opt := &github.RepositoryListOptions{
			Sort: "updated",
			Direction: "desc",
			ListOptions: github.ListOptions{PerPage: 20},
		}
		fmt.Fprintf(w, "<h3>github.com/%v</h3>", user)
		// get all pages of results
		var allRepos []*github.Repository
		pctr := 0
		for {
			//repos, resp, err := client.Repositories.ListByOrg(ctx, user, opt)
			repos, resp, err := client.Repositories.List(c, user, opt)
			if err != nil {
				//return err
				fmt.Fprintf(w, "[Response Code] %v<br>", resp.StatusCode)
				fmt.Fprintf(w, "[Response Error] %v<br>", err)			
				fmt.Fprintf(w, "[Response Body] %v<br>", repos)
				break
			}
			if _, ok := err.(*github.RateLimitError); ok {
				fmt.Fprintf(w, "[Error] Rate Limit: %v<br>", err)	
				break
			}
			pctr++
			allRepos = append(allRepos, repos...)
			if resp.NextPage == 0 {
				break
			}
			opt.ListOptions.Page = resp.NextPage
		}
 
		
		if pctr > 0 {
			var reps []GithubRepos
			
			for _, repo := range allRepos {
				icon := "/static/img/github.png"
				if repo.Fork != nil {
					if *repo.Fork == true {
						icon = "/static/img/github-fork.png"
					}
				}
				name := ""
				if repo.Name != nil {
					name = *repo.Name
				}
				fname := ""
				if repo.FullName != nil {
					fname = *repo.FullName
				}
				desc := ""
				if repo.Description != nil {
					desc = *repo.Description
				}
				watchers := 0
				if repo.WatchersCount != nil {
					watchers = *repo.WatchersCount
				}
				stars := 0
				if repo.StargazersCount != nil {
					stars = *repo.StargazersCount
				}
				forks := 0
				if repo.ForksCount != nil {
					forks = *repo.ForksCount
				}
				issues := 0
				if repo.OpenIssuesCount != nil {
					issues = *repo.OpenIssuesCount
				}				
				lang := ""
				if repo.Language != nil {
					lang = *repo.Language
				}
				//size := 0
				size := ""
				if repo.Size != nil {
					size = humanize.Bytes(uint64(*repo.Size))
				}
				url := ""
				if repo.HTMLURL != nil {
					url = *repo.HTMLURL
				}
				
				p := GithubRepos {
					Icon:			icon,
					Name: 			name,
					FullName: 		fname,
					Description: 	desc,
					Watchers:		watchers,
					Stars:			stars,
					Forks:			forks,
					Issues:			issues,
					Language:		lang,
					Size:			size,
					HtmlUrl: 		url,			
				}
				reps = append(reps, p)
			}
 
			if err := htmlGithubJSONtoTable.Execute(w, &reps); err != nil {
			  panic(err)
			}
			if err := outputFooterTemplate.Execute(w, ""); err != nil {
				 panic(err)
			}			
		}
	}
 
}

//D0044
//google admin callback
func oauth2GaeAdminCall(w http.ResponseWriter, r *http.Request, target string) {
	//c := appengine.NewContext(r)
	////log.Printf("oauth2GaeAdminCall()...")
	switch target {		case "auth":
			redURL := fmt.Sprintf("https://accounts.google.com/o/oauth2/v2/auth?response_type=token&client_id=176777409325-vj412ou1mgrjcn9175aaspjusbufeacc.apps.googleusercontent.com&redirect_uri=https://www.ulapph.com/oauth2/admin/callback&scope=https://www.googleapis.com/auth/cloud-platform")
			////log.Printf("redURhttps://accounts.google.com/o/oauth2/v2/auth?response_type=token&client_id=176777409325-vj412ou1mgrjcn9175aaspjusbufeacc.apps.googleusercontent.com&redirect_uri=https://www.ulapph.com/oauth2/admin/callback&scope=https://www.googleapis.com/auth/cloud-platformL: %v", redURL)
			http.Redirect(w, r, redURL, http.StatusFound)
	}
}
//D0033
//gogole oauth2 callback
func oauth2GoogleCall(w http.ResponseWriter, r *http.Request, uid, target string) {
	//c := appengine.NewContext(r)
	//log.Printf("oauth2GoogleCall()")
	switch target {
		case "drive":
			redURL := fmt.Sprintf("%v?client_id=%v&redirect_uri=https://www.ulapph.com/oauth2/google/callback&response_type=code&scope=https://www.googleapis.com/auth/drive&access_type=offline&state=%v&login_hint=%v", GOOGLE_OAUTH2_AUTH, GOOGLE_OAUTH2_CLIENTID, GOOGLE_OAUTH2_STATE, uid)
			http.Redirect(w, r, redURL, http.StatusFound)
		case "auth":
			redURL := fmt.Sprintf("%v?client_id=%v&redirect_uri=https://www.ulapph.com/oauth2/google/callback&response_type=code&scope=openid%%20profile%%20email&access_type=offline&state=%v&login_hint=%v", GOOGLE_OAUTH2_AUTH, GOOGLE_OAUTH2_CLIENTID, GOOGLE_OAUTH2_STATE, uid)
			//log.Printf("URL: %v", redURL)
			http.Redirect(w, r, redURL, http.StatusFound)
	}
}
 
//D0033
//oauth2 github callback
func oauth2GithubCall(w http.ResponseWriter, r *http.Request, uid, target string) {
	//c := appengine.NewContext(r)
	switch target {
		case "github":
			redURL := fmt.Sprintf("%v?client_id=%v&redirect_uri=https://www.ulapph.com/oauth2/github/callback&scope=user repo&state=%v&allow_signup=true", GITHUB_AUTH_URL, GITHUB_CLIENT_ID, GITHUB_OAUTH2_STATE)	
			http.Redirect(w, r, redURL, http.StatusFound)
	}
}

//D0058
//oauth2 microsoft callback
func handlerOauth2MicrosoftCall(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
	client_id := r.FormValue("client_id")
	redirect_uri := r.FormValue("redirect_uri")
	response_type := r.FormValue("response_type")
	response_mode := r.FormValue("response_mode")
	scope := r.FormValue("scope")
	//access_type := r.FormValue("access_type")
	state := r.FormValue("state")
	////log.Printf("client_id: %v", client_id)
	////log.Printf("redirect_uri: %v", redirect_uri)
	////log.Printf("response_type: %v", response_type)
	////log.Printf("response_mode: %v", response_mode)
	////log.Printf("scope: %v", scope)
	////log.Printf("access_type: %v", access_type)
	////log.Printf("state: %v", state)
	
	redURL := ""	
	switch {
		case client_id == "" && redirect_uri == "" && scope == "":
			redURL = fmt.Sprintf("%v?client_id=%v&response_type=code&response_mode=query&redirect_uri=https://www.ulapph.com/oauth2/microsoft/callback&scope=%v&state=%v", MICROSOFT_AUTH_URL, MICROSOFT_CLIENT_ID, MICROSOFT_OAUTH2_SCOPE, MICROSOFT_OAUTH2_STATE)	
		default:
			redURL = fmt.Sprintf("%v?client_id=%v&response_type=%v&response_mode=%v&redirect_uri=https://www.ulapph.com/oauth2/microsoft/callback&scope=%v&state=%v", MICROSOFT_AUTH_URL, client_id, response_type, response_mode, scope, state)	
			
	}
	////log.Printf("redURL: %v", redURL)
	http.Redirect(w, r, redURL, http.StatusFound)
}

//converts string to integer
func str2int(a string) (i int) {
	i, _ = strconv.Atoi(a)	
	return i
}
//converts integer to string
func int2str(num int) string {
	t := strconv.Itoa(num)
	return t
}

//D0040
//creates a new comment entry
//D0061
func createComment(w http.ResponseWriter, r *http.Request, url, name, res, uid, comment, latlon string, parent int) error {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//D0040
	//get SID
	TARGET := ""
	docID := 0
	
	SID, sidOk := getRefDoc(w,r,url)
	if sidOk == false {
		////log.Printf("No SID found!")
		return fmt.Errorf("No SID found!")
		
	} 
	if SID == "" {
		SID = r.FormValue("SID")
		if SID == "" {
			////log.Printf("No SID found2!")
			return fmt.Errorf("No SID found!")
		}
	}
	
	FL_INITIAL := false
	if SID != "" {
		SPL := strings.Split(SID,"-")
		TARGET = SPL[0]
		if len(SPL) > 1 {
			DOC_ID := SPL[1]
			docID = str2int(DOC_ID)
		}
		//limit comments to a certain number
		q := datastore.NewQuery("TDSCOMMENT").Filter("SID =", SID)
		recCount,_ := datastoreClient.Count(c,q)
		if recCount <= 0 {
			FL_INITIAL = true
		}
		if recCount > SYS_MAX_SOC_COMMENTS {
			return fmt.Errorf("Maximum number comments has been reached!")	
		} else {
			//update num comments field
			//D0040
			time.AfterFunc(5*time.Second, func() {
                laterIncNumLikesSocial(c, uid, SID, "SO_INC_NUM_LIKES", "C")
			})
            //also send an email
			subject := ""
			subject = fmt.Sprintf("[%v] [%v] [%v] New Discussion Comment", name, uid, SID)
            time.AfterFunc(5*time.Second, func() {
                laterQueueCloudTask(c, "/ulapph-router?RTR_FUNC=queue-generic-send-email", map[string]string{"SUBJECT": subject, "TO": ADMMAIL, "FROM": uid, "MESSAGE": comment})
            })
			//broadcast event in chat world
			msgDtl := fmt.Sprintf("New comment posted on: %v at %v by %v. LINK: %v", SID, SYS_SERVER_NAME, uid, ShortenUrl(w,r,fmt.Sprintf("https://www.ulapph.com/captcha?CC_FUNC=DISP&R=COMMENT&SID=%v&TITLE=%v", SID, "")))
			data := fmt.Sprintf("@888@ULAPPH-CHAT@888@%v@888@%v", "USER-COMMENT", msgDtl)
			ulapphChatSender(w,r,"CH_MSG_NOTIFY_CHATS_WORLD", data, "")
			//signal sites server to refresh the recent discussions page
			IS_SEARCH_SERVER, SEARCH_SERVER, _ := getSitesServer(w,r)
			if IS_SEARCH_SERVER == "N" {
				urlStr := fmt.Sprintf("%v/social?SO_FUNC=flag-recent-refresh", SEARCH_SERVER)
				//client := urlfetch.Client(c)
				if err := r.ParseForm(); err != nil {
					panic(err)
				}
				
				_, err := http.Get(urlStr)
				if err != nil {
					panic(err)
				}
			}
			
		}
	}

	q := datastore.NewQuery("TDSCOMMENT").Filter("CID =", parent)
	recCount,_ := datastoreClient.Count(c,q)
	////log.Printf("recCount: %v", recCount)
	cmts := make([]TDSCOMMENT, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &cmts); err != nil {
		 panic(err)
	}
	//log.Printf("datastoreClient.Get()  [88651]")
	if recCount > 0 {
	//exists
		for _, p := range cmts{
			if p.DEPTH+1 > 5 {
				parent = p.PARENT
				////log.Printf("parent: %v", parent)
			}
			
			thisCID := 0
			q2 := datastore.NewQuery("TDSCOMMENT").Order("-CID")
			recCount,_ := datastoreClient.Count(c,q2)
			if recCount > 0 {
				thisCID = recCount + 1
			} else {
				thisCID = 1
			}
			g := TDSCOMMENT{
				CID: thisCID,
				SID: SID,
				URL: url,
				NAME: name,
				UID: uid,
				COMMENT: comment,
				DEPTH: p.DEPTH+1,
				TIMESTAMP: time.Now(),
				//D0042
				//DT_UPDATE: getTimestamp(),
				LATLON: latlon,
				PARENT: parent,
				//D0061
				SVAL: res,
			}
			////log.Printf("TDSCOMMENT: %v", g)
			
			//thisKey := fmt.Sprintf("%d", g.CID)
			thisKey := fmt.Sprintf("%v-%v-%d", SID, time.Now(), g.CID)
			////log.Printf("thisKey: %v", thisKey)
			
			key := datastore.NameKey("TDSCOMMENT", thisKey, nil)
            _, err := datastoreClient.Put(c, key, &g)
            //log.Printf("datastoreClient.Put()  [88692]")
			if err != nil {
					 panic(err)
			}
			
			//clear cache
			cKeyC := fmt.Sprintf("JSON_COMMENTS_%v", SID)
			putBytesToMemcacheWithoutExp(w,r,cKeyC,[]byte(""))			
			//return nil
		
		}		
	} else {
	//not exists
		thisCID := 0
		q2 := datastore.NewQuery("TDSCOMMENT").Order("-CID")
		recCount,_ := datastoreClient.Count(c,q2)
		if recCount > 0 {
			thisCID = recCount + 1
		} else {
			thisCID = 1
		}
	
		g := TDSCOMMENT{
			CID: thisCID,
			SID: SID,
			URL: url,
			NAME: name,
			UID: uid,
			COMMENT: comment,
			DEPTH: 1,
			TIMESTAMP: time.Now(),
			//D0042
			//DT_UPDATE: getTimestamp(),
			LATLON: latlon,
			PARENT: parent,
			//D0061
			SVAL: res,
		}
		////log.Printf("TDSCOMMENT: %v", g)
		
		//thisKey := fmt.Sprintf("%d", g.CID)
		//thisKey := fmt.Sprintf("%v-%v-%d", SID, uid, g.CID)
		thisKey := fmt.Sprintf("%v-%v-%d", SID, time.Now(), g.CID)
		////log.Printf("thisKey: %v", thisKey)
		
		key := datastore.NameKey("TDSCOMMENT", thisKey, nil)
        _, err := datastoreClient.Put(c, key, &g)
        //log.Printf("datastoreClient.Put()  [88739]")
		if err != nil {
				 panic(err)
		}
		
		//clear cache
		cKeyC := fmt.Sprintf("JSON_COMMENTS_%v", SID)
		putBytesToMemcacheWithoutExp(w,r,cKeyC,[]byte(""))	
			
		//return nil		
	}			
	//D0042
	//for query of latest TDS contents discussions
	////log.Printf("FL_INITIAL: %v", FL_INITIAL)
	if FL_INITIAL == true {
	//cidx not exist
		cTags := removeDuplicates(get_words_from(comment))
		if len(cTags) >= 1500 {
			cTags = nil
		}
		h := TDSCOMIDX{
			IID: SID,
			SID: SID,
			DT_UPDATE: getTimestamp(),
			DT_FIRST: getTimestamp(),
			USERS: []string{uid},
			NUM_COMMENTS: 1,
			TAGS: cTags,
		}
		////log.Printf("TDSCOMIDX: %v", h)
		
		thisKey := fmt.Sprintf("%v", h.SID)
		////log.Printf("thisKey: %v", thisKey)
		
		key := datastore.NameKey("TDSCOMIDX", thisKey, nil)
        _, err := datastoreClient.Put(c, key, &h)
        //log.Printf("datastoreClient.Put()  [88775]")
		if err != nil {
				 panic(err)
		}	
	} else {
	//cidx exists
		//D0042
		//for query of latest TDS contents via sites server
		//get existing record for this SID
		thisKey := fmt.Sprintf("%v", SID)
		key := datastore.NameKey("TDSCOMIDX", thisKey, nil)
		q := datastore.NewQuery("TDSCOMIDX").Filter("__key__ =", key)
		//log.Panicf("[S0614]")
		cidx := make([]TDSCOMIDX, 0, 1)
		if _, err := datastoreClient.GetAll(c,q, &cidx); err != nil {
			 panic(err)
			//return
		  }
		//log.Printf("datastoreClient.Get()  [88793]")
		for _, p := range cidx {
			
			cTagsOld := p.TAGS
			cTags := removeDuplicates(get_words_from(fmt.Sprintf("%v %v", strings.Join(p.TAGS," "), comment)))
			if len(cTags) >= 1500 {
				cTags = cTagsOld
			}
			cu := p.USERS
			cu = append(cu, uid)
			h := TDSCOMIDX{
				IID: p.IID,
				SID: p.SID,
				DT_UPDATE: getTimestamp(),
				DT_FIRST: p.DT_FIRST,
				USERS: removeDuplicates(cu),
				NUM_COMMENTS: p.NUM_COMMENTS+1,
				TAGS: cTags,
			}
			////log.Printf("TDSCOMIDX: %v", h)
            _, err := datastoreClient.Put(c, key, &h)
            //log.Printf("datastoreClient.Put()  [88814]")
			if err != nil {
					 panic(err)
			}			
		
		}
	}
	
	//clear slide/article cache
	switch TARGET {
		case "TDSSLIDE":
			blobkey, _, _, _, _, _, _, _, _, _  := getTDSSLIDEBlobKey(w, r, docID)
			SLIDES_CACHE_KEY := fmt.Sprintf("SLIDES_CACHE_%v", blobkey)
			putStrToMemcacheWithoutExp(w,r,SLIDES_CACHE_KEY,"")
			
		case "TDSARTL":
			blobkey, _, _, _, _, _, _, _, _ := getTDSARTLBlobKey(w, r, docID)
			ARTICLES_CACHE_KEY := fmt.Sprintf("ARTICLES_CACHE_%v", blobkey)
			putStrToMemcacheWithoutExp(w,r,ARTICLES_CACHE_KEY,"")
	}
	
	return nil
}
	
//D0040
// put a table data into array of structs
func getComments(w http.ResponseWriter, r *http.Request, SID, url string) ([]Comment, error) {
    //c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	var pl []Comment
	q := datastore.NewQuery("TDSCOMMENT").Filter("SID =", SID)
	recCount,_ := datastoreClient.Count(c,q)
	cmts := make([]TDSCOMMENT, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &cmts); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [88853]")
	if recCount > 0 {
		for _, p := range cmts{
			g := Comment{
				ID: p.CID,
				URL: p.URL,
				Name: p.NAME,
				UID: p.UID,
				Comment: p.COMMENT,
				Profile: getProfilePic(w, r, p.UID),
				Country: getCountryPic(w, r, p.UID),
				Timestamp: p.TIMESTAMP,
				Latlon: p.LATLON,
				Parent: p.PARENT,
			}
			pl = append(pl, g)
		}
	}
	return pl, nil
}

//D0040
//render comments in a container
func (res *resultContainer) render(w http.ResponseWriter) {
	if res == nil {
		res = &resultContainer{
			Status:   http.StatusInternalServerError,
			Success:  false,
			Message:  "Some internal error occurred",
			Comments: nil,
		}
	}
	w.Header().Set("Access-Control-Allow-Origin", "*")
	if res.Status == 0 {
		res.Status = 200
	}
	w.WriteHeader(res.Status)

	json, err := json.Marshal(res)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(`{"Success":false,"Message":"Internal Server Error"}`))
		return
	}
	////log.Printf("json: %v", json)
	w.Write(json)
}

//D0059
//Extract Planner tasks
func extractPlannerTasks(w http.ResponseWriter, r *http.Request, token, cfgMedia string) (err error) {
	//c := appengine.NewContext(r)

	////log.Printf("TOKEN: %v",token)
	////log.Printf("CONFIG: %v",string(configBytes))
	var file *xlsx.File
	var sheet *xlsx.Sheet
	var row *xlsx.Row
	var cell *xlsx.Cell

	file = xlsx.NewFile()
	////log.Printf("++ Adding sheet \"Planner\"")
	sheet, err = file.AddSheet("Planner")
	if err != nil {
		//fmt.Printf(err.Error())
		panic(err)
	}
	// we initialize our Users array
	var config Configuration


	// we unmarshal our byteArray which contains our
	// jsonFile's content into 'users' which we defined above
        //BLOB_KEY := contentCheckSid(w,r,cfgMedia)
	SPL := strings.Split(cfgMedia,"-")
	DOC_ID := ""
	if len(SPL[0]) > 1 {
		DOC_ID = SPL[1]
	}
	MEDIA_ID := str2int(DOC_ID)
	BLOB_KEY, _, _, _, _, _, _, _, _, _, _ := getTDSMEDIABlobKey(w, r, MEDIA_ID)
	////log.Printf("BLOB_KEY: %v", BLOB_KEY)
        blobByte := getBlobByte(w, r, BLOB_KEY)	
	////log.Printf("config: %v", string(blobByte ))
	err = json.Unmarshal(blobByte, &config)
	if err != nil {
		panic(err)
	}
	// Process config items
	//teamName := config.TeamName
	////log.Printf("\nTeam Name: %v", teamName)
	planName := config.PlanName
	////log.Printf("\nPlan Name: %v", planName)
	planID := config.PlanID
	////log.Printf("\nPlan ID: %v", planID)
	//outputFile := fmt.Sprintf("./output/%v - %v.xlsx", teamName, planName)
	//log.Printf("\nOutput File: %v", outputFile)
	////log.Printf("\nMembers: %v", config.Members)
	members := make(map[string]string)
	for _, v := range config.Members {
		//log.Printf("\ni: %v v:%v", i, v)
		////log.Printf("\ni: %v id:%v value: %v", i, v.MemberID, v.MemberName)
		members[v.MemberID] = v.MemberName
	}
	////log.Printf("\nBuckets: %v", config.Buckets)
	buckets := make(map[string]string)
	for _, v := range config.Buckets {
		//log.Printf("\ni: %v v:%v", i, v)
		////log.Printf("\ni: %v id:%v value: %v", i, v.BucketID, v.BucketName)
		buckets[v.BucketID] = v.BucketName
	}
	////log.Printf("\nCategories: %v", config.Labels)
	labels := make(map[string]string)
	for _, v := range config.Labels {
		//log.Printf("\ni: %v v:%v", i, v)
		////log.Printf("\ni: %v id:%v value: %v", i, v.CatID, v.CatName)
		labels[v.CatID] = v.CatName
	}

	//D0059
	//Call graph api using the token
	req, _ := http.NewRequest("GET", fmt.Sprintf("https://graph.microsoft.com/v1.0/planner/plans/%v/tasks", planID), nil)
	//req.Header.Set("Accept", "application/json")
	req.Header.Set("Authorization", "Bearer "+token)
	//client := urlfetch.Client(c)

    ////log.Printf("req: %v", req)
    client := &http.Client{}
	res, err := client.Do(req)
	if err != nil {
		log.Panicf("client.Do err: %v", err)
		return err
	}
	if res.StatusCode != 200 {
		log.Panicf("res.StatusCode: %v", res.StatusCode)
		return err
 
	}
	plannerBytes, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Panicf("ioutil.ReadAll err: %v", err)
		return err
 
	}
	////log.Printf("tasks: %v", string(plannerBytes))

	// we initialize our Users array
	var planner Planner


	// we unmarshal our byteArray which contains our
	// jsonFile's content into 'users' which we defined above
	err = json.Unmarshal(plannerBytes, &planner)
	if err != nil {
		panic(err)
	}

	//Add row header
	row = sheet.AddRow()
	cell = row.AddCell()
	cell.Value = "TASKS"	
	cell = row.AddCell()
	cell.Value = "COMPLETED DATE"
	cell = row.AddCell()
	cell.Value = "DUE DATE"
	cell = row.AddCell()
	cell.Value = "BUCKET"
	cell = row.AddCell()
	cell.Value = "ASSIGNED TO"
	cell = row.AddCell()
	cell.Value = "LABELS"
	cell = row.AddCell()
	cell.Value = "AGE"
	cell = row.AddCell()
	cell.Value = "TASK DETAILS"
	
	// we iterate through every user within our users array and
	// print out the user Type, their name, and their facebook url
	// as just an example
	for i := 0; i < len(planner.Tasks); i++ {
		
		taskTitle := planner.Tasks[i].Title
		//taskPercent := planner.Tasks[i].PercentComplete
		completedDateTime := planner.Tasks[i].CompletedDateTime
		//2018-04-24T10:00:00Z
		dueDateTime := planner.Tasks[i].DueDateTime
		bucketID := planner.Tasks[i].BucketID
		assignments := planner.Tasks[i].Assignments
		appliedCategories := planner.Tasks[i].AppliedCategories
		taskID := planner.Tasks[i].ID
		taskLink := fmt.Sprintf("https://tasks.office.com/yourcompany.onmicrosoft.com/en-us/Home/Task/%v", taskID)
		lusers := ""
		for i, _ := range assignments {
			//log.Printf("\ni: %v v:%v", i, v)
			if lusers == "" {
				lusers = fmt.Sprintf("%v", members[i])
			} else {
				lusers = fmt.Sprintf("%v; %v", lusers, members[i])
			}
		}
		lcats := ""
		for i, _ := range appliedCategories {
			//log.Printf("\ni: %v v:%v", i, v)
			if lcats == "" {
				lcats = fmt.Sprintf("%v", labels[i])
			} else {
				lcats = fmt.Sprintf("%v; %v", lcats, labels[i])
			}
		}
		
		row = sheet.AddRow()
		cell = row.AddCell()
		cell.Value = taskTitle			
		cell = row.AddCell()
		SPL := strings.Split(fmt.Sprintf("%v", completedDateTime), " ")
		cell.Value = SPL[0]
		cell = row.AddCell()
		SPL2 := strings.Split(fmt.Sprintf("%v", dueDateTime), " ")
		cell.Value = SPL2[0]		
		cell = row.AddCell()
		cell.Value = buckets[bucketID]
		cell = row.AddCell()
		cell.Value = lusers
		cell = row.AddCell()
		cell.Value = lcats
		cell = row.AddCell()
		cell.Value = fmt.Sprintf("=B%v-C%v", i+2, i+2) 
		cell = row.AddCell()
		cell.Value = taskLink
		
	}
	
	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%v", planName))
	w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	w.WriteHeader(200)
	file.Write(w)
	return err
}
//D0069
//get score from comments
func getScoreFromComments(w http.ResponseWriter, r *http.Request, SID, UID string) (sValue float64, tstamp string, err error) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //////log.Printf("getScoreFromComments()")
	//////log.Printf("SID: %v",SID)
	//////log.Printf("UID: %v",UID)
    //D0086
    datastoreClient := createClientDS()
	q := datastore.NewQuery("TDSCOMMENT").Filter("SID =", SID)
	recCount,_ := datastoreClient.Count(c,q)
	cmts := make([]TDSCOMMENT, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &cmts); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [89108]")
	if recCount > 0 {
		for _, p := range cmts{
			if p.UID == UID || p.NAME == UID {
				sValue, _ = strconv.ParseFloat(p.SVAL, 64)
				tstamp = fmt.Sprintf("%v", p.TIMESTAMP)
				//return sValue, err
				//break
			}
		}
	}
	//return float64(0), err
	return sValue, tstamp, err
}

//D0061
//Extract comments 
func extractComments(w http.ResponseWriter, r *http.Request, SID, TITLE string) (err error) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //D0086
    datastoreClient := createClientDS()
	//////log.Printf("SID: %v",SID)
	var file *xlsx.File
	var sheet *xlsx.Sheet
	var row *xlsx.Row
	var cell *xlsx.Cell

	file = xlsx.NewFile()
	sheet, err = file.AddSheet(SID)
	if err != nil {
		panic(err)
	}

	//Add row header
	row = sheet.AddRow()
	cell = row.AddCell()
	cell.Value = "NAME"
	cell = row.AddCell()
	cell.Value = "VALUE"
	cell = row.AddCell()
	cell.Value = "SID"
	cell = row.AddCell()
	cell.Value = "UID"
	cell = row.AddCell()
	cell.Value = "COMMENT"
	cell = row.AddCell()
	cell.Value = "TIMESTAMP"
	cell = row.AddCell()
	cell.Value = "CID"
	cell = row.AddCell()
	cell.Value = "DEPTH"
	cell = row.AddCell()
	cell.Value = "LATLON"
	cell = row.AddCell()
	cell.Value = "PARENT"
	cell = row.AddCell()
	cell.Value = "URL"

	q := datastore.NewQuery("TDSCOMMENT").Filter("SID =", SID)
	recCount,_ := datastoreClient.Count(c,q)
	cmts := make([]TDSCOMMENT, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &cmts); err != nil {
		 panic(err)
    }
    //log.Printf("datastoreClient.Get()  [89174]")
	if recCount > 0 {
		for _, p := range cmts{
			if p.DEPTH != 1 {
				continue
			}
			sValue := float64(0)
			thisName := p.NAME
			SPL := strings.Split(p.COMMENT, " got a score of ")
			if p.SVAL != "" {
				sValue, _ = strconv.ParseFloat(p.SVAL, 64)
				if len(SPL) > 0 {
					thisName = SPL[0]
				}
			} else {
				//old enteries parsing
				if len(SPL) > 0 {
					sValue, _ = strconv.ParseFloat(SPL[1], 64)
					thisName = SPL[0]
				}
			}
			row = sheet.AddRow()
			cell = row.AddCell()
			cell.Value = thisName
			cell = row.AddCell()
			cell.SetFloat(sValue)
			cell = row.AddCell()
			cell.Value = p.SID
			cell = row.AddCell()
			cell.Value = p.UID
			cell = row.AddCell()
			cell.Value = p.COMMENT
			cell = row.AddCell()
			cell.Value = fmt.Sprintf("%v", p.TIMESTAMP)
			cell = row.AddCell()
			//cell.Value = fmt.Sprintf("%v", p.CID)
			cell.SetInt(p.CID)
			cell = row.AddCell()
			cell.SetInt(p.DEPTH)
			cell = row.AddCell()
			cell.Value = p.LATLON
			cell = row.AddCell()
			cell.SetInt(p.PARENT)
			cell = row.AddCell()
			cell.Value = p.URL
		}
	}
	expName := fmt.Sprintf("%v %v.xlsx", SID, TITLE)
	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%v", expName))
	w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	w.WriteHeader(200)
	file.Write(w)
	return err
}
//shuffle array
func Shuffle(slice interface{}) {
    rv := reflect.ValueOf(slice)
    swap := reflect.Swapper(slice)
    length := rv.Len()
    for i := length - 1; i > 0; i-- {
            j := rand.Intn(i + 1)
            swap(i, j)
    }
}
//D0084
//call Dialogflow API
/*func processDialogflowNLP(w http.ResponseWriter, req *http.Request, FL_DEBUG, deviceID, rawMessage string) (string,string) {
	//c := appengine.NewContext(req)
	c, cancel := context.WithCancel(context.Background())
    defer cancel()
    //log.Printf("processDialogflowNLP")

	rdr := strings.NewReader(DIALOGFLOW_SERVER_JSON)
	DIALOGFLOW_KEY_JSON, err := ioutil.ReadAll(rdr)
	if err != nil {
		log.Panicf("[ioutil.ReadAll] ERROR: %v", err)
		return "",""
	}
	//ctx := newappengine.NewContext(req)
	conf, err := google.JWTConfigFromJSON(DIALOGFLOW_KEY_JSON, "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/dialogflow")
	if err != nil {
		log.Panicf("[google.JWTConfigFromJSON] ERROR: %v", err)
		return "",""
	}
	//client := conf.Client(ctx)
    client := conf.Client(c)
    //log.Printf("client: %v", client)
	nlpDebug(w,req,FL_DEBUG, "info", "client: "+fmt.Sprintf("%v", client))
	//call api
	//dfInput := `{queryInput: {"text": {"text": "test", "languageCode": "en-US"}}}`
	dfInput := new(DialogflowInput)
	dfInput.QueryInput.Text.Text = rawMessage
	dfInput.QueryInput.Text.Language = "en-US" 
	//log.Printf("dfInput: %v", dfInput)
	nlpDebug(w,req,FL_DEBUG, "info", "dfInput: "+fmt.Sprintf("%v",dfInput))
	data, err := json.Marshal(dfInput)
	//log.Printf("data: %v", string(data))
	nlpDebug(w,req,FL_DEBUG, "info", "data: "+string(data))
	if err != nil {
		log.Panicf("json.Marshal() Error: %v", err)
	}
	res, err := client.Post(fmt.Sprintf("https://dialogflow.googleapis.com/v2/projects/%v/agent/sessions/%v:detectIntent", "ulapph-net", deviceID), "application/json", strings.NewReader(string(data)))
	if err != nil {
		//return
		log.Panicf("ERROR: client.Post %v", err)
		return "",""
	}
	b, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Panicf("ERROR: client.Post %v", err)
		return "",""
	}
	//log.Printf("bodyBytes: %v", string(b))
	nlpDebug(w,req,FL_DEBUG, "info", "bodyBytes: "+string(b))
	//process the response & get intent
	rdata := map[string]interface{}{}
	dec := json.NewDecoder(bytes.NewReader(b))
	dec.Decode(&rdata)
	jq := jsonq.NewQuery(rdata)
	//get intent
	jqVal, err := jq.String("queryResult", "intent", "displayName")
	if err != nil {
		log.Panicf("ERROR: %v", err)
	}
	nlpDebug(w,req,FL_DEBUG, "info", "INTENT: "+jqVal)
	//get additional message
	jqVal2, err := jq.String("queryResult", "fulfillmentMessages", "0", "text", "text", "0")
	if err != nil {
		log.Panicf("ERROR: %v", err)
	}
	nlpDebug(w,req,FL_DEBUG, "info", "fMessage: "+jqVal2)
	return jqVal,jqVal2
}*/
//D0104
//Gorilla websockets
func reader(ws *websocket.Conn) {
	defer ws.Close()
	ws.SetReadLimit(512)
	ws.SetReadDeadline(time.Now().Add(pongWait))
	ws.SetPongHandler(func(string) error { ws.SetReadDeadline(time.Now().Add(pongWait)); return nil })
	for {
		_, _, err := ws.ReadMessage()
		if err != nil {
			break
		}
	}
}

func writer(ws *websocket.Conn, lastMod time.Time) {
	lastError := ""
	pingTicker := time.NewTicker(pingPeriod)
	fileTicker := time.NewTicker(filePeriod)
	defer func() {
		pingTicker.Stop()
		fileTicker.Stop()
		ws.Close()
	}()
	for {
		select {
		case <-fileTicker.C:
			var p []byte
			var err error

			p, lastMod, err = readFileIfModified(lastMod)

			if err != nil {
				if s := err.Error(); s != lastError {
					lastError = s
					p = []byte(lastError)
				}
			} else {
				lastError = ""
			}

			if p != nil {
				ws.SetWriteDeadline(time.Now().Add(writeWait))
				if err := ws.WriteMessage(websocket.TextMessage, p); err != nil {
					return
				}
			}
		case <-pingTicker.C:
			ws.SetWriteDeadline(time.Now().Add(writeWait))
			if err := ws.WriteMessage(websocket.PingMessage, []byte{}); err != nil {
				return
			}
		}
	}
}
//D0104
//Gorilla websockets
// serveWs handles websocket requests from the peer.
func serveWs(w http.ResponseWriter, r *http.Request) {
	ws, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		if _, ok := err.(websocket.HandshakeError); !ok {
			log.Println(err)
		}
		return
	}

	var lastMod time.Time
	if n, err := strconv.ParseInt(r.FormValue("lastMod"), 16, 64); err == nil {
		lastMod = time.Unix(0, n)
	}

	go writer(ws, lastMod)
	reader(ws)
}
//D0104
func readFileIfModified(lastMod time.Time) ([]byte, time.Time, error) {
	fi, err := os.Stat(cctvTempFile)
	if err != nil {
		return nil, lastMod, err
	}
	if !fi.ModTime().After(lastMod) {
		return nil, lastMod, nil
	}
	p, err := ioutil.ReadFile(cctvTempFile)
	if err != nil {
		return nil, fi.ModTime(), err
	}
	return p, fi.ModTime(), nil
}
//D0108
//subtracts two timestamps
func subtractTime(time1,time2 time.Time) float64{
    diff := time2.Sub(time1).Seconds()
    return diff
}
//D0111
/*func createHTTPTask(url string, message []byte ) ([]byte, error) {
	//dummy due to decommission of cloudtasks api
	//fmt.Printf("createHTTPTask()")
	return nil,nil
}*/
// createHTTPTask creates a new task with a HTTP target then adds it to a Queue.
func createHTTPTask(url string, message []byte) (*taskspb.Task, error) {
        //log.Println("createHTTPTask()")
        projectID := SYS_SERVER_NAME
        locationID := SYS_QUEUE_LOC
        queueID := SYS_QUEUE_NAME
        // Create a new Cloud Tasks client instance.
        // See https://godoc.org/cloud.google.com/go/cloudtasks/apiv2
        ctx := context.Background()
        client, err := cloudtasks.NewClient(ctx)
        if err != nil {
                log.Fatalf("cloudtasks.NewClient() %v", err)
                return nil, fmt.Errorf("NewClient: %v", err)
        }

        // Build the Task queue path.
        queuePath := fmt.Sprintf("projects/%s/locations/%s/queues/%s", projectID, locationID, queueID)

        // Build the Task payload.
        // https://godoc.org/google.golang.org/genproto/googleapis/cloud/tasks/v2#CreateTaskRequest
        req := &taskspb.CreateTaskRequest{
                Parent: queuePath,
                Task: &taskspb.Task{
                        // https://godoc.org/google.golang.org/genproto/googleapis/cloud/tasks/v2#AppEngineHttpRequest
                        MessageType: &taskspb.Task_AppEngineHttpRequest{
                                AppEngineHttpRequest: &taskspb.AppEngineHttpRequest{
                                        HttpMethod:  taskspb.HttpMethod_POST,
                                        RelativeUri: url,
                                },
                        },
                },
        }

        // Add a payload message if one is present.
        req.Task.GetAppEngineHttpRequest().Body = message

        createdTask, err := client.CreateTask(ctx, req)
        if err != nil {
                return nil, fmt.Errorf("cloudtasks.CreateTask: %v", err)
        }
        //log.Printf("createdTask: %v", createdTask)
        //log.Printf("req: %v", req)
        return createdTask, nil
}
//D0115-start
/////////////////////////////////////////////////////////////
// Products
////////////////////////////////////////////////////////////
//Handler for Products
func handleFuncProducts(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

	log.Printf("handleFuncProducts")
	val, err := handleProducts(c, r)
	/*if err == nil {
		err = json.NewEncoder(w).Encode(val)
	}*/
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(fmt.Sprintf("api error: %#v", err)))
		return	
	}
	log.Printf("val: %#v", val)
	data,_ := json.MarshalIndent(val, "", "  ")
	log.Printf("data: %#v", data)
	w.Write(data)
	return
}
 
func handleProducts(c context.Context, r *http.Request) (interface{}, error) {
	switch r.Method {
		
		case "POST":
			log.Printf("POST")
			product, err := decodeProduct(r.Body)
			if err != nil {
				log.Printf("%v", err)
				return nil, err
			}
			return product.save(c)
			
		case "GET":
			log.Printf("GET")
			return getAllProducts(c)
			
		case "DELETE":
			log.Printf("DELETE")
			return nil, deleteProducts(c)
	}
	log.Printf("method not implemented")
	return nil, fmt.Errorf("method not implemented")
	
}

func defaultProductList(c context.Context) *datastore.Key {
	//datastoreClient := createClientDS()
	//return datastore.NewKey(c, "ProductList", "default", 0, nil)
	thisKey := fmt.Sprintf("%s", "default")
	return datastore.NameKey("ProductList", thisKey, nil)
}
 
func (t *Product) save(c context.Context) (*Product, error) {
	log.Printf("save")
	datastoreClient := createClientDS()
	_, err := datastoreClient.Put(c, getKeyProduct(c,t.Code), t)
	if err != nil {
		log.Printf("%v", err)
		return nil, err
	}
	return t, nil
}
 
func decodeProduct(r io.ReadCloser) (*Product, error) {
	defer r.Close()
	var product Product
	err := json.NewDecoder(r).Decode(&product)
	log.Printf("product: %#v", product)
	return &product, err
}
 
func getAllProducts(c context.Context) ([]Product, error) {
	log.Printf("getAllProducts")
	//products := []Product{}
	datastoreClient := createClientDS()
	//_, err := datastore.NewQuery("Product").Ancestor(defaultProductList(c)).Order("Code").GetAll(c, &products)
	//q := datastore.NewQuery("Product").Ancestor(defaultProductList(c)).Order("Code")
	//if _, err := datastoreClient.GetAll(c,q, &products); err != nil {
	//	 panic(err)
	//	//return
	//}
	//q := datastore.NewQuery("Product").Ancestor(defaultProductList(c)).Order("Code")
	q := datastore.NewQuery("Product").Order("Code")
	recCount,_ := datastoreClient.Count(c,q)
	products := make([]Product, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &products); err != nil {
		 panic(err)
		//return
	}
	//if err != nil {
	//	log.Printf("%v", err)
	//	return nil, err
	//}
	log.Printf("products: %#v", products)
	return products, nil
}
 
func deleteProducts(c context.Context) error {
	log.Printf("deleteProducts")
	datastoreClient := createClientDS()
	q := datastore.NewQuery("Product").KeysOnly()
	//keys, err := q.GetAll(c, nil)
	//if err != nil {
	//	return err
	//}
	//err = datastoreClient.DeleteMulti(c, keys)
	//if err != nil {
	//	return err
	//}
	keys, err := datastoreClient.GetAll(c,q, nil)
	if err != nil {
		panic(err)
	}
	err = datastoreClient.DeleteMulti(c, keys)
	if err != nil {
		panic(err)
	}

	log.Printf("deleteProducts DeleteMulti")
	return err
}

func getKeyProduct(c context.Context, Code string) *datastore.Key {
	log.Printf("getKeyProduct")
	//datastoreClient := createClientDS()
	//return datastore.NewKey(c, "Product", Code, 0, nil)
	thisKey := fmt.Sprintf("%s", Code)
	return datastore.NameKey("Product", thisKey, nil)
}

////////////////////////////////////////////
// Cart
////////////////////////////////////////////
//Handler for Cart
func handleFuncCart(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

	log.Printf("handleFuncCarts")
	val, err := handleCarts(c, r)
	/*if err == nil {
		err = json.NewEncoder(w).Encode(val)
	}*/
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(fmt.Sprintf("api error: %#v", err)))
		return	
	}
	data,_ := json.MarshalIndent(val, "", "  ")
	log.Printf("data: %#v", data)
	w.Write(data)
	return

}
 
func handleCarts(c context.Context, r *http.Request) (interface{}, error) {
	switch r.Method {
		
		case "POST":
			log.Printf("POST")
			cart, err := decodeCart(r.Body)
			if err != nil {
				log.Printf("%v", err)
				return nil, err
			}
			return cart.save(c)
			
		case "GET":
			log.Printf("GET")
			owner := r.FormValue("owner")
			return getAllCarts(c, owner)
			
		case "DELETE":
			log.Printf("DELETE")
			owner := r.FormValue("owner")
			return nil, deleteCarts(c, owner)
	}
	log.Printf("method not implemented")
	return nil, fmt.Errorf("method not implemented")
	
}
 
func defaultCartList(c context.Context) *datastore.Key {
	//datastoreClient := createClientDS()
	//return datastore.NewKey(c, "CartList", "default", 0, nil)
	thisKey := fmt.Sprintf("%s", "default")
	return datastore.NameKey("CartList", thisKey, nil)

} 
func (t *Cart) save(c context.Context) (*Cart, error) {
	log.Printf("save")
	datastoreClient := createClientDS()
	//_, err := datastoreClient.Put(c, getKeyCart(c,t.Code), t)
	//_, err := datastoreClient.Put(c, getKeyCart(c,t.Owner), t)
	_, err := datastoreClient.Put(c, getKeyCart(c,t.Owner,t.Code), t)
	if err != nil {
		log.Printf("%v", err)
		return nil, err
	}
	return t, nil
}
 
func decodeCart(r io.ReadCloser) (*Cart, error) {
	defer r.Close()
	var product Cart
	err := json.NewDecoder(r).Decode(&product)
	log.Printf("product: %#v", product)
	return &product, err
}
func getAllCarts(c context.Context, owner string) ([]Cart, error) { 
//func getAllCarts(c context.Context) ([]Cart, error) {
	log.Printf("getAllCarts")
	//products := []Cart{}
	datastoreClient := createClientDS()
	//_, err := datastore.NewQuery("Cart").Ancestor(defaultCartList(c)).Order("Code").GetAll(c, &products)
	//if err != nil {
	//	log.Printf("%v", err)
	//	return nil, err
	//}
	//q := datastore.NewQuery("Cart").Ancestor(defaultCartList(c)).Order("Code")
	//if _, err := datastoreClient.GetAll(c,q, &products); err != nil {
	//	 panic(err)
	//	//return
	//}
	//q := datastore.NewQuery("Cart").Filter("Owner =", owner).Order("Code")
	q := datastore.NewQuery("Cart").Filter("Owner =", owner)
	recCount,_ := datastoreClient.Count(c,q)
	cart := make([]Cart, 0, recCount)
	if _, err := datastoreClient.GetAll(c,q, &cart); err != nil {
		 panic(err)
		//return
	}

	log.Printf("cart: %#v", cart)
	return cart, nil
}
 
func deleteCarts(c context.Context, owner string) error {
	log.Printf("deleteCarts")
	datastoreClient := createClientDS()
	q := datastore.NewQuery("Cart").Filter("Owner =", owner).KeysOnly()
	//keys, err := q.GetAll(c, nil)
	//if err != nil {
	//	return err
	//}
	//err = datastoreClient.DeleteMulti(c, keys)
	//if err != nil {
	//	return err
	//}
	//keys, err := datastoreClient.GetAll(c,q, nil)
	//if err != nil {
	//	panic(err)
	//}
    keys, err := datastoreClient.GetAll(c,q, nil)
    if err != nil {
        panic(err)
    }

	err = datastoreClient.DeleteMulti(c, keys)
	if err != nil {
		panic(err)
	}

	log.Printf("deleteCarts DeleteMulti")
	return err
}
//func getKeyCart(c context.Context, Code string) *datastore.Key {
func getKeyCart(c context.Context, owner, code string) *datastore.Key {
	log.Printf("getKeyCart")
	//datastoreClient := createClientDS()
	//return datastore.NewKey(c, "Cart", Code, 0, nil)
	//thisKey := fmt.Sprintf("%s", Code)
	thisKey := fmt.Sprintf("%s-%s", owner, code)
	return datastore.NameKey("Cart", thisKey, nil)
}

//////////////////////////////////////
// Process
//////////////////////////////////////
//Handler for Cart
func handleFuncProcess(w http.ResponseWriter, r *http.Request) {
	//c := appengine.NewContext(r)
    //c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    //defer cancel()
    if r.Method == "GET" {
    	//return info
    	//rules
		/*type CartRules struct {
			Type float64 `json:"type"`
			Code map[string]string  `json:"code"`
			Value string `json:"value"`
		}*/

		var thisRules []CartRules

		for k, v := range Rule_BuyThreePayTwoOnly {
			var aRule CartRules
			log.Printf("key: %v -> value: %v", k, v)
			aRule.Type = "Rule_BuyThreePayTwoOnly"
			aRule.Code = fmt.Sprintf("%v", k)
			aRule.Value = fmt.Sprintf("%v", v)
			thisRules = append(thisRules, aRule)
		} 

		for k, v := range Rule_BulkDiscountMoreThanThree {
			var aRule CartRules
			log.Printf("key: %v -> value: %v", k, v)
			aRule.Type = "Rule_BulkDiscountMoreThanThree"
			aRule.Code = fmt.Sprintf("%v", k)
			aRule.Value = fmt.Sprintf("%v", v)
			thisRules = append(thisRules, aRule)
		} 

		for k, v := range Rule_BundleFreeForEveryItemBought {
			var aRule CartRules
			log.Printf("key: %v -> value: %v", k, v)
			aRule.Type = "Rule_BundleFreeForEveryItemBought"
			aRule.Code = fmt.Sprintf("%v", k)
			aRule.Value = fmt.Sprintf("%v", v)
			thisRules = append(thisRules, aRule)
		} 

		for k, v := range Rule_PromoCodeDiscount {
			var aRule CartRules
			log.Printf("key: %v -> value: %v", k, v)
			aRule.Type = "Rule_PromoCodeDiscount"
			aRule.Code = fmt.Sprintf("%v", k)
			aRule.Value = fmt.Sprintf("%v", v)
			thisRules = append(thisRules, aRule)
		} 
		log.Printf("thisRules: %#v", thisRules)
		data,_ := json.MarshalIndent(thisRules, "", "  ")
		log.Printf("data: %#v", data)
		w.Write(data)
		return

    }
    //use PATCH to trigger this logic
	promo_code := r.FormValue("promo_code")
	log.Printf("promo_code: %v", promo_code)
	
	//Call initiated by browser when a JS or ajax attempts ot recompute the cart items
	//Get all items in the cart and process
	//For each item which has applicable pricing rules, include them in processing
	//Return total and list of items
	
	shop := newCartProc()
	//Rules for BuyThreePayTwoOnly
	//If you buy 3 items, you pay only two items
	log.Printf("Check_Rule_BuyThreePayTwoOnly")
	shop.Check_Rule_BuyThreePayTwoOnly(w,r)

	//Rules for BulkDiscountMoreThanThree
	//The price will drop to $$ each for the first month, if the customer buys more than x items.
	log.Printf("Check_Rule_BulkDiscountMoreThanThree")
	shop.Check_Rule_BulkDiscountMoreThanThree(w,r)

	//Rules for BundleFreeForEveryItemBought
	//We will bundle in a free item X free-of-charge with every Y sold
	log.Printf("Check_Rule_BundleFreeForEveryItemBought")
	shop.Check_Rule_BundleFreeForEveryItemBought(w,r)
	
	//Process those items w/ no rules applied
	log.Printf("All_Others_No_Rule_Processing")
	shop.All_Others_No_Rule_Processing(w,r)
	
	//Finally, see if any promos to be processed
	//Check rules if there are promos to be applied
	log.Printf("promo_code: %v", promo_code)
	if promo_code != "" {
		//Rules for PromoCodeDiscount
		//Adding the promo code X will apply a $$ discount across the board.
		log.Printf("Check_Rule_PromoCodeDiscount")
		shop.Check_Rule_PromoCodeDiscount(w,r,promo_code)
	}
	
	//return data as json
	cp := CartProc {
		Total: shop.Total,
		Rules: shop.Rules,
		Current: shop.Current,
	}
	log.Printf("cp: %#v", cp)
	data,_ := json.MarshalIndent(cp, "", "  ")
	log.Printf("data: %#v", data)
	w.Write(data)
	
}

//Initialize cart proc
func newCartProc() *CartProc {
	return &CartProc{
		Total: 0,
		Rules: map[string]string{},
		Current: nil,
	}
}

func (s *CartProc) Check_Rule_BuyThreePayTwoOnly(w http.ResponseWriter, r *http.Request) error {
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

	log.Printf("Check_Rule_BuyThreePayTwoOnly")
	//For each entry in rule, scan the cart items
	
	for k, v := range Rule_BuyThreePayTwoOnly {
		log.Printf("key: %v -> value: %v", k, v)
		datastoreClient := createClientDS()
		q := datastore.NewQuery("Cart").Filter("Code =", k)

		//recCount, _  := q.Count(c)
		recCount,_ := datastoreClient.Count(c,q)
		items := make([]Cart, 0, recCount)
		//if _, err := q.GetAll(c, &items); err != nil {
		//	return err
		// }
		//q := datastore.NewQuery("Cart").Filter("Code =", k)
		if _, err := datastoreClient.GetAll(c,q, &items); err != nil {
			 panic(err)
			//return
		}

		var total float64
		applied := false
		for _, p := range items {
			log.Printf("cart item: %v", p)
			if p.Items >= 3 {
				//temp; need to fix this logic; fixed to 3 only for now; what if cx has 6 or 9 items etc
				///total = float64((p.Items - 1)) * p.Price
				//numerator := float64(p.Items - 1)
				numerator := float64(p.Items)
				quotient := numerator/float64(3)
				//remainder := (p.Items - 1)%3
				remainder := (p.Items)%3
				log.Printf("numerator: %v", numerator)
				log.Printf("quotient: %v", quotient)
				log.Printf("remainder: %v", remainder)
				total = ((quotient * 2) * p.Price) + (float64(remainder) * p.Price)
				applied = true
				break
			}
		}

		if applied == true {
			s.Total = s.Total + total
			log.Printf("Rule APPLIED: Check_Rule_BuyThreePayTwoOnly")
			s.Rules[k] = "Rule_BuyThreePayTwoOnly"
		}
		
	}
	return nil
}

func (s *CartProc) Check_Rule_BulkDiscountMoreThanThree(w http.ResponseWriter, r *http.Request) error {
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

	log.Printf("Check_Rule_BulkDiscountMoreThanThree")
	//For each entry in rule, scan the cart items

	for k, v := range Rule_BulkDiscountMoreThanThree {
		log.Printf("key: %v -> value: %v", k, v)
		datastoreClient := createClientDS()
		q := datastore.NewQuery("Cart").Filter("Code =", k)

		//recCount, _  := q.Count(c)
		recCount,_ := datastoreClient.Count(c,q)
		items := make([]Cart, 0, recCount)
		//if _, err := q.GetAll(c, &items); err != nil {
		//	return err
		// }
		if _, err := datastoreClient.GetAll(c,q, &items); err != nil {
			 panic(err)
			//return
		}
		
		var total float64
		applied := false
		discPrice := v
		for _, p := range items {
			log.Printf("cart item: %v", p)
			if p.Items >= 3 {
				total = float64(p.Items) * discPrice
				applied = true
				break
			}
		}
		s.Total = s.Total + total
		if applied == true {
			log.Printf("Rule APPLIED: Rule_BulkDiscountMoreThanThree")
			s.Rules[k] = "Rule_BulkDiscountMoreThanThree"
		}
		

	}
	
	return nil
}

func (s *CartProc) Check_Rule_BundleFreeForEveryItemBought(w http.ResponseWriter, r *http.Request) error {
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

	log.Printf("Check_Rule_BundleFreeForEveryItemBought")
	//For each entry in rule, scan the cart items
	
	for k, v := range Rule_BundleFreeForEveryItemBought {
		log.Printf("key: %v -> value: %v", k, v)
		datastoreClient := createClientDS()
		q := datastore.NewQuery("Cart").Filter("Code =", k)

		//recCount, _  := q.Count(c)
		recCount,_ := datastoreClient.Count(c,q)
		items := make([]Cart, 0, recCount)
		//if _, err := q.GetAll(c, &items); err != nil {
		//	return err
		// }
		if _, err := datastoreClient.GetAll(c,q, &items); err != nil {
			 panic(err)
			//return
		}
		
		promCtr := 0
		applied := false
		for _, p := range items {
			log.Printf("cart item: %v", p)
			promCtr++
			applied = true
		}
		log.Printf("cart item promCtr: %v", promCtr)
			
		if applied == true {
			//get item details for this promo item
			err := AddPromoItemToCart(w,r,v)
			if err != nil {
				log.Printf("AddPromoItemToCart error: %v", v)
				return nil
			}
			log.Printf("Rule APPLIED: Rule_BulkDiscountMoreThanThree")
			s.Rules[k] = "Rule_BulkDiscountMoreThanThree"
		}
		

	}
	
	return nil
}

func (s *CartProc) Check_Rule_PromoCodeDiscount(w http.ResponseWriter, r *http.Request, promo string) error {
	//c := appengine.NewContext(r)
    //c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    //defer cancel()

	log.Printf("Check_Rule_PromoCodeDiscount")
	//For each entry in rule, scan the cart items
	
	for k, v := range Rule_PromoCodeDiscount {
		log.Printf("key: %v -> value: %v", k, v)
		
		_, ok := Rule_PromoCodeDiscount[promo]
		if ok == true {
			//promo should be applied
			discount := v/100
			log.Printf("s.Total: %v", s.Total)
			s.Total = s.Total - (s.Total * discount)
			log.Printf("discount: %v", discount)
			log.Printf("s.Total(w/ promo): %v", s.Total)
			log.Printf("Rule APPLIED: Rule_PromoCodeDiscount")
			s.Rules[k] = "Rule_PromoCodeDiscount"
		}
	}
	
	return nil
}

func (s *CartProc) All_Others_No_Rule_Processing(w http.ResponseWriter, r *http.Request) error {
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

	log.Printf("All_Others_No_Rule_Processing")
	//For all other entries w/ no rules applied, process normally
		datastoreClient := createClientDS()
		q := datastore.NewQuery("Cart").Order("Code")

		//recCount, _  := q.Count(c)
		recCount,_ := datastoreClient.Count(c,q)
		items := make([]Cart, 0, recCount)
		//if _, err := q.GetAll(c, &items); err != nil {
		//	return err
		// }
		if _, err := datastoreClient.GetAll(c,q, &items); err != nil {
			 panic(err)
			//return
		}
		
		for _, p := range items {
			log.Printf("cart item: %v", p)
			_, ok := s.Rules[p.Code]
			if ok == false {
				//normal process this item
				s.Total = s.Total + (p.Price* float64(p.Items))
			}
		}
		//append to cart current items
		s.Current = items
		
	
	return nil
}

func AddPromoItemToCart(w http.ResponseWriter, r *http.Request, code string) (err error) {
	//c := appengine.NewContext(r)
    c, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()
    	
	log.Printf("AddPromoItemToCart")
	log.Printf("AddPromoItemToCart code: %v", code)
	datastoreClient := createClientDS()
	q := datastore.NewQuery("Product").Filter("Code =", code).Limit(1)
	
	//recCount, _  := q.Count(c)
	recCount,_ := datastoreClient.Count(c,q)
	items := make([]Product, 0, recCount)
	//if _, err := q.GetAll(c, &items); err != nil {
	//	return err
	//}
	if _, err := datastoreClient.GetAll(c,q, &items); err != nil {
		 panic(err)
		//return
	}
	
	for _, p := range items {
		log.Printf("cart item: %v", p)
		//insert new promo item to cart
		
		cart := Cart {
			Code: p.Code,
			Name: p.Name,
			Price: 0,
			Items: 1,			
		}
		log.Printf("cart: %#v", cart)

		cart.save(c)	
	}
	
	return err
}
//D0115-end	

////////////////////////////////////////////////////////////////////////////////////
//TO GOD BE THE GLORY
//IN GOD WE TRUST
///////////////////////////////////////////////////////////////////////////////////
//// END OF CODES //////////////////////////
