{{define "root"}}

<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="robots" content="noindex, nofollow">
  <meta name="googlebot" content="noindex, nofollow">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script type="text/javascript" src="/static/lib/js/tree/angular.js"></script>
  <!--link rel="stylesheet" type="text/css" href="/static/lib/css/tree/esult-light.css"-->
  <link rel="stylesheet" type="text/css" href="/static/lib/css/tree/angular-ui-tree.min.css">
  <script type="text/javascript" src="/static/lib/js/tree/angular-ui-tree.min.js"></script>
  <link rel="stylesheet" type="text/css" href="/static/lib/css/tree/bootstrap.min.css">
  <style type="text/css">
    .btn {
  margin-right: 8px;
}

.angular-ui-tree-handle {
  background: #f8faff;
  border: 1px solid #dae2ea;
  color: #7c9eb2;
  padding: 10px 10px;
}

.angular-ui-tree-handle:hover {
  color: #438eb9;
  background: #f4f6f7;
  border-color: #dce2e8;
}

.angular-ui-tree-placeholder {
  background: #f0f9ff;
  border: 2px dashed #bed2db;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

tr.angular-ui-tree-empty {
  height: 100px
}

.group-title {
  background-color: #687074 !important;
  color: #FFF !important;
}


/* --- Tree --- */

.tree-node {
  border: 1px solid #dae2ea;
  background: #f8faff;
  color: #7c9eb2;
}

.nodrop {
  background-color: #f2dede;
}

.tree-node-content {
  margin: 10px;
}

.tree-handle {
  padding: 10px;
  background: #428bca;
  color: #FFF;
  margin-right: 10px;
}

.angular-ui-tree-handle:hover {}

.angular-ui-tree-placeholder {
  background: #f0f9ff;
  border: 2px dashed #bed2db;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

  </style>
  
<title>Tree for {{.STR_FILLER2}}</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="Angular UI Tree powered by ULAPPH Cloud Desktop!" />
    <meta name="copyright" content="Copyright 2014-2020 ULAPPH Cloud Desktop. All Rights Reserved." />
    <meta name="keywords" content="Angular UI Tree for ULAPPH Cloud Desktop" />
    <meta name="author" content="ULAPPH Cloud Desktop" />
<script type="text/javascript">//<![CDATA[

angular.module('myApp', ['ui.tree'])
  .controller('myCtrl', function($scope, $http) {
    $scope.remove = function(scope) {
      scope.remove();
    };

    $scope.toggle = function(scope) {
      scope.toggle();
    };

    $scope.moveLastToTheBeginning = function() {
      var a = $scope.data.pop();
      $scope.data.splice(0, 0, a);
    };

    $scope.newSubItem = function(scope) {
      var nodeData = scope.$modelValue;
      var uniqID = Date.now();
      nodeData.nodes.push({
        id: uniqID + nodeData.id * 10 + nodeData.nodes.length,
        title: nodeData.title + '.' + (nodeData.nodes.length + 1),
	url: "",
        nodes: []
      });
    };

    $scope.collapseAll = function() {
      $scope.$broadcast('angular-ui-tree:collapse-all');
    };

    $scope.expandAll = function() {
      $scope.$broadcast('angular-ui-tree:expand-all');
    };
	
    $scope.refresh = function() {
      location.reload();
    };

    $scope.loadStatus = function() {
      //location.reload();
	console.log("loading status");
	//console.log(localStorage.length);

	for ( var i = 0, len = localStorage.length; i < len; ++i ) {
	  //console.log( localStorage.getItem( localStorage.key( i ) ) );
	  var str = localStorage.key( i );
	  var n = str.indexOf("{{.STR_FILLER1}}-node-");
	  if (n >= 0) {
		console.log("found status");
		//also strikethrough
		var res = str.replace("{{.STR_FILLER1}}-", "");
		//console.log(res);
		var ele = document.getElementById(res);
		ele.style.setProperty("text-decoration", "line-through");
		//also set background
		if (localStorage[str] == "x") {
			ele.style.backgroundColor = "yellow";
		} else {
			ele.style.backgroundColor = "cyan";
		}

	  }
	}
    };
    
    $scope.showHideJSON = function() {
	    var x = document.getElementById("jsonarea");
	    if (x.style.display === "none") {
	        x.style.display = "block";
		var treeArea = document.getElementsByClassName("col-sm-6")[0];
		treeArea.setAttribute("style","width:50%");
	    } else {
	        x.style.display = "none";
		var treeArea = document.getElementsByClassName("col-sm-6")[0];
		treeArea.setAttribute("style","width:100%");
	    }
    };

    $scope.saveAll = function() {
	console.log("Saving JSON...");
	//console.log($scope.data);
	console.log({{.STR_FILLER1}});
	$http.post('/tree?FUNC_CODE=SAVEJSON&SID=' + '{{.STR_FILLER1}}', $scope.data, "")
	    .then(function(response) {
	      //alert(response.status);
		if (response.status = 200) {
			alert("OK, saved");
		} else {
			alert("ERROR saving data!");
		}
	    });
		
    };

    $scope.editItem = function(scope) {
		//alert("Edit Item")
		console.log("edit item")
		var nodeData = scope.$modelValue;
		//alert(nodeData);
		//alert(nodeData.id);
		//alert(nodeData.title);
		//alert(nodeData.url);
		//alert(nodeData.nodes);
		$scope.temp = {id:nodeData.id, title:nodeData.title, url: nodeData.url, nodes: nodeData.nodes};
		//alert($scope.temp);
		//console.log($scope.temp);
		//alert("Edit the item and click save icon!")
    };
	
    $scope.viewLink = function(scope) {
		//alert("Edit Item")
		console.log("view item")
		var nodeData = scope.$modelValue;
		//alert(nodeData);
		//alert(nodeData.id);
		//alert(nodeData.title);
		//alert(nodeData.url);
		//alert(nodeData.nodes);
		//$scope.temp = {id:nodeData.id, title:nodeData.title, url: nodeData.url, nodes: nodeData.nodes};
		//alert($scope.temp);
		//console.log($scope.temp);
		//alert("Edit the item and click save icon!")
		//window.open(nodeData.url, nodeData.url);
		var root = location.protocol + '//' + location.host;
		var str = nodeData.url;
		var thisColor = "cyan";
		var thisChar = "x";
		if (str == "" || str == undefined) {
			alert("No link!");
			thisChar = "y";
			//return;
		} else {
			var n = str.indexOf(location.host);
			if (n > 0) {
			    var r = confirm("Press OK to open in window. Press Cancel to open new tab!");
			    if (r == true) {
			        parent.postMessage('ULAPPH-SYS-UPD@888@'+ nodeData.title +'@888@' + nodeData.url, root); 
			    } else {
			        window.open(nodeData.url, "_blank");
			    }
			} else {
				window.open(nodeData.url, "_blank");
			}
			thisColor = "yellow";
		}

		//also strikethrough
		var ele = document.getElementById("node-" + nodeData.id);
		ele.style.setProperty("text-decoration", "line-through");
		//also set background
		ele.style.backgroundColor = thisColor;
		//save status in localstorage
		//localStorage["{{.STR_FILLER1}}-node-" + nodeData.id] = "x";
		localStorage["{{.STR_FILLER1}}-node-" + nodeData.id] = thisChar;

		return false;
    };
	
    $scope.saveItem = function(scope) {
		//alert("Save Item")
		console.log("save item")
		//var nodeData = scope.$modelValue;
		//alert(nodeData);
		//alert($scope.temp.id);
		//alert($scope.temp.title);
		//alert($scope.temp.url);
		//alert($scope.temp.nodes);
		//$scope.temp = {id:nodeData.id, title:nodeData.title, url: nodeData.url, nodes: nodeData.nodes};
		//alert($scope.temp);
		//var nodeData = $scope.data;
        	//objIndex = nodeData.findIndex((scope => $scope.temp.id == 1));
		//Log object to Console.
		//console.log("Before update: ", nodeData[objIndex])
		//Update object's name property.
		//nodeData[objIndex] = $scope.temp;
		console.log($scope.temp);
		update($scope.data, $scope.temp.id, $scope.temp)
		
	  
    };
	
    $http.get('/media?FUNC_CODE=RAWJSON&SID=' + '{{.STR_FILLER1}}')
    .then(function(response) {
      if (response.data != "") {
      	$scope.data = response.data;
      } else {
		var tempJSON = [{
		    "id": 100,
		    "title": "Testing",
		    "url": "",
		    "nodes": [{
				"id": 10000000,
				"title": "Google Origin.1.1.1.1",
				"url": "",
				"nodes": [{
					"id": 100000000,
					"title": "Google Origin.1.1.1.1.1",
					"url": "",
					"nodes": [{
						"id": 1000000000,
						"title": "This is a very long title here",
						"url": "http://www.google.com",
						"nodes": []
					}]
				}]
			}]
		 }];
      	$scope.data = tempJSON;
      }

    });

  });

//]]> 

	function update(items, id, uItem) {
		//alert("call update()");
		var item;
		var found = false;
		for (var i = 0; i < items.length; i++) {
			item = items[i];
			if (item.id === id) {
				//alert("Found array item");
				item.id = uItem.id;
				item.title = uItem.title;
				item.url = uItem.url;
				//item.nodes = uItem.nodes;
				found = true
				return;
			}
			if (item.nodes) {
				 update(item.nodes, id, uItem);
			}
		}
		if (found == true) {
			alert("OK, updated item");
		} else {
			//alert("ERROR, update failed");
		}
	}

</script>

  
</head>

<body onload="viewMode()">
  <div ng-app="myApp"> 
  <div ng-controller="myCtrl">
    <!-- Nested node template -->
    <script type="text/ng-template" id="nodes_renderer.html">
      <div ui-tree-handle class="tree-node tree-node-content" id="node-{{"{{"}}node.id{{"}}"}}">
        <a class="btn btn-success btn-xs" ng-if="node.nodes && node.nodes.length > 0" data-nodrag ng-click="toggle(this)"><span
        class="glyphicon"
        ng-class="{
          'glyphicon-chevron-right': collapsed,
          'glyphicon-chevron-down': !collapsed
        }"></span></a> {{"{{"}}node.title{{"}}"}}
	{{if eq .STR_FILLER3 "view"}}
        <a class="pull-right btn btn-success btn-xs" data-nodrag ng-click="viewLink(this)" title="View Link" style="margin-right: 8px;"><span
        class="glyphicon glyphicon-link"></span></a>
	{{else}}
        <a class="pull-right btn btn-danger btn-xs" data-nodrag ng-click="remove(this)" title="Remove"><span
        class="glyphicon glyphicon-remove"></span></a>
        <a class="pull-right btn btn-primary btn-xs" data-nodrag ng-click="newSubItem(this)" title="New Sub-Item" style="margin-right: 8px;"><span
        class="glyphicon glyphicon-plus"></span></a>
        <a class="pull-right btn btn-warning btn-xs" data-nodrag ng-click="editItem(this)" title="Edit Item" style="margin-right: 8px;"><span
        class="glyphicon glyphicon-pencil"></span></a>
        <a class="pull-right btn btn-success btn-xs" data-nodrag ng-click="viewLink(this)" title="View Link" style="margin-right: 8px;"><span
        class="glyphicon glyphicon-link"></span></a>
	{{end}}
      </div>
      <ol ui-tree-nodes="" ng-model="node.nodes" ng-class="{hidden: collapsed}">
        <li ng-repeat="node in node.nodes" ui-tree-node ng-include="'nodes_renderer.html'">
        </li>
      </ol>
    </script>

    <div class="row">
      <div class="col-sm-12">
        <h3>{{.STR_FILLER2}}</h3>
	{{if eq .STR_FILLER3 "view"}}
	<script>
	    function viewMode() {
	    	var x = document.getElementById("jsonarea");
	    	x.style.display = "none";
		var treeArea = document.getElementsByClassName("col-sm-6")[0];
		treeArea.setAttribute("style","width:100%");
	    }
	</script>
	{{else}}
        <button ng-click="expandAll()">Expand all</button>
        <button ng-click="collapseAll()">Collapse all</button>
        <button ng-click="saveAll()">Save all</button>
        <button ng-click="showHideJSON()">Show/Hide JSON</button>
        <button ng-click="loadStatus()">Load Status</button>
		<button ng-click="refresh()">Refresh</button>
	{{end}}
      </div>
    </div>
	
    <div class="row">
      <div class="col-sm-12">
	{{if eq .STR_FILLER3 "view"}}
	{{else}}
        <h5>Item Details</h5>
		  ID: <input type="text" ng-model="temp.id">
		  Title: <input type="text" ng-model="temp.title">
		  URL: <input type="text" ng-model="temp.url">
		  <!--Nodes: <input type="text" ng-model="temp.nodes">-->
		  <a class="pull-right btn btn-info btn-xs" data-nodrag ng-click="saveItem()" style="margin-right: 8px;"><span
        class="glyphicon glyphicon-ok-sign"></span></a>
	{{end}}
      </div>
    </div>

    <div class="row">
      <div class="col-sm-6">
        <div ui-tree id="tree-root">
          <ol ui-tree-nodes ng-model="data">
            <li ng-repeat="node in data" ui-tree-node ng-include="'nodes_renderer.html'"></li>
          </ol>
        </div>
      </div>

      <div class="col-sm-6" id="jsonarea">
        <div class="info">
          {{"{{"}}info{{"}}"}}
        </div>
        <pre class="code">{{"{{"}} data | json {{"}}"}}</pre>
      </div>
    </div>
  </div> 

</div>
</body>

</html>
{{end}}


